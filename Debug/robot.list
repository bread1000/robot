
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb4c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800bce0  0800bce0  0001bce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2b4  0800c2b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2b4  0800c2b4  0001c2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2bc  0800c2bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2bc  0800c2bc  0001c2bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2c0  0800c2c0  0001c2c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c2c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  200001e4  0800c4a8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  0800c4a8  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001284a  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b93  00000000  00000000  00032a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000355f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  000365a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ee  00000000  00000000  00037410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013be6  00000000  00000000  0005b6fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da824  00000000  00000000  0006f2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149b08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  00149b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bcc4 	.word	0x0800bcc4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bcc4 	.word	0x0800bcc4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fd0f 	bl	8002a7c <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f001 f816 	bl	8002094 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f001 fe71 	bl	8002d60 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f001 f806 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000200 	.word	0x20000200
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f002 fe73 	bl	8003df4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f002 fa4b 	bl	80035f0 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f000 ff98 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	20000248 	.word	0x20000248
 8001188:	40026428 	.word	0x40026428

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f002 f98e 	bl	80034c2 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 ff72 	bl	8002094 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f002 f9c6 	bl	8003550 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 ff63 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 fdd1 	bl	8003df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2039      	movs	r0, #57	; 0x39
 8001290:	f002 f8e1 	bl	8003456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f002 f8fa 	bl	800348e <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <MX_GPIO_Init+0x174>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a55      	ldr	r2, [pc, #340]	; (800141c <MX_GPIO_Init+0x174>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x174>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <MX_GPIO_Init+0x174>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <MX_GPIO_Init+0x174>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <MX_GPIO_Init+0x174>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <MX_GPIO_Init+0x174>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <MX_GPIO_Init+0x174>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x174>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_GPIO_Init+0x174>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a40      	ldr	r2, [pc, #256]	; (800141c <MX_GPIO_Init+0x174>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x174>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_GPIO_Init+0x174>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <MX_GPIO_Init+0x174>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_GPIO_Init+0x174>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_GPIO_Init+0x174>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_GPIO_Init+0x174>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x174>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f248 0181 	movw	r1, #32897	; 0x8081
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <MX_GPIO_Init+0x178>)
 800136e:	f002 fef5 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <MX_GPIO_Init+0x17c>)
 800137a:	f002 feef 	bl	800415c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <MX_GPIO_Init+0x180>)
 8001386:	f002 fee9 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x184>)
 800139e:	f002 fd29 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = rec_left_Pin|rec_right_Pin;
 80013a2:	2306      	movs	r3, #6
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x180>)
 80013b6:	f002 fd1d 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 80013ba:	f248 0381 	movw	r3, #32897	; 0x8081
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_GPIO_Init+0x178>)
 80013d4:	f002 fd0e 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d8:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x17c>)
 80013f2:	f002 fcff 	bl	8003df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x180>)
 8001410:	f002 fcf0 	bl	8003df4 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40021000 	.word	0x40021000

08001430 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if (ch == '\n')
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d109      	bne.n	8001452 <__io_putchar+0x22>
    {
        uint8_t ch2 = '\r';
 800143e:	230d      	movs	r3, #13
 8001440:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001442:	f107 010f 	add.w	r1, r7, #15
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	2201      	movs	r2, #1
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <__io_putchar+0x3c>)
 800144e:	f004 fed0 	bl	80061f2 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001452:	1d39      	adds	r1, r7, #4
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <__io_putchar+0x3c>)
 800145c:	f004 fec9 	bl	80061f2 <HAL_UART_Transmit>
    return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003c4 	.word	0x200003c4

08001470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d110      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3305      	adds	r3, #5
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148a:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001494:	f006 fd88 	bl	8007fa8 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800149e:	f002 fe76 	bl	800418e <HAL_GPIO_TogglePin>
	{
		printf("TIM2 przerwanie\n");
		RC5_ResetPacket();
	}
*/
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000037c 	.word	0x2000037c
 80014b0:	200002e6 	.word	0x200002e6
 80014b4:	0800bce0 	.word	0x0800bce0
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	    	printf("CH 2 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
*/
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <STOP>:

void STOP(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	speed = 0;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <STOP+0x34>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <STOP+0x34>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <STOP+0x38>)
 80014e4:	f002 f80f 	bl	8003506 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <STOP+0x3c>)
 80014f0:	f002 fe34 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <STOP+0x3c>)
 80014fc:	f002 fe2e 	bl	800415c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200002c8 	.word	0x200002c8
 8001508:	200002a8 	.word	0x200002a8
 800150c:	40020800 	.word	0x40020800

08001510 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	drive = atoi((char*)&RX_BUFFER[0]);
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 800151a:	f005 fe95 	bl	8007248 <atoi>
 800151e:	4603      	mov	r3, r0
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001522:	6013      	str	r3, [r2, #0]

	switch(drive)
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d821      	bhi.n	8001570 <HAL_UART_RxCpltCallback+0x60>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_UART_RxCpltCallback+0x24>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001559 	.word	0x08001559
 800153c:	08001561 	.word	0x08001561
 8001540:	08001571 	.word	0x08001571
 8001544:	08001571 	.word	0x08001571
 8001548:	08001569 	.word	0x08001569
		{
		case 0:
			STOP();
 800154c:	f7ff ffc0 	bl	80014d0 <STOP>
			printf("Odebrano: 0\n");
 8001550:	480e      	ldr	r0, [pc, #56]	; (800158c <HAL_UART_RxCpltCallback+0x7c>)
 8001552:	f006 fdaf 	bl	80080b4 <puts>
			break;
 8001556:	e00c      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 1:
			printf("Odebrano: 1\n");
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_UART_RxCpltCallback+0x80>)
 800155a:	f006 fdab 	bl	80080b4 <puts>
			break;
 800155e:	e008      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 2:
			printf("Odebrano: 2\n");
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_UART_RxCpltCallback+0x84>)
 8001562:	f006 fda7 	bl	80080b4 <puts>
			break;
 8001566:	e004      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 5:
			printf("Odebrano: 5\n");
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_UART_RxCpltCallback+0x88>)
 800156a:	f006 fda3 	bl	80080b4 <puts>
			break;
 800156e:	e000      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		default:
			break;
 8001570:	bf00      	nop
		break;
	}
*/

	//wlaczenie nasluchiwania na kanale UART
	HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 8001572:	2201      	movs	r2, #1
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_RxCpltCallback+0x8c>)
 8001578:	f004 fecd 	bl	8006316 <HAL_UART_Receive_IT>

}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002c4 	.word	0x200002c4
 8001588:	20000000 	.word	0x20000000
 800158c:	0800bcf4 	.word	0x0800bcf4
 8001590:	0800bd00 	.word	0x0800bd00
 8001594:	0800bd0c 	.word	0x0800bd0c
 8001598:	0800bd18 	.word	0x0800bd18
 800159c:	200003c4 	.word	0x200003c4

080015a0 <PRZOD>:

void PRZOD(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <PRZOD+0x44>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <PRZOD+0x48>)
 80015ae:	f001 ffaa 	bl	8003506 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 przód
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <PRZOD+0x4c>)
 80015ba:	f002 fdcf 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 przód
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <PRZOD+0x4c>)
 80015c6:	f002 fdc9 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 przód
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <PRZOD+0x50>)
 80015d2:	f002 fdc3 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 przód
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4804      	ldr	r0, [pc, #16]	; (80015ec <PRZOD+0x4c>)
 80015dc:	f002 fdbe 	bl	800415c <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002c8 	.word	0x200002c8
 80015e8:	200002a8 	.word	0x200002a8
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020000 	.word	0x40020000

080015f4 <LEWA>:

void LEWA(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <LEWA+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <LEWA+0x48>)
 8001602:	f001 ff80 	bl	8003506 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LEWA+0x4c>)
 800160e:	f002 fda5 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <LEWA+0x4c>)
 800161a:	f002 fd9f 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <LEWA+0x50>)
 8001626:	f002 fd99 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800162a:	2200      	movs	r2, #0
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <LEWA+0x4c>)
 8001630:	f002 fd94 	bl	800415c <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002c8 	.word	0x200002c8
 800163c:	200002a8 	.word	0x200002a8
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000

08001648 <OBROT_P>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
}

void OBROT_P(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <OBROT_P+0x44>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <OBROT_P+0x48>)
 8001656:	f001 ff56 	bl	8003506 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <OBROT_P+0x4c>)
 8001662:	f002 fd7b 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <OBROT_P+0x4c>)
 800166e:	f002 fd75 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <OBROT_P+0x50>)
 800167a:	f002 fd6f 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 800167e:	2201      	movs	r2, #1
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <OBROT_P+0x4c>)
 8001684:	f002 fd6a 	bl	800415c <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002c8 	.word	0x200002c8
 8001690:	200002a8 	.word	0x200002a8
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000

0800169c <OBROT_L>:

void OBROT_L(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <OBROT_L+0x44>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <OBROT_L+0x48>)
 80016aa:	f001 ff2c 	bl	8003506 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <OBROT_L+0x4c>)
 80016b6:	f002 fd51 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <OBROT_L+0x4c>)
 80016c2:	f002 fd4b 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <OBROT_L+0x50>)
 80016ce:	f002 fd45 	bl	800415c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80016d2:	2200      	movs	r2, #0
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <OBROT_L+0x4c>)
 80016d8:	f002 fd40 	bl	800415c <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002c8 	.word	0x200002c8
 80016e4:	200002a8 	.word	0x200002a8
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020000 	.word	0x40020000

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f6:	f001 f92b 	bl	8002950 <HAL_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fa:	f000 fc61 	bl	8001fc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fe:	f7ff fdd3 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001702:	f7ff fdb1 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 8001706:	f000 ff65 	bl	80025d4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800170a:	f001 f87d 	bl	8002808 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800170e:	f7ff fd3d 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 8001712:	f7ff fc71 	bl	8000ff8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001716:	f000 fe0b 	bl	8002330 <MX_TIM2_Init>
  MX_TIM3_Init();
 800171a:	f000 feb1 	bl	8002480 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  //RC5_Init();

//  volatile static uint16_t reciver[2];
  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 800171e:	2201      	movs	r2, #1
 8001720:	49ab      	ldr	r1, [pc, #684]	; (80019d0 <main+0x2e0>)
 8001722:	48ac      	ldr	r0, [pc, #688]	; (80019d4 <main+0x2e4>)
 8001724:	f001 f9ee 	bl	8002b04 <HAL_ADC_Start_DMA>
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)reciver, 2); //uruchomienie konwersji ADC z DMA

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10 - licznik czasu
 8001728:	48ab      	ldr	r0, [pc, #684]	; (80019d8 <main+0x2e8>)
 800172a:	f003 f9f3 	bl	8004b14 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1); //timer 2 - pomiar czujnika odleglosci - LEWY
 800172e:	2100      	movs	r1, #0
 8001730:	48aa      	ldr	r0, [pc, #680]	; (80019dc <main+0x2ec>)
 8001732:	f003 fbdb 	bl	8004eec <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001736:	2104      	movs	r1, #4
 8001738:	48a8      	ldr	r0, [pc, #672]	; (80019dc <main+0x2ec>)
 800173a:	f003 fbd7 	bl	8004eec <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800173e:	2108      	movs	r1, #8
 8001740:	48a6      	ldr	r0, [pc, #664]	; (80019dc <main+0x2ec>)
 8001742:	f003 fab1 	bl	8004ca8 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1); //timer 2 - pomiar czujnika odleglosci - PRAWY
 8001746:	2100      	movs	r1, #0
 8001748:	48a5      	ldr	r0, [pc, #660]	; (80019e0 <main+0x2f0>)
 800174a:	f003 fbcf 	bl	8004eec <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 800174e:	2104      	movs	r1, #4
 8001750:	48a3      	ldr	r0, [pc, #652]	; (80019e0 <main+0x2f0>)
 8001752:	f003 fbcb 	bl	8004eec <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001756:	2108      	movs	r1, #8
 8001758:	48a1      	ldr	r0, [pc, #644]	; (80019e0 <main+0x2f0>)
 800175a:	f003 faa5 	bl	8004ca8 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 800175e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001762:	f001 f967 	bl	8002a34 <HAL_Delay>
/*  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
*/

  HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 8001766:	2201      	movs	r2, #1
 8001768:	499e      	ldr	r1, [pc, #632]	; (80019e4 <main+0x2f4>)
 800176a:	489f      	ldr	r0, [pc, #636]	; (80019e8 <main+0x2f8>)
 800176c:	f004 fdd3 	bl	8006316 <HAL_UART_Receive_IT>
*/
	  //printf("ADC = %lu (%.3f V)\n", battery_adc, battery_voltage);
	  //HAL_Delay(300);

	  /*-----------Odczyt stanu baterii---------------*/
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <main+0x2e0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177c:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80019ec <main+0x2fc>
 8001780:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001784:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80019f0 <main+0x300>
 8001788:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178c:	4b99      	ldr	r3, [pc, #612]	; (80019f4 <main+0x304>)
 800178e:	edc3 7a00 	vstr	s15, [r3]

	  //float voltage = 3.3f * rec_left / 4096.0f;
	  //printf("ADC = %lu (%.3f V)\n", value, voltage);

	  /*--------------CZUJNIKI ODLEGLOSCI----------------*/
	  uint32_t start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001792:	2100      	movs	r1, #0
 8001794:	4891      	ldr	r0, [pc, #580]	; (80019dc <main+0x2ec>)
 8001796:	f003 ffb3 	bl	8005700 <HAL_TIM_ReadCapturedValue>
 800179a:	60f8      	str	r0, [r7, #12]
	  uint32_t stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800179c:	2104      	movs	r1, #4
 800179e:	488f      	ldr	r0, [pc, #572]	; (80019dc <main+0x2ec>)
 80017a0:	f003 ffae 	bl	8005700 <HAL_TIM_ReadCapturedValue>
 80017a4:	60b8      	str	r0, [r7, #8]
	  distance_left = (stop1 - start1) / 58;
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	4a92      	ldr	r2, [pc, #584]	; (80019f8 <main+0x308>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	4a91      	ldr	r2, [pc, #580]	; (80019fc <main+0x30c>)
 80017b6:	6013      	str	r3, [r2, #0]
	  printf("-------------LEFT--->%lu cm\n", distance_left);
 80017b8:	4b90      	ldr	r3, [pc, #576]	; (80019fc <main+0x30c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4890      	ldr	r0, [pc, #576]	; (8001a00 <main+0x310>)
 80017c0:	f006 fbf2 	bl	8007fa8 <iprintf>
	  HAL_Delay(100);
 80017c4:	2064      	movs	r0, #100	; 0x64
 80017c6:	f001 f935 	bl	8002a34 <HAL_Delay>

	  uint32_t start2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80017ca:	2100      	movs	r1, #0
 80017cc:	4883      	ldr	r0, [pc, #524]	; (80019dc <main+0x2ec>)
 80017ce:	f003 ff97 	bl	8005700 <HAL_TIM_ReadCapturedValue>
 80017d2:	6078      	str	r0, [r7, #4]
	  uint32_t stop2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80017d4:	2104      	movs	r1, #4
 80017d6:	4881      	ldr	r0, [pc, #516]	; (80019dc <main+0x2ec>)
 80017d8:	f003 ff92 	bl	8005700 <HAL_TIM_ReadCapturedValue>
 80017dc:	6038      	str	r0, [r7, #0]
	  distance_right = (stop2 - start2) / 58;
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a84      	ldr	r2, [pc, #528]	; (80019f8 <main+0x308>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	4a85      	ldr	r2, [pc, #532]	; (8001a04 <main+0x314>)
 80017ee:	6013      	str	r3, [r2, #0]
	  printf("-------------RIGHT------>%lu cm\n", distance_right);
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <main+0x314>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4884      	ldr	r0, [pc, #528]	; (8001a08 <main+0x318>)
 80017f8:	f006 fbd6 	bl	8007fa8 <iprintf>
	  HAL_Delay(100);
 80017fc:	2064      	movs	r0, #100	; 0x64
 80017fe:	f001 f919 	bl	8002a34 <HAL_Delay>

	  /* sygnał przychodzący od odbiorników -------------------------------------------IR */
	  /*-------sprawdzenie czy sygnal przychodzi-------*/
	  if (HAL_GPIO_ReadPin(rec_left_GPIO_Port, rec_left_Pin) == GPIO_PIN_RESET)
 8001802:	2102      	movs	r1, #2
 8001804:	4881      	ldr	r0, [pc, #516]	; (8001a0c <main+0x31c>)
 8001806:	f002 fc91 	bl	800412c <HAL_GPIO_ReadPin>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d109      	bne.n	8001824 <main+0x134>
	  {
		  rec_left = true;
 8001810:	4b7f      	ldr	r3, [pc, #508]	; (8001a10 <main+0x320>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
		  printf("lewy\n");
 8001816:	487f      	ldr	r0, [pc, #508]	; (8001a14 <main+0x324>)
 8001818:	f006 fc4c 	bl	80080b4 <puts>
		  HAL_Delay(100);
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	f001 f909 	bl	8002a34 <HAL_Delay>
 8001822:	e002      	b.n	800182a <main+0x13a>
	  }else
		  rec_left = false;
 8001824:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <main+0x320>)
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(rec_right_GPIO_Port, rec_right_Pin) == GPIO_PIN_RESET)
 800182a:	2104      	movs	r1, #4
 800182c:	4877      	ldr	r0, [pc, #476]	; (8001a0c <main+0x31c>)
 800182e:	f002 fc7d 	bl	800412c <HAL_GPIO_ReadPin>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d109      	bne.n	800184c <main+0x15c>
	  {
		  rec_right = true;
 8001838:	4b77      	ldr	r3, [pc, #476]	; (8001a18 <main+0x328>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
		  printf("prawy\n");
 800183e:	4877      	ldr	r0, [pc, #476]	; (8001a1c <main+0x32c>)
 8001840:	f006 fc38 	bl	80080b4 <puts>
		  HAL_Delay(100);
 8001844:	2064      	movs	r0, #100	; 0x64
 8001846:	f001 f8f5 	bl	8002a34 <HAL_Delay>
 800184a:	e002      	b.n	8001852 <main+0x162>
	  }else
		  rec_right = false;
 800184c:	4b72      	ldr	r3, [pc, #456]	; (8001a18 <main+0x328>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]

	  /*-----SWITCH DLA DANYCH ZE STACJI-------*/
	  switch(drive)
 8001852:	4b73      	ldr	r3, [pc, #460]	; (8001a20 <main+0x330>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b05      	cmp	r3, #5
 8001858:	d85e      	bhi.n	8001918 <main+0x228>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <main+0x170>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001879 	.word	0x08001879
 8001864:	0800188b 	.word	0x0800188b
 8001868:	0800189f 	.word	0x0800189f
 800186c:	08001919 	.word	0x08001919
 8001870:	08001919 	.word	0x08001919
 8001874:	080018b3 	.word	0x080018b3
	  {
	  	  case 0:
	  		  STOP();
 8001878:	f7ff fe2a 	bl	80014d0 <STOP>
	  		  //nadawanie informacji przez UART
	  		  printf("STOP\n");
 800187c:	4869      	ldr	r0, [pc, #420]	; (8001a24 <main+0x334>)
 800187e:	f006 fc19 	bl	80080b4 <puts>
	  		  drive = 10;
 8001882:	4b67      	ldr	r3, [pc, #412]	; (8001a20 <main+0x330>)
 8001884:	220a      	movs	r2, #10
 8001886:	601a      	str	r2, [r3, #0]
	  		  break;
 8001888:	e047      	b.n	800191a <main+0x22a>
	  	  case 1:
	  		  //info, ze stacja wykryla przed soba robota
	  		  printf("--- UWAGA STACJA WYKRYLA ROBOTA PRZED SOBA\n");
 800188a:	4867      	ldr	r0, [pc, #412]	; (8001a28 <main+0x338>)
 800188c:	f006 fc12 	bl	80080b4 <puts>
	  		  STATION = true;
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <main+0x33c>)
 8001892:	2201      	movs	r2, #1
 8001894:	701a      	strb	r2, [r3, #0]
	  		  drive = 10;
 8001896:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <main+0x330>)
 8001898:	220a      	movs	r2, #10
 800189a:	601a      	str	r2, [r3, #0]
	  		  break;
 800189c:	e03d      	b.n	800191a <main+0x22a>
	  	  case 2:
	  		//info, ze stacja wykryla przed soba robota
			  printf("--- ROBOT SIE ODDALIL\n");
 800189e:	4864      	ldr	r0, [pc, #400]	; (8001a30 <main+0x340>)
 80018a0:	f006 fc08 	bl	80080b4 <puts>
			  STATION = false;
 80018a4:	4b61      	ldr	r3, [pc, #388]	; (8001a2c <main+0x33c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
			  drive = 10;
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <main+0x330>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	601a      	str	r2, [r3, #0]
			  break;
 80018b0:	e033      	b.n	800191a <main+0x22a>
	  	  case 5:
	  		  //TRYB AUTOMATYCZNY DOKOWANIA
			  STOP();
 80018b2:	f7ff fe0d 	bl	80014d0 <STOP>
			  if (automat == false){
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <main+0x344>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	f083 0301 	eor.w	r3, r3, #1
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <main+0x1e6>
				  STOP();
 80018c4:	f7ff fe04 	bl	80014d0 <STOP>
				  automat = true;
 80018c8:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <main+0x344>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> ON\n");
 80018ce:	485a      	ldr	r0, [pc, #360]	; (8001a38 <main+0x348>)
 80018d0:	f006 fbf0 	bl	80080b4 <puts>
 80018d4:	e01c      	b.n	8001910 <main+0x220>
			  }else{
				  STOP();
 80018d6:	f7ff fdfb 	bl	80014d0 <STOP>
				  spin_right = false;
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <main+0x34c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <main+0x350>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
				  automat = false;
 80018e6:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <main+0x344>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
				  left = false;
 80018ec:	4b55      	ldr	r3, [pc, #340]	; (8001a44 <main+0x354>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
				  left_center = false;
 80018f2:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <main+0x358>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
				  center = false;
 80018f8:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <main+0x35c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
				  right_center = false;
 80018fe:	4b54      	ldr	r3, [pc, #336]	; (8001a50 <main+0x360>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
				  right = false;
 8001904:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <main+0x364>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> OFF\n");
 800190a:	4853      	ldr	r0, [pc, #332]	; (8001a58 <main+0x368>)
 800190c:	f006 fbd2 	bl	80080b4 <puts>
			  }
			  drive = 10;
 8001910:	4b43      	ldr	r3, [pc, #268]	; (8001a20 <main+0x330>)
 8001912:	220a      	movs	r2, #10
 8001914:	601a      	str	r2, [r3, #0]
			  break;
 8001916:	e000      	b.n	800191a <main+0x22a>
		  default:
			  break;
 8001918:	bf00      	nop
	  default:
		  break;
	  }
*/

	  if (automat == true)
 800191a:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <main+0x344>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f43f af26 	beq.w	8001770 <main+0x80>
	  {
		  //lewy NIE; prawy NIE
		  if (	(rec_left == false && spin_right == false) ||
 8001924:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <main+0x320>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <main+0x250>
 8001932:	4b42      	ldr	r3, [pc, #264]	; (8001a3c <main+0x34c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d136      	bne.n	80019ae <main+0x2be>
				//lewy NIE; prawy TAK
				(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <main+0x320>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f083 0301 	eor.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
		  if (	(rec_left == false && spin_right == false) ||
 800194a:	2b00      	cmp	r3, #0
 800194c:	d011      	beq.n	8001972 <main+0x282>
				(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 800194e:	4b32      	ldr	r3, [pc, #200]	; (8001a18 <main+0x328>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00d      	beq.n	8001972 <main+0x282>
 8001956:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <main+0x34c>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	f083 0301 	eor.w	r3, r3, #1
 800195e:	b2db      	uxtb	r3, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <main+0x282>
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <main+0x33c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f083 0301 	eor.w	r3, r3, #1
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11d      	bne.n	80019ae <main+0x2be>
				//lewy NIE; prawy TAK + jest przy samej stacji + nie na wprost
				(rec_left == false && rec_right == true && STATION == true && spin_right == false && distance_left > 12 && distance_right > 12) )
 8001972:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <main+0x320>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	f083 0301 	eor.w	r3, r3, #1
 800197a:	b2db      	uxtb	r3, r3
				(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 800197c:	2b00      	cmp	r3, #0
 800197e:	d06d      	beq.n	8001a5c <main+0x36c>
				(rec_left == false && rec_right == true && STATION == true && spin_right == false && distance_left > 12 && distance_right > 12) )
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <main+0x328>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d069      	beq.n	8001a5c <main+0x36c>
 8001988:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <main+0x33c>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d065      	beq.n	8001a5c <main+0x36c>
 8001990:	4b2a      	ldr	r3, [pc, #168]	; (8001a3c <main+0x34c>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d05e      	beq.n	8001a5c <main+0x36c>
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <main+0x30c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d95a      	bls.n	8001a5c <main+0x36c>
 80019a6:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <main+0x314>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b0c      	cmp	r3, #12
 80019ac:	d956      	bls.n	8001a5c <main+0x36c>
		  {
			  left = false;
 80019ae:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <main+0x354>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
			  right = false;
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <main+0x364>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 80019ba:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <main+0x350>)
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
			  spin_right = true;
 80019c0:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <main+0x34c>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
			  center = false;
 80019c6:	4b21      	ldr	r3, [pc, #132]	; (8001a4c <main+0x35c>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
 80019cc:	e107      	b.n	8001bde <main+0x4ee>
 80019ce:	bf00      	nop
 80019d0:	200002bc 	.word	0x200002bc
 80019d4:	20000200 	.word	0x20000200
 80019d8:	2000037c 	.word	0x2000037c
 80019dc:	200002ec 	.word	0x200002ec
 80019e0:	20000334 	.word	0x20000334
 80019e4:	200002c4 	.word	0x200002c4
 80019e8:	200003c4 	.word	0x200003c4
 80019ec:	40533333 	.word	0x40533333
 80019f0:	457ff000 	.word	0x457ff000
 80019f4:	200002cc 	.word	0x200002cc
 80019f8:	8d3dcb09 	.word	0x8d3dcb09
 80019fc:	200002dc 	.word	0x200002dc
 8001a00:	0800bd24 	.word	0x0800bd24
 8001a04:	200002e0 	.word	0x200002e0
 8001a08:	0800bd44 	.word	0x0800bd44
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	200002d0 	.word	0x200002d0
 8001a14:	0800bd68 	.word	0x0800bd68
 8001a18:	200002d1 	.word	0x200002d1
 8001a1c:	0800bd70 	.word	0x0800bd70
 8001a20:	20000000 	.word	0x20000000
 8001a24:	0800bd78 	.word	0x0800bd78
 8001a28:	0800bd80 	.word	0x0800bd80
 8001a2c:	200002e4 	.word	0x200002e4
 8001a30:	0800bdac 	.word	0x0800bdac
 8001a34:	200002c0 	.word	0x200002c0
 8001a38:	0800bdc4 	.word	0x0800bdc4
 8001a3c:	200002d2 	.word	0x200002d2
 8001a40:	200002d3 	.word	0x200002d3
 8001a44:	200002d6 	.word	0x200002d6
 8001a48:	200002d8 	.word	0x200002d8
 8001a4c:	200002d4 	.word	0x200002d4
 8001a50:	200002d7 	.word	0x200002d7
 8001a54:	200002d5 	.word	0x200002d5
 8001a58:	0800bdd4 	.word	0x0800bdd4
		  }
		  //lewy TAK; prawy NIE
		  else if ( (rec_left == true && rec_right == false && spin_left == false && STATION == false) ||
 8001a5c:	4ba1      	ldr	r3, [pc, #644]	; (8001ce4 <main+0x5f4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d014      	beq.n	8001a8e <main+0x39e>
 8001a64:	4ba0      	ldr	r3, [pc, #640]	; (8001ce8 <main+0x5f8>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f083 0301 	eor.w	r3, r3, #1
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00d      	beq.n	8001a8e <main+0x39e>
 8001a72:	4b9e      	ldr	r3, [pc, #632]	; (8001cec <main+0x5fc>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	f083 0301 	eor.w	r3, r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <main+0x39e>
 8001a80:	4b9b      	ldr	r3, [pc, #620]	; (8001cf0 <main+0x600>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	f083 0301 	eor.w	r3, r3, #1
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d11d      	bne.n	8001aca <main+0x3da>
				  //lewy TAK; prawy NIE + jest przy samej stacji + nie na wprost
				  (rec_left == true && rec_right == false && STATION == true && spin_left == false && distance_left > 12 && distance_right > 12) )
 8001a8e:	4b95      	ldr	r3, [pc, #596]	; (8001ce4 <main+0x5f4>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
		  else if ( (rec_left == true && rec_right == false && spin_left == false && STATION == false) ||
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d029      	beq.n	8001aea <main+0x3fa>
				  (rec_left == true && rec_right == false && STATION == true && spin_left == false && distance_left > 12 && distance_right > 12) )
 8001a96:	4b94      	ldr	r3, [pc, #592]	; (8001ce8 <main+0x5f8>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	f083 0301 	eor.w	r3, r3, #1
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d022      	beq.n	8001aea <main+0x3fa>
 8001aa4:	4b92      	ldr	r3, [pc, #584]	; (8001cf0 <main+0x600>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01e      	beq.n	8001aea <main+0x3fa>
 8001aac:	4b8f      	ldr	r3, [pc, #572]	; (8001cec <main+0x5fc>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	f083 0301 	eor.w	r3, r3, #1
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d017      	beq.n	8001aea <main+0x3fa>
 8001aba:	4b8e      	ldr	r3, [pc, #568]	; (8001cf4 <main+0x604>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b0c      	cmp	r3, #12
 8001ac0:	d913      	bls.n	8001aea <main+0x3fa>
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	; (8001cf8 <main+0x608>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b0c      	cmp	r3, #12
 8001ac8:	d90f      	bls.n	8001aea <main+0x3fa>
		  {
			  left = false;
 8001aca:	4b8c      	ldr	r3, [pc, #560]	; (8001cfc <main+0x60c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001ad0:	4b8b      	ldr	r3, [pc, #556]	; (8001d00 <main+0x610>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
			  spin_left = true;
 8001ad6:	4b85      	ldr	r3, [pc, #532]	; (8001cec <main+0x5fc>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001adc:	4b89      	ldr	r3, [pc, #548]	; (8001d04 <main+0x614>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
			  center = false;
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <main+0x618>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e079      	b.n	8001bde <main+0x4ee>
		  }
		  //lewy TAK; prawy TAK
		  else if (rec_left == true && rec_right == true && center == false)
 8001aea:	4b7e      	ldr	r3, [pc, #504]	; (8001ce4 <main+0x5f4>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01a      	beq.n	8001b28 <main+0x438>
 8001af2:	4b7d      	ldr	r3, [pc, #500]	; (8001ce8 <main+0x5f8>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d016      	beq.n	8001b28 <main+0x438>
 8001afa:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <main+0x618>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	f083 0301 	eor.w	r3, r3, #1
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00f      	beq.n	8001b28 <main+0x438>
		  {
			  left = false;
 8001b08:	4b7c      	ldr	r3, [pc, #496]	; (8001cfc <main+0x60c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <main+0x610>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 8001b14:	4b75      	ldr	r3, [pc, #468]	; (8001cec <main+0x5fc>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001b1a:	4b7a      	ldr	r3, [pc, #488]	; (8001d04 <main+0x614>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
			  center = true;
 8001b20:	4b79      	ldr	r3, [pc, #484]	; (8001d08 <main+0x618>)
 8001b22:	2201      	movs	r2, #1
 8001b24:	701a      	strb	r2, [r3, #0]
 8001b26:	e05a      	b.n	8001bde <main+0x4ee>
		  }
		  //lewy TAK; prawy NIE + jest przy samej stacji + na wprost
		  else if (rec_left == true && rec_right == false && STATION == true && left == false && distance_left < 12 && distance_right < 12)
 8001b28:	4b6e      	ldr	r3, [pc, #440]	; (8001ce4 <main+0x5f4>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d029      	beq.n	8001b84 <main+0x494>
 8001b30:	4b6d      	ldr	r3, [pc, #436]	; (8001ce8 <main+0x5f8>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d022      	beq.n	8001b84 <main+0x494>
 8001b3e:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <main+0x600>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01e      	beq.n	8001b84 <main+0x494>
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <main+0x60c>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	f083 0301 	eor.w	r3, r3, #1
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d017      	beq.n	8001b84 <main+0x494>
 8001b54:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <main+0x604>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b0b      	cmp	r3, #11
 8001b5a:	d813      	bhi.n	8001b84 <main+0x494>
 8001b5c:	4b66      	ldr	r3, [pc, #408]	; (8001cf8 <main+0x608>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b0b      	cmp	r3, #11
 8001b62:	d80f      	bhi.n	8001b84 <main+0x494>
		  {
			  left = true;
 8001b64:	4b65      	ldr	r3, [pc, #404]	; (8001cfc <main+0x60c>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001b6a:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <main+0x610>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 8001b70:	4b5e      	ldr	r3, [pc, #376]	; (8001cec <main+0x5fc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001b76:	4b63      	ldr	r3, [pc, #396]	; (8001d04 <main+0x614>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
			  center = false;
 8001b7c:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <main+0x618>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
 8001b82:	e02c      	b.n	8001bde <main+0x4ee>
		  }
		  //lewy NIE; prawy TAK + jest przy samej stacji + na wprost
		  else if (rec_left == false && rec_right == true && STATION == true && right == false && distance_left < 12 && distance_right < 12)
 8001b84:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <main+0x5f4>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d025      	beq.n	8001bde <main+0x4ee>
 8001b92:	4b55      	ldr	r3, [pc, #340]	; (8001ce8 <main+0x5f8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d021      	beq.n	8001bde <main+0x4ee>
 8001b9a:	4b55      	ldr	r3, [pc, #340]	; (8001cf0 <main+0x600>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01d      	beq.n	8001bde <main+0x4ee>
 8001ba2:	4b57      	ldr	r3, [pc, #348]	; (8001d00 <main+0x610>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d016      	beq.n	8001bde <main+0x4ee>
 8001bb0:	4b50      	ldr	r3, [pc, #320]	; (8001cf4 <main+0x604>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b0b      	cmp	r3, #11
 8001bb6:	d812      	bhi.n	8001bde <main+0x4ee>
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <main+0x608>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b0b      	cmp	r3, #11
 8001bbe:	d80e      	bhi.n	8001bde <main+0x4ee>
		  {
			  left = false;
 8001bc0:	4b4e      	ldr	r3, [pc, #312]	; (8001cfc <main+0x60c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
			  right = true;
 8001bc6:	4b4e      	ldr	r3, [pc, #312]	; (8001d00 <main+0x610>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 8001bcc:	4b47      	ldr	r3, [pc, #284]	; (8001cec <main+0x5fc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001bd2:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <main+0x614>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
			  center = false;
 8001bd8:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <main+0x618>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
		  }

		  if (STATION == true && center == true && distance_left <= 12 && distance_right <= 12)
 8001bde:	4b44      	ldr	r3, [pc, #272]	; (8001cf0 <main+0x600>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00e      	beq.n	8001c04 <main+0x514>
 8001be6:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <main+0x618>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00a      	beq.n	8001c04 <main+0x514>
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <main+0x604>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d806      	bhi.n	8001c04 <main+0x514>
 8001bf6:	4b40      	ldr	r3, [pc, #256]	; (8001cf8 <main+0x608>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2b0c      	cmp	r3, #12
 8001bfc:	d802      	bhi.n	8001c04 <main+0x514>
		  {
			  STOP();
 8001bfe:	f7ff fc67 	bl	80014d0 <STOP>
 8001c02:	e1d1      	b.n	8001fa8 <main+0x8b8>
		  }
		  else if (spin_left == true)
 8001c04:	4b39      	ldr	r3, [pc, #228]	; (8001cec <main+0x5fc>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8083 	beq.w	8001d14 <main+0x624>
		  {
			  if (speed != 40)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <main+0x61c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b28      	cmp	r3, #40	; 0x28
 8001c14:	f43f adac 	beq.w	8001770 <main+0x80>
			  {
				  STOP();
 8001c18:	f7ff fc5a 	bl	80014d0 <STOP>
				  OBROT_L();
 8001c1c:	f7ff fd3e 	bl	800169c <OBROT_L>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <main+0x61c>)
 8001c22:	2228      	movs	r2, #40	; 0x28
 8001c24:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c2c:	4838      	ldr	r0, [pc, #224]	; (8001d10 <main+0x620>)
 8001c2e:	f002 fa95 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c38:	4835      	ldr	r0, [pc, #212]	; (8001d10 <main+0x620>)
 8001c3a:	f002 fa8f 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c3e:	2064      	movs	r0, #100	; 0x64
 8001c40:	f000 fef8 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4a:	4831      	ldr	r0, [pc, #196]	; (8001d10 <main+0x620>)
 8001c4c:	f002 fa86 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001c50:	2032      	movs	r0, #50	; 0x32
 8001c52:	f000 feef 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c5c:	482c      	ldr	r0, [pc, #176]	; (8001d10 <main+0x620>)
 8001c5e:	f002 fa7d 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c68:	4829      	ldr	r0, [pc, #164]	; (8001d10 <main+0x620>)
 8001c6a:	f002 fa77 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c6e:	2064      	movs	r0, #100	; 0x64
 8001c70:	f000 fee0 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7a:	4825      	ldr	r0, [pc, #148]	; (8001d10 <main+0x620>)
 8001c7c:	f002 fa6e 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001c80:	2032      	movs	r0, #50	; 0x32
 8001c82:	f000 fed7 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c86:	2201      	movs	r2, #1
 8001c88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c8c:	4820      	ldr	r0, [pc, #128]	; (8001d10 <main+0x620>)
 8001c8e:	f002 fa65 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c98:	481d      	ldr	r0, [pc, #116]	; (8001d10 <main+0x620>)
 8001c9a:	f002 fa5f 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c9e:	2064      	movs	r0, #100	; 0x64
 8001ca0:	f000 fec8 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001caa:	4819      	ldr	r0, [pc, #100]	; (8001d10 <main+0x620>)
 8001cac:	f002 fa56 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001cb0:	2032      	movs	r0, #50	; 0x32
 8001cb2:	f000 febf 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cbc:	4814      	ldr	r0, [pc, #80]	; (8001d10 <main+0x620>)
 8001cbe:	f002 fa4d 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cc8:	4811      	ldr	r0, [pc, #68]	; (8001d10 <main+0x620>)
 8001cca:	f002 fa47 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001cce:	2064      	movs	r0, #100	; 0x64
 8001cd0:	f000 feb0 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <main+0x620>)
 8001cdc:	f002 fa3e 	bl	800415c <HAL_GPIO_WritePin>
 8001ce0:	e546      	b.n	8001770 <main+0x80>
 8001ce2:	bf00      	nop
 8001ce4:	200002d0 	.word	0x200002d0
 8001ce8:	200002d1 	.word	0x200002d1
 8001cec:	200002d3 	.word	0x200002d3
 8001cf0:	200002e4 	.word	0x200002e4
 8001cf4:	200002dc 	.word	0x200002dc
 8001cf8:	200002e0 	.word	0x200002e0
 8001cfc:	200002d6 	.word	0x200002d6
 8001d00:	200002d5 	.word	0x200002d5
 8001d04:	200002d2 	.word	0x200002d2
 8001d08:	200002d4 	.word	0x200002d4
 8001d0c:	200002c8 	.word	0x200002c8
 8001d10:	40020800 	.word	0x40020800
			  }
		  }
		  else if (spin_right == true)
 8001d14:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <main+0x8bc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d069      	beq.n	8001df0 <main+0x700>
	  	  {
			  if (speed != 40)
 8001d1c:	4ba4      	ldr	r3, [pc, #656]	; (8001fb0 <main+0x8c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b28      	cmp	r3, #40	; 0x28
 8001d22:	f43f ad25 	beq.w	8001770 <main+0x80>
			  {
				  STOP();
 8001d26:	f7ff fbd3 	bl	80014d0 <STOP>
				  OBROT_P();
 8001d2a:	f7ff fc8d 	bl	8001648 <OBROT_P>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001d2e:	4ba0      	ldr	r3, [pc, #640]	; (8001fb0 <main+0x8c0>)
 8001d30:	2228      	movs	r2, #40	; 0x28
 8001d32:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d3a:	489e      	ldr	r0, [pc, #632]	; (8001fb4 <main+0x8c4>)
 8001d3c:	f002 fa0e 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d46:	489b      	ldr	r0, [pc, #620]	; (8001fb4 <main+0x8c4>)
 8001d48:	f002 fa08 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001d4c:	2064      	movs	r0, #100	; 0x64
 8001d4e:	f000 fe71 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d58:	4896      	ldr	r0, [pc, #600]	; (8001fb4 <main+0x8c4>)
 8001d5a:	f002 f9ff 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001d5e:	2032      	movs	r0, #50	; 0x32
 8001d60:	f000 fe68 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d6a:	4892      	ldr	r0, [pc, #584]	; (8001fb4 <main+0x8c4>)
 8001d6c:	f002 f9f6 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d76:	488f      	ldr	r0, [pc, #572]	; (8001fb4 <main+0x8c4>)
 8001d78:	f002 f9f0 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f000 fe59 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d88:	488a      	ldr	r0, [pc, #552]	; (8001fb4 <main+0x8c4>)
 8001d8a:	f002 f9e7 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001d8e:	2032      	movs	r0, #50	; 0x32
 8001d90:	f000 fe50 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001d94:	2201      	movs	r2, #1
 8001d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9a:	4886      	ldr	r0, [pc, #536]	; (8001fb4 <main+0x8c4>)
 8001d9c:	f002 f9de 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001da6:	4883      	ldr	r0, [pc, #524]	; (8001fb4 <main+0x8c4>)
 8001da8:	f002 f9d8 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f000 fe41 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db8:	487e      	ldr	r0, [pc, #504]	; (8001fb4 <main+0x8c4>)
 8001dba:	f002 f9cf 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001dbe:	2032      	movs	r0, #50	; 0x32
 8001dc0:	f000 fe38 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dca:	487a      	ldr	r0, [pc, #488]	; (8001fb4 <main+0x8c4>)
 8001dcc:	f002 f9c6 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd6:	4877      	ldr	r0, [pc, #476]	; (8001fb4 <main+0x8c4>)
 8001dd8:	f002 f9c0 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001ddc:	2064      	movs	r0, #100	; 0x64
 8001dde:	f000 fe29 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de8:	4872      	ldr	r0, [pc, #456]	; (8001fb4 <main+0x8c4>)
 8001dea:	f002 f9b7 	bl	800415c <HAL_GPIO_WritePin>
 8001dee:	e4bf      	b.n	8001770 <main+0x80>
			  }
	  	  }
		  else if (left == true)
 8001df0:	4b71      	ldr	r3, [pc, #452]	; (8001fb8 <main+0x8c8>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d069      	beq.n	8001ecc <main+0x7dc>
		  {
			  if (speed != 40)
 8001df8:	4b6d      	ldr	r3, [pc, #436]	; (8001fb0 <main+0x8c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b28      	cmp	r3, #40	; 0x28
 8001dfe:	f43f acb7 	beq.w	8001770 <main+0x80>
			  {
				  STOP();
 8001e02:	f7ff fb65 	bl	80014d0 <STOP>
				  LEWA();
 8001e06:	f7ff fbf5 	bl	80015f4 <LEWA>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001e0a:	4b69      	ldr	r3, [pc, #420]	; (8001fb0 <main+0x8c0>)
 8001e0c:	2228      	movs	r2, #40	; 0x28
 8001e0e:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e10:	2201      	movs	r2, #1
 8001e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e16:	4867      	ldr	r0, [pc, #412]	; (8001fb4 <main+0x8c4>)
 8001e18:	f002 f9a0 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e22:	4864      	ldr	r0, [pc, #400]	; (8001fb4 <main+0x8c4>)
 8001e24:	f002 f99a 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001e28:	2064      	movs	r0, #100	; 0x64
 8001e2a:	f000 fe03 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e34:	485f      	ldr	r0, [pc, #380]	; (8001fb4 <main+0x8c4>)
 8001e36:	f002 f991 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001e3a:	2032      	movs	r0, #50	; 0x32
 8001e3c:	f000 fdfa 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e46:	485b      	ldr	r0, [pc, #364]	; (8001fb4 <main+0x8c4>)
 8001e48:	f002 f988 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e52:	4858      	ldr	r0, [pc, #352]	; (8001fb4 <main+0x8c4>)
 8001e54:	f002 f982 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001e58:	2064      	movs	r0, #100	; 0x64
 8001e5a:	f000 fdeb 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e64:	4853      	ldr	r0, [pc, #332]	; (8001fb4 <main+0x8c4>)
 8001e66:	f002 f979 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001e6a:	2032      	movs	r0, #50	; 0x32
 8001e6c:	f000 fde2 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001e70:	2201      	movs	r2, #1
 8001e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e76:	484f      	ldr	r0, [pc, #316]	; (8001fb4 <main+0x8c4>)
 8001e78:	f002 f970 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e82:	484c      	ldr	r0, [pc, #304]	; (8001fb4 <main+0x8c4>)
 8001e84:	f002 f96a 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001e88:	2064      	movs	r0, #100	; 0x64
 8001e8a:	f000 fdd3 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e94:	4847      	ldr	r0, [pc, #284]	; (8001fb4 <main+0x8c4>)
 8001e96:	f002 f961 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001e9a:	2032      	movs	r0, #50	; 0x32
 8001e9c:	f000 fdca 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea6:	4843      	ldr	r0, [pc, #268]	; (8001fb4 <main+0x8c4>)
 8001ea8:	f002 f958 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001eb2:	4840      	ldr	r0, [pc, #256]	; (8001fb4 <main+0x8c4>)
 8001eb4:	f002 f952 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001eb8:	2064      	movs	r0, #100	; 0x64
 8001eba:	f000 fdbb 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ec4:	483b      	ldr	r0, [pc, #236]	; (8001fb4 <main+0x8c4>)
 8001ec6:	f002 f949 	bl	800415c <HAL_GPIO_WritePin>
 8001eca:	e451      	b.n	8001770 <main+0x80>
			  }
		  }
	  	  else if (center == true)
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	; (8001fbc <main+0x8cc>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f43f ac4d 	beq.w	8001770 <main+0x80>
		  {
			  if (speed != 40)
 8001ed6:	4b36      	ldr	r3, [pc, #216]	; (8001fb0 <main+0x8c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b28      	cmp	r3, #40	; 0x28
 8001edc:	f43f ac48 	beq.w	8001770 <main+0x80>
			  {
				  STOP();
 8001ee0:	f7ff faf6 	bl	80014d0 <STOP>
				  PRZOD();
 8001ee4:	f7ff fb5c 	bl	80015a0 <PRZOD>
				  //zwiekszenie predkosci x3
				  speed = 40;
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <main+0x8c0>)
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef4:	482f      	ldr	r0, [pc, #188]	; (8001fb4 <main+0x8c4>)
 8001ef6:	f002 f931 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	482c      	ldr	r0, [pc, #176]	; (8001fb4 <main+0x8c4>)
 8001f02:	f002 f92b 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f000 fd94 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	4828      	ldr	r0, [pc, #160]	; (8001fb4 <main+0x8c4>)
 8001f14:	f002 f922 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	f000 fd8b 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	4823      	ldr	r0, [pc, #140]	; (8001fb4 <main+0x8c4>)
 8001f26:	f002 f919 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	4820      	ldr	r0, [pc, #128]	; (8001fb4 <main+0x8c4>)
 8001f32:	f002 f913 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f36:	2064      	movs	r0, #100	; 0x64
 8001f38:	f000 fd7c 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f42:	481c      	ldr	r0, [pc, #112]	; (8001fb4 <main+0x8c4>)
 8001f44:	f002 f90a 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f48:	2032      	movs	r0, #50	; 0x32
 8001f4a:	f000 fd73 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4817      	ldr	r0, [pc, #92]	; (8001fb4 <main+0x8c4>)
 8001f56:	f002 f901 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f60:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <main+0x8c4>)
 8001f62:	f002 f8fb 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f66:	2064      	movs	r0, #100	; 0x64
 8001f68:	f000 fd64 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f72:	4810      	ldr	r0, [pc, #64]	; (8001fb4 <main+0x8c4>)
 8001f74:	f002 f8f2 	bl	800415c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f78:	2032      	movs	r0, #50	; 0x32
 8001f7a:	f000 fd5b 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <main+0x8c4>)
 8001f86:	f002 f8e9 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <main+0x8c4>)
 8001f92:	f002 f8e3 	bl	800415c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	f000 fd4c 	bl	8002a34 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa2:	4804      	ldr	r0, [pc, #16]	; (8001fb4 <main+0x8c4>)
 8001fa4:	f002 f8da 	bl	800415c <HAL_GPIO_WritePin>
  {
 8001fa8:	f7ff bbe2 	b.w	8001770 <main+0x80>
 8001fac:	200002d2 	.word	0x200002d2
 8001fb0:	200002c8 	.word	0x200002c8
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	200002d6 	.word	0x200002d6
 8001fbc:	200002d4 	.word	0x200002d4

08001fc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b094      	sub	sp, #80	; 0x50
 8001fc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	2230      	movs	r2, #48	; 0x30
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 f968 	bl	80072a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	4b28      	ldr	r3, [pc, #160]	; (800208c <SystemClock_Config+0xcc>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <SystemClock_Config+0xcc>)
 8001fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff4:	4b25      	ldr	r3, [pc, #148]	; (800208c <SystemClock_Config+0xcc>)
 8001ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002000:	2300      	movs	r3, #0
 8002002:	607b      	str	r3, [r7, #4]
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <SystemClock_Config+0xd0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	; (8002090 <SystemClock_Config+0xd0>)
 800200a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	4b1f      	ldr	r3, [pc, #124]	; (8002090 <SystemClock_Config+0xd0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800201c:	2302      	movs	r3, #2
 800201e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002020:	2301      	movs	r3, #1
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002024:	2310      	movs	r3, #16
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002028:	2302      	movs	r3, #2
 800202a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800202c:	2300      	movs	r3, #0
 800202e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002030:	2308      	movs	r3, #8
 8002032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8002034:	23a0      	movs	r3, #160	; 0xa0
 8002036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002038:	2302      	movs	r3, #2
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800203c:	2304      	movs	r3, #4
 800203e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002040:	f107 0320 	add.w	r3, r7, #32
 8002044:	4618      	mov	r0, r3
 8002046:	f002 f8bd 	bl	80041c4 <HAL_RCC_OscConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002050:	f000 f820 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002054:	230f      	movs	r3, #15
 8002056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002058:	2302      	movs	r3, #2
 800205a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002060:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800206a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	2105      	movs	r1, #5
 8002072:	4618      	mov	r0, r3
 8002074:	f002 fb1e 	bl	80046b4 <HAL_RCC_ClockConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800207e:	f000 f809 	bl	8002094 <Error_Handler>
  }
}
 8002082:	bf00      	nop
 8002084:	3750      	adds	r7, #80	; 0x50
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40023800 	.word	0x40023800
 8002090:	40007000 	.word	0x40007000

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_MspInit+0x4c>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_MspInit+0x4c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_MspInit+0x4c>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 fc5a 	bl	80029f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002148:	4802      	ldr	r0, [pc, #8]	; (8002154 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800214a:	f002 ffab 	bl	80050a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2000037c 	.word	0x2000037c

08002158 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800215c:	4802      	ldr	r0, [pc, #8]	; (8002168 <USART2_IRQHandler+0x10>)
 800215e:	f004 f90b 	bl	8006378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	200003c4 	.word	0x200003c4

0800216c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <DMA2_Stream1_IRQHandler+0x10>)
 8002172:	f001 fbd5 	bl	8003920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000248 	.word	0x20000248

08002180 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
	return 1;
 8002184:	2301      	movs	r3, #1
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <_kill>:

int _kill(int pid, int sig)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800219a:	f005 f859 	bl	8007250 <__errno>
 800219e:	4603      	mov	r3, r0
 80021a0:	2216      	movs	r2, #22
 80021a2:	601a      	str	r2, [r3, #0]
	return -1;
 80021a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <_exit>:

void _exit (int status)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f7ff ffe7 	bl	8002190 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021c2:	e7fe      	b.n	80021c2 <_exit+0x12>

080021c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	e00a      	b.n	80021ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021d6:	f3af 8000 	nop.w
 80021da:	4601      	mov	r1, r0
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	60ba      	str	r2, [r7, #8]
 80021e2:	b2ca      	uxtb	r2, r1
 80021e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	3301      	adds	r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	dbf0      	blt.n	80021d6 <_read+0x12>
	}

return len;
 80021f4:	687b      	ldr	r3, [r7, #4]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	e009      	b.n	8002224 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	60ba      	str	r2, [r7, #8]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff f909 	bl	8001430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	3301      	adds	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	429a      	cmp	r2, r3
 800222a:	dbf1      	blt.n	8002210 <_write+0x12>
	}
	return len;
 800222c:	687b      	ldr	r3, [r7, #4]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <_close>:

int _close(int file)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
	return -1;
 800223e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225e:	605a      	str	r2, [r3, #4]
	return 0;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <_isatty>:

int _isatty(int file)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
	return 1;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
	return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <_sbrk+0x5c>)
 80022aa:	4b15      	ldr	r3, [pc, #84]	; (8002300 <_sbrk+0x60>)
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022b4:	4b13      	ldr	r3, [pc, #76]	; (8002304 <_sbrk+0x64>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d102      	bne.n	80022c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022bc:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_sbrk+0x64>)
 80022be:	4a12      	ldr	r2, [pc, #72]	; (8002308 <_sbrk+0x68>)
 80022c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022c2:	4b10      	ldr	r3, [pc, #64]	; (8002304 <_sbrk+0x64>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d207      	bcs.n	80022e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022d0:	f004 ffbe 	bl	8007250 <__errno>
 80022d4:	4603      	mov	r3, r0
 80022d6:	220c      	movs	r2, #12
 80022d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022da:	f04f 33ff 	mov.w	r3, #4294967295
 80022de:	e009      	b.n	80022f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <_sbrk+0x64>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <_sbrk+0x64>)
 80022f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022f2:	68fb      	ldr	r3, [r7, #12]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20020000 	.word	0x20020000
 8002300:	00000400 	.word	0x00000400
 8002304:	200002e8 	.word	0x200002e8
 8002308:	20000420 	.word	0x20000420

0800230c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002310:	4b06      	ldr	r3, [pc, #24]	; (800232c <SystemInit+0x20>)
 8002312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <SystemInit+0x20>)
 8002318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800231c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000ed00 	.word	0xe000ed00

08002330 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b092      	sub	sp, #72	; 0x48
 8002334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002336:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	615a      	str	r2, [r3, #20]
 800236c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800236e:	4b43      	ldr	r3, [pc, #268]	; (800247c <MX_TIM2_Init+0x14c>)
 8002370:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002374:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <MX_TIM2_Init+0x14c>)
 8002378:	224f      	movs	r2, #79	; 0x4f
 800237a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237c:	4b3f      	ldr	r3, [pc, #252]	; (800247c <MX_TIM2_Init+0x14c>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <MX_TIM2_Init+0x14c>)
 8002384:	f247 522f 	movw	r2, #29999	; 0x752f
 8002388:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238a:	4b3c      	ldr	r3, [pc, #240]	; (800247c <MX_TIM2_Init+0x14c>)
 800238c:	2200      	movs	r2, #0
 800238e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b3a      	ldr	r3, [pc, #232]	; (800247c <MX_TIM2_Init+0x14c>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002396:	4839      	ldr	r0, [pc, #228]	; (800247c <MX_TIM2_Init+0x14c>)
 8002398:	f002 fb6c 	bl	8004a74 <HAL_TIM_Base_Init>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80023a2:	f7ff fe77 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023b0:	4619      	mov	r1, r3
 80023b2:	4832      	ldr	r0, [pc, #200]	; (800247c <MX_TIM2_Init+0x14c>)
 80023b4:	f003 f8dc 	bl	8005570 <HAL_TIM_ConfigClockSource>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80023be:	f7ff fe69 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80023c2:	482e      	ldr	r0, [pc, #184]	; (800247c <MX_TIM2_Init+0x14c>)
 80023c4:	f002 fd38 	bl	8004e38 <HAL_TIM_IC_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80023ce:	f7ff fe61 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023d2:	482a      	ldr	r0, [pc, #168]	; (800247c <MX_TIM2_Init+0x14c>)
 80023d4:	f002 fc0e 	bl	8004bf4 <HAL_TIM_PWM_Init>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80023de:	f7ff fe59 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e6:	2300      	movs	r3, #0
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023ee:	4619      	mov	r1, r3
 80023f0:	4822      	ldr	r0, [pc, #136]	; (800247c <MX_TIM2_Init+0x14c>)
 80023f2:	f003 fe21 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80023fc:	f7ff fe4a 	bl	8002094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002400:	2300      	movs	r3, #0
 8002402:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002404:	2301      	movs	r3, #1
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	2200      	movs	r2, #0
 8002416:	4619      	mov	r1, r3
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <MX_TIM2_Init+0x14c>)
 800241a:	f002 ff4b 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8002424:	f7ff fe36 	bl	8002094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002428:	2302      	movs	r3, #2
 800242a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800242c:	2302      	movs	r3, #2
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002430:	f107 0320 	add.w	r3, r7, #32
 8002434:	2204      	movs	r2, #4
 8002436:	4619      	mov	r1, r3
 8002438:	4810      	ldr	r0, [pc, #64]	; (800247c <MX_TIM2_Init+0x14c>)
 800243a:	f002 ff3b 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8002444:	f7ff fe26 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002448:	2360      	movs	r3, #96	; 0x60
 800244a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800244c:	230a      	movs	r3, #10
 800244e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002450:	2300      	movs	r3, #0
 8002452:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	2208      	movs	r2, #8
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_TIM2_Init+0x14c>)
 8002460:	f002 ffc4 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800246a:	f7ff fe13 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800246e:	4803      	ldr	r0, [pc, #12]	; (800247c <MX_TIM2_Init+0x14c>)
 8002470:	f000 f96c 	bl	800274c <HAL_TIM_MspPostInit>

}
 8002474:	bf00      	nop
 8002476:	3748      	adds	r7, #72	; 0x48
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200002ec 	.word	0x200002ec

08002480 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b092      	sub	sp, #72	; 0x48
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800249e:	f107 0320 	add.w	r3, r7, #32
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]
 80024aa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	609a      	str	r2, [r3, #8]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	611a      	str	r2, [r3, #16]
 80024ba:	615a      	str	r2, [r3, #20]
 80024bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024be:	4b43      	ldr	r3, [pc, #268]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024c0:	4a43      	ldr	r2, [pc, #268]	; (80025d0 <MX_TIM3_Init+0x150>)
 80024c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80024c4:	4b41      	ldr	r3, [pc, #260]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024c6:	224f      	movs	r2, #79	; 0x4f
 80024c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b40      	ldr	r3, [pc, #256]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29999;
 80024d0:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024d2:	f247 522f 	movw	r2, #29999	; 0x752f
 80024d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d8:	4b3c      	ldr	r3, [pc, #240]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024de:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024e4:	4839      	ldr	r0, [pc, #228]	; (80025cc <MX_TIM3_Init+0x14c>)
 80024e6:	f002 fac5 	bl	8004a74 <HAL_TIM_Base_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80024f0:	f7ff fdd0 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024fe:	4619      	mov	r1, r3
 8002500:	4832      	ldr	r0, [pc, #200]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002502:	f003 f835 	bl	8005570 <HAL_TIM_ConfigClockSource>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800250c:	f7ff fdc2 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002510:	482e      	ldr	r0, [pc, #184]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002512:	f002 fc91 	bl	8004e38 <HAL_TIM_IC_Init>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 800251c:	f7ff fdba 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002520:	482a      	ldr	r0, [pc, #168]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002522:	f002 fb67 	bl	8004bf4 <HAL_TIM_PWM_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800252c:	f7ff fdb2 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002530:	2300      	movs	r3, #0
 8002532:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002534:	2300      	movs	r3, #0
 8002536:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800253c:	4619      	mov	r1, r3
 800253e:	4823      	ldr	r0, [pc, #140]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002540:	f003 fd7a 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800254a:	f7ff fda3 	bl	8002094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800254e:	2300      	movs	r3, #0
 8002550:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002552:	2301      	movs	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002556:	2300      	movs	r3, #0
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800255e:	f107 0320 	add.w	r3, r7, #32
 8002562:	2200      	movs	r2, #0
 8002564:	4619      	mov	r1, r3
 8002566:	4819      	ldr	r0, [pc, #100]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002568:	f002 fea4 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8002572:	f7ff fd8f 	bl	8002094 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002576:	2302      	movs	r3, #2
 8002578:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800257a:	2302      	movs	r3, #2
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800257e:	f107 0320 	add.w	r3, r7, #32
 8002582:	2204      	movs	r2, #4
 8002584:	4619      	mov	r1, r3
 8002586:	4811      	ldr	r0, [pc, #68]	; (80025cc <MX_TIM3_Init+0x14c>)
 8002588:	f002 fe94 	bl	80052b4 <HAL_TIM_IC_ConfigChannel>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002592:	f7ff fd7f 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002596:	2360      	movs	r3, #96	; 0x60
 8002598:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800259a:	230a      	movs	r3, #10
 800259c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2208      	movs	r2, #8
 80025aa:	4619      	mov	r1, r3
 80025ac:	4807      	ldr	r0, [pc, #28]	; (80025cc <MX_TIM3_Init+0x14c>)
 80025ae:	f002 ff1d 	bl	80053ec <HAL_TIM_PWM_ConfigChannel>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 80025b8:	f7ff fd6c 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80025bc:	4803      	ldr	r0, [pc, #12]	; (80025cc <MX_TIM3_Init+0x14c>)
 80025be:	f000 f8c5 	bl	800274c <HAL_TIM_MspPostInit>

}
 80025c2:	bf00      	nop
 80025c4:	3748      	adds	r7, #72	; 0x48
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000334 	.word	0x20000334
 80025d0:	40000400 	.word	0x40000400

080025d4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <MX_TIM10_Init+0x40>)
 80025da:	4a0f      	ldr	r2, [pc, #60]	; (8002618 <MX_TIM10_Init+0x44>)
 80025dc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <MX_TIM10_Init+0x40>)
 80025e0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80025e4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <MX_TIM10_Init+0x40>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 80025ec:	4b09      	ldr	r3, [pc, #36]	; (8002614 <MX_TIM10_Init+0x40>)
 80025ee:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025f2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b07      	ldr	r3, [pc, #28]	; (8002614 <MX_TIM10_Init+0x40>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <MX_TIM10_Init+0x40>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002600:	4804      	ldr	r0, [pc, #16]	; (8002614 <MX_TIM10_Init+0x40>)
 8002602:	f002 fa37 	bl	8004a74 <HAL_TIM_Base_Init>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d001      	beq.n	8002610 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 800260c:	f7ff fd42 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}
 8002614:	2000037c 	.word	0x2000037c
 8002618:	40014400 	.word	0x40014400

0800261c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	; 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	f107 031c 	add.w	r3, r7, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	609a      	str	r2, [r3, #8]
 8002630:	60da      	str	r2, [r3, #12]
 8002632:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800263c:	d12c      	bne.n	8002698 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a3d      	ldr	r2, [pc, #244]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b3b      	ldr	r3, [pc, #236]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
 8002658:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	4a36      	ldr	r2, [pc, #216]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6313      	str	r3, [r2, #48]	; 0x30
 800266a:	4b34      	ldr	r3, [pc, #208]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	617b      	str	r3, [r7, #20]
 8002674:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002676:	2301      	movs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002686:	2301      	movs	r3, #1
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	482b      	ldr	r0, [pc, #172]	; (8002740 <HAL_TIM_Base_MspInit+0x124>)
 8002692:	f001 fbaf 	bl	8003df4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002696:	e04c      	b.n	8002732 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_TIM_Base_MspInit+0x128>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d12c      	bne.n	80026fc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	4b25      	ldr	r3, [pc, #148]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	6413      	str	r3, [r2, #64]	; 0x40
 80026b2:	4b22      	ldr	r3, [pc, #136]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	4b1e      	ldr	r3, [pc, #120]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a1d      	ldr	r2, [pc, #116]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026da:	2340      	movs	r3, #64	; 0x40
 80026dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ea:	2302      	movs	r3, #2
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	4812      	ldr	r0, [pc, #72]	; (8002740 <HAL_TIM_Base_MspInit+0x124>)
 80026f6:	f001 fb7d 	bl	8003df4 <HAL_GPIO_Init>
}
 80026fa:	e01a      	b.n	8002732 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a11      	ldr	r2, [pc, #68]	; (8002748 <HAL_TIM_Base_MspInit+0x12c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d115      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60bb      	str	r3, [r7, #8]
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270e:	4a0b      	ldr	r2, [pc, #44]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	6453      	str	r3, [r2, #68]	; 0x44
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <HAL_TIM_Base_MspInit+0x120>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	60bb      	str	r3, [r7, #8]
 8002720:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002722:	2200      	movs	r2, #0
 8002724:	2102      	movs	r1, #2
 8002726:	2019      	movs	r0, #25
 8002728:	f000 fe95 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800272c:	2019      	movs	r0, #25
 800272e:	f000 feae 	bl	800348e <HAL_NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3730      	adds	r7, #48	; 0x30
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40020000 	.word	0x40020000
 8002744:	40000400 	.word	0x40000400
 8002748:	40014400 	.word	0x40014400

0800274c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	; 0x28
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276c:	d11f      	bne.n	80027ae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002790:	2302      	movs	r3, #2
 8002792:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800279c:	2301      	movs	r3, #1
 800279e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a0:	f107 0314 	add.w	r3, r7, #20
 80027a4:	4619      	mov	r1, r3
 80027a6:	4816      	ldr	r0, [pc, #88]	; (8002800 <HAL_TIM_MspPostInit+0xb4>)
 80027a8:	f001 fb24 	bl	8003df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ac:	e022      	b.n	80027f4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a14      	ldr	r2, [pc, #80]	; (8002804 <HAL_TIM_MspPostInit+0xb8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d11d      	bne.n	80027f4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b8:	2300      	movs	r3, #0
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	4a0e      	ldr	r2, [pc, #56]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 80027c2:	f043 0302 	orr.w	r3, r3, #2
 80027c6:	6313      	str	r3, [r2, #48]	; 0x30
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <HAL_TIM_MspPostInit+0xb0>)
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027d4:	2301      	movs	r3, #1
 80027d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d8:	2302      	movs	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e4:	2302      	movs	r3, #2
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4804      	ldr	r0, [pc, #16]	; (8002800 <HAL_TIM_MspPostInit+0xb4>)
 80027f0:	f001 fb00 	bl	8003df4 <HAL_GPIO_Init>
}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020400 	.word	0x40020400
 8002804:	40000400 	.word	0x40000400

08002808 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800280c:	4b11      	ldr	r3, [pc, #68]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800280e:	4a12      	ldr	r2, [pc, #72]	; (8002858 <MX_USART2_UART_Init+0x50>)
 8002810:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002818:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800281c:	2200      	movs	r2, #0
 800281e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002822:	2200      	movs	r2, #0
 8002824:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002828:	2200      	movs	r2, #0
 800282a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800282e:	220c      	movs	r2, #12
 8002830:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002834:	2200      	movs	r2, #0
 8002836:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 800283a:	2200      	movs	r2, #0
 800283c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283e:	4805      	ldr	r0, [pc, #20]	; (8002854 <MX_USART2_UART_Init+0x4c>)
 8002840:	f003 fc8a 	bl	8006158 <HAL_UART_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800284a:	f7ff fc23 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200003c4 	.word	0x200003c4
 8002858:	40004400 	.word	0x40004400

0800285c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b08a      	sub	sp, #40	; 0x28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	609a      	str	r2, [r3, #8]
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1d      	ldr	r2, [pc, #116]	; (80028f0 <HAL_UART_MspInit+0x94>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d133      	bne.n	80028e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <HAL_UART_MspInit+0x98>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a1b      	ldr	r2, [pc, #108]	; (80028f4 <HAL_UART_MspInit+0x98>)
 8002888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_UART_MspInit+0x98>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_UART_MspInit+0x98>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_UART_MspInit+0x98>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_UART_MspInit+0x98>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80028b6:	2360      	movs	r3, #96	; 0x60
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c2:	2303      	movs	r3, #3
 80028c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028c6:	2307      	movs	r3, #7
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ca:	f107 0314 	add.w	r3, r7, #20
 80028ce:	4619      	mov	r1, r3
 80028d0:	4809      	ldr	r0, [pc, #36]	; (80028f8 <HAL_UART_MspInit+0x9c>)
 80028d2:	f001 fa8f 	bl	8003df4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80028d6:	2200      	movs	r2, #0
 80028d8:	2103      	movs	r1, #3
 80028da:	2026      	movs	r0, #38	; 0x26
 80028dc:	f000 fdbb 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028e0:	2026      	movs	r0, #38	; 0x26
 80028e2:	f000 fdd4 	bl	800348e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028e6:	bf00      	nop
 80028e8:	3728      	adds	r7, #40	; 0x28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40004400 	.word	0x40004400
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40020c00 	.word	0x40020c00

080028fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002934 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002900:	480d      	ldr	r0, [pc, #52]	; (8002938 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002902:	490e      	ldr	r1, [pc, #56]	; (800293c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002908:	e002      	b.n	8002910 <LoopCopyDataInit>

0800290a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800290c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290e:	3304      	adds	r3, #4

08002910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002914:	d3f9      	bcc.n	800290a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002918:	4c0b      	ldr	r4, [pc, #44]	; (8002948 <LoopFillZerobss+0x26>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800291c:	e001      	b.n	8002922 <LoopFillZerobss>

0800291e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002920:	3204      	adds	r2, #4

08002922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002924:	d3fb      	bcc.n	800291e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002926:	f7ff fcf1 	bl	800230c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800292a:	f004 fc97 	bl	800725c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292e:	f7fe fedf 	bl	80016f0 <main>
  bx  lr    
 8002932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002940:	0800c2c4 	.word	0x0800c2c4
  ldr r2, =_sbss
 8002944:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002948:	2000041c 	.word	0x2000041c

0800294c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>
	...

08002950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <HAL_Init+0x40>)
 800295a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0a      	ldr	r2, [pc, #40]	; (8002990 <HAL_Init+0x40>)
 8002966:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800296a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a07      	ldr	r2, [pc, #28]	; (8002990 <HAL_Init+0x40>)
 8002972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 fd61 	bl	8003440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297e:	2000      	movs	r0, #0
 8002980:	f000 f808 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002984:	f7ff fb8c 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00

08002994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x54>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_InitTick+0x58>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fd79 	bl	80034aa <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	f000 fd41 	bl	8003456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	; (80029f0 <HAL_InitTick+0x5c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000004 	.word	0x20000004
 80029ec:	2000000c 	.word	0x2000000c
 80029f0:	20000008 	.word	0x20000008

080029f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x20>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_IncTick+0x24>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <HAL_IncTick+0x24>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	2000000c 	.word	0x2000000c
 8002a18:	20000408 	.word	0x20000408

08002a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_GetTick+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000408 	.word	0x20000408

08002a34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a3c:	f7ff ffee 	bl	8002a1c <HAL_GetTick>
 8002a40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4c:	d005      	beq.n	8002a5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <HAL_Delay+0x44>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4413      	add	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a5a:	bf00      	nop
 8002a5c:	f7ff ffde 	bl	8002a1c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d8f7      	bhi.n	8002a5c <HAL_Delay+0x28>
  {
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	2000000c 	.word	0x2000000c

08002a7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e033      	b.n	8002afa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fafe 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d118      	bne.n	8002aec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ac2:	f023 0302 	bic.w	r3, r3, #2
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fa68 	bl	8002fa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	f043 0201 	orr.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aea:	e001      	b.n	8002af0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
	...

08002b04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_Start_DMA+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0e9      	b.n	8002cf6 <HAL_ADC_Start_DMA+0x1f2>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d018      	beq.n	8002b6a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f042 0201 	orr.w	r2, r2, #1
 8002b46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <HAL_ADC_Start_DMA+0x1fc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a6d      	ldr	r2, [pc, #436]	; (8002d04 <HAL_ADC_Start_DMA+0x200>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0c9a      	lsrs	r2, r3, #18
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b5c:	e002      	b.n	8002b64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1f9      	bne.n	8002b5e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d107      	bne.n	8002b8a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b88:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	f040 80a1 	bne.w	8002cdc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bc4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bd8:	d106      	bne.n	8002be8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f023 0206 	bic.w	r2, r3, #6
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
 8002be6:	e002      	b.n	8002bee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bf6:	4b44      	ldr	r3, [pc, #272]	; (8002d08 <HAL_ADC_Start_DMA+0x204>)
 8002bf8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	4a43      	ldr	r2, [pc, #268]	; (8002d0c <HAL_ADC_Start_DMA+0x208>)
 8002c00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	4a42      	ldr	r2, [pc, #264]	; (8002d10 <HAL_ADC_Start_DMA+0x20c>)
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	4a41      	ldr	r2, [pc, #260]	; (8002d14 <HAL_ADC_Start_DMA+0x210>)
 8002c10:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002c2a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c3a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	334c      	adds	r3, #76	; 0x4c
 8002c46:	4619      	mov	r1, r3
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f000 fd7e 	bl	800374c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d12a      	bne.n	8002cb2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a2d      	ldr	r2, [pc, #180]	; (8002d18 <HAL_ADC_Start_DMA+0x214>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d015      	beq.n	8002c92 <HAL_ADC_Start_DMA+0x18e>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2c      	ldr	r2, [pc, #176]	; (8002d1c <HAL_ADC_Start_DMA+0x218>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d105      	bne.n	8002c7c <HAL_ADC_Start_DMA+0x178>
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <HAL_ADC_Start_DMA+0x204>)
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 031f 	and.w	r3, r3, #31
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <HAL_ADC_Start_DMA+0x21c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d136      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
 8002c86:	4b20      	ldr	r3, [pc, #128]	; (8002d08 <HAL_ADC_Start_DMA+0x204>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d130      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d129      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	e020      	b.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_ADC_Start_DMA+0x214>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d11b      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d114      	bne.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	e00b      	b.n	8002cf4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f043 0210 	orr.w	r2, r3, #16
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000004 	.word	0x20000004
 8002d04:	431bde83 	.word	0x431bde83
 8002d08:	40012300 	.word	0x40012300
 8002d0c:	0800319d 	.word	0x0800319d
 8002d10:	08003257 	.word	0x08003257
 8002d14:	08003273 	.word	0x08003273
 8002d18:	40012000 	.word	0x40012000
 8002d1c:	40012100 	.word	0x40012100
 8002d20:	40012200 	.word	0x40012200

08002d24 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d54:	bf00      	nop
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x1c>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e105      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x228>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	d925      	bls.n	8002dd8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68d9      	ldr	r1, [r3, #12]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4413      	add	r3, r2
 8002da0:	3b1e      	subs	r3, #30
 8002da2:	2207      	movs	r2, #7
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	43da      	mvns	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	400a      	ands	r2, r1
 8002db0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68d9      	ldr	r1, [r3, #12]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4403      	add	r3, r0
 8002dca:	3b1e      	subs	r3, #30
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]
 8002dd6:	e022      	b.n	8002e1e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6919      	ldr	r1, [r3, #16]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	2207      	movs	r2, #7
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43da      	mvns	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	400a      	ands	r2, r1
 8002dfa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6919      	ldr	r1, [r3, #16]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	4603      	mov	r3, r0
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4403      	add	r3, r0
 8002e14:	409a      	lsls	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b06      	cmp	r3, #6
 8002e24:	d824      	bhi.n	8002e70 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b05      	subs	r3, #5
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b05      	subs	r3, #5
 8002e62:	fa00 f203 	lsl.w	r2, r0, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e6e:	e04c      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b0c      	cmp	r3, #12
 8002e76:	d824      	bhi.n	8002ec2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	3b23      	subs	r3, #35	; 0x23
 8002e8a:	221f      	movs	r2, #31
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	400a      	ands	r2, r1
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3b23      	subs	r3, #35	; 0x23
 8002eb4:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
 8002ec0:	e023      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b41      	subs	r3, #65	; 0x41
 8002ed4:	221f      	movs	r2, #31
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	3b41      	subs	r3, #65	; 0x41
 8002efe:	fa00 f203 	lsl.w	r2, r0, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f0a:	4b22      	ldr	r3, [pc, #136]	; (8002f94 <HAL_ADC_ConfigChannel+0x234>)
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <HAL_ADC_ConfigChannel+0x238>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d109      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1cc>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b12      	cmp	r3, #18
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a19      	ldr	r2, [pc, #100]	; (8002f98 <HAL_ADC_ConfigChannel+0x238>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d123      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d003      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x1e6>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b11      	cmp	r3, #17
 8002f44:	d11b      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b10      	cmp	r3, #16
 8002f58:	d111      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f5a:	4b10      	ldr	r3, [pc, #64]	; (8002f9c <HAL_ADC_ConfigChannel+0x23c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a10      	ldr	r2, [pc, #64]	; (8002fa0 <HAL_ADC_ConfigChannel+0x240>)
 8002f60:	fba2 2303 	umull	r2, r3, r2, r3
 8002f64:	0c9a      	lsrs	r2, r3, #18
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f70:	e002      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	3b01      	subs	r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f9      	bne.n	8002f72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	40012300 	.word	0x40012300
 8002f98:	40012000 	.word	0x40012000
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fac:	4b79      	ldr	r3, [pc, #484]	; (8003194 <ADC_Init+0x1f0>)
 8002fae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6859      	ldr	r1, [r3, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	021a      	lsls	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6899      	ldr	r1, [r3, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003036:	4a58      	ldr	r2, [pc, #352]	; (8003198 <ADC_Init+0x1f4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d022      	beq.n	8003082 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800304a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800306c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6899      	ldr	r1, [r3, #8]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	e00f      	b.n	80030a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f022 0202 	bic.w	r2, r2, #2
 80030b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7e1b      	ldrb	r3, [r3, #24]
 80030bc:	005a      	lsls	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	3b01      	subs	r3, #1
 80030fc:	035a      	lsls	r2, r3, #13
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
 8003106:	e007      	b.n	8003118 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003116:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003126:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	3b01      	subs	r3, #1
 8003134:	051a      	lsls	r2, r3, #20
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	430a      	orrs	r2, r1
 800313c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800314c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800315a:	025a      	lsls	r2, r3, #9
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003172:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	6899      	ldr	r1, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	029a      	lsls	r2, r3, #10
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40012300 	.word	0x40012300
 8003198:	0f000001 	.word	0x0f000001

0800319c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d13c      	bne.n	8003230 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d12b      	bne.n	8003228 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d127      	bne.n	8003228 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d119      	bne.n	8003228 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0220 	bic.w	r2, r2, #32
 8003202:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d105      	bne.n	8003228 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff fd7b 	bl	8002d24 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800322e:	e00e      	b.n	800324e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff fd85 	bl	8002d4c <HAL_ADC_ErrorCallback>
}
 8003242:	e004      	b.n	800324e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f7ff fd67 	bl	8002d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800326a:	bf00      	nop
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f043 0204 	orr.w	r2, r3, #4
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f7ff fd5a 	bl	8002d4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4907      	ldr	r1, [pc, #28]	; (800333c <__NVIC_EnableIRQ+0x38>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e100 	.word	0xe000e100

08003340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0a      	blt.n	800336a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	490c      	ldr	r1, [pc, #48]	; (800338c <__NVIC_SetPriority+0x4c>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	440b      	add	r3, r1
 8003364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003368:	e00a      	b.n	8003380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <__NVIC_SetPriority+0x50>)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3b04      	subs	r3, #4
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	440b      	add	r3, r1
 800337e:	761a      	strb	r2, [r3, #24]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000e100 	.word	0xe000e100
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf28      	it	cs
 80033b2:	2304      	movcs	r3, #4
 80033b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d902      	bls.n	80033c4 <NVIC_EncodePriority+0x30>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3b03      	subs	r3, #3
 80033c2:	e000      	b.n	80033c6 <NVIC_EncodePriority+0x32>
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	4313      	orrs	r3, r2
         );
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800340c:	d301      	bcc.n	8003412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340e:	2301      	movs	r3, #1
 8003410:	e00f      	b.n	8003432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <SysTick_Config+0x40>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341a:	210f      	movs	r1, #15
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f7ff ff8e 	bl	8003340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <SysTick_Config+0x40>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <SysTick_Config+0x40>)
 800342c:	2207      	movs	r2, #7
 800342e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010

08003440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ff29 	bl	80032a0 <__NVIC_SetPriorityGrouping>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003468:	f7ff ff3e 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 800346c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7ff ff8e 	bl	8003394 <NVIC_EncodePriority>
 8003478:	4602      	mov	r2, r0
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff5d 	bl	8003340 <__NVIC_SetPriority>
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff31 	bl	8003304 <__NVIC_EnableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffa2 	bl	80033fc <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b082      	sub	sp, #8
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e014      	b.n	80034fe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	791b      	ldrb	r3, [r3, #4]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d105      	bne.n	80034ea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7fd fe7b 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2202      	movs	r2, #2
 80034ee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
 8003512:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d105      	bne.n	8003530 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	3308      	adds	r3, #8
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	e004      	b.n	800353a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4413      	add	r3, r2
 8003536:	3314      	adds	r3, #20
 8003538:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	461a      	mov	r2, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	371c      	adds	r7, #28
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	795b      	ldrb	r3, [r3, #5]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_DAC_ConfigChannel+0x18>
 8003564:	2302      	movs	r3, #2
 8003566:	e03c      	b.n	80035e2 <HAL_DAC_ConfigChannel+0x92>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2202      	movs	r2, #2
 8003572:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003586:	fa02 f303 	lsl.w	r3, r2, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	4013      	ands	r3, r2
 8003590:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f003 0310 	and.w	r3, r3, #16
 80035c4:	22c0      	movs	r2, #192	; 0xc0
 80035c6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ca:	43da      	mvns	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	400a      	ands	r2, r1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff fa0e 	bl	8002a1c <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e099      	b.n	8003740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362c:	e00f      	b.n	800364e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800362e:	f7ff f9f5 	bl	8002a1c <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b05      	cmp	r3, #5
 800363a:	d908      	bls.n	800364e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2220      	movs	r2, #32
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2203      	movs	r2, #3
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e078      	b.n	8003740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e8      	bne.n	800362e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <HAL_DMA_Init+0x158>)
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d107      	bne.n	80036b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	4313      	orrs	r3, r2
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0307 	bic.w	r3, r3, #7
 80036ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d117      	bne.n	8003712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d00e      	beq.n	8003712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 fb01 	bl	8003cfc <DMA_CheckFifoParam>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800370e:	2301      	movs	r3, #1
 8003710:	e016      	b.n	8003740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 fab8 	bl	8003c90 <DMA_CalcBaseAndBitshift>
 8003720:	4603      	mov	r3, r0
 8003722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	223f      	movs	r2, #63	; 0x3f
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	f010803f 	.word	0xf010803f

0800374c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003762:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_DMA_Start_IT+0x26>
 800376e:	2302      	movs	r3, #2
 8003770:	e040      	b.n	80037f4 <HAL_DMA_Start_IT+0xa8>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d12f      	bne.n	80037e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa4a 	bl	8003c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a4:	223f      	movs	r2, #63	; 0x3f
 80037a6:	409a      	lsls	r2, r3
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0216 	orr.w	r2, r2, #22
 80037ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d007      	beq.n	80037d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0208 	orr.w	r2, r2, #8
 80037d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	e005      	b.n	80037f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3718      	adds	r7, #24
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800380a:	f7ff f907 	bl	8002a1c <HAL_GetTick>
 800380e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d008      	beq.n	800382e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e052      	b.n	80038d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0216 	bic.w	r2, r2, #22
 800383c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800384c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <HAL_DMA_Abort+0x62>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0208 	bic.w	r2, r2, #8
 800386c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0201 	bic.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800387e:	e013      	b.n	80038a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003880:	f7ff f8cc 	bl	8002a1c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b05      	cmp	r3, #5
 800388c:	d90c      	bls.n	80038a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e015      	b.n	80038d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1e4      	bne.n	8003880 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	223f      	movs	r2, #63	; 0x3f
 80038bc:	409a      	lsls	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d004      	beq.n	80038fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2280      	movs	r2, #128	; 0x80
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e00c      	b.n	8003914 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2205      	movs	r2, #5
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0201 	bic.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800392c:	4b8e      	ldr	r3, [pc, #568]	; (8003b68 <HAL_DMA_IRQHandler+0x248>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a8e      	ldr	r2, [pc, #568]	; (8003b6c <HAL_DMA_IRQHandler+0x24c>)
 8003932:	fba2 2303 	umull	r2, r3, r2, r3
 8003936:	0a9b      	lsrs	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800394a:	2208      	movs	r2, #8
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d01a      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	2208      	movs	r2, #8
 800397a:	409a      	lsls	r2, r3
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	f043 0201 	orr.w	r2, r3, #1
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003990:	2201      	movs	r2, #1
 8003992:	409a      	lsls	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4013      	ands	r3, r2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d012      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	2201      	movs	r2, #1
 80039b0:	409a      	lsls	r2, r3
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f043 0202 	orr.w	r2, r3, #2
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	2204      	movs	r2, #4
 80039c8:	409a      	lsls	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4013      	ands	r3, r2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d012      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00b      	beq.n	80039f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	409a      	lsls	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f0:	f043 0204 	orr.w	r2, r3, #4
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fc:	2210      	movs	r2, #16
 80039fe:	409a      	lsls	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4013      	ands	r3, r2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d043      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03c      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d108      	bne.n	8003a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d024      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	e01f      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01b      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e016      	b.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d107      	bne.n	8003a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0208 	bic.w	r2, r2, #8
 8003a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	2220      	movs	r2, #32
 8003a96:	409a      	lsls	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 808f 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8087 	beq.w	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b05      	cmp	r3, #5
 8003ac8:	d136      	bne.n	8003b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0216 	bic.w	r2, r2, #22
 8003ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	695a      	ldr	r2, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <HAL_DMA_IRQHandler+0x1da>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 0208 	bic.w	r2, r2, #8
 8003b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	223f      	movs	r2, #63	; 0x3f
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d07e      	beq.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	4798      	blx	r3
        }
        return;
 8003b36:	e079      	b.n	8003c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d01d      	beq.n	8003b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d031      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	4798      	blx	r3
 8003b64:	e02c      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
 8003b66:	bf00      	nop
 8003b68:	20000004 	.word	0x20000004
 8003b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d023      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
 8003b80:	e01e      	b.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0210 	bic.w	r2, r2, #16
 8003b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d032      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d022      	beq.n	8003c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2205      	movs	r2, #5
 8003bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3301      	adds	r3, #1
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d307      	bcc.n	8003c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1f2      	bne.n	8003bec <HAL_DMA_IRQHandler+0x2cc>
 8003c06:	e000      	b.n	8003c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
 8003c2a:	e000      	b.n	8003c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c2c:	bf00      	nop
    }
  }
}
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b40      	cmp	r3, #64	; 0x40
 8003c60:	d108      	bne.n	8003c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c72:	e007      	b.n	8003c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	60da      	str	r2, [r3, #12]
}
 8003c84:	bf00      	nop
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	3b10      	subs	r3, #16
 8003ca0:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d909      	bls.n	8003cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	1d1a      	adds	r2, r3, #4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd0:	e007      	b.n	8003ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003cda:	f023 0303 	bic.w	r3, r3, #3
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	aaaaaaab 	.word	0xaaaaaaab
 8003cf8:	0800be00 	.word	0x0800be00

08003cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d11f      	bne.n	8003d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d856      	bhi.n	8003dca <DMA_CheckFifoParam+0xce>
 8003d1c:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x28>)
 8003d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d22:	bf00      	nop
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d47 	.word	0x08003d47
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003dcb 	.word	0x08003dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d046      	beq.n	8003dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d44:	e043      	b.n	8003dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d4e:	d140      	bne.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d54:	e03d      	b.n	8003dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d121      	bne.n	8003da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d837      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xda>
 8003d66:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <DMA_CheckFifoParam+0x70>)
 8003d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6c:	08003d7d 	.word	0x08003d7d
 8003d70:	08003d83 	.word	0x08003d83
 8003d74:	08003d7d 	.word	0x08003d7d
 8003d78:	08003d95 	.word	0x08003d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e030      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d025      	beq.n	8003dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d92:	e022      	b.n	8003dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d9c:	d11f      	bne.n	8003dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003da2:	e01c      	b.n	8003dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b02      	cmp	r3, #2
 8003da8:	d903      	bls.n	8003db2 <DMA_CheckFifoParam+0xb6>
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d003      	beq.n	8003db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db0:	e018      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
      break;
 8003db6:	e015      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc8:	e00b      	b.n	8003de2 <DMA_CheckFifoParam+0xe6>
      break;
 8003dca:	bf00      	nop
 8003dcc:	e00a      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e008      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e006      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e004      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e002      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dde:	bf00      	nop
 8003de0:	e000      	b.n	8003de4 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
    }
  } 
  
  return status; 
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop

08003df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b089      	sub	sp, #36	; 0x24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
 8003e0e:	e16b      	b.n	80040e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e10:	2201      	movs	r2, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f040 815a 	bne.w	80040e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d005      	beq.n	8003e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d130      	bne.n	8003ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68da      	ldr	r2, [r3, #12]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 0201 	and.w	r2, r3, #1
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f003 0303 	and.w	r3, r3, #3
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d017      	beq.n	8003ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 0303 	and.w	r3, r3, #3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d123      	bne.n	8003f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	08da      	lsrs	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3208      	adds	r2, #8
 8003ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	220f      	movs	r2, #15
 8003f08:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	f003 0307 	and.w	r3, r3, #7
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	08da      	lsrs	r2, r3, #3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	3208      	adds	r2, #8
 8003f32:	69b9      	ldr	r1, [r7, #24]
 8003f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2203      	movs	r2, #3
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80b4 	beq.w	80040e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b60      	ldr	r3, [pc, #384]	; (8004100 <HAL_GPIO_Init+0x30c>)
 8003f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f82:	4a5f      	ldr	r2, [pc, #380]	; (8004100 <HAL_GPIO_Init+0x30c>)
 8003f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f88:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8a:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <HAL_GPIO_Init+0x30c>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f96:	4a5b      	ldr	r2, [pc, #364]	; (8004104 <HAL_GPIO_Init+0x310>)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	089b      	lsrs	r3, r3, #2
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	220f      	movs	r2, #15
 8003fae:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_GPIO_Init+0x314>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d02b      	beq.n	800401a <HAL_GPIO_Init+0x226>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a51      	ldr	r2, [pc, #324]	; (800410c <HAL_GPIO_Init+0x318>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d025      	beq.n	8004016 <HAL_GPIO_Init+0x222>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a50      	ldr	r2, [pc, #320]	; (8004110 <HAL_GPIO_Init+0x31c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01f      	beq.n	8004012 <HAL_GPIO_Init+0x21e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_GPIO_Init+0x320>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d019      	beq.n	800400e <HAL_GPIO_Init+0x21a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a4e      	ldr	r2, [pc, #312]	; (8004118 <HAL_GPIO_Init+0x324>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d013      	beq.n	800400a <HAL_GPIO_Init+0x216>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a4d      	ldr	r2, [pc, #308]	; (800411c <HAL_GPIO_Init+0x328>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00d      	beq.n	8004006 <HAL_GPIO_Init+0x212>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4c      	ldr	r2, [pc, #304]	; (8004120 <HAL_GPIO_Init+0x32c>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <HAL_GPIO_Init+0x20e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a4b      	ldr	r2, [pc, #300]	; (8004124 <HAL_GPIO_Init+0x330>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d101      	bne.n	8003ffe <HAL_GPIO_Init+0x20a>
 8003ffa:	2307      	movs	r3, #7
 8003ffc:	e00e      	b.n	800401c <HAL_GPIO_Init+0x228>
 8003ffe:	2308      	movs	r3, #8
 8004000:	e00c      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004002:	2306      	movs	r3, #6
 8004004:	e00a      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004006:	2305      	movs	r3, #5
 8004008:	e008      	b.n	800401c <HAL_GPIO_Init+0x228>
 800400a:	2304      	movs	r3, #4
 800400c:	e006      	b.n	800401c <HAL_GPIO_Init+0x228>
 800400e:	2303      	movs	r3, #3
 8004010:	e004      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004012:	2302      	movs	r3, #2
 8004014:	e002      	b.n	800401c <HAL_GPIO_Init+0x228>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <HAL_GPIO_Init+0x228>
 800401a:	2300      	movs	r3, #0
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f002 0203 	and.w	r2, r2, #3
 8004022:	0092      	lsls	r2, r2, #2
 8004024:	4093      	lsls	r3, r2
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4313      	orrs	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800402c:	4935      	ldr	r1, [pc, #212]	; (8004104 <HAL_GPIO_Init+0x310>)
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800403a:	4b3b      	ldr	r3, [pc, #236]	; (8004128 <HAL_GPIO_Init+0x334>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d003      	beq.n	800405e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405e:	4a32      	ldr	r2, [pc, #200]	; (8004128 <HAL_GPIO_Init+0x334>)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004064:	4b30      	ldr	r3, [pc, #192]	; (8004128 <HAL_GPIO_Init+0x334>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	43db      	mvns	r3, r3
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	4013      	ands	r3, r2
 8004072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d003      	beq.n	8004088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4313      	orrs	r3, r2
 8004086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004088:	4a27      	ldr	r2, [pc, #156]	; (8004128 <HAL_GPIO_Init+0x334>)
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800408e:	4b26      	ldr	r3, [pc, #152]	; (8004128 <HAL_GPIO_Init+0x334>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	43db      	mvns	r3, r3
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4013      	ands	r3, r2
 800409c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040b2:	4a1d      	ldr	r2, [pc, #116]	; (8004128 <HAL_GPIO_Init+0x334>)
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040b8:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <HAL_GPIO_Init+0x334>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	4013      	ands	r3, r2
 80040c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <HAL_GPIO_Init+0x334>)
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	3301      	adds	r3, #1
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	2b0f      	cmp	r3, #15
 80040ec:	f67f ae90 	bls.w	8003e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	3724      	adds	r7, #36	; 0x24
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	40013800 	.word	0x40013800
 8004108:	40020000 	.word	0x40020000
 800410c:	40020400 	.word	0x40020400
 8004110:	40020800 	.word	0x40020800
 8004114:	40020c00 	.word	0x40020c00
 8004118:	40021000 	.word	0x40021000
 800411c:	40021400 	.word	0x40021400
 8004120:	40021800 	.word	0x40021800
 8004124:	40021c00 	.word	0x40021c00
 8004128:	40013c00 	.word	0x40013c00

0800412c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	887b      	ldrh	r3, [r7, #2]
 800413e:	4013      	ands	r3, r2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	e001      	b.n	800414e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004178:	e003      	b.n	8004182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800417a:	887b      	ldrh	r3, [r7, #2]
 800417c:	041a      	lsls	r2, r3, #16
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	619a      	str	r2, [r3, #24]
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	460b      	mov	r3, r1
 8004198:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041a0:	887a      	ldrh	r2, [r7, #2]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4013      	ands	r3, r2
 80041a6:	041a      	lsls	r2, r3, #16
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	43d9      	mvns	r1, r3
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	400b      	ands	r3, r1
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	619a      	str	r2, [r3, #24]
}
 80041b6:	bf00      	nop
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e267      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d075      	beq.n	80042ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041e2:	4b88      	ldr	r3, [pc, #544]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 030c 	and.w	r3, r3, #12
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d00c      	beq.n	8004208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ee:	4b85      	ldr	r3, [pc, #532]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d112      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041fa:	4b82      	ldr	r3, [pc, #520]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004206:	d10b      	bne.n	8004220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	4b7e      	ldr	r3, [pc, #504]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d05b      	beq.n	80042cc <HAL_RCC_OscConfig+0x108>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d157      	bne.n	80042cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e242      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004228:	d106      	bne.n	8004238 <HAL_RCC_OscConfig+0x74>
 800422a:	4b76      	ldr	r3, [pc, #472]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a75      	ldr	r2, [pc, #468]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	e01d      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004240:	d10c      	bne.n	800425c <HAL_RCC_OscConfig+0x98>
 8004242:	4b70      	ldr	r3, [pc, #448]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a6f      	ldr	r2, [pc, #444]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	4b6d      	ldr	r3, [pc, #436]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a6c      	ldr	r2, [pc, #432]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004258:	6013      	str	r3, [r2, #0]
 800425a:	e00b      	b.n	8004274 <HAL_RCC_OscConfig+0xb0>
 800425c:	4b69      	ldr	r3, [pc, #420]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a68      	ldr	r2, [pc, #416]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004266:	6013      	str	r3, [r2, #0]
 8004268:	4b66      	ldr	r3, [pc, #408]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a65      	ldr	r2, [pc, #404]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 800426e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d013      	beq.n	80042a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427c:	f7fe fbce 	bl	8002a1c <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe fbca 	bl	8002a1c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e207      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004296:	4b5b      	ldr	r3, [pc, #364]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0f0      	beq.n	8004284 <HAL_RCC_OscConfig+0xc0>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fe fbba 	bl	8002a1c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fe fbb6 	bl	8002a1c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e1f3      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042be:	4b51      	ldr	r3, [pc, #324]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1f0      	bne.n	80042ac <HAL_RCC_OscConfig+0xe8>
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042da:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 030c 	and.w	r3, r3, #12
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d00b      	beq.n	80042fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e6:	4b47      	ldr	r3, [pc, #284]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d11c      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d116      	bne.n	800432c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fe:	4b41      	ldr	r3, [pc, #260]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e1c7      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4937      	ldr	r1, [pc, #220]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	e03a      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d020      	beq.n	8004376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004334:	4b34      	ldr	r3, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0x244>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433a:	f7fe fb6f 	bl	8002a1c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004342:	f7fe fb6b 	bl	8002a1c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e1a8      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004354:	4b2b      	ldr	r3, [pc, #172]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b28      	ldr	r3, [pc, #160]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4925      	ldr	r1, [pc, #148]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004370:	4313      	orrs	r3, r2
 8004372:	600b      	str	r3, [r1, #0]
 8004374:	e015      	b.n	80043a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004376:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0x244>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fe fb4e 	bl	8002a1c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004384:	f7fe fb4a 	bl	8002a1c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e187      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004396:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0308 	and.w	r3, r3, #8
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d036      	beq.n	800441c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <HAL_RCC_OscConfig+0x248>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043bc:	f7fe fb2e 	bl	8002a1c <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c4:	f7fe fb2a 	bl	8002a1c <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e167      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <HAL_RCC_OscConfig+0x240>)
 80043d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043da:	f003 0302 	and.w	r3, r3, #2
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x200>
 80043e2:	e01b      	b.n	800441c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e4:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x248>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ea:	f7fe fb17 	bl	8002a1c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f0:	e00e      	b.n	8004410 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043f2:	f7fe fb13 	bl	8002a1c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d907      	bls.n	8004410 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e150      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004404:	40023800 	.word	0x40023800
 8004408:	42470000 	.word	0x42470000
 800440c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004410:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1ea      	bne.n	80043f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8097 	beq.w	8004558 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442a:	2300      	movs	r3, #0
 800442c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442e:	4b81      	ldr	r3, [pc, #516]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10f      	bne.n	800445a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	2300      	movs	r3, #0
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	4b7d      	ldr	r3, [pc, #500]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	4a7c      	ldr	r2, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	6413      	str	r3, [r2, #64]	; 0x40
 800444a:	4b7a      	ldr	r3, [pc, #488]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b77      	ldr	r3, [pc, #476]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b74      	ldr	r3, [pc, #464]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a73      	ldr	r2, [pc, #460]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fe fad3 	bl	8002a1c <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fe facf 	bl	8002a1c <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e10c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b6a      	ldr	r3, [pc, #424]	; (8004638 <HAL_RCC_OscConfig+0x474>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x2ea>
 80044a0:	4b64      	ldr	r3, [pc, #400]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	4a63      	ldr	r2, [pc, #396]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6713      	str	r3, [r2, #112]	; 0x70
 80044ac:	e01c      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	2b05      	cmp	r3, #5
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x30c>
 80044b6:	4b5f      	ldr	r3, [pc, #380]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ba:	4a5e      	ldr	r2, [pc, #376]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044bc:	f043 0304 	orr.w	r3, r3, #4
 80044c0:	6713      	str	r3, [r2, #112]	; 0x70
 80044c2:	4b5c      	ldr	r3, [pc, #368]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c6:	4a5b      	ldr	r2, [pc, #364]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6713      	str	r3, [r2, #112]	; 0x70
 80044ce:	e00b      	b.n	80044e8 <HAL_RCC_OscConfig+0x324>
 80044d0:	4b58      	ldr	r3, [pc, #352]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	4a57      	ldr	r2, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	6713      	str	r3, [r2, #112]	; 0x70
 80044dc:	4b55      	ldr	r3, [pc, #340]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e0:	4a54      	ldr	r2, [pc, #336]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80044e2:	f023 0304 	bic.w	r3, r3, #4
 80044e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d015      	beq.n	800451c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f0:	f7fe fa94 	bl	8002a1c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f6:	e00a      	b.n	800450e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f8:	f7fe fa90 	bl	8002a1c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	f241 3288 	movw	r2, #5000	; 0x1388
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e0cb      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450e:	4b49      	ldr	r3, [pc, #292]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0ee      	beq.n	80044f8 <HAL_RCC_OscConfig+0x334>
 800451a:	e014      	b.n	8004546 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800451c:	f7fe fa7e 	bl	8002a1c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004522:	e00a      	b.n	800453a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004524:	f7fe fa7a 	bl	8002a1c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004532:	4293      	cmp	r3, r2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e0b5      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453a:	4b3e      	ldr	r3, [pc, #248]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1ee      	bne.n	8004524 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d105      	bne.n	8004558 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454c:	4b39      	ldr	r3, [pc, #228]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	4a38      	ldr	r2, [pc, #224]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a1 	beq.w	80046a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004562:	4b34      	ldr	r3, [pc, #208]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b08      	cmp	r3, #8
 800456c:	d05c      	beq.n	8004628 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d141      	bne.n	80045fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004576:	4b31      	ldr	r3, [pc, #196]	; (800463c <HAL_RCC_OscConfig+0x478>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800457c:	f7fe fa4e 	bl	8002a1c <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004584:	f7fe fa4a 	bl	8002a1c <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e087      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004596:	4b27      	ldr	r3, [pc, #156]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	69da      	ldr	r2, [r3, #28]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	019b      	lsls	r3, r3, #6
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b8:	085b      	lsrs	r3, r3, #1
 80045ba:	3b01      	subs	r3, #1
 80045bc:	041b      	lsls	r3, r3, #16
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	061b      	lsls	r3, r3, #24
 80045c6:	491b      	ldr	r1, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045cc:	4b1b      	ldr	r3, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x478>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fe fa23 	bl	8002a1c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7fe fa1f 	bl	8002a1c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e05c      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ec:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x416>
 80045f8:	e054      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <HAL_RCC_OscConfig+0x478>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fe fa0c 	bl	8002a1c <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004608:	f7fe fa08 	bl	8002a1c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e045      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b06      	ldr	r3, [pc, #24]	; (8004634 <HAL_RCC_OscConfig+0x470>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x444>
 8004626:	e03d      	b.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	2b01      	cmp	r3, #1
 800462e:	d107      	bne.n	8004640 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e038      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
 8004634:	40023800 	.word	0x40023800
 8004638:	40007000 	.word	0x40007000
 800463c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <HAL_RCC_OscConfig+0x4ec>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d028      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004658:	429a      	cmp	r2, r3
 800465a:	d121      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004666:	429a      	cmp	r2, r3
 8004668:	d11a      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004670:	4013      	ands	r3, r2
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004676:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004678:	4293      	cmp	r3, r2
 800467a:	d111      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	085b      	lsrs	r3, r3, #1
 8004688:	3b01      	subs	r3, #1
 800468a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800468c:	429a      	cmp	r2, r3
 800468e:	d107      	bne.n	80046a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800469c:	429a      	cmp	r2, r3
 800469e:	d001      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	40023800 	.word	0x40023800

080046b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e0cc      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c8:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d90c      	bls.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b65      	ldr	r3, [pc, #404]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0b8      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0302 	and.w	r3, r3, #2
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0304 	and.w	r3, r3, #4
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004708:	4b59      	ldr	r3, [pc, #356]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	4a58      	ldr	r2, [pc, #352]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800470e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004712:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004720:	4b53      	ldr	r3, [pc, #332]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004726:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800472a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800472c:	4b50      	ldr	r3, [pc, #320]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	494d      	ldr	r1, [pc, #308]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d044      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d107      	bne.n	8004762 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d119      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b02      	cmp	r3, #2
 8004768:	d003      	beq.n	8004772 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476e:	2b03      	cmp	r3, #3
 8004770:	d107      	bne.n	8004782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004772:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e06f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004782:	4b3b      	ldr	r3, [pc, #236]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0302 	and.w	r3, r3, #2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e067      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004792:	4b37      	ldr	r3, [pc, #220]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 0203 	bic.w	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4934      	ldr	r1, [pc, #208]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a4:	f7fe f93a 	bl	8002a1c <HAL_GetTick>
 80047a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047ac:	f7fe f936 	bl	8002a1c <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e04f      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c2:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 020c 	and.w	r2, r3, #12
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d1eb      	bne.n	80047ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d20c      	bcs.n	80047fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ea:	4b20      	ldr	r3, [pc, #128]	; (800486c <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d001      	beq.n	80047fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e032      	b.n	8004862 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004808:	4b19      	ldr	r3, [pc, #100]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	4916      	ldr	r1, [pc, #88]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004816:	4313      	orrs	r3, r2
 8004818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d009      	beq.n	800483a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	4313      	orrs	r3, r2
 8004838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800483a:	f000 f821 	bl	8004880 <HAL_RCC_GetSysClockFreq>
 800483e:	4602      	mov	r2, r0
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	091b      	lsrs	r3, r3, #4
 8004846:	f003 030f 	and.w	r3, r3, #15
 800484a:	490a      	ldr	r1, [pc, #40]	; (8004874 <HAL_RCC_ClockConfig+0x1c0>)
 800484c:	5ccb      	ldrb	r3, [r1, r3]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	4a09      	ldr	r2, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c4>)
 8004854:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fe f89a 	bl	8002994 <HAL_InitTick>

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40023c00 	.word	0x40023c00
 8004870:	40023800 	.word	0x40023800
 8004874:	0800bde8 	.word	0x0800bde8
 8004878:	20000004 	.word	0x20000004
 800487c:	20000008 	.word	0x20000008

08004880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004884:	b090      	sub	sp, #64	; 0x40
 8004886:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004888:	2300      	movs	r3, #0
 800488a:	637b      	str	r3, [r7, #52]	; 0x34
 800488c:	2300      	movs	r3, #0
 800488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004890:	2300      	movs	r3, #0
 8004892:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004898:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d00d      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x40>
 80048a4:	2b08      	cmp	r3, #8
 80048a6:	f200 80a1 	bhi.w	80049ec <HAL_RCC_GetSysClockFreq+0x16c>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_RCC_GetSysClockFreq+0x34>
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_GetSysClockFreq+0x3a>
 80048b2:	e09b      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80048b8:	e09b      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048ba:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048be:	e098      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c0:	4b4f      	ldr	r3, [pc, #316]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ca:	4b4d      	ldr	r3, [pc, #308]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d028      	beq.n	8004928 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d6:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	099b      	lsrs	r3, r3, #6
 80048dc:	2200      	movs	r2, #0
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	627a      	str	r2, [r7, #36]	; 0x24
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80048e8:	2100      	movs	r1, #0
 80048ea:	4b47      	ldr	r3, [pc, #284]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80048ec:	fb03 f201 	mul.w	r2, r3, r1
 80048f0:	2300      	movs	r3, #0
 80048f2:	fb00 f303 	mul.w	r3, r0, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	4a43      	ldr	r2, [pc, #268]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x188>)
 80048fa:	fba0 1202 	umull	r1, r2, r0, r2
 80048fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004900:	460a      	mov	r2, r1
 8004902:	62ba      	str	r2, [r7, #40]	; 0x28
 8004904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004906:	4413      	add	r3, r2
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490c:	2200      	movs	r2, #0
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	61fa      	str	r2, [r7, #28]
 8004912:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004916:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800491a:	f7fc f9b5 	bl	8000c88 <__aeabi_uldivmod>
 800491e:	4602      	mov	r2, r0
 8004920:	460b      	mov	r3, r1
 8004922:	4613      	mov	r3, r2
 8004924:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004926:	e053      	b.n	80049d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004928:	4b35      	ldr	r3, [pc, #212]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	099b      	lsrs	r3, r3, #6
 800492e:	2200      	movs	r2, #0
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	617a      	str	r2, [r7, #20]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800493a:	f04f 0b00 	mov.w	fp, #0
 800493e:	4652      	mov	r2, sl
 8004940:	465b      	mov	r3, fp
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f04f 0100 	mov.w	r1, #0
 800494a:	0159      	lsls	r1, r3, #5
 800494c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004950:	0150      	lsls	r0, r2, #5
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	ebb2 080a 	subs.w	r8, r2, sl
 800495a:	eb63 090b 	sbc.w	r9, r3, fp
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800496a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800496e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004972:	ebb2 0408 	subs.w	r4, r2, r8
 8004976:	eb63 0509 	sbc.w	r5, r3, r9
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	00eb      	lsls	r3, r5, #3
 8004984:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004988:	00e2      	lsls	r2, r4, #3
 800498a:	4614      	mov	r4, r2
 800498c:	461d      	mov	r5, r3
 800498e:	eb14 030a 	adds.w	r3, r4, sl
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	eb45 030b 	adc.w	r3, r5, fp
 8004998:	607b      	str	r3, [r7, #4]
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80049a6:	4629      	mov	r1, r5
 80049a8:	028b      	lsls	r3, r1, #10
 80049aa:	4621      	mov	r1, r4
 80049ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80049b0:	4621      	mov	r1, r4
 80049b2:	028a      	lsls	r2, r1, #10
 80049b4:	4610      	mov	r0, r2
 80049b6:	4619      	mov	r1, r3
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	2200      	movs	r2, #0
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049c4:	f7fc f960 	bl	8000c88 <__aeabi_uldivmod>
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4613      	mov	r3, r2
 80049ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x180>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	3301      	adds	r3, #1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80049e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x184>)
 80049ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80049f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3740      	adds	r7, #64	; 0x40
 80049f8:	46bd      	mov	sp, r7
 80049fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	017d7840 	.word	0x017d7840

08004a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a28:	f7ff fff0 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	0a9b      	lsrs	r3, r3, #10
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4903      	ldr	r1, [pc, #12]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3a:	5ccb      	ldrb	r3, [r1, r3]
 8004a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	0800bdf8 	.word	0x0800bdf8

08004a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a50:	f7ff ffdc 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a54:	4602      	mov	r2, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0b5b      	lsrs	r3, r3, #13
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4903      	ldr	r1, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a62:	5ccb      	ldrb	r3, [r1, r3]
 8004a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	0800bdf8 	.word	0x0800bdf8

08004a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e041      	b.n	8004b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd fdbe 	bl	800261c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4610      	mov	r0, r2
 8004ab4:	f000 fe86 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d001      	beq.n	8004b2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e04e      	b.n	8004bca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a23      	ldr	r2, [pc, #140]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d022      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b56:	d01d      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a1f      	ldr	r2, [pc, #124]	; (8004bdc <HAL_TIM_Base_Start_IT+0xc8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d018      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a1e      	ldr	r2, [pc, #120]	; (8004be0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1c      	ldr	r2, [pc, #112]	; (8004be4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1b      	ldr	r2, [pc, #108]	; (8004be8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <HAL_TIM_Base_Start_IT+0xd8>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d111      	bne.n	8004bb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b06      	cmp	r3, #6
 8004ba4:	d010      	beq.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f042 0201 	orr.w	r2, r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb6:	e007      	b.n	8004bc8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40010000 	.word	0x40010000
 8004bdc:	40000400 	.word	0x40000400
 8004be0:	40000800 	.word	0x40000800
 8004be4:	40000c00 	.word	0x40000c00
 8004be8:	40010400 	.word	0x40010400
 8004bec:	40014000 	.word	0x40014000
 8004bf0:	40001800 	.word	0x40001800

08004bf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e041      	b.n	8004c8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d106      	bne.n	8004c20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f839 	bl	8004c92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3304      	adds	r3, #4
 8004c30:	4619      	mov	r1, r3
 8004c32:	4610      	mov	r0, r2
 8004c34:	f000 fdc6 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b083      	sub	sp, #12
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c9a:	bf00      	nop
 8004c9c:	370c      	adds	r7, #12
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
	...

08004ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d109      	bne.n	8004ccc <HAL_TIM_PWM_Start+0x24>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e022      	b.n	8004d12 <HAL_TIM_PWM_Start+0x6a>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d109      	bne.n	8004ce6 <HAL_TIM_PWM_Start+0x3e>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	e015      	b.n	8004d12 <HAL_TIM_PWM_Start+0x6a>
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d109      	bne.n	8004d00 <HAL_TIM_PWM_Start+0x58>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e008      	b.n	8004d12 <HAL_TIM_PWM_Start+0x6a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e07c      	b.n	8004e14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_PWM_Start+0x82>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2202      	movs	r2, #2
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d28:	e013      	b.n	8004d52 <HAL_TIM_PWM_Start+0xaa>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b04      	cmp	r3, #4
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_PWM_Start+0x92>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d38:	e00b      	b.n	8004d52 <HAL_TIM_PWM_Start+0xaa>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d104      	bne.n	8004d4a <HAL_TIM_PWM_Start+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d48:	e003      	b.n	8004d52 <HAL_TIM_PWM_Start+0xaa>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2201      	movs	r2, #1
 8004d58:	6839      	ldr	r1, [r7, #0]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f946 	bl	8005fec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a2d      	ldr	r2, [pc, #180]	; (8004e1c <HAL_TIM_PWM_Start+0x174>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d004      	beq.n	8004d74 <HAL_TIM_PWM_Start+0xcc>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2c      	ldr	r2, [pc, #176]	; (8004e20 <HAL_TIM_PWM_Start+0x178>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d101      	bne.n	8004d78 <HAL_TIM_PWM_Start+0xd0>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <HAL_TIM_PWM_Start+0xd2>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a22      	ldr	r2, [pc, #136]	; (8004e1c <HAL_TIM_PWM_Start+0x174>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d022      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da0:	d01d      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1f      	ldr	r2, [pc, #124]	; (8004e24 <HAL_TIM_PWM_Start+0x17c>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d018      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1d      	ldr	r2, [pc, #116]	; (8004e28 <HAL_TIM_PWM_Start+0x180>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <HAL_TIM_PWM_Start+0x184>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d00e      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a16      	ldr	r2, [pc, #88]	; (8004e20 <HAL_TIM_PWM_Start+0x178>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a18      	ldr	r2, [pc, #96]	; (8004e30 <HAL_TIM_PWM_Start+0x188>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_PWM_Start+0x136>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_TIM_PWM_Start+0x18c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d111      	bne.n	8004e02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b06      	cmp	r3, #6
 8004dee:	d010      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e00:	e007      	b.n	8004e12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0201 	orr.w	r2, r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3710      	adds	r7, #16
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40010000 	.word	0x40010000
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40014000 	.word	0x40014000
 8004e34:	40001800 	.word	0x40001800

08004e38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e041      	b.n	8004ece <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d106      	bne.n	8004e64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f839 	bl	8004ed6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2202      	movs	r2, #2
 8004e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f000 fca4 	bl	80057c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004ede:	bf00      	nop
 8004ee0:	370c      	adds	r7, #12
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_TIM_IC_Start+0x1a>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e013      	b.n	8004f2e <HAL_TIM_IC_Start+0x42>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d104      	bne.n	8004f16 <HAL_TIM_IC_Start+0x2a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	e00b      	b.n	8004f2e <HAL_TIM_IC_Start+0x42>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d104      	bne.n	8004f26 <HAL_TIM_IC_Start+0x3a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e003      	b.n	8004f2e <HAL_TIM_IC_Start+0x42>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <HAL_TIM_IC_Start+0x54>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e013      	b.n	8004f68 <HAL_TIM_IC_Start+0x7c>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d104      	bne.n	8004f50 <HAL_TIM_IC_Start+0x64>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e00b      	b.n	8004f68 <HAL_TIM_IC_Start+0x7c>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	d104      	bne.n	8004f60 <HAL_TIM_IC_Start+0x74>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e003      	b.n	8004f68 <HAL_TIM_IC_Start+0x7c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f70:	7bbb      	ldrb	r3, [r7, #14]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e081      	b.n	800507e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_IC_Start+0x9e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	e013      	b.n	8004fb2 <HAL_TIM_IC_Start+0xc6>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_IC_Start+0xae>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	e00b      	b.n	8004fb2 <HAL_TIM_IC_Start+0xc6>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_IC_Start+0xbe>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	e003      	b.n	8004fb2 <HAL_TIM_IC_Start+0xc6>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d104      	bne.n	8004fc2 <HAL_TIM_IC_Start+0xd6>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc0:	e013      	b.n	8004fea <HAL_TIM_IC_Start+0xfe>
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d104      	bne.n	8004fd2 <HAL_TIM_IC_Start+0xe6>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd0:	e00b      	b.n	8004fea <HAL_TIM_IC_Start+0xfe>
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d104      	bne.n	8004fe2 <HAL_TIM_IC_Start+0xf6>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe0:	e003      	b.n	8004fea <HAL_TIM_IC_Start+0xfe>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	6839      	ldr	r1, [r7, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fffa 	bl	8005fec <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a22      	ldr	r2, [pc, #136]	; (8005088 <HAL_TIM_IC_Start+0x19c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d022      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d01d      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <HAL_TIM_IC_Start+0x1a0>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d018      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1d      	ldr	r2, [pc, #116]	; (8005090 <HAL_TIM_IC_Start+0x1a4>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d013      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a1b      	ldr	r2, [pc, #108]	; (8005094 <HAL_TIM_IC_Start+0x1a8>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d00e      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1a      	ldr	r2, [pc, #104]	; (8005098 <HAL_TIM_IC_Start+0x1ac>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d009      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a18      	ldr	r2, [pc, #96]	; (800509c <HAL_TIM_IC_Start+0x1b0>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d004      	beq.n	8005048 <HAL_TIM_IC_Start+0x15c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <HAL_TIM_IC_Start+0x1b4>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d111      	bne.n	800506c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f003 0307 	and.w	r3, r3, #7
 8005052:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b06      	cmp	r3, #6
 8005058:	d010      	beq.n	800507c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0201 	orr.w	r2, r2, #1
 8005068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800506a:	e007      	b.n	800507c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	40010000 	.word	0x40010000
 800508c:	40000400 	.word	0x40000400
 8005090:	40000800 	.word	0x40000800
 8005094:	40000c00 	.word	0x40000c00
 8005098:	40010400 	.word	0x40010400
 800509c:	40014000 	.word	0x40014000
 80050a0:	40001800 	.word	0x40001800

080050a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d122      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d11b      	bne.n	8005100 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0202 	mvn.w	r2, #2
 80050d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f7fc f9e8 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 fb4a 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fb51 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	2b04      	cmp	r3, #4
 800510c:	d122      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b04      	cmp	r3, #4
 800511a:	d11b      	bne.n	8005154 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f06f 0204 	mvn.w	r2, #4
 8005124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2202      	movs	r2, #2
 800512a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005136:	2b00      	cmp	r3, #0
 8005138:	d003      	beq.n	8005142 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc f9be 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8005140:	e005      	b.n	800514e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fb20 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fb27 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f003 0308 	and.w	r3, r3, #8
 800515e:	2b08      	cmp	r3, #8
 8005160:	d122      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d11b      	bne.n	80051a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f06f 0208 	mvn.w	r2, #8
 8005178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2204      	movs	r2, #4
 800517e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7fc f994 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8005194:	e005      	b.n	80051a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 faf6 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f000 fafd 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d122      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b10      	cmp	r3, #16
 80051c2:	d11b      	bne.n	80051fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc f96a 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 facc 	bl	8005788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fad3 	bl	800579c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b01      	cmp	r3, #1
 8005208:	d10e      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0201 	mvn.w	r2, #1
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7fc f924 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d10e      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005240:	2b80      	cmp	r3, #128	; 0x80
 8005242:	d107      	bne.n	8005254 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800524c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 ff78 	bl	8006144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b40      	cmp	r3, #64	; 0x40
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f000 fa98 	bl	80057b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b20      	cmp	r3, #32
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b20      	cmp	r3, #32
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0220 	mvn.w	r2, #32
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 ff42 	bl	8006130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e088      	b.n	80053e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11b      	bne.n	8005318 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	6819      	ldr	r1, [r3, #0]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f000 fcb8 	bl	8005c64 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 020c 	bic.w	r2, r2, #12
 8005302:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
 8005316:	e060      	b.n	80053da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b04      	cmp	r3, #4
 800531c:	d11c      	bne.n	8005358 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	6819      	ldr	r1, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f000 fd3c 	bl	8005daa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	699a      	ldr	r2, [r3, #24]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005340:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6999      	ldr	r1, [r3, #24]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	021a      	lsls	r2, r3, #8
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	619a      	str	r2, [r3, #24]
 8005356:	e040      	b.n	80053da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2b08      	cmp	r3, #8
 800535c:	d11b      	bne.n	8005396 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6819      	ldr	r1, [r3, #0]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f000 fd89 	bl	8005e84 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 020c 	bic.w	r2, r2, #12
 8005380:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69d9      	ldr	r1, [r3, #28]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	61da      	str	r2, [r3, #28]
 8005394:	e021      	b.n	80053da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2b0c      	cmp	r3, #12
 800539a:	d11c      	bne.n	80053d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6819      	ldr	r1, [r3, #0]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f000 fda6 	bl	8005efc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80053be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69d9      	ldr	r1, [r3, #28]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	430a      	orrs	r2, r1
 80053d2:	61da      	str	r2, [r3, #28]
 80053d4:	e001      	b.n	80053da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053f8:	2300      	movs	r3, #0
 80053fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005402:	2b01      	cmp	r3, #1
 8005404:	d101      	bne.n	800540a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005406:	2302      	movs	r3, #2
 8005408:	e0ae      	b.n	8005568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2201      	movs	r2, #1
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b0c      	cmp	r3, #12
 8005416:	f200 809f 	bhi.w	8005558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005455 	.word	0x08005455
 8005424:	08005559 	.word	0x08005559
 8005428:	08005559 	.word	0x08005559
 800542c:	08005559 	.word	0x08005559
 8005430:	08005495 	.word	0x08005495
 8005434:	08005559 	.word	0x08005559
 8005438:	08005559 	.word	0x08005559
 800543c:	08005559 	.word	0x08005559
 8005440:	080054d7 	.word	0x080054d7
 8005444:	08005559 	.word	0x08005559
 8005448:	08005559 	.word	0x08005559
 800544c:	08005559 	.word	0x08005559
 8005450:	08005517 	.word	0x08005517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	4618      	mov	r0, r3
 800545c:	f000 fa52 	bl	8005904 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0208 	orr.w	r2, r2, #8
 800546e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0204 	bic.w	r2, r2, #4
 800547e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	691a      	ldr	r2, [r3, #16]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
      break;
 8005492:	e064      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 faa2 	bl	80059e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	699a      	ldr	r2, [r3, #24]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6999      	ldr	r1, [r3, #24]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	021a      	lsls	r2, r3, #8
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	619a      	str	r2, [r3, #24]
      break;
 80054d4:	e043      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 faf7 	bl	8005ad0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f042 0208 	orr.w	r2, r2, #8
 80054f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f022 0204 	bic.w	r2, r2, #4
 8005500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69d9      	ldr	r1, [r3, #28]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	691a      	ldr	r2, [r3, #16]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	61da      	str	r2, [r3, #28]
      break;
 8005514:	e023      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	4618      	mov	r0, r3
 800551e:	f000 fb4b 	bl	8005bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69d9      	ldr	r1, [r3, #28]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	021a      	lsls	r2, r3, #8
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	430a      	orrs	r2, r1
 8005554:	61da      	str	r2, [r3, #28]
      break;
 8005556:	e002      	b.n	800555e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	75fb      	strb	r3, [r7, #23]
      break;
 800555c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005566:	7dfb      	ldrb	r3, [r7, #23]
}
 8005568:	4618      	mov	r0, r3
 800556a:	3718      	adds	r7, #24
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005584:	2b01      	cmp	r3, #1
 8005586:	d101      	bne.n	800558c <HAL_TIM_ConfigClockSource+0x1c>
 8005588:	2302      	movs	r3, #2
 800558a:	e0b4      	b.n	80056f6 <HAL_TIM_ConfigClockSource+0x186>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c4:	d03e      	beq.n	8005644 <HAL_TIM_ConfigClockSource+0xd4>
 80055c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ca:	f200 8087 	bhi.w	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_TIM_ConfigClockSource+0x172>
 80055d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055da:	d87f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055dc:	2b70      	cmp	r3, #112	; 0x70
 80055de:	d01a      	beq.n	8005616 <HAL_TIM_ConfigClockSource+0xa6>
 80055e0:	2b70      	cmp	r3, #112	; 0x70
 80055e2:	d87b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055e4:	2b60      	cmp	r3, #96	; 0x60
 80055e6:	d050      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x11a>
 80055e8:	2b60      	cmp	r3, #96	; 0x60
 80055ea:	d877      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b50      	cmp	r3, #80	; 0x50
 80055ee:	d03c      	beq.n	800566a <HAL_TIM_ConfigClockSource+0xfa>
 80055f0:	2b50      	cmp	r3, #80	; 0x50
 80055f2:	d873      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b40      	cmp	r3, #64	; 0x40
 80055f6:	d058      	beq.n	80056aa <HAL_TIM_ConfigClockSource+0x13a>
 80055f8:	2b40      	cmp	r3, #64	; 0x40
 80055fa:	d86f      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b30      	cmp	r3, #48	; 0x30
 80055fe:	d064      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005600:	2b30      	cmp	r3, #48	; 0x30
 8005602:	d86b      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b20      	cmp	r3, #32
 8005606:	d060      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	2b20      	cmp	r3, #32
 800560a:	d867      	bhi.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05c      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b10      	cmp	r3, #16
 8005612:	d05a      	beq.n	80056ca <HAL_TIM_ConfigClockSource+0x15a>
 8005614:	e062      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	6899      	ldr	r1, [r3, #8]
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f000 fcc1 	bl	8005fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	609a      	str	r2, [r3, #8]
      break;
 8005642:	e04f      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	6899      	ldr	r1, [r3, #8]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	f000 fcaa 	bl	8005fac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005666:	609a      	str	r2, [r3, #8]
      break;
 8005668:	e03c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 fb68 	bl	8005d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2150      	movs	r1, #80	; 0x50
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fc77 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 8005688:	e02c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6859      	ldr	r1, [r3, #4]
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	461a      	mov	r2, r3
 8005698:	f000 fbc4 	bl	8005e24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2160      	movs	r1, #96	; 0x60
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 fc67 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 80056a8:	e01c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6859      	ldr	r1, [r3, #4]
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	461a      	mov	r2, r3
 80056b8:	f000 fb48 	bl	8005d4c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2140      	movs	r1, #64	; 0x40
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 fc57 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 80056c8:	e00c      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f000 fc4e 	bl	8005f76 <TIM_ITRx_SetConfig>
      break;
 80056da:	e003      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	73fb      	strb	r3, [r7, #15]
      break;
 80056e0:	e000      	b.n	80056e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
	...

08005700 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b0c      	cmp	r3, #12
 8005712:	d831      	bhi.n	8005778 <HAL_TIM_ReadCapturedValue+0x78>
 8005714:	a201      	add	r2, pc, #4	; (adr r2, 800571c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571a:	bf00      	nop
 800571c:	08005751 	.word	0x08005751
 8005720:	08005779 	.word	0x08005779
 8005724:	08005779 	.word	0x08005779
 8005728:	08005779 	.word	0x08005779
 800572c:	0800575b 	.word	0x0800575b
 8005730:	08005779 	.word	0x08005779
 8005734:	08005779 	.word	0x08005779
 8005738:	08005779 	.word	0x08005779
 800573c:	08005765 	.word	0x08005765
 8005740:	08005779 	.word	0x08005779
 8005744:	08005779 	.word	0x08005779
 8005748:	08005779 	.word	0x08005779
 800574c:	0800576f 	.word	0x0800576f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	60fb      	str	r3, [r7, #12]

      break;
 8005758:	e00f      	b.n	800577a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	60fb      	str	r3, [r7, #12]

      break;
 8005762:	e00a      	b.n	800577a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576a:	60fb      	str	r3, [r7, #12]

      break;
 800576c:	e005      	b.n	800577a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005774:	60fb      	str	r3, [r7, #12]

      break;
 8005776:	e000      	b.n	800577a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005778:	bf00      	nop
  }

  return tmpreg;
 800577a:	68fb      	ldr	r3, [r7, #12]
}
 800577c:	4618      	mov	r0, r3
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005790:	bf00      	nop
 8005792:	370c      	adds	r7, #12
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr

0800579c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b085      	sub	sp, #20
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	4a40      	ldr	r2, [pc, #256]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d013      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e2:	d00f      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a3d      	ldr	r2, [pc, #244]	; (80058dc <TIM_Base_SetConfig+0x118>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a3c      	ldr	r2, [pc, #240]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a3b      	ldr	r2, [pc, #236]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_Base_SetConfig+0x40>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a3a      	ldr	r2, [pc, #232]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d108      	bne.n	8005816 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800580a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	4313      	orrs	r3, r2
 8005814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d02b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005824:	d027      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a2c      	ldr	r2, [pc, #176]	; (80058dc <TIM_Base_SetConfig+0x118>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d023      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a2b      	ldr	r2, [pc, #172]	; (80058e0 <TIM_Base_SetConfig+0x11c>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a2a      	ldr	r2, [pc, #168]	; (80058e4 <TIM_Base_SetConfig+0x120>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d01b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d017      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a28      	ldr	r2, [pc, #160]	; (80058ec <TIM_Base_SetConfig+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d013      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a27      	ldr	r2, [pc, #156]	; (80058f0 <TIM_Base_SetConfig+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00f      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <TIM_Base_SetConfig+0x130>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d00b      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a25      	ldr	r2, [pc, #148]	; (80058f8 <TIM_Base_SetConfig+0x134>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d007      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a24      	ldr	r2, [pc, #144]	; (80058fc <TIM_Base_SetConfig+0x138>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d003      	beq.n	8005876 <TIM_Base_SetConfig+0xb2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a23      	ldr	r2, [pc, #140]	; (8005900 <TIM_Base_SetConfig+0x13c>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d108      	bne.n	8005888 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <TIM_Base_SetConfig+0x114>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d003      	beq.n	80058bc <TIM_Base_SetConfig+0xf8>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a0c      	ldr	r2, [pc, #48]	; (80058e8 <TIM_Base_SetConfig+0x124>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d103      	bne.n	80058c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	691a      	ldr	r2, [r3, #16]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	615a      	str	r2, [r3, #20]
}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	40010000 	.word	0x40010000
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40000c00 	.word	0x40000c00
 80058e8:	40010400 	.word	0x40010400
 80058ec:	40014000 	.word	0x40014000
 80058f0:	40014400 	.word	0x40014400
 80058f4:	40014800 	.word	0x40014800
 80058f8:	40001800 	.word	0x40001800
 80058fc:	40001c00 	.word	0x40001c00
 8005900:	40002000 	.word	0x40002000

08005904 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005904:	b480      	push	{r7}
 8005906:	b087      	sub	sp, #28
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	f023 0201 	bic.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0303 	bic.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 0302 	bic.w	r3, r3, #2
 800594c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	4313      	orrs	r3, r2
 8005956:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a20      	ldr	r2, [pc, #128]	; (80059dc <TIM_OC1_SetConfig+0xd8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_OC1_SetConfig+0x64>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a1f      	ldr	r2, [pc, #124]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d10c      	bne.n	8005982 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f023 0308 	bic.w	r3, r3, #8
 800596e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 0304 	bic.w	r3, r3, #4
 8005980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a15      	ldr	r2, [pc, #84]	; (80059dc <TIM_OC1_SetConfig+0xd8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d003      	beq.n	8005992 <TIM_OC1_SetConfig+0x8e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC1_SetConfig+0xdc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d111      	bne.n	80059b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	693a      	ldr	r2, [r7, #16]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	621a      	str	r2, [r3, #32]
}
 80059d0:	bf00      	nop
 80059d2:	371c      	adds	r7, #28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	40010000 	.word	0x40010000
 80059e0:	40010400 	.word	0x40010400

080059e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f023 0210 	bic.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f023 0320 	bic.w	r3, r3, #32
 8005a2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a22      	ldr	r2, [pc, #136]	; (8005ac8 <TIM_OC2_SetConfig+0xe4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d003      	beq.n	8005a4c <TIM_OC2_SetConfig+0x68>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	4a21      	ldr	r2, [pc, #132]	; (8005acc <TIM_OC2_SetConfig+0xe8>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d10d      	bne.n	8005a68 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	011b      	lsls	r3, r3, #4
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a17      	ldr	r2, [pc, #92]	; (8005ac8 <TIM_OC2_SetConfig+0xe4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_OC2_SetConfig+0x94>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a16      	ldr	r2, [pc, #88]	; (8005acc <TIM_OC2_SetConfig+0xe8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d113      	bne.n	8005aa0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	40010000 	.word	0x40010000
 8005acc:	40010400 	.word	0x40010400

08005ad0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <TIM_OC3_SetConfig+0xe0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d003      	beq.n	8005b36 <TIM_OC3_SetConfig+0x66>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a20      	ldr	r2, [pc, #128]	; (8005bb4 <TIM_OC3_SetConfig+0xe4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d10d      	bne.n	8005b52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	021b      	lsls	r3, r3, #8
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a16      	ldr	r2, [pc, #88]	; (8005bb0 <TIM_OC3_SetConfig+0xe0>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC3_SetConfig+0x92>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <TIM_OC3_SetConfig+0xe4>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d113      	bne.n	8005b8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	693a      	ldr	r2, [r7, #16]
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	621a      	str	r2, [r3, #32]
}
 8005ba4:	bf00      	nop
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40010400 	.word	0x40010400

08005bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b087      	sub	sp, #28
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	021b      	lsls	r3, r3, #8
 8005bf6:	68fa      	ldr	r2, [r7, #12]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a12      	ldr	r2, [pc, #72]	; (8005c5c <TIM_OC4_SetConfig+0xa4>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d003      	beq.n	8005c20 <TIM_OC4_SetConfig+0x68>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a11      	ldr	r2, [pc, #68]	; (8005c60 <TIM_OC4_SetConfig+0xa8>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d109      	bne.n	8005c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	621a      	str	r2, [r3, #32]
}
 8005c4e:	bf00      	nop
 8005c50:	371c      	adds	r7, #28
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	607a      	str	r2, [r7, #4]
 8005c70:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	6a1b      	ldr	r3, [r3, #32]
 8005c88:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4a28      	ldr	r2, [pc, #160]	; (8005d30 <TIM_TI1_SetConfig+0xcc>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d01b      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c98:	d017      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <TIM_TI1_SetConfig+0xd0>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d013      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <TIM_TI1_SetConfig+0xd4>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00f      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4a23      	ldr	r2, [pc, #140]	; (8005d3c <TIM_TI1_SetConfig+0xd8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00b      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	4a22      	ldr	r2, [pc, #136]	; (8005d40 <TIM_TI1_SetConfig+0xdc>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d007      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4a21      	ldr	r2, [pc, #132]	; (8005d44 <TIM_TI1_SetConfig+0xe0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_TI1_SetConfig+0x66>
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4a20      	ldr	r2, [pc, #128]	; (8005d48 <TIM_TI1_SetConfig+0xe4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d101      	bne.n	8005cce <TIM_TI1_SetConfig+0x6a>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <TIM_TI1_SetConfig+0x6c>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d008      	beq.n	8005ce6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f023 0303 	bic.w	r3, r3, #3
 8005cda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e003      	b.n	8005cee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f023 030a 	bic.w	r3, r3, #10
 8005d08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 030a 	and.w	r3, r3, #10
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40000800 	.word	0x40000800
 8005d3c:	40000c00 	.word	0x40000c00
 8005d40:	40010400 	.word	0x40010400
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40001800 	.word	0x40001800

08005d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	f023 0201 	bic.w	r2, r3, #1
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f023 030a 	bic.w	r3, r3, #10
 8005d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	621a      	str	r2, [r3, #32]
}
 8005d9e:	bf00      	nop
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr

08005daa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005daa:	b480      	push	{r7}
 8005dac:	b087      	sub	sp, #28
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	60f8      	str	r0, [r7, #12]
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6a1b      	ldr	r3, [r3, #32]
 8005dbc:	f023 0210 	bic.w	r2, r3, #16
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1b      	ldr	r3, [r3, #32]
 8005dce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005de8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	031b      	lsls	r3, r3, #12
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dfc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	621a      	str	r2, [r3, #32]
}
 8005e18:	bf00      	nop
 8005e1a:	371c      	adds	r7, #28
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f023 0210 	bic.w	r2, r3, #16
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6a1b      	ldr	r3, [r3, #32]
 8005e46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	031b      	lsls	r3, r3, #12
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	011b      	lsls	r3, r3, #4
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	69db      	ldr	r3, [r3, #28]
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f023 0303 	bic.w	r3, r3, #3
 8005eb0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ec0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005ed4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	371c      	adds	r7, #28
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f28:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f3a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	031b      	lsls	r3, r3, #12
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f4e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	031b      	lsls	r3, r3, #12
 8005f54:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	621a      	str	r2, [r3, #32]
}
 8005f6a:	bf00      	nop
 8005f6c:	371c      	adds	r7, #28
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f043 0307 	orr.w	r3, r3, #7
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	609a      	str	r2, [r3, #8]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	021a      	lsls	r2, r3, #8
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	371c      	adds	r7, #28
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f003 031f 	and.w	r3, r3, #31
 8005ffe:	2201      	movs	r2, #1
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1a      	ldr	r2, [r3, #32]
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	43db      	mvns	r3, r3
 800600e:	401a      	ands	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	f003 031f 	and.w	r3, r3, #31
 800601e:	6879      	ldr	r1, [r7, #4]
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	431a      	orrs	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
}
 800602a:	bf00      	nop
 800602c:	371c      	adds	r7, #28
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
	...

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e05a      	b.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006076:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	4313      	orrs	r3, r2
 8006080:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a21      	ldr	r2, [pc, #132]	; (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d022      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d01d      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d018      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1b      	ldr	r2, [pc, #108]	; (800611c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d013      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1a      	ldr	r2, [pc, #104]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00e      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a18      	ldr	r2, [pc, #96]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d009      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d004      	beq.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d10c      	bne.n	80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68ba      	ldr	r2, [r7, #8]
 80060f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40010400 	.word	0x40010400
 8006128:	40014000 	.word	0x40014000
 800612c:	40001800 	.word	0x40001800

08006130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d101      	bne.n	800616a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e03f      	b.n	80061ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc fb6c 	bl	800285c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2224      	movs	r2, #36	; 0x24
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fddf 	bl	8006d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	695a      	ldr	r2, [r3, #20]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}

080061f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b08a      	sub	sp, #40	; 0x28
 80061f6:	af02      	add	r7, sp, #8
 80061f8:	60f8      	str	r0, [r7, #12]
 80061fa:	60b9      	str	r1, [r7, #8]
 80061fc:	603b      	str	r3, [r7, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b20      	cmp	r3, #32
 8006210:	d17c      	bne.n	800630c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <HAL_UART_Transmit+0x2c>
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d101      	bne.n	8006222 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e075      	b.n	800630e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_UART_Transmit+0x3e>
 800622c:	2302      	movs	r3, #2
 800622e:	e06e      	b.n	800630e <HAL_UART_Transmit+0x11c>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2221      	movs	r2, #33	; 0x21
 8006242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006246:	f7fc fbe9 	bl	8002a1c <HAL_GetTick>
 800624a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	88fa      	ldrh	r2, [r7, #6]
 8006250:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006260:	d108      	bne.n	8006274 <HAL_UART_Transmit+0x82>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e003      	b.n	800627c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006284:	e02a      	b.n	80062dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2200      	movs	r2, #0
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 fb1f 	bl	80068d4 <UART_WaitOnFlagUntilTimeout>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d001      	beq.n	80062a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e036      	b.n	800630e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10b      	bne.n	80062be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	881b      	ldrh	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	3302      	adds	r3, #2
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e007      	b.n	80062ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	781a      	ldrb	r2, [r3, #0]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	3b01      	subs	r3, #1
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1cf      	bne.n	8006286 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2200      	movs	r2, #0
 80062ee:	2140      	movs	r1, #64	; 0x40
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 faef 	bl	80068d4 <UART_WaitOnFlagUntilTimeout>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d001      	beq.n	8006300 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e006      	b.n	800630e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	e000      	b.n	800630e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800630c:	2302      	movs	r3, #2
  }
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b084      	sub	sp, #16
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	4613      	mov	r3, r2
 8006322:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b20      	cmp	r3, #32
 800632e:	d11d      	bne.n	800636c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <HAL_UART_Receive_IT+0x26>
 8006336:	88fb      	ldrh	r3, [r7, #6]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e016      	b.n	800636e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_UART_Receive_IT+0x38>
 800634a:	2302      	movs	r3, #2
 800634c:	e00f      	b.n	800636e <HAL_UART_Receive_IT+0x58>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800635c:	88fb      	ldrh	r3, [r7, #6]
 800635e:	461a      	mov	r2, r3
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 fb24 	bl	80069b0 <UART_Start_Receive_IT>
 8006368:	4603      	mov	r3, r0
 800636a:	e000      	b.n	800636e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800636c:	2302      	movs	r3, #2
  }
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
	...

08006378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b0ba      	sub	sp, #232	; 0xe8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800639e:	2300      	movs	r3, #0
 80063a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80063b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10f      	bne.n	80063de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c2:	f003 0320 	and.w	r3, r3, #32
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d009      	beq.n	80063de <HAL_UART_IRQHandler+0x66>
 80063ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fc07 	bl	8006bea <UART_Receive_IT>
      return;
 80063dc:	e256      	b.n	800688c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80063de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80de 	beq.w	80065a4 <HAL_UART_IRQHandler+0x22c>
 80063e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80d1 	beq.w	80065a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_UART_IRQHandler+0xae>
 800640e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0201 	orr.w	r2, r3, #1
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800642a:	f003 0304 	and.w	r3, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <HAL_UART_IRQHandler+0xd2>
 8006432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f043 0202 	orr.w	r2, r3, #2
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_UART_IRQHandler+0xf6>
 8006456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	f043 0204 	orr.w	r2, r3, #4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800646e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <HAL_UART_IRQHandler+0x126>
 800647a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	d105      	bne.n	8006492 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006486:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d005      	beq.n	800649e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006496:	f043 0208 	orr.w	r2, r3, #8
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 81ed 	beq.w	8006882 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ac:	f003 0320 	and.w	r3, r3, #32
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d008      	beq.n	80064c6 <HAL_UART_IRQHandler+0x14e>
 80064b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 fb92 	bl	8006bea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	bf0c      	ite	eq
 80064d4:	2301      	moveq	r3, #1
 80064d6:	2300      	movne	r3, #0
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f003 0308 	and.w	r3, r3, #8
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d103      	bne.n	80064f2 <HAL_UART_IRQHandler+0x17a>
 80064ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d04f      	beq.n	8006592 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa9a 	bl	8006a2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d141      	bne.n	800658a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	3314      	adds	r3, #20
 800650c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800651c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006524:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3314      	adds	r3, #20
 800652e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006532:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006536:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800653e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800654a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1d9      	bne.n	8006506 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006556:	2b00      	cmp	r3, #0
 8006558:	d013      	beq.n	8006582 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800655e:	4a7d      	ldr	r2, [pc, #500]	; (8006754 <HAL_UART_IRQHandler+0x3dc>)
 8006560:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006566:	4618      	mov	r0, r3
 8006568:	f7fd f9b8 	bl	80038dc <HAL_DMA_Abort_IT>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800657c:	4610      	mov	r0, r2
 800657e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006580:	e00e      	b.n	80065a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f990 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006588:	e00a      	b.n	80065a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f000 f98c 	bl	80068a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006590:	e006      	b.n	80065a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f988 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800659e:	e170      	b.n	8006882 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a0:	bf00      	nop
    return;
 80065a2:	e16e      	b.n	8006882 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	f040 814a 	bne.w	8006842 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8143 	beq.w	8006842 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 813c 	beq.w	8006842 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065ca:	2300      	movs	r3, #0
 80065cc:	60bb      	str	r3, [r7, #8]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	f040 80b4 	bne.w	8006758 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 8140 	beq.w	8006886 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800660a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800660e:	429a      	cmp	r2, r3
 8006610:	f080 8139 	bcs.w	8006886 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800661a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006626:	f000 8088 	beq.w	800673a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006640:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006644:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006648:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	330c      	adds	r3, #12
 8006652:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006656:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800665a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006662:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800666e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1d9      	bne.n	800662a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3314      	adds	r3, #20
 800667c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006688:	f023 0301 	bic.w	r3, r3, #1
 800668c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3314      	adds	r3, #20
 8006696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800669a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800669e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066a6:	e841 2300 	strex	r3, r2, [r1]
 80066aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d1e1      	bne.n	8006676 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3314      	adds	r3, #20
 80066b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066bc:	e853 3f00 	ldrex	r3, [r3]
 80066c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80066c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3314      	adds	r3, #20
 80066d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80066d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80066d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80066dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80066e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e3      	bne.n	80066b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	330c      	adds	r3, #12
 80066fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006708:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800670a:	f023 0310 	bic.w	r3, r3, #16
 800670e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800671c:	65ba      	str	r2, [r7, #88]	; 0x58
 800671e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006722:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e3      	bne.n	80066f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	4618      	mov	r0, r3
 8006736:	f7fd f861 	bl	80037fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006742:	b29b      	uxth	r3, r3
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f000 f8b6 	bl	80068bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006750:	e099      	b.n	8006886 <HAL_UART_IRQHandler+0x50e>
 8006752:	bf00      	nop
 8006754:	08006af3 	.word	0x08006af3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006760:	b29b      	uxth	r3, r3
 8006762:	1ad3      	subs	r3, r2, r3
 8006764:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	f000 808b 	beq.w	800688a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006774:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 8086 	beq.w	800688a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330c      	adds	r3, #12
 8006784:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800678e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006790:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006794:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	330c      	adds	r3, #12
 800679e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80067a2:	647a      	str	r2, [r7, #68]	; 0x44
 80067a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80067b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e3      	bne.n	800677e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3314      	adds	r3, #20
 80067bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	623b      	str	r3, [r7, #32]
   return(result);
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	3314      	adds	r3, #20
 80067d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80067da:	633a      	str	r2, [r7, #48]	; 0x30
 80067dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067e2:	e841 2300 	strex	r3, r2, [r1]
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e3      	bne.n	80067b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	330c      	adds	r3, #12
 8006802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	e853 3f00 	ldrex	r3, [r3]
 800680a:	60fb      	str	r3, [r7, #12]
   return(result);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f023 0310 	bic.w	r3, r3, #16
 8006812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006820:	61fa      	str	r2, [r7, #28]
 8006822:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	69b9      	ldr	r1, [r7, #24]
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	617b      	str	r3, [r7, #20]
   return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e3      	bne.n	80067fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006838:	4619      	mov	r1, r3
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f83e 	bl	80068bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006840:	e023      	b.n	800688a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800684a:	2b00      	cmp	r3, #0
 800684c:	d009      	beq.n	8006862 <HAL_UART_IRQHandler+0x4ea>
 800684e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 f95d 	bl	8006b1a <UART_Transmit_IT>
    return;
 8006860:	e014      	b.n	800688c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <HAL_UART_IRQHandler+0x514>
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d008      	beq.n	800688c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f99d 	bl	8006bba <UART_EndTransmit_IT>
    return;
 8006880:	e004      	b.n	800688c <HAL_UART_IRQHandler+0x514>
    return;
 8006882:	bf00      	nop
 8006884:	e002      	b.n	800688c <HAL_UART_IRQHandler+0x514>
      return;
 8006886:	bf00      	nop
 8006888:	e000      	b.n	800688c <HAL_UART_IRQHandler+0x514>
      return;
 800688a:	bf00      	nop
  }
}
 800688c:	37e8      	adds	r7, #232	; 0xe8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop

08006894 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	460b      	mov	r3, r1
 80068c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b090      	sub	sp, #64	; 0x40
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	603b      	str	r3, [r7, #0]
 80068e0:	4613      	mov	r3, r2
 80068e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e4:	e050      	b.n	8006988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ec:	d04c      	beq.n	8006988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d007      	beq.n	8006904 <UART_WaitOnFlagUntilTimeout+0x30>
 80068f4:	f7fc f892 	bl	8002a1c <HAL_GetTick>
 80068f8:	4602      	mov	r2, r0
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	1ad3      	subs	r3, r2, r3
 80068fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006900:	429a      	cmp	r2, r3
 8006902:	d241      	bcs.n	8006988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800691a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006924:	637a      	str	r2, [r7, #52]	; 0x34
 8006926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800692a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800692c:	e841 2300 	strex	r3, r2, [r1]
 8006930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1e5      	bne.n	8006904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3314      	adds	r3, #20
 800693e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	613b      	str	r3, [r7, #16]
   return(result);
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3314      	adds	r3, #20
 8006956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006958:	623a      	str	r2, [r7, #32]
 800695a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695c:	69f9      	ldr	r1, [r7, #28]
 800695e:	6a3a      	ldr	r2, [r7, #32]
 8006960:	e841 2300 	strex	r3, r2, [r1]
 8006964:	61bb      	str	r3, [r7, #24]
   return(result);
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1e5      	bne.n	8006938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2220      	movs	r2, #32
 8006970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e00f      	b.n	80069a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	4013      	ands	r3, r2
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	429a      	cmp	r2, r3
 8006996:	bf0c      	ite	eq
 8006998:	2301      	moveq	r3, #1
 800699a:	2300      	movne	r3, #0
 800699c:	b2db      	uxtb	r3, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	79fb      	ldrb	r3, [r7, #7]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d09f      	beq.n	80068e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3740      	adds	r7, #64	; 0x40
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	88fa      	ldrh	r2, [r7, #6]
 80069c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	88fa      	ldrh	r2, [r7, #6]
 80069ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2222      	movs	r2, #34	; 0x22
 80069da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	695a      	ldr	r2, [r3, #20]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f042 0201 	orr.w	r2, r2, #1
 8006a0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68da      	ldr	r2, [r3, #12]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f042 0220 	orr.w	r2, r2, #32
 8006a1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3714      	adds	r7, #20
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b095      	sub	sp, #84	; 0x54
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a54:	643a      	str	r2, [r7, #64]	; 0x40
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a5c:	e841 2300 	strex	r3, r2, [r1]
 8006a60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1e5      	bne.n	8006a34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	e853 3f00 	ldrex	r3, [r3]
 8006a76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	f023 0301 	bic.w	r3, r3, #1
 8006a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3314      	adds	r3, #20
 8006a86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a90:	e841 2300 	strex	r3, r2, [r1]
 8006a94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1e5      	bne.n	8006a68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d119      	bne.n	8006ad8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f023 0310 	bic.w	r3, r3, #16
 8006aba:	647b      	str	r3, [r7, #68]	; 0x44
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ac4:	61ba      	str	r2, [r7, #24]
 8006ac6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6979      	ldr	r1, [r7, #20]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e5      	bne.n	8006aa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ae6:	bf00      	nop
 8006ae8:	3754      	adds	r7, #84	; 0x54
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b084      	sub	sp, #16
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f7ff fecb 	bl	80068a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b12:	bf00      	nop
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b085      	sub	sp, #20
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b21      	cmp	r3, #33	; 0x21
 8006b2c:	d13e      	bne.n	8006bac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b36:	d114      	bne.n	8006b62 <UART_Transmit_IT+0x48>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d110      	bne.n	8006b62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	1c9a      	adds	r2, r3, #2
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	621a      	str	r2, [r3, #32]
 8006b60:	e008      	b.n	8006b74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a1b      	ldr	r3, [r3, #32]
 8006b66:	1c59      	adds	r1, r3, #1
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6211      	str	r1, [r2, #32]
 8006b6c:	781a      	ldrb	r2, [r3, #0]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4619      	mov	r1, r3
 8006b82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d10f      	bne.n	8006ba8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	e000      	b.n	8006bae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006bac:	2302      	movs	r3, #2
  }
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2220      	movs	r2, #32
 8006bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fe5a 	bl	8006894 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3708      	adds	r7, #8
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b08c      	sub	sp, #48	; 0x30
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b22      	cmp	r3, #34	; 0x22
 8006bfc:	f040 80ab 	bne.w	8006d56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c08:	d117      	bne.n	8006c3a <UART_Receive_IT+0x50>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d113      	bne.n	8006c3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	629a      	str	r2, [r3, #40]	; 0x28
 8006c38:	e026      	b.n	8006c88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c40:	2300      	movs	r3, #0
 8006c42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4c:	d007      	beq.n	8006c5e <UART_Receive_IT+0x74>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <UART_Receive_IT+0x82>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d106      	bne.n	8006c6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	e008      	b.n	8006c7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d15a      	bne.n	8006d52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0220 	bic.w	r2, r2, #32
 8006caa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d135      	bne.n	8006d48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	e853 3f00 	ldrex	r3, [r3]
 8006cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f023 0310 	bic.w	r3, r3, #16
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	330c      	adds	r3, #12
 8006d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d02:	623a      	str	r2, [r7, #32]
 8006d04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	69f9      	ldr	r1, [r7, #28]
 8006d08:	6a3a      	ldr	r2, [r7, #32]
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e5      	bne.n	8006ce2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0310 	and.w	r3, r3, #16
 8006d20:	2b10      	cmp	r3, #16
 8006d22:	d10a      	bne.n	8006d3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d3e:	4619      	mov	r1, r3
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f7ff fdbb 	bl	80068bc <HAL_UARTEx_RxEventCallback>
 8006d46:	e002      	b.n	8006d4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fa fbe1 	bl	8001510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e002      	b.n	8006d58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	e000      	b.n	8006d58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d56:	2302      	movs	r3, #2
  }
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3730      	adds	r7, #48	; 0x30
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d64:	b0c0      	sub	sp, #256	; 0x100
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	68d9      	ldr	r1, [r3, #12]
 8006d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	ea40 0301 	orr.w	r3, r0, r1
 8006d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d9c:	695b      	ldr	r3, [r3, #20]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006db8:	f021 010c 	bic.w	r1, r1, #12
 8006dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dda:	6999      	ldr	r1, [r3, #24]
 8006ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	ea40 0301 	orr.w	r3, r0, r1
 8006de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4b8f      	ldr	r3, [pc, #572]	; (800702c <UART_SetConfig+0x2cc>)
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d005      	beq.n	8006e00 <UART_SetConfig+0xa0>
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	4b8d      	ldr	r3, [pc, #564]	; (8007030 <UART_SetConfig+0x2d0>)
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d104      	bne.n	8006e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e00:	f7fd fe24 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 8006e04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006e08:	e003      	b.n	8006e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e0a:	f7fd fe0b 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
 8006e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e1c:	f040 810c 	bne.w	8007038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e32:	4622      	mov	r2, r4
 8006e34:	462b      	mov	r3, r5
 8006e36:	1891      	adds	r1, r2, r2
 8006e38:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e3a:	415b      	adcs	r3, r3
 8006e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e42:	4621      	mov	r1, r4
 8006e44:	eb12 0801 	adds.w	r8, r2, r1
 8006e48:	4629      	mov	r1, r5
 8006e4a:	eb43 0901 	adc.w	r9, r3, r1
 8006e4e:	f04f 0200 	mov.w	r2, #0
 8006e52:	f04f 0300 	mov.w	r3, #0
 8006e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e62:	4690      	mov	r8, r2
 8006e64:	4699      	mov	r9, r3
 8006e66:	4623      	mov	r3, r4
 8006e68:	eb18 0303 	adds.w	r3, r8, r3
 8006e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e70:	462b      	mov	r3, r5
 8006e72:	eb49 0303 	adc.w	r3, r9, r3
 8006e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e8e:	460b      	mov	r3, r1
 8006e90:	18db      	adds	r3, r3, r3
 8006e92:	653b      	str	r3, [r7, #80]	; 0x50
 8006e94:	4613      	mov	r3, r2
 8006e96:	eb42 0303 	adc.w	r3, r2, r3
 8006e9a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ea4:	f7f9 fef0 	bl	8000c88 <__aeabi_uldivmod>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4b61      	ldr	r3, [pc, #388]	; (8007034 <UART_SetConfig+0x2d4>)
 8006eae:	fba3 2302 	umull	r2, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	011c      	lsls	r4, r3, #4
 8006eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ec8:	4642      	mov	r2, r8
 8006eca:	464b      	mov	r3, r9
 8006ecc:	1891      	adds	r1, r2, r2
 8006ece:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ed0:	415b      	adcs	r3, r3
 8006ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006ed8:	4641      	mov	r1, r8
 8006eda:	eb12 0a01 	adds.w	sl, r2, r1
 8006ede:	4649      	mov	r1, r9
 8006ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ef8:	4692      	mov	sl, r2
 8006efa:	469b      	mov	fp, r3
 8006efc:	4643      	mov	r3, r8
 8006efe:	eb1a 0303 	adds.w	r3, sl, r3
 8006f02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f06:	464b      	mov	r3, r9
 8006f08:	eb4b 0303 	adc.w	r3, fp, r3
 8006f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006f24:	460b      	mov	r3, r1
 8006f26:	18db      	adds	r3, r3, r3
 8006f28:	643b      	str	r3, [r7, #64]	; 0x40
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	eb42 0303 	adc.w	r3, r2, r3
 8006f30:	647b      	str	r3, [r7, #68]	; 0x44
 8006f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f3a:	f7f9 fea5 	bl	8000c88 <__aeabi_uldivmod>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4611      	mov	r1, r2
 8006f44:	4b3b      	ldr	r3, [pc, #236]	; (8007034 <UART_SetConfig+0x2d4>)
 8006f46:	fba3 2301 	umull	r2, r3, r3, r1
 8006f4a:	095b      	lsrs	r3, r3, #5
 8006f4c:	2264      	movs	r2, #100	; 0x64
 8006f4e:	fb02 f303 	mul.w	r3, r2, r3
 8006f52:	1acb      	subs	r3, r1, r3
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f5a:	4b36      	ldr	r3, [pc, #216]	; (8007034 <UART_SetConfig+0x2d4>)
 8006f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f60:	095b      	lsrs	r3, r3, #5
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f68:	441c      	add	r4, r3
 8006f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	464b      	mov	r3, r9
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f84:	415b      	adcs	r3, r3
 8006f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f8c:	4641      	mov	r1, r8
 8006f8e:	1851      	adds	r1, r2, r1
 8006f90:	6339      	str	r1, [r7, #48]	; 0x30
 8006f92:	4649      	mov	r1, r9
 8006f94:	414b      	adcs	r3, r1
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	00cb      	lsls	r3, r1, #3
 8006fa8:	4651      	mov	r1, sl
 8006faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fae:	4651      	mov	r1, sl
 8006fb0:	00ca      	lsls	r2, r1, #3
 8006fb2:	4610      	mov	r0, r2
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	4642      	mov	r2, r8
 8006fba:	189b      	adds	r3, r3, r2
 8006fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fc0:	464b      	mov	r3, r9
 8006fc2:	460a      	mov	r2, r1
 8006fc4:	eb42 0303 	adc.w	r3, r2, r3
 8006fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	18db      	adds	r3, r3, r3
 8006fe4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	eb42 0303 	adc.w	r3, r2, r3
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ff6:	f7f9 fe47 	bl	8000c88 <__aeabi_uldivmod>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	; (8007034 <UART_SetConfig+0x2d4>)
 8007000:	fba3 1302 	umull	r1, r3, r3, r2
 8007004:	095b      	lsrs	r3, r3, #5
 8007006:	2164      	movs	r1, #100	; 0x64
 8007008:	fb01 f303 	mul.w	r3, r1, r3
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	3332      	adds	r3, #50	; 0x32
 8007012:	4a08      	ldr	r2, [pc, #32]	; (8007034 <UART_SetConfig+0x2d4>)
 8007014:	fba2 2303 	umull	r2, r3, r2, r3
 8007018:	095b      	lsrs	r3, r3, #5
 800701a:	f003 0207 	and.w	r2, r3, #7
 800701e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4422      	add	r2, r4
 8007026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007028:	e105      	b.n	8007236 <UART_SetConfig+0x4d6>
 800702a:	bf00      	nop
 800702c:	40011000 	.word	0x40011000
 8007030:	40011400 	.word	0x40011400
 8007034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800703c:	2200      	movs	r2, #0
 800703e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007042:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800704a:	4642      	mov	r2, r8
 800704c:	464b      	mov	r3, r9
 800704e:	1891      	adds	r1, r2, r2
 8007050:	6239      	str	r1, [r7, #32]
 8007052:	415b      	adcs	r3, r3
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
 8007056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800705a:	4641      	mov	r1, r8
 800705c:	1854      	adds	r4, r2, r1
 800705e:	4649      	mov	r1, r9
 8007060:	eb43 0501 	adc.w	r5, r3, r1
 8007064:	f04f 0200 	mov.w	r2, #0
 8007068:	f04f 0300 	mov.w	r3, #0
 800706c:	00eb      	lsls	r3, r5, #3
 800706e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007072:	00e2      	lsls	r2, r4, #3
 8007074:	4614      	mov	r4, r2
 8007076:	461d      	mov	r5, r3
 8007078:	4643      	mov	r3, r8
 800707a:	18e3      	adds	r3, r4, r3
 800707c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007080:	464b      	mov	r3, r9
 8007082:	eb45 0303 	adc.w	r3, r5, r3
 8007086:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007096:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800709a:	f04f 0200 	mov.w	r2, #0
 800709e:	f04f 0300 	mov.w	r3, #0
 80070a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80070a6:	4629      	mov	r1, r5
 80070a8:	008b      	lsls	r3, r1, #2
 80070aa:	4621      	mov	r1, r4
 80070ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b0:	4621      	mov	r1, r4
 80070b2:	008a      	lsls	r2, r1, #2
 80070b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80070b8:	f7f9 fde6 	bl	8000c88 <__aeabi_uldivmod>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4b60      	ldr	r3, [pc, #384]	; (8007244 <UART_SetConfig+0x4e4>)
 80070c2:	fba3 2302 	umull	r2, r3, r3, r2
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	011c      	lsls	r4, r3, #4
 80070ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070ce:	2200      	movs	r2, #0
 80070d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070dc:	4642      	mov	r2, r8
 80070de:	464b      	mov	r3, r9
 80070e0:	1891      	adds	r1, r2, r2
 80070e2:	61b9      	str	r1, [r7, #24]
 80070e4:	415b      	adcs	r3, r3
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070ec:	4641      	mov	r1, r8
 80070ee:	1851      	adds	r1, r2, r1
 80070f0:	6139      	str	r1, [r7, #16]
 80070f2:	4649      	mov	r1, r9
 80070f4:	414b      	adcs	r3, r1
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	f04f 0200 	mov.w	r2, #0
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007104:	4659      	mov	r1, fp
 8007106:	00cb      	lsls	r3, r1, #3
 8007108:	4651      	mov	r1, sl
 800710a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800710e:	4651      	mov	r1, sl
 8007110:	00ca      	lsls	r2, r1, #3
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	4603      	mov	r3, r0
 8007118:	4642      	mov	r2, r8
 800711a:	189b      	adds	r3, r3, r2
 800711c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007120:	464b      	mov	r3, r9
 8007122:	460a      	mov	r2, r1
 8007124:	eb42 0303 	adc.w	r3, r2, r3
 8007128:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800712c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	2200      	movs	r2, #0
 8007134:	67bb      	str	r3, [r7, #120]	; 0x78
 8007136:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007138:	f04f 0200 	mov.w	r2, #0
 800713c:	f04f 0300 	mov.w	r3, #0
 8007140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007144:	4649      	mov	r1, r9
 8007146:	008b      	lsls	r3, r1, #2
 8007148:	4641      	mov	r1, r8
 800714a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800714e:	4641      	mov	r1, r8
 8007150:	008a      	lsls	r2, r1, #2
 8007152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007156:	f7f9 fd97 	bl	8000c88 <__aeabi_uldivmod>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4b39      	ldr	r3, [pc, #228]	; (8007244 <UART_SetConfig+0x4e4>)
 8007160:	fba3 1302 	umull	r1, r3, r3, r2
 8007164:	095b      	lsrs	r3, r3, #5
 8007166:	2164      	movs	r1, #100	; 0x64
 8007168:	fb01 f303 	mul.w	r3, r1, r3
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	3332      	adds	r3, #50	; 0x32
 8007172:	4a34      	ldr	r2, [pc, #208]	; (8007244 <UART_SetConfig+0x4e4>)
 8007174:	fba2 2303 	umull	r2, r3, r2, r3
 8007178:	095b      	lsrs	r3, r3, #5
 800717a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800717e:	441c      	add	r4, r3
 8007180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007184:	2200      	movs	r2, #0
 8007186:	673b      	str	r3, [r7, #112]	; 0x70
 8007188:	677a      	str	r2, [r7, #116]	; 0x74
 800718a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	1891      	adds	r1, r2, r2
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	415b      	adcs	r3, r3
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800719e:	4641      	mov	r1, r8
 80071a0:	1851      	adds	r1, r2, r1
 80071a2:	6039      	str	r1, [r7, #0]
 80071a4:	4649      	mov	r1, r9
 80071a6:	414b      	adcs	r3, r1
 80071a8:	607b      	str	r3, [r7, #4]
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	f04f 0300 	mov.w	r3, #0
 80071b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071b6:	4659      	mov	r1, fp
 80071b8:	00cb      	lsls	r3, r1, #3
 80071ba:	4651      	mov	r1, sl
 80071bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071c0:	4651      	mov	r1, sl
 80071c2:	00ca      	lsls	r2, r1, #3
 80071c4:	4610      	mov	r0, r2
 80071c6:	4619      	mov	r1, r3
 80071c8:	4603      	mov	r3, r0
 80071ca:	4642      	mov	r2, r8
 80071cc:	189b      	adds	r3, r3, r2
 80071ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80071d0:	464b      	mov	r3, r9
 80071d2:	460a      	mov	r2, r1
 80071d4:	eb42 0303 	adc.w	r3, r2, r3
 80071d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	663b      	str	r3, [r7, #96]	; 0x60
 80071e4:	667a      	str	r2, [r7, #100]	; 0x64
 80071e6:	f04f 0200 	mov.w	r2, #0
 80071ea:	f04f 0300 	mov.w	r3, #0
 80071ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071f2:	4649      	mov	r1, r9
 80071f4:	008b      	lsls	r3, r1, #2
 80071f6:	4641      	mov	r1, r8
 80071f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071fc:	4641      	mov	r1, r8
 80071fe:	008a      	lsls	r2, r1, #2
 8007200:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007204:	f7f9 fd40 	bl	8000c88 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <UART_SetConfig+0x4e4>)
 800720e:	fba3 1302 	umull	r1, r3, r3, r2
 8007212:	095b      	lsrs	r3, r3, #5
 8007214:	2164      	movs	r1, #100	; 0x64
 8007216:	fb01 f303 	mul.w	r3, r1, r3
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	3332      	adds	r3, #50	; 0x32
 8007220:	4a08      	ldr	r2, [pc, #32]	; (8007244 <UART_SetConfig+0x4e4>)
 8007222:	fba2 2303 	umull	r2, r3, r2, r3
 8007226:	095b      	lsrs	r3, r3, #5
 8007228:	f003 020f 	and.w	r2, r3, #15
 800722c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4422      	add	r2, r4
 8007234:	609a      	str	r2, [r3, #8]
}
 8007236:	bf00      	nop
 8007238:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800723c:	46bd      	mov	sp, r7
 800723e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007242:	bf00      	nop
 8007244:	51eb851f 	.word	0x51eb851f

08007248 <atoi>:
 8007248:	220a      	movs	r2, #10
 800724a:	2100      	movs	r1, #0
 800724c:	f001 be0c 	b.w	8008e68 <strtol>

08007250 <__errno>:
 8007250:	4b01      	ldr	r3, [pc, #4]	; (8007258 <__errno+0x8>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	20000010 	.word	0x20000010

0800725c <__libc_init_array>:
 800725c:	b570      	push	{r4, r5, r6, lr}
 800725e:	4d0d      	ldr	r5, [pc, #52]	; (8007294 <__libc_init_array+0x38>)
 8007260:	4c0d      	ldr	r4, [pc, #52]	; (8007298 <__libc_init_array+0x3c>)
 8007262:	1b64      	subs	r4, r4, r5
 8007264:	10a4      	asrs	r4, r4, #2
 8007266:	2600      	movs	r6, #0
 8007268:	42a6      	cmp	r6, r4
 800726a:	d109      	bne.n	8007280 <__libc_init_array+0x24>
 800726c:	4d0b      	ldr	r5, [pc, #44]	; (800729c <__libc_init_array+0x40>)
 800726e:	4c0c      	ldr	r4, [pc, #48]	; (80072a0 <__libc_init_array+0x44>)
 8007270:	f004 fd28 	bl	800bcc4 <_init>
 8007274:	1b64      	subs	r4, r4, r5
 8007276:	10a4      	asrs	r4, r4, #2
 8007278:	2600      	movs	r6, #0
 800727a:	42a6      	cmp	r6, r4
 800727c:	d105      	bne.n	800728a <__libc_init_array+0x2e>
 800727e:	bd70      	pop	{r4, r5, r6, pc}
 8007280:	f855 3b04 	ldr.w	r3, [r5], #4
 8007284:	4798      	blx	r3
 8007286:	3601      	adds	r6, #1
 8007288:	e7ee      	b.n	8007268 <__libc_init_array+0xc>
 800728a:	f855 3b04 	ldr.w	r3, [r5], #4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
 8007292:	e7f2      	b.n	800727a <__libc_init_array+0x1e>
 8007294:	0800c2bc 	.word	0x0800c2bc
 8007298:	0800c2bc 	.word	0x0800c2bc
 800729c:	0800c2bc 	.word	0x0800c2bc
 80072a0:	0800c2c0 	.word	0x0800c2c0

080072a4 <memset>:
 80072a4:	4402      	add	r2, r0
 80072a6:	4603      	mov	r3, r0
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d100      	bne.n	80072ae <memset+0xa>
 80072ac:	4770      	bx	lr
 80072ae:	f803 1b01 	strb.w	r1, [r3], #1
 80072b2:	e7f9      	b.n	80072a8 <memset+0x4>

080072b4 <__cvt>:
 80072b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	ec55 4b10 	vmov	r4, r5, d0
 80072bc:	2d00      	cmp	r5, #0
 80072be:	460e      	mov	r6, r1
 80072c0:	4619      	mov	r1, r3
 80072c2:	462b      	mov	r3, r5
 80072c4:	bfbb      	ittet	lt
 80072c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80072ca:	461d      	movlt	r5, r3
 80072cc:	2300      	movge	r3, #0
 80072ce:	232d      	movlt	r3, #45	; 0x2d
 80072d0:	700b      	strb	r3, [r1, #0]
 80072d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80072d8:	4691      	mov	r9, r2
 80072da:	f023 0820 	bic.w	r8, r3, #32
 80072de:	bfbc      	itt	lt
 80072e0:	4622      	movlt	r2, r4
 80072e2:	4614      	movlt	r4, r2
 80072e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80072e8:	d005      	beq.n	80072f6 <__cvt+0x42>
 80072ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80072ee:	d100      	bne.n	80072f2 <__cvt+0x3e>
 80072f0:	3601      	adds	r6, #1
 80072f2:	2102      	movs	r1, #2
 80072f4:	e000      	b.n	80072f8 <__cvt+0x44>
 80072f6:	2103      	movs	r1, #3
 80072f8:	ab03      	add	r3, sp, #12
 80072fa:	9301      	str	r3, [sp, #4]
 80072fc:	ab02      	add	r3, sp, #8
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	ec45 4b10 	vmov	d0, r4, r5
 8007304:	4653      	mov	r3, sl
 8007306:	4632      	mov	r2, r6
 8007308:	f001 ff06 	bl	8009118 <_dtoa_r>
 800730c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007310:	4607      	mov	r7, r0
 8007312:	d102      	bne.n	800731a <__cvt+0x66>
 8007314:	f019 0f01 	tst.w	r9, #1
 8007318:	d022      	beq.n	8007360 <__cvt+0xac>
 800731a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800731e:	eb07 0906 	add.w	r9, r7, r6
 8007322:	d110      	bne.n	8007346 <__cvt+0x92>
 8007324:	783b      	ldrb	r3, [r7, #0]
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d10a      	bne.n	8007340 <__cvt+0x8c>
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f9 fbc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007336:	b918      	cbnz	r0, 8007340 <__cvt+0x8c>
 8007338:	f1c6 0601 	rsb	r6, r6, #1
 800733c:	f8ca 6000 	str.w	r6, [sl]
 8007340:	f8da 3000 	ldr.w	r3, [sl]
 8007344:	4499      	add	r9, r3
 8007346:	2200      	movs	r2, #0
 8007348:	2300      	movs	r3, #0
 800734a:	4620      	mov	r0, r4
 800734c:	4629      	mov	r1, r5
 800734e:	f7f9 fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007352:	b108      	cbz	r0, 8007358 <__cvt+0xa4>
 8007354:	f8cd 900c 	str.w	r9, [sp, #12]
 8007358:	2230      	movs	r2, #48	; 0x30
 800735a:	9b03      	ldr	r3, [sp, #12]
 800735c:	454b      	cmp	r3, r9
 800735e:	d307      	bcc.n	8007370 <__cvt+0xbc>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007364:	1bdb      	subs	r3, r3, r7
 8007366:	4638      	mov	r0, r7
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	b004      	add	sp, #16
 800736c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007370:	1c59      	adds	r1, r3, #1
 8007372:	9103      	str	r1, [sp, #12]
 8007374:	701a      	strb	r2, [r3, #0]
 8007376:	e7f0      	b.n	800735a <__cvt+0xa6>

08007378 <__exponent>:
 8007378:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800737a:	4603      	mov	r3, r0
 800737c:	2900      	cmp	r1, #0
 800737e:	bfb8      	it	lt
 8007380:	4249      	neglt	r1, r1
 8007382:	f803 2b02 	strb.w	r2, [r3], #2
 8007386:	bfb4      	ite	lt
 8007388:	222d      	movlt	r2, #45	; 0x2d
 800738a:	222b      	movge	r2, #43	; 0x2b
 800738c:	2909      	cmp	r1, #9
 800738e:	7042      	strb	r2, [r0, #1]
 8007390:	dd2a      	ble.n	80073e8 <__exponent+0x70>
 8007392:	f10d 0407 	add.w	r4, sp, #7
 8007396:	46a4      	mov	ip, r4
 8007398:	270a      	movs	r7, #10
 800739a:	46a6      	mov	lr, r4
 800739c:	460a      	mov	r2, r1
 800739e:	fb91 f6f7 	sdiv	r6, r1, r7
 80073a2:	fb07 1516 	mls	r5, r7, r6, r1
 80073a6:	3530      	adds	r5, #48	; 0x30
 80073a8:	2a63      	cmp	r2, #99	; 0x63
 80073aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80073ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073b2:	4631      	mov	r1, r6
 80073b4:	dcf1      	bgt.n	800739a <__exponent+0x22>
 80073b6:	3130      	adds	r1, #48	; 0x30
 80073b8:	f1ae 0502 	sub.w	r5, lr, #2
 80073bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073c0:	1c44      	adds	r4, r0, #1
 80073c2:	4629      	mov	r1, r5
 80073c4:	4561      	cmp	r1, ip
 80073c6:	d30a      	bcc.n	80073de <__exponent+0x66>
 80073c8:	f10d 0209 	add.w	r2, sp, #9
 80073cc:	eba2 020e 	sub.w	r2, r2, lr
 80073d0:	4565      	cmp	r5, ip
 80073d2:	bf88      	it	hi
 80073d4:	2200      	movhi	r2, #0
 80073d6:	4413      	add	r3, r2
 80073d8:	1a18      	subs	r0, r3, r0
 80073da:	b003      	add	sp, #12
 80073dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80073e6:	e7ed      	b.n	80073c4 <__exponent+0x4c>
 80073e8:	2330      	movs	r3, #48	; 0x30
 80073ea:	3130      	adds	r1, #48	; 0x30
 80073ec:	7083      	strb	r3, [r0, #2]
 80073ee:	70c1      	strb	r1, [r0, #3]
 80073f0:	1d03      	adds	r3, r0, #4
 80073f2:	e7f1      	b.n	80073d8 <__exponent+0x60>

080073f4 <_printf_float>:
 80073f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073f8:	ed2d 8b02 	vpush	{d8}
 80073fc:	b08d      	sub	sp, #52	; 0x34
 80073fe:	460c      	mov	r4, r1
 8007400:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007404:	4616      	mov	r6, r2
 8007406:	461f      	mov	r7, r3
 8007408:	4605      	mov	r5, r0
 800740a:	f003 f999 	bl	800a740 <_localeconv_r>
 800740e:	f8d0 a000 	ldr.w	sl, [r0]
 8007412:	4650      	mov	r0, sl
 8007414:	f7f8 fedc 	bl	80001d0 <strlen>
 8007418:	2300      	movs	r3, #0
 800741a:	930a      	str	r3, [sp, #40]	; 0x28
 800741c:	6823      	ldr	r3, [r4, #0]
 800741e:	9305      	str	r3, [sp, #20]
 8007420:	f8d8 3000 	ldr.w	r3, [r8]
 8007424:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007428:	3307      	adds	r3, #7
 800742a:	f023 0307 	bic.w	r3, r3, #7
 800742e:	f103 0208 	add.w	r2, r3, #8
 8007432:	f8c8 2000 	str.w	r2, [r8]
 8007436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800743e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007442:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007446:	9307      	str	r3, [sp, #28]
 8007448:	f8cd 8018 	str.w	r8, [sp, #24]
 800744c:	ee08 0a10 	vmov	s16, r0
 8007450:	4b9f      	ldr	r3, [pc, #636]	; (80076d0 <_printf_float+0x2dc>)
 8007452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007456:	f04f 32ff 	mov.w	r2, #4294967295
 800745a:	f7f9 fb67 	bl	8000b2c <__aeabi_dcmpun>
 800745e:	bb88      	cbnz	r0, 80074c4 <_printf_float+0xd0>
 8007460:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007464:	4b9a      	ldr	r3, [pc, #616]	; (80076d0 <_printf_float+0x2dc>)
 8007466:	f04f 32ff 	mov.w	r2, #4294967295
 800746a:	f7f9 fb41 	bl	8000af0 <__aeabi_dcmple>
 800746e:	bb48      	cbnz	r0, 80074c4 <_printf_float+0xd0>
 8007470:	2200      	movs	r2, #0
 8007472:	2300      	movs	r3, #0
 8007474:	4640      	mov	r0, r8
 8007476:	4649      	mov	r1, r9
 8007478:	f7f9 fb30 	bl	8000adc <__aeabi_dcmplt>
 800747c:	b110      	cbz	r0, 8007484 <_printf_float+0x90>
 800747e:	232d      	movs	r3, #45	; 0x2d
 8007480:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007484:	4b93      	ldr	r3, [pc, #588]	; (80076d4 <_printf_float+0x2e0>)
 8007486:	4894      	ldr	r0, [pc, #592]	; (80076d8 <_printf_float+0x2e4>)
 8007488:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800748c:	bf94      	ite	ls
 800748e:	4698      	movls	r8, r3
 8007490:	4680      	movhi	r8, r0
 8007492:	2303      	movs	r3, #3
 8007494:	6123      	str	r3, [r4, #16]
 8007496:	9b05      	ldr	r3, [sp, #20]
 8007498:	f023 0204 	bic.w	r2, r3, #4
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	f04f 0900 	mov.w	r9, #0
 80074a2:	9700      	str	r7, [sp, #0]
 80074a4:	4633      	mov	r3, r6
 80074a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80074a8:	4621      	mov	r1, r4
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f9d8 	bl	8007860 <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	f040 8090 	bne.w	80075d6 <_printf_float+0x1e2>
 80074b6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ba:	b00d      	add	sp, #52	; 0x34
 80074bc:	ecbd 8b02 	vpop	{d8}
 80074c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c4:	4642      	mov	r2, r8
 80074c6:	464b      	mov	r3, r9
 80074c8:	4640      	mov	r0, r8
 80074ca:	4649      	mov	r1, r9
 80074cc:	f7f9 fb2e 	bl	8000b2c <__aeabi_dcmpun>
 80074d0:	b140      	cbz	r0, 80074e4 <_printf_float+0xf0>
 80074d2:	464b      	mov	r3, r9
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bfbc      	itt	lt
 80074d8:	232d      	movlt	r3, #45	; 0x2d
 80074da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80074de:	487f      	ldr	r0, [pc, #508]	; (80076dc <_printf_float+0x2e8>)
 80074e0:	4b7f      	ldr	r3, [pc, #508]	; (80076e0 <_printf_float+0x2ec>)
 80074e2:	e7d1      	b.n	8007488 <_printf_float+0x94>
 80074e4:	6863      	ldr	r3, [r4, #4]
 80074e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80074ea:	9206      	str	r2, [sp, #24]
 80074ec:	1c5a      	adds	r2, r3, #1
 80074ee:	d13f      	bne.n	8007570 <_printf_float+0x17c>
 80074f0:	2306      	movs	r3, #6
 80074f2:	6063      	str	r3, [r4, #4]
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	6861      	ldr	r1, [r4, #4]
 80074f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80074fc:	2300      	movs	r3, #0
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	ab0a      	add	r3, sp, #40	; 0x28
 8007502:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007506:	ab09      	add	r3, sp, #36	; 0x24
 8007508:	ec49 8b10 	vmov	d0, r8, r9
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	6022      	str	r2, [r4, #0]
 8007510:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff fecd 	bl	80072b4 <__cvt>
 800751a:	9b06      	ldr	r3, [sp, #24]
 800751c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800751e:	2b47      	cmp	r3, #71	; 0x47
 8007520:	4680      	mov	r8, r0
 8007522:	d108      	bne.n	8007536 <_printf_float+0x142>
 8007524:	1cc8      	adds	r0, r1, #3
 8007526:	db02      	blt.n	800752e <_printf_float+0x13a>
 8007528:	6863      	ldr	r3, [r4, #4]
 800752a:	4299      	cmp	r1, r3
 800752c:	dd41      	ble.n	80075b2 <_printf_float+0x1be>
 800752e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007532:	fa5f fb8b 	uxtb.w	fp, fp
 8007536:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800753a:	d820      	bhi.n	800757e <_printf_float+0x18a>
 800753c:	3901      	subs	r1, #1
 800753e:	465a      	mov	r2, fp
 8007540:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007544:	9109      	str	r1, [sp, #36]	; 0x24
 8007546:	f7ff ff17 	bl	8007378 <__exponent>
 800754a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800754c:	1813      	adds	r3, r2, r0
 800754e:	2a01      	cmp	r2, #1
 8007550:	4681      	mov	r9, r0
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	dc02      	bgt.n	800755c <_printf_float+0x168>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	07d2      	lsls	r2, r2, #31
 800755a:	d501      	bpl.n	8007560 <_printf_float+0x16c>
 800755c:	3301      	adds	r3, #1
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007564:	2b00      	cmp	r3, #0
 8007566:	d09c      	beq.n	80074a2 <_printf_float+0xae>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800756e:	e798      	b.n	80074a2 <_printf_float+0xae>
 8007570:	9a06      	ldr	r2, [sp, #24]
 8007572:	2a47      	cmp	r2, #71	; 0x47
 8007574:	d1be      	bne.n	80074f4 <_printf_float+0x100>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1bc      	bne.n	80074f4 <_printf_float+0x100>
 800757a:	2301      	movs	r3, #1
 800757c:	e7b9      	b.n	80074f2 <_printf_float+0xfe>
 800757e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007582:	d118      	bne.n	80075b6 <_printf_float+0x1c2>
 8007584:	2900      	cmp	r1, #0
 8007586:	6863      	ldr	r3, [r4, #4]
 8007588:	dd0b      	ble.n	80075a2 <_printf_float+0x1ae>
 800758a:	6121      	str	r1, [r4, #16]
 800758c:	b913      	cbnz	r3, 8007594 <_printf_float+0x1a0>
 800758e:	6822      	ldr	r2, [r4, #0]
 8007590:	07d0      	lsls	r0, r2, #31
 8007592:	d502      	bpl.n	800759a <_printf_float+0x1a6>
 8007594:	3301      	adds	r3, #1
 8007596:	440b      	add	r3, r1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	65a1      	str	r1, [r4, #88]	; 0x58
 800759c:	f04f 0900 	mov.w	r9, #0
 80075a0:	e7de      	b.n	8007560 <_printf_float+0x16c>
 80075a2:	b913      	cbnz	r3, 80075aa <_printf_float+0x1b6>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	07d2      	lsls	r2, r2, #31
 80075a8:	d501      	bpl.n	80075ae <_printf_float+0x1ba>
 80075aa:	3302      	adds	r3, #2
 80075ac:	e7f4      	b.n	8007598 <_printf_float+0x1a4>
 80075ae:	2301      	movs	r3, #1
 80075b0:	e7f2      	b.n	8007598 <_printf_float+0x1a4>
 80075b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	4299      	cmp	r1, r3
 80075ba:	db05      	blt.n	80075c8 <_printf_float+0x1d4>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	6121      	str	r1, [r4, #16]
 80075c0:	07d8      	lsls	r0, r3, #31
 80075c2:	d5ea      	bpl.n	800759a <_printf_float+0x1a6>
 80075c4:	1c4b      	adds	r3, r1, #1
 80075c6:	e7e7      	b.n	8007598 <_printf_float+0x1a4>
 80075c8:	2900      	cmp	r1, #0
 80075ca:	bfd4      	ite	le
 80075cc:	f1c1 0202 	rsble	r2, r1, #2
 80075d0:	2201      	movgt	r2, #1
 80075d2:	4413      	add	r3, r2
 80075d4:	e7e0      	b.n	8007598 <_printf_float+0x1a4>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	055a      	lsls	r2, r3, #21
 80075da:	d407      	bmi.n	80075ec <_printf_float+0x1f8>
 80075dc:	6923      	ldr	r3, [r4, #16]
 80075de:	4642      	mov	r2, r8
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	d12c      	bne.n	8007644 <_printf_float+0x250>
 80075ea:	e764      	b.n	80074b6 <_printf_float+0xc2>
 80075ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80075f0:	f240 80e0 	bls.w	80077b4 <_printf_float+0x3c0>
 80075f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075f8:	2200      	movs	r2, #0
 80075fa:	2300      	movs	r3, #0
 80075fc:	f7f9 fa64 	bl	8000ac8 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d034      	beq.n	800766e <_printf_float+0x27a>
 8007604:	4a37      	ldr	r2, [pc, #220]	; (80076e4 <_printf_float+0x2f0>)
 8007606:	2301      	movs	r3, #1
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	f43f af51 	beq.w	80074b6 <_printf_float+0xc2>
 8007614:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007618:	429a      	cmp	r2, r3
 800761a:	db02      	blt.n	8007622 <_printf_float+0x22e>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	07d8      	lsls	r0, r3, #31
 8007620:	d510      	bpl.n	8007644 <_printf_float+0x250>
 8007622:	ee18 3a10 	vmov	r3, s16
 8007626:	4652      	mov	r2, sl
 8007628:	4631      	mov	r1, r6
 800762a:	4628      	mov	r0, r5
 800762c:	47b8      	blx	r7
 800762e:	3001      	adds	r0, #1
 8007630:	f43f af41 	beq.w	80074b6 <_printf_float+0xc2>
 8007634:	f04f 0800 	mov.w	r8, #0
 8007638:	f104 091a 	add.w	r9, r4, #26
 800763c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800763e:	3b01      	subs	r3, #1
 8007640:	4543      	cmp	r3, r8
 8007642:	dc09      	bgt.n	8007658 <_printf_float+0x264>
 8007644:	6823      	ldr	r3, [r4, #0]
 8007646:	079b      	lsls	r3, r3, #30
 8007648:	f100 8105 	bmi.w	8007856 <_printf_float+0x462>
 800764c:	68e0      	ldr	r0, [r4, #12]
 800764e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007650:	4298      	cmp	r0, r3
 8007652:	bfb8      	it	lt
 8007654:	4618      	movlt	r0, r3
 8007656:	e730      	b.n	80074ba <_printf_float+0xc6>
 8007658:	2301      	movs	r3, #1
 800765a:	464a      	mov	r2, r9
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f af27 	beq.w	80074b6 <_printf_float+0xc2>
 8007668:	f108 0801 	add.w	r8, r8, #1
 800766c:	e7e6      	b.n	800763c <_printf_float+0x248>
 800766e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	dc39      	bgt.n	80076e8 <_printf_float+0x2f4>
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <_printf_float+0x2f0>)
 8007676:	2301      	movs	r3, #1
 8007678:	4631      	mov	r1, r6
 800767a:	4628      	mov	r0, r5
 800767c:	47b8      	blx	r7
 800767e:	3001      	adds	r0, #1
 8007680:	f43f af19 	beq.w	80074b6 <_printf_float+0xc2>
 8007684:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007688:	4313      	orrs	r3, r2
 800768a:	d102      	bne.n	8007692 <_printf_float+0x29e>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	07d9      	lsls	r1, r3, #31
 8007690:	d5d8      	bpl.n	8007644 <_printf_float+0x250>
 8007692:	ee18 3a10 	vmov	r3, s16
 8007696:	4652      	mov	r2, sl
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	47b8      	blx	r7
 800769e:	3001      	adds	r0, #1
 80076a0:	f43f af09 	beq.w	80074b6 <_printf_float+0xc2>
 80076a4:	f04f 0900 	mov.w	r9, #0
 80076a8:	f104 0a1a 	add.w	sl, r4, #26
 80076ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ae:	425b      	negs	r3, r3
 80076b0:	454b      	cmp	r3, r9
 80076b2:	dc01      	bgt.n	80076b8 <_printf_float+0x2c4>
 80076b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b6:	e792      	b.n	80075de <_printf_float+0x1ea>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4652      	mov	r2, sl
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f aef7 	beq.w	80074b6 <_printf_float+0xc2>
 80076c8:	f109 0901 	add.w	r9, r9, #1
 80076cc:	e7ee      	b.n	80076ac <_printf_float+0x2b8>
 80076ce:	bf00      	nop
 80076d0:	7fefffff 	.word	0x7fefffff
 80076d4:	0800be0c 	.word	0x0800be0c
 80076d8:	0800be10 	.word	0x0800be10
 80076dc:	0800be18 	.word	0x0800be18
 80076e0:	0800be14 	.word	0x0800be14
 80076e4:	0800be1c 	.word	0x0800be1c
 80076e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80076ec:	429a      	cmp	r2, r3
 80076ee:	bfa8      	it	ge
 80076f0:	461a      	movge	r2, r3
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	4691      	mov	r9, r2
 80076f6:	dc37      	bgt.n	8007768 <_printf_float+0x374>
 80076f8:	f04f 0b00 	mov.w	fp, #0
 80076fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007700:	f104 021a 	add.w	r2, r4, #26
 8007704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007706:	9305      	str	r3, [sp, #20]
 8007708:	eba3 0309 	sub.w	r3, r3, r9
 800770c:	455b      	cmp	r3, fp
 800770e:	dc33      	bgt.n	8007778 <_printf_float+0x384>
 8007710:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007714:	429a      	cmp	r2, r3
 8007716:	db3b      	blt.n	8007790 <_printf_float+0x39c>
 8007718:	6823      	ldr	r3, [r4, #0]
 800771a:	07da      	lsls	r2, r3, #31
 800771c:	d438      	bmi.n	8007790 <_printf_float+0x39c>
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	9a05      	ldr	r2, [sp, #20]
 8007722:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007724:	1a9a      	subs	r2, r3, r2
 8007726:	eba3 0901 	sub.w	r9, r3, r1
 800772a:	4591      	cmp	r9, r2
 800772c:	bfa8      	it	ge
 800772e:	4691      	movge	r9, r2
 8007730:	f1b9 0f00 	cmp.w	r9, #0
 8007734:	dc35      	bgt.n	80077a2 <_printf_float+0x3ae>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773e:	f104 0a1a 	add.w	sl, r4, #26
 8007742:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007746:	1a9b      	subs	r3, r3, r2
 8007748:	eba3 0309 	sub.w	r3, r3, r9
 800774c:	4543      	cmp	r3, r8
 800774e:	f77f af79 	ble.w	8007644 <_printf_float+0x250>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4631      	mov	r1, r6
 8007758:	4628      	mov	r0, r5
 800775a:	47b8      	blx	r7
 800775c:	3001      	adds	r0, #1
 800775e:	f43f aeaa 	beq.w	80074b6 <_printf_float+0xc2>
 8007762:	f108 0801 	add.w	r8, r8, #1
 8007766:	e7ec      	b.n	8007742 <_printf_float+0x34e>
 8007768:	4613      	mov	r3, r2
 800776a:	4631      	mov	r1, r6
 800776c:	4642      	mov	r2, r8
 800776e:	4628      	mov	r0, r5
 8007770:	47b8      	blx	r7
 8007772:	3001      	adds	r0, #1
 8007774:	d1c0      	bne.n	80076f8 <_printf_float+0x304>
 8007776:	e69e      	b.n	80074b6 <_printf_float+0xc2>
 8007778:	2301      	movs	r3, #1
 800777a:	4631      	mov	r1, r6
 800777c:	4628      	mov	r0, r5
 800777e:	9205      	str	r2, [sp, #20]
 8007780:	47b8      	blx	r7
 8007782:	3001      	adds	r0, #1
 8007784:	f43f ae97 	beq.w	80074b6 <_printf_float+0xc2>
 8007788:	9a05      	ldr	r2, [sp, #20]
 800778a:	f10b 0b01 	add.w	fp, fp, #1
 800778e:	e7b9      	b.n	8007704 <_printf_float+0x310>
 8007790:	ee18 3a10 	vmov	r3, s16
 8007794:	4652      	mov	r2, sl
 8007796:	4631      	mov	r1, r6
 8007798:	4628      	mov	r0, r5
 800779a:	47b8      	blx	r7
 800779c:	3001      	adds	r0, #1
 800779e:	d1be      	bne.n	800771e <_printf_float+0x32a>
 80077a0:	e689      	b.n	80074b6 <_printf_float+0xc2>
 80077a2:	9a05      	ldr	r2, [sp, #20]
 80077a4:	464b      	mov	r3, r9
 80077a6:	4442      	add	r2, r8
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	d1c1      	bne.n	8007736 <_printf_float+0x342>
 80077b2:	e680      	b.n	80074b6 <_printf_float+0xc2>
 80077b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b6:	2a01      	cmp	r2, #1
 80077b8:	dc01      	bgt.n	80077be <_printf_float+0x3ca>
 80077ba:	07db      	lsls	r3, r3, #31
 80077bc:	d538      	bpl.n	8007830 <_printf_float+0x43c>
 80077be:	2301      	movs	r3, #1
 80077c0:	4642      	mov	r2, r8
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	f43f ae74 	beq.w	80074b6 <_printf_float+0xc2>
 80077ce:	ee18 3a10 	vmov	r3, s16
 80077d2:	4652      	mov	r2, sl
 80077d4:	4631      	mov	r1, r6
 80077d6:	4628      	mov	r0, r5
 80077d8:	47b8      	blx	r7
 80077da:	3001      	adds	r0, #1
 80077dc:	f43f ae6b 	beq.w	80074b6 <_printf_float+0xc2>
 80077e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80077e4:	2200      	movs	r2, #0
 80077e6:	2300      	movs	r3, #0
 80077e8:	f7f9 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ec:	b9d8      	cbnz	r0, 8007826 <_printf_float+0x432>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f0:	f108 0201 	add.w	r2, r8, #1
 80077f4:	3b01      	subs	r3, #1
 80077f6:	4631      	mov	r1, r6
 80077f8:	4628      	mov	r0, r5
 80077fa:	47b8      	blx	r7
 80077fc:	3001      	adds	r0, #1
 80077fe:	d10e      	bne.n	800781e <_printf_float+0x42a>
 8007800:	e659      	b.n	80074b6 <_printf_float+0xc2>
 8007802:	2301      	movs	r3, #1
 8007804:	4652      	mov	r2, sl
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	f43f ae52 	beq.w	80074b6 <_printf_float+0xc2>
 8007812:	f108 0801 	add.w	r8, r8, #1
 8007816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007818:	3b01      	subs	r3, #1
 800781a:	4543      	cmp	r3, r8
 800781c:	dcf1      	bgt.n	8007802 <_printf_float+0x40e>
 800781e:	464b      	mov	r3, r9
 8007820:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007824:	e6dc      	b.n	80075e0 <_printf_float+0x1ec>
 8007826:	f04f 0800 	mov.w	r8, #0
 800782a:	f104 0a1a 	add.w	sl, r4, #26
 800782e:	e7f2      	b.n	8007816 <_printf_float+0x422>
 8007830:	2301      	movs	r3, #1
 8007832:	4642      	mov	r2, r8
 8007834:	e7df      	b.n	80077f6 <_printf_float+0x402>
 8007836:	2301      	movs	r3, #1
 8007838:	464a      	mov	r2, r9
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f ae38 	beq.w	80074b6 <_printf_float+0xc2>
 8007846:	f108 0801 	add.w	r8, r8, #1
 800784a:	68e3      	ldr	r3, [r4, #12]
 800784c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800784e:	1a5b      	subs	r3, r3, r1
 8007850:	4543      	cmp	r3, r8
 8007852:	dcf0      	bgt.n	8007836 <_printf_float+0x442>
 8007854:	e6fa      	b.n	800764c <_printf_float+0x258>
 8007856:	f04f 0800 	mov.w	r8, #0
 800785a:	f104 0919 	add.w	r9, r4, #25
 800785e:	e7f4      	b.n	800784a <_printf_float+0x456>

08007860 <_printf_common>:
 8007860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007864:	4616      	mov	r6, r2
 8007866:	4699      	mov	r9, r3
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	690b      	ldr	r3, [r1, #16]
 800786c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007870:	4293      	cmp	r3, r2
 8007872:	bfb8      	it	lt
 8007874:	4613      	movlt	r3, r2
 8007876:	6033      	str	r3, [r6, #0]
 8007878:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800787c:	4607      	mov	r7, r0
 800787e:	460c      	mov	r4, r1
 8007880:	b10a      	cbz	r2, 8007886 <_printf_common+0x26>
 8007882:	3301      	adds	r3, #1
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	0699      	lsls	r1, r3, #26
 800788a:	bf42      	ittt	mi
 800788c:	6833      	ldrmi	r3, [r6, #0]
 800788e:	3302      	addmi	r3, #2
 8007890:	6033      	strmi	r3, [r6, #0]
 8007892:	6825      	ldr	r5, [r4, #0]
 8007894:	f015 0506 	ands.w	r5, r5, #6
 8007898:	d106      	bne.n	80078a8 <_printf_common+0x48>
 800789a:	f104 0a19 	add.w	sl, r4, #25
 800789e:	68e3      	ldr	r3, [r4, #12]
 80078a0:	6832      	ldr	r2, [r6, #0]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	dc26      	bgt.n	80078f6 <_printf_common+0x96>
 80078a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078ac:	1e13      	subs	r3, r2, #0
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	bf18      	it	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	0692      	lsls	r2, r2, #26
 80078b6:	d42b      	bmi.n	8007910 <_printf_common+0xb0>
 80078b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078bc:	4649      	mov	r1, r9
 80078be:	4638      	mov	r0, r7
 80078c0:	47c0      	blx	r8
 80078c2:	3001      	adds	r0, #1
 80078c4:	d01e      	beq.n	8007904 <_printf_common+0xa4>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	68e5      	ldr	r5, [r4, #12]
 80078ca:	6832      	ldr	r2, [r6, #0]
 80078cc:	f003 0306 	and.w	r3, r3, #6
 80078d0:	2b04      	cmp	r3, #4
 80078d2:	bf08      	it	eq
 80078d4:	1aad      	subeq	r5, r5, r2
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	6922      	ldr	r2, [r4, #16]
 80078da:	bf0c      	ite	eq
 80078dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078e0:	2500      	movne	r5, #0
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bfc4      	itt	gt
 80078e6:	1a9b      	subgt	r3, r3, r2
 80078e8:	18ed      	addgt	r5, r5, r3
 80078ea:	2600      	movs	r6, #0
 80078ec:	341a      	adds	r4, #26
 80078ee:	42b5      	cmp	r5, r6
 80078f0:	d11a      	bne.n	8007928 <_printf_common+0xc8>
 80078f2:	2000      	movs	r0, #0
 80078f4:	e008      	b.n	8007908 <_printf_common+0xa8>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4652      	mov	r2, sl
 80078fa:	4649      	mov	r1, r9
 80078fc:	4638      	mov	r0, r7
 80078fe:	47c0      	blx	r8
 8007900:	3001      	adds	r0, #1
 8007902:	d103      	bne.n	800790c <_printf_common+0xac>
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790c:	3501      	adds	r5, #1
 800790e:	e7c6      	b.n	800789e <_printf_common+0x3e>
 8007910:	18e1      	adds	r1, r4, r3
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	2030      	movs	r0, #48	; 0x30
 8007916:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800791a:	4422      	add	r2, r4
 800791c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007920:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007924:	3302      	adds	r3, #2
 8007926:	e7c7      	b.n	80078b8 <_printf_common+0x58>
 8007928:	2301      	movs	r3, #1
 800792a:	4622      	mov	r2, r4
 800792c:	4649      	mov	r1, r9
 800792e:	4638      	mov	r0, r7
 8007930:	47c0      	blx	r8
 8007932:	3001      	adds	r0, #1
 8007934:	d0e6      	beq.n	8007904 <_printf_common+0xa4>
 8007936:	3601      	adds	r6, #1
 8007938:	e7d9      	b.n	80078ee <_printf_common+0x8e>
	...

0800793c <_printf_i>:
 800793c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007940:	7e0f      	ldrb	r7, [r1, #24]
 8007942:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007944:	2f78      	cmp	r7, #120	; 0x78
 8007946:	4691      	mov	r9, r2
 8007948:	4680      	mov	r8, r0
 800794a:	460c      	mov	r4, r1
 800794c:	469a      	mov	sl, r3
 800794e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007952:	d807      	bhi.n	8007964 <_printf_i+0x28>
 8007954:	2f62      	cmp	r7, #98	; 0x62
 8007956:	d80a      	bhi.n	800796e <_printf_i+0x32>
 8007958:	2f00      	cmp	r7, #0
 800795a:	f000 80d8 	beq.w	8007b0e <_printf_i+0x1d2>
 800795e:	2f58      	cmp	r7, #88	; 0x58
 8007960:	f000 80a3 	beq.w	8007aaa <_printf_i+0x16e>
 8007964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007968:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800796c:	e03a      	b.n	80079e4 <_printf_i+0xa8>
 800796e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007972:	2b15      	cmp	r3, #21
 8007974:	d8f6      	bhi.n	8007964 <_printf_i+0x28>
 8007976:	a101      	add	r1, pc, #4	; (adr r1, 800797c <_printf_i+0x40>)
 8007978:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800797c:	080079d5 	.word	0x080079d5
 8007980:	080079e9 	.word	0x080079e9
 8007984:	08007965 	.word	0x08007965
 8007988:	08007965 	.word	0x08007965
 800798c:	08007965 	.word	0x08007965
 8007990:	08007965 	.word	0x08007965
 8007994:	080079e9 	.word	0x080079e9
 8007998:	08007965 	.word	0x08007965
 800799c:	08007965 	.word	0x08007965
 80079a0:	08007965 	.word	0x08007965
 80079a4:	08007965 	.word	0x08007965
 80079a8:	08007af5 	.word	0x08007af5
 80079ac:	08007a19 	.word	0x08007a19
 80079b0:	08007ad7 	.word	0x08007ad7
 80079b4:	08007965 	.word	0x08007965
 80079b8:	08007965 	.word	0x08007965
 80079bc:	08007b17 	.word	0x08007b17
 80079c0:	08007965 	.word	0x08007965
 80079c4:	08007a19 	.word	0x08007a19
 80079c8:	08007965 	.word	0x08007965
 80079cc:	08007965 	.word	0x08007965
 80079d0:	08007adf 	.word	0x08007adf
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	1d1a      	adds	r2, r3, #4
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	602a      	str	r2, [r5, #0]
 80079dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079e4:	2301      	movs	r3, #1
 80079e6:	e0a3      	b.n	8007b30 <_printf_i+0x1f4>
 80079e8:	6820      	ldr	r0, [r4, #0]
 80079ea:	6829      	ldr	r1, [r5, #0]
 80079ec:	0606      	lsls	r6, r0, #24
 80079ee:	f101 0304 	add.w	r3, r1, #4
 80079f2:	d50a      	bpl.n	8007a0a <_printf_i+0xce>
 80079f4:	680e      	ldr	r6, [r1, #0]
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	2e00      	cmp	r6, #0
 80079fa:	da03      	bge.n	8007a04 <_printf_i+0xc8>
 80079fc:	232d      	movs	r3, #45	; 0x2d
 80079fe:	4276      	negs	r6, r6
 8007a00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a04:	485e      	ldr	r0, [pc, #376]	; (8007b80 <_printf_i+0x244>)
 8007a06:	230a      	movs	r3, #10
 8007a08:	e019      	b.n	8007a3e <_printf_i+0x102>
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a12:	bf18      	it	ne
 8007a14:	b236      	sxthne	r6, r6
 8007a16:	e7ef      	b.n	80079f8 <_printf_i+0xbc>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	6820      	ldr	r0, [r4, #0]
 8007a1c:	1d19      	adds	r1, r3, #4
 8007a1e:	6029      	str	r1, [r5, #0]
 8007a20:	0601      	lsls	r1, r0, #24
 8007a22:	d501      	bpl.n	8007a28 <_printf_i+0xec>
 8007a24:	681e      	ldr	r6, [r3, #0]
 8007a26:	e002      	b.n	8007a2e <_printf_i+0xf2>
 8007a28:	0646      	lsls	r6, r0, #25
 8007a2a:	d5fb      	bpl.n	8007a24 <_printf_i+0xe8>
 8007a2c:	881e      	ldrh	r6, [r3, #0]
 8007a2e:	4854      	ldr	r0, [pc, #336]	; (8007b80 <_printf_i+0x244>)
 8007a30:	2f6f      	cmp	r7, #111	; 0x6f
 8007a32:	bf0c      	ite	eq
 8007a34:	2308      	moveq	r3, #8
 8007a36:	230a      	movne	r3, #10
 8007a38:	2100      	movs	r1, #0
 8007a3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a3e:	6865      	ldr	r5, [r4, #4]
 8007a40:	60a5      	str	r5, [r4, #8]
 8007a42:	2d00      	cmp	r5, #0
 8007a44:	bfa2      	ittt	ge
 8007a46:	6821      	ldrge	r1, [r4, #0]
 8007a48:	f021 0104 	bicge.w	r1, r1, #4
 8007a4c:	6021      	strge	r1, [r4, #0]
 8007a4e:	b90e      	cbnz	r6, 8007a54 <_printf_i+0x118>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	d04d      	beq.n	8007af0 <_printf_i+0x1b4>
 8007a54:	4615      	mov	r5, r2
 8007a56:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a5a:	fb03 6711 	mls	r7, r3, r1, r6
 8007a5e:	5dc7      	ldrb	r7, [r0, r7]
 8007a60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a64:	4637      	mov	r7, r6
 8007a66:	42bb      	cmp	r3, r7
 8007a68:	460e      	mov	r6, r1
 8007a6a:	d9f4      	bls.n	8007a56 <_printf_i+0x11a>
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d10b      	bne.n	8007a88 <_printf_i+0x14c>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	07de      	lsls	r6, r3, #31
 8007a74:	d508      	bpl.n	8007a88 <_printf_i+0x14c>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	6861      	ldr	r1, [r4, #4]
 8007a7a:	4299      	cmp	r1, r3
 8007a7c:	bfde      	ittt	le
 8007a7e:	2330      	movle	r3, #48	; 0x30
 8007a80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a88:	1b52      	subs	r2, r2, r5
 8007a8a:	6122      	str	r2, [r4, #16]
 8007a8c:	f8cd a000 	str.w	sl, [sp]
 8007a90:	464b      	mov	r3, r9
 8007a92:	aa03      	add	r2, sp, #12
 8007a94:	4621      	mov	r1, r4
 8007a96:	4640      	mov	r0, r8
 8007a98:	f7ff fee2 	bl	8007860 <_printf_common>
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d14c      	bne.n	8007b3a <_printf_i+0x1fe>
 8007aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa4:	b004      	add	sp, #16
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	4835      	ldr	r0, [pc, #212]	; (8007b80 <_printf_i+0x244>)
 8007aac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ab8:	6029      	str	r1, [r5, #0]
 8007aba:	061d      	lsls	r5, r3, #24
 8007abc:	d514      	bpl.n	8007ae8 <_printf_i+0x1ac>
 8007abe:	07df      	lsls	r7, r3, #31
 8007ac0:	bf44      	itt	mi
 8007ac2:	f043 0320 	orrmi.w	r3, r3, #32
 8007ac6:	6023      	strmi	r3, [r4, #0]
 8007ac8:	b91e      	cbnz	r6, 8007ad2 <_printf_i+0x196>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	f023 0320 	bic.w	r3, r3, #32
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	2310      	movs	r3, #16
 8007ad4:	e7b0      	b.n	8007a38 <_printf_i+0xfc>
 8007ad6:	6823      	ldr	r3, [r4, #0]
 8007ad8:	f043 0320 	orr.w	r3, r3, #32
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	2378      	movs	r3, #120	; 0x78
 8007ae0:	4828      	ldr	r0, [pc, #160]	; (8007b84 <_printf_i+0x248>)
 8007ae2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007ae6:	e7e3      	b.n	8007ab0 <_printf_i+0x174>
 8007ae8:	0659      	lsls	r1, r3, #25
 8007aea:	bf48      	it	mi
 8007aec:	b2b6      	uxthmi	r6, r6
 8007aee:	e7e6      	b.n	8007abe <_printf_i+0x182>
 8007af0:	4615      	mov	r5, r2
 8007af2:	e7bb      	b.n	8007a6c <_printf_i+0x130>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	6826      	ldr	r6, [r4, #0]
 8007af8:	6961      	ldr	r1, [r4, #20]
 8007afa:	1d18      	adds	r0, r3, #4
 8007afc:	6028      	str	r0, [r5, #0]
 8007afe:	0635      	lsls	r5, r6, #24
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	d501      	bpl.n	8007b08 <_printf_i+0x1cc>
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <_printf_i+0x1d2>
 8007b08:	0670      	lsls	r0, r6, #25
 8007b0a:	d5fb      	bpl.n	8007b04 <_printf_i+0x1c8>
 8007b0c:	8019      	strh	r1, [r3, #0]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	6123      	str	r3, [r4, #16]
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7ba      	b.n	8007a8c <_printf_i+0x150>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	1d1a      	adds	r2, r3, #4
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	681d      	ldr	r5, [r3, #0]
 8007b1e:	6862      	ldr	r2, [r4, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7f8 fb5c 	bl	80001e0 <memchr>
 8007b28:	b108      	cbz	r0, 8007b2e <_printf_i+0x1f2>
 8007b2a:	1b40      	subs	r0, r0, r5
 8007b2c:	6060      	str	r0, [r4, #4]
 8007b2e:	6863      	ldr	r3, [r4, #4]
 8007b30:	6123      	str	r3, [r4, #16]
 8007b32:	2300      	movs	r3, #0
 8007b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b38:	e7a8      	b.n	8007a8c <_printf_i+0x150>
 8007b3a:	6923      	ldr	r3, [r4, #16]
 8007b3c:	462a      	mov	r2, r5
 8007b3e:	4649      	mov	r1, r9
 8007b40:	4640      	mov	r0, r8
 8007b42:	47d0      	blx	sl
 8007b44:	3001      	adds	r0, #1
 8007b46:	d0ab      	beq.n	8007aa0 <_printf_i+0x164>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	079b      	lsls	r3, r3, #30
 8007b4c:	d413      	bmi.n	8007b76 <_printf_i+0x23a>
 8007b4e:	68e0      	ldr	r0, [r4, #12]
 8007b50:	9b03      	ldr	r3, [sp, #12]
 8007b52:	4298      	cmp	r0, r3
 8007b54:	bfb8      	it	lt
 8007b56:	4618      	movlt	r0, r3
 8007b58:	e7a4      	b.n	8007aa4 <_printf_i+0x168>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4632      	mov	r2, r6
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	47d0      	blx	sl
 8007b64:	3001      	adds	r0, #1
 8007b66:	d09b      	beq.n	8007aa0 <_printf_i+0x164>
 8007b68:	3501      	adds	r5, #1
 8007b6a:	68e3      	ldr	r3, [r4, #12]
 8007b6c:	9903      	ldr	r1, [sp, #12]
 8007b6e:	1a5b      	subs	r3, r3, r1
 8007b70:	42ab      	cmp	r3, r5
 8007b72:	dcf2      	bgt.n	8007b5a <_printf_i+0x21e>
 8007b74:	e7eb      	b.n	8007b4e <_printf_i+0x212>
 8007b76:	2500      	movs	r5, #0
 8007b78:	f104 0619 	add.w	r6, r4, #25
 8007b7c:	e7f5      	b.n	8007b6a <_printf_i+0x22e>
 8007b7e:	bf00      	nop
 8007b80:	0800be1e 	.word	0x0800be1e
 8007b84:	0800be2f 	.word	0x0800be2f

08007b88 <_scanf_float>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	b087      	sub	sp, #28
 8007b8e:	4617      	mov	r7, r2
 8007b90:	9303      	str	r3, [sp, #12]
 8007b92:	688b      	ldr	r3, [r1, #8]
 8007b94:	1e5a      	subs	r2, r3, #1
 8007b96:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b9a:	bf83      	ittte	hi
 8007b9c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ba0:	195b      	addhi	r3, r3, r5
 8007ba2:	9302      	strhi	r3, [sp, #8]
 8007ba4:	2300      	movls	r3, #0
 8007ba6:	bf86      	itte	hi
 8007ba8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007bac:	608b      	strhi	r3, [r1, #8]
 8007bae:	9302      	strls	r3, [sp, #8]
 8007bb0:	680b      	ldr	r3, [r1, #0]
 8007bb2:	468b      	mov	fp, r1
 8007bb4:	2500      	movs	r5, #0
 8007bb6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007bba:	f84b 3b1c 	str.w	r3, [fp], #28
 8007bbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	460c      	mov	r4, r1
 8007bc6:	465e      	mov	r6, fp
 8007bc8:	46aa      	mov	sl, r5
 8007bca:	46a9      	mov	r9, r5
 8007bcc:	9501      	str	r5, [sp, #4]
 8007bce:	68a2      	ldr	r2, [r4, #8]
 8007bd0:	b152      	cbz	r2, 8007be8 <_scanf_float+0x60>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b4e      	cmp	r3, #78	; 0x4e
 8007bd8:	d864      	bhi.n	8007ca4 <_scanf_float+0x11c>
 8007bda:	2b40      	cmp	r3, #64	; 0x40
 8007bdc:	d83c      	bhi.n	8007c58 <_scanf_float+0xd0>
 8007bde:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007be2:	b2c8      	uxtb	r0, r1
 8007be4:	280e      	cmp	r0, #14
 8007be6:	d93a      	bls.n	8007c5e <_scanf_float+0xd6>
 8007be8:	f1b9 0f00 	cmp.w	r9, #0
 8007bec:	d003      	beq.n	8007bf6 <_scanf_float+0x6e>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bfa:	f1ba 0f01 	cmp.w	sl, #1
 8007bfe:	f200 8113 	bhi.w	8007e28 <_scanf_float+0x2a0>
 8007c02:	455e      	cmp	r6, fp
 8007c04:	f200 8105 	bhi.w	8007e12 <_scanf_float+0x28a>
 8007c08:	2501      	movs	r5, #1
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	b007      	add	sp, #28
 8007c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c12:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007c16:	2a0d      	cmp	r2, #13
 8007c18:	d8e6      	bhi.n	8007be8 <_scanf_float+0x60>
 8007c1a:	a101      	add	r1, pc, #4	; (adr r1, 8007c20 <_scanf_float+0x98>)
 8007c1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c20:	08007d5f 	.word	0x08007d5f
 8007c24:	08007be9 	.word	0x08007be9
 8007c28:	08007be9 	.word	0x08007be9
 8007c2c:	08007be9 	.word	0x08007be9
 8007c30:	08007dbf 	.word	0x08007dbf
 8007c34:	08007d97 	.word	0x08007d97
 8007c38:	08007be9 	.word	0x08007be9
 8007c3c:	08007be9 	.word	0x08007be9
 8007c40:	08007d6d 	.word	0x08007d6d
 8007c44:	08007be9 	.word	0x08007be9
 8007c48:	08007be9 	.word	0x08007be9
 8007c4c:	08007be9 	.word	0x08007be9
 8007c50:	08007be9 	.word	0x08007be9
 8007c54:	08007d25 	.word	0x08007d25
 8007c58:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007c5c:	e7db      	b.n	8007c16 <_scanf_float+0x8e>
 8007c5e:	290e      	cmp	r1, #14
 8007c60:	d8c2      	bhi.n	8007be8 <_scanf_float+0x60>
 8007c62:	a001      	add	r0, pc, #4	; (adr r0, 8007c68 <_scanf_float+0xe0>)
 8007c64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007c68:	08007d17 	.word	0x08007d17
 8007c6c:	08007be9 	.word	0x08007be9
 8007c70:	08007d17 	.word	0x08007d17
 8007c74:	08007dab 	.word	0x08007dab
 8007c78:	08007be9 	.word	0x08007be9
 8007c7c:	08007cc5 	.word	0x08007cc5
 8007c80:	08007d01 	.word	0x08007d01
 8007c84:	08007d01 	.word	0x08007d01
 8007c88:	08007d01 	.word	0x08007d01
 8007c8c:	08007d01 	.word	0x08007d01
 8007c90:	08007d01 	.word	0x08007d01
 8007c94:	08007d01 	.word	0x08007d01
 8007c98:	08007d01 	.word	0x08007d01
 8007c9c:	08007d01 	.word	0x08007d01
 8007ca0:	08007d01 	.word	0x08007d01
 8007ca4:	2b6e      	cmp	r3, #110	; 0x6e
 8007ca6:	d809      	bhi.n	8007cbc <_scanf_float+0x134>
 8007ca8:	2b60      	cmp	r3, #96	; 0x60
 8007caa:	d8b2      	bhi.n	8007c12 <_scanf_float+0x8a>
 8007cac:	2b54      	cmp	r3, #84	; 0x54
 8007cae:	d077      	beq.n	8007da0 <_scanf_float+0x218>
 8007cb0:	2b59      	cmp	r3, #89	; 0x59
 8007cb2:	d199      	bne.n	8007be8 <_scanf_float+0x60>
 8007cb4:	2d07      	cmp	r5, #7
 8007cb6:	d197      	bne.n	8007be8 <_scanf_float+0x60>
 8007cb8:	2508      	movs	r5, #8
 8007cba:	e029      	b.n	8007d10 <_scanf_float+0x188>
 8007cbc:	2b74      	cmp	r3, #116	; 0x74
 8007cbe:	d06f      	beq.n	8007da0 <_scanf_float+0x218>
 8007cc0:	2b79      	cmp	r3, #121	; 0x79
 8007cc2:	e7f6      	b.n	8007cb2 <_scanf_float+0x12a>
 8007cc4:	6821      	ldr	r1, [r4, #0]
 8007cc6:	05c8      	lsls	r0, r1, #23
 8007cc8:	d51a      	bpl.n	8007d00 <_scanf_float+0x178>
 8007cca:	9b02      	ldr	r3, [sp, #8]
 8007ccc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007cd0:	6021      	str	r1, [r4, #0]
 8007cd2:	f109 0901 	add.w	r9, r9, #1
 8007cd6:	b11b      	cbz	r3, 8007ce0 <_scanf_float+0x158>
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	3201      	adds	r2, #1
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	60a2      	str	r2, [r4, #8]
 8007ce0:	68a3      	ldr	r3, [r4, #8]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	60a3      	str	r3, [r4, #8]
 8007ce6:	6923      	ldr	r3, [r4, #16]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	6123      	str	r3, [r4, #16]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	607b      	str	r3, [r7, #4]
 8007cf4:	f340 8084 	ble.w	8007e00 <_scanf_float+0x278>
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	603b      	str	r3, [r7, #0]
 8007cfe:	e766      	b.n	8007bce <_scanf_float+0x46>
 8007d00:	eb1a 0f05 	cmn.w	sl, r5
 8007d04:	f47f af70 	bne.w	8007be8 <_scanf_float+0x60>
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	f806 3b01 	strb.w	r3, [r6], #1
 8007d14:	e7e4      	b.n	8007ce0 <_scanf_float+0x158>
 8007d16:	6822      	ldr	r2, [r4, #0]
 8007d18:	0610      	lsls	r0, r2, #24
 8007d1a:	f57f af65 	bpl.w	8007be8 <_scanf_float+0x60>
 8007d1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d22:	e7f4      	b.n	8007d0e <_scanf_float+0x186>
 8007d24:	f1ba 0f00 	cmp.w	sl, #0
 8007d28:	d10e      	bne.n	8007d48 <_scanf_float+0x1c0>
 8007d2a:	f1b9 0f00 	cmp.w	r9, #0
 8007d2e:	d10e      	bne.n	8007d4e <_scanf_float+0x1c6>
 8007d30:	6822      	ldr	r2, [r4, #0]
 8007d32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d3a:	d108      	bne.n	8007d4e <_scanf_float+0x1c6>
 8007d3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d40:	6022      	str	r2, [r4, #0]
 8007d42:	f04f 0a01 	mov.w	sl, #1
 8007d46:	e7e3      	b.n	8007d10 <_scanf_float+0x188>
 8007d48:	f1ba 0f02 	cmp.w	sl, #2
 8007d4c:	d055      	beq.n	8007dfa <_scanf_float+0x272>
 8007d4e:	2d01      	cmp	r5, #1
 8007d50:	d002      	beq.n	8007d58 <_scanf_float+0x1d0>
 8007d52:	2d04      	cmp	r5, #4
 8007d54:	f47f af48 	bne.w	8007be8 <_scanf_float+0x60>
 8007d58:	3501      	adds	r5, #1
 8007d5a:	b2ed      	uxtb	r5, r5
 8007d5c:	e7d8      	b.n	8007d10 <_scanf_float+0x188>
 8007d5e:	f1ba 0f01 	cmp.w	sl, #1
 8007d62:	f47f af41 	bne.w	8007be8 <_scanf_float+0x60>
 8007d66:	f04f 0a02 	mov.w	sl, #2
 8007d6a:	e7d1      	b.n	8007d10 <_scanf_float+0x188>
 8007d6c:	b97d      	cbnz	r5, 8007d8e <_scanf_float+0x206>
 8007d6e:	f1b9 0f00 	cmp.w	r9, #0
 8007d72:	f47f af3c 	bne.w	8007bee <_scanf_float+0x66>
 8007d76:	6822      	ldr	r2, [r4, #0]
 8007d78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007d7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007d80:	f47f af39 	bne.w	8007bf6 <_scanf_float+0x6e>
 8007d84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d88:	6022      	str	r2, [r4, #0]
 8007d8a:	2501      	movs	r5, #1
 8007d8c:	e7c0      	b.n	8007d10 <_scanf_float+0x188>
 8007d8e:	2d03      	cmp	r5, #3
 8007d90:	d0e2      	beq.n	8007d58 <_scanf_float+0x1d0>
 8007d92:	2d05      	cmp	r5, #5
 8007d94:	e7de      	b.n	8007d54 <_scanf_float+0x1cc>
 8007d96:	2d02      	cmp	r5, #2
 8007d98:	f47f af26 	bne.w	8007be8 <_scanf_float+0x60>
 8007d9c:	2503      	movs	r5, #3
 8007d9e:	e7b7      	b.n	8007d10 <_scanf_float+0x188>
 8007da0:	2d06      	cmp	r5, #6
 8007da2:	f47f af21 	bne.w	8007be8 <_scanf_float+0x60>
 8007da6:	2507      	movs	r5, #7
 8007da8:	e7b2      	b.n	8007d10 <_scanf_float+0x188>
 8007daa:	6822      	ldr	r2, [r4, #0]
 8007dac:	0591      	lsls	r1, r2, #22
 8007dae:	f57f af1b 	bpl.w	8007be8 <_scanf_float+0x60>
 8007db2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007db6:	6022      	str	r2, [r4, #0]
 8007db8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007dbc:	e7a8      	b.n	8007d10 <_scanf_float+0x188>
 8007dbe:	6822      	ldr	r2, [r4, #0]
 8007dc0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007dc4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007dc8:	d006      	beq.n	8007dd8 <_scanf_float+0x250>
 8007dca:	0550      	lsls	r0, r2, #21
 8007dcc:	f57f af0c 	bpl.w	8007be8 <_scanf_float+0x60>
 8007dd0:	f1b9 0f00 	cmp.w	r9, #0
 8007dd4:	f43f af0f 	beq.w	8007bf6 <_scanf_float+0x6e>
 8007dd8:	0591      	lsls	r1, r2, #22
 8007dda:	bf58      	it	pl
 8007ddc:	9901      	ldrpl	r1, [sp, #4]
 8007dde:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007de2:	bf58      	it	pl
 8007de4:	eba9 0101 	subpl.w	r1, r9, r1
 8007de8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007dec:	bf58      	it	pl
 8007dee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007df2:	6022      	str	r2, [r4, #0]
 8007df4:	f04f 0900 	mov.w	r9, #0
 8007df8:	e78a      	b.n	8007d10 <_scanf_float+0x188>
 8007dfa:	f04f 0a03 	mov.w	sl, #3
 8007dfe:	e787      	b.n	8007d10 <_scanf_float+0x188>
 8007e00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007e04:	4639      	mov	r1, r7
 8007e06:	4640      	mov	r0, r8
 8007e08:	4798      	blx	r3
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	f43f aedf 	beq.w	8007bce <_scanf_float+0x46>
 8007e10:	e6ea      	b.n	8007be8 <_scanf_float+0x60>
 8007e12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e1a:	463a      	mov	r2, r7
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	4798      	blx	r3
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	6123      	str	r3, [r4, #16]
 8007e26:	e6ec      	b.n	8007c02 <_scanf_float+0x7a>
 8007e28:	1e6b      	subs	r3, r5, #1
 8007e2a:	2b06      	cmp	r3, #6
 8007e2c:	d825      	bhi.n	8007e7a <_scanf_float+0x2f2>
 8007e2e:	2d02      	cmp	r5, #2
 8007e30:	d836      	bhi.n	8007ea0 <_scanf_float+0x318>
 8007e32:	455e      	cmp	r6, fp
 8007e34:	f67f aee8 	bls.w	8007c08 <_scanf_float+0x80>
 8007e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e40:	463a      	mov	r2, r7
 8007e42:	4640      	mov	r0, r8
 8007e44:	4798      	blx	r3
 8007e46:	6923      	ldr	r3, [r4, #16]
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	6123      	str	r3, [r4, #16]
 8007e4c:	e7f1      	b.n	8007e32 <_scanf_float+0x2aa>
 8007e4e:	9802      	ldr	r0, [sp, #8]
 8007e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007e58:	9002      	str	r0, [sp, #8]
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	4640      	mov	r0, r8
 8007e5e:	4798      	blx	r3
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	6123      	str	r3, [r4, #16]
 8007e66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6a:	fa5f fa8a 	uxtb.w	sl, sl
 8007e6e:	f1ba 0f02 	cmp.w	sl, #2
 8007e72:	d1ec      	bne.n	8007e4e <_scanf_float+0x2c6>
 8007e74:	3d03      	subs	r5, #3
 8007e76:	b2ed      	uxtb	r5, r5
 8007e78:	1b76      	subs	r6, r6, r5
 8007e7a:	6823      	ldr	r3, [r4, #0]
 8007e7c:	05da      	lsls	r2, r3, #23
 8007e7e:	d52f      	bpl.n	8007ee0 <_scanf_float+0x358>
 8007e80:	055b      	lsls	r3, r3, #21
 8007e82:	d510      	bpl.n	8007ea6 <_scanf_float+0x31e>
 8007e84:	455e      	cmp	r6, fp
 8007e86:	f67f aebf 	bls.w	8007c08 <_scanf_float+0x80>
 8007e8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e92:	463a      	mov	r2, r7
 8007e94:	4640      	mov	r0, r8
 8007e96:	4798      	blx	r3
 8007e98:	6923      	ldr	r3, [r4, #16]
 8007e9a:	3b01      	subs	r3, #1
 8007e9c:	6123      	str	r3, [r4, #16]
 8007e9e:	e7f1      	b.n	8007e84 <_scanf_float+0x2fc>
 8007ea0:	46aa      	mov	sl, r5
 8007ea2:	9602      	str	r6, [sp, #8]
 8007ea4:	e7df      	b.n	8007e66 <_scanf_float+0x2de>
 8007ea6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	2965      	cmp	r1, #101	; 0x65
 8007eae:	f103 33ff 	add.w	r3, r3, #4294967295
 8007eb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007eb6:	6123      	str	r3, [r4, #16]
 8007eb8:	d00c      	beq.n	8007ed4 <_scanf_float+0x34c>
 8007eba:	2945      	cmp	r1, #69	; 0x45
 8007ebc:	d00a      	beq.n	8007ed4 <_scanf_float+0x34c>
 8007ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	4798      	blx	r3
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	1eb5      	subs	r5, r6, #2
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ed8:	463a      	mov	r2, r7
 8007eda:	4640      	mov	r0, r8
 8007edc:	4798      	blx	r3
 8007ede:	462e      	mov	r6, r5
 8007ee0:	6825      	ldr	r5, [r4, #0]
 8007ee2:	f015 0510 	ands.w	r5, r5, #16
 8007ee6:	d159      	bne.n	8007f9c <_scanf_float+0x414>
 8007ee8:	7035      	strb	r5, [r6, #0]
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef4:	d11b      	bne.n	8007f2e <_scanf_float+0x3a6>
 8007ef6:	9b01      	ldr	r3, [sp, #4]
 8007ef8:	454b      	cmp	r3, r9
 8007efa:	eba3 0209 	sub.w	r2, r3, r9
 8007efe:	d123      	bne.n	8007f48 <_scanf_float+0x3c0>
 8007f00:	2200      	movs	r2, #0
 8007f02:	4659      	mov	r1, fp
 8007f04:	4640      	mov	r0, r8
 8007f06:	f000 ff25 	bl	8008d54 <_strtod_r>
 8007f0a:	6822      	ldr	r2, [r4, #0]
 8007f0c:	9b03      	ldr	r3, [sp, #12]
 8007f0e:	f012 0f02 	tst.w	r2, #2
 8007f12:	ec57 6b10 	vmov	r6, r7, d0
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	d021      	beq.n	8007f5e <_scanf_float+0x3d6>
 8007f1a:	9903      	ldr	r1, [sp, #12]
 8007f1c:	1d1a      	adds	r2, r3, #4
 8007f1e:	600a      	str	r2, [r1, #0]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	e9c3 6700 	strd	r6, r7, [r3]
 8007f26:	68e3      	ldr	r3, [r4, #12]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	60e3      	str	r3, [r4, #12]
 8007f2c:	e66d      	b.n	8007c0a <_scanf_float+0x82>
 8007f2e:	9b04      	ldr	r3, [sp, #16]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0e5      	beq.n	8007f00 <_scanf_float+0x378>
 8007f34:	9905      	ldr	r1, [sp, #20]
 8007f36:	230a      	movs	r3, #10
 8007f38:	462a      	mov	r2, r5
 8007f3a:	3101      	adds	r1, #1
 8007f3c:	4640      	mov	r0, r8
 8007f3e:	f000 ff91 	bl	8008e64 <_strtol_r>
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	9e05      	ldr	r6, [sp, #20]
 8007f46:	1ac2      	subs	r2, r0, r3
 8007f48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007f4c:	429e      	cmp	r6, r3
 8007f4e:	bf28      	it	cs
 8007f50:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007f54:	4912      	ldr	r1, [pc, #72]	; (8007fa0 <_scanf_float+0x418>)
 8007f56:	4630      	mov	r0, r6
 8007f58:	f000 f8ba 	bl	80080d0 <siprintf>
 8007f5c:	e7d0      	b.n	8007f00 <_scanf_float+0x378>
 8007f5e:	9903      	ldr	r1, [sp, #12]
 8007f60:	f012 0f04 	tst.w	r2, #4
 8007f64:	f103 0204 	add.w	r2, r3, #4
 8007f68:	600a      	str	r2, [r1, #0]
 8007f6a:	d1d9      	bne.n	8007f20 <_scanf_float+0x398>
 8007f6c:	f8d3 8000 	ldr.w	r8, [r3]
 8007f70:	ee10 2a10 	vmov	r2, s0
 8007f74:	ee10 0a10 	vmov	r0, s0
 8007f78:	463b      	mov	r3, r7
 8007f7a:	4639      	mov	r1, r7
 8007f7c:	f7f8 fdd6 	bl	8000b2c <__aeabi_dcmpun>
 8007f80:	b128      	cbz	r0, 8007f8e <_scanf_float+0x406>
 8007f82:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <_scanf_float+0x41c>)
 8007f84:	f000 f89e 	bl	80080c4 <nanf>
 8007f88:	ed88 0a00 	vstr	s0, [r8]
 8007f8c:	e7cb      	b.n	8007f26 <_scanf_float+0x39e>
 8007f8e:	4630      	mov	r0, r6
 8007f90:	4639      	mov	r1, r7
 8007f92:	f7f8 fe29 	bl	8000be8 <__aeabi_d2f>
 8007f96:	f8c8 0000 	str.w	r0, [r8]
 8007f9a:	e7c4      	b.n	8007f26 <_scanf_float+0x39e>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	e634      	b.n	8007c0a <_scanf_float+0x82>
 8007fa0:	0800be40 	.word	0x0800be40
 8007fa4:	0800c2b0 	.word	0x0800c2b0

08007fa8 <iprintf>:
 8007fa8:	b40f      	push	{r0, r1, r2, r3}
 8007faa:	4b0a      	ldr	r3, [pc, #40]	; (8007fd4 <iprintf+0x2c>)
 8007fac:	b513      	push	{r0, r1, r4, lr}
 8007fae:	681c      	ldr	r4, [r3, #0]
 8007fb0:	b124      	cbz	r4, 8007fbc <iprintf+0x14>
 8007fb2:	69a3      	ldr	r3, [r4, #24]
 8007fb4:	b913      	cbnz	r3, 8007fbc <iprintf+0x14>
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f001 ffb6 	bl	8009f28 <__sinit>
 8007fbc:	ab05      	add	r3, sp, #20
 8007fbe:	9a04      	ldr	r2, [sp, #16]
 8007fc0:	68a1      	ldr	r1, [r4, #8]
 8007fc2:	9301      	str	r3, [sp, #4]
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f003 fb8d 	bl	800b6e4 <_vfiprintf_r>
 8007fca:	b002      	add	sp, #8
 8007fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fd0:	b004      	add	sp, #16
 8007fd2:	4770      	bx	lr
 8007fd4:	20000010 	.word	0x20000010

08007fd8 <_puts_r>:
 8007fd8:	b570      	push	{r4, r5, r6, lr}
 8007fda:	460e      	mov	r6, r1
 8007fdc:	4605      	mov	r5, r0
 8007fde:	b118      	cbz	r0, 8007fe8 <_puts_r+0x10>
 8007fe0:	6983      	ldr	r3, [r0, #24]
 8007fe2:	b90b      	cbnz	r3, 8007fe8 <_puts_r+0x10>
 8007fe4:	f001 ffa0 	bl	8009f28 <__sinit>
 8007fe8:	69ab      	ldr	r3, [r5, #24]
 8007fea:	68ac      	ldr	r4, [r5, #8]
 8007fec:	b913      	cbnz	r3, 8007ff4 <_puts_r+0x1c>
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f001 ff9a 	bl	8009f28 <__sinit>
 8007ff4:	4b2c      	ldr	r3, [pc, #176]	; (80080a8 <_puts_r+0xd0>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d120      	bne.n	800803c <_puts_r+0x64>
 8007ffa:	686c      	ldr	r4, [r5, #4]
 8007ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ffe:	07db      	lsls	r3, r3, #31
 8008000:	d405      	bmi.n	800800e <_puts_r+0x36>
 8008002:	89a3      	ldrh	r3, [r4, #12]
 8008004:	0598      	lsls	r0, r3, #22
 8008006:	d402      	bmi.n	800800e <_puts_r+0x36>
 8008008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800800a:	f002 fb9e 	bl	800a74a <__retarget_lock_acquire_recursive>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	0719      	lsls	r1, r3, #28
 8008012:	d51d      	bpl.n	8008050 <_puts_r+0x78>
 8008014:	6923      	ldr	r3, [r4, #16]
 8008016:	b1db      	cbz	r3, 8008050 <_puts_r+0x78>
 8008018:	3e01      	subs	r6, #1
 800801a:	68a3      	ldr	r3, [r4, #8]
 800801c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008020:	3b01      	subs	r3, #1
 8008022:	60a3      	str	r3, [r4, #8]
 8008024:	bb39      	cbnz	r1, 8008076 <_puts_r+0x9e>
 8008026:	2b00      	cmp	r3, #0
 8008028:	da38      	bge.n	800809c <_puts_r+0xc4>
 800802a:	4622      	mov	r2, r4
 800802c:	210a      	movs	r1, #10
 800802e:	4628      	mov	r0, r5
 8008030:	f000 ff24 	bl	8008e7c <__swbuf_r>
 8008034:	3001      	adds	r0, #1
 8008036:	d011      	beq.n	800805c <_puts_r+0x84>
 8008038:	250a      	movs	r5, #10
 800803a:	e011      	b.n	8008060 <_puts_r+0x88>
 800803c:	4b1b      	ldr	r3, [pc, #108]	; (80080ac <_puts_r+0xd4>)
 800803e:	429c      	cmp	r4, r3
 8008040:	d101      	bne.n	8008046 <_puts_r+0x6e>
 8008042:	68ac      	ldr	r4, [r5, #8]
 8008044:	e7da      	b.n	8007ffc <_puts_r+0x24>
 8008046:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <_puts_r+0xd8>)
 8008048:	429c      	cmp	r4, r3
 800804a:	bf08      	it	eq
 800804c:	68ec      	ldreq	r4, [r5, #12]
 800804e:	e7d5      	b.n	8007ffc <_puts_r+0x24>
 8008050:	4621      	mov	r1, r4
 8008052:	4628      	mov	r0, r5
 8008054:	f000 ff64 	bl	8008f20 <__swsetup_r>
 8008058:	2800      	cmp	r0, #0
 800805a:	d0dd      	beq.n	8008018 <_puts_r+0x40>
 800805c:	f04f 35ff 	mov.w	r5, #4294967295
 8008060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008062:	07da      	lsls	r2, r3, #31
 8008064:	d405      	bmi.n	8008072 <_puts_r+0x9a>
 8008066:	89a3      	ldrh	r3, [r4, #12]
 8008068:	059b      	lsls	r3, r3, #22
 800806a:	d402      	bmi.n	8008072 <_puts_r+0x9a>
 800806c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800806e:	f002 fb6d 	bl	800a74c <__retarget_lock_release_recursive>
 8008072:	4628      	mov	r0, r5
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	2b00      	cmp	r3, #0
 8008078:	da04      	bge.n	8008084 <_puts_r+0xac>
 800807a:	69a2      	ldr	r2, [r4, #24]
 800807c:	429a      	cmp	r2, r3
 800807e:	dc06      	bgt.n	800808e <_puts_r+0xb6>
 8008080:	290a      	cmp	r1, #10
 8008082:	d004      	beq.n	800808e <_puts_r+0xb6>
 8008084:	6823      	ldr	r3, [r4, #0]
 8008086:	1c5a      	adds	r2, r3, #1
 8008088:	6022      	str	r2, [r4, #0]
 800808a:	7019      	strb	r1, [r3, #0]
 800808c:	e7c5      	b.n	800801a <_puts_r+0x42>
 800808e:	4622      	mov	r2, r4
 8008090:	4628      	mov	r0, r5
 8008092:	f000 fef3 	bl	8008e7c <__swbuf_r>
 8008096:	3001      	adds	r0, #1
 8008098:	d1bf      	bne.n	800801a <_puts_r+0x42>
 800809a:	e7df      	b.n	800805c <_puts_r+0x84>
 800809c:	6823      	ldr	r3, [r4, #0]
 800809e:	250a      	movs	r5, #10
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	701d      	strb	r5, [r3, #0]
 80080a6:	e7db      	b.n	8008060 <_puts_r+0x88>
 80080a8:	0800c04c 	.word	0x0800c04c
 80080ac:	0800c06c 	.word	0x0800c06c
 80080b0:	0800c02c 	.word	0x0800c02c

080080b4 <puts>:
 80080b4:	4b02      	ldr	r3, [pc, #8]	; (80080c0 <puts+0xc>)
 80080b6:	4601      	mov	r1, r0
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	f7ff bf8d 	b.w	8007fd8 <_puts_r>
 80080be:	bf00      	nop
 80080c0:	20000010 	.word	0x20000010

080080c4 <nanf>:
 80080c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80080cc <nanf+0x8>
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	7fc00000 	.word	0x7fc00000

080080d0 <siprintf>:
 80080d0:	b40e      	push	{r1, r2, r3}
 80080d2:	b500      	push	{lr}
 80080d4:	b09c      	sub	sp, #112	; 0x70
 80080d6:	ab1d      	add	r3, sp, #116	; 0x74
 80080d8:	9002      	str	r0, [sp, #8]
 80080da:	9006      	str	r0, [sp, #24]
 80080dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080e0:	4809      	ldr	r0, [pc, #36]	; (8008108 <siprintf+0x38>)
 80080e2:	9107      	str	r1, [sp, #28]
 80080e4:	9104      	str	r1, [sp, #16]
 80080e6:	4909      	ldr	r1, [pc, #36]	; (800810c <siprintf+0x3c>)
 80080e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080ec:	9105      	str	r1, [sp, #20]
 80080ee:	6800      	ldr	r0, [r0, #0]
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	a902      	add	r1, sp, #8
 80080f4:	f003 f9cc 	bl	800b490 <_svfiprintf_r>
 80080f8:	9b02      	ldr	r3, [sp, #8]
 80080fa:	2200      	movs	r2, #0
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	b01c      	add	sp, #112	; 0x70
 8008100:	f85d eb04 	ldr.w	lr, [sp], #4
 8008104:	b003      	add	sp, #12
 8008106:	4770      	bx	lr
 8008108:	20000010 	.word	0x20000010
 800810c:	ffff0208 	.word	0xffff0208

08008110 <sulp>:
 8008110:	b570      	push	{r4, r5, r6, lr}
 8008112:	4604      	mov	r4, r0
 8008114:	460d      	mov	r5, r1
 8008116:	ec45 4b10 	vmov	d0, r4, r5
 800811a:	4616      	mov	r6, r2
 800811c:	f002 ff16 	bl	800af4c <__ulp>
 8008120:	ec51 0b10 	vmov	r0, r1, d0
 8008124:	b17e      	cbz	r6, 8008146 <sulp+0x36>
 8008126:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800812a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd09      	ble.n	8008146 <sulp+0x36>
 8008132:	051b      	lsls	r3, r3, #20
 8008134:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008138:	2400      	movs	r4, #0
 800813a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800813e:	4622      	mov	r2, r4
 8008140:	462b      	mov	r3, r5
 8008142:	f7f8 fa59 	bl	80005f8 <__aeabi_dmul>
 8008146:	bd70      	pop	{r4, r5, r6, pc}

08008148 <_strtod_l>:
 8008148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814c:	ed2d 8b02 	vpush	{d8}
 8008150:	b09d      	sub	sp, #116	; 0x74
 8008152:	461f      	mov	r7, r3
 8008154:	2300      	movs	r3, #0
 8008156:	9318      	str	r3, [sp, #96]	; 0x60
 8008158:	4ba2      	ldr	r3, [pc, #648]	; (80083e4 <_strtod_l+0x29c>)
 800815a:	9213      	str	r2, [sp, #76]	; 0x4c
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	9305      	str	r3, [sp, #20]
 8008160:	4604      	mov	r4, r0
 8008162:	4618      	mov	r0, r3
 8008164:	4688      	mov	r8, r1
 8008166:	f7f8 f833 	bl	80001d0 <strlen>
 800816a:	f04f 0a00 	mov.w	sl, #0
 800816e:	4605      	mov	r5, r0
 8008170:	f04f 0b00 	mov.w	fp, #0
 8008174:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800817a:	781a      	ldrb	r2, [r3, #0]
 800817c:	2a2b      	cmp	r2, #43	; 0x2b
 800817e:	d04e      	beq.n	800821e <_strtod_l+0xd6>
 8008180:	d83b      	bhi.n	80081fa <_strtod_l+0xb2>
 8008182:	2a0d      	cmp	r2, #13
 8008184:	d834      	bhi.n	80081f0 <_strtod_l+0xa8>
 8008186:	2a08      	cmp	r2, #8
 8008188:	d834      	bhi.n	80081f4 <_strtod_l+0xac>
 800818a:	2a00      	cmp	r2, #0
 800818c:	d03e      	beq.n	800820c <_strtod_l+0xc4>
 800818e:	2300      	movs	r3, #0
 8008190:	930a      	str	r3, [sp, #40]	; 0x28
 8008192:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008194:	7833      	ldrb	r3, [r6, #0]
 8008196:	2b30      	cmp	r3, #48	; 0x30
 8008198:	f040 80b0 	bne.w	80082fc <_strtod_l+0x1b4>
 800819c:	7873      	ldrb	r3, [r6, #1]
 800819e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80081a2:	2b58      	cmp	r3, #88	; 0x58
 80081a4:	d168      	bne.n	8008278 <_strtod_l+0x130>
 80081a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	ab18      	add	r3, sp, #96	; 0x60
 80081ac:	9702      	str	r7, [sp, #8]
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	4a8d      	ldr	r2, [pc, #564]	; (80083e8 <_strtod_l+0x2a0>)
 80081b2:	ab19      	add	r3, sp, #100	; 0x64
 80081b4:	a917      	add	r1, sp, #92	; 0x5c
 80081b6:	4620      	mov	r0, r4
 80081b8:	f001 ffba 	bl	800a130 <__gethex>
 80081bc:	f010 0707 	ands.w	r7, r0, #7
 80081c0:	4605      	mov	r5, r0
 80081c2:	d005      	beq.n	80081d0 <_strtod_l+0x88>
 80081c4:	2f06      	cmp	r7, #6
 80081c6:	d12c      	bne.n	8008222 <_strtod_l+0xda>
 80081c8:	3601      	adds	r6, #1
 80081ca:	2300      	movs	r3, #0
 80081cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80081ce:	930a      	str	r3, [sp, #40]	; 0x28
 80081d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8590 	bne.w	8008cf8 <_strtod_l+0xbb0>
 80081d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081da:	b1eb      	cbz	r3, 8008218 <_strtod_l+0xd0>
 80081dc:	4652      	mov	r2, sl
 80081de:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80081e2:	ec43 2b10 	vmov	d0, r2, r3
 80081e6:	b01d      	add	sp, #116	; 0x74
 80081e8:	ecbd 8b02 	vpop	{d8}
 80081ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f0:	2a20      	cmp	r2, #32
 80081f2:	d1cc      	bne.n	800818e <_strtod_l+0x46>
 80081f4:	3301      	adds	r3, #1
 80081f6:	9317      	str	r3, [sp, #92]	; 0x5c
 80081f8:	e7be      	b.n	8008178 <_strtod_l+0x30>
 80081fa:	2a2d      	cmp	r2, #45	; 0x2d
 80081fc:	d1c7      	bne.n	800818e <_strtod_l+0x46>
 80081fe:	2201      	movs	r2, #1
 8008200:	920a      	str	r2, [sp, #40]	; 0x28
 8008202:	1c5a      	adds	r2, r3, #1
 8008204:	9217      	str	r2, [sp, #92]	; 0x5c
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1c2      	bne.n	8008192 <_strtod_l+0x4a>
 800820c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800820e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008212:	2b00      	cmp	r3, #0
 8008214:	f040 856e 	bne.w	8008cf4 <_strtod_l+0xbac>
 8008218:	4652      	mov	r2, sl
 800821a:	465b      	mov	r3, fp
 800821c:	e7e1      	b.n	80081e2 <_strtod_l+0x9a>
 800821e:	2200      	movs	r2, #0
 8008220:	e7ee      	b.n	8008200 <_strtod_l+0xb8>
 8008222:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008224:	b13a      	cbz	r2, 8008236 <_strtod_l+0xee>
 8008226:	2135      	movs	r1, #53	; 0x35
 8008228:	a81a      	add	r0, sp, #104	; 0x68
 800822a:	f002 ff9a 	bl	800b162 <__copybits>
 800822e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008230:	4620      	mov	r0, r4
 8008232:	f002 fb59 	bl	800a8e8 <_Bfree>
 8008236:	3f01      	subs	r7, #1
 8008238:	2f04      	cmp	r7, #4
 800823a:	d806      	bhi.n	800824a <_strtod_l+0x102>
 800823c:	e8df f007 	tbb	[pc, r7]
 8008240:	1714030a 	.word	0x1714030a
 8008244:	0a          	.byte	0x0a
 8008245:	00          	.byte	0x00
 8008246:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800824a:	0728      	lsls	r0, r5, #28
 800824c:	d5c0      	bpl.n	80081d0 <_strtod_l+0x88>
 800824e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008252:	e7bd      	b.n	80081d0 <_strtod_l+0x88>
 8008254:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800825a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800825e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008262:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008266:	e7f0      	b.n	800824a <_strtod_l+0x102>
 8008268:	f8df b180 	ldr.w	fp, [pc, #384]	; 80083ec <_strtod_l+0x2a4>
 800826c:	e7ed      	b.n	800824a <_strtod_l+0x102>
 800826e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008272:	f04f 3aff 	mov.w	sl, #4294967295
 8008276:	e7e8      	b.n	800824a <_strtod_l+0x102>
 8008278:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	9217      	str	r2, [sp, #92]	; 0x5c
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	2b30      	cmp	r3, #48	; 0x30
 8008282:	d0f9      	beq.n	8008278 <_strtod_l+0x130>
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0a3      	beq.n	80081d0 <_strtod_l+0x88>
 8008288:	2301      	movs	r3, #1
 800828a:	f04f 0900 	mov.w	r9, #0
 800828e:	9304      	str	r3, [sp, #16]
 8008290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008292:	9308      	str	r3, [sp, #32]
 8008294:	f8cd 901c 	str.w	r9, [sp, #28]
 8008298:	464f      	mov	r7, r9
 800829a:	220a      	movs	r2, #10
 800829c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800829e:	7806      	ldrb	r6, [r0, #0]
 80082a0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80082a4:	b2d9      	uxtb	r1, r3
 80082a6:	2909      	cmp	r1, #9
 80082a8:	d92a      	bls.n	8008300 <_strtod_l+0x1b8>
 80082aa:	9905      	ldr	r1, [sp, #20]
 80082ac:	462a      	mov	r2, r5
 80082ae:	f003 fba6 	bl	800b9fe <strncmp>
 80082b2:	b398      	cbz	r0, 800831c <_strtod_l+0x1d4>
 80082b4:	2000      	movs	r0, #0
 80082b6:	4632      	mov	r2, r6
 80082b8:	463d      	mov	r5, r7
 80082ba:	9005      	str	r0, [sp, #20]
 80082bc:	4603      	mov	r3, r0
 80082be:	2a65      	cmp	r2, #101	; 0x65
 80082c0:	d001      	beq.n	80082c6 <_strtod_l+0x17e>
 80082c2:	2a45      	cmp	r2, #69	; 0x45
 80082c4:	d118      	bne.n	80082f8 <_strtod_l+0x1b0>
 80082c6:	b91d      	cbnz	r5, 80082d0 <_strtod_l+0x188>
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	4302      	orrs	r2, r0
 80082cc:	d09e      	beq.n	800820c <_strtod_l+0xc4>
 80082ce:	2500      	movs	r5, #0
 80082d0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80082d4:	f108 0201 	add.w	r2, r8, #1
 80082d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80082da:	f898 2001 	ldrb.w	r2, [r8, #1]
 80082de:	2a2b      	cmp	r2, #43	; 0x2b
 80082e0:	d075      	beq.n	80083ce <_strtod_l+0x286>
 80082e2:	2a2d      	cmp	r2, #45	; 0x2d
 80082e4:	d07b      	beq.n	80083de <_strtod_l+0x296>
 80082e6:	f04f 0c00 	mov.w	ip, #0
 80082ea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80082ee:	2909      	cmp	r1, #9
 80082f0:	f240 8082 	bls.w	80083f8 <_strtod_l+0x2b0>
 80082f4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80082f8:	2600      	movs	r6, #0
 80082fa:	e09d      	b.n	8008438 <_strtod_l+0x2f0>
 80082fc:	2300      	movs	r3, #0
 80082fe:	e7c4      	b.n	800828a <_strtod_l+0x142>
 8008300:	2f08      	cmp	r7, #8
 8008302:	bfd8      	it	le
 8008304:	9907      	ldrle	r1, [sp, #28]
 8008306:	f100 0001 	add.w	r0, r0, #1
 800830a:	bfda      	itte	le
 800830c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008310:	9307      	strle	r3, [sp, #28]
 8008312:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008316:	3701      	adds	r7, #1
 8008318:	9017      	str	r0, [sp, #92]	; 0x5c
 800831a:	e7bf      	b.n	800829c <_strtod_l+0x154>
 800831c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800831e:	195a      	adds	r2, r3, r5
 8008320:	9217      	str	r2, [sp, #92]	; 0x5c
 8008322:	5d5a      	ldrb	r2, [r3, r5]
 8008324:	2f00      	cmp	r7, #0
 8008326:	d037      	beq.n	8008398 <_strtod_l+0x250>
 8008328:	9005      	str	r0, [sp, #20]
 800832a:	463d      	mov	r5, r7
 800832c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008330:	2b09      	cmp	r3, #9
 8008332:	d912      	bls.n	800835a <_strtod_l+0x212>
 8008334:	2301      	movs	r3, #1
 8008336:	e7c2      	b.n	80082be <_strtod_l+0x176>
 8008338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	9217      	str	r2, [sp, #92]	; 0x5c
 800833e:	785a      	ldrb	r2, [r3, #1]
 8008340:	3001      	adds	r0, #1
 8008342:	2a30      	cmp	r2, #48	; 0x30
 8008344:	d0f8      	beq.n	8008338 <_strtod_l+0x1f0>
 8008346:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800834a:	2b08      	cmp	r3, #8
 800834c:	f200 84d9 	bhi.w	8008d02 <_strtod_l+0xbba>
 8008350:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008352:	9005      	str	r0, [sp, #20]
 8008354:	2000      	movs	r0, #0
 8008356:	9308      	str	r3, [sp, #32]
 8008358:	4605      	mov	r5, r0
 800835a:	3a30      	subs	r2, #48	; 0x30
 800835c:	f100 0301 	add.w	r3, r0, #1
 8008360:	d014      	beq.n	800838c <_strtod_l+0x244>
 8008362:	9905      	ldr	r1, [sp, #20]
 8008364:	4419      	add	r1, r3
 8008366:	9105      	str	r1, [sp, #20]
 8008368:	462b      	mov	r3, r5
 800836a:	eb00 0e05 	add.w	lr, r0, r5
 800836e:	210a      	movs	r1, #10
 8008370:	4573      	cmp	r3, lr
 8008372:	d113      	bne.n	800839c <_strtod_l+0x254>
 8008374:	182b      	adds	r3, r5, r0
 8008376:	2b08      	cmp	r3, #8
 8008378:	f105 0501 	add.w	r5, r5, #1
 800837c:	4405      	add	r5, r0
 800837e:	dc1c      	bgt.n	80083ba <_strtod_l+0x272>
 8008380:	9907      	ldr	r1, [sp, #28]
 8008382:	230a      	movs	r3, #10
 8008384:	fb03 2301 	mla	r3, r3, r1, r2
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	2300      	movs	r3, #0
 800838c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800838e:	1c51      	adds	r1, r2, #1
 8008390:	9117      	str	r1, [sp, #92]	; 0x5c
 8008392:	7852      	ldrb	r2, [r2, #1]
 8008394:	4618      	mov	r0, r3
 8008396:	e7c9      	b.n	800832c <_strtod_l+0x1e4>
 8008398:	4638      	mov	r0, r7
 800839a:	e7d2      	b.n	8008342 <_strtod_l+0x1fa>
 800839c:	2b08      	cmp	r3, #8
 800839e:	dc04      	bgt.n	80083aa <_strtod_l+0x262>
 80083a0:	9e07      	ldr	r6, [sp, #28]
 80083a2:	434e      	muls	r6, r1
 80083a4:	9607      	str	r6, [sp, #28]
 80083a6:	3301      	adds	r3, #1
 80083a8:	e7e2      	b.n	8008370 <_strtod_l+0x228>
 80083aa:	f103 0c01 	add.w	ip, r3, #1
 80083ae:	f1bc 0f10 	cmp.w	ip, #16
 80083b2:	bfd8      	it	le
 80083b4:	fb01 f909 	mulle.w	r9, r1, r9
 80083b8:	e7f5      	b.n	80083a6 <_strtod_l+0x25e>
 80083ba:	2d10      	cmp	r5, #16
 80083bc:	bfdc      	itt	le
 80083be:	230a      	movle	r3, #10
 80083c0:	fb03 2909 	mlale	r9, r3, r9, r2
 80083c4:	e7e1      	b.n	800838a <_strtod_l+0x242>
 80083c6:	2300      	movs	r3, #0
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	2301      	movs	r3, #1
 80083cc:	e77c      	b.n	80082c8 <_strtod_l+0x180>
 80083ce:	f04f 0c00 	mov.w	ip, #0
 80083d2:	f108 0202 	add.w	r2, r8, #2
 80083d6:	9217      	str	r2, [sp, #92]	; 0x5c
 80083d8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80083dc:	e785      	b.n	80082ea <_strtod_l+0x1a2>
 80083de:	f04f 0c01 	mov.w	ip, #1
 80083e2:	e7f6      	b.n	80083d2 <_strtod_l+0x28a>
 80083e4:	0800c0f4 	.word	0x0800c0f4
 80083e8:	0800be48 	.word	0x0800be48
 80083ec:	7ff00000 	.word	0x7ff00000
 80083f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083f2:	1c51      	adds	r1, r2, #1
 80083f4:	9117      	str	r1, [sp, #92]	; 0x5c
 80083f6:	7852      	ldrb	r2, [r2, #1]
 80083f8:	2a30      	cmp	r2, #48	; 0x30
 80083fa:	d0f9      	beq.n	80083f0 <_strtod_l+0x2a8>
 80083fc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008400:	2908      	cmp	r1, #8
 8008402:	f63f af79 	bhi.w	80082f8 <_strtod_l+0x1b0>
 8008406:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800840a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800840c:	9206      	str	r2, [sp, #24]
 800840e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008410:	1c51      	adds	r1, r2, #1
 8008412:	9117      	str	r1, [sp, #92]	; 0x5c
 8008414:	7852      	ldrb	r2, [r2, #1]
 8008416:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800841a:	2e09      	cmp	r6, #9
 800841c:	d937      	bls.n	800848e <_strtod_l+0x346>
 800841e:	9e06      	ldr	r6, [sp, #24]
 8008420:	1b89      	subs	r1, r1, r6
 8008422:	2908      	cmp	r1, #8
 8008424:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008428:	dc02      	bgt.n	8008430 <_strtod_l+0x2e8>
 800842a:	4576      	cmp	r6, lr
 800842c:	bfa8      	it	ge
 800842e:	4676      	movge	r6, lr
 8008430:	f1bc 0f00 	cmp.w	ip, #0
 8008434:	d000      	beq.n	8008438 <_strtod_l+0x2f0>
 8008436:	4276      	negs	r6, r6
 8008438:	2d00      	cmp	r5, #0
 800843a:	d14d      	bne.n	80084d8 <_strtod_l+0x390>
 800843c:	9904      	ldr	r1, [sp, #16]
 800843e:	4301      	orrs	r1, r0
 8008440:	f47f aec6 	bne.w	80081d0 <_strtod_l+0x88>
 8008444:	2b00      	cmp	r3, #0
 8008446:	f47f aee1 	bne.w	800820c <_strtod_l+0xc4>
 800844a:	2a69      	cmp	r2, #105	; 0x69
 800844c:	d027      	beq.n	800849e <_strtod_l+0x356>
 800844e:	dc24      	bgt.n	800849a <_strtod_l+0x352>
 8008450:	2a49      	cmp	r2, #73	; 0x49
 8008452:	d024      	beq.n	800849e <_strtod_l+0x356>
 8008454:	2a4e      	cmp	r2, #78	; 0x4e
 8008456:	f47f aed9 	bne.w	800820c <_strtod_l+0xc4>
 800845a:	499f      	ldr	r1, [pc, #636]	; (80086d8 <_strtod_l+0x590>)
 800845c:	a817      	add	r0, sp, #92	; 0x5c
 800845e:	f002 f8bf 	bl	800a5e0 <__match>
 8008462:	2800      	cmp	r0, #0
 8008464:	f43f aed2 	beq.w	800820c <_strtod_l+0xc4>
 8008468:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	2b28      	cmp	r3, #40	; 0x28
 800846e:	d12d      	bne.n	80084cc <_strtod_l+0x384>
 8008470:	499a      	ldr	r1, [pc, #616]	; (80086dc <_strtod_l+0x594>)
 8008472:	aa1a      	add	r2, sp, #104	; 0x68
 8008474:	a817      	add	r0, sp, #92	; 0x5c
 8008476:	f002 f8c7 	bl	800a608 <__hexnan>
 800847a:	2805      	cmp	r0, #5
 800847c:	d126      	bne.n	80084cc <_strtod_l+0x384>
 800847e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008480:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008484:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008488:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800848c:	e6a0      	b.n	80081d0 <_strtod_l+0x88>
 800848e:	210a      	movs	r1, #10
 8008490:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008494:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008498:	e7b9      	b.n	800840e <_strtod_l+0x2c6>
 800849a:	2a6e      	cmp	r2, #110	; 0x6e
 800849c:	e7db      	b.n	8008456 <_strtod_l+0x30e>
 800849e:	4990      	ldr	r1, [pc, #576]	; (80086e0 <_strtod_l+0x598>)
 80084a0:	a817      	add	r0, sp, #92	; 0x5c
 80084a2:	f002 f89d 	bl	800a5e0 <__match>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f aeb0 	beq.w	800820c <_strtod_l+0xc4>
 80084ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084ae:	498d      	ldr	r1, [pc, #564]	; (80086e4 <_strtod_l+0x59c>)
 80084b0:	3b01      	subs	r3, #1
 80084b2:	a817      	add	r0, sp, #92	; 0x5c
 80084b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80084b6:	f002 f893 	bl	800a5e0 <__match>
 80084ba:	b910      	cbnz	r0, 80084c2 <_strtod_l+0x37a>
 80084bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084be:	3301      	adds	r3, #1
 80084c0:	9317      	str	r3, [sp, #92]	; 0x5c
 80084c2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80086f4 <_strtod_l+0x5ac>
 80084c6:	f04f 0a00 	mov.w	sl, #0
 80084ca:	e681      	b.n	80081d0 <_strtod_l+0x88>
 80084cc:	4886      	ldr	r0, [pc, #536]	; (80086e8 <_strtod_l+0x5a0>)
 80084ce:	f003 fa3b 	bl	800b948 <nan>
 80084d2:	ec5b ab10 	vmov	sl, fp, d0
 80084d6:	e67b      	b.n	80081d0 <_strtod_l+0x88>
 80084d8:	9b05      	ldr	r3, [sp, #20]
 80084da:	9807      	ldr	r0, [sp, #28]
 80084dc:	1af3      	subs	r3, r6, r3
 80084de:	2f00      	cmp	r7, #0
 80084e0:	bf08      	it	eq
 80084e2:	462f      	moveq	r7, r5
 80084e4:	2d10      	cmp	r5, #16
 80084e6:	9306      	str	r3, [sp, #24]
 80084e8:	46a8      	mov	r8, r5
 80084ea:	bfa8      	it	ge
 80084ec:	f04f 0810 	movge.w	r8, #16
 80084f0:	f7f8 f808 	bl	8000504 <__aeabi_ui2d>
 80084f4:	2d09      	cmp	r5, #9
 80084f6:	4682      	mov	sl, r0
 80084f8:	468b      	mov	fp, r1
 80084fa:	dd13      	ble.n	8008524 <_strtod_l+0x3dc>
 80084fc:	4b7b      	ldr	r3, [pc, #492]	; (80086ec <_strtod_l+0x5a4>)
 80084fe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008502:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008506:	f7f8 f877 	bl	80005f8 <__aeabi_dmul>
 800850a:	4682      	mov	sl, r0
 800850c:	4648      	mov	r0, r9
 800850e:	468b      	mov	fp, r1
 8008510:	f7f7 fff8 	bl	8000504 <__aeabi_ui2d>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4650      	mov	r0, sl
 800851a:	4659      	mov	r1, fp
 800851c:	f7f7 feb6 	bl	800028c <__adddf3>
 8008520:	4682      	mov	sl, r0
 8008522:	468b      	mov	fp, r1
 8008524:	2d0f      	cmp	r5, #15
 8008526:	dc38      	bgt.n	800859a <_strtod_l+0x452>
 8008528:	9b06      	ldr	r3, [sp, #24]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f43f ae50 	beq.w	80081d0 <_strtod_l+0x88>
 8008530:	dd24      	ble.n	800857c <_strtod_l+0x434>
 8008532:	2b16      	cmp	r3, #22
 8008534:	dc0b      	bgt.n	800854e <_strtod_l+0x406>
 8008536:	496d      	ldr	r1, [pc, #436]	; (80086ec <_strtod_l+0x5a4>)
 8008538:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800853c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008540:	4652      	mov	r2, sl
 8008542:	465b      	mov	r3, fp
 8008544:	f7f8 f858 	bl	80005f8 <__aeabi_dmul>
 8008548:	4682      	mov	sl, r0
 800854a:	468b      	mov	fp, r1
 800854c:	e640      	b.n	80081d0 <_strtod_l+0x88>
 800854e:	9a06      	ldr	r2, [sp, #24]
 8008550:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008554:	4293      	cmp	r3, r2
 8008556:	db20      	blt.n	800859a <_strtod_l+0x452>
 8008558:	4c64      	ldr	r4, [pc, #400]	; (80086ec <_strtod_l+0x5a4>)
 800855a:	f1c5 050f 	rsb	r5, r5, #15
 800855e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008562:	4652      	mov	r2, sl
 8008564:	465b      	mov	r3, fp
 8008566:	e9d1 0100 	ldrd	r0, r1, [r1]
 800856a:	f7f8 f845 	bl	80005f8 <__aeabi_dmul>
 800856e:	9b06      	ldr	r3, [sp, #24]
 8008570:	1b5d      	subs	r5, r3, r5
 8008572:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008576:	e9d4 2300 	ldrd	r2, r3, [r4]
 800857a:	e7e3      	b.n	8008544 <_strtod_l+0x3fc>
 800857c:	9b06      	ldr	r3, [sp, #24]
 800857e:	3316      	adds	r3, #22
 8008580:	db0b      	blt.n	800859a <_strtod_l+0x452>
 8008582:	9b05      	ldr	r3, [sp, #20]
 8008584:	1b9e      	subs	r6, r3, r6
 8008586:	4b59      	ldr	r3, [pc, #356]	; (80086ec <_strtod_l+0x5a4>)
 8008588:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800858c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008590:	4650      	mov	r0, sl
 8008592:	4659      	mov	r1, fp
 8008594:	f7f8 f95a 	bl	800084c <__aeabi_ddiv>
 8008598:	e7d6      	b.n	8008548 <_strtod_l+0x400>
 800859a:	9b06      	ldr	r3, [sp, #24]
 800859c:	eba5 0808 	sub.w	r8, r5, r8
 80085a0:	4498      	add	r8, r3
 80085a2:	f1b8 0f00 	cmp.w	r8, #0
 80085a6:	dd74      	ble.n	8008692 <_strtod_l+0x54a>
 80085a8:	f018 030f 	ands.w	r3, r8, #15
 80085ac:	d00a      	beq.n	80085c4 <_strtod_l+0x47c>
 80085ae:	494f      	ldr	r1, [pc, #316]	; (80086ec <_strtod_l+0x5a4>)
 80085b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085b4:	4652      	mov	r2, sl
 80085b6:	465b      	mov	r3, fp
 80085b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085bc:	f7f8 f81c 	bl	80005f8 <__aeabi_dmul>
 80085c0:	4682      	mov	sl, r0
 80085c2:	468b      	mov	fp, r1
 80085c4:	f038 080f 	bics.w	r8, r8, #15
 80085c8:	d04f      	beq.n	800866a <_strtod_l+0x522>
 80085ca:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80085ce:	dd22      	ble.n	8008616 <_strtod_l+0x4ce>
 80085d0:	2500      	movs	r5, #0
 80085d2:	462e      	mov	r6, r5
 80085d4:	9507      	str	r5, [sp, #28]
 80085d6:	9505      	str	r5, [sp, #20]
 80085d8:	2322      	movs	r3, #34	; 0x22
 80085da:	f8df b118 	ldr.w	fp, [pc, #280]	; 80086f4 <_strtod_l+0x5ac>
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	f04f 0a00 	mov.w	sl, #0
 80085e4:	9b07      	ldr	r3, [sp, #28]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f43f adf2 	beq.w	80081d0 <_strtod_l+0x88>
 80085ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80085ee:	4620      	mov	r0, r4
 80085f0:	f002 f97a 	bl	800a8e8 <_Bfree>
 80085f4:	9905      	ldr	r1, [sp, #20]
 80085f6:	4620      	mov	r0, r4
 80085f8:	f002 f976 	bl	800a8e8 <_Bfree>
 80085fc:	4631      	mov	r1, r6
 80085fe:	4620      	mov	r0, r4
 8008600:	f002 f972 	bl	800a8e8 <_Bfree>
 8008604:	9907      	ldr	r1, [sp, #28]
 8008606:	4620      	mov	r0, r4
 8008608:	f002 f96e 	bl	800a8e8 <_Bfree>
 800860c:	4629      	mov	r1, r5
 800860e:	4620      	mov	r0, r4
 8008610:	f002 f96a 	bl	800a8e8 <_Bfree>
 8008614:	e5dc      	b.n	80081d0 <_strtod_l+0x88>
 8008616:	4b36      	ldr	r3, [pc, #216]	; (80086f0 <_strtod_l+0x5a8>)
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	2300      	movs	r3, #0
 800861c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008620:	4650      	mov	r0, sl
 8008622:	4659      	mov	r1, fp
 8008624:	4699      	mov	r9, r3
 8008626:	f1b8 0f01 	cmp.w	r8, #1
 800862a:	dc21      	bgt.n	8008670 <_strtod_l+0x528>
 800862c:	b10b      	cbz	r3, 8008632 <_strtod_l+0x4ea>
 800862e:	4682      	mov	sl, r0
 8008630:	468b      	mov	fp, r1
 8008632:	4b2f      	ldr	r3, [pc, #188]	; (80086f0 <_strtod_l+0x5a8>)
 8008634:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008638:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800863c:	4652      	mov	r2, sl
 800863e:	465b      	mov	r3, fp
 8008640:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008644:	f7f7 ffd8 	bl	80005f8 <__aeabi_dmul>
 8008648:	4b2a      	ldr	r3, [pc, #168]	; (80086f4 <_strtod_l+0x5ac>)
 800864a:	460a      	mov	r2, r1
 800864c:	400b      	ands	r3, r1
 800864e:	492a      	ldr	r1, [pc, #168]	; (80086f8 <_strtod_l+0x5b0>)
 8008650:	428b      	cmp	r3, r1
 8008652:	4682      	mov	sl, r0
 8008654:	d8bc      	bhi.n	80085d0 <_strtod_l+0x488>
 8008656:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800865a:	428b      	cmp	r3, r1
 800865c:	bf86      	itte	hi
 800865e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80086fc <_strtod_l+0x5b4>
 8008662:	f04f 3aff 	movhi.w	sl, #4294967295
 8008666:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800866a:	2300      	movs	r3, #0
 800866c:	9304      	str	r3, [sp, #16]
 800866e:	e084      	b.n	800877a <_strtod_l+0x632>
 8008670:	f018 0f01 	tst.w	r8, #1
 8008674:	d005      	beq.n	8008682 <_strtod_l+0x53a>
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867c:	f7f7 ffbc 	bl	80005f8 <__aeabi_dmul>
 8008680:	2301      	movs	r3, #1
 8008682:	9a04      	ldr	r2, [sp, #16]
 8008684:	3208      	adds	r2, #8
 8008686:	f109 0901 	add.w	r9, r9, #1
 800868a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800868e:	9204      	str	r2, [sp, #16]
 8008690:	e7c9      	b.n	8008626 <_strtod_l+0x4de>
 8008692:	d0ea      	beq.n	800866a <_strtod_l+0x522>
 8008694:	f1c8 0800 	rsb	r8, r8, #0
 8008698:	f018 020f 	ands.w	r2, r8, #15
 800869c:	d00a      	beq.n	80086b4 <_strtod_l+0x56c>
 800869e:	4b13      	ldr	r3, [pc, #76]	; (80086ec <_strtod_l+0x5a4>)
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	4650      	mov	r0, sl
 80086a6:	4659      	mov	r1, fp
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f8 f8ce 	bl	800084c <__aeabi_ddiv>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80086b8:	d0d7      	beq.n	800866a <_strtod_l+0x522>
 80086ba:	f1b8 0f1f 	cmp.w	r8, #31
 80086be:	dd1f      	ble.n	8008700 <_strtod_l+0x5b8>
 80086c0:	2500      	movs	r5, #0
 80086c2:	462e      	mov	r6, r5
 80086c4:	9507      	str	r5, [sp, #28]
 80086c6:	9505      	str	r5, [sp, #20]
 80086c8:	2322      	movs	r3, #34	; 0x22
 80086ca:	f04f 0a00 	mov.w	sl, #0
 80086ce:	f04f 0b00 	mov.w	fp, #0
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	e786      	b.n	80085e4 <_strtod_l+0x49c>
 80086d6:	bf00      	nop
 80086d8:	0800be19 	.word	0x0800be19
 80086dc:	0800be5c 	.word	0x0800be5c
 80086e0:	0800be11 	.word	0x0800be11
 80086e4:	0800bf9c 	.word	0x0800bf9c
 80086e8:	0800c2b0 	.word	0x0800c2b0
 80086ec:	0800c190 	.word	0x0800c190
 80086f0:	0800c168 	.word	0x0800c168
 80086f4:	7ff00000 	.word	0x7ff00000
 80086f8:	7ca00000 	.word	0x7ca00000
 80086fc:	7fefffff 	.word	0x7fefffff
 8008700:	f018 0310 	ands.w	r3, r8, #16
 8008704:	bf18      	it	ne
 8008706:	236a      	movne	r3, #106	; 0x6a
 8008708:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008ab8 <_strtod_l+0x970>
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	4650      	mov	r0, sl
 8008710:	4659      	mov	r1, fp
 8008712:	2300      	movs	r3, #0
 8008714:	f018 0f01 	tst.w	r8, #1
 8008718:	d004      	beq.n	8008724 <_strtod_l+0x5dc>
 800871a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	2301      	movs	r3, #1
 8008724:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008728:	f109 0908 	add.w	r9, r9, #8
 800872c:	d1f2      	bne.n	8008714 <_strtod_l+0x5cc>
 800872e:	b10b      	cbz	r3, 8008734 <_strtod_l+0x5ec>
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	9b04      	ldr	r3, [sp, #16]
 8008736:	b1c3      	cbz	r3, 800876a <_strtod_l+0x622>
 8008738:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800873c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008740:	2b00      	cmp	r3, #0
 8008742:	4659      	mov	r1, fp
 8008744:	dd11      	ble.n	800876a <_strtod_l+0x622>
 8008746:	2b1f      	cmp	r3, #31
 8008748:	f340 8124 	ble.w	8008994 <_strtod_l+0x84c>
 800874c:	2b34      	cmp	r3, #52	; 0x34
 800874e:	bfde      	ittt	le
 8008750:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008754:	f04f 33ff 	movle.w	r3, #4294967295
 8008758:	fa03 f202 	lslle.w	r2, r3, r2
 800875c:	f04f 0a00 	mov.w	sl, #0
 8008760:	bfcc      	ite	gt
 8008762:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008766:	ea02 0b01 	andle.w	fp, r2, r1
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4650      	mov	r0, sl
 8008770:	4659      	mov	r1, fp
 8008772:	f7f8 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008776:	2800      	cmp	r0, #0
 8008778:	d1a2      	bne.n	80086c0 <_strtod_l+0x578>
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	9300      	str	r3, [sp, #0]
 800877e:	9908      	ldr	r1, [sp, #32]
 8008780:	462b      	mov	r3, r5
 8008782:	463a      	mov	r2, r7
 8008784:	4620      	mov	r0, r4
 8008786:	f002 f917 	bl	800a9b8 <__s2b>
 800878a:	9007      	str	r0, [sp, #28]
 800878c:	2800      	cmp	r0, #0
 800878e:	f43f af1f 	beq.w	80085d0 <_strtod_l+0x488>
 8008792:	9b05      	ldr	r3, [sp, #20]
 8008794:	1b9e      	subs	r6, r3, r6
 8008796:	9b06      	ldr	r3, [sp, #24]
 8008798:	2b00      	cmp	r3, #0
 800879a:	bfb4      	ite	lt
 800879c:	4633      	movlt	r3, r6
 800879e:	2300      	movge	r3, #0
 80087a0:	930c      	str	r3, [sp, #48]	; 0x30
 80087a2:	9b06      	ldr	r3, [sp, #24]
 80087a4:	2500      	movs	r5, #0
 80087a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80087aa:	9312      	str	r3, [sp, #72]	; 0x48
 80087ac:	462e      	mov	r6, r5
 80087ae:	9b07      	ldr	r3, [sp, #28]
 80087b0:	4620      	mov	r0, r4
 80087b2:	6859      	ldr	r1, [r3, #4]
 80087b4:	f002 f858 	bl	800a868 <_Balloc>
 80087b8:	9005      	str	r0, [sp, #20]
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f43f af0c 	beq.w	80085d8 <_strtod_l+0x490>
 80087c0:	9b07      	ldr	r3, [sp, #28]
 80087c2:	691a      	ldr	r2, [r3, #16]
 80087c4:	3202      	adds	r2, #2
 80087c6:	f103 010c 	add.w	r1, r3, #12
 80087ca:	0092      	lsls	r2, r2, #2
 80087cc:	300c      	adds	r0, #12
 80087ce:	f002 f83d 	bl	800a84c <memcpy>
 80087d2:	ec4b ab10 	vmov	d0, sl, fp
 80087d6:	aa1a      	add	r2, sp, #104	; 0x68
 80087d8:	a919      	add	r1, sp, #100	; 0x64
 80087da:	4620      	mov	r0, r4
 80087dc:	f002 fc32 	bl	800b044 <__d2b>
 80087e0:	ec4b ab18 	vmov	d8, sl, fp
 80087e4:	9018      	str	r0, [sp, #96]	; 0x60
 80087e6:	2800      	cmp	r0, #0
 80087e8:	f43f aef6 	beq.w	80085d8 <_strtod_l+0x490>
 80087ec:	2101      	movs	r1, #1
 80087ee:	4620      	mov	r0, r4
 80087f0:	f002 f97c 	bl	800aaec <__i2b>
 80087f4:	4606      	mov	r6, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f43f aeee 	beq.w	80085d8 <_strtod_l+0x490>
 80087fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087fe:	9904      	ldr	r1, [sp, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfab      	itete	ge
 8008804:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008806:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008808:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800880a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800880e:	bfac      	ite	ge
 8008810:	eb03 0902 	addge.w	r9, r3, r2
 8008814:	1ad7      	sublt	r7, r2, r3
 8008816:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008818:	eba3 0801 	sub.w	r8, r3, r1
 800881c:	4490      	add	r8, r2
 800881e:	4ba1      	ldr	r3, [pc, #644]	; (8008aa4 <_strtod_l+0x95c>)
 8008820:	f108 38ff 	add.w	r8, r8, #4294967295
 8008824:	4598      	cmp	r8, r3
 8008826:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800882a:	f280 80c7 	bge.w	80089bc <_strtod_l+0x874>
 800882e:	eba3 0308 	sub.w	r3, r3, r8
 8008832:	2b1f      	cmp	r3, #31
 8008834:	eba2 0203 	sub.w	r2, r2, r3
 8008838:	f04f 0101 	mov.w	r1, #1
 800883c:	f300 80b1 	bgt.w	80089a2 <_strtod_l+0x85a>
 8008840:	fa01 f303 	lsl.w	r3, r1, r3
 8008844:	930d      	str	r3, [sp, #52]	; 0x34
 8008846:	2300      	movs	r3, #0
 8008848:	9308      	str	r3, [sp, #32]
 800884a:	eb09 0802 	add.w	r8, r9, r2
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	45c1      	cmp	r9, r8
 8008852:	4417      	add	r7, r2
 8008854:	441f      	add	r7, r3
 8008856:	464b      	mov	r3, r9
 8008858:	bfa8      	it	ge
 800885a:	4643      	movge	r3, r8
 800885c:	42bb      	cmp	r3, r7
 800885e:	bfa8      	it	ge
 8008860:	463b      	movge	r3, r7
 8008862:	2b00      	cmp	r3, #0
 8008864:	bfc2      	ittt	gt
 8008866:	eba8 0803 	subgt.w	r8, r8, r3
 800886a:	1aff      	subgt	r7, r7, r3
 800886c:	eba9 0903 	subgt.w	r9, r9, r3
 8008870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	dd17      	ble.n	80088a6 <_strtod_l+0x75e>
 8008876:	4631      	mov	r1, r6
 8008878:	461a      	mov	r2, r3
 800887a:	4620      	mov	r0, r4
 800887c:	f002 f9f6 	bl	800ac6c <__pow5mult>
 8008880:	4606      	mov	r6, r0
 8008882:	2800      	cmp	r0, #0
 8008884:	f43f aea8 	beq.w	80085d8 <_strtod_l+0x490>
 8008888:	4601      	mov	r1, r0
 800888a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800888c:	4620      	mov	r0, r4
 800888e:	f002 f943 	bl	800ab18 <__multiply>
 8008892:	900b      	str	r0, [sp, #44]	; 0x2c
 8008894:	2800      	cmp	r0, #0
 8008896:	f43f ae9f 	beq.w	80085d8 <_strtod_l+0x490>
 800889a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800889c:	4620      	mov	r0, r4
 800889e:	f002 f823 	bl	800a8e8 <_Bfree>
 80088a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a4:	9318      	str	r3, [sp, #96]	; 0x60
 80088a6:	f1b8 0f00 	cmp.w	r8, #0
 80088aa:	f300 808c 	bgt.w	80089c6 <_strtod_l+0x87e>
 80088ae:	9b06      	ldr	r3, [sp, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dd08      	ble.n	80088c6 <_strtod_l+0x77e>
 80088b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80088b6:	9905      	ldr	r1, [sp, #20]
 80088b8:	4620      	mov	r0, r4
 80088ba:	f002 f9d7 	bl	800ac6c <__pow5mult>
 80088be:	9005      	str	r0, [sp, #20]
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f43f ae89 	beq.w	80085d8 <_strtod_l+0x490>
 80088c6:	2f00      	cmp	r7, #0
 80088c8:	dd08      	ble.n	80088dc <_strtod_l+0x794>
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	463a      	mov	r2, r7
 80088ce:	4620      	mov	r0, r4
 80088d0:	f002 fa26 	bl	800ad20 <__lshift>
 80088d4:	9005      	str	r0, [sp, #20]
 80088d6:	2800      	cmp	r0, #0
 80088d8:	f43f ae7e 	beq.w	80085d8 <_strtod_l+0x490>
 80088dc:	f1b9 0f00 	cmp.w	r9, #0
 80088e0:	dd08      	ble.n	80088f4 <_strtod_l+0x7ac>
 80088e2:	4631      	mov	r1, r6
 80088e4:	464a      	mov	r2, r9
 80088e6:	4620      	mov	r0, r4
 80088e8:	f002 fa1a 	bl	800ad20 <__lshift>
 80088ec:	4606      	mov	r6, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	f43f ae72 	beq.w	80085d8 <_strtod_l+0x490>
 80088f4:	9a05      	ldr	r2, [sp, #20]
 80088f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088f8:	4620      	mov	r0, r4
 80088fa:	f002 fa9d 	bl	800ae38 <__mdiff>
 80088fe:	4605      	mov	r5, r0
 8008900:	2800      	cmp	r0, #0
 8008902:	f43f ae69 	beq.w	80085d8 <_strtod_l+0x490>
 8008906:	68c3      	ldr	r3, [r0, #12]
 8008908:	930b      	str	r3, [sp, #44]	; 0x2c
 800890a:	2300      	movs	r3, #0
 800890c:	60c3      	str	r3, [r0, #12]
 800890e:	4631      	mov	r1, r6
 8008910:	f002 fa76 	bl	800ae00 <__mcmp>
 8008914:	2800      	cmp	r0, #0
 8008916:	da60      	bge.n	80089da <_strtod_l+0x892>
 8008918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800891a:	ea53 030a 	orrs.w	r3, r3, sl
 800891e:	f040 8082 	bne.w	8008a26 <_strtod_l+0x8de>
 8008922:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008926:	2b00      	cmp	r3, #0
 8008928:	d17d      	bne.n	8008a26 <_strtod_l+0x8de>
 800892a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800892e:	0d1b      	lsrs	r3, r3, #20
 8008930:	051b      	lsls	r3, r3, #20
 8008932:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008936:	d976      	bls.n	8008a26 <_strtod_l+0x8de>
 8008938:	696b      	ldr	r3, [r5, #20]
 800893a:	b913      	cbnz	r3, 8008942 <_strtod_l+0x7fa>
 800893c:	692b      	ldr	r3, [r5, #16]
 800893e:	2b01      	cmp	r3, #1
 8008940:	dd71      	ble.n	8008a26 <_strtod_l+0x8de>
 8008942:	4629      	mov	r1, r5
 8008944:	2201      	movs	r2, #1
 8008946:	4620      	mov	r0, r4
 8008948:	f002 f9ea 	bl	800ad20 <__lshift>
 800894c:	4631      	mov	r1, r6
 800894e:	4605      	mov	r5, r0
 8008950:	f002 fa56 	bl	800ae00 <__mcmp>
 8008954:	2800      	cmp	r0, #0
 8008956:	dd66      	ble.n	8008a26 <_strtod_l+0x8de>
 8008958:	9904      	ldr	r1, [sp, #16]
 800895a:	4a53      	ldr	r2, [pc, #332]	; (8008aa8 <_strtod_l+0x960>)
 800895c:	465b      	mov	r3, fp
 800895e:	2900      	cmp	r1, #0
 8008960:	f000 8081 	beq.w	8008a66 <_strtod_l+0x91e>
 8008964:	ea02 010b 	and.w	r1, r2, fp
 8008968:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800896c:	dc7b      	bgt.n	8008a66 <_strtod_l+0x91e>
 800896e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008972:	f77f aea9 	ble.w	80086c8 <_strtod_l+0x580>
 8008976:	4b4d      	ldr	r3, [pc, #308]	; (8008aac <_strtod_l+0x964>)
 8008978:	4650      	mov	r0, sl
 800897a:	4659      	mov	r1, fp
 800897c:	2200      	movs	r2, #0
 800897e:	f7f7 fe3b 	bl	80005f8 <__aeabi_dmul>
 8008982:	460b      	mov	r3, r1
 8008984:	4303      	orrs	r3, r0
 8008986:	bf08      	it	eq
 8008988:	2322      	moveq	r3, #34	; 0x22
 800898a:	4682      	mov	sl, r0
 800898c:	468b      	mov	fp, r1
 800898e:	bf08      	it	eq
 8008990:	6023      	streq	r3, [r4, #0]
 8008992:	e62b      	b.n	80085ec <_strtod_l+0x4a4>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295
 8008998:	fa02 f303 	lsl.w	r3, r2, r3
 800899c:	ea03 0a0a 	and.w	sl, r3, sl
 80089a0:	e6e3      	b.n	800876a <_strtod_l+0x622>
 80089a2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80089a6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80089aa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80089ae:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80089b2:	fa01 f308 	lsl.w	r3, r1, r8
 80089b6:	9308      	str	r3, [sp, #32]
 80089b8:	910d      	str	r1, [sp, #52]	; 0x34
 80089ba:	e746      	b.n	800884a <_strtod_l+0x702>
 80089bc:	2300      	movs	r3, #0
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	2301      	movs	r3, #1
 80089c2:	930d      	str	r3, [sp, #52]	; 0x34
 80089c4:	e741      	b.n	800884a <_strtod_l+0x702>
 80089c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089c8:	4642      	mov	r2, r8
 80089ca:	4620      	mov	r0, r4
 80089cc:	f002 f9a8 	bl	800ad20 <__lshift>
 80089d0:	9018      	str	r0, [sp, #96]	; 0x60
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f47f af6b 	bne.w	80088ae <_strtod_l+0x766>
 80089d8:	e5fe      	b.n	80085d8 <_strtod_l+0x490>
 80089da:	465f      	mov	r7, fp
 80089dc:	d16e      	bne.n	8008abc <_strtod_l+0x974>
 80089de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089e4:	b342      	cbz	r2, 8008a38 <_strtod_l+0x8f0>
 80089e6:	4a32      	ldr	r2, [pc, #200]	; (8008ab0 <_strtod_l+0x968>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d128      	bne.n	8008a3e <_strtod_l+0x8f6>
 80089ec:	9b04      	ldr	r3, [sp, #16]
 80089ee:	4651      	mov	r1, sl
 80089f0:	b1eb      	cbz	r3, 8008a2e <_strtod_l+0x8e6>
 80089f2:	4b2d      	ldr	r3, [pc, #180]	; (8008aa8 <_strtod_l+0x960>)
 80089f4:	403b      	ands	r3, r7
 80089f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295
 80089fe:	d819      	bhi.n	8008a34 <_strtod_l+0x8ec>
 8008a00:	0d1b      	lsrs	r3, r3, #20
 8008a02:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008a06:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0a:	4299      	cmp	r1, r3
 8008a0c:	d117      	bne.n	8008a3e <_strtod_l+0x8f6>
 8008a0e:	4b29      	ldr	r3, [pc, #164]	; (8008ab4 <_strtod_l+0x96c>)
 8008a10:	429f      	cmp	r7, r3
 8008a12:	d102      	bne.n	8008a1a <_strtod_l+0x8d2>
 8008a14:	3101      	adds	r1, #1
 8008a16:	f43f addf 	beq.w	80085d8 <_strtod_l+0x490>
 8008a1a:	4b23      	ldr	r3, [pc, #140]	; (8008aa8 <_strtod_l+0x960>)
 8008a1c:	403b      	ands	r3, r7
 8008a1e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008a22:	f04f 0a00 	mov.w	sl, #0
 8008a26:	9b04      	ldr	r3, [sp, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1a4      	bne.n	8008976 <_strtod_l+0x82e>
 8008a2c:	e5de      	b.n	80085ec <_strtod_l+0x4a4>
 8008a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a32:	e7ea      	b.n	8008a0a <_strtod_l+0x8c2>
 8008a34:	4613      	mov	r3, r2
 8008a36:	e7e8      	b.n	8008a0a <_strtod_l+0x8c2>
 8008a38:	ea53 030a 	orrs.w	r3, r3, sl
 8008a3c:	d08c      	beq.n	8008958 <_strtod_l+0x810>
 8008a3e:	9b08      	ldr	r3, [sp, #32]
 8008a40:	b1db      	cbz	r3, 8008a7a <_strtod_l+0x932>
 8008a42:	423b      	tst	r3, r7
 8008a44:	d0ef      	beq.n	8008a26 <_strtod_l+0x8de>
 8008a46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a48:	9a04      	ldr	r2, [sp, #16]
 8008a4a:	4650      	mov	r0, sl
 8008a4c:	4659      	mov	r1, fp
 8008a4e:	b1c3      	cbz	r3, 8008a82 <_strtod_l+0x93a>
 8008a50:	f7ff fb5e 	bl	8008110 <sulp>
 8008a54:	4602      	mov	r2, r0
 8008a56:	460b      	mov	r3, r1
 8008a58:	ec51 0b18 	vmov	r0, r1, d8
 8008a5c:	f7f7 fc16 	bl	800028c <__adddf3>
 8008a60:	4682      	mov	sl, r0
 8008a62:	468b      	mov	fp, r1
 8008a64:	e7df      	b.n	8008a26 <_strtod_l+0x8de>
 8008a66:	4013      	ands	r3, r2
 8008a68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008a6c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008a70:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008a74:	f04f 3aff 	mov.w	sl, #4294967295
 8008a78:	e7d5      	b.n	8008a26 <_strtod_l+0x8de>
 8008a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a7c:	ea13 0f0a 	tst.w	r3, sl
 8008a80:	e7e0      	b.n	8008a44 <_strtod_l+0x8fc>
 8008a82:	f7ff fb45 	bl	8008110 <sulp>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	ec51 0b18 	vmov	r0, r1, d8
 8008a8e:	f7f7 fbfb 	bl	8000288 <__aeabi_dsub>
 8008a92:	2200      	movs	r2, #0
 8008a94:	2300      	movs	r3, #0
 8008a96:	4682      	mov	sl, r0
 8008a98:	468b      	mov	fp, r1
 8008a9a:	f7f8 f815 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0c1      	beq.n	8008a26 <_strtod_l+0x8de>
 8008aa2:	e611      	b.n	80086c8 <_strtod_l+0x580>
 8008aa4:	fffffc02 	.word	0xfffffc02
 8008aa8:	7ff00000 	.word	0x7ff00000
 8008aac:	39500000 	.word	0x39500000
 8008ab0:	000fffff 	.word	0x000fffff
 8008ab4:	7fefffff 	.word	0x7fefffff
 8008ab8:	0800be70 	.word	0x0800be70
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	f002 fb1c 	bl	800b0fc <__ratio>
 8008ac4:	ec59 8b10 	vmov	r8, r9, d0
 8008ac8:	ee10 0a10 	vmov	r0, s0
 8008acc:	2200      	movs	r2, #0
 8008ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ad2:	4649      	mov	r1, r9
 8008ad4:	f7f8 f80c 	bl	8000af0 <__aeabi_dcmple>
 8008ad8:	2800      	cmp	r0, #0
 8008ada:	d07a      	beq.n	8008bd2 <_strtod_l+0xa8a>
 8008adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d04a      	beq.n	8008b78 <_strtod_l+0xa30>
 8008ae2:	4b95      	ldr	r3, [pc, #596]	; (8008d38 <_strtod_l+0xbf0>)
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008aea:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008d38 <_strtod_l+0xbf0>
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	4b92      	ldr	r3, [pc, #584]	; (8008d3c <_strtod_l+0xbf4>)
 8008af4:	403b      	ands	r3, r7
 8008af6:	930d      	str	r3, [sp, #52]	; 0x34
 8008af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008afa:	4b91      	ldr	r3, [pc, #580]	; (8008d40 <_strtod_l+0xbf8>)
 8008afc:	429a      	cmp	r2, r3
 8008afe:	f040 80b0 	bne.w	8008c62 <_strtod_l+0xb1a>
 8008b02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b06:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008b0a:	ec4b ab10 	vmov	d0, sl, fp
 8008b0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b12:	f002 fa1b 	bl	800af4c <__ulp>
 8008b16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b1a:	ec53 2b10 	vmov	r2, r3, d0
 8008b1e:	f7f7 fd6b 	bl	80005f8 <__aeabi_dmul>
 8008b22:	4652      	mov	r2, sl
 8008b24:	465b      	mov	r3, fp
 8008b26:	f7f7 fbb1 	bl	800028c <__adddf3>
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4983      	ldr	r1, [pc, #524]	; (8008d3c <_strtod_l+0xbf4>)
 8008b2e:	4a85      	ldr	r2, [pc, #532]	; (8008d44 <_strtod_l+0xbfc>)
 8008b30:	4019      	ands	r1, r3
 8008b32:	4291      	cmp	r1, r2
 8008b34:	4682      	mov	sl, r0
 8008b36:	d960      	bls.n	8008bfa <_strtod_l+0xab2>
 8008b38:	ee18 3a90 	vmov	r3, s17
 8008b3c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d104      	bne.n	8008b4e <_strtod_l+0xa06>
 8008b44:	ee18 3a10 	vmov	r3, s16
 8008b48:	3301      	adds	r3, #1
 8008b4a:	f43f ad45 	beq.w	80085d8 <_strtod_l+0x490>
 8008b4e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008d50 <_strtod_l+0xc08>
 8008b52:	f04f 3aff 	mov.w	sl, #4294967295
 8008b56:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b58:	4620      	mov	r0, r4
 8008b5a:	f001 fec5 	bl	800a8e8 <_Bfree>
 8008b5e:	9905      	ldr	r1, [sp, #20]
 8008b60:	4620      	mov	r0, r4
 8008b62:	f001 fec1 	bl	800a8e8 <_Bfree>
 8008b66:	4631      	mov	r1, r6
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 febd 	bl	800a8e8 <_Bfree>
 8008b6e:	4629      	mov	r1, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f001 feb9 	bl	800a8e8 <_Bfree>
 8008b76:	e61a      	b.n	80087ae <_strtod_l+0x666>
 8008b78:	f1ba 0f00 	cmp.w	sl, #0
 8008b7c:	d11b      	bne.n	8008bb6 <_strtod_l+0xa6e>
 8008b7e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b82:	b9f3      	cbnz	r3, 8008bc2 <_strtod_l+0xa7a>
 8008b84:	4b6c      	ldr	r3, [pc, #432]	; (8008d38 <_strtod_l+0xbf0>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	4640      	mov	r0, r8
 8008b8a:	4649      	mov	r1, r9
 8008b8c:	f7f7 ffa6 	bl	8000adc <__aeabi_dcmplt>
 8008b90:	b9d0      	cbnz	r0, 8008bc8 <_strtod_l+0xa80>
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	4b6c      	ldr	r3, [pc, #432]	; (8008d48 <_strtod_l+0xc00>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f7f7 fd2d 	bl	80005f8 <__aeabi_dmul>
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	4689      	mov	r9, r1
 8008ba2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008ba6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008baa:	9315      	str	r3, [sp, #84]	; 0x54
 8008bac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008bb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008bb4:	e79d      	b.n	8008af2 <_strtod_l+0x9aa>
 8008bb6:	f1ba 0f01 	cmp.w	sl, #1
 8008bba:	d102      	bne.n	8008bc2 <_strtod_l+0xa7a>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f43f ad83 	beq.w	80086c8 <_strtod_l+0x580>
 8008bc2:	4b62      	ldr	r3, [pc, #392]	; (8008d4c <_strtod_l+0xc04>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	e78e      	b.n	8008ae6 <_strtod_l+0x99e>
 8008bc8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008d48 <_strtod_l+0xc00>
 8008bcc:	f04f 0800 	mov.w	r8, #0
 8008bd0:	e7e7      	b.n	8008ba2 <_strtod_l+0xa5a>
 8008bd2:	4b5d      	ldr	r3, [pc, #372]	; (8008d48 <_strtod_l+0xc00>)
 8008bd4:	4640      	mov	r0, r8
 8008bd6:	4649      	mov	r1, r9
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008be0:	4680      	mov	r8, r0
 8008be2:	4689      	mov	r9, r1
 8008be4:	b933      	cbnz	r3, 8008bf4 <_strtod_l+0xaac>
 8008be6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bea:	900e      	str	r0, [sp, #56]	; 0x38
 8008bec:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008bf2:	e7dd      	b.n	8008bb0 <_strtod_l+0xa68>
 8008bf4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008bf8:	e7f9      	b.n	8008bee <_strtod_l+0xaa6>
 8008bfa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1a8      	bne.n	8008b56 <_strtod_l+0xa0e>
 8008c04:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c0a:	0d1b      	lsrs	r3, r3, #20
 8008c0c:	051b      	lsls	r3, r3, #20
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d1a1      	bne.n	8008b56 <_strtod_l+0xa0e>
 8008c12:	4640      	mov	r0, r8
 8008c14:	4649      	mov	r1, r9
 8008c16:	f7f8 f84f 	bl	8000cb8 <__aeabi_d2lz>
 8008c1a:	f7f7 fcbf 	bl	800059c <__aeabi_l2d>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	4640      	mov	r0, r8
 8008c24:	4649      	mov	r1, r9
 8008c26:	f7f7 fb2f 	bl	8000288 <__aeabi_dsub>
 8008c2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c30:	ea43 030a 	orr.w	r3, r3, sl
 8008c34:	4313      	orrs	r3, r2
 8008c36:	4680      	mov	r8, r0
 8008c38:	4689      	mov	r9, r1
 8008c3a:	d055      	beq.n	8008ce8 <_strtod_l+0xba0>
 8008c3c:	a336      	add	r3, pc, #216	; (adr r3, 8008d18 <_strtod_l+0xbd0>)
 8008c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c42:	f7f7 ff4b 	bl	8000adc <__aeabi_dcmplt>
 8008c46:	2800      	cmp	r0, #0
 8008c48:	f47f acd0 	bne.w	80085ec <_strtod_l+0x4a4>
 8008c4c:	a334      	add	r3, pc, #208	; (adr r3, 8008d20 <_strtod_l+0xbd8>)
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	4640      	mov	r0, r8
 8008c54:	4649      	mov	r1, r9
 8008c56:	f7f7 ff5f 	bl	8000b18 <__aeabi_dcmpgt>
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f43f af7b 	beq.w	8008b56 <_strtod_l+0xa0e>
 8008c60:	e4c4      	b.n	80085ec <_strtod_l+0x4a4>
 8008c62:	9b04      	ldr	r3, [sp, #16]
 8008c64:	b333      	cbz	r3, 8008cb4 <_strtod_l+0xb6c>
 8008c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c68:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c6c:	d822      	bhi.n	8008cb4 <_strtod_l+0xb6c>
 8008c6e:	a32e      	add	r3, pc, #184	; (adr r3, 8008d28 <_strtod_l+0xbe0>)
 8008c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 ff3a 	bl	8000af0 <__aeabi_dcmple>
 8008c7c:	b1a0      	cbz	r0, 8008ca8 <_strtod_l+0xb60>
 8008c7e:	4649      	mov	r1, r9
 8008c80:	4640      	mov	r0, r8
 8008c82:	f7f7 ff91 	bl	8000ba8 <__aeabi_d2uiz>
 8008c86:	2801      	cmp	r0, #1
 8008c88:	bf38      	it	cc
 8008c8a:	2001      	movcc	r0, #1
 8008c8c:	f7f7 fc3a 	bl	8000504 <__aeabi_ui2d>
 8008c90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c92:	4680      	mov	r8, r0
 8008c94:	4689      	mov	r9, r1
 8008c96:	bb23      	cbnz	r3, 8008ce2 <_strtod_l+0xb9a>
 8008c98:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008c9c:	9010      	str	r0, [sp, #64]	; 0x40
 8008c9e:	9311      	str	r3, [sp, #68]	; 0x44
 8008ca0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ca4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cac:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8008cbc:	eef0 0a68 	vmov.f32	s1, s17
 8008cc0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008cc4:	f002 f942 	bl	800af4c <__ulp>
 8008cc8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008ccc:	ec53 2b10 	vmov	r2, r3, d0
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	ec53 2b18 	vmov	r2, r3, d8
 8008cd8:	f7f7 fad8 	bl	800028c <__adddf3>
 8008cdc:	4682      	mov	sl, r0
 8008cde:	468b      	mov	fp, r1
 8008ce0:	e78d      	b.n	8008bfe <_strtod_l+0xab6>
 8008ce2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008ce6:	e7db      	b.n	8008ca0 <_strtod_l+0xb58>
 8008ce8:	a311      	add	r3, pc, #68	; (adr r3, 8008d30 <_strtod_l+0xbe8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fef5 	bl	8000adc <__aeabi_dcmplt>
 8008cf2:	e7b2      	b.n	8008c5a <_strtod_l+0xb12>
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008cfa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008cfc:	6013      	str	r3, [r2, #0]
 8008cfe:	f7ff ba6b 	b.w	80081d8 <_strtod_l+0x90>
 8008d02:	2a65      	cmp	r2, #101	; 0x65
 8008d04:	f43f ab5f 	beq.w	80083c6 <_strtod_l+0x27e>
 8008d08:	2a45      	cmp	r2, #69	; 0x45
 8008d0a:	f43f ab5c 	beq.w	80083c6 <_strtod_l+0x27e>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	f7ff bb94 	b.w	800843c <_strtod_l+0x2f4>
 8008d14:	f3af 8000 	nop.w
 8008d18:	94a03595 	.word	0x94a03595
 8008d1c:	3fdfffff 	.word	0x3fdfffff
 8008d20:	35afe535 	.word	0x35afe535
 8008d24:	3fe00000 	.word	0x3fe00000
 8008d28:	ffc00000 	.word	0xffc00000
 8008d2c:	41dfffff 	.word	0x41dfffff
 8008d30:	94a03595 	.word	0x94a03595
 8008d34:	3fcfffff 	.word	0x3fcfffff
 8008d38:	3ff00000 	.word	0x3ff00000
 8008d3c:	7ff00000 	.word	0x7ff00000
 8008d40:	7fe00000 	.word	0x7fe00000
 8008d44:	7c9fffff 	.word	0x7c9fffff
 8008d48:	3fe00000 	.word	0x3fe00000
 8008d4c:	bff00000 	.word	0xbff00000
 8008d50:	7fefffff 	.word	0x7fefffff

08008d54 <_strtod_r>:
 8008d54:	4b01      	ldr	r3, [pc, #4]	; (8008d5c <_strtod_r+0x8>)
 8008d56:	f7ff b9f7 	b.w	8008148 <_strtod_l>
 8008d5a:	bf00      	nop
 8008d5c:	20000078 	.word	0x20000078

08008d60 <_strtol_l.constprop.0>:
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d66:	d001      	beq.n	8008d6c <_strtol_l.constprop.0+0xc>
 8008d68:	2b24      	cmp	r3, #36	; 0x24
 8008d6a:	d906      	bls.n	8008d7a <_strtol_l.constprop.0+0x1a>
 8008d6c:	f7fe fa70 	bl	8007250 <__errno>
 8008d70:	2316      	movs	r3, #22
 8008d72:	6003      	str	r3, [r0, #0]
 8008d74:	2000      	movs	r0, #0
 8008d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008e60 <_strtol_l.constprop.0+0x100>
 8008d7e:	460d      	mov	r5, r1
 8008d80:	462e      	mov	r6, r5
 8008d82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d86:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008d8a:	f017 0708 	ands.w	r7, r7, #8
 8008d8e:	d1f7      	bne.n	8008d80 <_strtol_l.constprop.0+0x20>
 8008d90:	2c2d      	cmp	r4, #45	; 0x2d
 8008d92:	d132      	bne.n	8008dfa <_strtol_l.constprop.0+0x9a>
 8008d94:	782c      	ldrb	r4, [r5, #0]
 8008d96:	2701      	movs	r7, #1
 8008d98:	1cb5      	adds	r5, r6, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d05b      	beq.n	8008e56 <_strtol_l.constprop.0+0xf6>
 8008d9e:	2b10      	cmp	r3, #16
 8008da0:	d109      	bne.n	8008db6 <_strtol_l.constprop.0+0x56>
 8008da2:	2c30      	cmp	r4, #48	; 0x30
 8008da4:	d107      	bne.n	8008db6 <_strtol_l.constprop.0+0x56>
 8008da6:	782c      	ldrb	r4, [r5, #0]
 8008da8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008dac:	2c58      	cmp	r4, #88	; 0x58
 8008dae:	d14d      	bne.n	8008e4c <_strtol_l.constprop.0+0xec>
 8008db0:	786c      	ldrb	r4, [r5, #1]
 8008db2:	2310      	movs	r3, #16
 8008db4:	3502      	adds	r5, #2
 8008db6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008dba:	f108 38ff 	add.w	r8, r8, #4294967295
 8008dbe:	f04f 0c00 	mov.w	ip, #0
 8008dc2:	fbb8 f9f3 	udiv	r9, r8, r3
 8008dc6:	4666      	mov	r6, ip
 8008dc8:	fb03 8a19 	mls	sl, r3, r9, r8
 8008dcc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008dd0:	f1be 0f09 	cmp.w	lr, #9
 8008dd4:	d816      	bhi.n	8008e04 <_strtol_l.constprop.0+0xa4>
 8008dd6:	4674      	mov	r4, lr
 8008dd8:	42a3      	cmp	r3, r4
 8008dda:	dd24      	ble.n	8008e26 <_strtol_l.constprop.0+0xc6>
 8008ddc:	f1bc 0f00 	cmp.w	ip, #0
 8008de0:	db1e      	blt.n	8008e20 <_strtol_l.constprop.0+0xc0>
 8008de2:	45b1      	cmp	r9, r6
 8008de4:	d31c      	bcc.n	8008e20 <_strtol_l.constprop.0+0xc0>
 8008de6:	d101      	bne.n	8008dec <_strtol_l.constprop.0+0x8c>
 8008de8:	45a2      	cmp	sl, r4
 8008dea:	db19      	blt.n	8008e20 <_strtol_l.constprop.0+0xc0>
 8008dec:	fb06 4603 	mla	r6, r6, r3, r4
 8008df0:	f04f 0c01 	mov.w	ip, #1
 8008df4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008df8:	e7e8      	b.n	8008dcc <_strtol_l.constprop.0+0x6c>
 8008dfa:	2c2b      	cmp	r4, #43	; 0x2b
 8008dfc:	bf04      	itt	eq
 8008dfe:	782c      	ldrbeq	r4, [r5, #0]
 8008e00:	1cb5      	addeq	r5, r6, #2
 8008e02:	e7ca      	b.n	8008d9a <_strtol_l.constprop.0+0x3a>
 8008e04:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008e08:	f1be 0f19 	cmp.w	lr, #25
 8008e0c:	d801      	bhi.n	8008e12 <_strtol_l.constprop.0+0xb2>
 8008e0e:	3c37      	subs	r4, #55	; 0x37
 8008e10:	e7e2      	b.n	8008dd8 <_strtol_l.constprop.0+0x78>
 8008e12:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008e16:	f1be 0f19 	cmp.w	lr, #25
 8008e1a:	d804      	bhi.n	8008e26 <_strtol_l.constprop.0+0xc6>
 8008e1c:	3c57      	subs	r4, #87	; 0x57
 8008e1e:	e7db      	b.n	8008dd8 <_strtol_l.constprop.0+0x78>
 8008e20:	f04f 3cff 	mov.w	ip, #4294967295
 8008e24:	e7e6      	b.n	8008df4 <_strtol_l.constprop.0+0x94>
 8008e26:	f1bc 0f00 	cmp.w	ip, #0
 8008e2a:	da05      	bge.n	8008e38 <_strtol_l.constprop.0+0xd8>
 8008e2c:	2322      	movs	r3, #34	; 0x22
 8008e2e:	6003      	str	r3, [r0, #0]
 8008e30:	4646      	mov	r6, r8
 8008e32:	b942      	cbnz	r2, 8008e46 <_strtol_l.constprop.0+0xe6>
 8008e34:	4630      	mov	r0, r6
 8008e36:	e79e      	b.n	8008d76 <_strtol_l.constprop.0+0x16>
 8008e38:	b107      	cbz	r7, 8008e3c <_strtol_l.constprop.0+0xdc>
 8008e3a:	4276      	negs	r6, r6
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	d0f9      	beq.n	8008e34 <_strtol_l.constprop.0+0xd4>
 8008e40:	f1bc 0f00 	cmp.w	ip, #0
 8008e44:	d000      	beq.n	8008e48 <_strtol_l.constprop.0+0xe8>
 8008e46:	1e69      	subs	r1, r5, #1
 8008e48:	6011      	str	r1, [r2, #0]
 8008e4a:	e7f3      	b.n	8008e34 <_strtol_l.constprop.0+0xd4>
 8008e4c:	2430      	movs	r4, #48	; 0x30
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1b1      	bne.n	8008db6 <_strtol_l.constprop.0+0x56>
 8008e52:	2308      	movs	r3, #8
 8008e54:	e7af      	b.n	8008db6 <_strtol_l.constprop.0+0x56>
 8008e56:	2c30      	cmp	r4, #48	; 0x30
 8008e58:	d0a5      	beq.n	8008da6 <_strtol_l.constprop.0+0x46>
 8008e5a:	230a      	movs	r3, #10
 8008e5c:	e7ab      	b.n	8008db6 <_strtol_l.constprop.0+0x56>
 8008e5e:	bf00      	nop
 8008e60:	0800be99 	.word	0x0800be99

08008e64 <_strtol_r>:
 8008e64:	f7ff bf7c 	b.w	8008d60 <_strtol_l.constprop.0>

08008e68 <strtol>:
 8008e68:	4613      	mov	r3, r2
 8008e6a:	460a      	mov	r2, r1
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	4802      	ldr	r0, [pc, #8]	; (8008e78 <strtol+0x10>)
 8008e70:	6800      	ldr	r0, [r0, #0]
 8008e72:	f7ff bf75 	b.w	8008d60 <_strtol_l.constprop.0>
 8008e76:	bf00      	nop
 8008e78:	20000010 	.word	0x20000010

08008e7c <__swbuf_r>:
 8008e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e7e:	460e      	mov	r6, r1
 8008e80:	4614      	mov	r4, r2
 8008e82:	4605      	mov	r5, r0
 8008e84:	b118      	cbz	r0, 8008e8e <__swbuf_r+0x12>
 8008e86:	6983      	ldr	r3, [r0, #24]
 8008e88:	b90b      	cbnz	r3, 8008e8e <__swbuf_r+0x12>
 8008e8a:	f001 f84d 	bl	8009f28 <__sinit>
 8008e8e:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <__swbuf_r+0x98>)
 8008e90:	429c      	cmp	r4, r3
 8008e92:	d12b      	bne.n	8008eec <__swbuf_r+0x70>
 8008e94:	686c      	ldr	r4, [r5, #4]
 8008e96:	69a3      	ldr	r3, [r4, #24]
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	071a      	lsls	r2, r3, #28
 8008e9e:	d52f      	bpl.n	8008f00 <__swbuf_r+0x84>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	b36b      	cbz	r3, 8008f00 <__swbuf_r+0x84>
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	6820      	ldr	r0, [r4, #0]
 8008ea8:	1ac0      	subs	r0, r0, r3
 8008eaa:	6963      	ldr	r3, [r4, #20]
 8008eac:	b2f6      	uxtb	r6, r6
 8008eae:	4283      	cmp	r3, r0
 8008eb0:	4637      	mov	r7, r6
 8008eb2:	dc04      	bgt.n	8008ebe <__swbuf_r+0x42>
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 ffa2 	bl	8009e00 <_fflush_r>
 8008ebc:	bb30      	cbnz	r0, 8008f0c <__swbuf_r+0x90>
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	3b01      	subs	r3, #1
 8008ec2:	60a3      	str	r3, [r4, #8]
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	1c5a      	adds	r2, r3, #1
 8008ec8:	6022      	str	r2, [r4, #0]
 8008eca:	701e      	strb	r6, [r3, #0]
 8008ecc:	6963      	ldr	r3, [r4, #20]
 8008ece:	3001      	adds	r0, #1
 8008ed0:	4283      	cmp	r3, r0
 8008ed2:	d004      	beq.n	8008ede <__swbuf_r+0x62>
 8008ed4:	89a3      	ldrh	r3, [r4, #12]
 8008ed6:	07db      	lsls	r3, r3, #31
 8008ed8:	d506      	bpl.n	8008ee8 <__swbuf_r+0x6c>
 8008eda:	2e0a      	cmp	r6, #10
 8008edc:	d104      	bne.n	8008ee8 <__swbuf_r+0x6c>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f000 ff8d 	bl	8009e00 <_fflush_r>
 8008ee6:	b988      	cbnz	r0, 8008f0c <__swbuf_r+0x90>
 8008ee8:	4638      	mov	r0, r7
 8008eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eec:	4b0a      	ldr	r3, [pc, #40]	; (8008f18 <__swbuf_r+0x9c>)
 8008eee:	429c      	cmp	r4, r3
 8008ef0:	d101      	bne.n	8008ef6 <__swbuf_r+0x7a>
 8008ef2:	68ac      	ldr	r4, [r5, #8]
 8008ef4:	e7cf      	b.n	8008e96 <__swbuf_r+0x1a>
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <__swbuf_r+0xa0>)
 8008ef8:	429c      	cmp	r4, r3
 8008efa:	bf08      	it	eq
 8008efc:	68ec      	ldreq	r4, [r5, #12]
 8008efe:	e7ca      	b.n	8008e96 <__swbuf_r+0x1a>
 8008f00:	4621      	mov	r1, r4
 8008f02:	4628      	mov	r0, r5
 8008f04:	f000 f80c 	bl	8008f20 <__swsetup_r>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d0cb      	beq.n	8008ea4 <__swbuf_r+0x28>
 8008f0c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f10:	e7ea      	b.n	8008ee8 <__swbuf_r+0x6c>
 8008f12:	bf00      	nop
 8008f14:	0800c04c 	.word	0x0800c04c
 8008f18:	0800c06c 	.word	0x0800c06c
 8008f1c:	0800c02c 	.word	0x0800c02c

08008f20 <__swsetup_r>:
 8008f20:	4b32      	ldr	r3, [pc, #200]	; (8008fec <__swsetup_r+0xcc>)
 8008f22:	b570      	push	{r4, r5, r6, lr}
 8008f24:	681d      	ldr	r5, [r3, #0]
 8008f26:	4606      	mov	r6, r0
 8008f28:	460c      	mov	r4, r1
 8008f2a:	b125      	cbz	r5, 8008f36 <__swsetup_r+0x16>
 8008f2c:	69ab      	ldr	r3, [r5, #24]
 8008f2e:	b913      	cbnz	r3, 8008f36 <__swsetup_r+0x16>
 8008f30:	4628      	mov	r0, r5
 8008f32:	f000 fff9 	bl	8009f28 <__sinit>
 8008f36:	4b2e      	ldr	r3, [pc, #184]	; (8008ff0 <__swsetup_r+0xd0>)
 8008f38:	429c      	cmp	r4, r3
 8008f3a:	d10f      	bne.n	8008f5c <__swsetup_r+0x3c>
 8008f3c:	686c      	ldr	r4, [r5, #4]
 8008f3e:	89a3      	ldrh	r3, [r4, #12]
 8008f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f44:	0719      	lsls	r1, r3, #28
 8008f46:	d42c      	bmi.n	8008fa2 <__swsetup_r+0x82>
 8008f48:	06dd      	lsls	r5, r3, #27
 8008f4a:	d411      	bmi.n	8008f70 <__swsetup_r+0x50>
 8008f4c:	2309      	movs	r3, #9
 8008f4e:	6033      	str	r3, [r6, #0]
 8008f50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5a:	e03e      	b.n	8008fda <__swsetup_r+0xba>
 8008f5c:	4b25      	ldr	r3, [pc, #148]	; (8008ff4 <__swsetup_r+0xd4>)
 8008f5e:	429c      	cmp	r4, r3
 8008f60:	d101      	bne.n	8008f66 <__swsetup_r+0x46>
 8008f62:	68ac      	ldr	r4, [r5, #8]
 8008f64:	e7eb      	b.n	8008f3e <__swsetup_r+0x1e>
 8008f66:	4b24      	ldr	r3, [pc, #144]	; (8008ff8 <__swsetup_r+0xd8>)
 8008f68:	429c      	cmp	r4, r3
 8008f6a:	bf08      	it	eq
 8008f6c:	68ec      	ldreq	r4, [r5, #12]
 8008f6e:	e7e6      	b.n	8008f3e <__swsetup_r+0x1e>
 8008f70:	0758      	lsls	r0, r3, #29
 8008f72:	d512      	bpl.n	8008f9a <__swsetup_r+0x7a>
 8008f74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f76:	b141      	cbz	r1, 8008f8a <__swsetup_r+0x6a>
 8008f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	d002      	beq.n	8008f86 <__swsetup_r+0x66>
 8008f80:	4630      	mov	r0, r6
 8008f82:	f002 f949 	bl	800b218 <_free_r>
 8008f86:	2300      	movs	r3, #0
 8008f88:	6363      	str	r3, [r4, #52]	; 0x34
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	2300      	movs	r3, #0
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	f043 0308 	orr.w	r3, r3, #8
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	6923      	ldr	r3, [r4, #16]
 8008fa4:	b94b      	cbnz	r3, 8008fba <__swsetup_r+0x9a>
 8008fa6:	89a3      	ldrh	r3, [r4, #12]
 8008fa8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb0:	d003      	beq.n	8008fba <__swsetup_r+0x9a>
 8008fb2:	4621      	mov	r1, r4
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	f001 fbef 	bl	800a798 <__smakebuf_r>
 8008fba:	89a0      	ldrh	r0, [r4, #12]
 8008fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fc0:	f010 0301 	ands.w	r3, r0, #1
 8008fc4:	d00a      	beq.n	8008fdc <__swsetup_r+0xbc>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	6963      	ldr	r3, [r4, #20]
 8008fcc:	425b      	negs	r3, r3
 8008fce:	61a3      	str	r3, [r4, #24]
 8008fd0:	6923      	ldr	r3, [r4, #16]
 8008fd2:	b943      	cbnz	r3, 8008fe6 <__swsetup_r+0xc6>
 8008fd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fd8:	d1ba      	bne.n	8008f50 <__swsetup_r+0x30>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	0781      	lsls	r1, r0, #30
 8008fde:	bf58      	it	pl
 8008fe0:	6963      	ldrpl	r3, [r4, #20]
 8008fe2:	60a3      	str	r3, [r4, #8]
 8008fe4:	e7f4      	b.n	8008fd0 <__swsetup_r+0xb0>
 8008fe6:	2000      	movs	r0, #0
 8008fe8:	e7f7      	b.n	8008fda <__swsetup_r+0xba>
 8008fea:	bf00      	nop
 8008fec:	20000010 	.word	0x20000010
 8008ff0:	0800c04c 	.word	0x0800c04c
 8008ff4:	0800c06c 	.word	0x0800c06c
 8008ff8:	0800c02c 	.word	0x0800c02c

08008ffc <quorem>:
 8008ffc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	6903      	ldr	r3, [r0, #16]
 8009002:	690c      	ldr	r4, [r1, #16]
 8009004:	42a3      	cmp	r3, r4
 8009006:	4607      	mov	r7, r0
 8009008:	f2c0 8081 	blt.w	800910e <quorem+0x112>
 800900c:	3c01      	subs	r4, #1
 800900e:	f101 0814 	add.w	r8, r1, #20
 8009012:	f100 0514 	add.w	r5, r0, #20
 8009016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009024:	3301      	adds	r3, #1
 8009026:	429a      	cmp	r2, r3
 8009028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800902c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009030:	fbb2 f6f3 	udiv	r6, r2, r3
 8009034:	d331      	bcc.n	800909a <quorem+0x9e>
 8009036:	f04f 0e00 	mov.w	lr, #0
 800903a:	4640      	mov	r0, r8
 800903c:	46ac      	mov	ip, r5
 800903e:	46f2      	mov	sl, lr
 8009040:	f850 2b04 	ldr.w	r2, [r0], #4
 8009044:	b293      	uxth	r3, r2
 8009046:	fb06 e303 	mla	r3, r6, r3, lr
 800904a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800904e:	b29b      	uxth	r3, r3
 8009050:	ebaa 0303 	sub.w	r3, sl, r3
 8009054:	f8dc a000 	ldr.w	sl, [ip]
 8009058:	0c12      	lsrs	r2, r2, #16
 800905a:	fa13 f38a 	uxtah	r3, r3, sl
 800905e:	fb06 e202 	mla	r2, r6, r2, lr
 8009062:	9300      	str	r3, [sp, #0]
 8009064:	9b00      	ldr	r3, [sp, #0]
 8009066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800906a:	b292      	uxth	r2, r2
 800906c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009070:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009074:	f8bd 3000 	ldrh.w	r3, [sp]
 8009078:	4581      	cmp	r9, r0
 800907a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800907e:	f84c 3b04 	str.w	r3, [ip], #4
 8009082:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009086:	d2db      	bcs.n	8009040 <quorem+0x44>
 8009088:	f855 300b 	ldr.w	r3, [r5, fp]
 800908c:	b92b      	cbnz	r3, 800909a <quorem+0x9e>
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	3b04      	subs	r3, #4
 8009092:	429d      	cmp	r5, r3
 8009094:	461a      	mov	r2, r3
 8009096:	d32e      	bcc.n	80090f6 <quorem+0xfa>
 8009098:	613c      	str	r4, [r7, #16]
 800909a:	4638      	mov	r0, r7
 800909c:	f001 feb0 	bl	800ae00 <__mcmp>
 80090a0:	2800      	cmp	r0, #0
 80090a2:	db24      	blt.n	80090ee <quorem+0xf2>
 80090a4:	3601      	adds	r6, #1
 80090a6:	4628      	mov	r0, r5
 80090a8:	f04f 0c00 	mov.w	ip, #0
 80090ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80090b0:	f8d0 e000 	ldr.w	lr, [r0]
 80090b4:	b293      	uxth	r3, r2
 80090b6:	ebac 0303 	sub.w	r3, ip, r3
 80090ba:	0c12      	lsrs	r2, r2, #16
 80090bc:	fa13 f38e 	uxtah	r3, r3, lr
 80090c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ce:	45c1      	cmp	r9, r8
 80090d0:	f840 3b04 	str.w	r3, [r0], #4
 80090d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80090d8:	d2e8      	bcs.n	80090ac <quorem+0xb0>
 80090da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80090de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80090e2:	b922      	cbnz	r2, 80090ee <quorem+0xf2>
 80090e4:	3b04      	subs	r3, #4
 80090e6:	429d      	cmp	r5, r3
 80090e8:	461a      	mov	r2, r3
 80090ea:	d30a      	bcc.n	8009102 <quorem+0x106>
 80090ec:	613c      	str	r4, [r7, #16]
 80090ee:	4630      	mov	r0, r6
 80090f0:	b003      	add	sp, #12
 80090f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f6:	6812      	ldr	r2, [r2, #0]
 80090f8:	3b04      	subs	r3, #4
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	d1cc      	bne.n	8009098 <quorem+0x9c>
 80090fe:	3c01      	subs	r4, #1
 8009100:	e7c7      	b.n	8009092 <quorem+0x96>
 8009102:	6812      	ldr	r2, [r2, #0]
 8009104:	3b04      	subs	r3, #4
 8009106:	2a00      	cmp	r2, #0
 8009108:	d1f0      	bne.n	80090ec <quorem+0xf0>
 800910a:	3c01      	subs	r4, #1
 800910c:	e7eb      	b.n	80090e6 <quorem+0xea>
 800910e:	2000      	movs	r0, #0
 8009110:	e7ee      	b.n	80090f0 <quorem+0xf4>
 8009112:	0000      	movs	r0, r0
 8009114:	0000      	movs	r0, r0
	...

08009118 <_dtoa_r>:
 8009118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800911c:	ed2d 8b04 	vpush	{d8-d9}
 8009120:	ec57 6b10 	vmov	r6, r7, d0
 8009124:	b093      	sub	sp, #76	; 0x4c
 8009126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800912c:	9106      	str	r1, [sp, #24]
 800912e:	ee10 aa10 	vmov	sl, s0
 8009132:	4604      	mov	r4, r0
 8009134:	9209      	str	r2, [sp, #36]	; 0x24
 8009136:	930c      	str	r3, [sp, #48]	; 0x30
 8009138:	46bb      	mov	fp, r7
 800913a:	b975      	cbnz	r5, 800915a <_dtoa_r+0x42>
 800913c:	2010      	movs	r0, #16
 800913e:	f001 fb6b 	bl	800a818 <malloc>
 8009142:	4602      	mov	r2, r0
 8009144:	6260      	str	r0, [r4, #36]	; 0x24
 8009146:	b920      	cbnz	r0, 8009152 <_dtoa_r+0x3a>
 8009148:	4ba7      	ldr	r3, [pc, #668]	; (80093e8 <_dtoa_r+0x2d0>)
 800914a:	21ea      	movs	r1, #234	; 0xea
 800914c:	48a7      	ldr	r0, [pc, #668]	; (80093ec <_dtoa_r+0x2d4>)
 800914e:	f002 fc89 	bl	800ba64 <__assert_func>
 8009152:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009156:	6005      	str	r5, [r0, #0]
 8009158:	60c5      	str	r5, [r0, #12]
 800915a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800915c:	6819      	ldr	r1, [r3, #0]
 800915e:	b151      	cbz	r1, 8009176 <_dtoa_r+0x5e>
 8009160:	685a      	ldr	r2, [r3, #4]
 8009162:	604a      	str	r2, [r1, #4]
 8009164:	2301      	movs	r3, #1
 8009166:	4093      	lsls	r3, r2
 8009168:	608b      	str	r3, [r1, #8]
 800916a:	4620      	mov	r0, r4
 800916c:	f001 fbbc 	bl	800a8e8 <_Bfree>
 8009170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009172:	2200      	movs	r2, #0
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	1e3b      	subs	r3, r7, #0
 8009178:	bfaa      	itet	ge
 800917a:	2300      	movge	r3, #0
 800917c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009180:	f8c8 3000 	strge.w	r3, [r8]
 8009184:	4b9a      	ldr	r3, [pc, #616]	; (80093f0 <_dtoa_r+0x2d8>)
 8009186:	bfbc      	itt	lt
 8009188:	2201      	movlt	r2, #1
 800918a:	f8c8 2000 	strlt.w	r2, [r8]
 800918e:	ea33 030b 	bics.w	r3, r3, fp
 8009192:	d11b      	bne.n	80091cc <_dtoa_r+0xb4>
 8009194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009196:	f242 730f 	movw	r3, #9999	; 0x270f
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091a0:	4333      	orrs	r3, r6
 80091a2:	f000 8592 	beq.w	8009cca <_dtoa_r+0xbb2>
 80091a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091a8:	b963      	cbnz	r3, 80091c4 <_dtoa_r+0xac>
 80091aa:	4b92      	ldr	r3, [pc, #584]	; (80093f4 <_dtoa_r+0x2dc>)
 80091ac:	e022      	b.n	80091f4 <_dtoa_r+0xdc>
 80091ae:	4b92      	ldr	r3, [pc, #584]	; (80093f8 <_dtoa_r+0x2e0>)
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	3308      	adds	r3, #8
 80091b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	9801      	ldr	r0, [sp, #4]
 80091ba:	b013      	add	sp, #76	; 0x4c
 80091bc:	ecbd 8b04 	vpop	{d8-d9}
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	4b8b      	ldr	r3, [pc, #556]	; (80093f4 <_dtoa_r+0x2dc>)
 80091c6:	9301      	str	r3, [sp, #4]
 80091c8:	3303      	adds	r3, #3
 80091ca:	e7f3      	b.n	80091b4 <_dtoa_r+0x9c>
 80091cc:	2200      	movs	r2, #0
 80091ce:	2300      	movs	r3, #0
 80091d0:	4650      	mov	r0, sl
 80091d2:	4659      	mov	r1, fp
 80091d4:	f7f7 fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80091d8:	ec4b ab19 	vmov	d9, sl, fp
 80091dc:	4680      	mov	r8, r0
 80091de:	b158      	cbz	r0, 80091f8 <_dtoa_r+0xe0>
 80091e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80091e2:	2301      	movs	r3, #1
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 856b 	beq.w	8009cc4 <_dtoa_r+0xbac>
 80091ee:	4883      	ldr	r0, [pc, #524]	; (80093fc <_dtoa_r+0x2e4>)
 80091f0:	6018      	str	r0, [r3, #0]
 80091f2:	1e43      	subs	r3, r0, #1
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	e7df      	b.n	80091b8 <_dtoa_r+0xa0>
 80091f8:	ec4b ab10 	vmov	d0, sl, fp
 80091fc:	aa10      	add	r2, sp, #64	; 0x40
 80091fe:	a911      	add	r1, sp, #68	; 0x44
 8009200:	4620      	mov	r0, r4
 8009202:	f001 ff1f 	bl	800b044 <__d2b>
 8009206:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800920a:	ee08 0a10 	vmov	s16, r0
 800920e:	2d00      	cmp	r5, #0
 8009210:	f000 8084 	beq.w	800931c <_dtoa_r+0x204>
 8009214:	ee19 3a90 	vmov	r3, s19
 8009218:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800921c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009220:	4656      	mov	r6, sl
 8009222:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800922a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800922e:	4b74      	ldr	r3, [pc, #464]	; (8009400 <_dtoa_r+0x2e8>)
 8009230:	2200      	movs	r2, #0
 8009232:	4630      	mov	r0, r6
 8009234:	4639      	mov	r1, r7
 8009236:	f7f7 f827 	bl	8000288 <__aeabi_dsub>
 800923a:	a365      	add	r3, pc, #404	; (adr r3, 80093d0 <_dtoa_r+0x2b8>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	f7f7 f9da 	bl	80005f8 <__aeabi_dmul>
 8009244:	a364      	add	r3, pc, #400	; (adr r3, 80093d8 <_dtoa_r+0x2c0>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	f7f7 f81f 	bl	800028c <__adddf3>
 800924e:	4606      	mov	r6, r0
 8009250:	4628      	mov	r0, r5
 8009252:	460f      	mov	r7, r1
 8009254:	f7f7 f966 	bl	8000524 <__aeabi_i2d>
 8009258:	a361      	add	r3, pc, #388	; (adr r3, 80093e0 <_dtoa_r+0x2c8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f7 f9cb 	bl	80005f8 <__aeabi_dmul>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 f80f 	bl	800028c <__adddf3>
 800926e:	4606      	mov	r6, r0
 8009270:	460f      	mov	r7, r1
 8009272:	f7f7 fc71 	bl	8000b58 <__aeabi_d2iz>
 8009276:	2200      	movs	r2, #0
 8009278:	9000      	str	r0, [sp, #0]
 800927a:	2300      	movs	r3, #0
 800927c:	4630      	mov	r0, r6
 800927e:	4639      	mov	r1, r7
 8009280:	f7f7 fc2c 	bl	8000adc <__aeabi_dcmplt>
 8009284:	b150      	cbz	r0, 800929c <_dtoa_r+0x184>
 8009286:	9800      	ldr	r0, [sp, #0]
 8009288:	f7f7 f94c 	bl	8000524 <__aeabi_i2d>
 800928c:	4632      	mov	r2, r6
 800928e:	463b      	mov	r3, r7
 8009290:	f7f7 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009294:	b910      	cbnz	r0, 800929c <_dtoa_r+0x184>
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	3b01      	subs	r3, #1
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	9b00      	ldr	r3, [sp, #0]
 800929e:	2b16      	cmp	r3, #22
 80092a0:	d85a      	bhi.n	8009358 <_dtoa_r+0x240>
 80092a2:	9a00      	ldr	r2, [sp, #0]
 80092a4:	4b57      	ldr	r3, [pc, #348]	; (8009404 <_dtoa_r+0x2ec>)
 80092a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ae:	ec51 0b19 	vmov	r0, r1, d9
 80092b2:	f7f7 fc13 	bl	8000adc <__aeabi_dcmplt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d050      	beq.n	800935c <_dtoa_r+0x244>
 80092ba:	9b00      	ldr	r3, [sp, #0]
 80092bc:	3b01      	subs	r3, #1
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80092c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80092c6:	1b5d      	subs	r5, r3, r5
 80092c8:	1e6b      	subs	r3, r5, #1
 80092ca:	9305      	str	r3, [sp, #20]
 80092cc:	bf45      	ittet	mi
 80092ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80092d2:	9304      	strmi	r3, [sp, #16]
 80092d4:	2300      	movpl	r3, #0
 80092d6:	2300      	movmi	r3, #0
 80092d8:	bf4c      	ite	mi
 80092da:	9305      	strmi	r3, [sp, #20]
 80092dc:	9304      	strpl	r3, [sp, #16]
 80092de:	9b00      	ldr	r3, [sp, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	db3d      	blt.n	8009360 <_dtoa_r+0x248>
 80092e4:	9b05      	ldr	r3, [sp, #20]
 80092e6:	9a00      	ldr	r2, [sp, #0]
 80092e8:	920a      	str	r2, [sp, #40]	; 0x28
 80092ea:	4413      	add	r3, r2
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	2300      	movs	r3, #0
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	9b06      	ldr	r3, [sp, #24]
 80092f4:	2b09      	cmp	r3, #9
 80092f6:	f200 8089 	bhi.w	800940c <_dtoa_r+0x2f4>
 80092fa:	2b05      	cmp	r3, #5
 80092fc:	bfc4      	itt	gt
 80092fe:	3b04      	subgt	r3, #4
 8009300:	9306      	strgt	r3, [sp, #24]
 8009302:	9b06      	ldr	r3, [sp, #24]
 8009304:	f1a3 0302 	sub.w	r3, r3, #2
 8009308:	bfcc      	ite	gt
 800930a:	2500      	movgt	r5, #0
 800930c:	2501      	movle	r5, #1
 800930e:	2b03      	cmp	r3, #3
 8009310:	f200 8087 	bhi.w	8009422 <_dtoa_r+0x30a>
 8009314:	e8df f003 	tbb	[pc, r3]
 8009318:	59383a2d 	.word	0x59383a2d
 800931c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009320:	441d      	add	r5, r3
 8009322:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009326:	2b20      	cmp	r3, #32
 8009328:	bfc1      	itttt	gt
 800932a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800932e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009332:	fa0b f303 	lslgt.w	r3, fp, r3
 8009336:	fa26 f000 	lsrgt.w	r0, r6, r0
 800933a:	bfda      	itte	le
 800933c:	f1c3 0320 	rsble	r3, r3, #32
 8009340:	fa06 f003 	lslle.w	r0, r6, r3
 8009344:	4318      	orrgt	r0, r3
 8009346:	f7f7 f8dd 	bl	8000504 <__aeabi_ui2d>
 800934a:	2301      	movs	r3, #1
 800934c:	4606      	mov	r6, r0
 800934e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009352:	3d01      	subs	r5, #1
 8009354:	930e      	str	r3, [sp, #56]	; 0x38
 8009356:	e76a      	b.n	800922e <_dtoa_r+0x116>
 8009358:	2301      	movs	r3, #1
 800935a:	e7b2      	b.n	80092c2 <_dtoa_r+0x1aa>
 800935c:	900b      	str	r0, [sp, #44]	; 0x2c
 800935e:	e7b1      	b.n	80092c4 <_dtoa_r+0x1ac>
 8009360:	9b04      	ldr	r3, [sp, #16]
 8009362:	9a00      	ldr	r2, [sp, #0]
 8009364:	1a9b      	subs	r3, r3, r2
 8009366:	9304      	str	r3, [sp, #16]
 8009368:	4253      	negs	r3, r2
 800936a:	9307      	str	r3, [sp, #28]
 800936c:	2300      	movs	r3, #0
 800936e:	930a      	str	r3, [sp, #40]	; 0x28
 8009370:	e7bf      	b.n	80092f2 <_dtoa_r+0x1da>
 8009372:	2300      	movs	r3, #0
 8009374:	9308      	str	r3, [sp, #32]
 8009376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc55      	bgt.n	8009428 <_dtoa_r+0x310>
 800937c:	2301      	movs	r3, #1
 800937e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009382:	461a      	mov	r2, r3
 8009384:	9209      	str	r2, [sp, #36]	; 0x24
 8009386:	e00c      	b.n	80093a2 <_dtoa_r+0x28a>
 8009388:	2301      	movs	r3, #1
 800938a:	e7f3      	b.n	8009374 <_dtoa_r+0x25c>
 800938c:	2300      	movs	r3, #0
 800938e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009390:	9308      	str	r3, [sp, #32]
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	4413      	add	r3, r2
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	3301      	adds	r3, #1
 800939a:	2b01      	cmp	r3, #1
 800939c:	9303      	str	r3, [sp, #12]
 800939e:	bfb8      	it	lt
 80093a0:	2301      	movlt	r3, #1
 80093a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80093a4:	2200      	movs	r2, #0
 80093a6:	6042      	str	r2, [r0, #4]
 80093a8:	2204      	movs	r2, #4
 80093aa:	f102 0614 	add.w	r6, r2, #20
 80093ae:	429e      	cmp	r6, r3
 80093b0:	6841      	ldr	r1, [r0, #4]
 80093b2:	d93d      	bls.n	8009430 <_dtoa_r+0x318>
 80093b4:	4620      	mov	r0, r4
 80093b6:	f001 fa57 	bl	800a868 <_Balloc>
 80093ba:	9001      	str	r0, [sp, #4]
 80093bc:	2800      	cmp	r0, #0
 80093be:	d13b      	bne.n	8009438 <_dtoa_r+0x320>
 80093c0:	4b11      	ldr	r3, [pc, #68]	; (8009408 <_dtoa_r+0x2f0>)
 80093c2:	4602      	mov	r2, r0
 80093c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80093c8:	e6c0      	b.n	800914c <_dtoa_r+0x34>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e7df      	b.n	800938e <_dtoa_r+0x276>
 80093ce:	bf00      	nop
 80093d0:	636f4361 	.word	0x636f4361
 80093d4:	3fd287a7 	.word	0x3fd287a7
 80093d8:	8b60c8b3 	.word	0x8b60c8b3
 80093dc:	3fc68a28 	.word	0x3fc68a28
 80093e0:	509f79fb 	.word	0x509f79fb
 80093e4:	3fd34413 	.word	0x3fd34413
 80093e8:	0800bfa6 	.word	0x0800bfa6
 80093ec:	0800bfbd 	.word	0x0800bfbd
 80093f0:	7ff00000 	.word	0x7ff00000
 80093f4:	0800bfa2 	.word	0x0800bfa2
 80093f8:	0800bf99 	.word	0x0800bf99
 80093fc:	0800be1d 	.word	0x0800be1d
 8009400:	3ff80000 	.word	0x3ff80000
 8009404:	0800c190 	.word	0x0800c190
 8009408:	0800c018 	.word	0x0800c018
 800940c:	2501      	movs	r5, #1
 800940e:	2300      	movs	r3, #0
 8009410:	9306      	str	r3, [sp, #24]
 8009412:	9508      	str	r5, [sp, #32]
 8009414:	f04f 33ff 	mov.w	r3, #4294967295
 8009418:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800941c:	2200      	movs	r2, #0
 800941e:	2312      	movs	r3, #18
 8009420:	e7b0      	b.n	8009384 <_dtoa_r+0x26c>
 8009422:	2301      	movs	r3, #1
 8009424:	9308      	str	r3, [sp, #32]
 8009426:	e7f5      	b.n	8009414 <_dtoa_r+0x2fc>
 8009428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800942a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800942e:	e7b8      	b.n	80093a2 <_dtoa_r+0x28a>
 8009430:	3101      	adds	r1, #1
 8009432:	6041      	str	r1, [r0, #4]
 8009434:	0052      	lsls	r2, r2, #1
 8009436:	e7b8      	b.n	80093aa <_dtoa_r+0x292>
 8009438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800943a:	9a01      	ldr	r2, [sp, #4]
 800943c:	601a      	str	r2, [r3, #0]
 800943e:	9b03      	ldr	r3, [sp, #12]
 8009440:	2b0e      	cmp	r3, #14
 8009442:	f200 809d 	bhi.w	8009580 <_dtoa_r+0x468>
 8009446:	2d00      	cmp	r5, #0
 8009448:	f000 809a 	beq.w	8009580 <_dtoa_r+0x468>
 800944c:	9b00      	ldr	r3, [sp, #0]
 800944e:	2b00      	cmp	r3, #0
 8009450:	dd32      	ble.n	80094b8 <_dtoa_r+0x3a0>
 8009452:	4ab7      	ldr	r2, [pc, #732]	; (8009730 <_dtoa_r+0x618>)
 8009454:	f003 030f 	and.w	r3, r3, #15
 8009458:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800945c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009460:	9b00      	ldr	r3, [sp, #0]
 8009462:	05d8      	lsls	r0, r3, #23
 8009464:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009468:	d516      	bpl.n	8009498 <_dtoa_r+0x380>
 800946a:	4bb2      	ldr	r3, [pc, #712]	; (8009734 <_dtoa_r+0x61c>)
 800946c:	ec51 0b19 	vmov	r0, r1, d9
 8009470:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009474:	f7f7 f9ea 	bl	800084c <__aeabi_ddiv>
 8009478:	f007 070f 	and.w	r7, r7, #15
 800947c:	4682      	mov	sl, r0
 800947e:	468b      	mov	fp, r1
 8009480:	2503      	movs	r5, #3
 8009482:	4eac      	ldr	r6, [pc, #688]	; (8009734 <_dtoa_r+0x61c>)
 8009484:	b957      	cbnz	r7, 800949c <_dtoa_r+0x384>
 8009486:	4642      	mov	r2, r8
 8009488:	464b      	mov	r3, r9
 800948a:	4650      	mov	r0, sl
 800948c:	4659      	mov	r1, fp
 800948e:	f7f7 f9dd 	bl	800084c <__aeabi_ddiv>
 8009492:	4682      	mov	sl, r0
 8009494:	468b      	mov	fp, r1
 8009496:	e028      	b.n	80094ea <_dtoa_r+0x3d2>
 8009498:	2502      	movs	r5, #2
 800949a:	e7f2      	b.n	8009482 <_dtoa_r+0x36a>
 800949c:	07f9      	lsls	r1, r7, #31
 800949e:	d508      	bpl.n	80094b2 <_dtoa_r+0x39a>
 80094a0:	4640      	mov	r0, r8
 80094a2:	4649      	mov	r1, r9
 80094a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80094a8:	f7f7 f8a6 	bl	80005f8 <__aeabi_dmul>
 80094ac:	3501      	adds	r5, #1
 80094ae:	4680      	mov	r8, r0
 80094b0:	4689      	mov	r9, r1
 80094b2:	107f      	asrs	r7, r7, #1
 80094b4:	3608      	adds	r6, #8
 80094b6:	e7e5      	b.n	8009484 <_dtoa_r+0x36c>
 80094b8:	f000 809b 	beq.w	80095f2 <_dtoa_r+0x4da>
 80094bc:	9b00      	ldr	r3, [sp, #0]
 80094be:	4f9d      	ldr	r7, [pc, #628]	; (8009734 <_dtoa_r+0x61c>)
 80094c0:	425e      	negs	r6, r3
 80094c2:	4b9b      	ldr	r3, [pc, #620]	; (8009730 <_dtoa_r+0x618>)
 80094c4:	f006 020f 	and.w	r2, r6, #15
 80094c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	ec51 0b19 	vmov	r0, r1, d9
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	1136      	asrs	r6, r6, #4
 80094da:	4682      	mov	sl, r0
 80094dc:	468b      	mov	fp, r1
 80094de:	2300      	movs	r3, #0
 80094e0:	2502      	movs	r5, #2
 80094e2:	2e00      	cmp	r6, #0
 80094e4:	d17a      	bne.n	80095dc <_dtoa_r+0x4c4>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1d3      	bne.n	8009492 <_dtoa_r+0x37a>
 80094ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f000 8082 	beq.w	80095f6 <_dtoa_r+0x4de>
 80094f2:	4b91      	ldr	r3, [pc, #580]	; (8009738 <_dtoa_r+0x620>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	4650      	mov	r0, sl
 80094f8:	4659      	mov	r1, fp
 80094fa:	f7f7 faef 	bl	8000adc <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d079      	beq.n	80095f6 <_dtoa_r+0x4de>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d076      	beq.n	80095f6 <_dtoa_r+0x4de>
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd36      	ble.n	800957c <_dtoa_r+0x464>
 800950e:	9b00      	ldr	r3, [sp, #0]
 8009510:	4650      	mov	r0, sl
 8009512:	4659      	mov	r1, fp
 8009514:	1e5f      	subs	r7, r3, #1
 8009516:	2200      	movs	r2, #0
 8009518:	4b88      	ldr	r3, [pc, #544]	; (800973c <_dtoa_r+0x624>)
 800951a:	f7f7 f86d 	bl	80005f8 <__aeabi_dmul>
 800951e:	9e02      	ldr	r6, [sp, #8]
 8009520:	4682      	mov	sl, r0
 8009522:	468b      	mov	fp, r1
 8009524:	3501      	adds	r5, #1
 8009526:	4628      	mov	r0, r5
 8009528:	f7f6 fffc 	bl	8000524 <__aeabi_i2d>
 800952c:	4652      	mov	r2, sl
 800952e:	465b      	mov	r3, fp
 8009530:	f7f7 f862 	bl	80005f8 <__aeabi_dmul>
 8009534:	4b82      	ldr	r3, [pc, #520]	; (8009740 <_dtoa_r+0x628>)
 8009536:	2200      	movs	r2, #0
 8009538:	f7f6 fea8 	bl	800028c <__adddf3>
 800953c:	46d0      	mov	r8, sl
 800953e:	46d9      	mov	r9, fp
 8009540:	4682      	mov	sl, r0
 8009542:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009546:	2e00      	cmp	r6, #0
 8009548:	d158      	bne.n	80095fc <_dtoa_r+0x4e4>
 800954a:	4b7e      	ldr	r3, [pc, #504]	; (8009744 <_dtoa_r+0x62c>)
 800954c:	2200      	movs	r2, #0
 800954e:	4640      	mov	r0, r8
 8009550:	4649      	mov	r1, r9
 8009552:	f7f6 fe99 	bl	8000288 <__aeabi_dsub>
 8009556:	4652      	mov	r2, sl
 8009558:	465b      	mov	r3, fp
 800955a:	4680      	mov	r8, r0
 800955c:	4689      	mov	r9, r1
 800955e:	f7f7 fadb 	bl	8000b18 <__aeabi_dcmpgt>
 8009562:	2800      	cmp	r0, #0
 8009564:	f040 8295 	bne.w	8009a92 <_dtoa_r+0x97a>
 8009568:	4652      	mov	r2, sl
 800956a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800956e:	4640      	mov	r0, r8
 8009570:	4649      	mov	r1, r9
 8009572:	f7f7 fab3 	bl	8000adc <__aeabi_dcmplt>
 8009576:	2800      	cmp	r0, #0
 8009578:	f040 8289 	bne.w	8009a8e <_dtoa_r+0x976>
 800957c:	ec5b ab19 	vmov	sl, fp, d9
 8009580:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009582:	2b00      	cmp	r3, #0
 8009584:	f2c0 8148 	blt.w	8009818 <_dtoa_r+0x700>
 8009588:	9a00      	ldr	r2, [sp, #0]
 800958a:	2a0e      	cmp	r2, #14
 800958c:	f300 8144 	bgt.w	8009818 <_dtoa_r+0x700>
 8009590:	4b67      	ldr	r3, [pc, #412]	; (8009730 <_dtoa_r+0x618>)
 8009592:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009596:	e9d3 8900 	ldrd	r8, r9, [r3]
 800959a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959c:	2b00      	cmp	r3, #0
 800959e:	f280 80d5 	bge.w	800974c <_dtoa_r+0x634>
 80095a2:	9b03      	ldr	r3, [sp, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f300 80d1 	bgt.w	800974c <_dtoa_r+0x634>
 80095aa:	f040 826f 	bne.w	8009a8c <_dtoa_r+0x974>
 80095ae:	4b65      	ldr	r3, [pc, #404]	; (8009744 <_dtoa_r+0x62c>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	4640      	mov	r0, r8
 80095b4:	4649      	mov	r1, r9
 80095b6:	f7f7 f81f 	bl	80005f8 <__aeabi_dmul>
 80095ba:	4652      	mov	r2, sl
 80095bc:	465b      	mov	r3, fp
 80095be:	f7f7 faa1 	bl	8000b04 <__aeabi_dcmpge>
 80095c2:	9e03      	ldr	r6, [sp, #12]
 80095c4:	4637      	mov	r7, r6
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f040 8245 	bne.w	8009a56 <_dtoa_r+0x93e>
 80095cc:	9d01      	ldr	r5, [sp, #4]
 80095ce:	2331      	movs	r3, #49	; 0x31
 80095d0:	f805 3b01 	strb.w	r3, [r5], #1
 80095d4:	9b00      	ldr	r3, [sp, #0]
 80095d6:	3301      	adds	r3, #1
 80095d8:	9300      	str	r3, [sp, #0]
 80095da:	e240      	b.n	8009a5e <_dtoa_r+0x946>
 80095dc:	07f2      	lsls	r2, r6, #31
 80095de:	d505      	bpl.n	80095ec <_dtoa_r+0x4d4>
 80095e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095e4:	f7f7 f808 	bl	80005f8 <__aeabi_dmul>
 80095e8:	3501      	adds	r5, #1
 80095ea:	2301      	movs	r3, #1
 80095ec:	1076      	asrs	r6, r6, #1
 80095ee:	3708      	adds	r7, #8
 80095f0:	e777      	b.n	80094e2 <_dtoa_r+0x3ca>
 80095f2:	2502      	movs	r5, #2
 80095f4:	e779      	b.n	80094ea <_dtoa_r+0x3d2>
 80095f6:	9f00      	ldr	r7, [sp, #0]
 80095f8:	9e03      	ldr	r6, [sp, #12]
 80095fa:	e794      	b.n	8009526 <_dtoa_r+0x40e>
 80095fc:	9901      	ldr	r1, [sp, #4]
 80095fe:	4b4c      	ldr	r3, [pc, #304]	; (8009730 <_dtoa_r+0x618>)
 8009600:	4431      	add	r1, r6
 8009602:	910d      	str	r1, [sp, #52]	; 0x34
 8009604:	9908      	ldr	r1, [sp, #32]
 8009606:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800960a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800960e:	2900      	cmp	r1, #0
 8009610:	d043      	beq.n	800969a <_dtoa_r+0x582>
 8009612:	494d      	ldr	r1, [pc, #308]	; (8009748 <_dtoa_r+0x630>)
 8009614:	2000      	movs	r0, #0
 8009616:	f7f7 f919 	bl	800084c <__aeabi_ddiv>
 800961a:	4652      	mov	r2, sl
 800961c:	465b      	mov	r3, fp
 800961e:	f7f6 fe33 	bl	8000288 <__aeabi_dsub>
 8009622:	9d01      	ldr	r5, [sp, #4]
 8009624:	4682      	mov	sl, r0
 8009626:	468b      	mov	fp, r1
 8009628:	4649      	mov	r1, r9
 800962a:	4640      	mov	r0, r8
 800962c:	f7f7 fa94 	bl	8000b58 <__aeabi_d2iz>
 8009630:	4606      	mov	r6, r0
 8009632:	f7f6 ff77 	bl	8000524 <__aeabi_i2d>
 8009636:	4602      	mov	r2, r0
 8009638:	460b      	mov	r3, r1
 800963a:	4640      	mov	r0, r8
 800963c:	4649      	mov	r1, r9
 800963e:	f7f6 fe23 	bl	8000288 <__aeabi_dsub>
 8009642:	3630      	adds	r6, #48	; 0x30
 8009644:	f805 6b01 	strb.w	r6, [r5], #1
 8009648:	4652      	mov	r2, sl
 800964a:	465b      	mov	r3, fp
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	f7f7 fa44 	bl	8000adc <__aeabi_dcmplt>
 8009654:	2800      	cmp	r0, #0
 8009656:	d163      	bne.n	8009720 <_dtoa_r+0x608>
 8009658:	4642      	mov	r2, r8
 800965a:	464b      	mov	r3, r9
 800965c:	4936      	ldr	r1, [pc, #216]	; (8009738 <_dtoa_r+0x620>)
 800965e:	2000      	movs	r0, #0
 8009660:	f7f6 fe12 	bl	8000288 <__aeabi_dsub>
 8009664:	4652      	mov	r2, sl
 8009666:	465b      	mov	r3, fp
 8009668:	f7f7 fa38 	bl	8000adc <__aeabi_dcmplt>
 800966c:	2800      	cmp	r0, #0
 800966e:	f040 80b5 	bne.w	80097dc <_dtoa_r+0x6c4>
 8009672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009674:	429d      	cmp	r5, r3
 8009676:	d081      	beq.n	800957c <_dtoa_r+0x464>
 8009678:	4b30      	ldr	r3, [pc, #192]	; (800973c <_dtoa_r+0x624>)
 800967a:	2200      	movs	r2, #0
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 ffba 	bl	80005f8 <__aeabi_dmul>
 8009684:	4b2d      	ldr	r3, [pc, #180]	; (800973c <_dtoa_r+0x624>)
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	2200      	movs	r2, #0
 8009690:	f7f6 ffb2 	bl	80005f8 <__aeabi_dmul>
 8009694:	4680      	mov	r8, r0
 8009696:	4689      	mov	r9, r1
 8009698:	e7c6      	b.n	8009628 <_dtoa_r+0x510>
 800969a:	4650      	mov	r0, sl
 800969c:	4659      	mov	r1, fp
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096a4:	9d01      	ldr	r5, [sp, #4]
 80096a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80096a8:	4682      	mov	sl, r0
 80096aa:	468b      	mov	fp, r1
 80096ac:	4649      	mov	r1, r9
 80096ae:	4640      	mov	r0, r8
 80096b0:	f7f7 fa52 	bl	8000b58 <__aeabi_d2iz>
 80096b4:	4606      	mov	r6, r0
 80096b6:	f7f6 ff35 	bl	8000524 <__aeabi_i2d>
 80096ba:	3630      	adds	r6, #48	; 0x30
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 fde0 	bl	8000288 <__aeabi_dsub>
 80096c8:	f805 6b01 	strb.w	r6, [r5], #1
 80096cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096ce:	429d      	cmp	r5, r3
 80096d0:	4680      	mov	r8, r0
 80096d2:	4689      	mov	r9, r1
 80096d4:	f04f 0200 	mov.w	r2, #0
 80096d8:	d124      	bne.n	8009724 <_dtoa_r+0x60c>
 80096da:	4b1b      	ldr	r3, [pc, #108]	; (8009748 <_dtoa_r+0x630>)
 80096dc:	4650      	mov	r0, sl
 80096de:	4659      	mov	r1, fp
 80096e0:	f7f6 fdd4 	bl	800028c <__adddf3>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	4640      	mov	r0, r8
 80096ea:	4649      	mov	r1, r9
 80096ec:	f7f7 fa14 	bl	8000b18 <__aeabi_dcmpgt>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d173      	bne.n	80097dc <_dtoa_r+0x6c4>
 80096f4:	4652      	mov	r2, sl
 80096f6:	465b      	mov	r3, fp
 80096f8:	4913      	ldr	r1, [pc, #76]	; (8009748 <_dtoa_r+0x630>)
 80096fa:	2000      	movs	r0, #0
 80096fc:	f7f6 fdc4 	bl	8000288 <__aeabi_dsub>
 8009700:	4602      	mov	r2, r0
 8009702:	460b      	mov	r3, r1
 8009704:	4640      	mov	r0, r8
 8009706:	4649      	mov	r1, r9
 8009708:	f7f7 f9e8 	bl	8000adc <__aeabi_dcmplt>
 800970c:	2800      	cmp	r0, #0
 800970e:	f43f af35 	beq.w	800957c <_dtoa_r+0x464>
 8009712:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009714:	1e6b      	subs	r3, r5, #1
 8009716:	930f      	str	r3, [sp, #60]	; 0x3c
 8009718:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800971c:	2b30      	cmp	r3, #48	; 0x30
 800971e:	d0f8      	beq.n	8009712 <_dtoa_r+0x5fa>
 8009720:	9700      	str	r7, [sp, #0]
 8009722:	e049      	b.n	80097b8 <_dtoa_r+0x6a0>
 8009724:	4b05      	ldr	r3, [pc, #20]	; (800973c <_dtoa_r+0x624>)
 8009726:	f7f6 ff67 	bl	80005f8 <__aeabi_dmul>
 800972a:	4680      	mov	r8, r0
 800972c:	4689      	mov	r9, r1
 800972e:	e7bd      	b.n	80096ac <_dtoa_r+0x594>
 8009730:	0800c190 	.word	0x0800c190
 8009734:	0800c168 	.word	0x0800c168
 8009738:	3ff00000 	.word	0x3ff00000
 800973c:	40240000 	.word	0x40240000
 8009740:	401c0000 	.word	0x401c0000
 8009744:	40140000 	.word	0x40140000
 8009748:	3fe00000 	.word	0x3fe00000
 800974c:	9d01      	ldr	r5, [sp, #4]
 800974e:	4656      	mov	r6, sl
 8009750:	465f      	mov	r7, fp
 8009752:	4642      	mov	r2, r8
 8009754:	464b      	mov	r3, r9
 8009756:	4630      	mov	r0, r6
 8009758:	4639      	mov	r1, r7
 800975a:	f7f7 f877 	bl	800084c <__aeabi_ddiv>
 800975e:	f7f7 f9fb 	bl	8000b58 <__aeabi_d2iz>
 8009762:	4682      	mov	sl, r0
 8009764:	f7f6 fede 	bl	8000524 <__aeabi_i2d>
 8009768:	4642      	mov	r2, r8
 800976a:	464b      	mov	r3, r9
 800976c:	f7f6 ff44 	bl	80005f8 <__aeabi_dmul>
 8009770:	4602      	mov	r2, r0
 8009772:	460b      	mov	r3, r1
 8009774:	4630      	mov	r0, r6
 8009776:	4639      	mov	r1, r7
 8009778:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800977c:	f7f6 fd84 	bl	8000288 <__aeabi_dsub>
 8009780:	f805 6b01 	strb.w	r6, [r5], #1
 8009784:	9e01      	ldr	r6, [sp, #4]
 8009786:	9f03      	ldr	r7, [sp, #12]
 8009788:	1bae      	subs	r6, r5, r6
 800978a:	42b7      	cmp	r7, r6
 800978c:	4602      	mov	r2, r0
 800978e:	460b      	mov	r3, r1
 8009790:	d135      	bne.n	80097fe <_dtoa_r+0x6e6>
 8009792:	f7f6 fd7b 	bl	800028c <__adddf3>
 8009796:	4642      	mov	r2, r8
 8009798:	464b      	mov	r3, r9
 800979a:	4606      	mov	r6, r0
 800979c:	460f      	mov	r7, r1
 800979e:	f7f7 f9bb 	bl	8000b18 <__aeabi_dcmpgt>
 80097a2:	b9d0      	cbnz	r0, 80097da <_dtoa_r+0x6c2>
 80097a4:	4642      	mov	r2, r8
 80097a6:	464b      	mov	r3, r9
 80097a8:	4630      	mov	r0, r6
 80097aa:	4639      	mov	r1, r7
 80097ac:	f7f7 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80097b0:	b110      	cbz	r0, 80097b8 <_dtoa_r+0x6a0>
 80097b2:	f01a 0f01 	tst.w	sl, #1
 80097b6:	d110      	bne.n	80097da <_dtoa_r+0x6c2>
 80097b8:	4620      	mov	r0, r4
 80097ba:	ee18 1a10 	vmov	r1, s16
 80097be:	f001 f893 	bl	800a8e8 <_Bfree>
 80097c2:	2300      	movs	r3, #0
 80097c4:	9800      	ldr	r0, [sp, #0]
 80097c6:	702b      	strb	r3, [r5, #0]
 80097c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097ca:	3001      	adds	r0, #1
 80097cc:	6018      	str	r0, [r3, #0]
 80097ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f43f acf1 	beq.w	80091b8 <_dtoa_r+0xa0>
 80097d6:	601d      	str	r5, [r3, #0]
 80097d8:	e4ee      	b.n	80091b8 <_dtoa_r+0xa0>
 80097da:	9f00      	ldr	r7, [sp, #0]
 80097dc:	462b      	mov	r3, r5
 80097de:	461d      	mov	r5, r3
 80097e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097e4:	2a39      	cmp	r2, #57	; 0x39
 80097e6:	d106      	bne.n	80097f6 <_dtoa_r+0x6de>
 80097e8:	9a01      	ldr	r2, [sp, #4]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d1f7      	bne.n	80097de <_dtoa_r+0x6c6>
 80097ee:	9901      	ldr	r1, [sp, #4]
 80097f0:	2230      	movs	r2, #48	; 0x30
 80097f2:	3701      	adds	r7, #1
 80097f4:	700a      	strb	r2, [r1, #0]
 80097f6:	781a      	ldrb	r2, [r3, #0]
 80097f8:	3201      	adds	r2, #1
 80097fa:	701a      	strb	r2, [r3, #0]
 80097fc:	e790      	b.n	8009720 <_dtoa_r+0x608>
 80097fe:	4ba6      	ldr	r3, [pc, #664]	; (8009a98 <_dtoa_r+0x980>)
 8009800:	2200      	movs	r2, #0
 8009802:	f7f6 fef9 	bl	80005f8 <__aeabi_dmul>
 8009806:	2200      	movs	r2, #0
 8009808:	2300      	movs	r3, #0
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	f7f7 f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009812:	2800      	cmp	r0, #0
 8009814:	d09d      	beq.n	8009752 <_dtoa_r+0x63a>
 8009816:	e7cf      	b.n	80097b8 <_dtoa_r+0x6a0>
 8009818:	9a08      	ldr	r2, [sp, #32]
 800981a:	2a00      	cmp	r2, #0
 800981c:	f000 80d7 	beq.w	80099ce <_dtoa_r+0x8b6>
 8009820:	9a06      	ldr	r2, [sp, #24]
 8009822:	2a01      	cmp	r2, #1
 8009824:	f300 80ba 	bgt.w	800999c <_dtoa_r+0x884>
 8009828:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800982a:	2a00      	cmp	r2, #0
 800982c:	f000 80b2 	beq.w	8009994 <_dtoa_r+0x87c>
 8009830:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009834:	9e07      	ldr	r6, [sp, #28]
 8009836:	9d04      	ldr	r5, [sp, #16]
 8009838:	9a04      	ldr	r2, [sp, #16]
 800983a:	441a      	add	r2, r3
 800983c:	9204      	str	r2, [sp, #16]
 800983e:	9a05      	ldr	r2, [sp, #20]
 8009840:	2101      	movs	r1, #1
 8009842:	441a      	add	r2, r3
 8009844:	4620      	mov	r0, r4
 8009846:	9205      	str	r2, [sp, #20]
 8009848:	f001 f950 	bl	800aaec <__i2b>
 800984c:	4607      	mov	r7, r0
 800984e:	2d00      	cmp	r5, #0
 8009850:	dd0c      	ble.n	800986c <_dtoa_r+0x754>
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd09      	ble.n	800986c <_dtoa_r+0x754>
 8009858:	42ab      	cmp	r3, r5
 800985a:	9a04      	ldr	r2, [sp, #16]
 800985c:	bfa8      	it	ge
 800985e:	462b      	movge	r3, r5
 8009860:	1ad2      	subs	r2, r2, r3
 8009862:	9204      	str	r2, [sp, #16]
 8009864:	9a05      	ldr	r2, [sp, #20]
 8009866:	1aed      	subs	r5, r5, r3
 8009868:	1ad3      	subs	r3, r2, r3
 800986a:	9305      	str	r3, [sp, #20]
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	b31b      	cbz	r3, 80098b8 <_dtoa_r+0x7a0>
 8009870:	9b08      	ldr	r3, [sp, #32]
 8009872:	2b00      	cmp	r3, #0
 8009874:	f000 80af 	beq.w	80099d6 <_dtoa_r+0x8be>
 8009878:	2e00      	cmp	r6, #0
 800987a:	dd13      	ble.n	80098a4 <_dtoa_r+0x78c>
 800987c:	4639      	mov	r1, r7
 800987e:	4632      	mov	r2, r6
 8009880:	4620      	mov	r0, r4
 8009882:	f001 f9f3 	bl	800ac6c <__pow5mult>
 8009886:	ee18 2a10 	vmov	r2, s16
 800988a:	4601      	mov	r1, r0
 800988c:	4607      	mov	r7, r0
 800988e:	4620      	mov	r0, r4
 8009890:	f001 f942 	bl	800ab18 <__multiply>
 8009894:	ee18 1a10 	vmov	r1, s16
 8009898:	4680      	mov	r8, r0
 800989a:	4620      	mov	r0, r4
 800989c:	f001 f824 	bl	800a8e8 <_Bfree>
 80098a0:	ee08 8a10 	vmov	s16, r8
 80098a4:	9b07      	ldr	r3, [sp, #28]
 80098a6:	1b9a      	subs	r2, r3, r6
 80098a8:	d006      	beq.n	80098b8 <_dtoa_r+0x7a0>
 80098aa:	ee18 1a10 	vmov	r1, s16
 80098ae:	4620      	mov	r0, r4
 80098b0:	f001 f9dc 	bl	800ac6c <__pow5mult>
 80098b4:	ee08 0a10 	vmov	s16, r0
 80098b8:	2101      	movs	r1, #1
 80098ba:	4620      	mov	r0, r4
 80098bc:	f001 f916 	bl	800aaec <__i2b>
 80098c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	4606      	mov	r6, r0
 80098c6:	f340 8088 	ble.w	80099da <_dtoa_r+0x8c2>
 80098ca:	461a      	mov	r2, r3
 80098cc:	4601      	mov	r1, r0
 80098ce:	4620      	mov	r0, r4
 80098d0:	f001 f9cc 	bl	800ac6c <__pow5mult>
 80098d4:	9b06      	ldr	r3, [sp, #24]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	4606      	mov	r6, r0
 80098da:	f340 8081 	ble.w	80099e0 <_dtoa_r+0x8c8>
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	6933      	ldr	r3, [r6, #16]
 80098e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80098e8:	6918      	ldr	r0, [r3, #16]
 80098ea:	f001 f8af 	bl	800aa4c <__hi0bits>
 80098ee:	f1c0 0020 	rsb	r0, r0, #32
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	4418      	add	r0, r3
 80098f6:	f010 001f 	ands.w	r0, r0, #31
 80098fa:	f000 8092 	beq.w	8009a22 <_dtoa_r+0x90a>
 80098fe:	f1c0 0320 	rsb	r3, r0, #32
 8009902:	2b04      	cmp	r3, #4
 8009904:	f340 808a 	ble.w	8009a1c <_dtoa_r+0x904>
 8009908:	f1c0 001c 	rsb	r0, r0, #28
 800990c:	9b04      	ldr	r3, [sp, #16]
 800990e:	4403      	add	r3, r0
 8009910:	9304      	str	r3, [sp, #16]
 8009912:	9b05      	ldr	r3, [sp, #20]
 8009914:	4403      	add	r3, r0
 8009916:	4405      	add	r5, r0
 8009918:	9305      	str	r3, [sp, #20]
 800991a:	9b04      	ldr	r3, [sp, #16]
 800991c:	2b00      	cmp	r3, #0
 800991e:	dd07      	ble.n	8009930 <_dtoa_r+0x818>
 8009920:	ee18 1a10 	vmov	r1, s16
 8009924:	461a      	mov	r2, r3
 8009926:	4620      	mov	r0, r4
 8009928:	f001 f9fa 	bl	800ad20 <__lshift>
 800992c:	ee08 0a10 	vmov	s16, r0
 8009930:	9b05      	ldr	r3, [sp, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	dd05      	ble.n	8009942 <_dtoa_r+0x82a>
 8009936:	4631      	mov	r1, r6
 8009938:	461a      	mov	r2, r3
 800993a:	4620      	mov	r0, r4
 800993c:	f001 f9f0 	bl	800ad20 <__lshift>
 8009940:	4606      	mov	r6, r0
 8009942:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d06e      	beq.n	8009a26 <_dtoa_r+0x90e>
 8009948:	ee18 0a10 	vmov	r0, s16
 800994c:	4631      	mov	r1, r6
 800994e:	f001 fa57 	bl	800ae00 <__mcmp>
 8009952:	2800      	cmp	r0, #0
 8009954:	da67      	bge.n	8009a26 <_dtoa_r+0x90e>
 8009956:	9b00      	ldr	r3, [sp, #0]
 8009958:	3b01      	subs	r3, #1
 800995a:	ee18 1a10 	vmov	r1, s16
 800995e:	9300      	str	r3, [sp, #0]
 8009960:	220a      	movs	r2, #10
 8009962:	2300      	movs	r3, #0
 8009964:	4620      	mov	r0, r4
 8009966:	f000 ffe1 	bl	800a92c <__multadd>
 800996a:	9b08      	ldr	r3, [sp, #32]
 800996c:	ee08 0a10 	vmov	s16, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 81b1 	beq.w	8009cd8 <_dtoa_r+0xbc0>
 8009976:	2300      	movs	r3, #0
 8009978:	4639      	mov	r1, r7
 800997a:	220a      	movs	r2, #10
 800997c:	4620      	mov	r0, r4
 800997e:	f000 ffd5 	bl	800a92c <__multadd>
 8009982:	9b02      	ldr	r3, [sp, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	4607      	mov	r7, r0
 8009988:	f300 808e 	bgt.w	8009aa8 <_dtoa_r+0x990>
 800998c:	9b06      	ldr	r3, [sp, #24]
 800998e:	2b02      	cmp	r3, #2
 8009990:	dc51      	bgt.n	8009a36 <_dtoa_r+0x91e>
 8009992:	e089      	b.n	8009aa8 <_dtoa_r+0x990>
 8009994:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009996:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800999a:	e74b      	b.n	8009834 <_dtoa_r+0x71c>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	1e5e      	subs	r6, r3, #1
 80099a0:	9b07      	ldr	r3, [sp, #28]
 80099a2:	42b3      	cmp	r3, r6
 80099a4:	bfbf      	itttt	lt
 80099a6:	9b07      	ldrlt	r3, [sp, #28]
 80099a8:	9607      	strlt	r6, [sp, #28]
 80099aa:	1af2      	sublt	r2, r6, r3
 80099ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80099ae:	bfb6      	itet	lt
 80099b0:	189b      	addlt	r3, r3, r2
 80099b2:	1b9e      	subge	r6, r3, r6
 80099b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80099b6:	9b03      	ldr	r3, [sp, #12]
 80099b8:	bfb8      	it	lt
 80099ba:	2600      	movlt	r6, #0
 80099bc:	2b00      	cmp	r3, #0
 80099be:	bfb7      	itett	lt
 80099c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80099c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80099c8:	1a9d      	sublt	r5, r3, r2
 80099ca:	2300      	movlt	r3, #0
 80099cc:	e734      	b.n	8009838 <_dtoa_r+0x720>
 80099ce:	9e07      	ldr	r6, [sp, #28]
 80099d0:	9d04      	ldr	r5, [sp, #16]
 80099d2:	9f08      	ldr	r7, [sp, #32]
 80099d4:	e73b      	b.n	800984e <_dtoa_r+0x736>
 80099d6:	9a07      	ldr	r2, [sp, #28]
 80099d8:	e767      	b.n	80098aa <_dtoa_r+0x792>
 80099da:	9b06      	ldr	r3, [sp, #24]
 80099dc:	2b01      	cmp	r3, #1
 80099de:	dc18      	bgt.n	8009a12 <_dtoa_r+0x8fa>
 80099e0:	f1ba 0f00 	cmp.w	sl, #0
 80099e4:	d115      	bne.n	8009a12 <_dtoa_r+0x8fa>
 80099e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ea:	b993      	cbnz	r3, 8009a12 <_dtoa_r+0x8fa>
 80099ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80099f0:	0d1b      	lsrs	r3, r3, #20
 80099f2:	051b      	lsls	r3, r3, #20
 80099f4:	b183      	cbz	r3, 8009a18 <_dtoa_r+0x900>
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	3301      	adds	r3, #1
 80099fa:	9304      	str	r3, [sp, #16]
 80099fc:	9b05      	ldr	r3, [sp, #20]
 80099fe:	3301      	adds	r3, #1
 8009a00:	9305      	str	r3, [sp, #20]
 8009a02:	f04f 0801 	mov.w	r8, #1
 8009a06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	f47f af6a 	bne.w	80098e2 <_dtoa_r+0x7ca>
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e76f      	b.n	80098f2 <_dtoa_r+0x7da>
 8009a12:	f04f 0800 	mov.w	r8, #0
 8009a16:	e7f6      	b.n	8009a06 <_dtoa_r+0x8ee>
 8009a18:	4698      	mov	r8, r3
 8009a1a:	e7f4      	b.n	8009a06 <_dtoa_r+0x8ee>
 8009a1c:	f43f af7d 	beq.w	800991a <_dtoa_r+0x802>
 8009a20:	4618      	mov	r0, r3
 8009a22:	301c      	adds	r0, #28
 8009a24:	e772      	b.n	800990c <_dtoa_r+0x7f4>
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	dc37      	bgt.n	8009a9c <_dtoa_r+0x984>
 8009a2c:	9b06      	ldr	r3, [sp, #24]
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	dd34      	ble.n	8009a9c <_dtoa_r+0x984>
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	9302      	str	r3, [sp, #8]
 8009a36:	9b02      	ldr	r3, [sp, #8]
 8009a38:	b96b      	cbnz	r3, 8009a56 <_dtoa_r+0x93e>
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	2205      	movs	r2, #5
 8009a3e:	4620      	mov	r0, r4
 8009a40:	f000 ff74 	bl	800a92c <__multadd>
 8009a44:	4601      	mov	r1, r0
 8009a46:	4606      	mov	r6, r0
 8009a48:	ee18 0a10 	vmov	r0, s16
 8009a4c:	f001 f9d8 	bl	800ae00 <__mcmp>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f73f adbb 	bgt.w	80095cc <_dtoa_r+0x4b4>
 8009a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a58:	9d01      	ldr	r5, [sp, #4]
 8009a5a:	43db      	mvns	r3, r3
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	f04f 0800 	mov.w	r8, #0
 8009a62:	4631      	mov	r1, r6
 8009a64:	4620      	mov	r0, r4
 8009a66:	f000 ff3f 	bl	800a8e8 <_Bfree>
 8009a6a:	2f00      	cmp	r7, #0
 8009a6c:	f43f aea4 	beq.w	80097b8 <_dtoa_r+0x6a0>
 8009a70:	f1b8 0f00 	cmp.w	r8, #0
 8009a74:	d005      	beq.n	8009a82 <_dtoa_r+0x96a>
 8009a76:	45b8      	cmp	r8, r7
 8009a78:	d003      	beq.n	8009a82 <_dtoa_r+0x96a>
 8009a7a:	4641      	mov	r1, r8
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 ff33 	bl	800a8e8 <_Bfree>
 8009a82:	4639      	mov	r1, r7
 8009a84:	4620      	mov	r0, r4
 8009a86:	f000 ff2f 	bl	800a8e8 <_Bfree>
 8009a8a:	e695      	b.n	80097b8 <_dtoa_r+0x6a0>
 8009a8c:	2600      	movs	r6, #0
 8009a8e:	4637      	mov	r7, r6
 8009a90:	e7e1      	b.n	8009a56 <_dtoa_r+0x93e>
 8009a92:	9700      	str	r7, [sp, #0]
 8009a94:	4637      	mov	r7, r6
 8009a96:	e599      	b.n	80095cc <_dtoa_r+0x4b4>
 8009a98:	40240000 	.word	0x40240000
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 80ca 	beq.w	8009c38 <_dtoa_r+0xb20>
 8009aa4:	9b03      	ldr	r3, [sp, #12]
 8009aa6:	9302      	str	r3, [sp, #8]
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	dd05      	ble.n	8009ab8 <_dtoa_r+0x9a0>
 8009aac:	4639      	mov	r1, r7
 8009aae:	462a      	mov	r2, r5
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f001 f935 	bl	800ad20 <__lshift>
 8009ab6:	4607      	mov	r7, r0
 8009ab8:	f1b8 0f00 	cmp.w	r8, #0
 8009abc:	d05b      	beq.n	8009b76 <_dtoa_r+0xa5e>
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4620      	mov	r0, r4
 8009ac2:	f000 fed1 	bl	800a868 <_Balloc>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	b928      	cbnz	r0, 8009ad6 <_dtoa_r+0x9be>
 8009aca:	4b87      	ldr	r3, [pc, #540]	; (8009ce8 <_dtoa_r+0xbd0>)
 8009acc:	4602      	mov	r2, r0
 8009ace:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009ad2:	f7ff bb3b 	b.w	800914c <_dtoa_r+0x34>
 8009ad6:	693a      	ldr	r2, [r7, #16]
 8009ad8:	3202      	adds	r2, #2
 8009ada:	0092      	lsls	r2, r2, #2
 8009adc:	f107 010c 	add.w	r1, r7, #12
 8009ae0:	300c      	adds	r0, #12
 8009ae2:	f000 feb3 	bl	800a84c <memcpy>
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4620      	mov	r0, r4
 8009aec:	f001 f918 	bl	800ad20 <__lshift>
 8009af0:	9b01      	ldr	r3, [sp, #4]
 8009af2:	f103 0901 	add.w	r9, r3, #1
 8009af6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009afa:	4413      	add	r3, r2
 8009afc:	9305      	str	r3, [sp, #20]
 8009afe:	f00a 0301 	and.w	r3, sl, #1
 8009b02:	46b8      	mov	r8, r7
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	4607      	mov	r7, r0
 8009b08:	4631      	mov	r1, r6
 8009b0a:	ee18 0a10 	vmov	r0, s16
 8009b0e:	f7ff fa75 	bl	8008ffc <quorem>
 8009b12:	4641      	mov	r1, r8
 8009b14:	9002      	str	r0, [sp, #8]
 8009b16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009b1a:	ee18 0a10 	vmov	r0, s16
 8009b1e:	f001 f96f 	bl	800ae00 <__mcmp>
 8009b22:	463a      	mov	r2, r7
 8009b24:	9003      	str	r0, [sp, #12]
 8009b26:	4631      	mov	r1, r6
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f001 f985 	bl	800ae38 <__mdiff>
 8009b2e:	68c2      	ldr	r2, [r0, #12]
 8009b30:	f109 3bff 	add.w	fp, r9, #4294967295
 8009b34:	4605      	mov	r5, r0
 8009b36:	bb02      	cbnz	r2, 8009b7a <_dtoa_r+0xa62>
 8009b38:	4601      	mov	r1, r0
 8009b3a:	ee18 0a10 	vmov	r0, s16
 8009b3e:	f001 f95f 	bl	800ae00 <__mcmp>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4629      	mov	r1, r5
 8009b46:	4620      	mov	r0, r4
 8009b48:	9207      	str	r2, [sp, #28]
 8009b4a:	f000 fecd 	bl	800a8e8 <_Bfree>
 8009b4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009b52:	ea43 0102 	orr.w	r1, r3, r2
 8009b56:	9b04      	ldr	r3, [sp, #16]
 8009b58:	430b      	orrs	r3, r1
 8009b5a:	464d      	mov	r5, r9
 8009b5c:	d10f      	bne.n	8009b7e <_dtoa_r+0xa66>
 8009b5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009b62:	d02a      	beq.n	8009bba <_dtoa_r+0xaa2>
 8009b64:	9b03      	ldr	r3, [sp, #12]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd02      	ble.n	8009b70 <_dtoa_r+0xa58>
 8009b6a:	9b02      	ldr	r3, [sp, #8]
 8009b6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009b70:	f88b a000 	strb.w	sl, [fp]
 8009b74:	e775      	b.n	8009a62 <_dtoa_r+0x94a>
 8009b76:	4638      	mov	r0, r7
 8009b78:	e7ba      	b.n	8009af0 <_dtoa_r+0x9d8>
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	e7e2      	b.n	8009b44 <_dtoa_r+0xa2c>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	db04      	blt.n	8009b8e <_dtoa_r+0xa76>
 8009b84:	9906      	ldr	r1, [sp, #24]
 8009b86:	430b      	orrs	r3, r1
 8009b88:	9904      	ldr	r1, [sp, #16]
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	d122      	bne.n	8009bd4 <_dtoa_r+0xabc>
 8009b8e:	2a00      	cmp	r2, #0
 8009b90:	ddee      	ble.n	8009b70 <_dtoa_r+0xa58>
 8009b92:	ee18 1a10 	vmov	r1, s16
 8009b96:	2201      	movs	r2, #1
 8009b98:	4620      	mov	r0, r4
 8009b9a:	f001 f8c1 	bl	800ad20 <__lshift>
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	ee08 0a10 	vmov	s16, r0
 8009ba4:	f001 f92c 	bl	800ae00 <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dc03      	bgt.n	8009bb4 <_dtoa_r+0xa9c>
 8009bac:	d1e0      	bne.n	8009b70 <_dtoa_r+0xa58>
 8009bae:	f01a 0f01 	tst.w	sl, #1
 8009bb2:	d0dd      	beq.n	8009b70 <_dtoa_r+0xa58>
 8009bb4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bb8:	d1d7      	bne.n	8009b6a <_dtoa_r+0xa52>
 8009bba:	2339      	movs	r3, #57	; 0x39
 8009bbc:	f88b 3000 	strb.w	r3, [fp]
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	461d      	mov	r5, r3
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009bca:	2a39      	cmp	r2, #57	; 0x39
 8009bcc:	d071      	beq.n	8009cb2 <_dtoa_r+0xb9a>
 8009bce:	3201      	adds	r2, #1
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	e746      	b.n	8009a62 <_dtoa_r+0x94a>
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	dd07      	ble.n	8009be8 <_dtoa_r+0xad0>
 8009bd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009bdc:	d0ed      	beq.n	8009bba <_dtoa_r+0xaa2>
 8009bde:	f10a 0301 	add.w	r3, sl, #1
 8009be2:	f88b 3000 	strb.w	r3, [fp]
 8009be6:	e73c      	b.n	8009a62 <_dtoa_r+0x94a>
 8009be8:	9b05      	ldr	r3, [sp, #20]
 8009bea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009bee:	4599      	cmp	r9, r3
 8009bf0:	d047      	beq.n	8009c82 <_dtoa_r+0xb6a>
 8009bf2:	ee18 1a10 	vmov	r1, s16
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 fe96 	bl	800a92c <__multadd>
 8009c00:	45b8      	cmp	r8, r7
 8009c02:	ee08 0a10 	vmov	s16, r0
 8009c06:	f04f 0300 	mov.w	r3, #0
 8009c0a:	f04f 020a 	mov.w	r2, #10
 8009c0e:	4641      	mov	r1, r8
 8009c10:	4620      	mov	r0, r4
 8009c12:	d106      	bne.n	8009c22 <_dtoa_r+0xb0a>
 8009c14:	f000 fe8a 	bl	800a92c <__multadd>
 8009c18:	4680      	mov	r8, r0
 8009c1a:	4607      	mov	r7, r0
 8009c1c:	f109 0901 	add.w	r9, r9, #1
 8009c20:	e772      	b.n	8009b08 <_dtoa_r+0x9f0>
 8009c22:	f000 fe83 	bl	800a92c <__multadd>
 8009c26:	4639      	mov	r1, r7
 8009c28:	4680      	mov	r8, r0
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 fe7c 	bl	800a92c <__multadd>
 8009c34:	4607      	mov	r7, r0
 8009c36:	e7f1      	b.n	8009c1c <_dtoa_r+0xb04>
 8009c38:	9b03      	ldr	r3, [sp, #12]
 8009c3a:	9302      	str	r3, [sp, #8]
 8009c3c:	9d01      	ldr	r5, [sp, #4]
 8009c3e:	ee18 0a10 	vmov	r0, s16
 8009c42:	4631      	mov	r1, r6
 8009c44:	f7ff f9da 	bl	8008ffc <quorem>
 8009c48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c4c:	9b01      	ldr	r3, [sp, #4]
 8009c4e:	f805 ab01 	strb.w	sl, [r5], #1
 8009c52:	1aea      	subs	r2, r5, r3
 8009c54:	9b02      	ldr	r3, [sp, #8]
 8009c56:	4293      	cmp	r3, r2
 8009c58:	dd09      	ble.n	8009c6e <_dtoa_r+0xb56>
 8009c5a:	ee18 1a10 	vmov	r1, s16
 8009c5e:	2300      	movs	r3, #0
 8009c60:	220a      	movs	r2, #10
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 fe62 	bl	800a92c <__multadd>
 8009c68:	ee08 0a10 	vmov	s16, r0
 8009c6c:	e7e7      	b.n	8009c3e <_dtoa_r+0xb26>
 8009c6e:	9b02      	ldr	r3, [sp, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	bfc8      	it	gt
 8009c74:	461d      	movgt	r5, r3
 8009c76:	9b01      	ldr	r3, [sp, #4]
 8009c78:	bfd8      	it	le
 8009c7a:	2501      	movle	r5, #1
 8009c7c:	441d      	add	r5, r3
 8009c7e:	f04f 0800 	mov.w	r8, #0
 8009c82:	ee18 1a10 	vmov	r1, s16
 8009c86:	2201      	movs	r2, #1
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f001 f849 	bl	800ad20 <__lshift>
 8009c8e:	4631      	mov	r1, r6
 8009c90:	ee08 0a10 	vmov	s16, r0
 8009c94:	f001 f8b4 	bl	800ae00 <__mcmp>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	dc91      	bgt.n	8009bc0 <_dtoa_r+0xaa8>
 8009c9c:	d102      	bne.n	8009ca4 <_dtoa_r+0xb8c>
 8009c9e:	f01a 0f01 	tst.w	sl, #1
 8009ca2:	d18d      	bne.n	8009bc0 <_dtoa_r+0xaa8>
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cac:	2a30      	cmp	r2, #48	; 0x30
 8009cae:	d0fa      	beq.n	8009ca6 <_dtoa_r+0xb8e>
 8009cb0:	e6d7      	b.n	8009a62 <_dtoa_r+0x94a>
 8009cb2:	9a01      	ldr	r2, [sp, #4]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d184      	bne.n	8009bc2 <_dtoa_r+0xaaa>
 8009cb8:	9b00      	ldr	r3, [sp, #0]
 8009cba:	3301      	adds	r3, #1
 8009cbc:	9300      	str	r3, [sp, #0]
 8009cbe:	2331      	movs	r3, #49	; 0x31
 8009cc0:	7013      	strb	r3, [r2, #0]
 8009cc2:	e6ce      	b.n	8009a62 <_dtoa_r+0x94a>
 8009cc4:	4b09      	ldr	r3, [pc, #36]	; (8009cec <_dtoa_r+0xbd4>)
 8009cc6:	f7ff ba95 	b.w	80091f4 <_dtoa_r+0xdc>
 8009cca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f47f aa6e 	bne.w	80091ae <_dtoa_r+0x96>
 8009cd2:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <_dtoa_r+0xbd8>)
 8009cd4:	f7ff ba8e 	b.w	80091f4 <_dtoa_r+0xdc>
 8009cd8:	9b02      	ldr	r3, [sp, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	dcae      	bgt.n	8009c3c <_dtoa_r+0xb24>
 8009cde:	9b06      	ldr	r3, [sp, #24]
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	f73f aea8 	bgt.w	8009a36 <_dtoa_r+0x91e>
 8009ce6:	e7a9      	b.n	8009c3c <_dtoa_r+0xb24>
 8009ce8:	0800c018 	.word	0x0800c018
 8009cec:	0800be1c 	.word	0x0800be1c
 8009cf0:	0800bf99 	.word	0x0800bf99

08009cf4 <__sflush_r>:
 8009cf4:	898a      	ldrh	r2, [r1, #12]
 8009cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfa:	4605      	mov	r5, r0
 8009cfc:	0710      	lsls	r0, r2, #28
 8009cfe:	460c      	mov	r4, r1
 8009d00:	d458      	bmi.n	8009db4 <__sflush_r+0xc0>
 8009d02:	684b      	ldr	r3, [r1, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc05      	bgt.n	8009d14 <__sflush_r+0x20>
 8009d08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc02      	bgt.n	8009d14 <__sflush_r+0x20>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d16:	2e00      	cmp	r6, #0
 8009d18:	d0f9      	beq.n	8009d0e <__sflush_r+0x1a>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d20:	682f      	ldr	r7, [r5, #0]
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	d032      	beq.n	8009d8c <__sflush_r+0x98>
 8009d26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	075a      	lsls	r2, r3, #29
 8009d2c:	d505      	bpl.n	8009d3a <__sflush_r+0x46>
 8009d2e:	6863      	ldr	r3, [r4, #4]
 8009d30:	1ac0      	subs	r0, r0, r3
 8009d32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d34:	b10b      	cbz	r3, 8009d3a <__sflush_r+0x46>
 8009d36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d38:	1ac0      	subs	r0, r0, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b0      	blx	r6
 8009d46:	1c43      	adds	r3, r0, #1
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	d106      	bne.n	8009d5a <__sflush_r+0x66>
 8009d4c:	6829      	ldr	r1, [r5, #0]
 8009d4e:	291d      	cmp	r1, #29
 8009d50:	d82c      	bhi.n	8009dac <__sflush_r+0xb8>
 8009d52:	4a2a      	ldr	r2, [pc, #168]	; (8009dfc <__sflush_r+0x108>)
 8009d54:	40ca      	lsrs	r2, r1
 8009d56:	07d6      	lsls	r6, r2, #31
 8009d58:	d528      	bpl.n	8009dac <__sflush_r+0xb8>
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	6062      	str	r2, [r4, #4]
 8009d5e:	04d9      	lsls	r1, r3, #19
 8009d60:	6922      	ldr	r2, [r4, #16]
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	d504      	bpl.n	8009d70 <__sflush_r+0x7c>
 8009d66:	1c42      	adds	r2, r0, #1
 8009d68:	d101      	bne.n	8009d6e <__sflush_r+0x7a>
 8009d6a:	682b      	ldr	r3, [r5, #0]
 8009d6c:	b903      	cbnz	r3, 8009d70 <__sflush_r+0x7c>
 8009d6e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d72:	602f      	str	r7, [r5, #0]
 8009d74:	2900      	cmp	r1, #0
 8009d76:	d0ca      	beq.n	8009d0e <__sflush_r+0x1a>
 8009d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	d002      	beq.n	8009d86 <__sflush_r+0x92>
 8009d80:	4628      	mov	r0, r5
 8009d82:	f001 fa49 	bl	800b218 <_free_r>
 8009d86:	2000      	movs	r0, #0
 8009d88:	6360      	str	r0, [r4, #52]	; 0x34
 8009d8a:	e7c1      	b.n	8009d10 <__sflush_r+0x1c>
 8009d8c:	6a21      	ldr	r1, [r4, #32]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b0      	blx	r6
 8009d94:	1c41      	adds	r1, r0, #1
 8009d96:	d1c7      	bne.n	8009d28 <__sflush_r+0x34>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0c4      	beq.n	8009d28 <__sflush_r+0x34>
 8009d9e:	2b1d      	cmp	r3, #29
 8009da0:	d001      	beq.n	8009da6 <__sflush_r+0xb2>
 8009da2:	2b16      	cmp	r3, #22
 8009da4:	d101      	bne.n	8009daa <__sflush_r+0xb6>
 8009da6:	602f      	str	r7, [r5, #0]
 8009da8:	e7b1      	b.n	8009d0e <__sflush_r+0x1a>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db0:	81a3      	strh	r3, [r4, #12]
 8009db2:	e7ad      	b.n	8009d10 <__sflush_r+0x1c>
 8009db4:	690f      	ldr	r7, [r1, #16]
 8009db6:	2f00      	cmp	r7, #0
 8009db8:	d0a9      	beq.n	8009d0e <__sflush_r+0x1a>
 8009dba:	0793      	lsls	r3, r2, #30
 8009dbc:	680e      	ldr	r6, [r1, #0]
 8009dbe:	bf08      	it	eq
 8009dc0:	694b      	ldreq	r3, [r1, #20]
 8009dc2:	600f      	str	r7, [r1, #0]
 8009dc4:	bf18      	it	ne
 8009dc6:	2300      	movne	r3, #0
 8009dc8:	eba6 0807 	sub.w	r8, r6, r7
 8009dcc:	608b      	str	r3, [r1, #8]
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	dd9c      	ble.n	8009d0e <__sflush_r+0x1a>
 8009dd4:	6a21      	ldr	r1, [r4, #32]
 8009dd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009dd8:	4643      	mov	r3, r8
 8009dda:	463a      	mov	r2, r7
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b0      	blx	r6
 8009de0:	2800      	cmp	r0, #0
 8009de2:	dc06      	bgt.n	8009df2 <__sflush_r+0xfe>
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	f04f 30ff 	mov.w	r0, #4294967295
 8009df0:	e78e      	b.n	8009d10 <__sflush_r+0x1c>
 8009df2:	4407      	add	r7, r0
 8009df4:	eba8 0800 	sub.w	r8, r8, r0
 8009df8:	e7e9      	b.n	8009dce <__sflush_r+0xda>
 8009dfa:	bf00      	nop
 8009dfc:	20400001 	.word	0x20400001

08009e00 <_fflush_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	4605      	mov	r5, r0
 8009e06:	460c      	mov	r4, r1
 8009e08:	b913      	cbnz	r3, 8009e10 <_fflush_r+0x10>
 8009e0a:	2500      	movs	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	bd38      	pop	{r3, r4, r5, pc}
 8009e10:	b118      	cbz	r0, 8009e1a <_fflush_r+0x1a>
 8009e12:	6983      	ldr	r3, [r0, #24]
 8009e14:	b90b      	cbnz	r3, 8009e1a <_fflush_r+0x1a>
 8009e16:	f000 f887 	bl	8009f28 <__sinit>
 8009e1a:	4b14      	ldr	r3, [pc, #80]	; (8009e6c <_fflush_r+0x6c>)
 8009e1c:	429c      	cmp	r4, r3
 8009e1e:	d11b      	bne.n	8009e58 <_fflush_r+0x58>
 8009e20:	686c      	ldr	r4, [r5, #4]
 8009e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d0ef      	beq.n	8009e0a <_fflush_r+0xa>
 8009e2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e2c:	07d0      	lsls	r0, r2, #31
 8009e2e:	d404      	bmi.n	8009e3a <_fflush_r+0x3a>
 8009e30:	0599      	lsls	r1, r3, #22
 8009e32:	d402      	bmi.n	8009e3a <_fflush_r+0x3a>
 8009e34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e36:	f000 fc88 	bl	800a74a <__retarget_lock_acquire_recursive>
 8009e3a:	4628      	mov	r0, r5
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	f7ff ff59 	bl	8009cf4 <__sflush_r>
 8009e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e44:	07da      	lsls	r2, r3, #31
 8009e46:	4605      	mov	r5, r0
 8009e48:	d4e0      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	059b      	lsls	r3, r3, #22
 8009e4e:	d4dd      	bmi.n	8009e0c <_fflush_r+0xc>
 8009e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e52:	f000 fc7b 	bl	800a74c <__retarget_lock_release_recursive>
 8009e56:	e7d9      	b.n	8009e0c <_fflush_r+0xc>
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <_fflush_r+0x70>)
 8009e5a:	429c      	cmp	r4, r3
 8009e5c:	d101      	bne.n	8009e62 <_fflush_r+0x62>
 8009e5e:	68ac      	ldr	r4, [r5, #8]
 8009e60:	e7df      	b.n	8009e22 <_fflush_r+0x22>
 8009e62:	4b04      	ldr	r3, [pc, #16]	; (8009e74 <_fflush_r+0x74>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	bf08      	it	eq
 8009e68:	68ec      	ldreq	r4, [r5, #12]
 8009e6a:	e7da      	b.n	8009e22 <_fflush_r+0x22>
 8009e6c:	0800c04c 	.word	0x0800c04c
 8009e70:	0800c06c 	.word	0x0800c06c
 8009e74:	0800c02c 	.word	0x0800c02c

08009e78 <std>:
 8009e78:	2300      	movs	r3, #0
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e86:	6083      	str	r3, [r0, #8]
 8009e88:	8181      	strh	r1, [r0, #12]
 8009e8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e8c:	81c2      	strh	r2, [r0, #14]
 8009e8e:	6183      	str	r3, [r0, #24]
 8009e90:	4619      	mov	r1, r3
 8009e92:	2208      	movs	r2, #8
 8009e94:	305c      	adds	r0, #92	; 0x5c
 8009e96:	f7fd fa05 	bl	80072a4 <memset>
 8009e9a:	4b05      	ldr	r3, [pc, #20]	; (8009eb0 <std+0x38>)
 8009e9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e9e:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <std+0x3c>)
 8009ea0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ea2:	4b05      	ldr	r3, [pc, #20]	; (8009eb8 <std+0x40>)
 8009ea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ea6:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <std+0x44>)
 8009ea8:	6224      	str	r4, [r4, #32]
 8009eaa:	6323      	str	r3, [r4, #48]	; 0x30
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800b979 	.word	0x0800b979
 8009eb4:	0800b99b 	.word	0x0800b99b
 8009eb8:	0800b9d3 	.word	0x0800b9d3
 8009ebc:	0800b9f7 	.word	0x0800b9f7

08009ec0 <_cleanup_r>:
 8009ec0:	4901      	ldr	r1, [pc, #4]	; (8009ec8 <_cleanup_r+0x8>)
 8009ec2:	f000 b8af 	b.w	800a024 <_fwalk_reent>
 8009ec6:	bf00      	nop
 8009ec8:	08009e01 	.word	0x08009e01

08009ecc <__sfmoreglue>:
 8009ecc:	b570      	push	{r4, r5, r6, lr}
 8009ece:	2268      	movs	r2, #104	; 0x68
 8009ed0:	1e4d      	subs	r5, r1, #1
 8009ed2:	4355      	muls	r5, r2
 8009ed4:	460e      	mov	r6, r1
 8009ed6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eda:	f001 fa09 	bl	800b2f0 <_malloc_r>
 8009ede:	4604      	mov	r4, r0
 8009ee0:	b140      	cbz	r0, 8009ef4 <__sfmoreglue+0x28>
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	e9c0 1600 	strd	r1, r6, [r0]
 8009ee8:	300c      	adds	r0, #12
 8009eea:	60a0      	str	r0, [r4, #8]
 8009eec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ef0:	f7fd f9d8 	bl	80072a4 <memset>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	bd70      	pop	{r4, r5, r6, pc}

08009ef8 <__sfp_lock_acquire>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__sfp_lock_acquire+0x8>)
 8009efa:	f000 bc26 	b.w	800a74a <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	2000040d 	.word	0x2000040d

08009f04 <__sfp_lock_release>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__sfp_lock_release+0x8>)
 8009f06:	f000 bc21 	b.w	800a74c <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	2000040d 	.word	0x2000040d

08009f10 <__sinit_lock_acquire>:
 8009f10:	4801      	ldr	r0, [pc, #4]	; (8009f18 <__sinit_lock_acquire+0x8>)
 8009f12:	f000 bc1a 	b.w	800a74a <__retarget_lock_acquire_recursive>
 8009f16:	bf00      	nop
 8009f18:	2000040e 	.word	0x2000040e

08009f1c <__sinit_lock_release>:
 8009f1c:	4801      	ldr	r0, [pc, #4]	; (8009f24 <__sinit_lock_release+0x8>)
 8009f1e:	f000 bc15 	b.w	800a74c <__retarget_lock_release_recursive>
 8009f22:	bf00      	nop
 8009f24:	2000040e 	.word	0x2000040e

08009f28 <__sinit>:
 8009f28:	b510      	push	{r4, lr}
 8009f2a:	4604      	mov	r4, r0
 8009f2c:	f7ff fff0 	bl	8009f10 <__sinit_lock_acquire>
 8009f30:	69a3      	ldr	r3, [r4, #24]
 8009f32:	b11b      	cbz	r3, 8009f3c <__sinit+0x14>
 8009f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f38:	f7ff bff0 	b.w	8009f1c <__sinit_lock_release>
 8009f3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f40:	6523      	str	r3, [r4, #80]	; 0x50
 8009f42:	4b13      	ldr	r3, [pc, #76]	; (8009f90 <__sinit+0x68>)
 8009f44:	4a13      	ldr	r2, [pc, #76]	; (8009f94 <__sinit+0x6c>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f4a:	42a3      	cmp	r3, r4
 8009f4c:	bf04      	itt	eq
 8009f4e:	2301      	moveq	r3, #1
 8009f50:	61a3      	streq	r3, [r4, #24]
 8009f52:	4620      	mov	r0, r4
 8009f54:	f000 f820 	bl	8009f98 <__sfp>
 8009f58:	6060      	str	r0, [r4, #4]
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 f81c 	bl	8009f98 <__sfp>
 8009f60:	60a0      	str	r0, [r4, #8]
 8009f62:	4620      	mov	r0, r4
 8009f64:	f000 f818 	bl	8009f98 <__sfp>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	60e0      	str	r0, [r4, #12]
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	6860      	ldr	r0, [r4, #4]
 8009f70:	f7ff ff82 	bl	8009e78 <std>
 8009f74:	68a0      	ldr	r0, [r4, #8]
 8009f76:	2201      	movs	r2, #1
 8009f78:	2109      	movs	r1, #9
 8009f7a:	f7ff ff7d 	bl	8009e78 <std>
 8009f7e:	68e0      	ldr	r0, [r4, #12]
 8009f80:	2202      	movs	r2, #2
 8009f82:	2112      	movs	r1, #18
 8009f84:	f7ff ff78 	bl	8009e78 <std>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	61a3      	str	r3, [r4, #24]
 8009f8c:	e7d2      	b.n	8009f34 <__sinit+0xc>
 8009f8e:	bf00      	nop
 8009f90:	0800be08 	.word	0x0800be08
 8009f94:	08009ec1 	.word	0x08009ec1

08009f98 <__sfp>:
 8009f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9a:	4607      	mov	r7, r0
 8009f9c:	f7ff ffac 	bl	8009ef8 <__sfp_lock_acquire>
 8009fa0:	4b1e      	ldr	r3, [pc, #120]	; (800a01c <__sfp+0x84>)
 8009fa2:	681e      	ldr	r6, [r3, #0]
 8009fa4:	69b3      	ldr	r3, [r6, #24]
 8009fa6:	b913      	cbnz	r3, 8009fae <__sfp+0x16>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f7ff ffbd 	bl	8009f28 <__sinit>
 8009fae:	3648      	adds	r6, #72	; 0x48
 8009fb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	d503      	bpl.n	8009fc0 <__sfp+0x28>
 8009fb8:	6833      	ldr	r3, [r6, #0]
 8009fba:	b30b      	cbz	r3, 800a000 <__sfp+0x68>
 8009fbc:	6836      	ldr	r6, [r6, #0]
 8009fbe:	e7f7      	b.n	8009fb0 <__sfp+0x18>
 8009fc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fc4:	b9d5      	cbnz	r5, 8009ffc <__sfp+0x64>
 8009fc6:	4b16      	ldr	r3, [pc, #88]	; (800a020 <__sfp+0x88>)
 8009fc8:	60e3      	str	r3, [r4, #12]
 8009fca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fce:	6665      	str	r5, [r4, #100]	; 0x64
 8009fd0:	f000 fbba 	bl	800a748 <__retarget_lock_init_recursive>
 8009fd4:	f7ff ff96 	bl	8009f04 <__sfp_lock_release>
 8009fd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fe0:	6025      	str	r5, [r4, #0]
 8009fe2:	61a5      	str	r5, [r4, #24]
 8009fe4:	2208      	movs	r2, #8
 8009fe6:	4629      	mov	r1, r5
 8009fe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fec:	f7fd f95a 	bl	80072a4 <memset>
 8009ff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ffc:	3468      	adds	r4, #104	; 0x68
 8009ffe:	e7d9      	b.n	8009fb4 <__sfp+0x1c>
 800a000:	2104      	movs	r1, #4
 800a002:	4638      	mov	r0, r7
 800a004:	f7ff ff62 	bl	8009ecc <__sfmoreglue>
 800a008:	4604      	mov	r4, r0
 800a00a:	6030      	str	r0, [r6, #0]
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d1d5      	bne.n	8009fbc <__sfp+0x24>
 800a010:	f7ff ff78 	bl	8009f04 <__sfp_lock_release>
 800a014:	230c      	movs	r3, #12
 800a016:	603b      	str	r3, [r7, #0]
 800a018:	e7ee      	b.n	8009ff8 <__sfp+0x60>
 800a01a:	bf00      	nop
 800a01c:	0800be08 	.word	0x0800be08
 800a020:	ffff0001 	.word	0xffff0001

0800a024 <_fwalk_reent>:
 800a024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a028:	4606      	mov	r6, r0
 800a02a:	4688      	mov	r8, r1
 800a02c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a030:	2700      	movs	r7, #0
 800a032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a036:	f1b9 0901 	subs.w	r9, r9, #1
 800a03a:	d505      	bpl.n	800a048 <_fwalk_reent+0x24>
 800a03c:	6824      	ldr	r4, [r4, #0]
 800a03e:	2c00      	cmp	r4, #0
 800a040:	d1f7      	bne.n	800a032 <_fwalk_reent+0xe>
 800a042:	4638      	mov	r0, r7
 800a044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a048:	89ab      	ldrh	r3, [r5, #12]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d907      	bls.n	800a05e <_fwalk_reent+0x3a>
 800a04e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a052:	3301      	adds	r3, #1
 800a054:	d003      	beq.n	800a05e <_fwalk_reent+0x3a>
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	47c0      	blx	r8
 800a05c:	4307      	orrs	r7, r0
 800a05e:	3568      	adds	r5, #104	; 0x68
 800a060:	e7e9      	b.n	800a036 <_fwalk_reent+0x12>

0800a062 <rshift>:
 800a062:	6903      	ldr	r3, [r0, #16]
 800a064:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a06c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a070:	f100 0414 	add.w	r4, r0, #20
 800a074:	dd45      	ble.n	800a102 <rshift+0xa0>
 800a076:	f011 011f 	ands.w	r1, r1, #31
 800a07a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a07e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a082:	d10c      	bne.n	800a09e <rshift+0x3c>
 800a084:	f100 0710 	add.w	r7, r0, #16
 800a088:	4629      	mov	r1, r5
 800a08a:	42b1      	cmp	r1, r6
 800a08c:	d334      	bcc.n	800a0f8 <rshift+0x96>
 800a08e:	1a9b      	subs	r3, r3, r2
 800a090:	009b      	lsls	r3, r3, #2
 800a092:	1eea      	subs	r2, r5, #3
 800a094:	4296      	cmp	r6, r2
 800a096:	bf38      	it	cc
 800a098:	2300      	movcc	r3, #0
 800a09a:	4423      	add	r3, r4
 800a09c:	e015      	b.n	800a0ca <rshift+0x68>
 800a09e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0a2:	f1c1 0820 	rsb	r8, r1, #32
 800a0a6:	40cf      	lsrs	r7, r1
 800a0a8:	f105 0e04 	add.w	lr, r5, #4
 800a0ac:	46a1      	mov	r9, r4
 800a0ae:	4576      	cmp	r6, lr
 800a0b0:	46f4      	mov	ip, lr
 800a0b2:	d815      	bhi.n	800a0e0 <rshift+0x7e>
 800a0b4:	1a9a      	subs	r2, r3, r2
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	3a04      	subs	r2, #4
 800a0ba:	3501      	adds	r5, #1
 800a0bc:	42ae      	cmp	r6, r5
 800a0be:	bf38      	it	cc
 800a0c0:	2200      	movcc	r2, #0
 800a0c2:	18a3      	adds	r3, r4, r2
 800a0c4:	50a7      	str	r7, [r4, r2]
 800a0c6:	b107      	cbz	r7, 800a0ca <rshift+0x68>
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	1b1a      	subs	r2, r3, r4
 800a0cc:	42a3      	cmp	r3, r4
 800a0ce:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0d2:	bf08      	it	eq
 800a0d4:	2300      	moveq	r3, #0
 800a0d6:	6102      	str	r2, [r0, #16]
 800a0d8:	bf08      	it	eq
 800a0da:	6143      	streq	r3, [r0, #20]
 800a0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0e0:	f8dc c000 	ldr.w	ip, [ip]
 800a0e4:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0e8:	ea4c 0707 	orr.w	r7, ip, r7
 800a0ec:	f849 7b04 	str.w	r7, [r9], #4
 800a0f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0f4:	40cf      	lsrs	r7, r1
 800a0f6:	e7da      	b.n	800a0ae <rshift+0x4c>
 800a0f8:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0fc:	f847 cf04 	str.w	ip, [r7, #4]!
 800a100:	e7c3      	b.n	800a08a <rshift+0x28>
 800a102:	4623      	mov	r3, r4
 800a104:	e7e1      	b.n	800a0ca <rshift+0x68>

0800a106 <__hexdig_fun>:
 800a106:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a10a:	2b09      	cmp	r3, #9
 800a10c:	d802      	bhi.n	800a114 <__hexdig_fun+0xe>
 800a10e:	3820      	subs	r0, #32
 800a110:	b2c0      	uxtb	r0, r0
 800a112:	4770      	bx	lr
 800a114:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a118:	2b05      	cmp	r3, #5
 800a11a:	d801      	bhi.n	800a120 <__hexdig_fun+0x1a>
 800a11c:	3847      	subs	r0, #71	; 0x47
 800a11e:	e7f7      	b.n	800a110 <__hexdig_fun+0xa>
 800a120:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a124:	2b05      	cmp	r3, #5
 800a126:	d801      	bhi.n	800a12c <__hexdig_fun+0x26>
 800a128:	3827      	subs	r0, #39	; 0x27
 800a12a:	e7f1      	b.n	800a110 <__hexdig_fun+0xa>
 800a12c:	2000      	movs	r0, #0
 800a12e:	4770      	bx	lr

0800a130 <__gethex>:
 800a130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a134:	ed2d 8b02 	vpush	{d8}
 800a138:	b089      	sub	sp, #36	; 0x24
 800a13a:	ee08 0a10 	vmov	s16, r0
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	4bb4      	ldr	r3, [pc, #720]	; (800a414 <__gethex+0x2e4>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	4618      	mov	r0, r3
 800a148:	468b      	mov	fp, r1
 800a14a:	4690      	mov	r8, r2
 800a14c:	f7f6 f840 	bl	80001d0 <strlen>
 800a150:	9b01      	ldr	r3, [sp, #4]
 800a152:	f8db 2000 	ldr.w	r2, [fp]
 800a156:	4403      	add	r3, r0
 800a158:	4682      	mov	sl, r0
 800a15a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a15e:	9305      	str	r3, [sp, #20]
 800a160:	1c93      	adds	r3, r2, #2
 800a162:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a166:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a16a:	32fe      	adds	r2, #254	; 0xfe
 800a16c:	18d1      	adds	r1, r2, r3
 800a16e:	461f      	mov	r7, r3
 800a170:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a174:	9100      	str	r1, [sp, #0]
 800a176:	2830      	cmp	r0, #48	; 0x30
 800a178:	d0f8      	beq.n	800a16c <__gethex+0x3c>
 800a17a:	f7ff ffc4 	bl	800a106 <__hexdig_fun>
 800a17e:	4604      	mov	r4, r0
 800a180:	2800      	cmp	r0, #0
 800a182:	d13a      	bne.n	800a1fa <__gethex+0xca>
 800a184:	9901      	ldr	r1, [sp, #4]
 800a186:	4652      	mov	r2, sl
 800a188:	4638      	mov	r0, r7
 800a18a:	f001 fc38 	bl	800b9fe <strncmp>
 800a18e:	4605      	mov	r5, r0
 800a190:	2800      	cmp	r0, #0
 800a192:	d168      	bne.n	800a266 <__gethex+0x136>
 800a194:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a198:	eb07 060a 	add.w	r6, r7, sl
 800a19c:	f7ff ffb3 	bl	800a106 <__hexdig_fun>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d062      	beq.n	800a26a <__gethex+0x13a>
 800a1a4:	4633      	mov	r3, r6
 800a1a6:	7818      	ldrb	r0, [r3, #0]
 800a1a8:	2830      	cmp	r0, #48	; 0x30
 800a1aa:	461f      	mov	r7, r3
 800a1ac:	f103 0301 	add.w	r3, r3, #1
 800a1b0:	d0f9      	beq.n	800a1a6 <__gethex+0x76>
 800a1b2:	f7ff ffa8 	bl	800a106 <__hexdig_fun>
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	fab0 f480 	clz	r4, r0
 800a1bc:	0964      	lsrs	r4, r4, #5
 800a1be:	4635      	mov	r5, r6
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	463a      	mov	r2, r7
 800a1c4:	4616      	mov	r6, r2
 800a1c6:	3201      	adds	r2, #1
 800a1c8:	7830      	ldrb	r0, [r6, #0]
 800a1ca:	f7ff ff9c 	bl	800a106 <__hexdig_fun>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	d1f8      	bne.n	800a1c4 <__gethex+0x94>
 800a1d2:	9901      	ldr	r1, [sp, #4]
 800a1d4:	4652      	mov	r2, sl
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f001 fc11 	bl	800b9fe <strncmp>
 800a1dc:	b980      	cbnz	r0, 800a200 <__gethex+0xd0>
 800a1de:	b94d      	cbnz	r5, 800a1f4 <__gethex+0xc4>
 800a1e0:	eb06 050a 	add.w	r5, r6, sl
 800a1e4:	462a      	mov	r2, r5
 800a1e6:	4616      	mov	r6, r2
 800a1e8:	3201      	adds	r2, #1
 800a1ea:	7830      	ldrb	r0, [r6, #0]
 800a1ec:	f7ff ff8b 	bl	800a106 <__hexdig_fun>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d1f8      	bne.n	800a1e6 <__gethex+0xb6>
 800a1f4:	1bad      	subs	r5, r5, r6
 800a1f6:	00ad      	lsls	r5, r5, #2
 800a1f8:	e004      	b.n	800a204 <__gethex+0xd4>
 800a1fa:	2400      	movs	r4, #0
 800a1fc:	4625      	mov	r5, r4
 800a1fe:	e7e0      	b.n	800a1c2 <__gethex+0x92>
 800a200:	2d00      	cmp	r5, #0
 800a202:	d1f7      	bne.n	800a1f4 <__gethex+0xc4>
 800a204:	7833      	ldrb	r3, [r6, #0]
 800a206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a20a:	2b50      	cmp	r3, #80	; 0x50
 800a20c:	d13b      	bne.n	800a286 <__gethex+0x156>
 800a20e:	7873      	ldrb	r3, [r6, #1]
 800a210:	2b2b      	cmp	r3, #43	; 0x2b
 800a212:	d02c      	beq.n	800a26e <__gethex+0x13e>
 800a214:	2b2d      	cmp	r3, #45	; 0x2d
 800a216:	d02e      	beq.n	800a276 <__gethex+0x146>
 800a218:	1c71      	adds	r1, r6, #1
 800a21a:	f04f 0900 	mov.w	r9, #0
 800a21e:	7808      	ldrb	r0, [r1, #0]
 800a220:	f7ff ff71 	bl	800a106 <__hexdig_fun>
 800a224:	1e43      	subs	r3, r0, #1
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b18      	cmp	r3, #24
 800a22a:	d82c      	bhi.n	800a286 <__gethex+0x156>
 800a22c:	f1a0 0210 	sub.w	r2, r0, #16
 800a230:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a234:	f7ff ff67 	bl	800a106 <__hexdig_fun>
 800a238:	1e43      	subs	r3, r0, #1
 800a23a:	b2db      	uxtb	r3, r3
 800a23c:	2b18      	cmp	r3, #24
 800a23e:	d91d      	bls.n	800a27c <__gethex+0x14c>
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	d000      	beq.n	800a248 <__gethex+0x118>
 800a246:	4252      	negs	r2, r2
 800a248:	4415      	add	r5, r2
 800a24a:	f8cb 1000 	str.w	r1, [fp]
 800a24e:	b1e4      	cbz	r4, 800a28a <__gethex+0x15a>
 800a250:	9b00      	ldr	r3, [sp, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	bf14      	ite	ne
 800a256:	2700      	movne	r7, #0
 800a258:	2706      	moveq	r7, #6
 800a25a:	4638      	mov	r0, r7
 800a25c:	b009      	add	sp, #36	; 0x24
 800a25e:	ecbd 8b02 	vpop	{d8}
 800a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a266:	463e      	mov	r6, r7
 800a268:	4625      	mov	r5, r4
 800a26a:	2401      	movs	r4, #1
 800a26c:	e7ca      	b.n	800a204 <__gethex+0xd4>
 800a26e:	f04f 0900 	mov.w	r9, #0
 800a272:	1cb1      	adds	r1, r6, #2
 800a274:	e7d3      	b.n	800a21e <__gethex+0xee>
 800a276:	f04f 0901 	mov.w	r9, #1
 800a27a:	e7fa      	b.n	800a272 <__gethex+0x142>
 800a27c:	230a      	movs	r3, #10
 800a27e:	fb03 0202 	mla	r2, r3, r2, r0
 800a282:	3a10      	subs	r2, #16
 800a284:	e7d4      	b.n	800a230 <__gethex+0x100>
 800a286:	4631      	mov	r1, r6
 800a288:	e7df      	b.n	800a24a <__gethex+0x11a>
 800a28a:	1bf3      	subs	r3, r6, r7
 800a28c:	3b01      	subs	r3, #1
 800a28e:	4621      	mov	r1, r4
 800a290:	2b07      	cmp	r3, #7
 800a292:	dc0b      	bgt.n	800a2ac <__gethex+0x17c>
 800a294:	ee18 0a10 	vmov	r0, s16
 800a298:	f000 fae6 	bl	800a868 <_Balloc>
 800a29c:	4604      	mov	r4, r0
 800a29e:	b940      	cbnz	r0, 800a2b2 <__gethex+0x182>
 800a2a0:	4b5d      	ldr	r3, [pc, #372]	; (800a418 <__gethex+0x2e8>)
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	21de      	movs	r1, #222	; 0xde
 800a2a6:	485d      	ldr	r0, [pc, #372]	; (800a41c <__gethex+0x2ec>)
 800a2a8:	f001 fbdc 	bl	800ba64 <__assert_func>
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	105b      	asrs	r3, r3, #1
 800a2b0:	e7ee      	b.n	800a290 <__gethex+0x160>
 800a2b2:	f100 0914 	add.w	r9, r0, #20
 800a2b6:	f04f 0b00 	mov.w	fp, #0
 800a2ba:	f1ca 0301 	rsb	r3, sl, #1
 800a2be:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2c2:	f8cd b000 	str.w	fp, [sp]
 800a2c6:	9306      	str	r3, [sp, #24]
 800a2c8:	42b7      	cmp	r7, r6
 800a2ca:	d340      	bcc.n	800a34e <__gethex+0x21e>
 800a2cc:	9802      	ldr	r0, [sp, #8]
 800a2ce:	9b00      	ldr	r3, [sp, #0]
 800a2d0:	f840 3b04 	str.w	r3, [r0], #4
 800a2d4:	eba0 0009 	sub.w	r0, r0, r9
 800a2d8:	1080      	asrs	r0, r0, #2
 800a2da:	0146      	lsls	r6, r0, #5
 800a2dc:	6120      	str	r0, [r4, #16]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 fbb4 	bl	800aa4c <__hi0bits>
 800a2e4:	1a30      	subs	r0, r6, r0
 800a2e6:	f8d8 6000 	ldr.w	r6, [r8]
 800a2ea:	42b0      	cmp	r0, r6
 800a2ec:	dd63      	ble.n	800a3b6 <__gethex+0x286>
 800a2ee:	1b87      	subs	r7, r0, r6
 800a2f0:	4639      	mov	r1, r7
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 ff58 	bl	800b1a8 <__any_on>
 800a2f8:	4682      	mov	sl, r0
 800a2fa:	b1a8      	cbz	r0, 800a328 <__gethex+0x1f8>
 800a2fc:	1e7b      	subs	r3, r7, #1
 800a2fe:	1159      	asrs	r1, r3, #5
 800a300:	f003 021f 	and.w	r2, r3, #31
 800a304:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a308:	f04f 0a01 	mov.w	sl, #1
 800a30c:	fa0a f202 	lsl.w	r2, sl, r2
 800a310:	420a      	tst	r2, r1
 800a312:	d009      	beq.n	800a328 <__gethex+0x1f8>
 800a314:	4553      	cmp	r3, sl
 800a316:	dd05      	ble.n	800a324 <__gethex+0x1f4>
 800a318:	1eb9      	subs	r1, r7, #2
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 ff44 	bl	800b1a8 <__any_on>
 800a320:	2800      	cmp	r0, #0
 800a322:	d145      	bne.n	800a3b0 <__gethex+0x280>
 800a324:	f04f 0a02 	mov.w	sl, #2
 800a328:	4639      	mov	r1, r7
 800a32a:	4620      	mov	r0, r4
 800a32c:	f7ff fe99 	bl	800a062 <rshift>
 800a330:	443d      	add	r5, r7
 800a332:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a336:	42ab      	cmp	r3, r5
 800a338:	da4c      	bge.n	800a3d4 <__gethex+0x2a4>
 800a33a:	ee18 0a10 	vmov	r0, s16
 800a33e:	4621      	mov	r1, r4
 800a340:	f000 fad2 	bl	800a8e8 <_Bfree>
 800a344:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a346:	2300      	movs	r3, #0
 800a348:	6013      	str	r3, [r2, #0]
 800a34a:	27a3      	movs	r7, #163	; 0xa3
 800a34c:	e785      	b.n	800a25a <__gethex+0x12a>
 800a34e:	1e73      	subs	r3, r6, #1
 800a350:	9a05      	ldr	r2, [sp, #20]
 800a352:	9303      	str	r3, [sp, #12]
 800a354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a358:	4293      	cmp	r3, r2
 800a35a:	d019      	beq.n	800a390 <__gethex+0x260>
 800a35c:	f1bb 0f20 	cmp.w	fp, #32
 800a360:	d107      	bne.n	800a372 <__gethex+0x242>
 800a362:	9b02      	ldr	r3, [sp, #8]
 800a364:	9a00      	ldr	r2, [sp, #0]
 800a366:	f843 2b04 	str.w	r2, [r3], #4
 800a36a:	9302      	str	r3, [sp, #8]
 800a36c:	2300      	movs	r3, #0
 800a36e:	9300      	str	r3, [sp, #0]
 800a370:	469b      	mov	fp, r3
 800a372:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a376:	f7ff fec6 	bl	800a106 <__hexdig_fun>
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	f000 000f 	and.w	r0, r0, #15
 800a380:	fa00 f00b 	lsl.w	r0, r0, fp
 800a384:	4303      	orrs	r3, r0
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	f10b 0b04 	add.w	fp, fp, #4
 800a38c:	9b03      	ldr	r3, [sp, #12]
 800a38e:	e00d      	b.n	800a3ac <__gethex+0x27c>
 800a390:	9b03      	ldr	r3, [sp, #12]
 800a392:	9a06      	ldr	r2, [sp, #24]
 800a394:	4413      	add	r3, r2
 800a396:	42bb      	cmp	r3, r7
 800a398:	d3e0      	bcc.n	800a35c <__gethex+0x22c>
 800a39a:	4618      	mov	r0, r3
 800a39c:	9901      	ldr	r1, [sp, #4]
 800a39e:	9307      	str	r3, [sp, #28]
 800a3a0:	4652      	mov	r2, sl
 800a3a2:	f001 fb2c 	bl	800b9fe <strncmp>
 800a3a6:	9b07      	ldr	r3, [sp, #28]
 800a3a8:	2800      	cmp	r0, #0
 800a3aa:	d1d7      	bne.n	800a35c <__gethex+0x22c>
 800a3ac:	461e      	mov	r6, r3
 800a3ae:	e78b      	b.n	800a2c8 <__gethex+0x198>
 800a3b0:	f04f 0a03 	mov.w	sl, #3
 800a3b4:	e7b8      	b.n	800a328 <__gethex+0x1f8>
 800a3b6:	da0a      	bge.n	800a3ce <__gethex+0x29e>
 800a3b8:	1a37      	subs	r7, r6, r0
 800a3ba:	4621      	mov	r1, r4
 800a3bc:	ee18 0a10 	vmov	r0, s16
 800a3c0:	463a      	mov	r2, r7
 800a3c2:	f000 fcad 	bl	800ad20 <__lshift>
 800a3c6:	1bed      	subs	r5, r5, r7
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	f100 0914 	add.w	r9, r0, #20
 800a3ce:	f04f 0a00 	mov.w	sl, #0
 800a3d2:	e7ae      	b.n	800a332 <__gethex+0x202>
 800a3d4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3d8:	42a8      	cmp	r0, r5
 800a3da:	dd72      	ble.n	800a4c2 <__gethex+0x392>
 800a3dc:	1b45      	subs	r5, r0, r5
 800a3de:	42ae      	cmp	r6, r5
 800a3e0:	dc36      	bgt.n	800a450 <__gethex+0x320>
 800a3e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d02a      	beq.n	800a440 <__gethex+0x310>
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d02c      	beq.n	800a448 <__gethex+0x318>
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d11c      	bne.n	800a42c <__gethex+0x2fc>
 800a3f2:	42ae      	cmp	r6, r5
 800a3f4:	d11a      	bne.n	800a42c <__gethex+0x2fc>
 800a3f6:	2e01      	cmp	r6, #1
 800a3f8:	d112      	bne.n	800a420 <__gethex+0x2f0>
 800a3fa:	9a04      	ldr	r2, [sp, #16]
 800a3fc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a400:	6013      	str	r3, [r2, #0]
 800a402:	2301      	movs	r3, #1
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	f8c9 3000 	str.w	r3, [r9]
 800a40a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a40c:	2762      	movs	r7, #98	; 0x62
 800a40e:	601c      	str	r4, [r3, #0]
 800a410:	e723      	b.n	800a25a <__gethex+0x12a>
 800a412:	bf00      	nop
 800a414:	0800c0f4 	.word	0x0800c0f4
 800a418:	0800c018 	.word	0x0800c018
 800a41c:	0800c08c 	.word	0x0800c08c
 800a420:	1e71      	subs	r1, r6, #1
 800a422:	4620      	mov	r0, r4
 800a424:	f000 fec0 	bl	800b1a8 <__any_on>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d1e6      	bne.n	800a3fa <__gethex+0x2ca>
 800a42c:	ee18 0a10 	vmov	r0, s16
 800a430:	4621      	mov	r1, r4
 800a432:	f000 fa59 	bl	800a8e8 <_Bfree>
 800a436:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a438:	2300      	movs	r3, #0
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	2750      	movs	r7, #80	; 0x50
 800a43e:	e70c      	b.n	800a25a <__gethex+0x12a>
 800a440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a442:	2b00      	cmp	r3, #0
 800a444:	d1f2      	bne.n	800a42c <__gethex+0x2fc>
 800a446:	e7d8      	b.n	800a3fa <__gethex+0x2ca>
 800a448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1d5      	bne.n	800a3fa <__gethex+0x2ca>
 800a44e:	e7ed      	b.n	800a42c <__gethex+0x2fc>
 800a450:	1e6f      	subs	r7, r5, #1
 800a452:	f1ba 0f00 	cmp.w	sl, #0
 800a456:	d131      	bne.n	800a4bc <__gethex+0x38c>
 800a458:	b127      	cbz	r7, 800a464 <__gethex+0x334>
 800a45a:	4639      	mov	r1, r7
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fea3 	bl	800b1a8 <__any_on>
 800a462:	4682      	mov	sl, r0
 800a464:	117b      	asrs	r3, r7, #5
 800a466:	2101      	movs	r1, #1
 800a468:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a46c:	f007 071f 	and.w	r7, r7, #31
 800a470:	fa01 f707 	lsl.w	r7, r1, r7
 800a474:	421f      	tst	r7, r3
 800a476:	4629      	mov	r1, r5
 800a478:	4620      	mov	r0, r4
 800a47a:	bf18      	it	ne
 800a47c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a480:	1b76      	subs	r6, r6, r5
 800a482:	f7ff fdee 	bl	800a062 <rshift>
 800a486:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a48a:	2702      	movs	r7, #2
 800a48c:	f1ba 0f00 	cmp.w	sl, #0
 800a490:	d048      	beq.n	800a524 <__gethex+0x3f4>
 800a492:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a496:	2b02      	cmp	r3, #2
 800a498:	d015      	beq.n	800a4c6 <__gethex+0x396>
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d017      	beq.n	800a4ce <__gethex+0x39e>
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	d109      	bne.n	800a4b6 <__gethex+0x386>
 800a4a2:	f01a 0f02 	tst.w	sl, #2
 800a4a6:	d006      	beq.n	800a4b6 <__gethex+0x386>
 800a4a8:	f8d9 0000 	ldr.w	r0, [r9]
 800a4ac:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4b0:	f01a 0f01 	tst.w	sl, #1
 800a4b4:	d10e      	bne.n	800a4d4 <__gethex+0x3a4>
 800a4b6:	f047 0710 	orr.w	r7, r7, #16
 800a4ba:	e033      	b.n	800a524 <__gethex+0x3f4>
 800a4bc:	f04f 0a01 	mov.w	sl, #1
 800a4c0:	e7d0      	b.n	800a464 <__gethex+0x334>
 800a4c2:	2701      	movs	r7, #1
 800a4c4:	e7e2      	b.n	800a48c <__gethex+0x35c>
 800a4c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4c8:	f1c3 0301 	rsb	r3, r3, #1
 800a4cc:	9315      	str	r3, [sp, #84]	; 0x54
 800a4ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d0f0      	beq.n	800a4b6 <__gethex+0x386>
 800a4d4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4d8:	f104 0314 	add.w	r3, r4, #20
 800a4dc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4e0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4e4:	f04f 0c00 	mov.w	ip, #0
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4ee:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4f2:	d01c      	beq.n	800a52e <__gethex+0x3fe>
 800a4f4:	3201      	adds	r2, #1
 800a4f6:	6002      	str	r2, [r0, #0]
 800a4f8:	2f02      	cmp	r7, #2
 800a4fa:	f104 0314 	add.w	r3, r4, #20
 800a4fe:	d13f      	bne.n	800a580 <__gethex+0x450>
 800a500:	f8d8 2000 	ldr.w	r2, [r8]
 800a504:	3a01      	subs	r2, #1
 800a506:	42b2      	cmp	r2, r6
 800a508:	d10a      	bne.n	800a520 <__gethex+0x3f0>
 800a50a:	1171      	asrs	r1, r6, #5
 800a50c:	2201      	movs	r2, #1
 800a50e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a512:	f006 061f 	and.w	r6, r6, #31
 800a516:	fa02 f606 	lsl.w	r6, r2, r6
 800a51a:	421e      	tst	r6, r3
 800a51c:	bf18      	it	ne
 800a51e:	4617      	movne	r7, r2
 800a520:	f047 0720 	orr.w	r7, r7, #32
 800a524:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a526:	601c      	str	r4, [r3, #0]
 800a528:	9b04      	ldr	r3, [sp, #16]
 800a52a:	601d      	str	r5, [r3, #0]
 800a52c:	e695      	b.n	800a25a <__gethex+0x12a>
 800a52e:	4299      	cmp	r1, r3
 800a530:	f843 cc04 	str.w	ip, [r3, #-4]
 800a534:	d8d8      	bhi.n	800a4e8 <__gethex+0x3b8>
 800a536:	68a3      	ldr	r3, [r4, #8]
 800a538:	459b      	cmp	fp, r3
 800a53a:	db19      	blt.n	800a570 <__gethex+0x440>
 800a53c:	6861      	ldr	r1, [r4, #4]
 800a53e:	ee18 0a10 	vmov	r0, s16
 800a542:	3101      	adds	r1, #1
 800a544:	f000 f990 	bl	800a868 <_Balloc>
 800a548:	4681      	mov	r9, r0
 800a54a:	b918      	cbnz	r0, 800a554 <__gethex+0x424>
 800a54c:	4b1a      	ldr	r3, [pc, #104]	; (800a5b8 <__gethex+0x488>)
 800a54e:	4602      	mov	r2, r0
 800a550:	2184      	movs	r1, #132	; 0x84
 800a552:	e6a8      	b.n	800a2a6 <__gethex+0x176>
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	3202      	adds	r2, #2
 800a558:	f104 010c 	add.w	r1, r4, #12
 800a55c:	0092      	lsls	r2, r2, #2
 800a55e:	300c      	adds	r0, #12
 800a560:	f000 f974 	bl	800a84c <memcpy>
 800a564:	4621      	mov	r1, r4
 800a566:	ee18 0a10 	vmov	r0, s16
 800a56a:	f000 f9bd 	bl	800a8e8 <_Bfree>
 800a56e:	464c      	mov	r4, r9
 800a570:	6923      	ldr	r3, [r4, #16]
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a578:	6122      	str	r2, [r4, #16]
 800a57a:	2201      	movs	r2, #1
 800a57c:	615a      	str	r2, [r3, #20]
 800a57e:	e7bb      	b.n	800a4f8 <__gethex+0x3c8>
 800a580:	6922      	ldr	r2, [r4, #16]
 800a582:	455a      	cmp	r2, fp
 800a584:	dd0b      	ble.n	800a59e <__gethex+0x46e>
 800a586:	2101      	movs	r1, #1
 800a588:	4620      	mov	r0, r4
 800a58a:	f7ff fd6a 	bl	800a062 <rshift>
 800a58e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a592:	3501      	adds	r5, #1
 800a594:	42ab      	cmp	r3, r5
 800a596:	f6ff aed0 	blt.w	800a33a <__gethex+0x20a>
 800a59a:	2701      	movs	r7, #1
 800a59c:	e7c0      	b.n	800a520 <__gethex+0x3f0>
 800a59e:	f016 061f 	ands.w	r6, r6, #31
 800a5a2:	d0fa      	beq.n	800a59a <__gethex+0x46a>
 800a5a4:	4453      	add	r3, sl
 800a5a6:	f1c6 0620 	rsb	r6, r6, #32
 800a5aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a5ae:	f000 fa4d 	bl	800aa4c <__hi0bits>
 800a5b2:	42b0      	cmp	r0, r6
 800a5b4:	dbe7      	blt.n	800a586 <__gethex+0x456>
 800a5b6:	e7f0      	b.n	800a59a <__gethex+0x46a>
 800a5b8:	0800c018 	.word	0x0800c018

0800a5bc <L_shift>:
 800a5bc:	f1c2 0208 	rsb	r2, r2, #8
 800a5c0:	0092      	lsls	r2, r2, #2
 800a5c2:	b570      	push	{r4, r5, r6, lr}
 800a5c4:	f1c2 0620 	rsb	r6, r2, #32
 800a5c8:	6843      	ldr	r3, [r0, #4]
 800a5ca:	6804      	ldr	r4, [r0, #0]
 800a5cc:	fa03 f506 	lsl.w	r5, r3, r6
 800a5d0:	432c      	orrs	r4, r5
 800a5d2:	40d3      	lsrs	r3, r2
 800a5d4:	6004      	str	r4, [r0, #0]
 800a5d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5da:	4288      	cmp	r0, r1
 800a5dc:	d3f4      	bcc.n	800a5c8 <L_shift+0xc>
 800a5de:	bd70      	pop	{r4, r5, r6, pc}

0800a5e0 <__match>:
 800a5e0:	b530      	push	{r4, r5, lr}
 800a5e2:	6803      	ldr	r3, [r0, #0]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5ea:	b914      	cbnz	r4, 800a5f2 <__match+0x12>
 800a5ec:	6003      	str	r3, [r0, #0]
 800a5ee:	2001      	movs	r0, #1
 800a5f0:	bd30      	pop	{r4, r5, pc}
 800a5f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5fa:	2d19      	cmp	r5, #25
 800a5fc:	bf98      	it	ls
 800a5fe:	3220      	addls	r2, #32
 800a600:	42a2      	cmp	r2, r4
 800a602:	d0f0      	beq.n	800a5e6 <__match+0x6>
 800a604:	2000      	movs	r0, #0
 800a606:	e7f3      	b.n	800a5f0 <__match+0x10>

0800a608 <__hexnan>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	680b      	ldr	r3, [r1, #0]
 800a60e:	115e      	asrs	r6, r3, #5
 800a610:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a614:	f013 031f 	ands.w	r3, r3, #31
 800a618:	b087      	sub	sp, #28
 800a61a:	bf18      	it	ne
 800a61c:	3604      	addne	r6, #4
 800a61e:	2500      	movs	r5, #0
 800a620:	1f37      	subs	r7, r6, #4
 800a622:	4690      	mov	r8, r2
 800a624:	6802      	ldr	r2, [r0, #0]
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	4682      	mov	sl, r0
 800a62a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a62e:	46b9      	mov	r9, r7
 800a630:	463c      	mov	r4, r7
 800a632:	9502      	str	r5, [sp, #8]
 800a634:	46ab      	mov	fp, r5
 800a636:	7851      	ldrb	r1, [r2, #1]
 800a638:	1c53      	adds	r3, r2, #1
 800a63a:	9303      	str	r3, [sp, #12]
 800a63c:	b341      	cbz	r1, 800a690 <__hexnan+0x88>
 800a63e:	4608      	mov	r0, r1
 800a640:	9205      	str	r2, [sp, #20]
 800a642:	9104      	str	r1, [sp, #16]
 800a644:	f7ff fd5f 	bl	800a106 <__hexdig_fun>
 800a648:	2800      	cmp	r0, #0
 800a64a:	d14f      	bne.n	800a6ec <__hexnan+0xe4>
 800a64c:	9904      	ldr	r1, [sp, #16]
 800a64e:	9a05      	ldr	r2, [sp, #20]
 800a650:	2920      	cmp	r1, #32
 800a652:	d818      	bhi.n	800a686 <__hexnan+0x7e>
 800a654:	9b02      	ldr	r3, [sp, #8]
 800a656:	459b      	cmp	fp, r3
 800a658:	dd13      	ble.n	800a682 <__hexnan+0x7a>
 800a65a:	454c      	cmp	r4, r9
 800a65c:	d206      	bcs.n	800a66c <__hexnan+0x64>
 800a65e:	2d07      	cmp	r5, #7
 800a660:	dc04      	bgt.n	800a66c <__hexnan+0x64>
 800a662:	462a      	mov	r2, r5
 800a664:	4649      	mov	r1, r9
 800a666:	4620      	mov	r0, r4
 800a668:	f7ff ffa8 	bl	800a5bc <L_shift>
 800a66c:	4544      	cmp	r4, r8
 800a66e:	d950      	bls.n	800a712 <__hexnan+0x10a>
 800a670:	2300      	movs	r3, #0
 800a672:	f1a4 0904 	sub.w	r9, r4, #4
 800a676:	f844 3c04 	str.w	r3, [r4, #-4]
 800a67a:	f8cd b008 	str.w	fp, [sp, #8]
 800a67e:	464c      	mov	r4, r9
 800a680:	461d      	mov	r5, r3
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	e7d7      	b.n	800a636 <__hexnan+0x2e>
 800a686:	2929      	cmp	r1, #41	; 0x29
 800a688:	d156      	bne.n	800a738 <__hexnan+0x130>
 800a68a:	3202      	adds	r2, #2
 800a68c:	f8ca 2000 	str.w	r2, [sl]
 800a690:	f1bb 0f00 	cmp.w	fp, #0
 800a694:	d050      	beq.n	800a738 <__hexnan+0x130>
 800a696:	454c      	cmp	r4, r9
 800a698:	d206      	bcs.n	800a6a8 <__hexnan+0xa0>
 800a69a:	2d07      	cmp	r5, #7
 800a69c:	dc04      	bgt.n	800a6a8 <__hexnan+0xa0>
 800a69e:	462a      	mov	r2, r5
 800a6a0:	4649      	mov	r1, r9
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	f7ff ff8a 	bl	800a5bc <L_shift>
 800a6a8:	4544      	cmp	r4, r8
 800a6aa:	d934      	bls.n	800a716 <__hexnan+0x10e>
 800a6ac:	f1a8 0204 	sub.w	r2, r8, #4
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6ba:	429f      	cmp	r7, r3
 800a6bc:	d2f9      	bcs.n	800a6b2 <__hexnan+0xaa>
 800a6be:	1b3b      	subs	r3, r7, r4
 800a6c0:	f023 0303 	bic.w	r3, r3, #3
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	3401      	adds	r4, #1
 800a6c8:	3e03      	subs	r6, #3
 800a6ca:	42b4      	cmp	r4, r6
 800a6cc:	bf88      	it	hi
 800a6ce:	2304      	movhi	r3, #4
 800a6d0:	4443      	add	r3, r8
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f843 2b04 	str.w	r2, [r3], #4
 800a6d8:	429f      	cmp	r7, r3
 800a6da:	d2fb      	bcs.n	800a6d4 <__hexnan+0xcc>
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	b91b      	cbnz	r3, 800a6e8 <__hexnan+0xe0>
 800a6e0:	4547      	cmp	r7, r8
 800a6e2:	d127      	bne.n	800a734 <__hexnan+0x12c>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	603b      	str	r3, [r7, #0]
 800a6e8:	2005      	movs	r0, #5
 800a6ea:	e026      	b.n	800a73a <__hexnan+0x132>
 800a6ec:	3501      	adds	r5, #1
 800a6ee:	2d08      	cmp	r5, #8
 800a6f0:	f10b 0b01 	add.w	fp, fp, #1
 800a6f4:	dd06      	ble.n	800a704 <__hexnan+0xfc>
 800a6f6:	4544      	cmp	r4, r8
 800a6f8:	d9c3      	bls.n	800a682 <__hexnan+0x7a>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f844 3c04 	str.w	r3, [r4, #-4]
 800a700:	2501      	movs	r5, #1
 800a702:	3c04      	subs	r4, #4
 800a704:	6822      	ldr	r2, [r4, #0]
 800a706:	f000 000f 	and.w	r0, r0, #15
 800a70a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a70e:	6022      	str	r2, [r4, #0]
 800a710:	e7b7      	b.n	800a682 <__hexnan+0x7a>
 800a712:	2508      	movs	r5, #8
 800a714:	e7b5      	b.n	800a682 <__hexnan+0x7a>
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d0df      	beq.n	800a6dc <__hexnan+0xd4>
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295
 800a720:	f1c3 0320 	rsb	r3, r3, #32
 800a724:	fa22 f303 	lsr.w	r3, r2, r3
 800a728:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a72c:	401a      	ands	r2, r3
 800a72e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a732:	e7d3      	b.n	800a6dc <__hexnan+0xd4>
 800a734:	3f04      	subs	r7, #4
 800a736:	e7d1      	b.n	800a6dc <__hexnan+0xd4>
 800a738:	2004      	movs	r0, #4
 800a73a:	b007      	add	sp, #28
 800a73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a740 <_localeconv_r>:
 800a740:	4800      	ldr	r0, [pc, #0]	; (800a744 <_localeconv_r+0x4>)
 800a742:	4770      	bx	lr
 800a744:	20000168 	.word	0x20000168

0800a748 <__retarget_lock_init_recursive>:
 800a748:	4770      	bx	lr

0800a74a <__retarget_lock_acquire_recursive>:
 800a74a:	4770      	bx	lr

0800a74c <__retarget_lock_release_recursive>:
 800a74c:	4770      	bx	lr

0800a74e <__swhatbuf_r>:
 800a74e:	b570      	push	{r4, r5, r6, lr}
 800a750:	460e      	mov	r6, r1
 800a752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a756:	2900      	cmp	r1, #0
 800a758:	b096      	sub	sp, #88	; 0x58
 800a75a:	4614      	mov	r4, r2
 800a75c:	461d      	mov	r5, r3
 800a75e:	da08      	bge.n	800a772 <__swhatbuf_r+0x24>
 800a760:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	602a      	str	r2, [r5, #0]
 800a768:	061a      	lsls	r2, r3, #24
 800a76a:	d410      	bmi.n	800a78e <__swhatbuf_r+0x40>
 800a76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a770:	e00e      	b.n	800a790 <__swhatbuf_r+0x42>
 800a772:	466a      	mov	r2, sp
 800a774:	f001 f9b6 	bl	800bae4 <_fstat_r>
 800a778:	2800      	cmp	r0, #0
 800a77a:	dbf1      	blt.n	800a760 <__swhatbuf_r+0x12>
 800a77c:	9a01      	ldr	r2, [sp, #4]
 800a77e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a782:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a786:	425a      	negs	r2, r3
 800a788:	415a      	adcs	r2, r3
 800a78a:	602a      	str	r2, [r5, #0]
 800a78c:	e7ee      	b.n	800a76c <__swhatbuf_r+0x1e>
 800a78e:	2340      	movs	r3, #64	; 0x40
 800a790:	2000      	movs	r0, #0
 800a792:	6023      	str	r3, [r4, #0]
 800a794:	b016      	add	sp, #88	; 0x58
 800a796:	bd70      	pop	{r4, r5, r6, pc}

0800a798 <__smakebuf_r>:
 800a798:	898b      	ldrh	r3, [r1, #12]
 800a79a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a79c:	079d      	lsls	r5, r3, #30
 800a79e:	4606      	mov	r6, r0
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	d507      	bpl.n	800a7b4 <__smakebuf_r+0x1c>
 800a7a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	6123      	str	r3, [r4, #16]
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	6163      	str	r3, [r4, #20]
 800a7b0:	b002      	add	sp, #8
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
 800a7b4:	ab01      	add	r3, sp, #4
 800a7b6:	466a      	mov	r2, sp
 800a7b8:	f7ff ffc9 	bl	800a74e <__swhatbuf_r>
 800a7bc:	9900      	ldr	r1, [sp, #0]
 800a7be:	4605      	mov	r5, r0
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f000 fd95 	bl	800b2f0 <_malloc_r>
 800a7c6:	b948      	cbnz	r0, 800a7dc <__smakebuf_r+0x44>
 800a7c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7cc:	059a      	lsls	r2, r3, #22
 800a7ce:	d4ef      	bmi.n	800a7b0 <__smakebuf_r+0x18>
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	f043 0302 	orr.w	r3, r3, #2
 800a7d8:	81a3      	strh	r3, [r4, #12]
 800a7da:	e7e3      	b.n	800a7a4 <__smakebuf_r+0xc>
 800a7dc:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <__smakebuf_r+0x7c>)
 800a7de:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7e0:	89a3      	ldrh	r3, [r4, #12]
 800a7e2:	6020      	str	r0, [r4, #0]
 800a7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e8:	81a3      	strh	r3, [r4, #12]
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	6163      	str	r3, [r4, #20]
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	6120      	str	r0, [r4, #16]
 800a7f2:	b15b      	cbz	r3, 800a80c <__smakebuf_r+0x74>
 800a7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	f001 f985 	bl	800bb08 <_isatty_r>
 800a7fe:	b128      	cbz	r0, 800a80c <__smakebuf_r+0x74>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	f023 0303 	bic.w	r3, r3, #3
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	81a3      	strh	r3, [r4, #12]
 800a80c:	89a0      	ldrh	r0, [r4, #12]
 800a80e:	4305      	orrs	r5, r0
 800a810:	81a5      	strh	r5, [r4, #12]
 800a812:	e7cd      	b.n	800a7b0 <__smakebuf_r+0x18>
 800a814:	08009ec1 	.word	0x08009ec1

0800a818 <malloc>:
 800a818:	4b02      	ldr	r3, [pc, #8]	; (800a824 <malloc+0xc>)
 800a81a:	4601      	mov	r1, r0
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	f000 bd67 	b.w	800b2f0 <_malloc_r>
 800a822:	bf00      	nop
 800a824:	20000010 	.word	0x20000010

0800a828 <__ascii_mbtowc>:
 800a828:	b082      	sub	sp, #8
 800a82a:	b901      	cbnz	r1, 800a82e <__ascii_mbtowc+0x6>
 800a82c:	a901      	add	r1, sp, #4
 800a82e:	b142      	cbz	r2, 800a842 <__ascii_mbtowc+0x1a>
 800a830:	b14b      	cbz	r3, 800a846 <__ascii_mbtowc+0x1e>
 800a832:	7813      	ldrb	r3, [r2, #0]
 800a834:	600b      	str	r3, [r1, #0]
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	1e10      	subs	r0, r2, #0
 800a83a:	bf18      	it	ne
 800a83c:	2001      	movne	r0, #1
 800a83e:	b002      	add	sp, #8
 800a840:	4770      	bx	lr
 800a842:	4610      	mov	r0, r2
 800a844:	e7fb      	b.n	800a83e <__ascii_mbtowc+0x16>
 800a846:	f06f 0001 	mvn.w	r0, #1
 800a84a:	e7f8      	b.n	800a83e <__ascii_mbtowc+0x16>

0800a84c <memcpy>:
 800a84c:	440a      	add	r2, r1
 800a84e:	4291      	cmp	r1, r2
 800a850:	f100 33ff 	add.w	r3, r0, #4294967295
 800a854:	d100      	bne.n	800a858 <memcpy+0xc>
 800a856:	4770      	bx	lr
 800a858:	b510      	push	{r4, lr}
 800a85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a85e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a862:	4291      	cmp	r1, r2
 800a864:	d1f9      	bne.n	800a85a <memcpy+0xe>
 800a866:	bd10      	pop	{r4, pc}

0800a868 <_Balloc>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	b976      	cbnz	r6, 800a890 <_Balloc+0x28>
 800a872:	2010      	movs	r0, #16
 800a874:	f7ff ffd0 	bl	800a818 <malloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	6260      	str	r0, [r4, #36]	; 0x24
 800a87c:	b920      	cbnz	r0, 800a888 <_Balloc+0x20>
 800a87e:	4b18      	ldr	r3, [pc, #96]	; (800a8e0 <_Balloc+0x78>)
 800a880:	4818      	ldr	r0, [pc, #96]	; (800a8e4 <_Balloc+0x7c>)
 800a882:	2166      	movs	r1, #102	; 0x66
 800a884:	f001 f8ee 	bl	800ba64 <__assert_func>
 800a888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a88c:	6006      	str	r6, [r0, #0]
 800a88e:	60c6      	str	r6, [r0, #12]
 800a890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a892:	68f3      	ldr	r3, [r6, #12]
 800a894:	b183      	cbz	r3, 800a8b8 <_Balloc+0x50>
 800a896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a89e:	b9b8      	cbnz	r0, 800a8d0 <_Balloc+0x68>
 800a8a0:	2101      	movs	r1, #1
 800a8a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8a6:	1d72      	adds	r2, r6, #5
 800a8a8:	0092      	lsls	r2, r2, #2
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fc9d 	bl	800b1ea <_calloc_r>
 800a8b0:	b160      	cbz	r0, 800a8cc <_Balloc+0x64>
 800a8b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8b6:	e00e      	b.n	800a8d6 <_Balloc+0x6e>
 800a8b8:	2221      	movs	r2, #33	; 0x21
 800a8ba:	2104      	movs	r1, #4
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 fc94 	bl	800b1ea <_calloc_r>
 800a8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8c4:	60f0      	str	r0, [r6, #12]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d1e4      	bne.n	800a896 <_Balloc+0x2e>
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	bd70      	pop	{r4, r5, r6, pc}
 800a8d0:	6802      	ldr	r2, [r0, #0]
 800a8d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8dc:	e7f7      	b.n	800a8ce <_Balloc+0x66>
 800a8de:	bf00      	nop
 800a8e0:	0800bfa6 	.word	0x0800bfa6
 800a8e4:	0800c108 	.word	0x0800c108

0800a8e8 <_Bfree>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	b976      	cbnz	r6, 800a910 <_Bfree+0x28>
 800a8f2:	2010      	movs	r0, #16
 800a8f4:	f7ff ff90 	bl	800a818 <malloc>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	6268      	str	r0, [r5, #36]	; 0x24
 800a8fc:	b920      	cbnz	r0, 800a908 <_Bfree+0x20>
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <_Bfree+0x3c>)
 800a900:	4809      	ldr	r0, [pc, #36]	; (800a928 <_Bfree+0x40>)
 800a902:	218a      	movs	r1, #138	; 0x8a
 800a904:	f001 f8ae 	bl	800ba64 <__assert_func>
 800a908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a90c:	6006      	str	r6, [r0, #0]
 800a90e:	60c6      	str	r6, [r0, #12]
 800a910:	b13c      	cbz	r4, 800a922 <_Bfree+0x3a>
 800a912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a914:	6862      	ldr	r2, [r4, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a91c:	6021      	str	r1, [r4, #0]
 800a91e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a922:	bd70      	pop	{r4, r5, r6, pc}
 800a924:	0800bfa6 	.word	0x0800bfa6
 800a928:	0800c108 	.word	0x0800c108

0800a92c <__multadd>:
 800a92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a930:	690d      	ldr	r5, [r1, #16]
 800a932:	4607      	mov	r7, r0
 800a934:	460c      	mov	r4, r1
 800a936:	461e      	mov	r6, r3
 800a938:	f101 0c14 	add.w	ip, r1, #20
 800a93c:	2000      	movs	r0, #0
 800a93e:	f8dc 3000 	ldr.w	r3, [ip]
 800a942:	b299      	uxth	r1, r3
 800a944:	fb02 6101 	mla	r1, r2, r1, r6
 800a948:	0c1e      	lsrs	r6, r3, #16
 800a94a:	0c0b      	lsrs	r3, r1, #16
 800a94c:	fb02 3306 	mla	r3, r2, r6, r3
 800a950:	b289      	uxth	r1, r1
 800a952:	3001      	adds	r0, #1
 800a954:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a958:	4285      	cmp	r5, r0
 800a95a:	f84c 1b04 	str.w	r1, [ip], #4
 800a95e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a962:	dcec      	bgt.n	800a93e <__multadd+0x12>
 800a964:	b30e      	cbz	r6, 800a9aa <__multadd+0x7e>
 800a966:	68a3      	ldr	r3, [r4, #8]
 800a968:	42ab      	cmp	r3, r5
 800a96a:	dc19      	bgt.n	800a9a0 <__multadd+0x74>
 800a96c:	6861      	ldr	r1, [r4, #4]
 800a96e:	4638      	mov	r0, r7
 800a970:	3101      	adds	r1, #1
 800a972:	f7ff ff79 	bl	800a868 <_Balloc>
 800a976:	4680      	mov	r8, r0
 800a978:	b928      	cbnz	r0, 800a986 <__multadd+0x5a>
 800a97a:	4602      	mov	r2, r0
 800a97c:	4b0c      	ldr	r3, [pc, #48]	; (800a9b0 <__multadd+0x84>)
 800a97e:	480d      	ldr	r0, [pc, #52]	; (800a9b4 <__multadd+0x88>)
 800a980:	21b5      	movs	r1, #181	; 0xb5
 800a982:	f001 f86f 	bl	800ba64 <__assert_func>
 800a986:	6922      	ldr	r2, [r4, #16]
 800a988:	3202      	adds	r2, #2
 800a98a:	f104 010c 	add.w	r1, r4, #12
 800a98e:	0092      	lsls	r2, r2, #2
 800a990:	300c      	adds	r0, #12
 800a992:	f7ff ff5b 	bl	800a84c <memcpy>
 800a996:	4621      	mov	r1, r4
 800a998:	4638      	mov	r0, r7
 800a99a:	f7ff ffa5 	bl	800a8e8 <_Bfree>
 800a99e:	4644      	mov	r4, r8
 800a9a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	615e      	str	r6, [r3, #20]
 800a9a8:	6125      	str	r5, [r4, #16]
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9b0:	0800c018 	.word	0x0800c018
 800a9b4:	0800c108 	.word	0x0800c108

0800a9b8 <__s2b>:
 800a9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	460c      	mov	r4, r1
 800a9be:	4615      	mov	r5, r2
 800a9c0:	461f      	mov	r7, r3
 800a9c2:	2209      	movs	r2, #9
 800a9c4:	3308      	adds	r3, #8
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	db09      	blt.n	800a9e8 <__s2b+0x30>
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f7ff ff47 	bl	800a868 <_Balloc>
 800a9da:	b940      	cbnz	r0, 800a9ee <__s2b+0x36>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b19      	ldr	r3, [pc, #100]	; (800aa44 <__s2b+0x8c>)
 800a9e0:	4819      	ldr	r0, [pc, #100]	; (800aa48 <__s2b+0x90>)
 800a9e2:	21ce      	movs	r1, #206	; 0xce
 800a9e4:	f001 f83e 	bl	800ba64 <__assert_func>
 800a9e8:	0052      	lsls	r2, r2, #1
 800a9ea:	3101      	adds	r1, #1
 800a9ec:	e7f0      	b.n	800a9d0 <__s2b+0x18>
 800a9ee:	9b08      	ldr	r3, [sp, #32]
 800a9f0:	6143      	str	r3, [r0, #20]
 800a9f2:	2d09      	cmp	r5, #9
 800a9f4:	f04f 0301 	mov.w	r3, #1
 800a9f8:	6103      	str	r3, [r0, #16]
 800a9fa:	dd16      	ble.n	800aa2a <__s2b+0x72>
 800a9fc:	f104 0909 	add.w	r9, r4, #9
 800aa00:	46c8      	mov	r8, r9
 800aa02:	442c      	add	r4, r5
 800aa04:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa08:	4601      	mov	r1, r0
 800aa0a:	3b30      	subs	r3, #48	; 0x30
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	4630      	mov	r0, r6
 800aa10:	f7ff ff8c 	bl	800a92c <__multadd>
 800aa14:	45a0      	cmp	r8, r4
 800aa16:	d1f5      	bne.n	800aa04 <__s2b+0x4c>
 800aa18:	f1a5 0408 	sub.w	r4, r5, #8
 800aa1c:	444c      	add	r4, r9
 800aa1e:	1b2d      	subs	r5, r5, r4
 800aa20:	1963      	adds	r3, r4, r5
 800aa22:	42bb      	cmp	r3, r7
 800aa24:	db04      	blt.n	800aa30 <__s2b+0x78>
 800aa26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa2a:	340a      	adds	r4, #10
 800aa2c:	2509      	movs	r5, #9
 800aa2e:	e7f6      	b.n	800aa1e <__s2b+0x66>
 800aa30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa34:	4601      	mov	r1, r0
 800aa36:	3b30      	subs	r3, #48	; 0x30
 800aa38:	220a      	movs	r2, #10
 800aa3a:	4630      	mov	r0, r6
 800aa3c:	f7ff ff76 	bl	800a92c <__multadd>
 800aa40:	e7ee      	b.n	800aa20 <__s2b+0x68>
 800aa42:	bf00      	nop
 800aa44:	0800c018 	.word	0x0800c018
 800aa48:	0800c108 	.word	0x0800c108

0800aa4c <__hi0bits>:
 800aa4c:	0c03      	lsrs	r3, r0, #16
 800aa4e:	041b      	lsls	r3, r3, #16
 800aa50:	b9d3      	cbnz	r3, 800aa88 <__hi0bits+0x3c>
 800aa52:	0400      	lsls	r0, r0, #16
 800aa54:	2310      	movs	r3, #16
 800aa56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa5a:	bf04      	itt	eq
 800aa5c:	0200      	lsleq	r0, r0, #8
 800aa5e:	3308      	addeq	r3, #8
 800aa60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa64:	bf04      	itt	eq
 800aa66:	0100      	lsleq	r0, r0, #4
 800aa68:	3304      	addeq	r3, #4
 800aa6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa6e:	bf04      	itt	eq
 800aa70:	0080      	lsleq	r0, r0, #2
 800aa72:	3302      	addeq	r3, #2
 800aa74:	2800      	cmp	r0, #0
 800aa76:	db05      	blt.n	800aa84 <__hi0bits+0x38>
 800aa78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aa7c:	f103 0301 	add.w	r3, r3, #1
 800aa80:	bf08      	it	eq
 800aa82:	2320      	moveq	r3, #32
 800aa84:	4618      	mov	r0, r3
 800aa86:	4770      	bx	lr
 800aa88:	2300      	movs	r3, #0
 800aa8a:	e7e4      	b.n	800aa56 <__hi0bits+0xa>

0800aa8c <__lo0bits>:
 800aa8c:	6803      	ldr	r3, [r0, #0]
 800aa8e:	f013 0207 	ands.w	r2, r3, #7
 800aa92:	4601      	mov	r1, r0
 800aa94:	d00b      	beq.n	800aaae <__lo0bits+0x22>
 800aa96:	07da      	lsls	r2, r3, #31
 800aa98:	d423      	bmi.n	800aae2 <__lo0bits+0x56>
 800aa9a:	0798      	lsls	r0, r3, #30
 800aa9c:	bf49      	itett	mi
 800aa9e:	085b      	lsrmi	r3, r3, #1
 800aaa0:	089b      	lsrpl	r3, r3, #2
 800aaa2:	2001      	movmi	r0, #1
 800aaa4:	600b      	strmi	r3, [r1, #0]
 800aaa6:	bf5c      	itt	pl
 800aaa8:	600b      	strpl	r3, [r1, #0]
 800aaaa:	2002      	movpl	r0, #2
 800aaac:	4770      	bx	lr
 800aaae:	b298      	uxth	r0, r3
 800aab0:	b9a8      	cbnz	r0, 800aade <__lo0bits+0x52>
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	2010      	movs	r0, #16
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	b90a      	cbnz	r2, 800aabe <__lo0bits+0x32>
 800aaba:	3008      	adds	r0, #8
 800aabc:	0a1b      	lsrs	r3, r3, #8
 800aabe:	071a      	lsls	r2, r3, #28
 800aac0:	bf04      	itt	eq
 800aac2:	091b      	lsreq	r3, r3, #4
 800aac4:	3004      	addeq	r0, #4
 800aac6:	079a      	lsls	r2, r3, #30
 800aac8:	bf04      	itt	eq
 800aaca:	089b      	lsreq	r3, r3, #2
 800aacc:	3002      	addeq	r0, #2
 800aace:	07da      	lsls	r2, r3, #31
 800aad0:	d403      	bmi.n	800aada <__lo0bits+0x4e>
 800aad2:	085b      	lsrs	r3, r3, #1
 800aad4:	f100 0001 	add.w	r0, r0, #1
 800aad8:	d005      	beq.n	800aae6 <__lo0bits+0x5a>
 800aada:	600b      	str	r3, [r1, #0]
 800aadc:	4770      	bx	lr
 800aade:	4610      	mov	r0, r2
 800aae0:	e7e9      	b.n	800aab6 <__lo0bits+0x2a>
 800aae2:	2000      	movs	r0, #0
 800aae4:	4770      	bx	lr
 800aae6:	2020      	movs	r0, #32
 800aae8:	4770      	bx	lr
	...

0800aaec <__i2b>:
 800aaec:	b510      	push	{r4, lr}
 800aaee:	460c      	mov	r4, r1
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	f7ff feb9 	bl	800a868 <_Balloc>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	b928      	cbnz	r0, 800ab06 <__i2b+0x1a>
 800aafa:	4b05      	ldr	r3, [pc, #20]	; (800ab10 <__i2b+0x24>)
 800aafc:	4805      	ldr	r0, [pc, #20]	; (800ab14 <__i2b+0x28>)
 800aafe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab02:	f000 ffaf 	bl	800ba64 <__assert_func>
 800ab06:	2301      	movs	r3, #1
 800ab08:	6144      	str	r4, [r0, #20]
 800ab0a:	6103      	str	r3, [r0, #16]
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	bf00      	nop
 800ab10:	0800c018 	.word	0x0800c018
 800ab14:	0800c108 	.word	0x0800c108

0800ab18 <__multiply>:
 800ab18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab1c:	4691      	mov	r9, r2
 800ab1e:	690a      	ldr	r2, [r1, #16]
 800ab20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab24:	429a      	cmp	r2, r3
 800ab26:	bfb8      	it	lt
 800ab28:	460b      	movlt	r3, r1
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	bfbc      	itt	lt
 800ab2e:	464c      	movlt	r4, r9
 800ab30:	4699      	movlt	r9, r3
 800ab32:	6927      	ldr	r7, [r4, #16]
 800ab34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ab38:	68a3      	ldr	r3, [r4, #8]
 800ab3a:	6861      	ldr	r1, [r4, #4]
 800ab3c:	eb07 060a 	add.w	r6, r7, sl
 800ab40:	42b3      	cmp	r3, r6
 800ab42:	b085      	sub	sp, #20
 800ab44:	bfb8      	it	lt
 800ab46:	3101      	addlt	r1, #1
 800ab48:	f7ff fe8e 	bl	800a868 <_Balloc>
 800ab4c:	b930      	cbnz	r0, 800ab5c <__multiply+0x44>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	4b44      	ldr	r3, [pc, #272]	; (800ac64 <__multiply+0x14c>)
 800ab52:	4845      	ldr	r0, [pc, #276]	; (800ac68 <__multiply+0x150>)
 800ab54:	f240 115d 	movw	r1, #349	; 0x15d
 800ab58:	f000 ff84 	bl	800ba64 <__assert_func>
 800ab5c:	f100 0514 	add.w	r5, r0, #20
 800ab60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab64:	462b      	mov	r3, r5
 800ab66:	2200      	movs	r2, #0
 800ab68:	4543      	cmp	r3, r8
 800ab6a:	d321      	bcc.n	800abb0 <__multiply+0x98>
 800ab6c:	f104 0314 	add.w	r3, r4, #20
 800ab70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ab74:	f109 0314 	add.w	r3, r9, #20
 800ab78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ab7c:	9202      	str	r2, [sp, #8]
 800ab7e:	1b3a      	subs	r2, r7, r4
 800ab80:	3a15      	subs	r2, #21
 800ab82:	f022 0203 	bic.w	r2, r2, #3
 800ab86:	3204      	adds	r2, #4
 800ab88:	f104 0115 	add.w	r1, r4, #21
 800ab8c:	428f      	cmp	r7, r1
 800ab8e:	bf38      	it	cc
 800ab90:	2204      	movcc	r2, #4
 800ab92:	9201      	str	r2, [sp, #4]
 800ab94:	9a02      	ldr	r2, [sp, #8]
 800ab96:	9303      	str	r3, [sp, #12]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d80c      	bhi.n	800abb6 <__multiply+0x9e>
 800ab9c:	2e00      	cmp	r6, #0
 800ab9e:	dd03      	ble.n	800aba8 <__multiply+0x90>
 800aba0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d05a      	beq.n	800ac5e <__multiply+0x146>
 800aba8:	6106      	str	r6, [r0, #16]
 800abaa:	b005      	add	sp, #20
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	f843 2b04 	str.w	r2, [r3], #4
 800abb4:	e7d8      	b.n	800ab68 <__multiply+0x50>
 800abb6:	f8b3 a000 	ldrh.w	sl, [r3]
 800abba:	f1ba 0f00 	cmp.w	sl, #0
 800abbe:	d024      	beq.n	800ac0a <__multiply+0xf2>
 800abc0:	f104 0e14 	add.w	lr, r4, #20
 800abc4:	46a9      	mov	r9, r5
 800abc6:	f04f 0c00 	mov.w	ip, #0
 800abca:	f85e 2b04 	ldr.w	r2, [lr], #4
 800abce:	f8d9 1000 	ldr.w	r1, [r9]
 800abd2:	fa1f fb82 	uxth.w	fp, r2
 800abd6:	b289      	uxth	r1, r1
 800abd8:	fb0a 110b 	mla	r1, sl, fp, r1
 800abdc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800abe0:	f8d9 2000 	ldr.w	r2, [r9]
 800abe4:	4461      	add	r1, ip
 800abe6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800abea:	fb0a c20b 	mla	r2, sl, fp, ip
 800abee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800abf2:	b289      	uxth	r1, r1
 800abf4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abf8:	4577      	cmp	r7, lr
 800abfa:	f849 1b04 	str.w	r1, [r9], #4
 800abfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ac02:	d8e2      	bhi.n	800abca <__multiply+0xb2>
 800ac04:	9a01      	ldr	r2, [sp, #4]
 800ac06:	f845 c002 	str.w	ip, [r5, r2]
 800ac0a:	9a03      	ldr	r2, [sp, #12]
 800ac0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac10:	3304      	adds	r3, #4
 800ac12:	f1b9 0f00 	cmp.w	r9, #0
 800ac16:	d020      	beq.n	800ac5a <__multiply+0x142>
 800ac18:	6829      	ldr	r1, [r5, #0]
 800ac1a:	f104 0c14 	add.w	ip, r4, #20
 800ac1e:	46ae      	mov	lr, r5
 800ac20:	f04f 0a00 	mov.w	sl, #0
 800ac24:	f8bc b000 	ldrh.w	fp, [ip]
 800ac28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ac2c:	fb09 220b 	mla	r2, r9, fp, r2
 800ac30:	4492      	add	sl, r2
 800ac32:	b289      	uxth	r1, r1
 800ac34:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ac38:	f84e 1b04 	str.w	r1, [lr], #4
 800ac3c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ac40:	f8be 1000 	ldrh.w	r1, [lr]
 800ac44:	0c12      	lsrs	r2, r2, #16
 800ac46:	fb09 1102 	mla	r1, r9, r2, r1
 800ac4a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ac4e:	4567      	cmp	r7, ip
 800ac50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ac54:	d8e6      	bhi.n	800ac24 <__multiply+0x10c>
 800ac56:	9a01      	ldr	r2, [sp, #4]
 800ac58:	50a9      	str	r1, [r5, r2]
 800ac5a:	3504      	adds	r5, #4
 800ac5c:	e79a      	b.n	800ab94 <__multiply+0x7c>
 800ac5e:	3e01      	subs	r6, #1
 800ac60:	e79c      	b.n	800ab9c <__multiply+0x84>
 800ac62:	bf00      	nop
 800ac64:	0800c018 	.word	0x0800c018
 800ac68:	0800c108 	.word	0x0800c108

0800ac6c <__pow5mult>:
 800ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac70:	4615      	mov	r5, r2
 800ac72:	f012 0203 	ands.w	r2, r2, #3
 800ac76:	4606      	mov	r6, r0
 800ac78:	460f      	mov	r7, r1
 800ac7a:	d007      	beq.n	800ac8c <__pow5mult+0x20>
 800ac7c:	4c25      	ldr	r4, [pc, #148]	; (800ad14 <__pow5mult+0xa8>)
 800ac7e:	3a01      	subs	r2, #1
 800ac80:	2300      	movs	r3, #0
 800ac82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac86:	f7ff fe51 	bl	800a92c <__multadd>
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	10ad      	asrs	r5, r5, #2
 800ac8e:	d03d      	beq.n	800ad0c <__pow5mult+0xa0>
 800ac90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ac92:	b97c      	cbnz	r4, 800acb4 <__pow5mult+0x48>
 800ac94:	2010      	movs	r0, #16
 800ac96:	f7ff fdbf 	bl	800a818 <malloc>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	6270      	str	r0, [r6, #36]	; 0x24
 800ac9e:	b928      	cbnz	r0, 800acac <__pow5mult+0x40>
 800aca0:	4b1d      	ldr	r3, [pc, #116]	; (800ad18 <__pow5mult+0xac>)
 800aca2:	481e      	ldr	r0, [pc, #120]	; (800ad1c <__pow5mult+0xb0>)
 800aca4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aca8:	f000 fedc 	bl	800ba64 <__assert_func>
 800acac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acb0:	6004      	str	r4, [r0, #0]
 800acb2:	60c4      	str	r4, [r0, #12]
 800acb4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acbc:	b94c      	cbnz	r4, 800acd2 <__pow5mult+0x66>
 800acbe:	f240 2171 	movw	r1, #625	; 0x271
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7ff ff12 	bl	800aaec <__i2b>
 800acc8:	2300      	movs	r3, #0
 800acca:	f8c8 0008 	str.w	r0, [r8, #8]
 800acce:	4604      	mov	r4, r0
 800acd0:	6003      	str	r3, [r0, #0]
 800acd2:	f04f 0900 	mov.w	r9, #0
 800acd6:	07eb      	lsls	r3, r5, #31
 800acd8:	d50a      	bpl.n	800acf0 <__pow5mult+0x84>
 800acda:	4639      	mov	r1, r7
 800acdc:	4622      	mov	r2, r4
 800acde:	4630      	mov	r0, r6
 800ace0:	f7ff ff1a 	bl	800ab18 <__multiply>
 800ace4:	4639      	mov	r1, r7
 800ace6:	4680      	mov	r8, r0
 800ace8:	4630      	mov	r0, r6
 800acea:	f7ff fdfd 	bl	800a8e8 <_Bfree>
 800acee:	4647      	mov	r7, r8
 800acf0:	106d      	asrs	r5, r5, #1
 800acf2:	d00b      	beq.n	800ad0c <__pow5mult+0xa0>
 800acf4:	6820      	ldr	r0, [r4, #0]
 800acf6:	b938      	cbnz	r0, 800ad08 <__pow5mult+0x9c>
 800acf8:	4622      	mov	r2, r4
 800acfa:	4621      	mov	r1, r4
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7ff ff0b 	bl	800ab18 <__multiply>
 800ad02:	6020      	str	r0, [r4, #0]
 800ad04:	f8c0 9000 	str.w	r9, [r0]
 800ad08:	4604      	mov	r4, r0
 800ad0a:	e7e4      	b.n	800acd6 <__pow5mult+0x6a>
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad12:	bf00      	nop
 800ad14:	0800c258 	.word	0x0800c258
 800ad18:	0800bfa6 	.word	0x0800bfa6
 800ad1c:	0800c108 	.word	0x0800c108

0800ad20 <__lshift>:
 800ad20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad24:	460c      	mov	r4, r1
 800ad26:	6849      	ldr	r1, [r1, #4]
 800ad28:	6923      	ldr	r3, [r4, #16]
 800ad2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad2e:	68a3      	ldr	r3, [r4, #8]
 800ad30:	4607      	mov	r7, r0
 800ad32:	4691      	mov	r9, r2
 800ad34:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad38:	f108 0601 	add.w	r6, r8, #1
 800ad3c:	42b3      	cmp	r3, r6
 800ad3e:	db0b      	blt.n	800ad58 <__lshift+0x38>
 800ad40:	4638      	mov	r0, r7
 800ad42:	f7ff fd91 	bl	800a868 <_Balloc>
 800ad46:	4605      	mov	r5, r0
 800ad48:	b948      	cbnz	r0, 800ad5e <__lshift+0x3e>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	4b2a      	ldr	r3, [pc, #168]	; (800adf8 <__lshift+0xd8>)
 800ad4e:	482b      	ldr	r0, [pc, #172]	; (800adfc <__lshift+0xdc>)
 800ad50:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad54:	f000 fe86 	bl	800ba64 <__assert_func>
 800ad58:	3101      	adds	r1, #1
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	e7ee      	b.n	800ad3c <__lshift+0x1c>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f100 0114 	add.w	r1, r0, #20
 800ad64:	f100 0210 	add.w	r2, r0, #16
 800ad68:	4618      	mov	r0, r3
 800ad6a:	4553      	cmp	r3, sl
 800ad6c:	db37      	blt.n	800adde <__lshift+0xbe>
 800ad6e:	6920      	ldr	r0, [r4, #16]
 800ad70:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad74:	f104 0314 	add.w	r3, r4, #20
 800ad78:	f019 091f 	ands.w	r9, r9, #31
 800ad7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad80:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ad84:	d02f      	beq.n	800ade6 <__lshift+0xc6>
 800ad86:	f1c9 0e20 	rsb	lr, r9, #32
 800ad8a:	468a      	mov	sl, r1
 800ad8c:	f04f 0c00 	mov.w	ip, #0
 800ad90:	681a      	ldr	r2, [r3, #0]
 800ad92:	fa02 f209 	lsl.w	r2, r2, r9
 800ad96:	ea42 020c 	orr.w	r2, r2, ip
 800ad9a:	f84a 2b04 	str.w	r2, [sl], #4
 800ad9e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada2:	4298      	cmp	r0, r3
 800ada4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ada8:	d8f2      	bhi.n	800ad90 <__lshift+0x70>
 800adaa:	1b03      	subs	r3, r0, r4
 800adac:	3b15      	subs	r3, #21
 800adae:	f023 0303 	bic.w	r3, r3, #3
 800adb2:	3304      	adds	r3, #4
 800adb4:	f104 0215 	add.w	r2, r4, #21
 800adb8:	4290      	cmp	r0, r2
 800adba:	bf38      	it	cc
 800adbc:	2304      	movcc	r3, #4
 800adbe:	f841 c003 	str.w	ip, [r1, r3]
 800adc2:	f1bc 0f00 	cmp.w	ip, #0
 800adc6:	d001      	beq.n	800adcc <__lshift+0xac>
 800adc8:	f108 0602 	add.w	r6, r8, #2
 800adcc:	3e01      	subs	r6, #1
 800adce:	4638      	mov	r0, r7
 800add0:	612e      	str	r6, [r5, #16]
 800add2:	4621      	mov	r1, r4
 800add4:	f7ff fd88 	bl	800a8e8 <_Bfree>
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adde:	f842 0f04 	str.w	r0, [r2, #4]!
 800ade2:	3301      	adds	r3, #1
 800ade4:	e7c1      	b.n	800ad6a <__lshift+0x4a>
 800ade6:	3904      	subs	r1, #4
 800ade8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adec:	f841 2f04 	str.w	r2, [r1, #4]!
 800adf0:	4298      	cmp	r0, r3
 800adf2:	d8f9      	bhi.n	800ade8 <__lshift+0xc8>
 800adf4:	e7ea      	b.n	800adcc <__lshift+0xac>
 800adf6:	bf00      	nop
 800adf8:	0800c018 	.word	0x0800c018
 800adfc:	0800c108 	.word	0x0800c108

0800ae00 <__mcmp>:
 800ae00:	b530      	push	{r4, r5, lr}
 800ae02:	6902      	ldr	r2, [r0, #16]
 800ae04:	690c      	ldr	r4, [r1, #16]
 800ae06:	1b12      	subs	r2, r2, r4
 800ae08:	d10e      	bne.n	800ae28 <__mcmp+0x28>
 800ae0a:	f100 0314 	add.w	r3, r0, #20
 800ae0e:	3114      	adds	r1, #20
 800ae10:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae14:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae18:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae1c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae20:	42a5      	cmp	r5, r4
 800ae22:	d003      	beq.n	800ae2c <__mcmp+0x2c>
 800ae24:	d305      	bcc.n	800ae32 <__mcmp+0x32>
 800ae26:	2201      	movs	r2, #1
 800ae28:	4610      	mov	r0, r2
 800ae2a:	bd30      	pop	{r4, r5, pc}
 800ae2c:	4283      	cmp	r3, r0
 800ae2e:	d3f3      	bcc.n	800ae18 <__mcmp+0x18>
 800ae30:	e7fa      	b.n	800ae28 <__mcmp+0x28>
 800ae32:	f04f 32ff 	mov.w	r2, #4294967295
 800ae36:	e7f7      	b.n	800ae28 <__mcmp+0x28>

0800ae38 <__mdiff>:
 800ae38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	4606      	mov	r6, r0
 800ae40:	4611      	mov	r1, r2
 800ae42:	4620      	mov	r0, r4
 800ae44:	4690      	mov	r8, r2
 800ae46:	f7ff ffdb 	bl	800ae00 <__mcmp>
 800ae4a:	1e05      	subs	r5, r0, #0
 800ae4c:	d110      	bne.n	800ae70 <__mdiff+0x38>
 800ae4e:	4629      	mov	r1, r5
 800ae50:	4630      	mov	r0, r6
 800ae52:	f7ff fd09 	bl	800a868 <_Balloc>
 800ae56:	b930      	cbnz	r0, 800ae66 <__mdiff+0x2e>
 800ae58:	4b3a      	ldr	r3, [pc, #232]	; (800af44 <__mdiff+0x10c>)
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	f240 2132 	movw	r1, #562	; 0x232
 800ae60:	4839      	ldr	r0, [pc, #228]	; (800af48 <__mdiff+0x110>)
 800ae62:	f000 fdff 	bl	800ba64 <__assert_func>
 800ae66:	2301      	movs	r3, #1
 800ae68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae70:	bfa4      	itt	ge
 800ae72:	4643      	movge	r3, r8
 800ae74:	46a0      	movge	r8, r4
 800ae76:	4630      	mov	r0, r6
 800ae78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ae7c:	bfa6      	itte	ge
 800ae7e:	461c      	movge	r4, r3
 800ae80:	2500      	movge	r5, #0
 800ae82:	2501      	movlt	r5, #1
 800ae84:	f7ff fcf0 	bl	800a868 <_Balloc>
 800ae88:	b920      	cbnz	r0, 800ae94 <__mdiff+0x5c>
 800ae8a:	4b2e      	ldr	r3, [pc, #184]	; (800af44 <__mdiff+0x10c>)
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ae92:	e7e5      	b.n	800ae60 <__mdiff+0x28>
 800ae94:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae98:	6926      	ldr	r6, [r4, #16]
 800ae9a:	60c5      	str	r5, [r0, #12]
 800ae9c:	f104 0914 	add.w	r9, r4, #20
 800aea0:	f108 0514 	add.w	r5, r8, #20
 800aea4:	f100 0e14 	add.w	lr, r0, #20
 800aea8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aeac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aeb0:	f108 0210 	add.w	r2, r8, #16
 800aeb4:	46f2      	mov	sl, lr
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	f859 3b04 	ldr.w	r3, [r9], #4
 800aebc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aec0:	fa1f f883 	uxth.w	r8, r3
 800aec4:	fa11 f18b 	uxtah	r1, r1, fp
 800aec8:	0c1b      	lsrs	r3, r3, #16
 800aeca:	eba1 0808 	sub.w	r8, r1, r8
 800aece:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aed2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aed6:	fa1f f888 	uxth.w	r8, r8
 800aeda:	1419      	asrs	r1, r3, #16
 800aedc:	454e      	cmp	r6, r9
 800aede:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aee2:	f84a 3b04 	str.w	r3, [sl], #4
 800aee6:	d8e7      	bhi.n	800aeb8 <__mdiff+0x80>
 800aee8:	1b33      	subs	r3, r6, r4
 800aeea:	3b15      	subs	r3, #21
 800aeec:	f023 0303 	bic.w	r3, r3, #3
 800aef0:	3304      	adds	r3, #4
 800aef2:	3415      	adds	r4, #21
 800aef4:	42a6      	cmp	r6, r4
 800aef6:	bf38      	it	cc
 800aef8:	2304      	movcc	r3, #4
 800aefa:	441d      	add	r5, r3
 800aefc:	4473      	add	r3, lr
 800aefe:	469e      	mov	lr, r3
 800af00:	462e      	mov	r6, r5
 800af02:	4566      	cmp	r6, ip
 800af04:	d30e      	bcc.n	800af24 <__mdiff+0xec>
 800af06:	f10c 0203 	add.w	r2, ip, #3
 800af0a:	1b52      	subs	r2, r2, r5
 800af0c:	f022 0203 	bic.w	r2, r2, #3
 800af10:	3d03      	subs	r5, #3
 800af12:	45ac      	cmp	ip, r5
 800af14:	bf38      	it	cc
 800af16:	2200      	movcc	r2, #0
 800af18:	441a      	add	r2, r3
 800af1a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af1e:	b17b      	cbz	r3, 800af40 <__mdiff+0x108>
 800af20:	6107      	str	r7, [r0, #16]
 800af22:	e7a3      	b.n	800ae6c <__mdiff+0x34>
 800af24:	f856 8b04 	ldr.w	r8, [r6], #4
 800af28:	fa11 f288 	uxtah	r2, r1, r8
 800af2c:	1414      	asrs	r4, r2, #16
 800af2e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800af32:	b292      	uxth	r2, r2
 800af34:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800af38:	f84e 2b04 	str.w	r2, [lr], #4
 800af3c:	1421      	asrs	r1, r4, #16
 800af3e:	e7e0      	b.n	800af02 <__mdiff+0xca>
 800af40:	3f01      	subs	r7, #1
 800af42:	e7ea      	b.n	800af1a <__mdiff+0xe2>
 800af44:	0800c018 	.word	0x0800c018
 800af48:	0800c108 	.word	0x0800c108

0800af4c <__ulp>:
 800af4c:	b082      	sub	sp, #8
 800af4e:	ed8d 0b00 	vstr	d0, [sp]
 800af52:	9b01      	ldr	r3, [sp, #4]
 800af54:	4912      	ldr	r1, [pc, #72]	; (800afa0 <__ulp+0x54>)
 800af56:	4019      	ands	r1, r3
 800af58:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af5c:	2900      	cmp	r1, #0
 800af5e:	dd05      	ble.n	800af6c <__ulp+0x20>
 800af60:	2200      	movs	r2, #0
 800af62:	460b      	mov	r3, r1
 800af64:	ec43 2b10 	vmov	d0, r2, r3
 800af68:	b002      	add	sp, #8
 800af6a:	4770      	bx	lr
 800af6c:	4249      	negs	r1, r1
 800af6e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af72:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af76:	f04f 0200 	mov.w	r2, #0
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	da04      	bge.n	800af8a <__ulp+0x3e>
 800af80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af84:	fa41 f300 	asr.w	r3, r1, r0
 800af88:	e7ec      	b.n	800af64 <__ulp+0x18>
 800af8a:	f1a0 0114 	sub.w	r1, r0, #20
 800af8e:	291e      	cmp	r1, #30
 800af90:	bfda      	itte	le
 800af92:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800af96:	fa20 f101 	lsrle.w	r1, r0, r1
 800af9a:	2101      	movgt	r1, #1
 800af9c:	460a      	mov	r2, r1
 800af9e:	e7e1      	b.n	800af64 <__ulp+0x18>
 800afa0:	7ff00000 	.word	0x7ff00000

0800afa4 <__b2d>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	6905      	ldr	r5, [r0, #16]
 800afa8:	f100 0714 	add.w	r7, r0, #20
 800afac:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800afb0:	1f2e      	subs	r6, r5, #4
 800afb2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f7ff fd48 	bl	800aa4c <__hi0bits>
 800afbc:	f1c0 0320 	rsb	r3, r0, #32
 800afc0:	280a      	cmp	r0, #10
 800afc2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b040 <__b2d+0x9c>
 800afc6:	600b      	str	r3, [r1, #0]
 800afc8:	dc14      	bgt.n	800aff4 <__b2d+0x50>
 800afca:	f1c0 0e0b 	rsb	lr, r0, #11
 800afce:	fa24 f10e 	lsr.w	r1, r4, lr
 800afd2:	42b7      	cmp	r7, r6
 800afd4:	ea41 030c 	orr.w	r3, r1, ip
 800afd8:	bf34      	ite	cc
 800afda:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800afde:	2100      	movcs	r1, #0
 800afe0:	3015      	adds	r0, #21
 800afe2:	fa04 f000 	lsl.w	r0, r4, r0
 800afe6:	fa21 f10e 	lsr.w	r1, r1, lr
 800afea:	ea40 0201 	orr.w	r2, r0, r1
 800afee:	ec43 2b10 	vmov	d0, r2, r3
 800aff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff4:	42b7      	cmp	r7, r6
 800aff6:	bf3a      	itte	cc
 800aff8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800affc:	f1a5 0608 	subcc.w	r6, r5, #8
 800b000:	2100      	movcs	r1, #0
 800b002:	380b      	subs	r0, #11
 800b004:	d017      	beq.n	800b036 <__b2d+0x92>
 800b006:	f1c0 0c20 	rsb	ip, r0, #32
 800b00a:	fa04 f500 	lsl.w	r5, r4, r0
 800b00e:	42be      	cmp	r6, r7
 800b010:	fa21 f40c 	lsr.w	r4, r1, ip
 800b014:	ea45 0504 	orr.w	r5, r5, r4
 800b018:	bf8c      	ite	hi
 800b01a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b01e:	2400      	movls	r4, #0
 800b020:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b024:	fa01 f000 	lsl.w	r0, r1, r0
 800b028:	fa24 f40c 	lsr.w	r4, r4, ip
 800b02c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b030:	ea40 0204 	orr.w	r2, r0, r4
 800b034:	e7db      	b.n	800afee <__b2d+0x4a>
 800b036:	ea44 030c 	orr.w	r3, r4, ip
 800b03a:	460a      	mov	r2, r1
 800b03c:	e7d7      	b.n	800afee <__b2d+0x4a>
 800b03e:	bf00      	nop
 800b040:	3ff00000 	.word	0x3ff00000

0800b044 <__d2b>:
 800b044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b048:	4689      	mov	r9, r1
 800b04a:	2101      	movs	r1, #1
 800b04c:	ec57 6b10 	vmov	r6, r7, d0
 800b050:	4690      	mov	r8, r2
 800b052:	f7ff fc09 	bl	800a868 <_Balloc>
 800b056:	4604      	mov	r4, r0
 800b058:	b930      	cbnz	r0, 800b068 <__d2b+0x24>
 800b05a:	4602      	mov	r2, r0
 800b05c:	4b25      	ldr	r3, [pc, #148]	; (800b0f4 <__d2b+0xb0>)
 800b05e:	4826      	ldr	r0, [pc, #152]	; (800b0f8 <__d2b+0xb4>)
 800b060:	f240 310a 	movw	r1, #778	; 0x30a
 800b064:	f000 fcfe 	bl	800ba64 <__assert_func>
 800b068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b06c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b070:	bb35      	cbnz	r5, 800b0c0 <__d2b+0x7c>
 800b072:	2e00      	cmp	r6, #0
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	d028      	beq.n	800b0ca <__d2b+0x86>
 800b078:	4668      	mov	r0, sp
 800b07a:	9600      	str	r6, [sp, #0]
 800b07c:	f7ff fd06 	bl	800aa8c <__lo0bits>
 800b080:	9900      	ldr	r1, [sp, #0]
 800b082:	b300      	cbz	r0, 800b0c6 <__d2b+0x82>
 800b084:	9a01      	ldr	r2, [sp, #4]
 800b086:	f1c0 0320 	rsb	r3, r0, #32
 800b08a:	fa02 f303 	lsl.w	r3, r2, r3
 800b08e:	430b      	orrs	r3, r1
 800b090:	40c2      	lsrs	r2, r0
 800b092:	6163      	str	r3, [r4, #20]
 800b094:	9201      	str	r2, [sp, #4]
 800b096:	9b01      	ldr	r3, [sp, #4]
 800b098:	61a3      	str	r3, [r4, #24]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	bf14      	ite	ne
 800b09e:	2202      	movne	r2, #2
 800b0a0:	2201      	moveq	r2, #1
 800b0a2:	6122      	str	r2, [r4, #16]
 800b0a4:	b1d5      	cbz	r5, 800b0dc <__d2b+0x98>
 800b0a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0aa:	4405      	add	r5, r0
 800b0ac:	f8c9 5000 	str.w	r5, [r9]
 800b0b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0b4:	f8c8 0000 	str.w	r0, [r8]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	b003      	add	sp, #12
 800b0bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0c4:	e7d5      	b.n	800b072 <__d2b+0x2e>
 800b0c6:	6161      	str	r1, [r4, #20]
 800b0c8:	e7e5      	b.n	800b096 <__d2b+0x52>
 800b0ca:	a801      	add	r0, sp, #4
 800b0cc:	f7ff fcde 	bl	800aa8c <__lo0bits>
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	6163      	str	r3, [r4, #20]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	6122      	str	r2, [r4, #16]
 800b0d8:	3020      	adds	r0, #32
 800b0da:	e7e3      	b.n	800b0a4 <__d2b+0x60>
 800b0dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0e4:	f8c9 0000 	str.w	r0, [r9]
 800b0e8:	6918      	ldr	r0, [r3, #16]
 800b0ea:	f7ff fcaf 	bl	800aa4c <__hi0bits>
 800b0ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b0f2:	e7df      	b.n	800b0b4 <__d2b+0x70>
 800b0f4:	0800c018 	.word	0x0800c018
 800b0f8:	0800c108 	.word	0x0800c108

0800b0fc <__ratio>:
 800b0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b100:	4688      	mov	r8, r1
 800b102:	4669      	mov	r1, sp
 800b104:	4681      	mov	r9, r0
 800b106:	f7ff ff4d 	bl	800afa4 <__b2d>
 800b10a:	a901      	add	r1, sp, #4
 800b10c:	4640      	mov	r0, r8
 800b10e:	ec55 4b10 	vmov	r4, r5, d0
 800b112:	f7ff ff47 	bl	800afa4 <__b2d>
 800b116:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b11a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b11e:	eba3 0c02 	sub.w	ip, r3, r2
 800b122:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b12c:	ec51 0b10 	vmov	r0, r1, d0
 800b130:	2b00      	cmp	r3, #0
 800b132:	bfd6      	itet	le
 800b134:	460a      	movle	r2, r1
 800b136:	462a      	movgt	r2, r5
 800b138:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b13c:	468b      	mov	fp, r1
 800b13e:	462f      	mov	r7, r5
 800b140:	bfd4      	ite	le
 800b142:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b146:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b14a:	4620      	mov	r0, r4
 800b14c:	ee10 2a10 	vmov	r2, s0
 800b150:	465b      	mov	r3, fp
 800b152:	4639      	mov	r1, r7
 800b154:	f7f5 fb7a 	bl	800084c <__aeabi_ddiv>
 800b158:	ec41 0b10 	vmov	d0, r0, r1
 800b15c:	b003      	add	sp, #12
 800b15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b162 <__copybits>:
 800b162:	3901      	subs	r1, #1
 800b164:	b570      	push	{r4, r5, r6, lr}
 800b166:	1149      	asrs	r1, r1, #5
 800b168:	6914      	ldr	r4, [r2, #16]
 800b16a:	3101      	adds	r1, #1
 800b16c:	f102 0314 	add.w	r3, r2, #20
 800b170:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b174:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b178:	1f05      	subs	r5, r0, #4
 800b17a:	42a3      	cmp	r3, r4
 800b17c:	d30c      	bcc.n	800b198 <__copybits+0x36>
 800b17e:	1aa3      	subs	r3, r4, r2
 800b180:	3b11      	subs	r3, #17
 800b182:	f023 0303 	bic.w	r3, r3, #3
 800b186:	3211      	adds	r2, #17
 800b188:	42a2      	cmp	r2, r4
 800b18a:	bf88      	it	hi
 800b18c:	2300      	movhi	r3, #0
 800b18e:	4418      	add	r0, r3
 800b190:	2300      	movs	r3, #0
 800b192:	4288      	cmp	r0, r1
 800b194:	d305      	bcc.n	800b1a2 <__copybits+0x40>
 800b196:	bd70      	pop	{r4, r5, r6, pc}
 800b198:	f853 6b04 	ldr.w	r6, [r3], #4
 800b19c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1a0:	e7eb      	b.n	800b17a <__copybits+0x18>
 800b1a2:	f840 3b04 	str.w	r3, [r0], #4
 800b1a6:	e7f4      	b.n	800b192 <__copybits+0x30>

0800b1a8 <__any_on>:
 800b1a8:	f100 0214 	add.w	r2, r0, #20
 800b1ac:	6900      	ldr	r0, [r0, #16]
 800b1ae:	114b      	asrs	r3, r1, #5
 800b1b0:	4298      	cmp	r0, r3
 800b1b2:	b510      	push	{r4, lr}
 800b1b4:	db11      	blt.n	800b1da <__any_on+0x32>
 800b1b6:	dd0a      	ble.n	800b1ce <__any_on+0x26>
 800b1b8:	f011 011f 	ands.w	r1, r1, #31
 800b1bc:	d007      	beq.n	800b1ce <__any_on+0x26>
 800b1be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1c2:	fa24 f001 	lsr.w	r0, r4, r1
 800b1c6:	fa00 f101 	lsl.w	r1, r0, r1
 800b1ca:	428c      	cmp	r4, r1
 800b1cc:	d10b      	bne.n	800b1e6 <__any_on+0x3e>
 800b1ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d803      	bhi.n	800b1de <__any_on+0x36>
 800b1d6:	2000      	movs	r0, #0
 800b1d8:	bd10      	pop	{r4, pc}
 800b1da:	4603      	mov	r3, r0
 800b1dc:	e7f7      	b.n	800b1ce <__any_on+0x26>
 800b1de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	d0f5      	beq.n	800b1d2 <__any_on+0x2a>
 800b1e6:	2001      	movs	r0, #1
 800b1e8:	e7f6      	b.n	800b1d8 <__any_on+0x30>

0800b1ea <_calloc_r>:
 800b1ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ec:	fba1 2402 	umull	r2, r4, r1, r2
 800b1f0:	b94c      	cbnz	r4, 800b206 <_calloc_r+0x1c>
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	9201      	str	r2, [sp, #4]
 800b1f6:	f000 f87b 	bl	800b2f0 <_malloc_r>
 800b1fa:	9a01      	ldr	r2, [sp, #4]
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	b930      	cbnz	r0, 800b20e <_calloc_r+0x24>
 800b200:	4628      	mov	r0, r5
 800b202:	b003      	add	sp, #12
 800b204:	bd30      	pop	{r4, r5, pc}
 800b206:	220c      	movs	r2, #12
 800b208:	6002      	str	r2, [r0, #0]
 800b20a:	2500      	movs	r5, #0
 800b20c:	e7f8      	b.n	800b200 <_calloc_r+0x16>
 800b20e:	4621      	mov	r1, r4
 800b210:	f7fc f848 	bl	80072a4 <memset>
 800b214:	e7f4      	b.n	800b200 <_calloc_r+0x16>
	...

0800b218 <_free_r>:
 800b218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b21a:	2900      	cmp	r1, #0
 800b21c:	d044      	beq.n	800b2a8 <_free_r+0x90>
 800b21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b222:	9001      	str	r0, [sp, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	f1a1 0404 	sub.w	r4, r1, #4
 800b22a:	bfb8      	it	lt
 800b22c:	18e4      	addlt	r4, r4, r3
 800b22e:	f000 fca7 	bl	800bb80 <__malloc_lock>
 800b232:	4a1e      	ldr	r2, [pc, #120]	; (800b2ac <_free_r+0x94>)
 800b234:	9801      	ldr	r0, [sp, #4]
 800b236:	6813      	ldr	r3, [r2, #0]
 800b238:	b933      	cbnz	r3, 800b248 <_free_r+0x30>
 800b23a:	6063      	str	r3, [r4, #4]
 800b23c:	6014      	str	r4, [r2, #0]
 800b23e:	b003      	add	sp, #12
 800b240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b244:	f000 bca2 	b.w	800bb8c <__malloc_unlock>
 800b248:	42a3      	cmp	r3, r4
 800b24a:	d908      	bls.n	800b25e <_free_r+0x46>
 800b24c:	6825      	ldr	r5, [r4, #0]
 800b24e:	1961      	adds	r1, r4, r5
 800b250:	428b      	cmp	r3, r1
 800b252:	bf01      	itttt	eq
 800b254:	6819      	ldreq	r1, [r3, #0]
 800b256:	685b      	ldreq	r3, [r3, #4]
 800b258:	1949      	addeq	r1, r1, r5
 800b25a:	6021      	streq	r1, [r4, #0]
 800b25c:	e7ed      	b.n	800b23a <_free_r+0x22>
 800b25e:	461a      	mov	r2, r3
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	b10b      	cbz	r3, 800b268 <_free_r+0x50>
 800b264:	42a3      	cmp	r3, r4
 800b266:	d9fa      	bls.n	800b25e <_free_r+0x46>
 800b268:	6811      	ldr	r1, [r2, #0]
 800b26a:	1855      	adds	r5, r2, r1
 800b26c:	42a5      	cmp	r5, r4
 800b26e:	d10b      	bne.n	800b288 <_free_r+0x70>
 800b270:	6824      	ldr	r4, [r4, #0]
 800b272:	4421      	add	r1, r4
 800b274:	1854      	adds	r4, r2, r1
 800b276:	42a3      	cmp	r3, r4
 800b278:	6011      	str	r1, [r2, #0]
 800b27a:	d1e0      	bne.n	800b23e <_free_r+0x26>
 800b27c:	681c      	ldr	r4, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	6053      	str	r3, [r2, #4]
 800b282:	4421      	add	r1, r4
 800b284:	6011      	str	r1, [r2, #0]
 800b286:	e7da      	b.n	800b23e <_free_r+0x26>
 800b288:	d902      	bls.n	800b290 <_free_r+0x78>
 800b28a:	230c      	movs	r3, #12
 800b28c:	6003      	str	r3, [r0, #0]
 800b28e:	e7d6      	b.n	800b23e <_free_r+0x26>
 800b290:	6825      	ldr	r5, [r4, #0]
 800b292:	1961      	adds	r1, r4, r5
 800b294:	428b      	cmp	r3, r1
 800b296:	bf04      	itt	eq
 800b298:	6819      	ldreq	r1, [r3, #0]
 800b29a:	685b      	ldreq	r3, [r3, #4]
 800b29c:	6063      	str	r3, [r4, #4]
 800b29e:	bf04      	itt	eq
 800b2a0:	1949      	addeq	r1, r1, r5
 800b2a2:	6021      	streq	r1, [r4, #0]
 800b2a4:	6054      	str	r4, [r2, #4]
 800b2a6:	e7ca      	b.n	800b23e <_free_r+0x26>
 800b2a8:	b003      	add	sp, #12
 800b2aa:	bd30      	pop	{r4, r5, pc}
 800b2ac:	20000410 	.word	0x20000410

0800b2b0 <sbrk_aligned>:
 800b2b0:	b570      	push	{r4, r5, r6, lr}
 800b2b2:	4e0e      	ldr	r6, [pc, #56]	; (800b2ec <sbrk_aligned+0x3c>)
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	6831      	ldr	r1, [r6, #0]
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	b911      	cbnz	r1, 800b2c2 <sbrk_aligned+0x12>
 800b2bc:	f000 fb4c 	bl	800b958 <_sbrk_r>
 800b2c0:	6030      	str	r0, [r6, #0]
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	f000 fb47 	bl	800b958 <_sbrk_r>
 800b2ca:	1c43      	adds	r3, r0, #1
 800b2cc:	d00a      	beq.n	800b2e4 <sbrk_aligned+0x34>
 800b2ce:	1cc4      	adds	r4, r0, #3
 800b2d0:	f024 0403 	bic.w	r4, r4, #3
 800b2d4:	42a0      	cmp	r0, r4
 800b2d6:	d007      	beq.n	800b2e8 <sbrk_aligned+0x38>
 800b2d8:	1a21      	subs	r1, r4, r0
 800b2da:	4628      	mov	r0, r5
 800b2dc:	f000 fb3c 	bl	800b958 <_sbrk_r>
 800b2e0:	3001      	adds	r0, #1
 800b2e2:	d101      	bne.n	800b2e8 <sbrk_aligned+0x38>
 800b2e4:	f04f 34ff 	mov.w	r4, #4294967295
 800b2e8:	4620      	mov	r0, r4
 800b2ea:	bd70      	pop	{r4, r5, r6, pc}
 800b2ec:	20000414 	.word	0x20000414

0800b2f0 <_malloc_r>:
 800b2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f4:	1ccd      	adds	r5, r1, #3
 800b2f6:	f025 0503 	bic.w	r5, r5, #3
 800b2fa:	3508      	adds	r5, #8
 800b2fc:	2d0c      	cmp	r5, #12
 800b2fe:	bf38      	it	cc
 800b300:	250c      	movcc	r5, #12
 800b302:	2d00      	cmp	r5, #0
 800b304:	4607      	mov	r7, r0
 800b306:	db01      	blt.n	800b30c <_malloc_r+0x1c>
 800b308:	42a9      	cmp	r1, r5
 800b30a:	d905      	bls.n	800b318 <_malloc_r+0x28>
 800b30c:	230c      	movs	r3, #12
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	2600      	movs	r6, #0
 800b312:	4630      	mov	r0, r6
 800b314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b318:	4e2e      	ldr	r6, [pc, #184]	; (800b3d4 <_malloc_r+0xe4>)
 800b31a:	f000 fc31 	bl	800bb80 <__malloc_lock>
 800b31e:	6833      	ldr	r3, [r6, #0]
 800b320:	461c      	mov	r4, r3
 800b322:	bb34      	cbnz	r4, 800b372 <_malloc_r+0x82>
 800b324:	4629      	mov	r1, r5
 800b326:	4638      	mov	r0, r7
 800b328:	f7ff ffc2 	bl	800b2b0 <sbrk_aligned>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	4604      	mov	r4, r0
 800b330:	d14d      	bne.n	800b3ce <_malloc_r+0xde>
 800b332:	6834      	ldr	r4, [r6, #0]
 800b334:	4626      	mov	r6, r4
 800b336:	2e00      	cmp	r6, #0
 800b338:	d140      	bne.n	800b3bc <_malloc_r+0xcc>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	4631      	mov	r1, r6
 800b33e:	4638      	mov	r0, r7
 800b340:	eb04 0803 	add.w	r8, r4, r3
 800b344:	f000 fb08 	bl	800b958 <_sbrk_r>
 800b348:	4580      	cmp	r8, r0
 800b34a:	d13a      	bne.n	800b3c2 <_malloc_r+0xd2>
 800b34c:	6821      	ldr	r1, [r4, #0]
 800b34e:	3503      	adds	r5, #3
 800b350:	1a6d      	subs	r5, r5, r1
 800b352:	f025 0503 	bic.w	r5, r5, #3
 800b356:	3508      	adds	r5, #8
 800b358:	2d0c      	cmp	r5, #12
 800b35a:	bf38      	it	cc
 800b35c:	250c      	movcc	r5, #12
 800b35e:	4629      	mov	r1, r5
 800b360:	4638      	mov	r0, r7
 800b362:	f7ff ffa5 	bl	800b2b0 <sbrk_aligned>
 800b366:	3001      	adds	r0, #1
 800b368:	d02b      	beq.n	800b3c2 <_malloc_r+0xd2>
 800b36a:	6823      	ldr	r3, [r4, #0]
 800b36c:	442b      	add	r3, r5
 800b36e:	6023      	str	r3, [r4, #0]
 800b370:	e00e      	b.n	800b390 <_malloc_r+0xa0>
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	1b52      	subs	r2, r2, r5
 800b376:	d41e      	bmi.n	800b3b6 <_malloc_r+0xc6>
 800b378:	2a0b      	cmp	r2, #11
 800b37a:	d916      	bls.n	800b3aa <_malloc_r+0xba>
 800b37c:	1961      	adds	r1, r4, r5
 800b37e:	42a3      	cmp	r3, r4
 800b380:	6025      	str	r5, [r4, #0]
 800b382:	bf18      	it	ne
 800b384:	6059      	strne	r1, [r3, #4]
 800b386:	6863      	ldr	r3, [r4, #4]
 800b388:	bf08      	it	eq
 800b38a:	6031      	streq	r1, [r6, #0]
 800b38c:	5162      	str	r2, [r4, r5]
 800b38e:	604b      	str	r3, [r1, #4]
 800b390:	4638      	mov	r0, r7
 800b392:	f104 060b 	add.w	r6, r4, #11
 800b396:	f000 fbf9 	bl	800bb8c <__malloc_unlock>
 800b39a:	f026 0607 	bic.w	r6, r6, #7
 800b39e:	1d23      	adds	r3, r4, #4
 800b3a0:	1af2      	subs	r2, r6, r3
 800b3a2:	d0b6      	beq.n	800b312 <_malloc_r+0x22>
 800b3a4:	1b9b      	subs	r3, r3, r6
 800b3a6:	50a3      	str	r3, [r4, r2]
 800b3a8:	e7b3      	b.n	800b312 <_malloc_r+0x22>
 800b3aa:	6862      	ldr	r2, [r4, #4]
 800b3ac:	42a3      	cmp	r3, r4
 800b3ae:	bf0c      	ite	eq
 800b3b0:	6032      	streq	r2, [r6, #0]
 800b3b2:	605a      	strne	r2, [r3, #4]
 800b3b4:	e7ec      	b.n	800b390 <_malloc_r+0xa0>
 800b3b6:	4623      	mov	r3, r4
 800b3b8:	6864      	ldr	r4, [r4, #4]
 800b3ba:	e7b2      	b.n	800b322 <_malloc_r+0x32>
 800b3bc:	4634      	mov	r4, r6
 800b3be:	6876      	ldr	r6, [r6, #4]
 800b3c0:	e7b9      	b.n	800b336 <_malloc_r+0x46>
 800b3c2:	230c      	movs	r3, #12
 800b3c4:	603b      	str	r3, [r7, #0]
 800b3c6:	4638      	mov	r0, r7
 800b3c8:	f000 fbe0 	bl	800bb8c <__malloc_unlock>
 800b3cc:	e7a1      	b.n	800b312 <_malloc_r+0x22>
 800b3ce:	6025      	str	r5, [r4, #0]
 800b3d0:	e7de      	b.n	800b390 <_malloc_r+0xa0>
 800b3d2:	bf00      	nop
 800b3d4:	20000410 	.word	0x20000410

0800b3d8 <__ssputs_r>:
 800b3d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3dc:	688e      	ldr	r6, [r1, #8]
 800b3de:	429e      	cmp	r6, r3
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	4690      	mov	r8, r2
 800b3e6:	461f      	mov	r7, r3
 800b3e8:	d838      	bhi.n	800b45c <__ssputs_r+0x84>
 800b3ea:	898a      	ldrh	r2, [r1, #12]
 800b3ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b3f0:	d032      	beq.n	800b458 <__ssputs_r+0x80>
 800b3f2:	6825      	ldr	r5, [r4, #0]
 800b3f4:	6909      	ldr	r1, [r1, #16]
 800b3f6:	eba5 0901 	sub.w	r9, r5, r1
 800b3fa:	6965      	ldr	r5, [r4, #20]
 800b3fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b404:	3301      	adds	r3, #1
 800b406:	444b      	add	r3, r9
 800b408:	106d      	asrs	r5, r5, #1
 800b40a:	429d      	cmp	r5, r3
 800b40c:	bf38      	it	cc
 800b40e:	461d      	movcc	r5, r3
 800b410:	0553      	lsls	r3, r2, #21
 800b412:	d531      	bpl.n	800b478 <__ssputs_r+0xa0>
 800b414:	4629      	mov	r1, r5
 800b416:	f7ff ff6b 	bl	800b2f0 <_malloc_r>
 800b41a:	4606      	mov	r6, r0
 800b41c:	b950      	cbnz	r0, 800b434 <__ssputs_r+0x5c>
 800b41e:	230c      	movs	r3, #12
 800b420:	f8ca 3000 	str.w	r3, [sl]
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b42a:	81a3      	strh	r3, [r4, #12]
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b434:	6921      	ldr	r1, [r4, #16]
 800b436:	464a      	mov	r2, r9
 800b438:	f7ff fa08 	bl	800a84c <memcpy>
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b446:	81a3      	strh	r3, [r4, #12]
 800b448:	6126      	str	r6, [r4, #16]
 800b44a:	6165      	str	r5, [r4, #20]
 800b44c:	444e      	add	r6, r9
 800b44e:	eba5 0509 	sub.w	r5, r5, r9
 800b452:	6026      	str	r6, [r4, #0]
 800b454:	60a5      	str	r5, [r4, #8]
 800b456:	463e      	mov	r6, r7
 800b458:	42be      	cmp	r6, r7
 800b45a:	d900      	bls.n	800b45e <__ssputs_r+0x86>
 800b45c:	463e      	mov	r6, r7
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	4632      	mov	r2, r6
 800b462:	4641      	mov	r1, r8
 800b464:	f000 fb72 	bl	800bb4c <memmove>
 800b468:	68a3      	ldr	r3, [r4, #8]
 800b46a:	1b9b      	subs	r3, r3, r6
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	4433      	add	r3, r6
 800b472:	6023      	str	r3, [r4, #0]
 800b474:	2000      	movs	r0, #0
 800b476:	e7db      	b.n	800b430 <__ssputs_r+0x58>
 800b478:	462a      	mov	r2, r5
 800b47a:	f000 fb8d 	bl	800bb98 <_realloc_r>
 800b47e:	4606      	mov	r6, r0
 800b480:	2800      	cmp	r0, #0
 800b482:	d1e1      	bne.n	800b448 <__ssputs_r+0x70>
 800b484:	6921      	ldr	r1, [r4, #16]
 800b486:	4650      	mov	r0, sl
 800b488:	f7ff fec6 	bl	800b218 <_free_r>
 800b48c:	e7c7      	b.n	800b41e <__ssputs_r+0x46>
	...

0800b490 <_svfiprintf_r>:
 800b490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	4698      	mov	r8, r3
 800b496:	898b      	ldrh	r3, [r1, #12]
 800b498:	061b      	lsls	r3, r3, #24
 800b49a:	b09d      	sub	sp, #116	; 0x74
 800b49c:	4607      	mov	r7, r0
 800b49e:	460d      	mov	r5, r1
 800b4a0:	4614      	mov	r4, r2
 800b4a2:	d50e      	bpl.n	800b4c2 <_svfiprintf_r+0x32>
 800b4a4:	690b      	ldr	r3, [r1, #16]
 800b4a6:	b963      	cbnz	r3, 800b4c2 <_svfiprintf_r+0x32>
 800b4a8:	2140      	movs	r1, #64	; 0x40
 800b4aa:	f7ff ff21 	bl	800b2f0 <_malloc_r>
 800b4ae:	6028      	str	r0, [r5, #0]
 800b4b0:	6128      	str	r0, [r5, #16]
 800b4b2:	b920      	cbnz	r0, 800b4be <_svfiprintf_r+0x2e>
 800b4b4:	230c      	movs	r3, #12
 800b4b6:	603b      	str	r3, [r7, #0]
 800b4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4bc:	e0d1      	b.n	800b662 <_svfiprintf_r+0x1d2>
 800b4be:	2340      	movs	r3, #64	; 0x40
 800b4c0:	616b      	str	r3, [r5, #20]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c6:	2320      	movs	r3, #32
 800b4c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4d0:	2330      	movs	r3, #48	; 0x30
 800b4d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b67c <_svfiprintf_r+0x1ec>
 800b4d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b4da:	f04f 0901 	mov.w	r9, #1
 800b4de:	4623      	mov	r3, r4
 800b4e0:	469a      	mov	sl, r3
 800b4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e6:	b10a      	cbz	r2, 800b4ec <_svfiprintf_r+0x5c>
 800b4e8:	2a25      	cmp	r2, #37	; 0x25
 800b4ea:	d1f9      	bne.n	800b4e0 <_svfiprintf_r+0x50>
 800b4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f0:	d00b      	beq.n	800b50a <_svfiprintf_r+0x7a>
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	4622      	mov	r2, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	4638      	mov	r0, r7
 800b4fa:	f7ff ff6d 	bl	800b3d8 <__ssputs_r>
 800b4fe:	3001      	adds	r0, #1
 800b500:	f000 80aa 	beq.w	800b658 <_svfiprintf_r+0x1c8>
 800b504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b506:	445a      	add	r2, fp
 800b508:	9209      	str	r2, [sp, #36]	; 0x24
 800b50a:	f89a 3000 	ldrb.w	r3, [sl]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f000 80a2 	beq.w	800b658 <_svfiprintf_r+0x1c8>
 800b514:	2300      	movs	r3, #0
 800b516:	f04f 32ff 	mov.w	r2, #4294967295
 800b51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b51e:	f10a 0a01 	add.w	sl, sl, #1
 800b522:	9304      	str	r3, [sp, #16]
 800b524:	9307      	str	r3, [sp, #28]
 800b526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b52a:	931a      	str	r3, [sp, #104]	; 0x68
 800b52c:	4654      	mov	r4, sl
 800b52e:	2205      	movs	r2, #5
 800b530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b534:	4851      	ldr	r0, [pc, #324]	; (800b67c <_svfiprintf_r+0x1ec>)
 800b536:	f7f4 fe53 	bl	80001e0 <memchr>
 800b53a:	9a04      	ldr	r2, [sp, #16]
 800b53c:	b9d8      	cbnz	r0, 800b576 <_svfiprintf_r+0xe6>
 800b53e:	06d0      	lsls	r0, r2, #27
 800b540:	bf44      	itt	mi
 800b542:	2320      	movmi	r3, #32
 800b544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b548:	0711      	lsls	r1, r2, #28
 800b54a:	bf44      	itt	mi
 800b54c:	232b      	movmi	r3, #43	; 0x2b
 800b54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b552:	f89a 3000 	ldrb.w	r3, [sl]
 800b556:	2b2a      	cmp	r3, #42	; 0x2a
 800b558:	d015      	beq.n	800b586 <_svfiprintf_r+0xf6>
 800b55a:	9a07      	ldr	r2, [sp, #28]
 800b55c:	4654      	mov	r4, sl
 800b55e:	2000      	movs	r0, #0
 800b560:	f04f 0c0a 	mov.w	ip, #10
 800b564:	4621      	mov	r1, r4
 800b566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b56a:	3b30      	subs	r3, #48	; 0x30
 800b56c:	2b09      	cmp	r3, #9
 800b56e:	d94e      	bls.n	800b60e <_svfiprintf_r+0x17e>
 800b570:	b1b0      	cbz	r0, 800b5a0 <_svfiprintf_r+0x110>
 800b572:	9207      	str	r2, [sp, #28]
 800b574:	e014      	b.n	800b5a0 <_svfiprintf_r+0x110>
 800b576:	eba0 0308 	sub.w	r3, r0, r8
 800b57a:	fa09 f303 	lsl.w	r3, r9, r3
 800b57e:	4313      	orrs	r3, r2
 800b580:	9304      	str	r3, [sp, #16]
 800b582:	46a2      	mov	sl, r4
 800b584:	e7d2      	b.n	800b52c <_svfiprintf_r+0x9c>
 800b586:	9b03      	ldr	r3, [sp, #12]
 800b588:	1d19      	adds	r1, r3, #4
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	9103      	str	r1, [sp, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	bfbb      	ittet	lt
 800b592:	425b      	neglt	r3, r3
 800b594:	f042 0202 	orrlt.w	r2, r2, #2
 800b598:	9307      	strge	r3, [sp, #28]
 800b59a:	9307      	strlt	r3, [sp, #28]
 800b59c:	bfb8      	it	lt
 800b59e:	9204      	strlt	r2, [sp, #16]
 800b5a0:	7823      	ldrb	r3, [r4, #0]
 800b5a2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5a4:	d10c      	bne.n	800b5c0 <_svfiprintf_r+0x130>
 800b5a6:	7863      	ldrb	r3, [r4, #1]
 800b5a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5aa:	d135      	bne.n	800b618 <_svfiprintf_r+0x188>
 800b5ac:	9b03      	ldr	r3, [sp, #12]
 800b5ae:	1d1a      	adds	r2, r3, #4
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	9203      	str	r2, [sp, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	bfb8      	it	lt
 800b5b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5bc:	3402      	adds	r4, #2
 800b5be:	9305      	str	r3, [sp, #20]
 800b5c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b68c <_svfiprintf_r+0x1fc>
 800b5c4:	7821      	ldrb	r1, [r4, #0]
 800b5c6:	2203      	movs	r2, #3
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	f7f4 fe09 	bl	80001e0 <memchr>
 800b5ce:	b140      	cbz	r0, 800b5e2 <_svfiprintf_r+0x152>
 800b5d0:	2340      	movs	r3, #64	; 0x40
 800b5d2:	eba0 000a 	sub.w	r0, r0, sl
 800b5d6:	fa03 f000 	lsl.w	r0, r3, r0
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	4303      	orrs	r3, r0
 800b5de:	3401      	adds	r4, #1
 800b5e0:	9304      	str	r3, [sp, #16]
 800b5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e6:	4826      	ldr	r0, [pc, #152]	; (800b680 <_svfiprintf_r+0x1f0>)
 800b5e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b5ec:	2206      	movs	r2, #6
 800b5ee:	f7f4 fdf7 	bl	80001e0 <memchr>
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d038      	beq.n	800b668 <_svfiprintf_r+0x1d8>
 800b5f6:	4b23      	ldr	r3, [pc, #140]	; (800b684 <_svfiprintf_r+0x1f4>)
 800b5f8:	bb1b      	cbnz	r3, 800b642 <_svfiprintf_r+0x1b2>
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	3307      	adds	r3, #7
 800b5fe:	f023 0307 	bic.w	r3, r3, #7
 800b602:	3308      	adds	r3, #8
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b608:	4433      	add	r3, r6
 800b60a:	9309      	str	r3, [sp, #36]	; 0x24
 800b60c:	e767      	b.n	800b4de <_svfiprintf_r+0x4e>
 800b60e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b612:	460c      	mov	r4, r1
 800b614:	2001      	movs	r0, #1
 800b616:	e7a5      	b.n	800b564 <_svfiprintf_r+0xd4>
 800b618:	2300      	movs	r3, #0
 800b61a:	3401      	adds	r4, #1
 800b61c:	9305      	str	r3, [sp, #20]
 800b61e:	4619      	mov	r1, r3
 800b620:	f04f 0c0a 	mov.w	ip, #10
 800b624:	4620      	mov	r0, r4
 800b626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b62a:	3a30      	subs	r2, #48	; 0x30
 800b62c:	2a09      	cmp	r2, #9
 800b62e:	d903      	bls.n	800b638 <_svfiprintf_r+0x1a8>
 800b630:	2b00      	cmp	r3, #0
 800b632:	d0c5      	beq.n	800b5c0 <_svfiprintf_r+0x130>
 800b634:	9105      	str	r1, [sp, #20]
 800b636:	e7c3      	b.n	800b5c0 <_svfiprintf_r+0x130>
 800b638:	fb0c 2101 	mla	r1, ip, r1, r2
 800b63c:	4604      	mov	r4, r0
 800b63e:	2301      	movs	r3, #1
 800b640:	e7f0      	b.n	800b624 <_svfiprintf_r+0x194>
 800b642:	ab03      	add	r3, sp, #12
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	462a      	mov	r2, r5
 800b648:	4b0f      	ldr	r3, [pc, #60]	; (800b688 <_svfiprintf_r+0x1f8>)
 800b64a:	a904      	add	r1, sp, #16
 800b64c:	4638      	mov	r0, r7
 800b64e:	f7fb fed1 	bl	80073f4 <_printf_float>
 800b652:	1c42      	adds	r2, r0, #1
 800b654:	4606      	mov	r6, r0
 800b656:	d1d6      	bne.n	800b606 <_svfiprintf_r+0x176>
 800b658:	89ab      	ldrh	r3, [r5, #12]
 800b65a:	065b      	lsls	r3, r3, #25
 800b65c:	f53f af2c 	bmi.w	800b4b8 <_svfiprintf_r+0x28>
 800b660:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b662:	b01d      	add	sp, #116	; 0x74
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	ab03      	add	r3, sp, #12
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	462a      	mov	r2, r5
 800b66e:	4b06      	ldr	r3, [pc, #24]	; (800b688 <_svfiprintf_r+0x1f8>)
 800b670:	a904      	add	r1, sp, #16
 800b672:	4638      	mov	r0, r7
 800b674:	f7fc f962 	bl	800793c <_printf_i>
 800b678:	e7eb      	b.n	800b652 <_svfiprintf_r+0x1c2>
 800b67a:	bf00      	nop
 800b67c:	0800c264 	.word	0x0800c264
 800b680:	0800c26e 	.word	0x0800c26e
 800b684:	080073f5 	.word	0x080073f5
 800b688:	0800b3d9 	.word	0x0800b3d9
 800b68c:	0800c26a 	.word	0x0800c26a

0800b690 <__sfputc_r>:
 800b690:	6893      	ldr	r3, [r2, #8]
 800b692:	3b01      	subs	r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	b410      	push	{r4}
 800b698:	6093      	str	r3, [r2, #8]
 800b69a:	da08      	bge.n	800b6ae <__sfputc_r+0x1e>
 800b69c:	6994      	ldr	r4, [r2, #24]
 800b69e:	42a3      	cmp	r3, r4
 800b6a0:	db01      	blt.n	800b6a6 <__sfputc_r+0x16>
 800b6a2:	290a      	cmp	r1, #10
 800b6a4:	d103      	bne.n	800b6ae <__sfputc_r+0x1e>
 800b6a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6aa:	f7fd bbe7 	b.w	8008e7c <__swbuf_r>
 800b6ae:	6813      	ldr	r3, [r2, #0]
 800b6b0:	1c58      	adds	r0, r3, #1
 800b6b2:	6010      	str	r0, [r2, #0]
 800b6b4:	7019      	strb	r1, [r3, #0]
 800b6b6:	4608      	mov	r0, r1
 800b6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6bc:	4770      	bx	lr

0800b6be <__sfputs_r>:
 800b6be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c0:	4606      	mov	r6, r0
 800b6c2:	460f      	mov	r7, r1
 800b6c4:	4614      	mov	r4, r2
 800b6c6:	18d5      	adds	r5, r2, r3
 800b6c8:	42ac      	cmp	r4, r5
 800b6ca:	d101      	bne.n	800b6d0 <__sfputs_r+0x12>
 800b6cc:	2000      	movs	r0, #0
 800b6ce:	e007      	b.n	800b6e0 <__sfputs_r+0x22>
 800b6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d4:	463a      	mov	r2, r7
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	f7ff ffda 	bl	800b690 <__sfputc_r>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d1f3      	bne.n	800b6c8 <__sfputs_r+0xa>
 800b6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b6e4 <_vfiprintf_r>:
 800b6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	b09d      	sub	sp, #116	; 0x74
 800b6ec:	4614      	mov	r4, r2
 800b6ee:	4698      	mov	r8, r3
 800b6f0:	4606      	mov	r6, r0
 800b6f2:	b118      	cbz	r0, 800b6fc <_vfiprintf_r+0x18>
 800b6f4:	6983      	ldr	r3, [r0, #24]
 800b6f6:	b90b      	cbnz	r3, 800b6fc <_vfiprintf_r+0x18>
 800b6f8:	f7fe fc16 	bl	8009f28 <__sinit>
 800b6fc:	4b89      	ldr	r3, [pc, #548]	; (800b924 <_vfiprintf_r+0x240>)
 800b6fe:	429d      	cmp	r5, r3
 800b700:	d11b      	bne.n	800b73a <_vfiprintf_r+0x56>
 800b702:	6875      	ldr	r5, [r6, #4]
 800b704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b706:	07d9      	lsls	r1, r3, #31
 800b708:	d405      	bmi.n	800b716 <_vfiprintf_r+0x32>
 800b70a:	89ab      	ldrh	r3, [r5, #12]
 800b70c:	059a      	lsls	r2, r3, #22
 800b70e:	d402      	bmi.n	800b716 <_vfiprintf_r+0x32>
 800b710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b712:	f7ff f81a 	bl	800a74a <__retarget_lock_acquire_recursive>
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	071b      	lsls	r3, r3, #28
 800b71a:	d501      	bpl.n	800b720 <_vfiprintf_r+0x3c>
 800b71c:	692b      	ldr	r3, [r5, #16]
 800b71e:	b9eb      	cbnz	r3, 800b75c <_vfiprintf_r+0x78>
 800b720:	4629      	mov	r1, r5
 800b722:	4630      	mov	r0, r6
 800b724:	f7fd fbfc 	bl	8008f20 <__swsetup_r>
 800b728:	b1c0      	cbz	r0, 800b75c <_vfiprintf_r+0x78>
 800b72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b72c:	07dc      	lsls	r4, r3, #31
 800b72e:	d50e      	bpl.n	800b74e <_vfiprintf_r+0x6a>
 800b730:	f04f 30ff 	mov.w	r0, #4294967295
 800b734:	b01d      	add	sp, #116	; 0x74
 800b736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b73a:	4b7b      	ldr	r3, [pc, #492]	; (800b928 <_vfiprintf_r+0x244>)
 800b73c:	429d      	cmp	r5, r3
 800b73e:	d101      	bne.n	800b744 <_vfiprintf_r+0x60>
 800b740:	68b5      	ldr	r5, [r6, #8]
 800b742:	e7df      	b.n	800b704 <_vfiprintf_r+0x20>
 800b744:	4b79      	ldr	r3, [pc, #484]	; (800b92c <_vfiprintf_r+0x248>)
 800b746:	429d      	cmp	r5, r3
 800b748:	bf08      	it	eq
 800b74a:	68f5      	ldreq	r5, [r6, #12]
 800b74c:	e7da      	b.n	800b704 <_vfiprintf_r+0x20>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	0598      	lsls	r0, r3, #22
 800b752:	d4ed      	bmi.n	800b730 <_vfiprintf_r+0x4c>
 800b754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b756:	f7fe fff9 	bl	800a74c <__retarget_lock_release_recursive>
 800b75a:	e7e9      	b.n	800b730 <_vfiprintf_r+0x4c>
 800b75c:	2300      	movs	r3, #0
 800b75e:	9309      	str	r3, [sp, #36]	; 0x24
 800b760:	2320      	movs	r3, #32
 800b762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b766:	f8cd 800c 	str.w	r8, [sp, #12]
 800b76a:	2330      	movs	r3, #48	; 0x30
 800b76c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b930 <_vfiprintf_r+0x24c>
 800b770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b774:	f04f 0901 	mov.w	r9, #1
 800b778:	4623      	mov	r3, r4
 800b77a:	469a      	mov	sl, r3
 800b77c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b780:	b10a      	cbz	r2, 800b786 <_vfiprintf_r+0xa2>
 800b782:	2a25      	cmp	r2, #37	; 0x25
 800b784:	d1f9      	bne.n	800b77a <_vfiprintf_r+0x96>
 800b786:	ebba 0b04 	subs.w	fp, sl, r4
 800b78a:	d00b      	beq.n	800b7a4 <_vfiprintf_r+0xc0>
 800b78c:	465b      	mov	r3, fp
 800b78e:	4622      	mov	r2, r4
 800b790:	4629      	mov	r1, r5
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ff93 	bl	800b6be <__sfputs_r>
 800b798:	3001      	adds	r0, #1
 800b79a:	f000 80aa 	beq.w	800b8f2 <_vfiprintf_r+0x20e>
 800b79e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7a0:	445a      	add	r2, fp
 800b7a2:	9209      	str	r2, [sp, #36]	; 0x24
 800b7a4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 80a2 	beq.w	800b8f2 <_vfiprintf_r+0x20e>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7b8:	f10a 0a01 	add.w	sl, sl, #1
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	9307      	str	r3, [sp, #28]
 800b7c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7c4:	931a      	str	r3, [sp, #104]	; 0x68
 800b7c6:	4654      	mov	r4, sl
 800b7c8:	2205      	movs	r2, #5
 800b7ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7ce:	4858      	ldr	r0, [pc, #352]	; (800b930 <_vfiprintf_r+0x24c>)
 800b7d0:	f7f4 fd06 	bl	80001e0 <memchr>
 800b7d4:	9a04      	ldr	r2, [sp, #16]
 800b7d6:	b9d8      	cbnz	r0, 800b810 <_vfiprintf_r+0x12c>
 800b7d8:	06d1      	lsls	r1, r2, #27
 800b7da:	bf44      	itt	mi
 800b7dc:	2320      	movmi	r3, #32
 800b7de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7e2:	0713      	lsls	r3, r2, #28
 800b7e4:	bf44      	itt	mi
 800b7e6:	232b      	movmi	r3, #43	; 0x2b
 800b7e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f0:	2b2a      	cmp	r3, #42	; 0x2a
 800b7f2:	d015      	beq.n	800b820 <_vfiprintf_r+0x13c>
 800b7f4:	9a07      	ldr	r2, [sp, #28]
 800b7f6:	4654      	mov	r4, sl
 800b7f8:	2000      	movs	r0, #0
 800b7fa:	f04f 0c0a 	mov.w	ip, #10
 800b7fe:	4621      	mov	r1, r4
 800b800:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b804:	3b30      	subs	r3, #48	; 0x30
 800b806:	2b09      	cmp	r3, #9
 800b808:	d94e      	bls.n	800b8a8 <_vfiprintf_r+0x1c4>
 800b80a:	b1b0      	cbz	r0, 800b83a <_vfiprintf_r+0x156>
 800b80c:	9207      	str	r2, [sp, #28]
 800b80e:	e014      	b.n	800b83a <_vfiprintf_r+0x156>
 800b810:	eba0 0308 	sub.w	r3, r0, r8
 800b814:	fa09 f303 	lsl.w	r3, r9, r3
 800b818:	4313      	orrs	r3, r2
 800b81a:	9304      	str	r3, [sp, #16]
 800b81c:	46a2      	mov	sl, r4
 800b81e:	e7d2      	b.n	800b7c6 <_vfiprintf_r+0xe2>
 800b820:	9b03      	ldr	r3, [sp, #12]
 800b822:	1d19      	adds	r1, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	9103      	str	r1, [sp, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	bfbb      	ittet	lt
 800b82c:	425b      	neglt	r3, r3
 800b82e:	f042 0202 	orrlt.w	r2, r2, #2
 800b832:	9307      	strge	r3, [sp, #28]
 800b834:	9307      	strlt	r3, [sp, #28]
 800b836:	bfb8      	it	lt
 800b838:	9204      	strlt	r2, [sp, #16]
 800b83a:	7823      	ldrb	r3, [r4, #0]
 800b83c:	2b2e      	cmp	r3, #46	; 0x2e
 800b83e:	d10c      	bne.n	800b85a <_vfiprintf_r+0x176>
 800b840:	7863      	ldrb	r3, [r4, #1]
 800b842:	2b2a      	cmp	r3, #42	; 0x2a
 800b844:	d135      	bne.n	800b8b2 <_vfiprintf_r+0x1ce>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	1d1a      	adds	r2, r3, #4
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	9203      	str	r2, [sp, #12]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	bfb8      	it	lt
 800b852:	f04f 33ff 	movlt.w	r3, #4294967295
 800b856:	3402      	adds	r4, #2
 800b858:	9305      	str	r3, [sp, #20]
 800b85a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b940 <_vfiprintf_r+0x25c>
 800b85e:	7821      	ldrb	r1, [r4, #0]
 800b860:	2203      	movs	r2, #3
 800b862:	4650      	mov	r0, sl
 800b864:	f7f4 fcbc 	bl	80001e0 <memchr>
 800b868:	b140      	cbz	r0, 800b87c <_vfiprintf_r+0x198>
 800b86a:	2340      	movs	r3, #64	; 0x40
 800b86c:	eba0 000a 	sub.w	r0, r0, sl
 800b870:	fa03 f000 	lsl.w	r0, r3, r0
 800b874:	9b04      	ldr	r3, [sp, #16]
 800b876:	4303      	orrs	r3, r0
 800b878:	3401      	adds	r4, #1
 800b87a:	9304      	str	r3, [sp, #16]
 800b87c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b880:	482c      	ldr	r0, [pc, #176]	; (800b934 <_vfiprintf_r+0x250>)
 800b882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b886:	2206      	movs	r2, #6
 800b888:	f7f4 fcaa 	bl	80001e0 <memchr>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	d03f      	beq.n	800b910 <_vfiprintf_r+0x22c>
 800b890:	4b29      	ldr	r3, [pc, #164]	; (800b938 <_vfiprintf_r+0x254>)
 800b892:	bb1b      	cbnz	r3, 800b8dc <_vfiprintf_r+0x1f8>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	3307      	adds	r3, #7
 800b898:	f023 0307 	bic.w	r3, r3, #7
 800b89c:	3308      	adds	r3, #8
 800b89e:	9303      	str	r3, [sp, #12]
 800b8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a2:	443b      	add	r3, r7
 800b8a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a6:	e767      	b.n	800b778 <_vfiprintf_r+0x94>
 800b8a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	2001      	movs	r0, #1
 800b8b0:	e7a5      	b.n	800b7fe <_vfiprintf_r+0x11a>
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	3401      	adds	r4, #1
 800b8b6:	9305      	str	r3, [sp, #20]
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	f04f 0c0a 	mov.w	ip, #10
 800b8be:	4620      	mov	r0, r4
 800b8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8c4:	3a30      	subs	r2, #48	; 0x30
 800b8c6:	2a09      	cmp	r2, #9
 800b8c8:	d903      	bls.n	800b8d2 <_vfiprintf_r+0x1ee>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d0c5      	beq.n	800b85a <_vfiprintf_r+0x176>
 800b8ce:	9105      	str	r1, [sp, #20]
 800b8d0:	e7c3      	b.n	800b85a <_vfiprintf_r+0x176>
 800b8d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e7f0      	b.n	800b8be <_vfiprintf_r+0x1da>
 800b8dc:	ab03      	add	r3, sp, #12
 800b8de:	9300      	str	r3, [sp, #0]
 800b8e0:	462a      	mov	r2, r5
 800b8e2:	4b16      	ldr	r3, [pc, #88]	; (800b93c <_vfiprintf_r+0x258>)
 800b8e4:	a904      	add	r1, sp, #16
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7fb fd84 	bl	80073f4 <_printf_float>
 800b8ec:	4607      	mov	r7, r0
 800b8ee:	1c78      	adds	r0, r7, #1
 800b8f0:	d1d6      	bne.n	800b8a0 <_vfiprintf_r+0x1bc>
 800b8f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8f4:	07d9      	lsls	r1, r3, #31
 800b8f6:	d405      	bmi.n	800b904 <_vfiprintf_r+0x220>
 800b8f8:	89ab      	ldrh	r3, [r5, #12]
 800b8fa:	059a      	lsls	r2, r3, #22
 800b8fc:	d402      	bmi.n	800b904 <_vfiprintf_r+0x220>
 800b8fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b900:	f7fe ff24 	bl	800a74c <__retarget_lock_release_recursive>
 800b904:	89ab      	ldrh	r3, [r5, #12]
 800b906:	065b      	lsls	r3, r3, #25
 800b908:	f53f af12 	bmi.w	800b730 <_vfiprintf_r+0x4c>
 800b90c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b90e:	e711      	b.n	800b734 <_vfiprintf_r+0x50>
 800b910:	ab03      	add	r3, sp, #12
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	462a      	mov	r2, r5
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <_vfiprintf_r+0x258>)
 800b918:	a904      	add	r1, sp, #16
 800b91a:	4630      	mov	r0, r6
 800b91c:	f7fc f80e 	bl	800793c <_printf_i>
 800b920:	e7e4      	b.n	800b8ec <_vfiprintf_r+0x208>
 800b922:	bf00      	nop
 800b924:	0800c04c 	.word	0x0800c04c
 800b928:	0800c06c 	.word	0x0800c06c
 800b92c:	0800c02c 	.word	0x0800c02c
 800b930:	0800c264 	.word	0x0800c264
 800b934:	0800c26e 	.word	0x0800c26e
 800b938:	080073f5 	.word	0x080073f5
 800b93c:	0800b6bf 	.word	0x0800b6bf
 800b940:	0800c26a 	.word	0x0800c26a
 800b944:	00000000 	.word	0x00000000

0800b948 <nan>:
 800b948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b950 <nan+0x8>
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	00000000 	.word	0x00000000
 800b954:	7ff80000 	.word	0x7ff80000

0800b958 <_sbrk_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	; (800b974 <_sbrk_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f6 fc9c 	bl	80022a0 <_sbrk>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_sbrk_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_sbrk_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	20000418 	.word	0x20000418

0800b978 <__sread>:
 800b978:	b510      	push	{r4, lr}
 800b97a:	460c      	mov	r4, r1
 800b97c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b980:	f000 f93a 	bl	800bbf8 <_read_r>
 800b984:	2800      	cmp	r0, #0
 800b986:	bfab      	itete	ge
 800b988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b98a:	89a3      	ldrhlt	r3, [r4, #12]
 800b98c:	181b      	addge	r3, r3, r0
 800b98e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b992:	bfac      	ite	ge
 800b994:	6563      	strge	r3, [r4, #84]	; 0x54
 800b996:	81a3      	strhlt	r3, [r4, #12]
 800b998:	bd10      	pop	{r4, pc}

0800b99a <__swrite>:
 800b99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b99e:	461f      	mov	r7, r3
 800b9a0:	898b      	ldrh	r3, [r1, #12]
 800b9a2:	05db      	lsls	r3, r3, #23
 800b9a4:	4605      	mov	r5, r0
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	4616      	mov	r6, r2
 800b9aa:	d505      	bpl.n	800b9b8 <__swrite+0x1e>
 800b9ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	f000 f8b8 	bl	800bb28 <_lseek_r>
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	4628      	mov	r0, r5
 800b9ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9ce:	f000 b837 	b.w	800ba40 <_write_r>

0800b9d2 <__sseek>:
 800b9d2:	b510      	push	{r4, lr}
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9da:	f000 f8a5 	bl	800bb28 <_lseek_r>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	bf15      	itete	ne
 800b9e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9ee:	81a3      	strheq	r3, [r4, #12]
 800b9f0:	bf18      	it	ne
 800b9f2:	81a3      	strhne	r3, [r4, #12]
 800b9f4:	bd10      	pop	{r4, pc}

0800b9f6 <__sclose>:
 800b9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9fa:	f000 b851 	b.w	800baa0 <_close_r>

0800b9fe <strncmp>:
 800b9fe:	b510      	push	{r4, lr}
 800ba00:	b17a      	cbz	r2, 800ba22 <strncmp+0x24>
 800ba02:	4603      	mov	r3, r0
 800ba04:	3901      	subs	r1, #1
 800ba06:	1884      	adds	r4, r0, r2
 800ba08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba0c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba10:	4290      	cmp	r0, r2
 800ba12:	d101      	bne.n	800ba18 <strncmp+0x1a>
 800ba14:	42a3      	cmp	r3, r4
 800ba16:	d101      	bne.n	800ba1c <strncmp+0x1e>
 800ba18:	1a80      	subs	r0, r0, r2
 800ba1a:	bd10      	pop	{r4, pc}
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1f3      	bne.n	800ba08 <strncmp+0xa>
 800ba20:	e7fa      	b.n	800ba18 <strncmp+0x1a>
 800ba22:	4610      	mov	r0, r2
 800ba24:	e7f9      	b.n	800ba1a <strncmp+0x1c>

0800ba26 <__ascii_wctomb>:
 800ba26:	b149      	cbz	r1, 800ba3c <__ascii_wctomb+0x16>
 800ba28:	2aff      	cmp	r2, #255	; 0xff
 800ba2a:	bf85      	ittet	hi
 800ba2c:	238a      	movhi	r3, #138	; 0x8a
 800ba2e:	6003      	strhi	r3, [r0, #0]
 800ba30:	700a      	strbls	r2, [r1, #0]
 800ba32:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba36:	bf98      	it	ls
 800ba38:	2001      	movls	r0, #1
 800ba3a:	4770      	bx	lr
 800ba3c:	4608      	mov	r0, r1
 800ba3e:	4770      	bx	lr

0800ba40 <_write_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	; (800ba60 <_write_r+0x20>)
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f7f6 fbd5 	bl	80021fe <_write>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_write_r+0x1e>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_write_r+0x1e>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	20000418 	.word	0x20000418

0800ba64 <__assert_func>:
 800ba64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba66:	4614      	mov	r4, r2
 800ba68:	461a      	mov	r2, r3
 800ba6a:	4b09      	ldr	r3, [pc, #36]	; (800ba90 <__assert_func+0x2c>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	4605      	mov	r5, r0
 800ba70:	68d8      	ldr	r0, [r3, #12]
 800ba72:	b14c      	cbz	r4, 800ba88 <__assert_func+0x24>
 800ba74:	4b07      	ldr	r3, [pc, #28]	; (800ba94 <__assert_func+0x30>)
 800ba76:	9100      	str	r1, [sp, #0]
 800ba78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba7c:	4906      	ldr	r1, [pc, #24]	; (800ba98 <__assert_func+0x34>)
 800ba7e:	462b      	mov	r3, r5
 800ba80:	f000 f81e 	bl	800bac0 <fiprintf>
 800ba84:	f000 f8ca 	bl	800bc1c <abort>
 800ba88:	4b04      	ldr	r3, [pc, #16]	; (800ba9c <__assert_func+0x38>)
 800ba8a:	461c      	mov	r4, r3
 800ba8c:	e7f3      	b.n	800ba76 <__assert_func+0x12>
 800ba8e:	bf00      	nop
 800ba90:	20000010 	.word	0x20000010
 800ba94:	0800c275 	.word	0x0800c275
 800ba98:	0800c282 	.word	0x0800c282
 800ba9c:	0800c2b0 	.word	0x0800c2b0

0800baa0 <_close_r>:
 800baa0:	b538      	push	{r3, r4, r5, lr}
 800baa2:	4d06      	ldr	r5, [pc, #24]	; (800babc <_close_r+0x1c>)
 800baa4:	2300      	movs	r3, #0
 800baa6:	4604      	mov	r4, r0
 800baa8:	4608      	mov	r0, r1
 800baaa:	602b      	str	r3, [r5, #0]
 800baac:	f7f6 fbc3 	bl	8002236 <_close>
 800bab0:	1c43      	adds	r3, r0, #1
 800bab2:	d102      	bne.n	800baba <_close_r+0x1a>
 800bab4:	682b      	ldr	r3, [r5, #0]
 800bab6:	b103      	cbz	r3, 800baba <_close_r+0x1a>
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	bd38      	pop	{r3, r4, r5, pc}
 800babc:	20000418 	.word	0x20000418

0800bac0 <fiprintf>:
 800bac0:	b40e      	push	{r1, r2, r3}
 800bac2:	b503      	push	{r0, r1, lr}
 800bac4:	4601      	mov	r1, r0
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	4805      	ldr	r0, [pc, #20]	; (800bae0 <fiprintf+0x20>)
 800baca:	f853 2b04 	ldr.w	r2, [r3], #4
 800bace:	6800      	ldr	r0, [r0, #0]
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	f7ff fe07 	bl	800b6e4 <_vfiprintf_r>
 800bad6:	b002      	add	sp, #8
 800bad8:	f85d eb04 	ldr.w	lr, [sp], #4
 800badc:	b003      	add	sp, #12
 800bade:	4770      	bx	lr
 800bae0:	20000010 	.word	0x20000010

0800bae4 <_fstat_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	4d07      	ldr	r5, [pc, #28]	; (800bb04 <_fstat_r+0x20>)
 800bae8:	2300      	movs	r3, #0
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	4611      	mov	r1, r2
 800baf0:	602b      	str	r3, [r5, #0]
 800baf2:	f7f6 fbac 	bl	800224e <_fstat>
 800baf6:	1c43      	adds	r3, r0, #1
 800baf8:	d102      	bne.n	800bb00 <_fstat_r+0x1c>
 800bafa:	682b      	ldr	r3, [r5, #0]
 800bafc:	b103      	cbz	r3, 800bb00 <_fstat_r+0x1c>
 800bafe:	6023      	str	r3, [r4, #0]
 800bb00:	bd38      	pop	{r3, r4, r5, pc}
 800bb02:	bf00      	nop
 800bb04:	20000418 	.word	0x20000418

0800bb08 <_isatty_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d06      	ldr	r5, [pc, #24]	; (800bb24 <_isatty_r+0x1c>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	602b      	str	r3, [r5, #0]
 800bb14:	f7f6 fbab 	bl	800226e <_isatty>
 800bb18:	1c43      	adds	r3, r0, #1
 800bb1a:	d102      	bne.n	800bb22 <_isatty_r+0x1a>
 800bb1c:	682b      	ldr	r3, [r5, #0]
 800bb1e:	b103      	cbz	r3, 800bb22 <_isatty_r+0x1a>
 800bb20:	6023      	str	r3, [r4, #0]
 800bb22:	bd38      	pop	{r3, r4, r5, pc}
 800bb24:	20000418 	.word	0x20000418

0800bb28 <_lseek_r>:
 800bb28:	b538      	push	{r3, r4, r5, lr}
 800bb2a:	4d07      	ldr	r5, [pc, #28]	; (800bb48 <_lseek_r+0x20>)
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	4608      	mov	r0, r1
 800bb30:	4611      	mov	r1, r2
 800bb32:	2200      	movs	r2, #0
 800bb34:	602a      	str	r2, [r5, #0]
 800bb36:	461a      	mov	r2, r3
 800bb38:	f7f6 fba4 	bl	8002284 <_lseek>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_lseek_r+0x1e>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_lseek_r+0x1e>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20000418 	.word	0x20000418

0800bb4c <memmove>:
 800bb4c:	4288      	cmp	r0, r1
 800bb4e:	b510      	push	{r4, lr}
 800bb50:	eb01 0402 	add.w	r4, r1, r2
 800bb54:	d902      	bls.n	800bb5c <memmove+0x10>
 800bb56:	4284      	cmp	r4, r0
 800bb58:	4623      	mov	r3, r4
 800bb5a:	d807      	bhi.n	800bb6c <memmove+0x20>
 800bb5c:	1e43      	subs	r3, r0, #1
 800bb5e:	42a1      	cmp	r1, r4
 800bb60:	d008      	beq.n	800bb74 <memmove+0x28>
 800bb62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb6a:	e7f8      	b.n	800bb5e <memmove+0x12>
 800bb6c:	4402      	add	r2, r0
 800bb6e:	4601      	mov	r1, r0
 800bb70:	428a      	cmp	r2, r1
 800bb72:	d100      	bne.n	800bb76 <memmove+0x2a>
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bb7e:	e7f7      	b.n	800bb70 <memmove+0x24>

0800bb80 <__malloc_lock>:
 800bb80:	4801      	ldr	r0, [pc, #4]	; (800bb88 <__malloc_lock+0x8>)
 800bb82:	f7fe bde2 	b.w	800a74a <__retarget_lock_acquire_recursive>
 800bb86:	bf00      	nop
 800bb88:	2000040c 	.word	0x2000040c

0800bb8c <__malloc_unlock>:
 800bb8c:	4801      	ldr	r0, [pc, #4]	; (800bb94 <__malloc_unlock+0x8>)
 800bb8e:	f7fe bddd 	b.w	800a74c <__retarget_lock_release_recursive>
 800bb92:	bf00      	nop
 800bb94:	2000040c 	.word	0x2000040c

0800bb98 <_realloc_r>:
 800bb98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb9c:	4680      	mov	r8, r0
 800bb9e:	4614      	mov	r4, r2
 800bba0:	460e      	mov	r6, r1
 800bba2:	b921      	cbnz	r1, 800bbae <_realloc_r+0x16>
 800bba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bba8:	4611      	mov	r1, r2
 800bbaa:	f7ff bba1 	b.w	800b2f0 <_malloc_r>
 800bbae:	b92a      	cbnz	r2, 800bbbc <_realloc_r+0x24>
 800bbb0:	f7ff fb32 	bl	800b218 <_free_r>
 800bbb4:	4625      	mov	r5, r4
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	f000 f835 	bl	800bc2a <_malloc_usable_size_r>
 800bbc0:	4284      	cmp	r4, r0
 800bbc2:	4607      	mov	r7, r0
 800bbc4:	d802      	bhi.n	800bbcc <_realloc_r+0x34>
 800bbc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bbca:	d812      	bhi.n	800bbf2 <_realloc_r+0x5a>
 800bbcc:	4621      	mov	r1, r4
 800bbce:	4640      	mov	r0, r8
 800bbd0:	f7ff fb8e 	bl	800b2f0 <_malloc_r>
 800bbd4:	4605      	mov	r5, r0
 800bbd6:	2800      	cmp	r0, #0
 800bbd8:	d0ed      	beq.n	800bbb6 <_realloc_r+0x1e>
 800bbda:	42bc      	cmp	r4, r7
 800bbdc:	4622      	mov	r2, r4
 800bbde:	4631      	mov	r1, r6
 800bbe0:	bf28      	it	cs
 800bbe2:	463a      	movcs	r2, r7
 800bbe4:	f7fe fe32 	bl	800a84c <memcpy>
 800bbe8:	4631      	mov	r1, r6
 800bbea:	4640      	mov	r0, r8
 800bbec:	f7ff fb14 	bl	800b218 <_free_r>
 800bbf0:	e7e1      	b.n	800bbb6 <_realloc_r+0x1e>
 800bbf2:	4635      	mov	r5, r6
 800bbf4:	e7df      	b.n	800bbb6 <_realloc_r+0x1e>
	...

0800bbf8 <_read_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d07      	ldr	r5, [pc, #28]	; (800bc18 <_read_r+0x20>)
 800bbfc:	4604      	mov	r4, r0
 800bbfe:	4608      	mov	r0, r1
 800bc00:	4611      	mov	r1, r2
 800bc02:	2200      	movs	r2, #0
 800bc04:	602a      	str	r2, [r5, #0]
 800bc06:	461a      	mov	r2, r3
 800bc08:	f7f6 fadc 	bl	80021c4 <_read>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_read_r+0x1e>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_read_r+0x1e>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20000418 	.word	0x20000418

0800bc1c <abort>:
 800bc1c:	b508      	push	{r3, lr}
 800bc1e:	2006      	movs	r0, #6
 800bc20:	f000 f834 	bl	800bc8c <raise>
 800bc24:	2001      	movs	r0, #1
 800bc26:	f7f6 fac3 	bl	80021b0 <_exit>

0800bc2a <_malloc_usable_size_r>:
 800bc2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc2e:	1f18      	subs	r0, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	bfbc      	itt	lt
 800bc34:	580b      	ldrlt	r3, [r1, r0]
 800bc36:	18c0      	addlt	r0, r0, r3
 800bc38:	4770      	bx	lr

0800bc3a <_raise_r>:
 800bc3a:	291f      	cmp	r1, #31
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	d904      	bls.n	800bc4e <_raise_r+0x14>
 800bc44:	2316      	movs	r3, #22
 800bc46:	6003      	str	r3, [r0, #0]
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295
 800bc4c:	bd38      	pop	{r3, r4, r5, pc}
 800bc4e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc50:	b112      	cbz	r2, 800bc58 <_raise_r+0x1e>
 800bc52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc56:	b94b      	cbnz	r3, 800bc6c <_raise_r+0x32>
 800bc58:	4620      	mov	r0, r4
 800bc5a:	f000 f831 	bl	800bcc0 <_getpid_r>
 800bc5e:	462a      	mov	r2, r5
 800bc60:	4601      	mov	r1, r0
 800bc62:	4620      	mov	r0, r4
 800bc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc68:	f000 b818 	b.w	800bc9c <_kill_r>
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d00a      	beq.n	800bc86 <_raise_r+0x4c>
 800bc70:	1c59      	adds	r1, r3, #1
 800bc72:	d103      	bne.n	800bc7c <_raise_r+0x42>
 800bc74:	2316      	movs	r3, #22
 800bc76:	6003      	str	r3, [r0, #0]
 800bc78:	2001      	movs	r0, #1
 800bc7a:	e7e7      	b.n	800bc4c <_raise_r+0x12>
 800bc7c:	2400      	movs	r4, #0
 800bc7e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc82:	4628      	mov	r0, r5
 800bc84:	4798      	blx	r3
 800bc86:	2000      	movs	r0, #0
 800bc88:	e7e0      	b.n	800bc4c <_raise_r+0x12>
	...

0800bc8c <raise>:
 800bc8c:	4b02      	ldr	r3, [pc, #8]	; (800bc98 <raise+0xc>)
 800bc8e:	4601      	mov	r1, r0
 800bc90:	6818      	ldr	r0, [r3, #0]
 800bc92:	f7ff bfd2 	b.w	800bc3a <_raise_r>
 800bc96:	bf00      	nop
 800bc98:	20000010 	.word	0x20000010

0800bc9c <_kill_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d07      	ldr	r5, [pc, #28]	; (800bcbc <_kill_r+0x20>)
 800bca0:	2300      	movs	r3, #0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	4611      	mov	r1, r2
 800bca8:	602b      	str	r3, [r5, #0]
 800bcaa:	f7f6 fa71 	bl	8002190 <_kill>
 800bcae:	1c43      	adds	r3, r0, #1
 800bcb0:	d102      	bne.n	800bcb8 <_kill_r+0x1c>
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	b103      	cbz	r3, 800bcb8 <_kill_r+0x1c>
 800bcb6:	6023      	str	r3, [r4, #0]
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000418 	.word	0x20000418

0800bcc0 <_getpid_r>:
 800bcc0:	f7f6 ba5e 	b.w	8002180 <_getpid>

0800bcc4 <_init>:
 800bcc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc6:	bf00      	nop
 800bcc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcca:	bc08      	pop	{r3}
 800bccc:	469e      	mov	lr, r3
 800bcce:	4770      	bx	lr

0800bcd0 <_fini>:
 800bcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd2:	bf00      	nop
 800bcd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcd6:	bc08      	pop	{r3}
 800bcd8:	469e      	mov	lr, r3
 800bcda:	4770      	bx	lr
