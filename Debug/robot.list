
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800bfb8  0800bfb8  0001bfb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c48c  0800c48c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c48c  0800c48c  0001c48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c494  0800c494  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c494  0800c494  0001c494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001e4  0800c680  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800c680  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127f4  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b25  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  00035530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  000364d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ee  00000000  00000000  00037338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e86  00000000  00000000  0005b626  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da828  00000000  00000000  0006f4ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00149cd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005634  00000000  00000000  00149d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfa0 	.word	0x0800bfa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800bfa0 	.word	0x0800bfa0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fee7 	bl	8002e2c <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f001 f9ee 	bl	8002444 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f002 f849 	bl	8003110 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f001 f9de 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000200 	.word	0x20000200
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f003 f84b 	bl	80041a4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f002 fc23 	bl	80039a0 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f001 f970 	bl	8002444 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	20000248 	.word	0x20000248
 8001188:	40026428 	.word	0x40026428

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f002 fb66 	bl	8003872 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f001 f94a 	bl	8002444 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f002 fb9e 	bl	8003900 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f001 f93b 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 ffa9 	bl	80041a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2039      	movs	r0, #57	; 0x39
 8001290:	f002 fab9 	bl	8003806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f002 fad2 	bl	800383e <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <MX_GPIO_Init+0x174>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a55      	ldr	r2, [pc, #340]	; (800141c <MX_GPIO_Init+0x174>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x174>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <MX_GPIO_Init+0x174>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <MX_GPIO_Init+0x174>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <MX_GPIO_Init+0x174>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <MX_GPIO_Init+0x174>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <MX_GPIO_Init+0x174>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x174>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_GPIO_Init+0x174>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a40      	ldr	r2, [pc, #256]	; (800141c <MX_GPIO_Init+0x174>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x174>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_GPIO_Init+0x174>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <MX_GPIO_Init+0x174>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_GPIO_Init+0x174>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_GPIO_Init+0x174>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_GPIO_Init+0x174>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x174>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f248 0181 	movw	r1, #32897	; 0x8081
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <MX_GPIO_Init+0x178>)
 800136e:	f003 f8cd 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <MX_GPIO_Init+0x17c>)
 800137a:	f003 f8c7 	bl	800450c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <MX_GPIO_Init+0x180>)
 8001386:	f003 f8c1 	bl	800450c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x184>)
 800139e:	f002 ff01 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = rec_left_Pin|rec_right_Pin;
 80013a2:	2306      	movs	r3, #6
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x180>)
 80013b6:	f002 fef5 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 80013ba:	f248 0381 	movw	r3, #32897	; 0x8081
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_GPIO_Init+0x178>)
 80013d4:	f002 fee6 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d8:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x17c>)
 80013f2:	f002 fed7 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x180>)
 8001410:	f002 fec8 	bl	80041a4 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40021000 	.word	0x40021000

08001430 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Funkcja umożliwiająca wysyłanie znaków przez uart za pomocą funkcji 'printf()'
int __io_putchar(int ch)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if (ch == '\n')
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d109      	bne.n	8001452 <__io_putchar+0x22>
    {
        uint8_t ch2 = '\r';
 800143e:	230d      	movs	r3, #13
 8001440:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001442:	f107 010f 	add.w	r1, r7, #15
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	2201      	movs	r2, #1
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <__io_putchar+0x3c>)
 800144e:	f005 f8b2 	bl	80065b6 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001452:	1d39      	adds	r1, r7, #4
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <__io_putchar+0x3c>)
 800145c:	f005 f8ab 	bl	80065b6 <HAL_UART_Transmit>
    return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200003c0 	.word	0x200003c0

08001470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	//przerwanie od TIM 10 - co 5 sekund
	if(htim == &htim10)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d10a      	bne.n	8001496 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001480:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001484:	4807      	ldr	r0, [pc, #28]	; (80014a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001486:	f003 f85a 	bl	800453e <HAL_GPIO_TogglePin>
		printf("%lu\n", battery_adc);			//przesłanie stacji dokującej informacji o zmierzonym napięciu baterii
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4806      	ldr	r0, [pc, #24]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001492:	f006 ff6b 	bl	800836c <iprintf>
	}
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000378 	.word	0x20000378
 80014a4:	40020c00 	.word	0x40020c00
 80014a8:	200002bc 	.word	0x200002bc
 80014ac:	0800bfb8 	.word	0x0800bfb8

080014b0 <STOP>:

//Funkcja zatrzymująca silniki - zatrzymanie robota
void STOP(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	speed = 0;
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <STOP+0x34>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80014ba:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <STOP+0x34>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2200      	movs	r2, #0
 80014c0:	2100      	movs	r1, #0
 80014c2:	4809      	ldr	r0, [pc, #36]	; (80014e8 <STOP+0x38>)
 80014c4:	f002 f9f7 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <STOP+0x3c>)
 80014d0:	f003 f81c 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014da:	4804      	ldr	r0, [pc, #16]	; (80014ec <STOP+0x3c>)
 80014dc:	f003 f816 	bl	800450c <HAL_GPIO_WritePin>
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200002c8 	.word	0x200002c8
 80014e8:	200002a8 	.word	0x200002a8
 80014ec:	40020800 	.word	0x40020800

080014f0 <HAL_UART_RxCpltCallback>:

//Przerwanie UART - odebranie danych
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	drive = atoi((char*)&RX_BUFFER[0]); 					//zapisanie odebranego znaku 'char' do zmiennej 'int'
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <HAL_UART_RxCpltCallback+0x34>)
 80014fa:	f006 f887 	bl	800760c <atoi>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a09      	ldr	r2, [pc, #36]	; (8001528 <HAL_UART_RxCpltCallback+0x38>)
 8001502:	6013      	str	r3, [r2, #0]
	if (drive == 0)
 8001504:	4b08      	ldr	r3, [pc, #32]	; (8001528 <HAL_UART_RxCpltCallback+0x38>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d101      	bne.n	8001510 <HAL_UART_RxCpltCallback+0x20>
		STOP();												//jeśli odebrano wartość '0' - bezwarunkowe zatrzymanie robota
 800150c:	f7ff ffd0 	bl	80014b0 <STOP>

	HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);	//wlaczenie nasluchiwania na kanale UART
 8001510:	2201      	movs	r2, #1
 8001512:	4904      	ldr	r1, [pc, #16]	; (8001524 <HAL_UART_RxCpltCallback+0x34>)
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <HAL_UART_RxCpltCallback+0x3c>)
 8001516:	f005 f8e0 	bl	80066da <HAL_UART_Receive_IT>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002c4 	.word	0x200002c4
 8001528:	20000000 	.word	0x20000000
 800152c:	200003c0 	.word	0x200003c0

08001530 <FORWARD>:

//Zestaw funkcji nadających kierunek i prędkość silnikom
void FORWARD(void){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <FORWARD+0x44>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	480e      	ldr	r0, [pc, #56]	; (8001578 <FORWARD+0x48>)
 800153e:	f002 f9ba 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 przód
 8001542:	2200      	movs	r2, #0
 8001544:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <FORWARD+0x4c>)
 800154a:	f002 ffdf 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 przód
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001554:	4809      	ldr	r0, [pc, #36]	; (800157c <FORWARD+0x4c>)
 8001556:	f002 ffd9 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 przód
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <FORWARD+0x50>)
 8001562:	f002 ffd3 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 przód
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	; 0x80
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <FORWARD+0x4c>)
 800156c:	f002 ffce 	bl	800450c <HAL_GPIO_WritePin>
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002c8 	.word	0x200002c8
 8001578:	200002a8 	.word	0x200002a8
 800157c:	40020800 	.word	0x40020800
 8001580:	40020000 	.word	0x40020000

08001584 <LEFT>:
void LEFT(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <LEFT+0x44>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2200      	movs	r2, #0
 800158e:	2100      	movs	r1, #0
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <LEFT+0x48>)
 8001592:	f002 f990 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001596:	2201      	movs	r2, #1
 8001598:	f44f 7180 	mov.w	r1, #256	; 0x100
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <LEFT+0x4c>)
 800159e:	f002 ffb5 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 80015a2:	2200      	movs	r2, #0
 80015a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015a8:	4809      	ldr	r0, [pc, #36]	; (80015d0 <LEFT+0x4c>)
 80015aa:	f002 ffaf 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 80015ae:	2201      	movs	r2, #1
 80015b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b4:	4807      	ldr	r0, [pc, #28]	; (80015d4 <LEFT+0x50>)
 80015b6:	f002 ffa9 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80015ba:	2200      	movs	r2, #0
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <LEFT+0x4c>)
 80015c0:	f002 ffa4 	bl	800450c <HAL_GPIO_WritePin>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200002c8 	.word	0x200002c8
 80015cc:	200002a8 	.word	0x200002a8
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020000 	.word	0x40020000

080015d8 <RIGHT>:
void RIGHT(void){
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <RIGHT+0x44>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <RIGHT+0x48>)
 80015e6:	f002 f966 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 80015ea:	2200      	movs	r2, #0
 80015ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015f0:	480c      	ldr	r0, [pc, #48]	; (8001624 <RIGHT+0x4c>)
 80015f2:	f002 ff8b 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015fc:	4809      	ldr	r0, [pc, #36]	; (8001624 <RIGHT+0x4c>)
 80015fe:	f002 ff85 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001608:	4807      	ldr	r0, [pc, #28]	; (8001628 <RIGHT+0x50>)
 800160a:	f002 ff7f 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 800160e:	2201      	movs	r2, #1
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	4804      	ldr	r0, [pc, #16]	; (8001624 <RIGHT+0x4c>)
 8001614:	f002 ff7a 	bl	800450c <HAL_GPIO_WritePin>
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200002c8 	.word	0x200002c8
 8001620:	200002a8 	.word	0x200002a8
 8001624:	40020800 	.word	0x40020800
 8001628:	40020000 	.word	0x40020000

0800162c <SPIN_R>:
void SPIN_R(void){
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001630:	4b0f      	ldr	r3, [pc, #60]	; (8001670 <SPIN_R+0x44>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2200      	movs	r2, #0
 8001636:	2100      	movs	r1, #0
 8001638:	480e      	ldr	r0, [pc, #56]	; (8001674 <SPIN_R+0x48>)
 800163a:	f002 f93c 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001644:	480c      	ldr	r0, [pc, #48]	; (8001678 <SPIN_R+0x4c>)
 8001646:	f002 ff61 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <SPIN_R+0x4c>)
 8001652:	f002 ff5b 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 7180 	mov.w	r1, #256	; 0x100
 800165c:	4807      	ldr	r0, [pc, #28]	; (800167c <SPIN_R+0x50>)
 800165e:	f002 ff55 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 8001662:	2201      	movs	r2, #1
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	4804      	ldr	r0, [pc, #16]	; (8001678 <SPIN_R+0x4c>)
 8001668:	f002 ff50 	bl	800450c <HAL_GPIO_WritePin>
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200002c8 	.word	0x200002c8
 8001674:	200002a8 	.word	0x200002a8
 8001678:	40020800 	.word	0x40020800
 800167c:	40020000 	.word	0x40020000

08001680 <SPIN_L>:
void SPIN_L(void){
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <SPIN_L+0x44>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <SPIN_L+0x48>)
 800168e:	f002 f912 	bl	80038b6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001698:	480c      	ldr	r0, [pc, #48]	; (80016cc <SPIN_L+0x4c>)
 800169a:	f002 ff37 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 800169e:	2201      	movs	r2, #1
 80016a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016a4:	4809      	ldr	r0, [pc, #36]	; (80016cc <SPIN_L+0x4c>)
 80016a6:	f002 ff31 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 80016aa:	2201      	movs	r2, #1
 80016ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b0:	4807      	ldr	r0, [pc, #28]	; (80016d0 <SPIN_L+0x50>)
 80016b2:	f002 ff2b 	bl	800450c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80016b6:	2200      	movs	r2, #0
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	4804      	ldr	r0, [pc, #16]	; (80016cc <SPIN_L+0x4c>)
 80016bc:	f002 ff26 	bl	800450c <HAL_GPIO_WritePin>
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	200002c8 	.word	0x200002c8
 80016c8:	200002a8 	.word	0x200002a8
 80016cc:	40020800 	.word	0x40020800
 80016d0:	40020000 	.word	0x40020000

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016da:	f001 fb11 	bl	8002d00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016de:	f000 fe47 	bl	8002370 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e2:	f7ff fde1 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e6:	f7ff fdbf 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 80016ea:	f001 f94b 	bl	8002984 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80016ee:	f001 fa63 	bl	8002bb8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80016f2:	f7ff fd4b 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 80016f6:	f7ff fc7f 	bl	8000ff8 <MX_ADC3_Init>
  MX_TIM2_Init();
 80016fa:	f000 fff1 	bl	80026e0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016fe:	f001 f897 	bl	8002830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1);	//uruchomienie konwersji ADC z DMA
 8001702:	2201      	movs	r2, #1
 8001704:	4984      	ldr	r1, [pc, #528]	; (8001918 <main+0x244>)
 8001706:	4885      	ldr	r0, [pc, #532]	; (800191c <main+0x248>)
 8001708:	f001 fbd4 	bl	8002eb4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim10);				//wlaczenie przerwan od timera 10 - dioda określająca działanie programu
 800170c:	4884      	ldr	r0, [pc, #528]	; (8001920 <main+0x24c>)
 800170e:	f003 fbd9 	bl	8004ec4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1); 		//timer 2 - obsługuje lewy czujnik odległości HC-SR04
 8001712:	2100      	movs	r1, #0
 8001714:	4883      	ldr	r0, [pc, #524]	; (8001924 <main+0x250>)
 8001716:	f003 fdc1 	bl	800529c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 800171a:	2104      	movs	r1, #4
 800171c:	4881      	ldr	r0, [pc, #516]	; (8001924 <main+0x250>)
 800171e:	f003 fdbd 	bl	800529c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001722:	2108      	movs	r1, #8
 8001724:	487f      	ldr	r0, [pc, #508]	; (8001924 <main+0x250>)
 8001726:	f003 fc97 	bl	8005058 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);		//timer 3 - obsługuje prawy czujnik odległości HC-SR04
 800172a:	2100      	movs	r1, #0
 800172c:	487e      	ldr	r0, [pc, #504]	; (8001928 <main+0x254>)
 800172e:	f003 fdb5 	bl	800529c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_2);
 8001732:	2104      	movs	r1, #4
 8001734:	487c      	ldr	r0, [pc, #496]	; (8001928 <main+0x254>)
 8001736:	f003 fdb1 	bl	800529c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800173a:	2108      	movs	r1, #8
 800173c:	487a      	ldr	r0, [pc, #488]	; (8001928 <main+0x254>)
 800173e:	f003 fc8b 	bl	8005058 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);	//wlaczenie nasluchiwania na kanale UART
 8001742:	2201      	movs	r2, #1
 8001744:	4979      	ldr	r1, [pc, #484]	; (800192c <main+0x258>)
 8001746:	487a      	ldr	r0, [pc, #488]	; (8001930 <main+0x25c>)
 8001748:	f004 ffc7 	bl	80066da <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t start1 = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	71fb      	strb	r3, [r7, #7]
  uint8_t start2 = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	71bb      	strb	r3, [r7, #6]
  uint8_t stop1 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	717b      	strb	r3, [r7, #5]
  uint8_t stop2 = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	713b      	strb	r3, [r7, #4]

  while (1)
  {
	  /*--------------CZUJNIKI ODLEGLOSCI----------------*/
	  start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	//wystąpienie zbocza narastającego sygnału 'echo'
 800175c:	2100      	movs	r1, #0
 800175e:	4871      	ldr	r0, [pc, #452]	; (8001924 <main+0x250>)
 8001760:	f004 f9a6 	bl	8005ab0 <HAL_TIM_ReadCapturedValue>
 8001764:	4603      	mov	r3, r0
 8001766:	71fb      	strb	r3, [r7, #7]
	  stop1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);		//wystąpienie zbocza opadającego sygnału 'echo'
 8001768:	2104      	movs	r1, #4
 800176a:	486e      	ldr	r0, [pc, #440]	; (8001924 <main+0x250>)
 800176c:	f004 f9a0 	bl	8005ab0 <HAL_TIM_ReadCapturedValue>
 8001770:	4603      	mov	r3, r0
 8001772:	717b      	strb	r3, [r7, #5]
	  distance_left = (stop1 - start1) / 58.0f;						//czas wystąpienia sygnału 'echo'
 8001774:	797a      	ldrb	r2, [r7, #5]
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001782:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001934 <main+0x260>
 8001786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 2a90 	vmov	r2, s15
 8001792:	4b69      	ldr	r3, [pc, #420]	; (8001938 <main+0x264>)
 8001794:	601a      	str	r2, [r3, #0]

	  start2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8001796:	2100      	movs	r1, #0
 8001798:	4863      	ldr	r0, [pc, #396]	; (8001928 <main+0x254>)
 800179a:	f004 f989 	bl	8005ab0 <HAL_TIM_ReadCapturedValue>
 800179e:	4603      	mov	r3, r0
 80017a0:	71bb      	strb	r3, [r7, #6]
	  stop2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80017a2:	2104      	movs	r1, #4
 80017a4:	4860      	ldr	r0, [pc, #384]	; (8001928 <main+0x254>)
 80017a6:	f004 f983 	bl	8005ab0 <HAL_TIM_ReadCapturedValue>
 80017aa:	4603      	mov	r3, r0
 80017ac:	713b      	strb	r3, [r7, #4]
	  distance_right = (stop2 - start2) / 58.0f;
 80017ae:	793a      	ldrb	r2, [r7, #4]
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017bc:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8001934 <main+0x260>
 80017c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c8:	ee17 2a90 	vmov	r2, s15
 80017cc:	4b5b      	ldr	r3, [pc, #364]	; (800193c <main+0x268>)
 80017ce:	601a      	str	r2, [r3, #0]

	  /* sygnał przychodzący od odbiorników -------------------------------------------IR */
	  if (HAL_GPIO_ReadPin(rec_left_GPIO_Port, rec_left_Pin) == GPIO_PIN_RESET)
 80017d0:	2102      	movs	r1, #2
 80017d2:	485b      	ldr	r0, [pc, #364]	; (8001940 <main+0x26c>)
 80017d4:	f002 fe82 	bl	80044dc <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d103      	bne.n	80017e6 <main+0x112>
		  rec_left = true;
 80017de:	4b59      	ldr	r3, [pc, #356]	; (8001944 <main+0x270>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	e002      	b.n	80017ec <main+0x118>
	  else
		  rec_left = false;
 80017e6:	4b57      	ldr	r3, [pc, #348]	; (8001944 <main+0x270>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]

	  if (HAL_GPIO_ReadPin(rec_right_GPIO_Port, rec_right_Pin) == GPIO_PIN_RESET)
 80017ec:	2104      	movs	r1, #4
 80017ee:	4854      	ldr	r0, [pc, #336]	; (8001940 <main+0x26c>)
 80017f0:	f002 fe74 	bl	80044dc <HAL_GPIO_ReadPin>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d103      	bne.n	8001802 <main+0x12e>
		  rec_right = true;
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <main+0x274>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	701a      	strb	r2, [r3, #0]
 8001800:	e002      	b.n	8001808 <main+0x134>
	  else
		  rec_right = false;
 8001802:	4b51      	ldr	r3, [pc, #324]	; (8001948 <main+0x274>)
 8001804:	2200      	movs	r2, #0
 8001806:	701a      	strb	r2, [r3, #0]

	  /*-----SWITCH DLA DANYCH ZE STACJI-------*/
	  switch(drive)
 8001808:	4b50      	ldr	r3, [pc, #320]	; (800194c <main+0x278>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b04      	cmp	r3, #4
 800180e:	d84d      	bhi.n	80018ac <main+0x1d8>
 8001810:	a201      	add	r2, pc, #4	; (adr r2, 8001818 <main+0x144>)
 8001812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001816:	bf00      	nop
 8001818:	0800182d 	.word	0x0800182d
 800181c:	08001839 	.word	0x08001839
 8001820:	08001847 	.word	0x08001847
 8001824:	08001855 	.word	0x08001855
 8001828:	08001875 	.word	0x08001875
	  {
	  	  case 0:
	  		  STOP();				//zatrzymanie robota
 800182c:	f7ff fe40 	bl	80014b0 <STOP>
	  		  drive = 10;
 8001830:	4b46      	ldr	r3, [pc, #280]	; (800194c <main+0x278>)
 8001832:	220a      	movs	r2, #10
 8001834:	601a      	str	r2, [r3, #0]
	  		  break;
 8001836:	e03a      	b.n	80018ae <main+0x1da>
	  	  case 1:
	  		  STATION = true;		//czujnik odległości stacji wykrył stację przed stykami
 8001838:	4b45      	ldr	r3, [pc, #276]	; (8001950 <main+0x27c>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
	  		  drive = 10;
 800183e:	4b43      	ldr	r3, [pc, #268]	; (800194c <main+0x278>)
 8001840:	220a      	movs	r2, #10
 8001842:	601a      	str	r2, [r3, #0]
	  		  break;
 8001844:	e033      	b.n	80018ae <main+0x1da>
	  	  case 2:
			  STATION = false;		//czujnik odległości stacji wykrył oddalenie się robota od styków
 8001846:	4b42      	ldr	r3, [pc, #264]	; (8001950 <main+0x27c>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
			  drive = 10;
 800184c:	4b3f      	ldr	r3, [pc, #252]	; (800194c <main+0x278>)
 800184e:	220a      	movs	r2, #10
 8001850:	601a      	str	r2, [r3, #0]
			  break;
 8001852:	e02c      	b.n	80018ae <main+0x1da>
	  	  case 3:
	  		  STOP();
 8001854:	f7ff fe2c 	bl	80014b0 <STOP>
	  		  if (DOCKING == false)	//stacja wykryła napięcie na stykach - robot jest zadokowany do stacji
 8001858:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <main+0x280>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	f083 0301 	eor.w	r3, r3, #1
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <main+0x198>
	  			  DOCKING = true;
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <main+0x280>)
 8001868:	2201      	movs	r2, #1
 800186a:	701a      	strb	r2, [r3, #0]
	  		  drive = 10;
 800186c:	4b37      	ldr	r3, [pc, #220]	; (800194c <main+0x278>)
 800186e:	220a      	movs	r2, #10
 8001870:	601a      	str	r2, [r3, #0]
			  break;
 8001872:	e01c      	b.n	80018ae <main+0x1da>
	  	  case 4:
  		  	  STOP();
 8001874:	f7ff fe1c 	bl	80014b0 <STOP>
  		  	  if (DOCKING == true)	//stacja przestała wykrywać napięcie na stykach - robot odłączył się od stacji
 8001878:	4b36      	ldr	r3, [pc, #216]	; (8001954 <main+0x280>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d011      	beq.n	80018a4 <main+0x1d0>
	  	  	  {
  		  		  DOCKING = false;
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <main+0x280>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
  		  		  //reset pomocniczych zmiennych procesu dokowania
				  spin_right = false;
 8001886:	4b34      	ldr	r3, [pc, #208]	; (8001958 <main+0x284>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 800188c:	4b33      	ldr	r3, [pc, #204]	; (800195c <main+0x288>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
				  left = false;
 8001892:	4b33      	ldr	r3, [pc, #204]	; (8001960 <main+0x28c>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <main+0x290>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
				  on_right = false;
 800189e:	4b32      	ldr	r3, [pc, #200]	; (8001968 <main+0x294>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
			  }
  		  	  drive = 10;
 80018a4:	4b29      	ldr	r3, [pc, #164]	; (800194c <main+0x278>)
 80018a6:	220a      	movs	r2, #10
 80018a8:	601a      	str	r2, [r3, #0]
			  break;
 80018aa:	e000      	b.n	80018ae <main+0x1da>
		  default:
			  break;
 80018ac:	bf00      	nop
	  	  }

	  if (DOCKING == true)
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <main+0x280>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f43f af52 	beq.w	800175c <main+0x88>
	  {
		  if (rec_left == true && rec_right == true && distance_left < 12 && distance_right > distance_left && STATION == false)
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <main+0x270>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d059      	beq.n	8001974 <main+0x2a0>
 80018c0:	4b21      	ldr	r3, [pc, #132]	; (8001948 <main+0x274>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d055      	beq.n	8001974 <main+0x2a0>
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <main+0x264>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b0b      	cmp	r3, #11
 80018ce:	d851      	bhi.n	8001974 <main+0x2a0>
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <main+0x268>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b18      	ldr	r3, [pc, #96]	; (8001938 <main+0x264>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d94b      	bls.n	8001974 <main+0x2a0>
 80018dc:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <main+0x27c>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	f083 0301 	eor.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d044      	beq.n	8001974 <main+0x2a0>
		  {
			  on_left = true;
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <main+0x298>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
			  on_right = false;
 80018f0:	4b1d      	ldr	r3, [pc, #116]	; (8001968 <main+0x294>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
			  left = false;
 80018f6:	4b1a      	ldr	r3, [pc, #104]	; (8001960 <main+0x28c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
			  right = false;
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <main+0x29c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 8001902:	4b16      	ldr	r3, [pc, #88]	; (800195c <main+0x288>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <main+0x284>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
			  center = false;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <main+0x290>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e05c      	b.n	80019d0 <main+0x2fc>
 8001916:	bf00      	nop
 8001918:	200002bc 	.word	0x200002bc
 800191c:	20000200 	.word	0x20000200
 8001920:	20000378 	.word	0x20000378
 8001924:	200002e8 	.word	0x200002e8
 8001928:	20000330 	.word	0x20000330
 800192c:	200002c4 	.word	0x200002c4
 8001930:	200003c0 	.word	0x200003c0
 8001934:	42680000 	.word	0x42680000
 8001938:	200002d8 	.word	0x200002d8
 800193c:	200002dc 	.word	0x200002dc
 8001940:	40020000 	.word	0x40020000
 8001944:	200002cc 	.word	0x200002cc
 8001948:	200002cd 	.word	0x200002cd
 800194c:	20000000 	.word	0x20000000
 8001950:	200002e0 	.word	0x200002e0
 8001954:	200002c0 	.word	0x200002c0
 8001958:	200002ce 	.word	0x200002ce
 800195c:	200002cf 	.word	0x200002cf
 8001960:	200002d2 	.word	0x200002d2
 8001964:	200002d0 	.word	0x200002d0
 8001968:	200002d4 	.word	0x200002d4
 800196c:	200002d3 	.word	0x200002d3
 8001970:	200002d1 	.word	0x200002d1
		  }
		  else if (rec_left == true && rec_right == true && distance_right < 12 && distance_left > distance_right && STATION == false)
 8001974:	4b8b      	ldr	r3, [pc, #556]	; (8001ba4 <main+0x4d0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d029      	beq.n	80019d0 <main+0x2fc>
 800197c:	4b8a      	ldr	r3, [pc, #552]	; (8001ba8 <main+0x4d4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d025      	beq.n	80019d0 <main+0x2fc>
 8001984:	4b89      	ldr	r3, [pc, #548]	; (8001bac <main+0x4d8>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b0b      	cmp	r3, #11
 800198a:	d821      	bhi.n	80019d0 <main+0x2fc>
 800198c:	4b88      	ldr	r3, [pc, #544]	; (8001bb0 <main+0x4dc>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b86      	ldr	r3, [pc, #536]	; (8001bac <main+0x4d8>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d91b      	bls.n	80019d0 <main+0x2fc>
 8001998:	4b86      	ldr	r3, [pc, #536]	; (8001bb4 <main+0x4e0>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	f083 0301 	eor.w	r3, r3, #1
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d014      	beq.n	80019d0 <main+0x2fc>
		  {
			  on_left = false;
 80019a6:	4b84      	ldr	r3, [pc, #528]	; (8001bb8 <main+0x4e4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
			  on_right = true;
 80019ac:	4b83      	ldr	r3, [pc, #524]	; (8001bbc <main+0x4e8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
			  left = false;
 80019b2:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <main+0x4ec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			  right = false;
 80019b8:	4b82      	ldr	r3, [pc, #520]	; (8001bc4 <main+0x4f0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 80019be:	4b82      	ldr	r3, [pc, #520]	; (8001bc8 <main+0x4f4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 80019c4:	4b81      	ldr	r3, [pc, #516]	; (8001bcc <main+0x4f8>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
			  center = false;
 80019ca:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <main+0x4fc>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
		  }

		  if (on_left == false && on_right == false)
 80019d0:	4b79      	ldr	r3, [pc, #484]	; (8001bb8 <main+0x4e4>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	f083 0301 	eor.w	r3, r3, #1
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8186 	beq.w	8001cec <main+0x618>
 80019e0:	4b76      	ldr	r3, [pc, #472]	; (8001bbc <main+0x4e8>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	f083 0301 	eor.w	r3, r3, #1
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 817e 	beq.w	8001cec <main+0x618>
		  {
			  //lewy TAK; prawy NIE + jest przy samej stacji + na wprost
			  if (rec_left == true && rec_right == false && STATION == true && left == false && distance_left < 12 && distance_right < 12)
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <main+0x4d0>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d029      	beq.n	8001a4c <main+0x378>
 80019f8:	4b6b      	ldr	r3, [pc, #428]	; (8001ba8 <main+0x4d4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f083 0301 	eor.w	r3, r3, #1
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d022      	beq.n	8001a4c <main+0x378>
 8001a06:	4b6b      	ldr	r3, [pc, #428]	; (8001bb4 <main+0x4e0>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01e      	beq.n	8001a4c <main+0x378>
 8001a0e:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <main+0x4ec>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	f083 0301 	eor.w	r3, r3, #1
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d017      	beq.n	8001a4c <main+0x378>
 8001a1c:	4b64      	ldr	r3, [pc, #400]	; (8001bb0 <main+0x4dc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b0b      	cmp	r3, #11
 8001a22:	d813      	bhi.n	8001a4c <main+0x378>
 8001a24:	4b61      	ldr	r3, [pc, #388]	; (8001bac <main+0x4d8>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b0b      	cmp	r3, #11
 8001a2a:	d80f      	bhi.n	8001a4c <main+0x378>
			  {
				  left = true;
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <main+0x4ec>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
				  right = false;
 8001a32:	4b64      	ldr	r3, [pc, #400]	; (8001bc4 <main+0x4f0>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <main+0x4f4>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
				  spin_right = false;
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <main+0x4f8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001a44:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <main+0x4fc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e14e      	b.n	8001cea <main+0x616>
			  }
			  //lewy NIE; prawy TAK + jest przy samej stacji + na wprost
			  else if (rec_left == false && rec_right == true && STATION == true && right == false && distance_left < 12 && distance_right < 12)
 8001a4c:	4b55      	ldr	r3, [pc, #340]	; (8001ba4 <main+0x4d0>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f083 0301 	eor.w	r3, r3, #1
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d026      	beq.n	8001aa8 <main+0x3d4>
 8001a5a:	4b53      	ldr	r3, [pc, #332]	; (8001ba8 <main+0x4d4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d022      	beq.n	8001aa8 <main+0x3d4>
 8001a62:	4b54      	ldr	r3, [pc, #336]	; (8001bb4 <main+0x4e0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d01e      	beq.n	8001aa8 <main+0x3d4>
 8001a6a:	4b56      	ldr	r3, [pc, #344]	; (8001bc4 <main+0x4f0>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	f083 0301 	eor.w	r3, r3, #1
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <main+0x3d4>
 8001a78:	4b4d      	ldr	r3, [pc, #308]	; (8001bb0 <main+0x4dc>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b0b      	cmp	r3, #11
 8001a7e:	d813      	bhi.n	8001aa8 <main+0x3d4>
 8001a80:	4b4a      	ldr	r3, [pc, #296]	; (8001bac <main+0x4d8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b0b      	cmp	r3, #11
 8001a86:	d80f      	bhi.n	8001aa8 <main+0x3d4>
			  {
				  left = false;
 8001a88:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <main+0x4ec>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
				  right = true;
 8001a8e:	4b4d      	ldr	r3, [pc, #308]	; (8001bc4 <main+0x4f0>)
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001a94:	4b4c      	ldr	r3, [pc, #304]	; (8001bc8 <main+0x4f4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
				  spin_right = false;
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <main+0x4f8>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001aa0:	4b4b      	ldr	r3, [pc, #300]	; (8001bd0 <main+0x4fc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e120      	b.n	8001cea <main+0x616>
			  }
			  //lewy NIE; prawy NIE
			  else if (	(rec_left == false && spin_right == false && STATION == false) ||
 8001aa8:	4b3e      	ldr	r3, [pc, #248]	; (8001ba4 <main+0x4d0>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	f083 0301 	eor.w	r3, r3, #1
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00d      	beq.n	8001ad2 <main+0x3fe>
 8001ab6:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <main+0x4f8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	f083 0301 	eor.w	r3, r3, #1
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d006      	beq.n	8001ad2 <main+0x3fe>
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <main+0x4e0>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	f083 0301 	eor.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d158      	bne.n	8001b84 <main+0x4b0>
					//lewy NIE; prawy TAK
					(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 8001ad2:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <main+0x4d0>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
			  else if (	(rec_left == false && spin_right == false && STATION == false) ||
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d011      	beq.n	8001b04 <main+0x430>
					(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 8001ae0:	4b31      	ldr	r3, [pc, #196]	; (8001ba8 <main+0x4d4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00d      	beq.n	8001b04 <main+0x430>
 8001ae8:	4b38      	ldr	r3, [pc, #224]	; (8001bcc <main+0x4f8>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	f083 0301 	eor.w	r3, r3, #1
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d006      	beq.n	8001b04 <main+0x430>
 8001af6:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <main+0x4e0>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	f083 0301 	eor.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d13f      	bne.n	8001b84 <main+0x4b0>
					//lewy NIE; prawy TAK + jest przy samej stacji + nie na wprost
					(rec_left == false && rec_right == true && STATION == true && spin_right == false && distance_left > distance_right && distance_right < 12)||
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <main+0x4d0>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f083 0301 	eor.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
					(rec_left == false && rec_right == true && spin_right == false && STATION == false) ||
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d018      	beq.n	8001b44 <main+0x470>
					(rec_left == false && rec_right == true && STATION == true && spin_right == false && distance_left > distance_right && distance_right < 12)||
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <main+0x4d4>)
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d014      	beq.n	8001b44 <main+0x470>
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <main+0x4e0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <main+0x470>
 8001b22:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <main+0x4f8>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	f083 0301 	eor.w	r3, r3, #1
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d009      	beq.n	8001b44 <main+0x470>
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <main+0x4dc>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <main+0x4d8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d903      	bls.n	8001b44 <main+0x470>
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <main+0x4d8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b0b      	cmp	r3, #11
 8001b42:	d91f      	bls.n	8001b84 <main+0x4b0>
					//lewy TAK; prawy NIE + jest przy samej stacji + nie na wprost
					(rec_left == true && rec_right == false && STATION == true && spin_right == false && distance_left > distance_right && distance_right < 12))
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <main+0x4d0>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
					(rec_left == false && rec_right == true && STATION == true && spin_right == false && distance_left > distance_right && distance_right < 12)||
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d043      	beq.n	8001bd4 <main+0x500>
					(rec_left == true && rec_right == false && STATION == true && spin_right == false && distance_left > distance_right && distance_right < 12))
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <main+0x4d4>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	f083 0301 	eor.w	r3, r3, #1
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d03c      	beq.n	8001bd4 <main+0x500>
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <main+0x4e0>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d038      	beq.n	8001bd4 <main+0x500>
 8001b62:	4b1a      	ldr	r3, [pc, #104]	; (8001bcc <main+0x4f8>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d031      	beq.n	8001bd4 <main+0x500>
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <main+0x4dc>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <main+0x4d8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d92b      	bls.n	8001bd4 <main+0x500>
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <main+0x4d8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2b0b      	cmp	r3, #11
 8001b82:	d827      	bhi.n	8001bd4 <main+0x500>
			  {
				  left = false;
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <main+0x4ec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
				  right = false;
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <main+0x4f0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001b90:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <main+0x4f4>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
				  spin_right = true;
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <main+0x4f8>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <main+0x4fc>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e0a2      	b.n	8001cea <main+0x616>
 8001ba4:	200002cc 	.word	0x200002cc
 8001ba8:	200002cd 	.word	0x200002cd
 8001bac:	200002dc 	.word	0x200002dc
 8001bb0:	200002d8 	.word	0x200002d8
 8001bb4:	200002e0 	.word	0x200002e0
 8001bb8:	200002d3 	.word	0x200002d3
 8001bbc:	200002d4 	.word	0x200002d4
 8001bc0:	200002d2 	.word	0x200002d2
 8001bc4:	200002d1 	.word	0x200002d1
 8001bc8:	200002cf 	.word	0x200002cf
 8001bcc:	200002ce 	.word	0x200002ce
 8001bd0:	200002d0 	.word	0x200002d0
			  }
			  //lewy TAK; prawy NIE
			  else if ( (rec_left == true && rec_right == false && spin_left == false && STATION == false) ||
 8001bd4:	4b94      	ldr	r3, [pc, #592]	; (8001e28 <main+0x754>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d014      	beq.n	8001c06 <main+0x532>
 8001bdc:	4b93      	ldr	r3, [pc, #588]	; (8001e2c <main+0x758>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00d      	beq.n	8001c06 <main+0x532>
 8001bea:	4b91      	ldr	r3, [pc, #580]	; (8001e30 <main+0x75c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	f083 0301 	eor.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d006      	beq.n	8001c06 <main+0x532>
 8001bf8:	4b8e      	ldr	r3, [pc, #568]	; (8001e34 <main+0x760>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d13f      	bne.n	8001c86 <main+0x5b2>
					  //lewy TAK; prawy NIE + jest przy samej stacji + nie na wprost
					  (rec_left == true && rec_right == false && STATION == true && spin_left == false && distance_left < 12 && distance_right > distance_left)||
 8001c06:	4b88      	ldr	r3, [pc, #544]	; (8001e28 <main+0x754>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
			  else if ( (rec_left == true && rec_right == false && spin_left == false && STATION == false) ||
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d01b      	beq.n	8001c46 <main+0x572>
					  (rec_left == true && rec_right == false && STATION == true && spin_left == false && distance_left < 12 && distance_right > distance_left)||
 8001c0e:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <main+0x758>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d014      	beq.n	8001c46 <main+0x572>
 8001c1c:	4b85      	ldr	r3, [pc, #532]	; (8001e34 <main+0x760>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <main+0x572>
 8001c24:	4b82      	ldr	r3, [pc, #520]	; (8001e30 <main+0x75c>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	f083 0301 	eor.w	r3, r3, #1
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d009      	beq.n	8001c46 <main+0x572>
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <main+0x764>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b0b      	cmp	r3, #11
 8001c38:	d805      	bhi.n	8001c46 <main+0x572>
 8001c3a:	4b80      	ldr	r3, [pc, #512]	; (8001e3c <main+0x768>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <main+0x764>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d81f      	bhi.n	8001c86 <main+0x5b2>
					  //lewy NIE; prawy TAK + jest przy samej stacji + nie na wprost
					  (rec_left == false && rec_right == true && STATION == true && spin_left == false && distance_left < 12 && distance_right > distance_left))
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <main+0x754>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	f083 0301 	eor.w	r3, r3, #1
 8001c4e:	b2db      	uxtb	r3, r3
					  (rec_left == true && rec_right == false && STATION == true && spin_left == false && distance_left < 12 && distance_right > distance_left)||
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d028      	beq.n	8001ca6 <main+0x5d2>
					  (rec_left == false && rec_right == true && STATION == true && spin_left == false && distance_left < 12 && distance_right > distance_left))
 8001c54:	4b75      	ldr	r3, [pc, #468]	; (8001e2c <main+0x758>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d024      	beq.n	8001ca6 <main+0x5d2>
 8001c5c:	4b75      	ldr	r3, [pc, #468]	; (8001e34 <main+0x760>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d020      	beq.n	8001ca6 <main+0x5d2>
 8001c64:	4b72      	ldr	r3, [pc, #456]	; (8001e30 <main+0x75c>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f083 0301 	eor.w	r3, r3, #1
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d019      	beq.n	8001ca6 <main+0x5d2>
 8001c72:	4b71      	ldr	r3, [pc, #452]	; (8001e38 <main+0x764>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b0b      	cmp	r3, #11
 8001c78:	d815      	bhi.n	8001ca6 <main+0x5d2>
 8001c7a:	4b70      	ldr	r3, [pc, #448]	; (8001e3c <main+0x768>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	4b6e      	ldr	r3, [pc, #440]	; (8001e38 <main+0x764>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d90f      	bls.n	8001ca6 <main+0x5d2>
			  {
				  left = false;
 8001c86:	4b6e      	ldr	r3, [pc, #440]	; (8001e40 <main+0x76c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
				  right = false;
 8001c8c:	4b6d      	ldr	r3, [pc, #436]	; (8001e44 <main+0x770>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
				  spin_left = true;
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <main+0x75c>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	701a      	strb	r2, [r3, #0]
				  spin_right = false;
 8001c98:	4b6b      	ldr	r3, [pc, #428]	; (8001e48 <main+0x774>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001c9e:	4b6b      	ldr	r3, [pc, #428]	; (8001e4c <main+0x778>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
 8001ca4:	e021      	b.n	8001cea <main+0x616>
			  }
			  //lewy TAK; prawy TAK
			  else if (rec_left == true && rec_right == true && center == false)
 8001ca6:	4b60      	ldr	r3, [pc, #384]	; (8001e28 <main+0x754>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80ed 	beq.w	8001e8a <main+0x7b6>
 8001cb0:	4b5e      	ldr	r3, [pc, #376]	; (8001e2c <main+0x758>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80e8 	beq.w	8001e8a <main+0x7b6>
 8001cba:	4b64      	ldr	r3, [pc, #400]	; (8001e4c <main+0x778>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	f083 0301 	eor.w	r3, r3, #1
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80e0 	beq.w	8001e8a <main+0x7b6>
			  {
				  left = false;
 8001cca:	4b5d      	ldr	r3, [pc, #372]	; (8001e40 <main+0x76c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
				  right = false;
 8001cd0:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <main+0x770>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <main+0x75c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
				  spin_right = false;
 8001cdc:	4b5a      	ldr	r3, [pc, #360]	; (8001e48 <main+0x774>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	701a      	strb	r2, [r3, #0]
				  center = true;
 8001ce2:	4b5a      	ldr	r3, [pc, #360]	; (8001e4c <main+0x778>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
			  if (rec_left == true && rec_right == false && STATION == true && left == false && distance_left < 12 && distance_right < 12)
 8001ce8:	e0cf      	b.n	8001e8a <main+0x7b6>
 8001cea:	e0ce      	b.n	8001e8a <main+0x7b6>
			  }
		  }
		  else if(on_left == true)
 8001cec:	4b58      	ldr	r3, [pc, #352]	; (8001e50 <main+0x77c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d057      	beq.n	8001da4 <main+0x6d0>
		  {
			  if(	(rec_left == true && rec_right == true && spin_left == false && right == false) ||
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <main+0x754>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d011      	beq.n	8001d20 <main+0x64c>
 8001cfc:	4b4b      	ldr	r3, [pc, #300]	; (8001e2c <main+0x758>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00d      	beq.n	8001d20 <main+0x64c>
 8001d04:	4b4a      	ldr	r3, [pc, #296]	; (8001e30 <main+0x75c>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d006      	beq.n	8001d20 <main+0x64c>
 8001d12:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <main+0x770>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	f083 0301 	eor.w	r3, r3, #1
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10d      	bne.n	8001d3c <main+0x668>
					  	(rec_left == false && rec_right == false) )
 8001d20:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <main+0x754>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f083 0301 	eor.w	r3, r3, #1
 8001d28:	b2db      	uxtb	r3, r3
			  if(	(rec_left == true && rec_right == true && spin_left == false && right == false) ||
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <main+0x676>
					  	(rec_left == false && rec_right == false) )
 8001d2e:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <main+0x758>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	f083 0301 	eor.w	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d006      	beq.n	8001d4a <main+0x676>
			  {
				  right = false;
 8001d3c:	4b41      	ldr	r3, [pc, #260]	; (8001e44 <main+0x770>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	701a      	strb	r2, [r3, #0]
				  spin_left = true;
 8001d42:	4b3b      	ldr	r3, [pc, #236]	; (8001e30 <main+0x75c>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e0a0      	b.n	8001e8c <main+0x7b8>
			  }
			  else if(rec_left == false && rec_right == true)
 8001d4a:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <main+0x754>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00a      	beq.n	8001d6e <main+0x69a>
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <main+0x758>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <main+0x69a>
			  {
				  right = true;
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <main+0x770>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001d66:	4b32      	ldr	r3, [pc, #200]	; (8001e30 <main+0x75c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
 8001d6c:	e08e      	b.n	8001e8c <main+0x7b8>
			  }
			  else if(rec_left == true && rec_right == false && right == false)
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <main+0x754>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 808a 	beq.w	8001e8c <main+0x7b8>
 8001d78:	4b2c      	ldr	r3, [pc, #176]	; (8001e2c <main+0x758>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8082 	beq.w	8001e8c <main+0x7b8>
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <main+0x770>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	f083 0301 	eor.w	r3, r3, #1
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d07a      	beq.n	8001e8c <main+0x7b8>
			  {
				  //right = false;
				  spin_left = false;
 8001d96:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <main+0x75c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
				  on_left = false;
 8001d9c:	4b2c      	ldr	r3, [pc, #176]	; (8001e50 <main+0x77c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	e073      	b.n	8001e8c <main+0x7b8>
			  }
		  }
		  else if (on_right == true)
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <main+0x780>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d06f      	beq.n	8001e8c <main+0x7b8>
		  {
			  if(	(rec_left == true && rec_right == true && spin_right == false && left == false) ||
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <main+0x754>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d011      	beq.n	8001dd8 <main+0x704>
 8001db4:	4b1d      	ldr	r3, [pc, #116]	; (8001e2c <main+0x758>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00d      	beq.n	8001dd8 <main+0x704>
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <main+0x774>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <main+0x704>
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <main+0x76c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	f083 0301 	eor.w	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <main+0x720>
						(rec_left == false && rec_right == false) )
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <main+0x754>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f083 0301 	eor.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
			  if(	(rec_left == true && rec_right == true && spin_right == false && left == false) ||
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <main+0x72e>
						(rec_left == false && rec_right == false) )
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <main+0x758>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	f083 0301 	eor.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <main+0x72e>
			  {
				  left = false;
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <main+0x76c>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	701a      	strb	r2, [r3, #0]
				  spin_right = true;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <main+0x774>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
 8001e00:	e044      	b.n	8001e8c <main+0x7b8>
			  }
			  else if(rec_left == true && rec_right == false)
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <main+0x754>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d026      	beq.n	8001e58 <main+0x784>
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <main+0x758>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01f      	beq.n	8001e58 <main+0x784>
			  {
				  left = true;
 8001e18:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <main+0x76c>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	701a      	strb	r2, [r3, #0]
				  spin_right = false;
 8001e1e:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <main+0x774>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
 8001e24:	e032      	b.n	8001e8c <main+0x7b8>
 8001e26:	bf00      	nop
 8001e28:	200002cc 	.word	0x200002cc
 8001e2c:	200002cd 	.word	0x200002cd
 8001e30:	200002cf 	.word	0x200002cf
 8001e34:	200002e0 	.word	0x200002e0
 8001e38:	200002d8 	.word	0x200002d8
 8001e3c:	200002dc 	.word	0x200002dc
 8001e40:	200002d2 	.word	0x200002d2
 8001e44:	200002d1 	.word	0x200002d1
 8001e48:	200002ce 	.word	0x200002ce
 8001e4c:	200002d0 	.word	0x200002d0
 8001e50:	200002d3 	.word	0x200002d3
 8001e54:	200002d4 	.word	0x200002d4
			  }
			  else if(rec_left == false && rec_right == true && left == false)
 8001e58:	4bc4      	ldr	r3, [pc, #784]	; (800216c <main+0xa98>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	f083 0301 	eor.w	r3, r3, #1
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <main+0x7b8>
 8001e66:	4bc2      	ldr	r3, [pc, #776]	; (8002170 <main+0xa9c>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00e      	beq.n	8001e8c <main+0x7b8>
 8001e6e:	4bc1      	ldr	r3, [pc, #772]	; (8002174 <main+0xaa0>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d007      	beq.n	8001e8c <main+0x7b8>
			  {
				  //left = false;
				  spin_right = false;
 8001e7c:	4bbe      	ldr	r3, [pc, #760]	; (8002178 <main+0xaa4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	701a      	strb	r2, [r3, #0]
				  on_right = false;
 8001e82:	4bbe      	ldr	r3, [pc, #760]	; (800217c <main+0xaa8>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
 8001e88:	e000      	b.n	8001e8c <main+0x7b8>
			  if (rec_left == true && rec_right == false && STATION == true && left == false && distance_left < 12 && distance_right < 12)
 8001e8a:	bf00      	nop
			  }
		  }

		  if (center == true && distance_left < 12 && distance_right < 12 && on_left == false && on_right == false && STATION == true)
 8001e8c:	4bbc      	ldr	r3, [pc, #752]	; (8002180 <main+0xaac>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01c      	beq.n	8001ece <main+0x7fa>
 8001e94:	4bbb      	ldr	r3, [pc, #748]	; (8002184 <main+0xab0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b0b      	cmp	r3, #11
 8001e9a:	d818      	bhi.n	8001ece <main+0x7fa>
 8001e9c:	4bba      	ldr	r3, [pc, #744]	; (8002188 <main+0xab4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b0b      	cmp	r3, #11
 8001ea2:	d814      	bhi.n	8001ece <main+0x7fa>
 8001ea4:	4bb9      	ldr	r3, [pc, #740]	; (800218c <main+0xab8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00d      	beq.n	8001ece <main+0x7fa>
 8001eb2:	4bb2      	ldr	r3, [pc, #712]	; (800217c <main+0xaa8>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <main+0x7fa>
 8001ec0:	4bb3      	ldr	r3, [pc, #716]	; (8002190 <main+0xabc>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d002      	beq.n	8001ece <main+0x7fa>
		  {
			  STOP();
 8001ec8:	f7ff faf2 	bl	80014b0 <STOP>
 8001ecc:	e245      	b.n	800235a <main+0xc86>
		  }
		  else if (spin_left == true)
 8001ece:	4bb1      	ldr	r3, [pc, #708]	; (8002194 <main+0xac0>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06a      	beq.n	8001fac <main+0x8d8>
		  {
			  if (speed != 40)
 8001ed6:	4bb0      	ldr	r3, [pc, #704]	; (8002198 <main+0xac4>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b28      	cmp	r3, #40	; 0x28
 8001edc:	f43f ac3e 	beq.w	800175c <main+0x88>
			  {
				  STOP();
 8001ee0:	f7ff fae6 	bl	80014b0 <STOP>
				  SPIN_L();
 8001ee4:	f7ff fbcc 	bl	8001680 <SPIN_L>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001ee8:	4bab      	ldr	r3, [pc, #684]	; (8002198 <main+0xac4>)
 8001eea:	2228      	movs	r2, #40	; 0x28
 8001eec:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef4:	48a9      	ldr	r0, [pc, #676]	; (800219c <main+0xac8>)
 8001ef6:	f002 fb09 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001efa:	2200      	movs	r2, #0
 8001efc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f00:	48a6      	ldr	r0, [pc, #664]	; (800219c <main+0xac8>)
 8001f02:	f002 fb03 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f06:	2064      	movs	r0, #100	; 0x64
 8001f08:	f000 ff6c 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f12:	48a2      	ldr	r0, [pc, #648]	; (800219c <main+0xac8>)
 8001f14:	f002 fafa 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f18:	2032      	movs	r0, #50	; 0x32
 8001f1a:	f000 ff63 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f1e:	2201      	movs	r2, #1
 8001f20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f24:	489d      	ldr	r0, [pc, #628]	; (800219c <main+0xac8>)
 8001f26:	f002 faf1 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f30:	489a      	ldr	r0, [pc, #616]	; (800219c <main+0xac8>)
 8001f32:	f002 faeb 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f36:	2064      	movs	r0, #100	; 0x64
 8001f38:	f000 ff54 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f42:	4896      	ldr	r0, [pc, #600]	; (800219c <main+0xac8>)
 8001f44:	f002 fae2 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f48:	2032      	movs	r0, #50	; 0x32
 8001f4a:	f000 ff4b 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f54:	4891      	ldr	r0, [pc, #580]	; (800219c <main+0xac8>)
 8001f56:	f002 fad9 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f60:	488e      	ldr	r0, [pc, #568]	; (800219c <main+0xac8>)
 8001f62:	f002 fad3 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f66:	2064      	movs	r0, #100	; 0x64
 8001f68:	f000 ff3c 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f72:	488a      	ldr	r0, [pc, #552]	; (800219c <main+0xac8>)
 8001f74:	f002 faca 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001f78:	2032      	movs	r0, #50	; 0x32
 8001f7a:	f000 ff33 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	4885      	ldr	r0, [pc, #532]	; (800219c <main+0xac8>)
 8001f86:	f002 fac1 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f90:	4882      	ldr	r0, [pc, #520]	; (800219c <main+0xac8>)
 8001f92:	f002 fabb 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001f96:	2064      	movs	r0, #100	; 0x64
 8001f98:	f000 ff24 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa2:	487e      	ldr	r0, [pc, #504]	; (800219c <main+0xac8>)
 8001fa4:	f002 fab2 	bl	800450c <HAL_GPIO_WritePin>
 8001fa8:	f7ff bbd8 	b.w	800175c <main+0x88>
			  }
		  }
		  else if (spin_right == true)
 8001fac:	4b72      	ldr	r3, [pc, #456]	; (8002178 <main+0xaa4>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d06a      	beq.n	800208a <main+0x9b6>
	  	  {
			  if (speed != 40)
 8001fb4:	4b78      	ldr	r3, [pc, #480]	; (8002198 <main+0xac4>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b28      	cmp	r3, #40	; 0x28
 8001fba:	f43f abcf 	beq.w	800175c <main+0x88>
			  {
				  STOP();
 8001fbe:	f7ff fa77 	bl	80014b0 <STOP>
				  SPIN_R();
 8001fc2:	f7ff fb33 	bl	800162c <SPIN_R>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001fc6:	4b74      	ldr	r3, [pc, #464]	; (8002198 <main+0xac4>)
 8001fc8:	2228      	movs	r2, #40	; 0x28
 8001fca:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd2:	4872      	ldr	r0, [pc, #456]	; (800219c <main+0xac8>)
 8001fd4:	f002 fa9a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fde:	486f      	ldr	r0, [pc, #444]	; (800219c <main+0xac8>)
 8001fe0:	f002 fa94 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001fe4:	2064      	movs	r0, #100	; 0x64
 8001fe6:	f000 fefd 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff0:	486a      	ldr	r0, [pc, #424]	; (800219c <main+0xac8>)
 8001ff2:	f002 fa8b 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001ff6:	2032      	movs	r0, #50	; 0x32
 8001ff8:	f000 fef4 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002002:	4866      	ldr	r0, [pc, #408]	; (800219c <main+0xac8>)
 8002004:	f002 fa82 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200e:	4863      	ldr	r0, [pc, #396]	; (800219c <main+0xac8>)
 8002010:	f002 fa7c 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002014:	2064      	movs	r0, #100	; 0x64
 8002016:	f000 fee5 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800201a:	2200      	movs	r2, #0
 800201c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002020:	485e      	ldr	r0, [pc, #376]	; (800219c <main+0xac8>)
 8002022:	f002 fa73 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8002026:	2032      	movs	r0, #50	; 0x32
 8002028:	f000 fedc 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002032:	485a      	ldr	r0, [pc, #360]	; (800219c <main+0xac8>)
 8002034:	f002 fa6a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800203e:	4857      	ldr	r0, [pc, #348]	; (800219c <main+0xac8>)
 8002040:	f002 fa64 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002044:	2064      	movs	r0, #100	; 0x64
 8002046:	f000 fecd 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4852      	ldr	r0, [pc, #328]	; (800219c <main+0xac8>)
 8002052:	f002 fa5b 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8002056:	2032      	movs	r0, #50	; 0x32
 8002058:	f000 fec4 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800205c:	2201      	movs	r2, #1
 800205e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002062:	484e      	ldr	r0, [pc, #312]	; (800219c <main+0xac8>)
 8002064:	f002 fa52 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800206e:	484b      	ldr	r0, [pc, #300]	; (800219c <main+0xac8>)
 8002070:	f002 fa4c 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002074:	2064      	movs	r0, #100	; 0x64
 8002076:	f000 feb5 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002080:	4846      	ldr	r0, [pc, #280]	; (800219c <main+0xac8>)
 8002082:	f002 fa43 	bl	800450c <HAL_GPIO_WritePin>
 8002086:	f7ff bb69 	b.w	800175c <main+0x88>
			  }
	  	  }
		  else if (left == true)
 800208a:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <main+0xaa0>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8086 	beq.w	80021a0 <main+0xacc>
		  {
			  if (speed != 40)
 8002094:	4b40      	ldr	r3, [pc, #256]	; (8002198 <main+0xac4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b28      	cmp	r3, #40	; 0x28
 800209a:	f43f ab5f 	beq.w	800175c <main+0x88>
			  {
				  STOP();
 800209e:	f7ff fa07 	bl	80014b0 <STOP>
				  LEFT();
 80020a2:	f7ff fa6f 	bl	8001584 <LEFT>
				  //zwiekszenie predkosci x4
				  speed = 40;
 80020a6:	4b3c      	ldr	r3, [pc, #240]	; (8002198 <main+0xac4>)
 80020a8:	2228      	movs	r2, #40	; 0x28
 80020aa:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b2:	483a      	ldr	r0, [pc, #232]	; (800219c <main+0xac8>)
 80020b4:	f002 fa2a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80020b8:	2200      	movs	r2, #0
 80020ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020be:	4837      	ldr	r0, [pc, #220]	; (800219c <main+0xac8>)
 80020c0:	f002 fa24 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80020c4:	2064      	movs	r0, #100	; 0x64
 80020c6:	f000 fe8d 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80020ca:	2200      	movs	r2, #0
 80020cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d0:	4832      	ldr	r0, [pc, #200]	; (800219c <main+0xac8>)
 80020d2:	f002 fa1b 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80020d6:	2032      	movs	r0, #50	; 0x32
 80020d8:	f000 fe84 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80020dc:	2201      	movs	r2, #1
 80020de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e2:	482e      	ldr	r0, [pc, #184]	; (800219c <main+0xac8>)
 80020e4:	f002 fa12 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ee:	482b      	ldr	r0, [pc, #172]	; (800219c <main+0xac8>)
 80020f0:	f002 fa0c 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80020f4:	2064      	movs	r0, #100	; 0x64
 80020f6:	f000 fe75 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002100:	4826      	ldr	r0, [pc, #152]	; (800219c <main+0xac8>)
 8002102:	f002 fa03 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8002106:	2032      	movs	r0, #50	; 0x32
 8002108:	f000 fe6c 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800210c:	2201      	movs	r2, #1
 800210e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002112:	4822      	ldr	r0, [pc, #136]	; (800219c <main+0xac8>)
 8002114:	f002 f9fa 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800211e:	481f      	ldr	r0, [pc, #124]	; (800219c <main+0xac8>)
 8002120:	f002 f9f4 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002124:	2064      	movs	r0, #100	; 0x64
 8002126:	f000 fe5d 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002130:	481a      	ldr	r0, [pc, #104]	; (800219c <main+0xac8>)
 8002132:	f002 f9eb 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8002136:	2032      	movs	r0, #50	; 0x32
 8002138:	f000 fe54 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800213c:	2201      	movs	r2, #1
 800213e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002142:	4816      	ldr	r0, [pc, #88]	; (800219c <main+0xac8>)
 8002144:	f002 f9e2 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8002148:	2200      	movs	r2, #0
 800214a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800214e:	4813      	ldr	r0, [pc, #76]	; (800219c <main+0xac8>)
 8002150:	f002 f9dc 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002154:	2064      	movs	r0, #100	; 0x64
 8002156:	f000 fe45 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002160:	480e      	ldr	r0, [pc, #56]	; (800219c <main+0xac8>)
 8002162:	f002 f9d3 	bl	800450c <HAL_GPIO_WritePin>
 8002166:	f7ff baf9 	b.w	800175c <main+0x88>
 800216a:	bf00      	nop
 800216c:	200002cc 	.word	0x200002cc
 8002170:	200002cd 	.word	0x200002cd
 8002174:	200002d2 	.word	0x200002d2
 8002178:	200002ce 	.word	0x200002ce
 800217c:	200002d4 	.word	0x200002d4
 8002180:	200002d0 	.word	0x200002d0
 8002184:	200002d8 	.word	0x200002d8
 8002188:	200002dc 	.word	0x200002dc
 800218c:	200002d3 	.word	0x200002d3
 8002190:	200002e0 	.word	0x200002e0
 8002194:	200002cf 	.word	0x200002cf
 8002198:	200002c8 	.word	0x200002c8
 800219c:	40020800 	.word	0x40020800
			  }
		  }
		  else if (right == true)
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <main+0xc8c>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d06a      	beq.n	800227e <main+0xbaa>
		  {
			  if (speed != 40)
 80021a8:	4b6e      	ldr	r3, [pc, #440]	; (8002364 <main+0xc90>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b28      	cmp	r3, #40	; 0x28
 80021ae:	f43f aad5 	beq.w	800175c <main+0x88>
			  {
				  STOP();
 80021b2:	f7ff f97d 	bl	80014b0 <STOP>
				  RIGHT();
 80021b6:	f7ff fa0f 	bl	80015d8 <RIGHT>
				  //zwiekszenie predkosci x4
				  speed = 40;
 80021ba:	4b6a      	ldr	r3, [pc, #424]	; (8002364 <main+0xc90>)
 80021bc:	2228      	movs	r2, #40	; 0x28
 80021be:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80021c0:	2201      	movs	r2, #1
 80021c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c6:	4868      	ldr	r0, [pc, #416]	; (8002368 <main+0xc94>)
 80021c8:	f002 f9a0 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80021cc:	2200      	movs	r2, #0
 80021ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d2:	4865      	ldr	r0, [pc, #404]	; (8002368 <main+0xc94>)
 80021d4:	f002 f99a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80021d8:	2064      	movs	r0, #100	; 0x64
 80021da:	f000 fe03 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e4:	4860      	ldr	r0, [pc, #384]	; (8002368 <main+0xc94>)
 80021e6:	f002 f991 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80021ea:	2032      	movs	r0, #50	; 0x32
 80021ec:	f000 fdfa 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80021f0:	2201      	movs	r2, #1
 80021f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f6:	485c      	ldr	r0, [pc, #368]	; (8002368 <main+0xc94>)
 80021f8:	f002 f988 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002202:	4859      	ldr	r0, [pc, #356]	; (8002368 <main+0xc94>)
 8002204:	f002 f982 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002208:	2064      	movs	r0, #100	; 0x64
 800220a:	f000 fdeb 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800220e:	2200      	movs	r2, #0
 8002210:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002214:	4854      	ldr	r0, [pc, #336]	; (8002368 <main+0xc94>)
 8002216:	f002 f979 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 800221a:	2032      	movs	r0, #50	; 0x32
 800221c:	f000 fde2 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002220:	2201      	movs	r2, #1
 8002222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002226:	4850      	ldr	r0, [pc, #320]	; (8002368 <main+0xc94>)
 8002228:	f002 f970 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800222c:	2200      	movs	r2, #0
 800222e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002232:	484d      	ldr	r0, [pc, #308]	; (8002368 <main+0xc94>)
 8002234:	f002 f96a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002238:	2064      	movs	r0, #100	; 0x64
 800223a:	f000 fdd3 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	4848      	ldr	r0, [pc, #288]	; (8002368 <main+0xc94>)
 8002246:	f002 f961 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 800224a:	2032      	movs	r0, #50	; 0x32
 800224c:	f000 fdca 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002256:	4844      	ldr	r0, [pc, #272]	; (8002368 <main+0xc94>)
 8002258:	f002 f958 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800225c:	2200      	movs	r2, #0
 800225e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002262:	4841      	ldr	r0, [pc, #260]	; (8002368 <main+0xc94>)
 8002264:	f002 f952 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002268:	2064      	movs	r0, #100	; 0x64
 800226a:	f000 fdbb 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002274:	483c      	ldr	r0, [pc, #240]	; (8002368 <main+0xc94>)
 8002276:	f002 f949 	bl	800450c <HAL_GPIO_WritePin>
 800227a:	f7ff ba6f 	b.w	800175c <main+0x88>
			  }
		  }
	  	  else if (center == true)
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <main+0xc98>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	f43f aa6a 	beq.w	800175c <main+0x88>
		  {
			  if (speed != 40)
 8002288:	4b36      	ldr	r3, [pc, #216]	; (8002364 <main+0xc90>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b28      	cmp	r3, #40	; 0x28
 800228e:	f43f aa65 	beq.w	800175c <main+0x88>
			  {
				  STOP();
 8002292:	f7ff f90d 	bl	80014b0 <STOP>
				  FORWARD();
 8002296:	f7ff f94b 	bl	8001530 <FORWARD>
				  //zwiekszenie predkosci x3
				  speed = 40;
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <main+0xc90>)
 800229c:	2228      	movs	r2, #40	; 0x28
 800229e:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80022a0:	2201      	movs	r2, #1
 80022a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a6:	4830      	ldr	r0, [pc, #192]	; (8002368 <main+0xc94>)
 80022a8:	f002 f930 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80022ac:	2200      	movs	r2, #0
 80022ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b2:	482d      	ldr	r0, [pc, #180]	; (8002368 <main+0xc94>)
 80022b4:	f002 f92a 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80022b8:	2064      	movs	r0, #100	; 0x64
 80022ba:	f000 fd93 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c4:	4828      	ldr	r0, [pc, #160]	; (8002368 <main+0xc94>)
 80022c6:	f002 f921 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80022ca:	2032      	movs	r0, #50	; 0x32
 80022cc:	f000 fd8a 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d6:	4824      	ldr	r0, [pc, #144]	; (8002368 <main+0xc94>)
 80022d8:	f002 f918 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e2:	4821      	ldr	r0, [pc, #132]	; (8002368 <main+0xc94>)
 80022e4:	f002 f912 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	; 0x64
 80022ea:	f000 fd7b 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f4:	481c      	ldr	r0, [pc, #112]	; (8002368 <main+0xc94>)
 80022f6:	f002 f909 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80022fa:	2032      	movs	r0, #50	; 0x32
 80022fc:	f000 fd72 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002300:	2201      	movs	r2, #1
 8002302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002306:	4818      	ldr	r0, [pc, #96]	; (8002368 <main+0xc94>)
 8002308:	f002 f900 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002312:	4815      	ldr	r0, [pc, #84]	; (8002368 <main+0xc94>)
 8002314:	f002 f8fa 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002318:	2064      	movs	r0, #100	; 0x64
 800231a:	f000 fd63 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002324:	4810      	ldr	r0, [pc, #64]	; (8002368 <main+0xc94>)
 8002326:	f002 f8f1 	bl	800450c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 800232a:	2032      	movs	r0, #50	; 0x32
 800232c:	f000 fd5a 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <main+0xc94>)
 8002338:	f002 f8e8 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800233c:	2200      	movs	r2, #0
 800233e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002342:	4809      	ldr	r0, [pc, #36]	; (8002368 <main+0xc94>)
 8002344:	f002 f8e2 	bl	800450c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8002348:	2064      	movs	r0, #100	; 0x64
 800234a:	f000 fd4b 	bl	8002de4 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <main+0xc94>)
 8002356:	f002 f8d9 	bl	800450c <HAL_GPIO_WritePin>
	  start1 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);	//wystąpienie zbocza narastającego sygnału 'echo'
 800235a:	f7ff b9ff 	b.w	800175c <main+0x88>
 800235e:	bf00      	nop
 8002360:	200002d1 	.word	0x200002d1
 8002364:	200002c8 	.word	0x200002c8
 8002368:	40020800 	.word	0x40020800
 800236c:	200002d0 	.word	0x200002d0

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2230      	movs	r2, #48	; 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f005 f972 	bl	8007668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <SystemClock_Config+0xcc>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <SystemClock_Config+0xcc>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <SystemClock_Config+0xcc>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <SystemClock_Config+0xd0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <SystemClock_Config+0xd0>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <SystemClock_Config+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d4:	2310      	movs	r3, #16
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	2302      	movs	r3, #2
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023e0:	2308      	movs	r3, #8
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 f8bd 	bl	8004574 <HAL_RCC_OscConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002400:	f000 f820 	bl	8002444 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	230f      	movs	r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002410:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2105      	movs	r1, #5
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fb1e 	bl	8004a64 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800242e:	f000 f809 	bl	8002444 <Error_Handler>
  }
}
 8002432:	bf00      	nop
 8002434:	3750      	adds	r7, #80	; 0x50
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000

08002444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002448:	b672      	cpsid	i
}
 800244a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800244c:	e7fe      	b.n	800244c <Error_Handler+0x8>
	...

08002450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	607b      	str	r3, [r7, #4]
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_MspInit+0x4c>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	4a0f      	ldr	r2, [pc, #60]	; (800249c <HAL_MspInit+0x4c>)
 8002460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	4b0d      	ldr	r3, [pc, #52]	; (800249c <HAL_MspInit+0x4c>)
 8002468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	603b      	str	r3, [r7, #0]
 8002476:	4b09      	ldr	r3, [pc, #36]	; (800249c <HAL_MspInit+0x4c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_MspInit+0x4c>)
 800247c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002480:	6413      	str	r3, [r2, #64]	; 0x40
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_MspInit+0x4c>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	603b      	str	r3, [r7, #0]
 800248c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40023800 	.word	0x40023800

080024a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024a4:	e7fe      	b.n	80024a4 <NMI_Handler+0x4>

080024a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024a6:	b480      	push	{r7}
 80024a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024aa:	e7fe      	b.n	80024aa <HardFault_Handler+0x4>

080024ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b0:	e7fe      	b.n	80024b0 <MemManage_Handler+0x4>

080024b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024b2:	b480      	push	{r7}
 80024b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024b6:	e7fe      	b.n	80024b6 <BusFault_Handler+0x4>

080024b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024bc:	e7fe      	b.n	80024bc <UsageFault_Handler+0x4>

080024be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024be:	b480      	push	{r7}
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ec:	f000 fc5a 	bl	8002da4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024fa:	f002 ffab 	bl	8005454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000378 	.word	0x20000378

08002508 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <USART2_IRQHandler+0x10>)
 800250e:	f004 f915 	bl	800673c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200003c0 	.word	0x200003c0

0800251c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002520:	4802      	ldr	r0, [pc, #8]	; (800252c <DMA2_Stream1_IRQHandler+0x10>)
 8002522:	f001 fbd5 	bl	8003cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000248 	.word	0x20000248

08002530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
	return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <_kill>:

int _kill(int pid, int sig)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800254a:	f005 f863 	bl	8007614 <__errno>
 800254e:	4603      	mov	r3, r0
 8002550:	2216      	movs	r2, #22
 8002552:	601a      	str	r2, [r3, #0]
	return -1;
 8002554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <_exit>:

void _exit (int status)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffe7 	bl	8002540 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002572:	e7fe      	b.n	8002572 <_exit+0x12>

08002574 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
 8002584:	e00a      	b.n	800259c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002586:	f3af 8000 	nop.w
 800258a:	4601      	mov	r1, r0
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	60ba      	str	r2, [r7, #8]
 8002592:	b2ca      	uxtb	r2, r1
 8002594:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	3301      	adds	r3, #1
 800259a:	617b      	str	r3, [r7, #20]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	dbf0      	blt.n	8002586 <_read+0x12>
	}

return len;
 80025a4:	687b      	ldr	r3, [r7, #4]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025ae:	b580      	push	{r7, lr}
 80025b0:	b086      	sub	sp, #24
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
 80025be:	e009      	b.n	80025d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1c5a      	adds	r2, r3, #1
 80025c4:	60ba      	str	r2, [r7, #8]
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe ff31 	bl	8001430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	3301      	adds	r3, #1
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	429a      	cmp	r2, r3
 80025da:	dbf1      	blt.n	80025c0 <_write+0x12>
	}
	return len;
 80025dc:	687b      	ldr	r3, [r7, #4]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <_close>:

int _close(int file)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
	return -1;
 80025ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr

080025fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800260e:	605a      	str	r2, [r3, #4]
	return 0;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <_isatty>:

int _isatty(int file)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
	return 1;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002658:	4a14      	ldr	r2, [pc, #80]	; (80026ac <_sbrk+0x5c>)
 800265a:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <_sbrk+0x60>)
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d102      	bne.n	8002672 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <_sbrk+0x64>)
 800266e:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <_sbrk+0x68>)
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	693a      	ldr	r2, [r7, #16]
 800267c:	429a      	cmp	r2, r3
 800267e:	d207      	bcs.n	8002690 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002680:	f004 ffc8 	bl	8007614 <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	220c      	movs	r2, #12
 8002688:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e009      	b.n	80026a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <_sbrk+0x64>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002696:	4b07      	ldr	r3, [pc, #28]	; (80026b4 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	4a05      	ldr	r2, [pc, #20]	; (80026b4 <_sbrk+0x64>)
 80026a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a2:	68fb      	ldr	r3, [r7, #12]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20020000 	.word	0x20020000
 80026b0:	00000400 	.word	0x00000400
 80026b4:	200002e4 	.word	0x200002e4
 80026b8:	20000418 	.word	0x20000418

080026bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <SystemInit+0x20>)
 80026c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c6:	4a05      	ldr	r2, [pc, #20]	; (80026dc <SystemInit+0x20>)
 80026c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000ed00 	.word	0xe000ed00

080026e0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b092      	sub	sp, #72	; 0x48
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80026fe:	f107 0320 	add.w	r3, r7, #32
 8002702:	2200      	movs	r2, #0
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	605a      	str	r2, [r3, #4]
 8002708:	609a      	str	r2, [r3, #8]
 800270a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	605a      	str	r2, [r3, #4]
 8002714:	609a      	str	r2, [r3, #8]
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	611a      	str	r2, [r3, #16]
 800271a:	615a      	str	r2, [r3, #20]
 800271c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800271e:	4b43      	ldr	r3, [pc, #268]	; (800282c <MX_TIM2_Init+0x14c>)
 8002720:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002724:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002726:	4b41      	ldr	r3, [pc, #260]	; (800282c <MX_TIM2_Init+0x14c>)
 8002728:	224f      	movs	r2, #79	; 0x4f
 800272a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800272c:	4b3f      	ldr	r3, [pc, #252]	; (800282c <MX_TIM2_Init+0x14c>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 29999;
 8002732:	4b3e      	ldr	r3, [pc, #248]	; (800282c <MX_TIM2_Init+0x14c>)
 8002734:	f247 522f 	movw	r2, #29999	; 0x752f
 8002738:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800273a:	4b3c      	ldr	r3, [pc, #240]	; (800282c <MX_TIM2_Init+0x14c>)
 800273c:	2200      	movs	r2, #0
 800273e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002740:	4b3a      	ldr	r3, [pc, #232]	; (800282c <MX_TIM2_Init+0x14c>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002746:	4839      	ldr	r0, [pc, #228]	; (800282c <MX_TIM2_Init+0x14c>)
 8002748:	f002 fb6c 	bl	8004e24 <HAL_TIM_Base_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002752:	f7ff fe77 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800275c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002760:	4619      	mov	r1, r3
 8002762:	4832      	ldr	r0, [pc, #200]	; (800282c <MX_TIM2_Init+0x14c>)
 8002764:	f003 f8dc 	bl	8005920 <HAL_TIM_ConfigClockSource>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800276e:	f7ff fe69 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002772:	482e      	ldr	r0, [pc, #184]	; (800282c <MX_TIM2_Init+0x14c>)
 8002774:	f002 fd38 	bl	80051e8 <HAL_TIM_IC_Init>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800277e:	f7ff fe61 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002782:	482a      	ldr	r0, [pc, #168]	; (800282c <MX_TIM2_Init+0x14c>)
 8002784:	f002 fc0e 	bl	8004fa4 <HAL_TIM_PWM_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800278e:	f7ff fe59 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002792:	2300      	movs	r3, #0
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002796:	2300      	movs	r3, #0
 8002798:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800279a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800279e:	4619      	mov	r1, r3
 80027a0:	4822      	ldr	r0, [pc, #136]	; (800282c <MX_TIM2_Init+0x14c>)
 80027a2:	f003 fe2b 	bl	80063fc <HAL_TIMEx_MasterConfigSynchronization>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80027ac:	f7ff fe4a 	bl	8002444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80027b0:	2300      	movs	r3, #0
 80027b2:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80027b4:	2301      	movs	r3, #1
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80027c0:	f107 0320 	add.w	r3, r7, #32
 80027c4:	2200      	movs	r2, #0
 80027c6:	4619      	mov	r1, r3
 80027c8:	4818      	ldr	r0, [pc, #96]	; (800282c <MX_TIM2_Init+0x14c>)
 80027ca:	f002 ff4b 	bl	8005664 <HAL_TIM_IC_ConfigChannel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 80027d4:	f7ff fe36 	bl	8002444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80027dc:	2302      	movs	r3, #2
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80027e0:	f107 0320 	add.w	r3, r7, #32
 80027e4:	2204      	movs	r2, #4
 80027e6:	4619      	mov	r1, r3
 80027e8:	4810      	ldr	r0, [pc, #64]	; (800282c <MX_TIM2_Init+0x14c>)
 80027ea:	f002 ff3b 	bl	8005664 <HAL_TIM_IC_ConfigChannel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80027f4:	f7ff fe26 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f8:	2360      	movs	r3, #96	; 0x60
 80027fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80027fc:	230a      	movs	r3, #10
 80027fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	2208      	movs	r2, #8
 800280c:	4619      	mov	r1, r3
 800280e:	4807      	ldr	r0, [pc, #28]	; (800282c <MX_TIM2_Init+0x14c>)
 8002810:	f002 ffc4 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800281a:	f7ff fe13 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800281e:	4803      	ldr	r0, [pc, #12]	; (800282c <MX_TIM2_Init+0x14c>)
 8002820:	f000 f96c 	bl	8002afc <HAL_TIM_MspPostInit>

}
 8002824:	bf00      	nop
 8002826:	3748      	adds	r7, #72	; 0x48
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	200002e8 	.word	0x200002e8

08002830 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b092      	sub	sp, #72	; 0x48
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002844:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800284e:	f107 0320 	add.w	r3, r7, #32
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800285c:	1d3b      	adds	r3, r7, #4
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]
 8002868:	611a      	str	r2, [r3, #16]
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <MX_TIM3_Init+0x14c>)
 8002870:	4a43      	ldr	r2, [pc, #268]	; (8002980 <MX_TIM3_Init+0x150>)
 8002872:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8002874:	4b41      	ldr	r3, [pc, #260]	; (800297c <MX_TIM3_Init+0x14c>)
 8002876:	224f      	movs	r2, #79	; 0x4f
 8002878:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800287a:	4b40      	ldr	r3, [pc, #256]	; (800297c <MX_TIM3_Init+0x14c>)
 800287c:	2200      	movs	r2, #0
 800287e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 29999;
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <MX_TIM3_Init+0x14c>)
 8002882:	f247 522f 	movw	r2, #29999	; 0x752f
 8002886:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <MX_TIM3_Init+0x14c>)
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <MX_TIM3_Init+0x14c>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002894:	4839      	ldr	r0, [pc, #228]	; (800297c <MX_TIM3_Init+0x14c>)
 8002896:	f002 fac5 	bl	8004e24 <HAL_TIM_Base_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80028a0:	f7ff fdd0 	bl	8002444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80028aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028ae:	4619      	mov	r1, r3
 80028b0:	4832      	ldr	r0, [pc, #200]	; (800297c <MX_TIM3_Init+0x14c>)
 80028b2:	f003 f835 	bl	8005920 <HAL_TIM_ConfigClockSource>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80028bc:	f7ff fdc2 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80028c0:	482e      	ldr	r0, [pc, #184]	; (800297c <MX_TIM3_Init+0x14c>)
 80028c2:	f002 fc91 	bl	80051e8 <HAL_TIM_IC_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80028cc:	f7ff fdba 	bl	8002444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80028d0:	482a      	ldr	r0, [pc, #168]	; (800297c <MX_TIM3_Init+0x14c>)
 80028d2:	f002 fb67 	bl	8004fa4 <HAL_TIM_PWM_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80028dc:	f7ff fdb2 	bl	8002444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028e4:	2300      	movs	r3, #0
 80028e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028ec:	4619      	mov	r1, r3
 80028ee:	4823      	ldr	r0, [pc, #140]	; (800297c <MX_TIM3_Init+0x14c>)
 80028f0:	f003 fd84 	bl	80063fc <HAL_TIMEx_MasterConfigSynchronization>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80028fa:	f7ff fda3 	bl	8002444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028fe:	2300      	movs	r3, #0
 8002900:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002902:	2301      	movs	r3, #1
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800290a:	2300      	movs	r3, #0
 800290c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800290e:	f107 0320 	add.w	r3, r7, #32
 8002912:	2200      	movs	r2, #0
 8002914:	4619      	mov	r1, r3
 8002916:	4819      	ldr	r0, [pc, #100]	; (800297c <MX_TIM3_Init+0x14c>)
 8002918:	f002 fea4 	bl	8005664 <HAL_TIM_IC_ConfigChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8002922:	f7ff fd8f 	bl	8002444 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002926:	2302      	movs	r3, #2
 8002928:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800292a:	2302      	movs	r3, #2
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800292e:	f107 0320 	add.w	r3, r7, #32
 8002932:	2204      	movs	r2, #4
 8002934:	4619      	mov	r1, r3
 8002936:	4811      	ldr	r0, [pc, #68]	; (800297c <MX_TIM3_Init+0x14c>)
 8002938:	f002 fe94 	bl	8005664 <HAL_TIM_IC_ConfigChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_TIM3_Init+0x116>
  {
    Error_Handler();
 8002942:	f7ff fd7f 	bl	8002444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002946:	2360      	movs	r3, #96	; 0x60
 8002948:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800294a:	230a      	movs	r3, #10
 800294c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002956:	1d3b      	adds	r3, r7, #4
 8002958:	2208      	movs	r2, #8
 800295a:	4619      	mov	r1, r3
 800295c:	4807      	ldr	r0, [pc, #28]	; (800297c <MX_TIM3_Init+0x14c>)
 800295e:	f002 ff1d 	bl	800579c <HAL_TIM_PWM_ConfigChannel>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <MX_TIM3_Init+0x13c>
  {
    Error_Handler();
 8002968:	f7ff fd6c 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800296c:	4803      	ldr	r0, [pc, #12]	; (800297c <MX_TIM3_Init+0x14c>)
 800296e:	f000 f8c5 	bl	8002afc <HAL_TIM_MspPostInit>

}
 8002972:	bf00      	nop
 8002974:	3748      	adds	r7, #72	; 0x48
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000330 	.word	0x20000330
 8002980:	40000400 	.word	0x40000400

08002984 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002988:	4b0e      	ldr	r3, [pc, #56]	; (80029c4 <MX_TIM10_Init+0x40>)
 800298a:	4a0f      	ldr	r2, [pc, #60]	; (80029c8 <MX_TIM10_Init+0x44>)
 800298c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <MX_TIM10_Init+0x40>)
 8002990:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002994:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002996:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <MX_TIM10_Init+0x40>)
 8002998:	2200      	movs	r2, #0
 800299a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <MX_TIM10_Init+0x40>)
 800299e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80029a2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029a4:	4b07      	ldr	r3, [pc, #28]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80029b0:	4804      	ldr	r0, [pc, #16]	; (80029c4 <MX_TIM10_Init+0x40>)
 80029b2:	f002 fa37 	bl	8004e24 <HAL_TIM_Base_Init>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80029bc:	f7ff fd42 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80029c0:	bf00      	nop
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000378 	.word	0x20000378
 80029c8:	40014400 	.word	0x40014400

080029cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 031c 	add.w	r3, r7, #28
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ec:	d12c      	bne.n	8002a48 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	4b3e      	ldr	r3, [pc, #248]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	4a3d      	ldr	r2, [pc, #244]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6413      	str	r3, [r2, #64]	; 0x40
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	61bb      	str	r3, [r7, #24]
 8002a08:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a36      	ldr	r2, [pc, #216]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b34      	ldr	r3, [pc, #208]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a26:	2301      	movs	r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a36:	2301      	movs	r3, #1
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	4619      	mov	r1, r3
 8002a40:	482b      	ldr	r0, [pc, #172]	; (8002af0 <HAL_TIM_Base_MspInit+0x124>)
 8002a42:	f001 fbaf 	bl	80041a4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002a46:	e04c      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a29      	ldr	r2, [pc, #164]	; (8002af4 <HAL_TIM_Base_MspInit+0x128>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d12c      	bne.n	8002aac <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a24      	ldr	r2, [pc, #144]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b22      	ldr	r3, [pc, #136]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	4a1d      	ldr	r2, [pc, #116]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a8a:	2340      	movs	r3, #64	; 0x40
 8002a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8e:	2302      	movs	r3, #2
 8002a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a9e:	f107 031c 	add.w	r3, r7, #28
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <HAL_TIM_Base_MspInit+0x124>)
 8002aa6:	f001 fb7d 	bl	80041a4 <HAL_GPIO_Init>
}
 8002aaa:	e01a      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_TIM_Base_MspInit+0x12c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d115      	bne.n	8002ae2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b0c      	ldr	r3, [pc, #48]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ac4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <HAL_TIM_Base_MspInit+0x120>)
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2102      	movs	r1, #2
 8002ad6:	2019      	movs	r0, #25
 8002ad8:	f000 fe95 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002adc:	2019      	movs	r0, #25
 8002ade:	f000 feae 	bl	800383e <HAL_NVIC_EnableIRQ>
}
 8002ae2:	bf00      	nop
 8002ae4:	3730      	adds	r7, #48	; 0x30
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	40020000 	.word	0x40020000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40014400 	.word	0x40014400

08002afc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 0314 	add.w	r3, r7, #20
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d11f      	bne.n	8002b5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a21      	ldr	r2, [pc, #132]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b28:	f043 0302 	orr.w	r3, r3, #2
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	4619      	mov	r1, r3
 8002b56:	4816      	ldr	r0, [pc, #88]	; (8002bb0 <HAL_TIM_MspPostInit+0xb4>)
 8002b58:	f001 fb24 	bl	80041a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b5c:	e022      	b.n	8002ba4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <HAL_TIM_MspPostInit+0xb8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d11d      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b70:	4a0e      	ldr	r2, [pc, #56]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	6313      	str	r3, [r2, #48]	; 0x30
 8002b78:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <HAL_TIM_MspPostInit+0xb0>)
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b84:	2301      	movs	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b90:	2300      	movs	r3, #0
 8002b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b94:	2302      	movs	r3, #2
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4804      	ldr	r0, [pc, #16]	; (8002bb0 <HAL_TIM_MspPostInit+0xb4>)
 8002ba0:	f001 fb00 	bl	80041a4 <HAL_GPIO_Init>
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	; 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40000400 	.word	0x40000400

08002bb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bbe:	4a12      	ldr	r2, [pc, #72]	; (8002c08 <MX_USART2_UART_Init+0x50>)
 8002bc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bc4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002bc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bd0:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bd6:	4b0b      	ldr	r3, [pc, #44]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bde:	220c      	movs	r2, #12
 8002be0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002be2:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART2_UART_Init+0x4c>)
 8002bf0:	f003 fc94 	bl	800651c <HAL_UART_Init>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002bfa:	f7ff fc23 	bl	8002444 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	200003c0 	.word	0x200003c0
 8002c08:	40004400 	.word	0x40004400

08002c0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08a      	sub	sp, #40	; 0x28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 0314 	add.w	r3, r7, #20
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <HAL_UART_MspInit+0x94>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d133      	bne.n	8002c96 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c3e:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c54:	f043 0308 	orr.w	r3, r3, #8
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_UART_MspInit+0x98>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002c66:	2360      	movs	r3, #96	; 0x60
 8002c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c76:	2307      	movs	r3, #7
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_UART_MspInit+0x9c>)
 8002c82:	f001 fa8f 	bl	80041a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2103      	movs	r1, #3
 8002c8a:	2026      	movs	r0, #38	; 0x26
 8002c8c:	f000 fdbb 	bl	8003806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c90:	2026      	movs	r0, #38	; 0x26
 8002c92:	f000 fdd4 	bl	800383e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c96:	bf00      	nop
 8002c98:	3728      	adds	r7, #40	; 0x28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40004400 	.word	0x40004400
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020c00 	.word	0x40020c00

08002cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cb0:	480d      	ldr	r0, [pc, #52]	; (8002ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cb2:	490e      	ldr	r1, [pc, #56]	; (8002cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cb4:	4a0e      	ldr	r2, [pc, #56]	; (8002cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cb8:	e002      	b.n	8002cc0 <LoopCopyDataInit>

08002cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cbe:	3304      	adds	r3, #4

08002cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cc4:	d3f9      	bcc.n	8002cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cc6:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cc8:	4c0b      	ldr	r4, [pc, #44]	; (8002cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ccc:	e001      	b.n	8002cd2 <LoopFillZerobss>

08002cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cd0:	3204      	adds	r2, #4

08002cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cd4:	d3fb      	bcc.n	8002cce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cd6:	f7ff fcf1 	bl	80026bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cda:	f004 fca1 	bl	8007620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cde:	f7fe fcf9 	bl	80016d4 <main>
  bx  lr    
 8002ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cec:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002cf0:	0800c49c 	.word	0x0800c49c
  ldr r2, =_sbss
 8002cf4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002cf8:	20000418 	.word	0x20000418

08002cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cfc:	e7fe      	b.n	8002cfc <ADC_IRQHandler>
	...

08002d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d04:	4b0e      	ldr	r3, [pc, #56]	; (8002d40 <HAL_Init+0x40>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a0d      	ldr	r2, [pc, #52]	; (8002d40 <HAL_Init+0x40>)
 8002d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_Init+0x40>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a0a      	ldr	r2, [pc, #40]	; (8002d40 <HAL_Init+0x40>)
 8002d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <HAL_Init+0x40>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <HAL_Init+0x40>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 fd61 	bl	80037f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f000 f808 	bl	8002d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d34:	f7ff fb8c 	bl	8002450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023c00 	.word	0x40023c00

08002d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d4c:	4b12      	ldr	r3, [pc, #72]	; (8002d98 <HAL_InitTick+0x54>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_InitTick+0x58>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	4619      	mov	r1, r3
 8002d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fd79 	bl	800385a <HAL_SYSTICK_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e00e      	b.n	8002d90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2b0f      	cmp	r3, #15
 8002d76:	d80a      	bhi.n	8002d8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f000 fd41 	bl	8003806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d84:	4a06      	ldr	r2, [pc, #24]	; (8002da0 <HAL_InitTick+0x5c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	e000      	b.n	8002d90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	20000004 	.word	0x20000004
 8002d9c:	2000000c 	.word	0x2000000c
 8002da0:	20000008 	.word	0x20000008

08002da4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <HAL_IncTick+0x20>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4413      	add	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <HAL_IncTick+0x24>)
 8002db6:	6013      	str	r3, [r2, #0]
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	20000404 	.word	0x20000404

08002dcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return uwTick;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_GetTick+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000404 	.word	0x20000404

08002de4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dec:	f7ff ffee 	bl	8002dcc <HAL_GetTick>
 8002df0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d005      	beq.n	8002e0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_Delay+0x44>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	4413      	add	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e0a:	bf00      	nop
 8002e0c:	f7ff ffde 	bl	8002dcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d8f7      	bhi.n	8002e0c <HAL_Delay+0x28>
  {
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000000c 	.word	0x2000000c

08002e2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e033      	b.n	8002eaa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fe f926 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 0310 	and.w	r3, r3, #16
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e72:	f023 0302 	bic.w	r3, r3, #2
 8002e76:	f043 0202 	orr.w	r2, r3, #2
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fa68 	bl	8003354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	f043 0201 	orr.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
 8002e9a:	e001      	b.n	8002ea0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_Start_DMA+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0e9      	b.n	80030a6 <HAL_ADC_Start_DMA+0x1f2>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d018      	beq.n	8002f1a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ef8:	4b6d      	ldr	r3, [pc, #436]	; (80030b0 <HAL_ADC_Start_DMA+0x1fc>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <HAL_ADC_Start_DMA+0x200>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	0c9a      	lsrs	r2, r3, #18
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f0c:	e002      	b.n	8002f14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f9      	bne.n	8002f0e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f28:	d107      	bne.n	8002f3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	f040 80a1 	bne.w	800308c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f52:	f023 0301 	bic.w	r3, r3, #1
 8002f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f74:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f023 0206 	bic.w	r2, r3, #6
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fa6:	4b44      	ldr	r3, [pc, #272]	; (80030b8 <HAL_ADC_Start_DMA+0x204>)
 8002fa8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_ADC_Start_DMA+0x208>)
 8002fb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_ADC_Start_DMA+0x20c>)
 8002fb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	4a41      	ldr	r2, [pc, #260]	; (80030c4 <HAL_ADC_Start_DMA+0x210>)
 8002fc0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002fca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002fda:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689a      	ldr	r2, [r3, #8]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	334c      	adds	r3, #76	; 0x4c
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f000 fd7e 	bl	8003afc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	2b00      	cmp	r3, #0
 800300a:	d12a      	bne.n	8003062 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <HAL_ADC_Start_DMA+0x214>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d015      	beq.n	8003042 <HAL_ADC_Start_DMA+0x18e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a2c      	ldr	r2, [pc, #176]	; (80030cc <HAL_ADC_Start_DMA+0x218>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d105      	bne.n	800302c <HAL_ADC_Start_DMA+0x178>
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_ADC_Start_DMA+0x204>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00a      	beq.n	8003042 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_ADC_Start_DMA+0x21c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d136      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <HAL_ADC_Start_DMA+0x204>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	d130      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d129      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800305e:	609a      	str	r2, [r3, #8]
 8003060:	e020      	b.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_ADC_Start_DMA+0x214>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d11b      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d114      	bne.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003088:	609a      	str	r2, [r3, #8]
 800308a:	e00b      	b.n	80030a4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309c:	f043 0201 	orr.w	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000004 	.word	0x20000004
 80030b4:	431bde83 	.word	0x431bde83
 80030b8:	40012300 	.word	0x40012300
 80030bc:	0800354d 	.word	0x0800354d
 80030c0:	08003607 	.word	0x08003607
 80030c4:	08003623 	.word	0x08003623
 80030c8:	40012000 	.word	0x40012000
 80030cc:	40012100 	.word	0x40012100
 80030d0:	40012200 	.word	0x40012200

080030d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003104:	bf00      	nop
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_ADC_ConfigChannel+0x1c>
 8003128:	2302      	movs	r3, #2
 800312a:	e105      	b.n	8003338 <HAL_ADC_ConfigChannel+0x228>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b09      	cmp	r3, #9
 800313a:	d925      	bls.n	8003188 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68d9      	ldr	r1, [r3, #12]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	4613      	mov	r3, r2
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	4413      	add	r3, r2
 8003150:	3b1e      	subs	r3, #30
 8003152:	2207      	movs	r2, #7
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	43da      	mvns	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	400a      	ands	r2, r1
 8003160:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68d9      	ldr	r1, [r3, #12]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	4618      	mov	r0, r3
 8003174:	4603      	mov	r3, r0
 8003176:	005b      	lsls	r3, r3, #1
 8003178:	4403      	add	r3, r0
 800317a:	3b1e      	subs	r3, #30
 800317c:	409a      	lsls	r2, r3
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	e022      	b.n	80031ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6919      	ldr	r1, [r3, #16]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	461a      	mov	r2, r3
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	2207      	movs	r2, #7
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43da      	mvns	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	400a      	ands	r2, r1
 80031aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	4618      	mov	r0, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4403      	add	r3, r0
 80031c4:	409a      	lsls	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d824      	bhi.n	8003220 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	3b05      	subs	r3, #5
 80031e8:	221f      	movs	r2, #31
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43da      	mvns	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	400a      	ands	r2, r1
 80031f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	4618      	mov	r0, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685a      	ldr	r2, [r3, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	4413      	add	r3, r2
 8003210:	3b05      	subs	r3, #5
 8003212:	fa00 f203 	lsl.w	r2, r0, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	635a      	str	r2, [r3, #52]	; 0x34
 800321e:	e04c      	b.n	80032ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b0c      	cmp	r3, #12
 8003226:	d824      	bhi.n	8003272 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	3b23      	subs	r3, #35	; 0x23
 800323a:	221f      	movs	r2, #31
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43da      	mvns	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	400a      	ands	r2, r1
 8003248:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	b29b      	uxth	r3, r3
 8003256:	4618      	mov	r0, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	3b23      	subs	r3, #35	; 0x23
 8003264:	fa00 f203 	lsl.w	r2, r0, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
 8003270:	e023      	b.n	80032ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	3b41      	subs	r3, #65	; 0x41
 8003284:	221f      	movs	r2, #31
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43da      	mvns	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	400a      	ands	r2, r1
 8003292:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	4618      	mov	r0, r3
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4413      	add	r3, r2
 80032ac:	3b41      	subs	r3, #65	; 0x41
 80032ae:	fa00 f203 	lsl.w	r2, r0, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_ADC_ConfigChannel+0x234>)
 80032bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a21      	ldr	r2, [pc, #132]	; (8003348 <HAL_ADC_ConfigChannel+0x238>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d109      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x1cc>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b12      	cmp	r3, #18
 80032ce:	d105      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_ADC_ConfigChannel+0x238>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d123      	bne.n	800332e <HAL_ADC_ConfigChannel+0x21e>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d003      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x1e6>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2b11      	cmp	r3, #17
 80032f4:	d11b      	bne.n	800332e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d111      	bne.n	800332e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <HAL_ADC_ConfigChannel+0x23c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a10      	ldr	r2, [pc, #64]	; (8003350 <HAL_ADC_ConfigChannel+0x240>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	0c9a      	lsrs	r2, r3, #18
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003320:	e002      	b.n	8003328 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	3b01      	subs	r3, #1
 8003326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f9      	bne.n	8003322 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012300 	.word	0x40012300
 8003348:	40012000 	.word	0x40012000
 800334c:	20000004 	.word	0x20000004
 8003350:	431bde83 	.word	0x431bde83

08003354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800335c:	4b79      	ldr	r3, [pc, #484]	; (8003544 <ADC_Init+0x1f0>)
 800335e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	021a      	lsls	r2, r3, #8
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e6:	4a58      	ldr	r2, [pc, #352]	; (8003548 <ADC_Init+0x1f4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6899      	ldr	r1, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800341c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	6899      	ldr	r1, [r3, #8]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	609a      	str	r2, [r3, #8]
 8003430:	e00f      	b.n	8003452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f022 0202 	bic.w	r2, r2, #2
 8003460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6899      	ldr	r1, [r3, #8]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	7e1b      	ldrb	r3, [r3, #24]
 800346c:	005a      	lsls	r2, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d01b      	beq.n	80034b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800348e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800349e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6859      	ldr	r1, [r3, #4]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	3b01      	subs	r3, #1
 80034ac:	035a      	lsls	r2, r3, #13
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	e007      	b.n	80034c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	051a      	lsls	r2, r3, #20
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6899      	ldr	r1, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800350a:	025a      	lsls	r2, r3, #9
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6899      	ldr	r1, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	029a      	lsls	r2, r3, #10
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	609a      	str	r2, [r3, #8]
}
 8003538:	bf00      	nop
 800353a:	3714      	adds	r7, #20
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40012300 	.word	0x40012300
 8003548:	0f000001 	.word	0x0f000001

0800354c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d13c      	bne.n	80035e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d12b      	bne.n	80035d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003584:	2b00      	cmp	r3, #0
 8003586:	d127      	bne.n	80035d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d119      	bne.n	80035d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685a      	ldr	r2, [r3, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 0220 	bic.w	r2, r2, #32
 80035b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d105      	bne.n	80035d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f043 0201 	orr.w	r2, r3, #1
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fd7b 	bl	80030d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80035de:	e00e      	b.n	80035fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f003 0310 	and.w	r3, r3, #16
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f7ff fd85 	bl	80030fc <HAL_ADC_ErrorCallback>
}
 80035f2:	e004      	b.n	80035fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	4798      	blx	r3
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f7ff fd67 	bl	80030e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800361a:	bf00      	nop
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b084      	sub	sp, #16
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f043 0204 	orr.w	r2, r3, #4
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7ff fd5a 	bl	80030fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003660:	4b0c      	ldr	r3, [pc, #48]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800366c:	4013      	ands	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800367c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003682:	4a04      	ldr	r2, [pc, #16]	; (8003694 <__NVIC_SetPriorityGrouping+0x44>)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	60d3      	str	r3, [r2, #12]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	e000ed00 	.word	0xe000ed00

08003698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800369c:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <__NVIC_GetPriorityGrouping+0x18>)
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 0307 	and.w	r3, r3, #7
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000ed00 	.word	0xe000ed00

080036b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	db0b      	blt.n	80036de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	f003 021f 	and.w	r2, r3, #31
 80036cc:	4907      	ldr	r1, [pc, #28]	; (80036ec <__NVIC_EnableIRQ+0x38>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	095b      	lsrs	r3, r3, #5
 80036d4:	2001      	movs	r0, #1
 80036d6:	fa00 f202 	lsl.w	r2, r0, r2
 80036da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000e100 	.word	0xe000e100

080036f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	6039      	str	r1, [r7, #0]
 80036fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	2b00      	cmp	r3, #0
 8003702:	db0a      	blt.n	800371a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	b2da      	uxtb	r2, r3
 8003708:	490c      	ldr	r1, [pc, #48]	; (800373c <__NVIC_SetPriority+0x4c>)
 800370a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370e:	0112      	lsls	r2, r2, #4
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	440b      	add	r3, r1
 8003714:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003718:	e00a      	b.n	8003730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	4908      	ldr	r1, [pc, #32]	; (8003740 <__NVIC_SetPriority+0x50>)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	3b04      	subs	r3, #4
 8003728:	0112      	lsls	r2, r2, #4
 800372a:	b2d2      	uxtb	r2, r2
 800372c:	440b      	add	r3, r1
 800372e:	761a      	strb	r2, [r3, #24]
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	e000e100 	.word	0xe000e100
 8003740:	e000ed00 	.word	0xe000ed00

08003744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003744:	b480      	push	{r7}
 8003746:	b089      	sub	sp, #36	; 0x24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	f1c3 0307 	rsb	r3, r3, #7
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf28      	it	cs
 8003762:	2304      	movcs	r3, #4
 8003764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	3304      	adds	r3, #4
 800376a:	2b06      	cmp	r3, #6
 800376c:	d902      	bls.n	8003774 <NVIC_EncodePriority+0x30>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3b03      	subs	r3, #3
 8003772:	e000      	b.n	8003776 <NVIC_EncodePriority+0x32>
 8003774:	2300      	movs	r3, #0
 8003776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003778:	f04f 32ff 	mov.w	r2, #4294967295
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	43da      	mvns	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	401a      	ands	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800378c:	f04f 31ff 	mov.w	r1, #4294967295
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	43d9      	mvns	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800379c:	4313      	orrs	r3, r2
         );
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3724      	adds	r7, #36	; 0x24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
	...

080037ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037bc:	d301      	bcc.n	80037c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037be:	2301      	movs	r3, #1
 80037c0:	e00f      	b.n	80037e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c2:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <SysTick_Config+0x40>)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ca:	210f      	movs	r1, #15
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f7ff ff8e 	bl	80036f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <SysTick_Config+0x40>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037da:	4b04      	ldr	r3, [pc, #16]	; (80037ec <SysTick_Config+0x40>)
 80037dc:	2207      	movs	r2, #7
 80037de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	e000e010 	.word	0xe000e010

080037f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ff29 	bl	8003650 <__NVIC_SetPriorityGrouping>
}
 80037fe:	bf00      	nop
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	4603      	mov	r3, r0
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003818:	f7ff ff3e 	bl	8003698 <__NVIC_GetPriorityGrouping>
 800381c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	6978      	ldr	r0, [r7, #20]
 8003824:	f7ff ff8e 	bl	8003744 <NVIC_EncodePriority>
 8003828:	4602      	mov	r2, r0
 800382a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff5d 	bl	80036f0 <__NVIC_SetPriority>
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	4603      	mov	r3, r0
 8003846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff31 	bl	80036b4 <__NVIC_EnableIRQ>
}
 8003852:	bf00      	nop
 8003854:	3708      	adds	r7, #8
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b082      	sub	sp, #8
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff ffa2 	bl	80037ac <SysTick_Config>
 8003868:	4603      	mov	r3, r0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e014      	b.n	80038ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	791b      	ldrb	r3, [r3, #4]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fd fca3 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2202      	movs	r2, #2
 800389e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b087      	sub	sp, #28
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	60f8      	str	r0, [r7, #12]
 80038be:	60b9      	str	r1, [r7, #8]
 80038c0:	607a      	str	r2, [r7, #4]
 80038c2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d105      	bne.n	80038e0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4413      	add	r3, r2
 80038da:	3308      	adds	r3, #8
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e004      	b.n	80038ea <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4413      	add	r3, r2
 80038e6:	3314      	adds	r3, #20
 80038e8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	461a      	mov	r2, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	371c      	adds	r7, #28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003900:	b480      	push	{r7}
 8003902:	b087      	sub	sp, #28
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	795b      	ldrb	r3, [r3, #5]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_DAC_ConfigChannel+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e03c      	b.n	8003992 <HAL_DAC_ConfigChannel+0x92>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2202      	movs	r2, #2
 8003922:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0310 	and.w	r3, r3, #16
 8003932:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4013      	ands	r3, r2
 8003940:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4313      	orrs	r3, r2
 800394c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	697a      	ldr	r2, [r7, #20]
 800395c:	4313      	orrs	r3, r2
 800395e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	22c0      	movs	r2, #192	; 0xc0
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	43da      	mvns	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	400a      	ands	r2, r1
 8003982:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2201      	movs	r2, #1
 8003988:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039ac:	f7ff fa0e 	bl	8002dcc <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e099      	b.n	8003af0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039dc:	e00f      	b.n	80039fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039de:	f7ff f9f5 	bl	8002dcc <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d908      	bls.n	80039fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2203      	movs	r2, #3
 80039f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e078      	b.n	8003af0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e8      	bne.n	80039de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4b38      	ldr	r3, [pc, #224]	; (8003af8 <HAL_DMA_Init+0x158>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	2b04      	cmp	r3, #4
 8003a56:	d107      	bne.n	8003a68 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4313      	orrs	r3, r2
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	f023 0307 	bic.w	r3, r3, #7
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a8e:	2b04      	cmp	r3, #4
 8003a90:	d117      	bne.n	8003ac2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00e      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 fb01 	bl	80040ac <DMA_CheckFifoParam>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d008      	beq.n	8003ac2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2240      	movs	r2, #64	; 0x40
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e016      	b.n	8003af0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fab8 	bl	8004040 <DMA_CalcBaseAndBitshift>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	f010803f 	.word	0xf010803f

08003afc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b12:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Start_IT+0x26>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e040      	b.n	8003ba4 <HAL_DMA_Start_IT+0xa8>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d12f      	bne.n	8003b96 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa4a 	bl	8003fe4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b54:	223f      	movs	r2, #63	; 0x3f
 8003b56:	409a      	lsls	r2, r3
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0216 	orr.w	r2, r2, #22
 8003b6a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0208 	orr.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e005      	b.n	8003ba2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003bba:	f7ff f907 	bl	8002dcc <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d008      	beq.n	8003bde <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e052      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f022 0216 	bic.w	r2, r2, #22
 8003bec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bfc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <HAL_DMA_Abort+0x62>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d007      	beq.n	8003c1e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0208 	bic.w	r2, r2, #8
 8003c1c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c2e:	e013      	b.n	8003c58 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c30:	f7ff f8cc 	bl	8002dcc <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d90c      	bls.n	8003c58 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2203      	movs	r2, #3
 8003c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e015      	b.n	8003c84 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e4      	bne.n	8003c30 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	223f      	movs	r2, #63	; 0x3f
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c9a:	b2db      	uxtb	r3, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d004      	beq.n	8003caa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e00c      	b.n	8003cc4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2205      	movs	r2, #5
 8003cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003cdc:	4b8e      	ldr	r3, [pc, #568]	; (8003f18 <HAL_DMA_IRQHandler+0x248>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a8e      	ldr	r2, [pc, #568]	; (8003f1c <HAL_DMA_IRQHandler+0x24c>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	0a9b      	lsrs	r3, r3, #10
 8003ce8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cfa:	2208      	movs	r2, #8
 8003cfc:	409a      	lsls	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d013      	beq.n	8003d3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0204 	bic.w	r2, r2, #4
 8003d22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d28:	2208      	movs	r2, #8
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d34:	f043 0201 	orr.w	r2, r3, #1
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d40:	2201      	movs	r2, #1
 8003d42:	409a      	lsls	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d012      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5e:	2201      	movs	r2, #1
 8003d60:	409a      	lsls	r2, r3
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d6a:	f043 0202 	orr.w	r2, r3, #2
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	2204      	movs	r2, #4
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d012      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00b      	beq.n	8003da8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2204      	movs	r2, #4
 8003d96:	409a      	lsls	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da0:	f043 0204 	orr.w	r2, r3, #4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dac:	2210      	movs	r2, #16
 8003dae:	409a      	lsls	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d043      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0308 	and.w	r3, r3, #8
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d03c      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	2210      	movs	r2, #16
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d018      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d108      	bne.n	8003e00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d024      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	4798      	blx	r3
 8003dfe:	e01f      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
 8003e10:	e016      	b.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d107      	bne.n	8003e30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0208 	bic.w	r2, r2, #8
 8003e2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2220      	movs	r2, #32
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	f000 808f 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8087 	beq.w	8003f70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e66:	2220      	movs	r2, #32
 8003e68:	409a      	lsls	r2, r3
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b05      	cmp	r3, #5
 8003e78:	d136      	bne.n	8003ee8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0216 	bic.w	r2, r2, #22
 8003e88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_DMA_IRQHandler+0x1da>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0208 	bic.w	r2, r2, #8
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ebe:	223f      	movs	r2, #63	; 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d07e      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	4798      	blx	r3
        }
        return;
 8003ee6:	e079      	b.n	8003fdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d01d      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10d      	bne.n	8003f20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d031      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
 8003f14:	e02c      	b.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
 8003f16:	bf00      	nop
 8003f18:	20000004 	.word	0x20000004
 8003f1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d023      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	4798      	blx	r3
 8003f30:	e01e      	b.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10f      	bne.n	8003f60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0210 	bic.w	r2, r2, #16
 8003f4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d032      	beq.n	8003fde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d022      	beq.n	8003fca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2205      	movs	r2, #5
 8003f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d307      	bcc.n	8003fb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f2      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x2cc>
 8003fb6:	e000      	b.n	8003fba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003fb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
 8003fda:	e000      	b.n	8003fde <HAL_DMA_IRQHandler+0x30e>
        return;
 8003fdc:	bf00      	nop
    }
  }
}
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004000:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b40      	cmp	r3, #64	; 0x40
 8004010:	d108      	bne.n	8004024 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004022:	e007      	b.n	8004034 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	3b10      	subs	r3, #16
 8004050:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <DMA_CalcBaseAndBitshift+0x64>)
 8004052:	fba2 2303 	umull	r2, r3, r2, r3
 8004056:	091b      	lsrs	r3, r3, #4
 8004058:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800405a:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <DMA_CalcBaseAndBitshift+0x68>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d909      	bls.n	8004082 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	1d1a      	adds	r2, r3, #4
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	659a      	str	r2, [r3, #88]	; 0x58
 8004080:	e007      	b.n	8004092 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800408a:	f023 0303 	bic.w	r3, r3, #3
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	aaaaaaab 	.word	0xaaaaaaab
 80040a8:	0800bfd8 	.word	0x0800bfd8

080040ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b4:	2300      	movs	r3, #0
 80040b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d11f      	bne.n	8004106 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d856      	bhi.n	800417a <DMA_CheckFifoParam+0xce>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <DMA_CheckFifoParam+0x28>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040e5 	.word	0x080040e5
 80040d8:	080040f7 	.word	0x080040f7
 80040dc:	080040e5 	.word	0x080040e5
 80040e0:	0800417b 	.word	0x0800417b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d046      	beq.n	800417e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f4:	e043      	b.n	800417e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fe:	d140      	bne.n	8004182 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004104:	e03d      	b.n	8004182 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d121      	bne.n	8004154 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d837      	bhi.n	8004186 <DMA_CheckFifoParam+0xda>
 8004116:	a201      	add	r2, pc, #4	; (adr r2, 800411c <DMA_CheckFifoParam+0x70>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	0800412d 	.word	0x0800412d
 8004120:	08004133 	.word	0x08004133
 8004124:	0800412d 	.word	0x0800412d
 8004128:	08004145 	.word	0x08004145
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	73fb      	strb	r3, [r7, #15]
      break;
 8004130:	e030      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d025      	beq.n	800418a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004142:	e022      	b.n	800418a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800414c:	d11f      	bne.n	800418e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004152:	e01c      	b.n	800418e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d903      	bls.n	8004162 <DMA_CheckFifoParam+0xb6>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b03      	cmp	r3, #3
 800415e:	d003      	beq.n	8004168 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004160:	e018      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      break;
 8004166:	e015      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00e      	beq.n	8004192 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	73fb      	strb	r3, [r7, #15]
      break;
 8004178:	e00b      	b.n	8004192 <DMA_CheckFifoParam+0xe6>
      break;
 800417a:	bf00      	nop
 800417c:	e00a      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e008      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e006      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
 8004188:	e004      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 800418a:	bf00      	nop
 800418c:	e002      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;   
 800418e:	bf00      	nop
 8004190:	e000      	b.n	8004194 <DMA_CheckFifoParam+0xe8>
      break;
 8004192:	bf00      	nop
    }
  } 
  
  return status; 
 8004194:	7bfb      	ldrb	r3, [r7, #15]
}
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b089      	sub	sp, #36	; 0x24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
 80041be:	e16b      	b.n	8004498 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041c0:	2201      	movs	r2, #1
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	4013      	ands	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	429a      	cmp	r2, r3
 80041da:	f040 815a 	bne.w	8004492 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d005      	beq.n	80041f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d130      	bne.n	8004258 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800422c:	2201      	movs	r2, #1
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	fa02 f303 	lsl.w	r3, r2, r3
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	f003 0201 	and.w	r2, r3, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	4313      	orrs	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	2b03      	cmp	r3, #3
 8004262:	d017      	beq.n	8004294 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	2203      	movs	r2, #3
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	43db      	mvns	r3, r3
 8004276:	69ba      	ldr	r2, [r7, #24]
 8004278:	4013      	ands	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	fa02 f303 	lsl.w	r3, r2, r3
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d123      	bne.n	80042e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	08da      	lsrs	r2, r3, #3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3208      	adds	r2, #8
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	220f      	movs	r2, #15
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	08da      	lsrs	r2, r3, #3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	3208      	adds	r2, #8
 80042e2:	69b9      	ldr	r1, [r7, #24]
 80042e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2203      	movs	r2, #3
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4013      	ands	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 0203 	and.w	r2, r3, #3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004324:	2b00      	cmp	r3, #0
 8004326:	f000 80b4 	beq.w	8004492 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b60      	ldr	r3, [pc, #384]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4a5f      	ldr	r2, [pc, #380]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 8004334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004338:	6453      	str	r3, [r2, #68]	; 0x44
 800433a:	4b5d      	ldr	r3, [pc, #372]	; (80044b0 <HAL_GPIO_Init+0x30c>)
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004346:	4a5b      	ldr	r2, [pc, #364]	; (80044b4 <HAL_GPIO_Init+0x310>)
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	089b      	lsrs	r3, r3, #2
 800434c:	3302      	adds	r3, #2
 800434e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	220f      	movs	r2, #15
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_GPIO_Init+0x314>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d02b      	beq.n	80043ca <HAL_GPIO_Init+0x226>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a51      	ldr	r2, [pc, #324]	; (80044bc <HAL_GPIO_Init+0x318>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d025      	beq.n	80043c6 <HAL_GPIO_Init+0x222>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a50      	ldr	r2, [pc, #320]	; (80044c0 <HAL_GPIO_Init+0x31c>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d01f      	beq.n	80043c2 <HAL_GPIO_Init+0x21e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a4f      	ldr	r2, [pc, #316]	; (80044c4 <HAL_GPIO_Init+0x320>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d019      	beq.n	80043be <HAL_GPIO_Init+0x21a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a4e      	ldr	r2, [pc, #312]	; (80044c8 <HAL_GPIO_Init+0x324>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_GPIO_Init+0x216>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a4d      	ldr	r2, [pc, #308]	; (80044cc <HAL_GPIO_Init+0x328>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00d      	beq.n	80043b6 <HAL_GPIO_Init+0x212>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a4c      	ldr	r2, [pc, #304]	; (80044d0 <HAL_GPIO_Init+0x32c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d007      	beq.n	80043b2 <HAL_GPIO_Init+0x20e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a4b      	ldr	r2, [pc, #300]	; (80044d4 <HAL_GPIO_Init+0x330>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_GPIO_Init+0x20a>
 80043aa:	2307      	movs	r3, #7
 80043ac:	e00e      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ae:	2308      	movs	r3, #8
 80043b0:	e00c      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043b2:	2306      	movs	r3, #6
 80043b4:	e00a      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043b6:	2305      	movs	r3, #5
 80043b8:	e008      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ba:	2304      	movs	r3, #4
 80043bc:	e006      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043be:	2303      	movs	r3, #3
 80043c0:	e004      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e000      	b.n	80043cc <HAL_GPIO_Init+0x228>
 80043ca:	2300      	movs	r3, #0
 80043cc:	69fa      	ldr	r2, [r7, #28]
 80043ce:	f002 0203 	and.w	r2, r2, #3
 80043d2:	0092      	lsls	r2, r2, #2
 80043d4:	4093      	lsls	r3, r2
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043dc:	4935      	ldr	r1, [pc, #212]	; (80044b4 <HAL_GPIO_Init+0x310>)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ea:	4b3b      	ldr	r3, [pc, #236]	; (80044d8 <HAL_GPIO_Init+0x334>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	43db      	mvns	r3, r3
 80043f4:	69ba      	ldr	r2, [r7, #24]
 80043f6:	4013      	ands	r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800440e:	4a32      	ldr	r2, [pc, #200]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004414:	4b30      	ldr	r3, [pc, #192]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	43db      	mvns	r3, r3
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4013      	ands	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004438:	4a27      	ldr	r2, [pc, #156]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	43db      	mvns	r3, r3
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	4013      	ands	r3, r2
 800444c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004462:	4a1d      	ldr	r2, [pc, #116]	; (80044d8 <HAL_GPIO_Init+0x334>)
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800448c:	4a12      	ldr	r2, [pc, #72]	; (80044d8 <HAL_GPIO_Init+0x334>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	3301      	adds	r3, #1
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	f67f ae90 	bls.w	80041c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop
 80044a4:	3724      	adds	r7, #36	; 0x24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40023800 	.word	0x40023800
 80044b4:	40013800 	.word	0x40013800
 80044b8:	40020000 	.word	0x40020000
 80044bc:	40020400 	.word	0x40020400
 80044c0:	40020800 	.word	0x40020800
 80044c4:	40020c00 	.word	0x40020c00
 80044c8:	40021000 	.word	0x40021000
 80044cc:	40021400 	.word	0x40021400
 80044d0:	40021800 	.word	0x40021800
 80044d4:	40021c00 	.word	0x40021c00
 80044d8:	40013c00 	.word	0x40013c00

080044dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d002      	beq.n	80044fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e001      	b.n	80044fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	807b      	strh	r3, [r7, #2]
 8004518:	4613      	mov	r3, r2
 800451a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800451c:	787b      	ldrb	r3, [r7, #1]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004522:	887a      	ldrh	r2, [r7, #2]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004528:	e003      	b.n	8004532 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800452a:	887b      	ldrh	r3, [r7, #2]
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	619a      	str	r2, [r3, #24]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800453e:	b480      	push	{r7}
 8004540:	b085      	sub	sp, #20
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	460b      	mov	r3, r1
 8004548:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004550:	887a      	ldrh	r2, [r7, #2]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4013      	ands	r3, r2
 8004556:	041a      	lsls	r2, r3, #16
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	43d9      	mvns	r1, r3
 800455c:	887b      	ldrh	r3, [r7, #2]
 800455e:	400b      	ands	r3, r1
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	bf00      	nop
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
	...

08004574 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e267      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d075      	beq.n	800467e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004592:	4b88      	ldr	r3, [pc, #544]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 030c 	and.w	r3, r3, #12
 800459a:	2b04      	cmp	r3, #4
 800459c:	d00c      	beq.n	80045b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800459e:	4b85      	ldr	r3, [pc, #532]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d112      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045aa:	4b82      	ldr	r3, [pc, #520]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045b6:	d10b      	bne.n	80045d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	4b7e      	ldr	r3, [pc, #504]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d05b      	beq.n	800467c <HAL_RCC_OscConfig+0x108>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d157      	bne.n	800467c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e242      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d8:	d106      	bne.n	80045e8 <HAL_RCC_OscConfig+0x74>
 80045da:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a75      	ldr	r2, [pc, #468]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xb0>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x98>
 80045f2:	4b70      	ldr	r3, [pc, #448]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6f      	ldr	r2, [pc, #444]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6d      	ldr	r3, [pc, #436]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6c      	ldr	r2, [pc, #432]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xb0>
 800460c:	4b69      	ldr	r3, [pc, #420]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a68      	ldr	r2, [pc, #416]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b66      	ldr	r3, [pc, #408]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a65      	ldr	r2, [pc, #404]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe fbce 	bl	8002dcc <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe fbca 	bl	8002dcc <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e207      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b5b      	ldr	r3, [pc, #364]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xc0>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fe fbba 	bl	8002dcc <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800465c:	f7fe fbb6 	bl	8002dcc <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1f3      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	4b51      	ldr	r3, [pc, #324]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0xe8>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004696:	4b47      	ldr	r3, [pc, #284]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046a2:	4b44      	ldr	r3, [pc, #272]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x152>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1c7      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3b      	ldr	r3, [pc, #236]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4937      	ldr	r1, [pc, #220]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_OscConfig+0x244>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fe fb6f 	bl	8002dcc <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fe fb6b 	bl	8002dcc <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1a8      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2b      	ldr	r3, [pc, #172]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b28      	ldr	r3, [pc, #160]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4925      	ldr	r1, [pc, #148]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCC_OscConfig+0x244>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fe fb4e 	bl	8002dcc <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004734:	f7fe fb4a 	bl	8002dcc <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e187      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1b      	ldr	r3, [pc, #108]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d036      	beq.n	80047cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d016      	beq.n	8004794 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <HAL_RCC_OscConfig+0x248>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476c:	f7fe fb2e 	bl	8002dcc <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004774:	f7fe fb2a 	bl	8002dcc <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e167      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_OscConfig+0x240>)
 8004788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x200>
 8004792:	e01b      	b.n	80047cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004794:	4b09      	ldr	r3, [pc, #36]	; (80047bc <HAL_RCC_OscConfig+0x248>)
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479a:	f7fe fb17 	bl	8002dcc <HAL_GetTick>
 800479e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a0:	e00e      	b.n	80047c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047a2:	f7fe fb13 	bl	8002dcc <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d907      	bls.n	80047c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e150      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
 80047b4:	40023800 	.word	0x40023800
 80047b8:	42470000 	.word	0x42470000
 80047bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c0:	4b88      	ldr	r3, [pc, #544]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047c4:	f003 0302 	and.w	r3, r3, #2
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1ea      	bne.n	80047a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0304 	and.w	r3, r3, #4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8097 	beq.w	8004908 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047da:	2300      	movs	r3, #0
 80047dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047de:	4b81      	ldr	r3, [pc, #516]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10f      	bne.n	800480a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	4b7d      	ldr	r3, [pc, #500]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a7c      	ldr	r2, [pc, #496]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
 80047fa:	4b7a      	ldr	r3, [pc, #488]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004806:	2301      	movs	r3, #1
 8004808:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480a:	4b77      	ldr	r3, [pc, #476]	; (80049e8 <HAL_RCC_OscConfig+0x474>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d118      	bne.n	8004848 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004816:	4b74      	ldr	r3, [pc, #464]	; (80049e8 <HAL_RCC_OscConfig+0x474>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a73      	ldr	r2, [pc, #460]	; (80049e8 <HAL_RCC_OscConfig+0x474>)
 800481c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004822:	f7fe fad3 	bl	8002dcc <HAL_GetTick>
 8004826:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004828:	e008      	b.n	800483c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482a:	f7fe facf 	bl	8002dcc <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	2b02      	cmp	r3, #2
 8004836:	d901      	bls.n	800483c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e10c      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800483c:	4b6a      	ldr	r3, [pc, #424]	; (80049e8 <HAL_RCC_OscConfig+0x474>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0f0      	beq.n	800482a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x2ea>
 8004850:	4b64      	ldr	r3, [pc, #400]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004854:	4a63      	ldr	r2, [pc, #396]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004856:	f043 0301 	orr.w	r3, r3, #1
 800485a:	6713      	str	r3, [r2, #112]	; 0x70
 800485c:	e01c      	b.n	8004898 <HAL_RCC_OscConfig+0x324>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b05      	cmp	r3, #5
 8004864:	d10c      	bne.n	8004880 <HAL_RCC_OscConfig+0x30c>
 8004866:	4b5f      	ldr	r3, [pc, #380]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486a:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 800486c:	f043 0304 	orr.w	r3, r3, #4
 8004870:	6713      	str	r3, [r2, #112]	; 0x70
 8004872:	4b5c      	ldr	r3, [pc, #368]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	4a5b      	ldr	r2, [pc, #364]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004878:	f043 0301 	orr.w	r3, r3, #1
 800487c:	6713      	str	r3, [r2, #112]	; 0x70
 800487e:	e00b      	b.n	8004898 <HAL_RCC_OscConfig+0x324>
 8004880:	4b58      	ldr	r3, [pc, #352]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004884:	4a57      	ldr	r2, [pc, #348]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004886:	f023 0301 	bic.w	r3, r3, #1
 800488a:	6713      	str	r3, [r2, #112]	; 0x70
 800488c:	4b55      	ldr	r3, [pc, #340]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 800488e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004890:	4a54      	ldr	r2, [pc, #336]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 0304 	bic.w	r3, r3, #4
 8004896:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d015      	beq.n	80048cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a0:	f7fe fa94 	bl	8002dcc <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048a6:	e00a      	b.n	80048be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048a8:	f7fe fa90 	bl	8002dcc <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0cb      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048be:	4b49      	ldr	r3, [pc, #292]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0ee      	beq.n	80048a8 <HAL_RCC_OscConfig+0x334>
 80048ca:	e014      	b.n	80048f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048cc:	f7fe fa7e 	bl	8002dcc <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d2:	e00a      	b.n	80048ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fe fa7a 	bl	8002dcc <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d901      	bls.n	80048ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e0b5      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ea:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80048ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d1ee      	bne.n	80048d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d105      	bne.n	8004908 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048fc:	4b39      	ldr	r3, [pc, #228]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004900:	4a38      	ldr	r2, [pc, #224]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004902:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004906:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a1 	beq.w	8004a54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004912:	4b34      	ldr	r3, [pc, #208]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b08      	cmp	r3, #8
 800491c:	d05c      	beq.n	80049d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d141      	bne.n	80049aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b31      	ldr	r3, [pc, #196]	; (80049ec <HAL_RCC_OscConfig+0x478>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fa4e 	bl	8002dcc <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fe fa4a 	bl	8002dcc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e087      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b27      	ldr	r3, [pc, #156]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	69da      	ldr	r2, [r3, #28]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004960:	019b      	lsls	r3, r3, #6
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	085b      	lsrs	r3, r3, #1
 800496a:	3b01      	subs	r3, #1
 800496c:	041b      	lsls	r3, r3, #16
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	491b      	ldr	r1, [pc, #108]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 8004978:	4313      	orrs	r3, r2
 800497a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_RCC_OscConfig+0x478>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004982:	f7fe fa23 	bl	8002dcc <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800498a:	f7fe fa1f 	bl	8002dcc <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e05c      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499c:	4b11      	ldr	r3, [pc, #68]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x416>
 80049a8:	e054      	b.n	8004a54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_RCC_OscConfig+0x478>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b0:	f7fe fa0c 	bl	8002dcc <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b8:	f7fe fa08 	bl	8002dcc <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e045      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <HAL_RCC_OscConfig+0x470>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f0      	bne.n	80049b8 <HAL_RCC_OscConfig+0x444>
 80049d6:	e03d      	b.n	8004a54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e038      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
 80049e4:	40023800 	.word	0x40023800
 80049e8:	40007000 	.word	0x40007000
 80049ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <HAL_RCC_OscConfig+0x4ec>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d028      	beq.n	8004a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d121      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d11a      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d111      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a36:	085b      	lsrs	r3, r3, #1
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d107      	bne.n	8004a50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40023800 	.word	0x40023800

08004a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0cc      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b68      	ldr	r3, [pc, #416]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d90c      	bls.n	8004aa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8e:	4b63      	ldr	r3, [pc, #396]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d001      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0b8      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d005      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4a58      	ldr	r2, [pc, #352]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ac2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ad0:	4b53      	ldr	r3, [pc, #332]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	4a52      	ldr	r2, [pc, #328]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ada:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004adc:	4b50      	ldr	r3, [pc, #320]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	494d      	ldr	r1, [pc, #308]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d044      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b02:	4b47      	ldr	r3, [pc, #284]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d119      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e07f      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d107      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b22:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06f      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b32:	4b3b      	ldr	r3, [pc, #236]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e067      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b42:	4b37      	ldr	r3, [pc, #220]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f023 0203 	bic.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	4934      	ldr	r1, [pc, #208]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b54:	f7fe f93a 	bl	8002dcc <HAL_GetTick>
 8004b58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5a:	e00a      	b.n	8004b72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b5c:	f7fe f936 	bl	8002dcc <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e04f      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b72:	4b2b      	ldr	r3, [pc, #172]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f003 020c 	and.w	r2, r3, #12
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d1eb      	bne.n	8004b5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d20c      	bcs.n	8004bac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b9a:	4b20      	ldr	r3, [pc, #128]	; (8004c1c <HAL_RCC_ClockConfig+0x1b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	683a      	ldr	r2, [r7, #0]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d001      	beq.n	8004bac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e032      	b.n	8004c12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d008      	beq.n	8004bca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb8:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4916      	ldr	r1, [pc, #88]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d009      	beq.n	8004bea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bd6:	4b12      	ldr	r3, [pc, #72]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	490e      	ldr	r1, [pc, #56]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bea:	f000 f821 	bl	8004c30 <HAL_RCC_GetSysClockFreq>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <HAL_RCC_ClockConfig+0x1bc>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	490a      	ldr	r1, [pc, #40]	; (8004c24 <HAL_RCC_ClockConfig+0x1c0>)
 8004bfc:	5ccb      	ldrb	r3, [r1, r3]
 8004bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8004c02:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_RCC_ClockConfig+0x1c8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe f89a 	bl	8002d44 <HAL_InitTick>

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40023c00 	.word	0x40023c00
 8004c20:	40023800 	.word	0x40023800
 8004c24:	0800bfc0 	.word	0x0800bfc0
 8004c28:	20000004 	.word	0x20000004
 8004c2c:	20000008 	.word	0x20000008

08004c30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b090      	sub	sp, #64	; 0x40
 8004c36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c40:	2300      	movs	r3, #0
 8004c42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004c44:	2300      	movs	r3, #0
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c48:	4b59      	ldr	r3, [pc, #356]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d00d      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x40>
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	f200 80a1 	bhi.w	8004d9c <HAL_RCC_GetSysClockFreq+0x16c>
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x34>
 8004c5e:	2b04      	cmp	r3, #4
 8004c60:	d003      	beq.n	8004c6a <HAL_RCC_GetSysClockFreq+0x3a>
 8004c62:	e09b      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c64:	4b53      	ldr	r3, [pc, #332]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c68:	e09b      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c6a:	4b53      	ldr	r3, [pc, #332]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c6e:	e098      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c70:	4b4f      	ldr	r3, [pc, #316]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c7a:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d028      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c86:	4b4a      	ldr	r3, [pc, #296]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	099b      	lsrs	r3, r3, #6
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	627a      	str	r2, [r7, #36]	; 0x24
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c98:	2100      	movs	r1, #0
 8004c9a:	4b47      	ldr	r3, [pc, #284]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c9c:	fb03 f201 	mul.w	r2, r3, r1
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	fb00 f303 	mul.w	r3, r0, r3
 8004ca6:	4413      	add	r3, r2
 8004ca8:	4a43      	ldr	r2, [pc, #268]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004caa:	fba0 1202 	umull	r1, r2, r0, r2
 8004cae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb0:	460a      	mov	r2, r1
 8004cb2:	62ba      	str	r2, [r7, #40]	; 0x28
 8004cb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	61fa      	str	r2, [r7, #28]
 8004cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004cca:	f7fb ffdd 	bl	8000c88 <__aeabi_uldivmod>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd6:	e053      	b.n	8004d80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	2200      	movs	r2, #0
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	617a      	str	r2, [r7, #20]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cea:	f04f 0b00 	mov.w	fp, #0
 8004cee:	4652      	mov	r2, sl
 8004cf0:	465b      	mov	r3, fp
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d00:	0150      	lsls	r0, r2, #5
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	ebb2 080a 	subs.w	r8, r2, sl
 8004d0a:	eb63 090b 	sbc.w	r9, r3, fp
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	f04f 0300 	mov.w	r3, #0
 8004d16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d22:	ebb2 0408 	subs.w	r4, r2, r8
 8004d26:	eb63 0509 	sbc.w	r5, r3, r9
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	00eb      	lsls	r3, r5, #3
 8004d34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d38:	00e2      	lsls	r2, r4, #3
 8004d3a:	4614      	mov	r4, r2
 8004d3c:	461d      	mov	r5, r3
 8004d3e:	eb14 030a 	adds.w	r3, r4, sl
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	eb45 030b 	adc.w	r3, r5, fp
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	f04f 0200 	mov.w	r2, #0
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d56:	4629      	mov	r1, r5
 8004d58:	028b      	lsls	r3, r1, #10
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d60:	4621      	mov	r1, r4
 8004d62:	028a      	lsls	r2, r1, #10
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	60fa      	str	r2, [r7, #12]
 8004d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d74:	f7fb ff88 	bl	8000c88 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	0c1b      	lsrs	r3, r3, #16
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d9a:	e002      	b.n	8004da2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3740      	adds	r7, #64	; 0x40
 8004da8:	46bd      	mov	sp, r7
 8004daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800
 8004db4:	00f42400 	.word	0x00f42400
 8004db8:	017d7840 	.word	0x017d7840

08004dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dc0:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20000004 	.word	0x20000004

08004dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dd8:	f7ff fff0 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0a9b      	lsrs	r3, r3, #10
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40023800 	.word	0x40023800
 8004df8:	0800bfd0 	.word	0x0800bfd0

08004dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e00:	f7ff ffdc 	bl	8004dbc <HAL_RCC_GetHCLKFreq>
 8004e04:	4602      	mov	r2, r0
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	0b5b      	lsrs	r3, r3, #13
 8004e0c:	f003 0307 	and.w	r3, r3, #7
 8004e10:	4903      	ldr	r1, [pc, #12]	; (8004e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e12:	5ccb      	ldrb	r3, [r1, r3]
 8004e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	0800bfd0 	.word	0x0800bfd0

08004e24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e041      	b.n	8004eba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd fdbe 	bl	80029cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f000 fe90 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
	...

08004ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d001      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e04e      	b.n	8004f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d022      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f06:	d01d      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a1f      	ldr	r2, [pc, #124]	; (8004f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d018      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d013      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d00e      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	; (8004f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d009      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d004      	beq.n	8004f44 <HAL_TIM_Base_Start_IT+0x80>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d111      	bne.n	8004f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b06      	cmp	r3, #6
 8004f54:	d010      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f042 0201 	orr.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	e007      	b.n	8004f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40000400 	.word	0x40000400
 8004f90:	40000800 	.word	0x40000800
 8004f94:	40000c00 	.word	0x40000c00
 8004f98:	40010400 	.word	0x40010400
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40001800 	.word	0x40001800

08004fa4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e041      	b.n	800503a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f839 	bl	8005042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f000 fdd0 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
	...

08005058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d109      	bne.n	800507c <HAL_TIM_PWM_Start+0x24>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800506e:	b2db      	uxtb	r3, r3
 8005070:	2b01      	cmp	r3, #1
 8005072:	bf14      	ite	ne
 8005074:	2301      	movne	r3, #1
 8005076:	2300      	moveq	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	e022      	b.n	80050c2 <HAL_TIM_PWM_Start+0x6a>
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b04      	cmp	r3, #4
 8005080:	d109      	bne.n	8005096 <HAL_TIM_PWM_Start+0x3e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b01      	cmp	r3, #1
 800508c:	bf14      	ite	ne
 800508e:	2301      	movne	r3, #1
 8005090:	2300      	moveq	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	e015      	b.n	80050c2 <HAL_TIM_PWM_Start+0x6a>
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d109      	bne.n	80050b0 <HAL_TIM_PWM_Start+0x58>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	bf14      	ite	ne
 80050a8:	2301      	movne	r3, #1
 80050aa:	2300      	moveq	r3, #0
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	e008      	b.n	80050c2 <HAL_TIM_PWM_Start+0x6a>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d001      	beq.n	80050ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e07c      	b.n	80051c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d104      	bne.n	80050da <HAL_TIM_PWM_Start+0x82>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d8:	e013      	b.n	8005102 <HAL_TIM_PWM_Start+0xaa>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b04      	cmp	r3, #4
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0x92>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e8:	e00b      	b.n	8005102 <HAL_TIM_PWM_Start+0xaa>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0xa2>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f8:	e003      	b.n	8005102 <HAL_TIM_PWM_Start+0xaa>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2201      	movs	r2, #1
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f001 f950 	bl	80063b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2d      	ldr	r2, [pc, #180]	; (80051cc <HAL_TIM_PWM_Start+0x174>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIM_PWM_Start+0xcc>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2c      	ldr	r2, [pc, #176]	; (80051d0 <HAL_TIM_PWM_Start+0x178>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d101      	bne.n	8005128 <HAL_TIM_PWM_Start+0xd0>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_TIM_PWM_Start+0xd2>
 8005128:	2300      	movs	r3, #0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d007      	beq.n	800513e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800513c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a22      	ldr	r2, [pc, #136]	; (80051cc <HAL_TIM_PWM_Start+0x174>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d01d      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_TIM_PWM_Start+0x17c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <HAL_TIM_PWM_Start+0x180>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_TIM_PWM_Start+0x184>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <HAL_TIM_PWM_Start+0x178>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIM_PWM_Start+0x188>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIM_PWM_Start+0x136>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a16      	ldr	r2, [pc, #88]	; (80051e4 <HAL_TIM_PWM_Start+0x18c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d111      	bne.n	80051b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b06      	cmp	r3, #6
 800519e:	d010      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b0:	e007      	b.n	80051c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40010400 	.word	0x40010400
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40001800 	.word	0x40001800

080051e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e041      	b.n	800527e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f839 	bl	8005286 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 fcae 	bl	8005b88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005286:	b480      	push	{r7}
 8005288:	b083      	sub	sp, #12
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
	...

0800529c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start+0x1a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	e013      	b.n	80052de <HAL_TIM_IC_Start+0x42>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b04      	cmp	r3, #4
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_IC_Start+0x2a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e00b      	b.n	80052de <HAL_TIM_IC_Start+0x42>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_IC_Start+0x3a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e003      	b.n	80052de <HAL_TIM_IC_Start+0x42>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <HAL_TIM_IC_Start+0x54>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e013      	b.n	8005318 <HAL_TIM_IC_Start+0x7c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d104      	bne.n	8005300 <HAL_TIM_IC_Start+0x64>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e00b      	b.n	8005318 <HAL_TIM_IC_Start+0x7c>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d104      	bne.n	8005310 <HAL_TIM_IC_Start+0x74>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e003      	b.n	8005318 <HAL_TIM_IC_Start+0x7c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005316:	b2db      	uxtb	r3, r3
 8005318:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d102      	bne.n	8005326 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e081      	b.n	800542e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_TIM_IC_Start+0x9e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	e013      	b.n	8005362 <HAL_TIM_IC_Start+0xc6>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d104      	bne.n	800534a <HAL_TIM_IC_Start+0xae>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	e00b      	b.n	8005362 <HAL_TIM_IC_Start+0xc6>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start+0xbe>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005358:	e003      	b.n	8005362 <HAL_TIM_IC_Start+0xc6>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start+0xd6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005370:	e013      	b.n	800539a <HAL_TIM_IC_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start+0xe6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005380:	e00b      	b.n	800539a <HAL_TIM_IC_Start+0xfe>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start+0xf6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005390:	e003      	b.n	800539a <HAL_TIM_IC_Start+0xfe>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2201      	movs	r2, #1
 80053a0:	6839      	ldr	r1, [r7, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 f804 	bl	80063b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a22      	ldr	r2, [pc, #136]	; (8005438 <HAL_TIM_IC_Start+0x19c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d022      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d01d      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a1e      	ldr	r2, [pc, #120]	; (800543c <HAL_TIM_IC_Start+0x1a0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d018      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <HAL_TIM_IC_Start+0x1a4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d013      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <HAL_TIM_IC_Start+0x1a8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00e      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a1a      	ldr	r2, [pc, #104]	; (8005448 <HAL_TIM_IC_Start+0x1ac>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d009      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a18      	ldr	r2, [pc, #96]	; (800544c <HAL_TIM_IC_Start+0x1b0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_IC_Start+0x15c>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a17      	ldr	r2, [pc, #92]	; (8005450 <HAL_TIM_IC_Start+0x1b4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d111      	bne.n	800541c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2b06      	cmp	r3, #6
 8005408:	d010      	beq.n	800542c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0201 	orr.w	r2, r2, #1
 8005418:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541a:	e007      	b.n	800542c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	40010000 	.word	0x40010000
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40010400 	.word	0x40010400
 800544c:	40014000 	.word	0x40014000
 8005450:	40001800 	.word	0x40001800

08005454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b02      	cmp	r3, #2
 8005468:	d122      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d11b      	bne.n	80054b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0202 	mvn.w	r2, #2
 8005480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fb58 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 800549c:	e005      	b.n	80054aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fb4a 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fb5b 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0204 	mvn.w	r2, #4
 80054d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fb2e 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb20 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 fb31 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b08      	cmp	r3, #8
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0208 	mvn.w	r2, #8
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2204      	movs	r2, #4
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fb04 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 faf6 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fb07 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	2b10      	cmp	r3, #16
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b10      	cmp	r3, #16
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0210 	mvn.w	r2, #16
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2208      	movs	r2, #8
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fada 	bl	8005b4c <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 facc 	bl	8005b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fadd 	bl	8005b60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d10e      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0201 	mvn.w	r2, #1
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7fb ff4c 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d10e      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d107      	bne.n	8005604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 ff82 	bl	8006508 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d10e      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d107      	bne.n	8005630 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 faa2 	bl	8005b74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b20      	cmp	r3, #32
 800563c:	d10e      	bne.n	800565c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b20      	cmp	r3, #32
 800564a:	d107      	bne.n	800565c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0220 	mvn.w	r2, #32
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 ff4c 	bl	80064f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800565c:	bf00      	nop
 800565e:	3708      	adds	r7, #8
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_TIM_IC_ConfigChannel+0x1e>
 800567e:	2302      	movs	r3, #2
 8005680:	e088      	b.n	8005794 <HAL_TIM_IC_ConfigChannel+0x130>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6818      	ldr	r0, [r3, #0]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	6819      	ldr	r1, [r3, #0]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f000 fcc2 	bl	8006028 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 020c 	bic.w	r2, r2, #12
 80056b2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	619a      	str	r2, [r3, #24]
 80056c6:	e060      	b.n	800578a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d11c      	bne.n	8005708 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6818      	ldr	r0, [r3, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	6819      	ldr	r1, [r3, #0]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	685a      	ldr	r2, [r3, #4]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f000 fd46 	bl	800616e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699a      	ldr	r2, [r3, #24]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056f0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6999      	ldr	r1, [r3, #24]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	021a      	lsls	r2, r3, #8
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	619a      	str	r2, [r3, #24]
 8005706:	e040      	b.n	800578a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b08      	cmp	r3, #8
 800570c:	d11b      	bne.n	8005746 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6818      	ldr	r0, [r3, #0]
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6819      	ldr	r1, [r3, #0]
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f000 fd93 	bl	8006248 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f022 020c 	bic.w	r2, r2, #12
 8005730:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	61da      	str	r2, [r3, #28]
 8005744:	e021      	b.n	800578a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b0c      	cmp	r3, #12
 800574a:	d11c      	bne.n	8005786 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6818      	ldr	r0, [r3, #0]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6819      	ldr	r1, [r3, #0]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f000 fdb0 	bl	80062c0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	69da      	ldr	r2, [r3, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800576e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69d9      	ldr	r1, [r3, #28]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	021a      	lsls	r2, r3, #8
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	61da      	str	r2, [r3, #28]
 8005784:	e001      	b.n	800578a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b086      	sub	sp, #24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0ae      	b.n	8005918 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b0c      	cmp	r3, #12
 80057c6:	f200 809f 	bhi.w	8005908 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057ca:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d0:	08005805 	.word	0x08005805
 80057d4:	08005909 	.word	0x08005909
 80057d8:	08005909 	.word	0x08005909
 80057dc:	08005909 	.word	0x08005909
 80057e0:	08005845 	.word	0x08005845
 80057e4:	08005909 	.word	0x08005909
 80057e8:	08005909 	.word	0x08005909
 80057ec:	08005909 	.word	0x08005909
 80057f0:	08005887 	.word	0x08005887
 80057f4:	08005909 	.word	0x08005909
 80057f8:	08005909 	.word	0x08005909
 80057fc:	08005909 	.word	0x08005909
 8005800:	080058c7 	.word	0x080058c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68b9      	ldr	r1, [r7, #8]
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fa5c 	bl	8005cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0208 	orr.w	r2, r2, #8
 800581e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f022 0204 	bic.w	r2, r2, #4
 800582e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	6999      	ldr	r1, [r3, #24]
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	691a      	ldr	r2, [r3, #16]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	619a      	str	r2, [r3, #24]
      break;
 8005842:	e064      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	4618      	mov	r0, r3
 800584c:	f000 faac 	bl	8005da8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800586e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6999      	ldr	r1, [r3, #24]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	021a      	lsls	r2, r3, #8
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	430a      	orrs	r2, r1
 8005882:	619a      	str	r2, [r3, #24]
      break;
 8005884:	e043      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68b9      	ldr	r1, [r7, #8]
 800588c:	4618      	mov	r0, r3
 800588e:	f000 fb01 	bl	8005e94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	69da      	ldr	r2, [r3, #28]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f042 0208 	orr.w	r2, r2, #8
 80058a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69da      	ldr	r2, [r3, #28]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0204 	bic.w	r2, r2, #4
 80058b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69d9      	ldr	r1, [r3, #28]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	61da      	str	r2, [r3, #28]
      break;
 80058c4:	e023      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f000 fb55 	bl	8005f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	69da      	ldr	r2, [r3, #28]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	69d9      	ldr	r1, [r3, #28]
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	021a      	lsls	r2, r3, #8
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	61da      	str	r2, [r3, #28]
      break;
 8005906:	e002      	b.n	800590e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
      break;
 800590c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005916:	7dfb      	ldrb	r3, [r7, #23]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800592a:	2300      	movs	r3, #0
 800592c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005934:	2b01      	cmp	r3, #1
 8005936:	d101      	bne.n	800593c <HAL_TIM_ConfigClockSource+0x1c>
 8005938:	2302      	movs	r3, #2
 800593a:	e0b4      	b.n	8005aa6 <HAL_TIM_ConfigClockSource+0x186>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800595a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005974:	d03e      	beq.n	80059f4 <HAL_TIM_ConfigClockSource+0xd4>
 8005976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800597a:	f200 8087 	bhi.w	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800597e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005982:	f000 8086 	beq.w	8005a92 <HAL_TIM_ConfigClockSource+0x172>
 8005986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800598a:	d87f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800598c:	2b70      	cmp	r3, #112	; 0x70
 800598e:	d01a      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xa6>
 8005990:	2b70      	cmp	r3, #112	; 0x70
 8005992:	d87b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 8005994:	2b60      	cmp	r3, #96	; 0x60
 8005996:	d050      	beq.n	8005a3a <HAL_TIM_ConfigClockSource+0x11a>
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d877      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 800599c:	2b50      	cmp	r3, #80	; 0x50
 800599e:	d03c      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0xfa>
 80059a0:	2b50      	cmp	r3, #80	; 0x50
 80059a2:	d873      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059a4:	2b40      	cmp	r3, #64	; 0x40
 80059a6:	d058      	beq.n	8005a5a <HAL_TIM_ConfigClockSource+0x13a>
 80059a8:	2b40      	cmp	r3, #64	; 0x40
 80059aa:	d86f      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059ac:	2b30      	cmp	r3, #48	; 0x30
 80059ae:	d064      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b0:	2b30      	cmp	r3, #48	; 0x30
 80059b2:	d86b      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	d060      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d867      	bhi.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d05c      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c0:	2b10      	cmp	r3, #16
 80059c2:	d05a      	beq.n	8005a7a <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	e062      	b.n	8005a8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6899      	ldr	r1, [r3, #8]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f000 fccb 	bl	8006370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	609a      	str	r2, [r3, #8]
      break;
 80059f2:	e04f      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6818      	ldr	r0, [r3, #0]
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	6899      	ldr	r1, [r3, #8]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f000 fcb4 	bl	8006370 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a16:	609a      	str	r2, [r3, #8]
      break;
 8005a18:	e03c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6859      	ldr	r1, [r3, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f000 fb72 	bl	8006110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2150      	movs	r1, #80	; 0x50
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 fc81 	bl	800633a <TIM_ITRx_SetConfig>
      break;
 8005a38:	e02c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6859      	ldr	r1, [r3, #4]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	461a      	mov	r2, r3
 8005a48:	f000 fbce 	bl	80061e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2160      	movs	r1, #96	; 0x60
 8005a52:	4618      	mov	r0, r3
 8005a54:	f000 fc71 	bl	800633a <TIM_ITRx_SetConfig>
      break;
 8005a58:	e01c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6818      	ldr	r0, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6859      	ldr	r1, [r3, #4]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	461a      	mov	r2, r3
 8005a68:	f000 fb52 	bl	8006110 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2140      	movs	r1, #64	; 0x40
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 fc61 	bl	800633a <TIM_ITRx_SetConfig>
      break;
 8005a78:	e00c      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	4610      	mov	r0, r2
 8005a86:	f000 fc58 	bl	800633a <TIM_ITRx_SetConfig>
      break;
 8005a8a:	e003      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005a92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	2b0c      	cmp	r3, #12
 8005ac2:	d831      	bhi.n	8005b28 <HAL_TIM_ReadCapturedValue+0x78>
 8005ac4:	a201      	add	r2, pc, #4	; (adr r2, 8005acc <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aca:	bf00      	nop
 8005acc:	08005b01 	.word	0x08005b01
 8005ad0:	08005b29 	.word	0x08005b29
 8005ad4:	08005b29 	.word	0x08005b29
 8005ad8:	08005b29 	.word	0x08005b29
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b29 	.word	0x08005b29
 8005ae4:	08005b29 	.word	0x08005b29
 8005ae8:	08005b29 	.word	0x08005b29
 8005aec:	08005b15 	.word	0x08005b15
 8005af0:	08005b29 	.word	0x08005b29
 8005af4:	08005b29 	.word	0x08005b29
 8005af8:	08005b29 	.word	0x08005b29
 8005afc:	08005b1f 	.word	0x08005b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	60fb      	str	r3, [r7, #12]

      break;
 8005b08:	e00f      	b.n	8005b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	60fb      	str	r3, [r7, #12]

      break;
 8005b12:	e00a      	b.n	8005b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	60fb      	str	r3, [r7, #12]

      break;
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b24:	60fb      	str	r3, [r7, #12]

      break;
 8005b26:	e000      	b.n	8005b2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005b28:	bf00      	nop
  }

  return tmpreg;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a40      	ldr	r2, [pc, #256]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d013      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba6:	d00f      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a3d      	ldr	r2, [pc, #244]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00b      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a3c      	ldr	r2, [pc, #240]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d007      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a3b      	ldr	r2, [pc, #236]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d003      	beq.n	8005bc8 <TIM_Base_SetConfig+0x40>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a3a      	ldr	r2, [pc, #232]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d108      	bne.n	8005bda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a2f      	ldr	r2, [pc, #188]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be8:	d027      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a2c      	ldr	r2, [pc, #176]	; (8005ca0 <TIM_Base_SetConfig+0x118>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d023      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a2b      	ldr	r2, [pc, #172]	; (8005ca4 <TIM_Base_SetConfig+0x11c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d01f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a2a      	ldr	r2, [pc, #168]	; (8005ca8 <TIM_Base_SetConfig+0x120>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d01b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a29      	ldr	r2, [pc, #164]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d017      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <TIM_Base_SetConfig+0x128>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a27      	ldr	r2, [pc, #156]	; (8005cb4 <TIM_Base_SetConfig+0x12c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00f      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a26      	ldr	r2, [pc, #152]	; (8005cb8 <TIM_Base_SetConfig+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d00b      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a25      	ldr	r2, [pc, #148]	; (8005cbc <TIM_Base_SetConfig+0x134>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d007      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <TIM_Base_SetConfig+0x138>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d003      	beq.n	8005c3a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <TIM_Base_SetConfig+0x13c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d108      	bne.n	8005c4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a0a      	ldr	r2, [pc, #40]	; (8005c9c <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d003      	beq.n	8005c80 <TIM_Base_SetConfig+0xf8>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a0c      	ldr	r2, [pc, #48]	; (8005cac <TIM_Base_SetConfig+0x124>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d103      	bne.n	8005c88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	691a      	ldr	r2, [r3, #16]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]
}
 8005c8e:	bf00      	nop
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40014400 	.word	0x40014400
 8005cb8:	40014800 	.word	0x40014800
 8005cbc:	40001800 	.word	0x40001800
 8005cc0:	40001c00 	.word	0x40001c00
 8005cc4:	40002000 	.word	0x40002000

08005cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	f023 0201 	bic.w	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0303 	bic.w	r3, r3, #3
 8005cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f023 0302 	bic.w	r3, r3, #2
 8005d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	697a      	ldr	r2, [r7, #20]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <TIM_OC1_SetConfig+0xd8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d003      	beq.n	8005d2c <TIM_OC1_SetConfig+0x64>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <TIM_OC1_SetConfig+0xdc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10c      	bne.n	8005d46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0308 	bic.w	r3, r3, #8
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	f023 0304 	bic.w	r3, r3, #4
 8005d44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a15      	ldr	r2, [pc, #84]	; (8005da0 <TIM_OC1_SetConfig+0xd8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC1_SetConfig+0x8e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a14      	ldr	r2, [pc, #80]	; (8005da4 <TIM_OC1_SetConfig+0xdc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d111      	bne.n	8005d7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	695b      	ldr	r3, [r3, #20]
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	621a      	str	r2, [r3, #32]
}
 8005d94:	bf00      	nop
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	40010000 	.word	0x40010000
 8005da4:	40010400 	.word	0x40010400

08005da8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b087      	sub	sp, #28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	f023 0210 	bic.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
 8005dc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	021b      	lsls	r3, r3, #8
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f023 0320 	bic.w	r3, r3, #32
 8005df2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	011b      	lsls	r3, r3, #4
 8005dfa:	697a      	ldr	r2, [r7, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a22      	ldr	r2, [pc, #136]	; (8005e8c <TIM_OC2_SetConfig+0xe4>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d003      	beq.n	8005e10 <TIM_OC2_SetConfig+0x68>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a21      	ldr	r2, [pc, #132]	; (8005e90 <TIM_OC2_SetConfig+0xe8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d10d      	bne.n	8005e2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	011b      	lsls	r3, r3, #4
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <TIM_OC2_SetConfig+0xe4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d003      	beq.n	8005e3c <TIM_OC2_SetConfig+0x94>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <TIM_OC2_SetConfig+0xe8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d113      	bne.n	8005e64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	693a      	ldr	r2, [r7, #16]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	685a      	ldr	r2, [r3, #4]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	40010000 	.word	0x40010000
 8005e90:	40010400 	.word	0x40010400

08005e94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	69db      	ldr	r3, [r3, #28]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0x66>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10d      	bne.n	8005f16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <TIM_OC3_SetConfig+0xe0>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d003      	beq.n	8005f26 <TIM_OC3_SetConfig+0x92>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <TIM_OC3_SetConfig+0xe4>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d113      	bne.n	8005f4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	693a      	ldr	r2, [r7, #16]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	011b      	lsls	r3, r3, #4
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685a      	ldr	r2, [r3, #4]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	621a      	str	r2, [r3, #32]
}
 8005f68:	bf00      	nop
 8005f6a:	371c      	adds	r7, #28
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40010400 	.word	0x40010400

08005f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a12      	ldr	r2, [pc, #72]	; (8006020 <TIM_OC4_SetConfig+0xa4>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d003      	beq.n	8005fe4 <TIM_OC4_SetConfig+0x68>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a11      	ldr	r2, [pc, #68]	; (8006024 <TIM_OC4_SetConfig+0xa8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d109      	bne.n	8005ff8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	019b      	lsls	r3, r3, #6
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000
 8006024:	40010400 	.word	0x40010400

08006028 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a28      	ldr	r2, [pc, #160]	; (80060f4 <TIM_TI1_SetConfig+0xcc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d01b      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605c:	d017      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4a25      	ldr	r2, [pc, #148]	; (80060f8 <TIM_TI1_SetConfig+0xd0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d013      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4a24      	ldr	r2, [pc, #144]	; (80060fc <TIM_TI1_SetConfig+0xd4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d00f      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4a23      	ldr	r2, [pc, #140]	; (8006100 <TIM_TI1_SetConfig+0xd8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00b      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a22      	ldr	r2, [pc, #136]	; (8006104 <TIM_TI1_SetConfig+0xdc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	4a21      	ldr	r2, [pc, #132]	; (8006108 <TIM_TI1_SetConfig+0xe0>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d003      	beq.n	800608e <TIM_TI1_SetConfig+0x66>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a20      	ldr	r2, [pc, #128]	; (800610c <TIM_TI1_SetConfig+0xe4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d101      	bne.n	8006092 <TIM_TI1_SetConfig+0x6a>
 800608e:	2301      	movs	r3, #1
 8006090:	e000      	b.n	8006094 <TIM_TI1_SetConfig+0x6c>
 8006092:	2300      	movs	r3, #0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d008      	beq.n	80060aa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]
 80060a8:	e003      	b.n	80060b2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	011b      	lsls	r3, r3, #4
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f023 030a 	bic.w	r3, r3, #10
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f003 030a 	and.w	r3, r3, #10
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000
 80060f8:	40000400 	.word	0x40000400
 80060fc:	40000800 	.word	0x40000800
 8006100:	40000c00 	.word	0x40000c00
 8006104:	40010400 	.word	0x40010400
 8006108:	40014000 	.word	0x40014000
 800610c:	40001800 	.word	0x40001800

08006110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800613a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	011b      	lsls	r3, r3, #4
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4313      	orrs	r3, r2
 8006144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f023 030a 	bic.w	r3, r3, #10
 800614c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	621a      	str	r2, [r3, #32]
}
 8006162:	bf00      	nop
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800616e:	b480      	push	{r7}
 8006170:	b087      	sub	sp, #28
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f023 0210 	bic.w	r2, r3, #16
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6a1b      	ldr	r3, [r3, #32]
 8006192:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800619a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	031b      	lsls	r3, r3, #12
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	697a      	ldr	r2, [r7, #20]
 80061d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	621a      	str	r2, [r3, #32]
}
 80061dc:	bf00      	nop
 80061de:	371c      	adds	r7, #28
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6a1b      	ldr	r3, [r3, #32]
 80061f8:	f023 0210 	bic.w	r2, r3, #16
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006212:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	031b      	lsls	r3, r3, #12
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006224:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	693a      	ldr	r2, [r7, #16]
 800623a:	621a      	str	r2, [r3, #32]
}
 800623c:	bf00      	nop
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
 8006254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006284:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	b2db      	uxtb	r3, r3
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006298:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	021b      	lsls	r3, r3, #8
 800629e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	621a      	str	r2, [r3, #32]
}
 80062b4:	bf00      	nop
 80062b6:	371c      	adds	r7, #28
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	60f8      	str	r0, [r7, #12]
 80062c8:	60b9      	str	r1, [r7, #8]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	69db      	ldr	r3, [r3, #28]
 80062de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	021b      	lsls	r3, r3, #8
 80062f2:	697a      	ldr	r2, [r7, #20]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062fe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	031b      	lsls	r3, r3, #12
 8006304:	b29b      	uxth	r3, r3
 8006306:	697a      	ldr	r2, [r7, #20]
 8006308:	4313      	orrs	r3, r2
 800630a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006312:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	031b      	lsls	r3, r3, #12
 8006318:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800631c:	693a      	ldr	r2, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	693a      	ldr	r2, [r7, #16]
 800632c:	621a      	str	r2, [r3, #32]
}
 800632e:	bf00      	nop
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006350:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	4313      	orrs	r3, r2
 8006358:	f043 0307 	orr.w	r3, r3, #7
 800635c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	609a      	str	r2, [r3, #8]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006370:	b480      	push	{r7}
 8006372:	b087      	sub	sp, #28
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
 800637c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	021a      	lsls	r2, r3, #8
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	431a      	orrs	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4313      	orrs	r3, r2
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	697a      	ldr	r2, [r7, #20]
 80063a2:	609a      	str	r2, [r3, #8]
}
 80063a4:	bf00      	nop
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b087      	sub	sp, #28
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f003 031f 	and.w	r3, r3, #31
 80063c2:	2201      	movs	r2, #1
 80063c4:	fa02 f303 	lsl.w	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6a1a      	ldr	r2, [r3, #32]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	43db      	mvns	r3, r3
 80063d2:	401a      	ands	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1a      	ldr	r2, [r3, #32]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	fa01 f303 	lsl.w	r3, r1, r3
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006410:	2302      	movs	r3, #2
 8006412:	e05a      	b.n	80064ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a21      	ldr	r2, [pc, #132]	; (80064d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d022      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006460:	d01d      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a1d      	ldr	r2, [pc, #116]	; (80064dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d018      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a1b      	ldr	r2, [pc, #108]	; (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d013      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a1a      	ldr	r2, [pc, #104]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d00e      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a18      	ldr	r2, [pc, #96]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d009      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a17      	ldr	r2, [pc, #92]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d004      	beq.n	800649e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a15      	ldr	r2, [pc, #84]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d10c      	bne.n	80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3714      	adds	r7, #20
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop
 80064d8:	40010000 	.word	0x40010000
 80064dc:	40000400 	.word	0x40000400
 80064e0:	40000800 	.word	0x40000800
 80064e4:	40000c00 	.word	0x40000c00
 80064e8:	40010400 	.word	0x40010400
 80064ec:	40014000 	.word	0x40014000
 80064f0:	40001800 	.word	0x40001800

080064f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e03f      	b.n	80065ae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f7fc fb62 	bl	8002c0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2224      	movs	r2, #36	; 0x24
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68da      	ldr	r2, [r3, #12]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800655e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fddf 	bl	8007124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	691a      	ldr	r2, [r3, #16]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68da      	ldr	r2, [r3, #12]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b08a      	sub	sp, #40	; 0x28
 80065ba:	af02      	add	r7, sp, #8
 80065bc:	60f8      	str	r0, [r7, #12]
 80065be:	60b9      	str	r1, [r7, #8]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4613      	mov	r3, r2
 80065c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b20      	cmp	r3, #32
 80065d4:	d17c      	bne.n	80066d0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_Transmit+0x2c>
 80065dc:	88fb      	ldrh	r3, [r7, #6]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d101      	bne.n	80065e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e075      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Transmit+0x3e>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e06e      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2221      	movs	r2, #33	; 0x21
 8006606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800660a:	f7fc fbdf 	bl	8002dcc <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	88fa      	ldrh	r2, [r7, #6]
 8006614:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	88fa      	ldrh	r2, [r7, #6]
 800661a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006624:	d108      	bne.n	8006638 <HAL_UART_Transmit+0x82>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d104      	bne.n	8006638 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800662e:	2300      	movs	r3, #0
 8006630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61bb      	str	r3, [r7, #24]
 8006636:	e003      	b.n	8006640 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006648:	e02a      	b.n	80066a0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	2180      	movs	r1, #128	; 0x80
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fb1f 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e036      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10b      	bne.n	8006682 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	881b      	ldrh	r3, [r3, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006678:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	3302      	adds	r3, #2
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	e007      	b.n	8006692 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	781a      	ldrb	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	3301      	adds	r3, #1
 8006690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006696:	b29b      	uxth	r3, r3
 8006698:	3b01      	subs	r3, #1
 800669a:	b29a      	uxth	r2, r3
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1cf      	bne.n	800664a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2140      	movs	r1, #64	; 0x40
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 faef 	bl	8006c98 <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2220      	movs	r2, #32
 80066c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b084      	sub	sp, #16
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d11d      	bne.n	8006730 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d002      	beq.n	8006700 <HAL_UART_Receive_IT+0x26>
 80066fa:	88fb      	ldrh	r3, [r7, #6]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e016      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_UART_Receive_IT+0x38>
 800670e:	2302      	movs	r3, #2
 8006710:	e00f      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	461a      	mov	r2, r3
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 fb24 	bl	8006d74 <UART_Start_Receive_IT>
 800672c:	4603      	mov	r3, r0
 800672e:	e000      	b.n	8006732 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b0ba      	sub	sp, #232	; 0xe8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006762:	2300      	movs	r3, #0
 8006764:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006768:	2300      	movs	r3, #0
 800676a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800676e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800677a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10f      	bne.n	80067a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
 800678e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fc07 	bl	8006fae <UART_Receive_IT>
      return;
 80067a0:	e256      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80de 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
 80067ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d106      	bne.n	80067c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 80d1 	beq.w	8006968 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0201 	orr.w	r2, r3, #1
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0202 	orr.w	r2, r3, #2
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00b      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
 800681a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	f043 0204 	orr.w	r2, r3, #4
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d011      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
 800683e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d105      	bne.n	8006856 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800684a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b00      	cmp	r3, #0
 8006854:	d005      	beq.n	8006862 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685a:	f043 0208 	orr.w	r2, r3, #8
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 81ed 	beq.w	8006c46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800686c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006870:	f003 0320 	and.w	r3, r3, #32
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
 8006878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fb92 	bl	8006fae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006894:	2b40      	cmp	r3, #64	; 0x40
 8006896:	bf0c      	ite	eq
 8006898:	2301      	moveq	r3, #1
 800689a:	2300      	movne	r3, #0
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <HAL_UART_IRQHandler+0x17a>
 80068ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d04f      	beq.n	8006956 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fa9a 	bl	8006df0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b40      	cmp	r3, #64	; 0x40
 80068c8:	d141      	bne.n	800694e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3314      	adds	r3, #20
 80068f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006902:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006906:	e841 2300 	strex	r3, r2, [r1]
 800690a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800690e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1d9      	bne.n	80068ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691a:	2b00      	cmp	r3, #0
 800691c:	d013      	beq.n	8006946 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_UART_IRQHandler+0x3dc>)
 8006924:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692a:	4618      	mov	r0, r3
 800692c:	f7fd f9ae 	bl	8003c8c <HAL_DMA_Abort_IT>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	687a      	ldr	r2, [r7, #4]
 800693e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006940:	4610      	mov	r0, r2
 8006942:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006944:	e00e      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 f990 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800694c:	e00a      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f98c 	bl	8006c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006954:	e006      	b.n	8006964 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 f988 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006962:	e170      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	bf00      	nop
    return;
 8006966:	e16e      	b.n	8006c46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 814a 	bne.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8143 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006984:	f003 0310 	and.w	r3, r3, #16
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 813c 	beq.w	8006c06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800698e:	2300      	movs	r3, #0
 8006990:	60bb      	str	r3, [r7, #8]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ae:	2b40      	cmp	r3, #64	; 0x40
 80069b0:	f040 80b4 	bne.w	8006b1c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80069c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8140 	beq.w	8006c4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069d2:	429a      	cmp	r2, r3
 80069d4:	f080 8139 	bcs.w	8006c4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069ea:	f000 8088 	beq.w	8006afe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069fc:	e853 3f00 	ldrex	r3, [r3]
 8006a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	330c      	adds	r3, #12
 8006a16:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a1a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d1d9      	bne.n	80069ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3314      	adds	r3, #20
 8006a40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3314      	adds	r3, #20
 8006a5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1e1      	bne.n	8006a3a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3314      	adds	r3, #20
 8006a7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a80:	e853 3f00 	ldrex	r3, [r3]
 8006a84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006aa0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1e3      	bne.n	8006a76 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2220      	movs	r2, #32
 8006ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ace:	f023 0310 	bic.w	r3, r3, #16
 8006ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	330c      	adds	r3, #12
 8006adc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8006ae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fd f857 	bl	8003bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8b6 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b14:	e099      	b.n	8006c4a <HAL_UART_IRQHandler+0x50e>
 8006b16:	bf00      	nop
 8006b18:	08006eb7 	.word	0x08006eb7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f000 808b 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 8086 	beq.w	8006c4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	330c      	adds	r3, #12
 8006b48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b66:	647a      	str	r2, [r7, #68]	; 0x44
 8006b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e3      	bne.n	8006b42 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3314      	adds	r3, #20
 8006b80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	623b      	str	r3, [r7, #32]
   return(result);
 8006b8a:	6a3b      	ldr	r3, [r7, #32]
 8006b8c:	f023 0301 	bic.w	r3, r3, #1
 8006b90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b9e:	633a      	str	r2, [r7, #48]	; 0x30
 8006ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e3      	bne.n	8006b7a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2220      	movs	r2, #32
 8006bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	330c      	adds	r3, #12
 8006bc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	e853 3f00 	ldrex	r3, [r3]
 8006bce:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f023 0310 	bic.w	r3, r3, #16
 8006bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	330c      	adds	r3, #12
 8006be0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006be4:	61fa      	str	r2, [r7, #28]
 8006be6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	69b9      	ldr	r1, [r7, #24]
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	e841 2300 	strex	r3, r2, [r1]
 8006bf0:	617b      	str	r3, [r7, #20]
   return(result);
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1e3      	bne.n	8006bc0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f83e 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c04:	e023      	b.n	8006c4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
 8006c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d003      	beq.n	8006c26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f95d 	bl	8006ede <UART_Transmit_IT>
    return;
 8006c24:	e014      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00e      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
 8006c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f99d 	bl	8006f7e <UART_EndTransmit_IT>
    return;
 8006c44:	e004      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
    return;
 8006c46:	bf00      	nop
 8006c48:	e002      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_UART_IRQHandler+0x514>
      return;
 8006c4e:	bf00      	nop
  }
}
 8006c50:	37e8      	adds	r7, #232	; 0xe8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop

08006c58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b090      	sub	sp, #64	; 0x40
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	603b      	str	r3, [r7, #0]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ca8:	e050      	b.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb0:	d04c      	beq.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cb8:	f7fc f888 	bl	8002dcc <HAL_GetTick>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d241      	bcs.n	8006d4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	330c      	adds	r3, #12
 8006cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	330c      	adds	r3, #12
 8006ce6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ce8:	637a      	str	r2, [r7, #52]	; 0x34
 8006cea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3314      	adds	r3, #20
 8006d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f023 0301 	bic.w	r3, r3, #1
 8006d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	3314      	adds	r3, #20
 8006d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d1c:	623a      	str	r2, [r7, #32]
 8006d1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	69f9      	ldr	r1, [r7, #28]
 8006d22:	6a3a      	ldr	r2, [r7, #32]
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e5      	bne.n	8006cfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2220      	movs	r2, #32
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2220      	movs	r2, #32
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e00f      	b.n	8006d6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	4013      	ands	r3, r2
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	bf0c      	ite	eq
 8006d5c:	2301      	moveq	r3, #1
 8006d5e:	2300      	movne	r3, #0
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	461a      	mov	r2, r3
 8006d64:	79fb      	ldrb	r3, [r7, #7]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d09f      	beq.n	8006caa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3740      	adds	r7, #64	; 0x40
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b085      	sub	sp, #20
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	4613      	mov	r3, r2
 8006d80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	88fa      	ldrh	r2, [r7, #6]
 8006d8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	88fa      	ldrh	r2, [r7, #6]
 8006d92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2222      	movs	r2, #34	; 0x22
 8006d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d007      	beq.n	8006dc2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dc0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695a      	ldr	r2, [r3, #20]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f042 0201 	orr.w	r2, r2, #1
 8006dd0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0220 	orr.w	r2, r2, #32
 8006de0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b095      	sub	sp, #84	; 0x54
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	e853 3f00 	ldrex	r3, [r3]
 8006e06:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	330c      	adds	r3, #12
 8006e16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e18:	643a      	str	r2, [r7, #64]	; 0x40
 8006e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e20:	e841 2300 	strex	r3, r2, [r1]
 8006e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e5      	bne.n	8006df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3314      	adds	r3, #20
 8006e32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	e853 3f00 	ldrex	r3, [r3]
 8006e3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f023 0301 	bic.w	r3, r3, #1
 8006e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	3314      	adds	r3, #20
 8006e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e54:	e841 2300 	strex	r3, r2, [r1]
 8006e58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1e5      	bne.n	8006e2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d119      	bne.n	8006e9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	e853 3f00 	ldrex	r3, [r3]
 8006e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f023 0310 	bic.w	r3, r3, #16
 8006e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	330c      	adds	r3, #12
 8006e86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e88:	61ba      	str	r2, [r7, #24]
 8006e8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6979      	ldr	r1, [r7, #20]
 8006e8e:	69ba      	ldr	r2, [r7, #24]
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	613b      	str	r3, [r7, #16]
   return(result);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e5      	bne.n	8006e68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2220      	movs	r2, #32
 8006ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006eaa:	bf00      	nop
 8006eac:	3754      	adds	r7, #84	; 0x54
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b084      	sub	sp, #16
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ed0:	68f8      	ldr	r0, [r7, #12]
 8006ed2:	f7ff fecb 	bl	8006c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b21      	cmp	r3, #33	; 0x21
 8006ef0:	d13e      	bne.n	8006f70 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006efa:	d114      	bne.n	8006f26 <UART_Transmit_IT+0x48>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d110      	bne.n	8006f26 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	881b      	ldrh	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f18:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	1c9a      	adds	r2, r3, #2
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	621a      	str	r2, [r3, #32]
 8006f24:	e008      	b.n	8006f38 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	1c59      	adds	r1, r3, #1
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6211      	str	r1, [r2, #32]
 8006f30:	781a      	ldrb	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	4619      	mov	r1, r3
 8006f46:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	68da      	ldr	r2, [r3, #12]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f5a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f6a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	e000      	b.n	8006f72 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
  }
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2220      	movs	r2, #32
 8006f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f7ff fe5a 	bl	8006c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3708      	adds	r7, #8
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b08c      	sub	sp, #48	; 0x30
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b22      	cmp	r3, #34	; 0x22
 8006fc0:	f040 80ab 	bne.w	800711a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fcc:	d117      	bne.n	8006ffe <UART_Receive_IT+0x50>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d113      	bne.n	8006ffe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff6:	1c9a      	adds	r2, r3, #2
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	629a      	str	r2, [r3, #40]	; 0x28
 8006ffc:	e026      	b.n	800704c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007002:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007010:	d007      	beq.n	8007022 <UART_Receive_IT+0x74>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10a      	bne.n	8007030 <UART_Receive_IT+0x82>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d106      	bne.n	8007030 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	b2da      	uxtb	r2, r3
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	701a      	strb	r2, [r3, #0]
 800702e:	e008      	b.n	8007042 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703c:	b2da      	uxtb	r2, r3
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007050:	b29b      	uxth	r3, r3
 8007052:	3b01      	subs	r3, #1
 8007054:	b29b      	uxth	r3, r3
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	4619      	mov	r1, r3
 800705a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800705c:	2b00      	cmp	r3, #0
 800705e:	d15a      	bne.n	8007116 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	68da      	ldr	r2, [r3, #12]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0220 	bic.w	r2, r2, #32
 800706e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800707e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	695a      	ldr	r2, [r3, #20]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f022 0201 	bic.w	r2, r2, #1
 800708e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2220      	movs	r2, #32
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	2b01      	cmp	r3, #1
 800709e:	d135      	bne.n	800710c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	330c      	adds	r3, #12
 80070ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	e853 3f00 	ldrex	r3, [r3]
 80070b4:	613b      	str	r3, [r7, #16]
   return(result);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f023 0310 	bic.w	r3, r3, #16
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	330c      	adds	r3, #12
 80070c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c6:	623a      	str	r2, [r7, #32]
 80070c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ca:	69f9      	ldr	r1, [r7, #28]
 80070cc:	6a3a      	ldr	r2, [r7, #32]
 80070ce:	e841 2300 	strex	r3, r2, [r1]
 80070d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1e5      	bne.n	80070a6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0310 	and.w	r3, r3, #16
 80070e4:	2b10      	cmp	r3, #16
 80070e6:	d10a      	bne.n	80070fe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070e8:	2300      	movs	r3, #0
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007102:	4619      	mov	r1, r3
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7ff fdbb 	bl	8006c80 <HAL_UARTEx_RxEventCallback>
 800710a:	e002      	b.n	8007112 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7fa f9ef 	bl	80014f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	e002      	b.n	800711c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	e000      	b.n	800711c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800711a:	2302      	movs	r3, #2
  }
}
 800711c:	4618      	mov	r0, r3
 800711e:	3730      	adds	r7, #48	; 0x30
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007128:	b0c0      	sub	sp, #256	; 0x100
 800712a:	af00      	add	r7, sp, #0
 800712c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	ea40 0301 	orr.w	r3, r0, r1
 800714c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800714e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	431a      	orrs	r2, r3
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	695b      	ldr	r3, [r3, #20]
 8007162:	431a      	orrs	r2, r3
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800717c:	f021 010c 	bic.w	r1, r1, #12
 8007180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800718a:	430b      	orrs	r3, r1
 800718c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800718e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800719e:	6999      	ldr	r1, [r3, #24]
 80071a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	ea40 0301 	orr.w	r3, r0, r1
 80071aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80071ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	4b8f      	ldr	r3, [pc, #572]	; (80073f0 <UART_SetConfig+0x2cc>)
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d005      	beq.n	80071c4 <UART_SetConfig+0xa0>
 80071b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071bc:	681a      	ldr	r2, [r3, #0]
 80071be:	4b8d      	ldr	r3, [pc, #564]	; (80073f4 <UART_SetConfig+0x2d0>)
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d104      	bne.n	80071ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071c4:	f7fd fe1a 	bl	8004dfc <HAL_RCC_GetPCLK2Freq>
 80071c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071cc:	e003      	b.n	80071d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071ce:	f7fd fe01 	bl	8004dd4 <HAL_RCC_GetPCLK1Freq>
 80071d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071e0:	f040 810c 	bne.w	80073fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e8:	2200      	movs	r2, #0
 80071ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071f6:	4622      	mov	r2, r4
 80071f8:	462b      	mov	r3, r5
 80071fa:	1891      	adds	r1, r2, r2
 80071fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80071fe:	415b      	adcs	r3, r3
 8007200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007202:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007206:	4621      	mov	r1, r4
 8007208:	eb12 0801 	adds.w	r8, r2, r1
 800720c:	4629      	mov	r1, r5
 800720e:	eb43 0901 	adc.w	r9, r3, r1
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	f04f 0300 	mov.w	r3, #0
 800721a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800721e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007226:	4690      	mov	r8, r2
 8007228:	4699      	mov	r9, r3
 800722a:	4623      	mov	r3, r4
 800722c:	eb18 0303 	adds.w	r3, r8, r3
 8007230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007234:	462b      	mov	r3, r5
 8007236:	eb49 0303 	adc.w	r3, r9, r3
 800723a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800724a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800724e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007252:	460b      	mov	r3, r1
 8007254:	18db      	adds	r3, r3, r3
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
 8007258:	4613      	mov	r3, r2
 800725a:	eb42 0303 	adc.w	r3, r2, r3
 800725e:	657b      	str	r3, [r7, #84]	; 0x54
 8007260:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007264:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007268:	f7f9 fd0e 	bl	8000c88 <__aeabi_uldivmod>
 800726c:	4602      	mov	r2, r0
 800726e:	460b      	mov	r3, r1
 8007270:	4b61      	ldr	r3, [pc, #388]	; (80073f8 <UART_SetConfig+0x2d4>)
 8007272:	fba3 2302 	umull	r2, r3, r3, r2
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	011c      	lsls	r4, r3, #4
 800727a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800727e:	2200      	movs	r2, #0
 8007280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007284:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007288:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	1891      	adds	r1, r2, r2
 8007292:	64b9      	str	r1, [r7, #72]	; 0x48
 8007294:	415b      	adcs	r3, r3
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800729c:	4641      	mov	r1, r8
 800729e:	eb12 0a01 	adds.w	sl, r2, r1
 80072a2:	4649      	mov	r1, r9
 80072a4:	eb43 0b01 	adc.w	fp, r3, r1
 80072a8:	f04f 0200 	mov.w	r2, #0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80072b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80072b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072bc:	4692      	mov	sl, r2
 80072be:	469b      	mov	fp, r3
 80072c0:	4643      	mov	r3, r8
 80072c2:	eb1a 0303 	adds.w	r3, sl, r3
 80072c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072ca:	464b      	mov	r3, r9
 80072cc:	eb4b 0303 	adc.w	r3, fp, r3
 80072d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072e8:	460b      	mov	r3, r1
 80072ea:	18db      	adds	r3, r3, r3
 80072ec:	643b      	str	r3, [r7, #64]	; 0x40
 80072ee:	4613      	mov	r3, r2
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	647b      	str	r3, [r7, #68]	; 0x44
 80072f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072fe:	f7f9 fcc3 	bl	8000c88 <__aeabi_uldivmod>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4611      	mov	r1, r2
 8007308:	4b3b      	ldr	r3, [pc, #236]	; (80073f8 <UART_SetConfig+0x2d4>)
 800730a:	fba3 2301 	umull	r2, r3, r3, r1
 800730e:	095b      	lsrs	r3, r3, #5
 8007310:	2264      	movs	r2, #100	; 0x64
 8007312:	fb02 f303 	mul.w	r3, r2, r3
 8007316:	1acb      	subs	r3, r1, r3
 8007318:	00db      	lsls	r3, r3, #3
 800731a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800731e:	4b36      	ldr	r3, [pc, #216]	; (80073f8 <UART_SetConfig+0x2d4>)
 8007320:	fba3 2302 	umull	r2, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800732c:	441c      	add	r4, r3
 800732e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007332:	2200      	movs	r2, #0
 8007334:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007338:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800733c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007340:	4642      	mov	r2, r8
 8007342:	464b      	mov	r3, r9
 8007344:	1891      	adds	r1, r2, r2
 8007346:	63b9      	str	r1, [r7, #56]	; 0x38
 8007348:	415b      	adcs	r3, r3
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007350:	4641      	mov	r1, r8
 8007352:	1851      	adds	r1, r2, r1
 8007354:	6339      	str	r1, [r7, #48]	; 0x30
 8007356:	4649      	mov	r1, r9
 8007358:	414b      	adcs	r3, r1
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	f04f 0300 	mov.w	r3, #0
 8007364:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007368:	4659      	mov	r1, fp
 800736a:	00cb      	lsls	r3, r1, #3
 800736c:	4651      	mov	r1, sl
 800736e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007372:	4651      	mov	r1, sl
 8007374:	00ca      	lsls	r2, r1, #3
 8007376:	4610      	mov	r0, r2
 8007378:	4619      	mov	r1, r3
 800737a:	4603      	mov	r3, r0
 800737c:	4642      	mov	r2, r8
 800737e:	189b      	adds	r3, r3, r2
 8007380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007384:	464b      	mov	r3, r9
 8007386:	460a      	mov	r2, r1
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800739c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80073a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80073a4:	460b      	mov	r3, r1
 80073a6:	18db      	adds	r3, r3, r3
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80073aa:	4613      	mov	r3, r2
 80073ac:	eb42 0303 	adc.w	r3, r2, r3
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80073ba:	f7f9 fc65 	bl	8000c88 <__aeabi_uldivmod>
 80073be:	4602      	mov	r2, r0
 80073c0:	460b      	mov	r3, r1
 80073c2:	4b0d      	ldr	r3, [pc, #52]	; (80073f8 <UART_SetConfig+0x2d4>)
 80073c4:	fba3 1302 	umull	r1, r3, r3, r2
 80073c8:	095b      	lsrs	r3, r3, #5
 80073ca:	2164      	movs	r1, #100	; 0x64
 80073cc:	fb01 f303 	mul.w	r3, r1, r3
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	3332      	adds	r3, #50	; 0x32
 80073d6:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <UART_SetConfig+0x2d4>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	095b      	lsrs	r3, r3, #5
 80073de:	f003 0207 	and.w	r2, r3, #7
 80073e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4422      	add	r2, r4
 80073ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073ec:	e105      	b.n	80075fa <UART_SetConfig+0x4d6>
 80073ee:	bf00      	nop
 80073f0:	40011000 	.word	0x40011000
 80073f4:	40011400 	.word	0x40011400
 80073f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007400:	2200      	movs	r2, #0
 8007402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007406:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800740a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800740e:	4642      	mov	r2, r8
 8007410:	464b      	mov	r3, r9
 8007412:	1891      	adds	r1, r2, r2
 8007414:	6239      	str	r1, [r7, #32]
 8007416:	415b      	adcs	r3, r3
 8007418:	627b      	str	r3, [r7, #36]	; 0x24
 800741a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800741e:	4641      	mov	r1, r8
 8007420:	1854      	adds	r4, r2, r1
 8007422:	4649      	mov	r1, r9
 8007424:	eb43 0501 	adc.w	r5, r3, r1
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	00eb      	lsls	r3, r5, #3
 8007432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007436:	00e2      	lsls	r2, r4, #3
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	4643      	mov	r3, r8
 800743e:	18e3      	adds	r3, r4, r3
 8007440:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007444:	464b      	mov	r3, r9
 8007446:	eb45 0303 	adc.w	r3, r5, r3
 800744a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800745a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800745e:	f04f 0200 	mov.w	r2, #0
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800746a:	4629      	mov	r1, r5
 800746c:	008b      	lsls	r3, r1, #2
 800746e:	4621      	mov	r1, r4
 8007470:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007474:	4621      	mov	r1, r4
 8007476:	008a      	lsls	r2, r1, #2
 8007478:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800747c:	f7f9 fc04 	bl	8000c88 <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4b60      	ldr	r3, [pc, #384]	; (8007608 <UART_SetConfig+0x4e4>)
 8007486:	fba3 2302 	umull	r2, r3, r3, r2
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	011c      	lsls	r4, r3, #4
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007498:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800749c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	61b9      	str	r1, [r7, #24]
 80074a8:	415b      	adcs	r3, r3
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80074b0:	4641      	mov	r1, r8
 80074b2:	1851      	adds	r1, r2, r1
 80074b4:	6139      	str	r1, [r7, #16]
 80074b6:	4649      	mov	r1, r9
 80074b8:	414b      	adcs	r3, r1
 80074ba:	617b      	str	r3, [r7, #20]
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074c8:	4659      	mov	r1, fp
 80074ca:	00cb      	lsls	r3, r1, #3
 80074cc:	4651      	mov	r1, sl
 80074ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074d2:	4651      	mov	r1, sl
 80074d4:	00ca      	lsls	r2, r1, #3
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	4642      	mov	r2, r8
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074e4:	464b      	mov	r3, r9
 80074e6:	460a      	mov	r2, r1
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	67bb      	str	r3, [r7, #120]	; 0x78
 80074fa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	f04f 0300 	mov.w	r3, #0
 8007504:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007508:	4649      	mov	r1, r9
 800750a:	008b      	lsls	r3, r1, #2
 800750c:	4641      	mov	r1, r8
 800750e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007512:	4641      	mov	r1, r8
 8007514:	008a      	lsls	r2, r1, #2
 8007516:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800751a:	f7f9 fbb5 	bl	8000c88 <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b39      	ldr	r3, [pc, #228]	; (8007608 <UART_SetConfig+0x4e4>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	; 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	011b      	lsls	r3, r3, #4
 8007534:	3332      	adds	r3, #50	; 0x32
 8007536:	4a34      	ldr	r2, [pc, #208]	; (8007608 <UART_SetConfig+0x4e4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007542:	441c      	add	r4, r3
 8007544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007548:	2200      	movs	r2, #0
 800754a:	673b      	str	r3, [r7, #112]	; 0x70
 800754c:	677a      	str	r2, [r7, #116]	; 0x74
 800754e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007552:	4642      	mov	r2, r8
 8007554:	464b      	mov	r3, r9
 8007556:	1891      	adds	r1, r2, r2
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	415b      	adcs	r3, r3
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007562:	4641      	mov	r1, r8
 8007564:	1851      	adds	r1, r2, r1
 8007566:	6039      	str	r1, [r7, #0]
 8007568:	4649      	mov	r1, r9
 800756a:	414b      	adcs	r3, r1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	f04f 0300 	mov.w	r3, #0
 8007576:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800757a:	4659      	mov	r1, fp
 800757c:	00cb      	lsls	r3, r1, #3
 800757e:	4651      	mov	r1, sl
 8007580:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007584:	4651      	mov	r1, sl
 8007586:	00ca      	lsls	r2, r1, #3
 8007588:	4610      	mov	r0, r2
 800758a:	4619      	mov	r1, r3
 800758c:	4603      	mov	r3, r0
 800758e:	4642      	mov	r2, r8
 8007590:	189b      	adds	r3, r3, r2
 8007592:	66bb      	str	r3, [r7, #104]	; 0x68
 8007594:	464b      	mov	r3, r9
 8007596:	460a      	mov	r2, r1
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800759e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	663b      	str	r3, [r7, #96]	; 0x60
 80075a8:	667a      	str	r2, [r7, #100]	; 0x64
 80075aa:	f04f 0200 	mov.w	r2, #0
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80075b6:	4649      	mov	r1, r9
 80075b8:	008b      	lsls	r3, r1, #2
 80075ba:	4641      	mov	r1, r8
 80075bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075c0:	4641      	mov	r1, r8
 80075c2:	008a      	lsls	r2, r1, #2
 80075c4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075c8:	f7f9 fb5e 	bl	8000c88 <__aeabi_uldivmod>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	4b0d      	ldr	r3, [pc, #52]	; (8007608 <UART_SetConfig+0x4e4>)
 80075d2:	fba3 1302 	umull	r1, r3, r3, r2
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	2164      	movs	r1, #100	; 0x64
 80075da:	fb01 f303 	mul.w	r3, r1, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	3332      	adds	r3, #50	; 0x32
 80075e4:	4a08      	ldr	r2, [pc, #32]	; (8007608 <UART_SetConfig+0x4e4>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	f003 020f 	and.w	r2, r3, #15
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4422      	add	r2, r4
 80075f8:	609a      	str	r2, [r3, #8]
}
 80075fa:	bf00      	nop
 80075fc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007600:	46bd      	mov	sp, r7
 8007602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007606:	bf00      	nop
 8007608:	51eb851f 	.word	0x51eb851f

0800760c <atoi>:
 800760c:	220a      	movs	r2, #10
 800760e:	2100      	movs	r1, #0
 8007610:	f001 bd96 	b.w	8009140 <strtol>

08007614 <__errno>:
 8007614:	4b01      	ldr	r3, [pc, #4]	; (800761c <__errno+0x8>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop
 800761c:	20000010 	.word	0x20000010

08007620 <__libc_init_array>:
 8007620:	b570      	push	{r4, r5, r6, lr}
 8007622:	4d0d      	ldr	r5, [pc, #52]	; (8007658 <__libc_init_array+0x38>)
 8007624:	4c0d      	ldr	r4, [pc, #52]	; (800765c <__libc_init_array+0x3c>)
 8007626:	1b64      	subs	r4, r4, r5
 8007628:	10a4      	asrs	r4, r4, #2
 800762a:	2600      	movs	r6, #0
 800762c:	42a6      	cmp	r6, r4
 800762e:	d109      	bne.n	8007644 <__libc_init_array+0x24>
 8007630:	4d0b      	ldr	r5, [pc, #44]	; (8007660 <__libc_init_array+0x40>)
 8007632:	4c0c      	ldr	r4, [pc, #48]	; (8007664 <__libc_init_array+0x44>)
 8007634:	f004 fcb4 	bl	800bfa0 <_init>
 8007638:	1b64      	subs	r4, r4, r5
 800763a:	10a4      	asrs	r4, r4, #2
 800763c:	2600      	movs	r6, #0
 800763e:	42a6      	cmp	r6, r4
 8007640:	d105      	bne.n	800764e <__libc_init_array+0x2e>
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	f855 3b04 	ldr.w	r3, [r5], #4
 8007648:	4798      	blx	r3
 800764a:	3601      	adds	r6, #1
 800764c:	e7ee      	b.n	800762c <__libc_init_array+0xc>
 800764e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007652:	4798      	blx	r3
 8007654:	3601      	adds	r6, #1
 8007656:	e7f2      	b.n	800763e <__libc_init_array+0x1e>
 8007658:	0800c494 	.word	0x0800c494
 800765c:	0800c494 	.word	0x0800c494
 8007660:	0800c494 	.word	0x0800c494
 8007664:	0800c498 	.word	0x0800c498

08007668 <memset>:
 8007668:	4402      	add	r2, r0
 800766a:	4603      	mov	r3, r0
 800766c:	4293      	cmp	r3, r2
 800766e:	d100      	bne.n	8007672 <memset+0xa>
 8007670:	4770      	bx	lr
 8007672:	f803 1b01 	strb.w	r1, [r3], #1
 8007676:	e7f9      	b.n	800766c <memset+0x4>

08007678 <__cvt>:
 8007678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800767c:	ec55 4b10 	vmov	r4, r5, d0
 8007680:	2d00      	cmp	r5, #0
 8007682:	460e      	mov	r6, r1
 8007684:	4619      	mov	r1, r3
 8007686:	462b      	mov	r3, r5
 8007688:	bfbb      	ittet	lt
 800768a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800768e:	461d      	movlt	r5, r3
 8007690:	2300      	movge	r3, #0
 8007692:	232d      	movlt	r3, #45	; 0x2d
 8007694:	700b      	strb	r3, [r1, #0]
 8007696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007698:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800769c:	4691      	mov	r9, r2
 800769e:	f023 0820 	bic.w	r8, r3, #32
 80076a2:	bfbc      	itt	lt
 80076a4:	4622      	movlt	r2, r4
 80076a6:	4614      	movlt	r4, r2
 80076a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076ac:	d005      	beq.n	80076ba <__cvt+0x42>
 80076ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80076b2:	d100      	bne.n	80076b6 <__cvt+0x3e>
 80076b4:	3601      	adds	r6, #1
 80076b6:	2102      	movs	r1, #2
 80076b8:	e000      	b.n	80076bc <__cvt+0x44>
 80076ba:	2103      	movs	r1, #3
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	ab02      	add	r3, sp, #8
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	ec45 4b10 	vmov	d0, r4, r5
 80076c8:	4653      	mov	r3, sl
 80076ca:	4632      	mov	r2, r6
 80076cc:	f001 fdd0 	bl	8009270 <_dtoa_r>
 80076d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076d4:	4607      	mov	r7, r0
 80076d6:	d102      	bne.n	80076de <__cvt+0x66>
 80076d8:	f019 0f01 	tst.w	r9, #1
 80076dc:	d022      	beq.n	8007724 <__cvt+0xac>
 80076de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076e2:	eb07 0906 	add.w	r9, r7, r6
 80076e6:	d110      	bne.n	800770a <__cvt+0x92>
 80076e8:	783b      	ldrb	r3, [r7, #0]
 80076ea:	2b30      	cmp	r3, #48	; 0x30
 80076ec:	d10a      	bne.n	8007704 <__cvt+0x8c>
 80076ee:	2200      	movs	r2, #0
 80076f0:	2300      	movs	r3, #0
 80076f2:	4620      	mov	r0, r4
 80076f4:	4629      	mov	r1, r5
 80076f6:	f7f9 f9e7 	bl	8000ac8 <__aeabi_dcmpeq>
 80076fa:	b918      	cbnz	r0, 8007704 <__cvt+0x8c>
 80076fc:	f1c6 0601 	rsb	r6, r6, #1
 8007700:	f8ca 6000 	str.w	r6, [sl]
 8007704:	f8da 3000 	ldr.w	r3, [sl]
 8007708:	4499      	add	r9, r3
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4620      	mov	r0, r4
 8007710:	4629      	mov	r1, r5
 8007712:	f7f9 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007716:	b108      	cbz	r0, 800771c <__cvt+0xa4>
 8007718:	f8cd 900c 	str.w	r9, [sp, #12]
 800771c:	2230      	movs	r2, #48	; 0x30
 800771e:	9b03      	ldr	r3, [sp, #12]
 8007720:	454b      	cmp	r3, r9
 8007722:	d307      	bcc.n	8007734 <__cvt+0xbc>
 8007724:	9b03      	ldr	r3, [sp, #12]
 8007726:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007728:	1bdb      	subs	r3, r3, r7
 800772a:	4638      	mov	r0, r7
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	b004      	add	sp, #16
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007734:	1c59      	adds	r1, r3, #1
 8007736:	9103      	str	r1, [sp, #12]
 8007738:	701a      	strb	r2, [r3, #0]
 800773a:	e7f0      	b.n	800771e <__cvt+0xa6>

0800773c <__exponent>:
 800773c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800773e:	4603      	mov	r3, r0
 8007740:	2900      	cmp	r1, #0
 8007742:	bfb8      	it	lt
 8007744:	4249      	neglt	r1, r1
 8007746:	f803 2b02 	strb.w	r2, [r3], #2
 800774a:	bfb4      	ite	lt
 800774c:	222d      	movlt	r2, #45	; 0x2d
 800774e:	222b      	movge	r2, #43	; 0x2b
 8007750:	2909      	cmp	r1, #9
 8007752:	7042      	strb	r2, [r0, #1]
 8007754:	dd2a      	ble.n	80077ac <__exponent+0x70>
 8007756:	f10d 0407 	add.w	r4, sp, #7
 800775a:	46a4      	mov	ip, r4
 800775c:	270a      	movs	r7, #10
 800775e:	46a6      	mov	lr, r4
 8007760:	460a      	mov	r2, r1
 8007762:	fb91 f6f7 	sdiv	r6, r1, r7
 8007766:	fb07 1516 	mls	r5, r7, r6, r1
 800776a:	3530      	adds	r5, #48	; 0x30
 800776c:	2a63      	cmp	r2, #99	; 0x63
 800776e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007772:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007776:	4631      	mov	r1, r6
 8007778:	dcf1      	bgt.n	800775e <__exponent+0x22>
 800777a:	3130      	adds	r1, #48	; 0x30
 800777c:	f1ae 0502 	sub.w	r5, lr, #2
 8007780:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007784:	1c44      	adds	r4, r0, #1
 8007786:	4629      	mov	r1, r5
 8007788:	4561      	cmp	r1, ip
 800778a:	d30a      	bcc.n	80077a2 <__exponent+0x66>
 800778c:	f10d 0209 	add.w	r2, sp, #9
 8007790:	eba2 020e 	sub.w	r2, r2, lr
 8007794:	4565      	cmp	r5, ip
 8007796:	bf88      	it	hi
 8007798:	2200      	movhi	r2, #0
 800779a:	4413      	add	r3, r2
 800779c:	1a18      	subs	r0, r3, r0
 800779e:	b003      	add	sp, #12
 80077a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80077aa:	e7ed      	b.n	8007788 <__exponent+0x4c>
 80077ac:	2330      	movs	r3, #48	; 0x30
 80077ae:	3130      	adds	r1, #48	; 0x30
 80077b0:	7083      	strb	r3, [r0, #2]
 80077b2:	70c1      	strb	r1, [r0, #3]
 80077b4:	1d03      	adds	r3, r0, #4
 80077b6:	e7f1      	b.n	800779c <__exponent+0x60>

080077b8 <_printf_float>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	ed2d 8b02 	vpush	{d8}
 80077c0:	b08d      	sub	sp, #52	; 0x34
 80077c2:	460c      	mov	r4, r1
 80077c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077c8:	4616      	mov	r6, r2
 80077ca:	461f      	mov	r7, r3
 80077cc:	4605      	mov	r5, r0
 80077ce:	f002 ffa1 	bl	800a714 <_localeconv_r>
 80077d2:	f8d0 a000 	ldr.w	sl, [r0]
 80077d6:	4650      	mov	r0, sl
 80077d8:	f7f8 fcfa 	bl	80001d0 <strlen>
 80077dc:	2300      	movs	r3, #0
 80077de:	930a      	str	r3, [sp, #40]	; 0x28
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	9305      	str	r3, [sp, #20]
 80077e4:	f8d8 3000 	ldr.w	r3, [r8]
 80077e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077ec:	3307      	adds	r3, #7
 80077ee:	f023 0307 	bic.w	r3, r3, #7
 80077f2:	f103 0208 	add.w	r2, r3, #8
 80077f6:	f8c8 2000 	str.w	r2, [r8]
 80077fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007802:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007806:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800780a:	9307      	str	r3, [sp, #28]
 800780c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007810:	ee08 0a10 	vmov	s16, r0
 8007814:	4b9f      	ldr	r3, [pc, #636]	; (8007a94 <_printf_float+0x2dc>)
 8007816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800781a:	f04f 32ff 	mov.w	r2, #4294967295
 800781e:	f7f9 f985 	bl	8000b2c <__aeabi_dcmpun>
 8007822:	bb88      	cbnz	r0, 8007888 <_printf_float+0xd0>
 8007824:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007828:	4b9a      	ldr	r3, [pc, #616]	; (8007a94 <_printf_float+0x2dc>)
 800782a:	f04f 32ff 	mov.w	r2, #4294967295
 800782e:	f7f9 f95f 	bl	8000af0 <__aeabi_dcmple>
 8007832:	bb48      	cbnz	r0, 8007888 <_printf_float+0xd0>
 8007834:	2200      	movs	r2, #0
 8007836:	2300      	movs	r3, #0
 8007838:	4640      	mov	r0, r8
 800783a:	4649      	mov	r1, r9
 800783c:	f7f9 f94e 	bl	8000adc <__aeabi_dcmplt>
 8007840:	b110      	cbz	r0, 8007848 <_printf_float+0x90>
 8007842:	232d      	movs	r3, #45	; 0x2d
 8007844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007848:	4b93      	ldr	r3, [pc, #588]	; (8007a98 <_printf_float+0x2e0>)
 800784a:	4894      	ldr	r0, [pc, #592]	; (8007a9c <_printf_float+0x2e4>)
 800784c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007850:	bf94      	ite	ls
 8007852:	4698      	movls	r8, r3
 8007854:	4680      	movhi	r8, r0
 8007856:	2303      	movs	r3, #3
 8007858:	6123      	str	r3, [r4, #16]
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	f023 0204 	bic.w	r2, r3, #4
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	f04f 0900 	mov.w	r9, #0
 8007866:	9700      	str	r7, [sp, #0]
 8007868:	4633      	mov	r3, r6
 800786a:	aa0b      	add	r2, sp, #44	; 0x2c
 800786c:	4621      	mov	r1, r4
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f9d8 	bl	8007c24 <_printf_common>
 8007874:	3001      	adds	r0, #1
 8007876:	f040 8090 	bne.w	800799a <_printf_float+0x1e2>
 800787a:	f04f 30ff 	mov.w	r0, #4294967295
 800787e:	b00d      	add	sp, #52	; 0x34
 8007880:	ecbd 8b02 	vpop	{d8}
 8007884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007888:	4642      	mov	r2, r8
 800788a:	464b      	mov	r3, r9
 800788c:	4640      	mov	r0, r8
 800788e:	4649      	mov	r1, r9
 8007890:	f7f9 f94c 	bl	8000b2c <__aeabi_dcmpun>
 8007894:	b140      	cbz	r0, 80078a8 <_printf_float+0xf0>
 8007896:	464b      	mov	r3, r9
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbc      	itt	lt
 800789c:	232d      	movlt	r3, #45	; 0x2d
 800789e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078a2:	487f      	ldr	r0, [pc, #508]	; (8007aa0 <_printf_float+0x2e8>)
 80078a4:	4b7f      	ldr	r3, [pc, #508]	; (8007aa4 <_printf_float+0x2ec>)
 80078a6:	e7d1      	b.n	800784c <_printf_float+0x94>
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80078ae:	9206      	str	r2, [sp, #24]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	d13f      	bne.n	8007934 <_printf_float+0x17c>
 80078b4:	2306      	movs	r3, #6
 80078b6:	6063      	str	r3, [r4, #4]
 80078b8:	9b05      	ldr	r3, [sp, #20]
 80078ba:	6861      	ldr	r1, [r4, #4]
 80078bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80078c0:	2300      	movs	r3, #0
 80078c2:	9303      	str	r3, [sp, #12]
 80078c4:	ab0a      	add	r3, sp, #40	; 0x28
 80078c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078ca:	ab09      	add	r3, sp, #36	; 0x24
 80078cc:	ec49 8b10 	vmov	d0, r8, r9
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	6022      	str	r2, [r4, #0]
 80078d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078d8:	4628      	mov	r0, r5
 80078da:	f7ff fecd 	bl	8007678 <__cvt>
 80078de:	9b06      	ldr	r3, [sp, #24]
 80078e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078e2:	2b47      	cmp	r3, #71	; 0x47
 80078e4:	4680      	mov	r8, r0
 80078e6:	d108      	bne.n	80078fa <_printf_float+0x142>
 80078e8:	1cc8      	adds	r0, r1, #3
 80078ea:	db02      	blt.n	80078f2 <_printf_float+0x13a>
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	4299      	cmp	r1, r3
 80078f0:	dd41      	ble.n	8007976 <_printf_float+0x1be>
 80078f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80078f6:	fa5f fb8b 	uxtb.w	fp, fp
 80078fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078fe:	d820      	bhi.n	8007942 <_printf_float+0x18a>
 8007900:	3901      	subs	r1, #1
 8007902:	465a      	mov	r2, fp
 8007904:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007908:	9109      	str	r1, [sp, #36]	; 0x24
 800790a:	f7ff ff17 	bl	800773c <__exponent>
 800790e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007910:	1813      	adds	r3, r2, r0
 8007912:	2a01      	cmp	r2, #1
 8007914:	4681      	mov	r9, r0
 8007916:	6123      	str	r3, [r4, #16]
 8007918:	dc02      	bgt.n	8007920 <_printf_float+0x168>
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	07d2      	lsls	r2, r2, #31
 800791e:	d501      	bpl.n	8007924 <_printf_float+0x16c>
 8007920:	3301      	adds	r3, #1
 8007922:	6123      	str	r3, [r4, #16]
 8007924:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007928:	2b00      	cmp	r3, #0
 800792a:	d09c      	beq.n	8007866 <_printf_float+0xae>
 800792c:	232d      	movs	r3, #45	; 0x2d
 800792e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007932:	e798      	b.n	8007866 <_printf_float+0xae>
 8007934:	9a06      	ldr	r2, [sp, #24]
 8007936:	2a47      	cmp	r2, #71	; 0x47
 8007938:	d1be      	bne.n	80078b8 <_printf_float+0x100>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1bc      	bne.n	80078b8 <_printf_float+0x100>
 800793e:	2301      	movs	r3, #1
 8007940:	e7b9      	b.n	80078b6 <_printf_float+0xfe>
 8007942:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007946:	d118      	bne.n	800797a <_printf_float+0x1c2>
 8007948:	2900      	cmp	r1, #0
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	dd0b      	ble.n	8007966 <_printf_float+0x1ae>
 800794e:	6121      	str	r1, [r4, #16]
 8007950:	b913      	cbnz	r3, 8007958 <_printf_float+0x1a0>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	07d0      	lsls	r0, r2, #31
 8007956:	d502      	bpl.n	800795e <_printf_float+0x1a6>
 8007958:	3301      	adds	r3, #1
 800795a:	440b      	add	r3, r1
 800795c:	6123      	str	r3, [r4, #16]
 800795e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007960:	f04f 0900 	mov.w	r9, #0
 8007964:	e7de      	b.n	8007924 <_printf_float+0x16c>
 8007966:	b913      	cbnz	r3, 800796e <_printf_float+0x1b6>
 8007968:	6822      	ldr	r2, [r4, #0]
 800796a:	07d2      	lsls	r2, r2, #31
 800796c:	d501      	bpl.n	8007972 <_printf_float+0x1ba>
 800796e:	3302      	adds	r3, #2
 8007970:	e7f4      	b.n	800795c <_printf_float+0x1a4>
 8007972:	2301      	movs	r3, #1
 8007974:	e7f2      	b.n	800795c <_printf_float+0x1a4>
 8007976:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800797a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800797c:	4299      	cmp	r1, r3
 800797e:	db05      	blt.n	800798c <_printf_float+0x1d4>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	6121      	str	r1, [r4, #16]
 8007984:	07d8      	lsls	r0, r3, #31
 8007986:	d5ea      	bpl.n	800795e <_printf_float+0x1a6>
 8007988:	1c4b      	adds	r3, r1, #1
 800798a:	e7e7      	b.n	800795c <_printf_float+0x1a4>
 800798c:	2900      	cmp	r1, #0
 800798e:	bfd4      	ite	le
 8007990:	f1c1 0202 	rsble	r2, r1, #2
 8007994:	2201      	movgt	r2, #1
 8007996:	4413      	add	r3, r2
 8007998:	e7e0      	b.n	800795c <_printf_float+0x1a4>
 800799a:	6823      	ldr	r3, [r4, #0]
 800799c:	055a      	lsls	r2, r3, #21
 800799e:	d407      	bmi.n	80079b0 <_printf_float+0x1f8>
 80079a0:	6923      	ldr	r3, [r4, #16]
 80079a2:	4642      	mov	r2, r8
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	d12c      	bne.n	8007a08 <_printf_float+0x250>
 80079ae:	e764      	b.n	800787a <_printf_float+0xc2>
 80079b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079b4:	f240 80e0 	bls.w	8007b78 <_printf_float+0x3c0>
 80079b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80079bc:	2200      	movs	r2, #0
 80079be:	2300      	movs	r3, #0
 80079c0:	f7f9 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d034      	beq.n	8007a32 <_printf_float+0x27a>
 80079c8:	4a37      	ldr	r2, [pc, #220]	; (8007aa8 <_printf_float+0x2f0>)
 80079ca:	2301      	movs	r3, #1
 80079cc:	4631      	mov	r1, r6
 80079ce:	4628      	mov	r0, r5
 80079d0:	47b8      	blx	r7
 80079d2:	3001      	adds	r0, #1
 80079d4:	f43f af51 	beq.w	800787a <_printf_float+0xc2>
 80079d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079dc:	429a      	cmp	r2, r3
 80079de:	db02      	blt.n	80079e6 <_printf_float+0x22e>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	07d8      	lsls	r0, r3, #31
 80079e4:	d510      	bpl.n	8007a08 <_printf_float+0x250>
 80079e6:	ee18 3a10 	vmov	r3, s16
 80079ea:	4652      	mov	r2, sl
 80079ec:	4631      	mov	r1, r6
 80079ee:	4628      	mov	r0, r5
 80079f0:	47b8      	blx	r7
 80079f2:	3001      	adds	r0, #1
 80079f4:	f43f af41 	beq.w	800787a <_printf_float+0xc2>
 80079f8:	f04f 0800 	mov.w	r8, #0
 80079fc:	f104 091a 	add.w	r9, r4, #26
 8007a00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a02:	3b01      	subs	r3, #1
 8007a04:	4543      	cmp	r3, r8
 8007a06:	dc09      	bgt.n	8007a1c <_printf_float+0x264>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	079b      	lsls	r3, r3, #30
 8007a0c:	f100 8105 	bmi.w	8007c1a <_printf_float+0x462>
 8007a10:	68e0      	ldr	r0, [r4, #12]
 8007a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a14:	4298      	cmp	r0, r3
 8007a16:	bfb8      	it	lt
 8007a18:	4618      	movlt	r0, r3
 8007a1a:	e730      	b.n	800787e <_printf_float+0xc6>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	464a      	mov	r2, r9
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f af27 	beq.w	800787a <_printf_float+0xc2>
 8007a2c:	f108 0801 	add.w	r8, r8, #1
 8007a30:	e7e6      	b.n	8007a00 <_printf_float+0x248>
 8007a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dc39      	bgt.n	8007aac <_printf_float+0x2f4>
 8007a38:	4a1b      	ldr	r2, [pc, #108]	; (8007aa8 <_printf_float+0x2f0>)
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	4631      	mov	r1, r6
 8007a3e:	4628      	mov	r0, r5
 8007a40:	47b8      	blx	r7
 8007a42:	3001      	adds	r0, #1
 8007a44:	f43f af19 	beq.w	800787a <_printf_float+0xc2>
 8007a48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	d102      	bne.n	8007a56 <_printf_float+0x29e>
 8007a50:	6823      	ldr	r3, [r4, #0]
 8007a52:	07d9      	lsls	r1, r3, #31
 8007a54:	d5d8      	bpl.n	8007a08 <_printf_float+0x250>
 8007a56:	ee18 3a10 	vmov	r3, s16
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f af09 	beq.w	800787a <_printf_float+0xc2>
 8007a68:	f04f 0900 	mov.w	r9, #0
 8007a6c:	f104 0a1a 	add.w	sl, r4, #26
 8007a70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a72:	425b      	negs	r3, r3
 8007a74:	454b      	cmp	r3, r9
 8007a76:	dc01      	bgt.n	8007a7c <_printf_float+0x2c4>
 8007a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a7a:	e792      	b.n	80079a2 <_printf_float+0x1ea>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4652      	mov	r2, sl
 8007a80:	4631      	mov	r1, r6
 8007a82:	4628      	mov	r0, r5
 8007a84:	47b8      	blx	r7
 8007a86:	3001      	adds	r0, #1
 8007a88:	f43f aef7 	beq.w	800787a <_printf_float+0xc2>
 8007a8c:	f109 0901 	add.w	r9, r9, #1
 8007a90:	e7ee      	b.n	8007a70 <_printf_float+0x2b8>
 8007a92:	bf00      	nop
 8007a94:	7fefffff 	.word	0x7fefffff
 8007a98:	0800bfe4 	.word	0x0800bfe4
 8007a9c:	0800bfe8 	.word	0x0800bfe8
 8007aa0:	0800bff0 	.word	0x0800bff0
 8007aa4:	0800bfec 	.word	0x0800bfec
 8007aa8:	0800bff4 	.word	0x0800bff4
 8007aac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007aae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	bfa8      	it	ge
 8007ab4:	461a      	movge	r2, r3
 8007ab6:	2a00      	cmp	r2, #0
 8007ab8:	4691      	mov	r9, r2
 8007aba:	dc37      	bgt.n	8007b2c <_printf_float+0x374>
 8007abc:	f04f 0b00 	mov.w	fp, #0
 8007ac0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ac4:	f104 021a 	add.w	r2, r4, #26
 8007ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aca:	9305      	str	r3, [sp, #20]
 8007acc:	eba3 0309 	sub.w	r3, r3, r9
 8007ad0:	455b      	cmp	r3, fp
 8007ad2:	dc33      	bgt.n	8007b3c <_printf_float+0x384>
 8007ad4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	db3b      	blt.n	8007b54 <_printf_float+0x39c>
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	07da      	lsls	r2, r3, #31
 8007ae0:	d438      	bmi.n	8007b54 <_printf_float+0x39c>
 8007ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae4:	9a05      	ldr	r2, [sp, #20]
 8007ae6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ae8:	1a9a      	subs	r2, r3, r2
 8007aea:	eba3 0901 	sub.w	r9, r3, r1
 8007aee:	4591      	cmp	r9, r2
 8007af0:	bfa8      	it	ge
 8007af2:	4691      	movge	r9, r2
 8007af4:	f1b9 0f00 	cmp.w	r9, #0
 8007af8:	dc35      	bgt.n	8007b66 <_printf_float+0x3ae>
 8007afa:	f04f 0800 	mov.w	r8, #0
 8007afe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b02:	f104 0a1a 	add.w	sl, r4, #26
 8007b06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b0a:	1a9b      	subs	r3, r3, r2
 8007b0c:	eba3 0309 	sub.w	r3, r3, r9
 8007b10:	4543      	cmp	r3, r8
 8007b12:	f77f af79 	ble.w	8007a08 <_printf_float+0x250>
 8007b16:	2301      	movs	r3, #1
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b8      	blx	r7
 8007b20:	3001      	adds	r0, #1
 8007b22:	f43f aeaa 	beq.w	800787a <_printf_float+0xc2>
 8007b26:	f108 0801 	add.w	r8, r8, #1
 8007b2a:	e7ec      	b.n	8007b06 <_printf_float+0x34e>
 8007b2c:	4613      	mov	r3, r2
 8007b2e:	4631      	mov	r1, r6
 8007b30:	4642      	mov	r2, r8
 8007b32:	4628      	mov	r0, r5
 8007b34:	47b8      	blx	r7
 8007b36:	3001      	adds	r0, #1
 8007b38:	d1c0      	bne.n	8007abc <_printf_float+0x304>
 8007b3a:	e69e      	b.n	800787a <_printf_float+0xc2>
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	9205      	str	r2, [sp, #20]
 8007b44:	47b8      	blx	r7
 8007b46:	3001      	adds	r0, #1
 8007b48:	f43f ae97 	beq.w	800787a <_printf_float+0xc2>
 8007b4c:	9a05      	ldr	r2, [sp, #20]
 8007b4e:	f10b 0b01 	add.w	fp, fp, #1
 8007b52:	e7b9      	b.n	8007ac8 <_printf_float+0x310>
 8007b54:	ee18 3a10 	vmov	r3, s16
 8007b58:	4652      	mov	r2, sl
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b8      	blx	r7
 8007b60:	3001      	adds	r0, #1
 8007b62:	d1be      	bne.n	8007ae2 <_printf_float+0x32a>
 8007b64:	e689      	b.n	800787a <_printf_float+0xc2>
 8007b66:	9a05      	ldr	r2, [sp, #20]
 8007b68:	464b      	mov	r3, r9
 8007b6a:	4442      	add	r2, r8
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4628      	mov	r0, r5
 8007b70:	47b8      	blx	r7
 8007b72:	3001      	adds	r0, #1
 8007b74:	d1c1      	bne.n	8007afa <_printf_float+0x342>
 8007b76:	e680      	b.n	800787a <_printf_float+0xc2>
 8007b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b7a:	2a01      	cmp	r2, #1
 8007b7c:	dc01      	bgt.n	8007b82 <_printf_float+0x3ca>
 8007b7e:	07db      	lsls	r3, r3, #31
 8007b80:	d538      	bpl.n	8007bf4 <_printf_float+0x43c>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4642      	mov	r2, r8
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae74 	beq.w	800787a <_printf_float+0xc2>
 8007b92:	ee18 3a10 	vmov	r3, s16
 8007b96:	4652      	mov	r2, sl
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f ae6b 	beq.w	800787a <_printf_float+0xc2>
 8007ba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2300      	movs	r3, #0
 8007bac:	f7f8 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bb0:	b9d8      	cbnz	r0, 8007bea <_printf_float+0x432>
 8007bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb4:	f108 0201 	add.w	r2, r8, #1
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	d10e      	bne.n	8007be2 <_printf_float+0x42a>
 8007bc4:	e659      	b.n	800787a <_printf_float+0xc2>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	4652      	mov	r2, sl
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	f43f ae52 	beq.w	800787a <_printf_float+0xc2>
 8007bd6:	f108 0801 	add.w	r8, r8, #1
 8007bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	4543      	cmp	r3, r8
 8007be0:	dcf1      	bgt.n	8007bc6 <_printf_float+0x40e>
 8007be2:	464b      	mov	r3, r9
 8007be4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007be8:	e6dc      	b.n	80079a4 <_printf_float+0x1ec>
 8007bea:	f04f 0800 	mov.w	r8, #0
 8007bee:	f104 0a1a 	add.w	sl, r4, #26
 8007bf2:	e7f2      	b.n	8007bda <_printf_float+0x422>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	4642      	mov	r2, r8
 8007bf8:	e7df      	b.n	8007bba <_printf_float+0x402>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	464a      	mov	r2, r9
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae38 	beq.w	800787a <_printf_float+0xc2>
 8007c0a:	f108 0801 	add.w	r8, r8, #1
 8007c0e:	68e3      	ldr	r3, [r4, #12]
 8007c10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c12:	1a5b      	subs	r3, r3, r1
 8007c14:	4543      	cmp	r3, r8
 8007c16:	dcf0      	bgt.n	8007bfa <_printf_float+0x442>
 8007c18:	e6fa      	b.n	8007a10 <_printf_float+0x258>
 8007c1a:	f04f 0800 	mov.w	r8, #0
 8007c1e:	f104 0919 	add.w	r9, r4, #25
 8007c22:	e7f4      	b.n	8007c0e <_printf_float+0x456>

08007c24 <_printf_common>:
 8007c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c28:	4616      	mov	r6, r2
 8007c2a:	4699      	mov	r9, r3
 8007c2c:	688a      	ldr	r2, [r1, #8]
 8007c2e:	690b      	ldr	r3, [r1, #16]
 8007c30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c34:	4293      	cmp	r3, r2
 8007c36:	bfb8      	it	lt
 8007c38:	4613      	movlt	r3, r2
 8007c3a:	6033      	str	r3, [r6, #0]
 8007c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c40:	4607      	mov	r7, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	b10a      	cbz	r2, 8007c4a <_printf_common+0x26>
 8007c46:	3301      	adds	r3, #1
 8007c48:	6033      	str	r3, [r6, #0]
 8007c4a:	6823      	ldr	r3, [r4, #0]
 8007c4c:	0699      	lsls	r1, r3, #26
 8007c4e:	bf42      	ittt	mi
 8007c50:	6833      	ldrmi	r3, [r6, #0]
 8007c52:	3302      	addmi	r3, #2
 8007c54:	6033      	strmi	r3, [r6, #0]
 8007c56:	6825      	ldr	r5, [r4, #0]
 8007c58:	f015 0506 	ands.w	r5, r5, #6
 8007c5c:	d106      	bne.n	8007c6c <_printf_common+0x48>
 8007c5e:	f104 0a19 	add.w	sl, r4, #25
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	6832      	ldr	r2, [r6, #0]
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dc26      	bgt.n	8007cba <_printf_common+0x96>
 8007c6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c70:	1e13      	subs	r3, r2, #0
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	bf18      	it	ne
 8007c76:	2301      	movne	r3, #1
 8007c78:	0692      	lsls	r2, r2, #26
 8007c7a:	d42b      	bmi.n	8007cd4 <_printf_common+0xb0>
 8007c7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c80:	4649      	mov	r1, r9
 8007c82:	4638      	mov	r0, r7
 8007c84:	47c0      	blx	r8
 8007c86:	3001      	adds	r0, #1
 8007c88:	d01e      	beq.n	8007cc8 <_printf_common+0xa4>
 8007c8a:	6823      	ldr	r3, [r4, #0]
 8007c8c:	68e5      	ldr	r5, [r4, #12]
 8007c8e:	6832      	ldr	r2, [r6, #0]
 8007c90:	f003 0306 	and.w	r3, r3, #6
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	bf08      	it	eq
 8007c98:	1aad      	subeq	r5, r5, r2
 8007c9a:	68a3      	ldr	r3, [r4, #8]
 8007c9c:	6922      	ldr	r2, [r4, #16]
 8007c9e:	bf0c      	ite	eq
 8007ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ca4:	2500      	movne	r5, #0
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	bfc4      	itt	gt
 8007caa:	1a9b      	subgt	r3, r3, r2
 8007cac:	18ed      	addgt	r5, r5, r3
 8007cae:	2600      	movs	r6, #0
 8007cb0:	341a      	adds	r4, #26
 8007cb2:	42b5      	cmp	r5, r6
 8007cb4:	d11a      	bne.n	8007cec <_printf_common+0xc8>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e008      	b.n	8007ccc <_printf_common+0xa8>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	4652      	mov	r2, sl
 8007cbe:	4649      	mov	r1, r9
 8007cc0:	4638      	mov	r0, r7
 8007cc2:	47c0      	blx	r8
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d103      	bne.n	8007cd0 <_printf_common+0xac>
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd0:	3501      	adds	r5, #1
 8007cd2:	e7c6      	b.n	8007c62 <_printf_common+0x3e>
 8007cd4:	18e1      	adds	r1, r4, r3
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	2030      	movs	r0, #48	; 0x30
 8007cda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cde:	4422      	add	r2, r4
 8007ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ce8:	3302      	adds	r3, #2
 8007cea:	e7c7      	b.n	8007c7c <_printf_common+0x58>
 8007cec:	2301      	movs	r3, #1
 8007cee:	4622      	mov	r2, r4
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c0      	blx	r8
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d0e6      	beq.n	8007cc8 <_printf_common+0xa4>
 8007cfa:	3601      	adds	r6, #1
 8007cfc:	e7d9      	b.n	8007cb2 <_printf_common+0x8e>
	...

08007d00 <_printf_i>:
 8007d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d04:	7e0f      	ldrb	r7, [r1, #24]
 8007d06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d08:	2f78      	cmp	r7, #120	; 0x78
 8007d0a:	4691      	mov	r9, r2
 8007d0c:	4680      	mov	r8, r0
 8007d0e:	460c      	mov	r4, r1
 8007d10:	469a      	mov	sl, r3
 8007d12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d16:	d807      	bhi.n	8007d28 <_printf_i+0x28>
 8007d18:	2f62      	cmp	r7, #98	; 0x62
 8007d1a:	d80a      	bhi.n	8007d32 <_printf_i+0x32>
 8007d1c:	2f00      	cmp	r7, #0
 8007d1e:	f000 80d8 	beq.w	8007ed2 <_printf_i+0x1d2>
 8007d22:	2f58      	cmp	r7, #88	; 0x58
 8007d24:	f000 80a3 	beq.w	8007e6e <_printf_i+0x16e>
 8007d28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d30:	e03a      	b.n	8007da8 <_printf_i+0xa8>
 8007d32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d36:	2b15      	cmp	r3, #21
 8007d38:	d8f6      	bhi.n	8007d28 <_printf_i+0x28>
 8007d3a:	a101      	add	r1, pc, #4	; (adr r1, 8007d40 <_printf_i+0x40>)
 8007d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d40:	08007d99 	.word	0x08007d99
 8007d44:	08007dad 	.word	0x08007dad
 8007d48:	08007d29 	.word	0x08007d29
 8007d4c:	08007d29 	.word	0x08007d29
 8007d50:	08007d29 	.word	0x08007d29
 8007d54:	08007d29 	.word	0x08007d29
 8007d58:	08007dad 	.word	0x08007dad
 8007d5c:	08007d29 	.word	0x08007d29
 8007d60:	08007d29 	.word	0x08007d29
 8007d64:	08007d29 	.word	0x08007d29
 8007d68:	08007d29 	.word	0x08007d29
 8007d6c:	08007eb9 	.word	0x08007eb9
 8007d70:	08007ddd 	.word	0x08007ddd
 8007d74:	08007e9b 	.word	0x08007e9b
 8007d78:	08007d29 	.word	0x08007d29
 8007d7c:	08007d29 	.word	0x08007d29
 8007d80:	08007edb 	.word	0x08007edb
 8007d84:	08007d29 	.word	0x08007d29
 8007d88:	08007ddd 	.word	0x08007ddd
 8007d8c:	08007d29 	.word	0x08007d29
 8007d90:	08007d29 	.word	0x08007d29
 8007d94:	08007ea3 	.word	0x08007ea3
 8007d98:	682b      	ldr	r3, [r5, #0]
 8007d9a:	1d1a      	adds	r2, r3, #4
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	602a      	str	r2, [r5, #0]
 8007da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007da4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007da8:	2301      	movs	r3, #1
 8007daa:	e0a3      	b.n	8007ef4 <_printf_i+0x1f4>
 8007dac:	6820      	ldr	r0, [r4, #0]
 8007dae:	6829      	ldr	r1, [r5, #0]
 8007db0:	0606      	lsls	r6, r0, #24
 8007db2:	f101 0304 	add.w	r3, r1, #4
 8007db6:	d50a      	bpl.n	8007dce <_printf_i+0xce>
 8007db8:	680e      	ldr	r6, [r1, #0]
 8007dba:	602b      	str	r3, [r5, #0]
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	da03      	bge.n	8007dc8 <_printf_i+0xc8>
 8007dc0:	232d      	movs	r3, #45	; 0x2d
 8007dc2:	4276      	negs	r6, r6
 8007dc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dc8:	485e      	ldr	r0, [pc, #376]	; (8007f44 <_printf_i+0x244>)
 8007dca:	230a      	movs	r3, #10
 8007dcc:	e019      	b.n	8007e02 <_printf_i+0x102>
 8007dce:	680e      	ldr	r6, [r1, #0]
 8007dd0:	602b      	str	r3, [r5, #0]
 8007dd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007dd6:	bf18      	it	ne
 8007dd8:	b236      	sxthne	r6, r6
 8007dda:	e7ef      	b.n	8007dbc <_printf_i+0xbc>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	1d19      	adds	r1, r3, #4
 8007de2:	6029      	str	r1, [r5, #0]
 8007de4:	0601      	lsls	r1, r0, #24
 8007de6:	d501      	bpl.n	8007dec <_printf_i+0xec>
 8007de8:	681e      	ldr	r6, [r3, #0]
 8007dea:	e002      	b.n	8007df2 <_printf_i+0xf2>
 8007dec:	0646      	lsls	r6, r0, #25
 8007dee:	d5fb      	bpl.n	8007de8 <_printf_i+0xe8>
 8007df0:	881e      	ldrh	r6, [r3, #0]
 8007df2:	4854      	ldr	r0, [pc, #336]	; (8007f44 <_printf_i+0x244>)
 8007df4:	2f6f      	cmp	r7, #111	; 0x6f
 8007df6:	bf0c      	ite	eq
 8007df8:	2308      	moveq	r3, #8
 8007dfa:	230a      	movne	r3, #10
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e02:	6865      	ldr	r5, [r4, #4]
 8007e04:	60a5      	str	r5, [r4, #8]
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	bfa2      	ittt	ge
 8007e0a:	6821      	ldrge	r1, [r4, #0]
 8007e0c:	f021 0104 	bicge.w	r1, r1, #4
 8007e10:	6021      	strge	r1, [r4, #0]
 8007e12:	b90e      	cbnz	r6, 8007e18 <_printf_i+0x118>
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	d04d      	beq.n	8007eb4 <_printf_i+0x1b4>
 8007e18:	4615      	mov	r5, r2
 8007e1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e1e:	fb03 6711 	mls	r7, r3, r1, r6
 8007e22:	5dc7      	ldrb	r7, [r0, r7]
 8007e24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e28:	4637      	mov	r7, r6
 8007e2a:	42bb      	cmp	r3, r7
 8007e2c:	460e      	mov	r6, r1
 8007e2e:	d9f4      	bls.n	8007e1a <_printf_i+0x11a>
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d10b      	bne.n	8007e4c <_printf_i+0x14c>
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	07de      	lsls	r6, r3, #31
 8007e38:	d508      	bpl.n	8007e4c <_printf_i+0x14c>
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	6861      	ldr	r1, [r4, #4]
 8007e3e:	4299      	cmp	r1, r3
 8007e40:	bfde      	ittt	le
 8007e42:	2330      	movle	r3, #48	; 0x30
 8007e44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e48:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e4c:	1b52      	subs	r2, r2, r5
 8007e4e:	6122      	str	r2, [r4, #16]
 8007e50:	f8cd a000 	str.w	sl, [sp]
 8007e54:	464b      	mov	r3, r9
 8007e56:	aa03      	add	r2, sp, #12
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4640      	mov	r0, r8
 8007e5c:	f7ff fee2 	bl	8007c24 <_printf_common>
 8007e60:	3001      	adds	r0, #1
 8007e62:	d14c      	bne.n	8007efe <_printf_i+0x1fe>
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	b004      	add	sp, #16
 8007e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e6e:	4835      	ldr	r0, [pc, #212]	; (8007f44 <_printf_i+0x244>)
 8007e70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e74:	6829      	ldr	r1, [r5, #0]
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e7c:	6029      	str	r1, [r5, #0]
 8007e7e:	061d      	lsls	r5, r3, #24
 8007e80:	d514      	bpl.n	8007eac <_printf_i+0x1ac>
 8007e82:	07df      	lsls	r7, r3, #31
 8007e84:	bf44      	itt	mi
 8007e86:	f043 0320 	orrmi.w	r3, r3, #32
 8007e8a:	6023      	strmi	r3, [r4, #0]
 8007e8c:	b91e      	cbnz	r6, 8007e96 <_printf_i+0x196>
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	f023 0320 	bic.w	r3, r3, #32
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	2310      	movs	r3, #16
 8007e98:	e7b0      	b.n	8007dfc <_printf_i+0xfc>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	f043 0320 	orr.w	r3, r3, #32
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	2378      	movs	r3, #120	; 0x78
 8007ea4:	4828      	ldr	r0, [pc, #160]	; (8007f48 <_printf_i+0x248>)
 8007ea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007eaa:	e7e3      	b.n	8007e74 <_printf_i+0x174>
 8007eac:	0659      	lsls	r1, r3, #25
 8007eae:	bf48      	it	mi
 8007eb0:	b2b6      	uxthmi	r6, r6
 8007eb2:	e7e6      	b.n	8007e82 <_printf_i+0x182>
 8007eb4:	4615      	mov	r5, r2
 8007eb6:	e7bb      	b.n	8007e30 <_printf_i+0x130>
 8007eb8:	682b      	ldr	r3, [r5, #0]
 8007eba:	6826      	ldr	r6, [r4, #0]
 8007ebc:	6961      	ldr	r1, [r4, #20]
 8007ebe:	1d18      	adds	r0, r3, #4
 8007ec0:	6028      	str	r0, [r5, #0]
 8007ec2:	0635      	lsls	r5, r6, #24
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	d501      	bpl.n	8007ecc <_printf_i+0x1cc>
 8007ec8:	6019      	str	r1, [r3, #0]
 8007eca:	e002      	b.n	8007ed2 <_printf_i+0x1d2>
 8007ecc:	0670      	lsls	r0, r6, #25
 8007ece:	d5fb      	bpl.n	8007ec8 <_printf_i+0x1c8>
 8007ed0:	8019      	strh	r1, [r3, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	4615      	mov	r5, r2
 8007ed8:	e7ba      	b.n	8007e50 <_printf_i+0x150>
 8007eda:	682b      	ldr	r3, [r5, #0]
 8007edc:	1d1a      	adds	r2, r3, #4
 8007ede:	602a      	str	r2, [r5, #0]
 8007ee0:	681d      	ldr	r5, [r3, #0]
 8007ee2:	6862      	ldr	r2, [r4, #4]
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	4628      	mov	r0, r5
 8007ee8:	f7f8 f97a 	bl	80001e0 <memchr>
 8007eec:	b108      	cbz	r0, 8007ef2 <_printf_i+0x1f2>
 8007eee:	1b40      	subs	r0, r0, r5
 8007ef0:	6060      	str	r0, [r4, #4]
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	6123      	str	r3, [r4, #16]
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007efc:	e7a8      	b.n	8007e50 <_printf_i+0x150>
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	47d0      	blx	sl
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d0ab      	beq.n	8007e64 <_printf_i+0x164>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	079b      	lsls	r3, r3, #30
 8007f10:	d413      	bmi.n	8007f3a <_printf_i+0x23a>
 8007f12:	68e0      	ldr	r0, [r4, #12]
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	4298      	cmp	r0, r3
 8007f18:	bfb8      	it	lt
 8007f1a:	4618      	movlt	r0, r3
 8007f1c:	e7a4      	b.n	8007e68 <_printf_i+0x168>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4632      	mov	r2, r6
 8007f22:	4649      	mov	r1, r9
 8007f24:	4640      	mov	r0, r8
 8007f26:	47d0      	blx	sl
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d09b      	beq.n	8007e64 <_printf_i+0x164>
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	68e3      	ldr	r3, [r4, #12]
 8007f30:	9903      	ldr	r1, [sp, #12]
 8007f32:	1a5b      	subs	r3, r3, r1
 8007f34:	42ab      	cmp	r3, r5
 8007f36:	dcf2      	bgt.n	8007f1e <_printf_i+0x21e>
 8007f38:	e7eb      	b.n	8007f12 <_printf_i+0x212>
 8007f3a:	2500      	movs	r5, #0
 8007f3c:	f104 0619 	add.w	r6, r4, #25
 8007f40:	e7f5      	b.n	8007f2e <_printf_i+0x22e>
 8007f42:	bf00      	nop
 8007f44:	0800bff6 	.word	0x0800bff6
 8007f48:	0800c007 	.word	0x0800c007

08007f4c <_scanf_float>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	b087      	sub	sp, #28
 8007f52:	4617      	mov	r7, r2
 8007f54:	9303      	str	r3, [sp, #12]
 8007f56:	688b      	ldr	r3, [r1, #8]
 8007f58:	1e5a      	subs	r2, r3, #1
 8007f5a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f5e:	bf83      	ittte	hi
 8007f60:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f64:	195b      	addhi	r3, r3, r5
 8007f66:	9302      	strhi	r3, [sp, #8]
 8007f68:	2300      	movls	r3, #0
 8007f6a:	bf86      	itte	hi
 8007f6c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f70:	608b      	strhi	r3, [r1, #8]
 8007f72:	9302      	strls	r3, [sp, #8]
 8007f74:	680b      	ldr	r3, [r1, #0]
 8007f76:	468b      	mov	fp, r1
 8007f78:	2500      	movs	r5, #0
 8007f7a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f7e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f86:	4680      	mov	r8, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	465e      	mov	r6, fp
 8007f8c:	46aa      	mov	sl, r5
 8007f8e:	46a9      	mov	r9, r5
 8007f90:	9501      	str	r5, [sp, #4]
 8007f92:	68a2      	ldr	r2, [r4, #8]
 8007f94:	b152      	cbz	r2, 8007fac <_scanf_float+0x60>
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	2b4e      	cmp	r3, #78	; 0x4e
 8007f9c:	d864      	bhi.n	8008068 <_scanf_float+0x11c>
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d83c      	bhi.n	800801c <_scanf_float+0xd0>
 8007fa2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007fa6:	b2c8      	uxtb	r0, r1
 8007fa8:	280e      	cmp	r0, #14
 8007faa:	d93a      	bls.n	8008022 <_scanf_float+0xd6>
 8007fac:	f1b9 0f00 	cmp.w	r9, #0
 8007fb0:	d003      	beq.n	8007fba <_scanf_float+0x6e>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	f1ba 0f01 	cmp.w	sl, #1
 8007fc2:	f200 8113 	bhi.w	80081ec <_scanf_float+0x2a0>
 8007fc6:	455e      	cmp	r6, fp
 8007fc8:	f200 8105 	bhi.w	80081d6 <_scanf_float+0x28a>
 8007fcc:	2501      	movs	r5, #1
 8007fce:	4628      	mov	r0, r5
 8007fd0:	b007      	add	sp, #28
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007fda:	2a0d      	cmp	r2, #13
 8007fdc:	d8e6      	bhi.n	8007fac <_scanf_float+0x60>
 8007fde:	a101      	add	r1, pc, #4	; (adr r1, 8007fe4 <_scanf_float+0x98>)
 8007fe0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fe4:	08008123 	.word	0x08008123
 8007fe8:	08007fad 	.word	0x08007fad
 8007fec:	08007fad 	.word	0x08007fad
 8007ff0:	08007fad 	.word	0x08007fad
 8007ff4:	08008183 	.word	0x08008183
 8007ff8:	0800815b 	.word	0x0800815b
 8007ffc:	08007fad 	.word	0x08007fad
 8008000:	08007fad 	.word	0x08007fad
 8008004:	08008131 	.word	0x08008131
 8008008:	08007fad 	.word	0x08007fad
 800800c:	08007fad 	.word	0x08007fad
 8008010:	08007fad 	.word	0x08007fad
 8008014:	08007fad 	.word	0x08007fad
 8008018:	080080e9 	.word	0x080080e9
 800801c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008020:	e7db      	b.n	8007fda <_scanf_float+0x8e>
 8008022:	290e      	cmp	r1, #14
 8008024:	d8c2      	bhi.n	8007fac <_scanf_float+0x60>
 8008026:	a001      	add	r0, pc, #4	; (adr r0, 800802c <_scanf_float+0xe0>)
 8008028:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800802c:	080080db 	.word	0x080080db
 8008030:	08007fad 	.word	0x08007fad
 8008034:	080080db 	.word	0x080080db
 8008038:	0800816f 	.word	0x0800816f
 800803c:	08007fad 	.word	0x08007fad
 8008040:	08008089 	.word	0x08008089
 8008044:	080080c5 	.word	0x080080c5
 8008048:	080080c5 	.word	0x080080c5
 800804c:	080080c5 	.word	0x080080c5
 8008050:	080080c5 	.word	0x080080c5
 8008054:	080080c5 	.word	0x080080c5
 8008058:	080080c5 	.word	0x080080c5
 800805c:	080080c5 	.word	0x080080c5
 8008060:	080080c5 	.word	0x080080c5
 8008064:	080080c5 	.word	0x080080c5
 8008068:	2b6e      	cmp	r3, #110	; 0x6e
 800806a:	d809      	bhi.n	8008080 <_scanf_float+0x134>
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d8b2      	bhi.n	8007fd6 <_scanf_float+0x8a>
 8008070:	2b54      	cmp	r3, #84	; 0x54
 8008072:	d077      	beq.n	8008164 <_scanf_float+0x218>
 8008074:	2b59      	cmp	r3, #89	; 0x59
 8008076:	d199      	bne.n	8007fac <_scanf_float+0x60>
 8008078:	2d07      	cmp	r5, #7
 800807a:	d197      	bne.n	8007fac <_scanf_float+0x60>
 800807c:	2508      	movs	r5, #8
 800807e:	e029      	b.n	80080d4 <_scanf_float+0x188>
 8008080:	2b74      	cmp	r3, #116	; 0x74
 8008082:	d06f      	beq.n	8008164 <_scanf_float+0x218>
 8008084:	2b79      	cmp	r3, #121	; 0x79
 8008086:	e7f6      	b.n	8008076 <_scanf_float+0x12a>
 8008088:	6821      	ldr	r1, [r4, #0]
 800808a:	05c8      	lsls	r0, r1, #23
 800808c:	d51a      	bpl.n	80080c4 <_scanf_float+0x178>
 800808e:	9b02      	ldr	r3, [sp, #8]
 8008090:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008094:	6021      	str	r1, [r4, #0]
 8008096:	f109 0901 	add.w	r9, r9, #1
 800809a:	b11b      	cbz	r3, 80080a4 <_scanf_float+0x158>
 800809c:	3b01      	subs	r3, #1
 800809e:	3201      	adds	r2, #1
 80080a0:	9302      	str	r3, [sp, #8]
 80080a2:	60a2      	str	r2, [r4, #8]
 80080a4:	68a3      	ldr	r3, [r4, #8]
 80080a6:	3b01      	subs	r3, #1
 80080a8:	60a3      	str	r3, [r4, #8]
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	3301      	adds	r3, #1
 80080ae:	6123      	str	r3, [r4, #16]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	3b01      	subs	r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
 80080b8:	f340 8084 	ble.w	80081c4 <_scanf_float+0x278>
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	3301      	adds	r3, #1
 80080c0:	603b      	str	r3, [r7, #0]
 80080c2:	e766      	b.n	8007f92 <_scanf_float+0x46>
 80080c4:	eb1a 0f05 	cmn.w	sl, r5
 80080c8:	f47f af70 	bne.w	8007fac <_scanf_float+0x60>
 80080cc:	6822      	ldr	r2, [r4, #0]
 80080ce:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	f806 3b01 	strb.w	r3, [r6], #1
 80080d8:	e7e4      	b.n	80080a4 <_scanf_float+0x158>
 80080da:	6822      	ldr	r2, [r4, #0]
 80080dc:	0610      	lsls	r0, r2, #24
 80080de:	f57f af65 	bpl.w	8007fac <_scanf_float+0x60>
 80080e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080e6:	e7f4      	b.n	80080d2 <_scanf_float+0x186>
 80080e8:	f1ba 0f00 	cmp.w	sl, #0
 80080ec:	d10e      	bne.n	800810c <_scanf_float+0x1c0>
 80080ee:	f1b9 0f00 	cmp.w	r9, #0
 80080f2:	d10e      	bne.n	8008112 <_scanf_float+0x1c6>
 80080f4:	6822      	ldr	r2, [r4, #0]
 80080f6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080fa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080fe:	d108      	bne.n	8008112 <_scanf_float+0x1c6>
 8008100:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008104:	6022      	str	r2, [r4, #0]
 8008106:	f04f 0a01 	mov.w	sl, #1
 800810a:	e7e3      	b.n	80080d4 <_scanf_float+0x188>
 800810c:	f1ba 0f02 	cmp.w	sl, #2
 8008110:	d055      	beq.n	80081be <_scanf_float+0x272>
 8008112:	2d01      	cmp	r5, #1
 8008114:	d002      	beq.n	800811c <_scanf_float+0x1d0>
 8008116:	2d04      	cmp	r5, #4
 8008118:	f47f af48 	bne.w	8007fac <_scanf_float+0x60>
 800811c:	3501      	adds	r5, #1
 800811e:	b2ed      	uxtb	r5, r5
 8008120:	e7d8      	b.n	80080d4 <_scanf_float+0x188>
 8008122:	f1ba 0f01 	cmp.w	sl, #1
 8008126:	f47f af41 	bne.w	8007fac <_scanf_float+0x60>
 800812a:	f04f 0a02 	mov.w	sl, #2
 800812e:	e7d1      	b.n	80080d4 <_scanf_float+0x188>
 8008130:	b97d      	cbnz	r5, 8008152 <_scanf_float+0x206>
 8008132:	f1b9 0f00 	cmp.w	r9, #0
 8008136:	f47f af3c 	bne.w	8007fb2 <_scanf_float+0x66>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008140:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008144:	f47f af39 	bne.w	8007fba <_scanf_float+0x6e>
 8008148:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800814c:	6022      	str	r2, [r4, #0]
 800814e:	2501      	movs	r5, #1
 8008150:	e7c0      	b.n	80080d4 <_scanf_float+0x188>
 8008152:	2d03      	cmp	r5, #3
 8008154:	d0e2      	beq.n	800811c <_scanf_float+0x1d0>
 8008156:	2d05      	cmp	r5, #5
 8008158:	e7de      	b.n	8008118 <_scanf_float+0x1cc>
 800815a:	2d02      	cmp	r5, #2
 800815c:	f47f af26 	bne.w	8007fac <_scanf_float+0x60>
 8008160:	2503      	movs	r5, #3
 8008162:	e7b7      	b.n	80080d4 <_scanf_float+0x188>
 8008164:	2d06      	cmp	r5, #6
 8008166:	f47f af21 	bne.w	8007fac <_scanf_float+0x60>
 800816a:	2507      	movs	r5, #7
 800816c:	e7b2      	b.n	80080d4 <_scanf_float+0x188>
 800816e:	6822      	ldr	r2, [r4, #0]
 8008170:	0591      	lsls	r1, r2, #22
 8008172:	f57f af1b 	bpl.w	8007fac <_scanf_float+0x60>
 8008176:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800817a:	6022      	str	r2, [r4, #0]
 800817c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008180:	e7a8      	b.n	80080d4 <_scanf_float+0x188>
 8008182:	6822      	ldr	r2, [r4, #0]
 8008184:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008188:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800818c:	d006      	beq.n	800819c <_scanf_float+0x250>
 800818e:	0550      	lsls	r0, r2, #21
 8008190:	f57f af0c 	bpl.w	8007fac <_scanf_float+0x60>
 8008194:	f1b9 0f00 	cmp.w	r9, #0
 8008198:	f43f af0f 	beq.w	8007fba <_scanf_float+0x6e>
 800819c:	0591      	lsls	r1, r2, #22
 800819e:	bf58      	it	pl
 80081a0:	9901      	ldrpl	r1, [sp, #4]
 80081a2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081a6:	bf58      	it	pl
 80081a8:	eba9 0101 	subpl.w	r1, r9, r1
 80081ac:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80081b0:	bf58      	it	pl
 80081b2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80081b6:	6022      	str	r2, [r4, #0]
 80081b8:	f04f 0900 	mov.w	r9, #0
 80081bc:	e78a      	b.n	80080d4 <_scanf_float+0x188>
 80081be:	f04f 0a03 	mov.w	sl, #3
 80081c2:	e787      	b.n	80080d4 <_scanf_float+0x188>
 80081c4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081c8:	4639      	mov	r1, r7
 80081ca:	4640      	mov	r0, r8
 80081cc:	4798      	blx	r3
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f aedf 	beq.w	8007f92 <_scanf_float+0x46>
 80081d4:	e6ea      	b.n	8007fac <_scanf_float+0x60>
 80081d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081de:	463a      	mov	r2, r7
 80081e0:	4640      	mov	r0, r8
 80081e2:	4798      	blx	r3
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	6123      	str	r3, [r4, #16]
 80081ea:	e6ec      	b.n	8007fc6 <_scanf_float+0x7a>
 80081ec:	1e6b      	subs	r3, r5, #1
 80081ee:	2b06      	cmp	r3, #6
 80081f0:	d825      	bhi.n	800823e <_scanf_float+0x2f2>
 80081f2:	2d02      	cmp	r5, #2
 80081f4:	d836      	bhi.n	8008264 <_scanf_float+0x318>
 80081f6:	455e      	cmp	r6, fp
 80081f8:	f67f aee8 	bls.w	8007fcc <_scanf_float+0x80>
 80081fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008200:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008204:	463a      	mov	r2, r7
 8008206:	4640      	mov	r0, r8
 8008208:	4798      	blx	r3
 800820a:	6923      	ldr	r3, [r4, #16]
 800820c:	3b01      	subs	r3, #1
 800820e:	6123      	str	r3, [r4, #16]
 8008210:	e7f1      	b.n	80081f6 <_scanf_float+0x2aa>
 8008212:	9802      	ldr	r0, [sp, #8]
 8008214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008218:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800821c:	9002      	str	r0, [sp, #8]
 800821e:	463a      	mov	r2, r7
 8008220:	4640      	mov	r0, r8
 8008222:	4798      	blx	r3
 8008224:	6923      	ldr	r3, [r4, #16]
 8008226:	3b01      	subs	r3, #1
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800822e:	fa5f fa8a 	uxtb.w	sl, sl
 8008232:	f1ba 0f02 	cmp.w	sl, #2
 8008236:	d1ec      	bne.n	8008212 <_scanf_float+0x2c6>
 8008238:	3d03      	subs	r5, #3
 800823a:	b2ed      	uxtb	r5, r5
 800823c:	1b76      	subs	r6, r6, r5
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	05da      	lsls	r2, r3, #23
 8008242:	d52f      	bpl.n	80082a4 <_scanf_float+0x358>
 8008244:	055b      	lsls	r3, r3, #21
 8008246:	d510      	bpl.n	800826a <_scanf_float+0x31e>
 8008248:	455e      	cmp	r6, fp
 800824a:	f67f aebf 	bls.w	8007fcc <_scanf_float+0x80>
 800824e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008256:	463a      	mov	r2, r7
 8008258:	4640      	mov	r0, r8
 800825a:	4798      	blx	r3
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	3b01      	subs	r3, #1
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	e7f1      	b.n	8008248 <_scanf_float+0x2fc>
 8008264:	46aa      	mov	sl, r5
 8008266:	9602      	str	r6, [sp, #8]
 8008268:	e7df      	b.n	800822a <_scanf_float+0x2de>
 800826a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800826e:	6923      	ldr	r3, [r4, #16]
 8008270:	2965      	cmp	r1, #101	; 0x65
 8008272:	f103 33ff 	add.w	r3, r3, #4294967295
 8008276:	f106 35ff 	add.w	r5, r6, #4294967295
 800827a:	6123      	str	r3, [r4, #16]
 800827c:	d00c      	beq.n	8008298 <_scanf_float+0x34c>
 800827e:	2945      	cmp	r1, #69	; 0x45
 8008280:	d00a      	beq.n	8008298 <_scanf_float+0x34c>
 8008282:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008286:	463a      	mov	r2, r7
 8008288:	4640      	mov	r0, r8
 800828a:	4798      	blx	r3
 800828c:	6923      	ldr	r3, [r4, #16]
 800828e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008292:	3b01      	subs	r3, #1
 8008294:	1eb5      	subs	r5, r6, #2
 8008296:	6123      	str	r3, [r4, #16]
 8008298:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800829c:	463a      	mov	r2, r7
 800829e:	4640      	mov	r0, r8
 80082a0:	4798      	blx	r3
 80082a2:	462e      	mov	r6, r5
 80082a4:	6825      	ldr	r5, [r4, #0]
 80082a6:	f015 0510 	ands.w	r5, r5, #16
 80082aa:	d159      	bne.n	8008360 <_scanf_float+0x414>
 80082ac:	7035      	strb	r5, [r6, #0]
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082b8:	d11b      	bne.n	80082f2 <_scanf_float+0x3a6>
 80082ba:	9b01      	ldr	r3, [sp, #4]
 80082bc:	454b      	cmp	r3, r9
 80082be:	eba3 0209 	sub.w	r2, r3, r9
 80082c2:	d123      	bne.n	800830c <_scanf_float+0x3c0>
 80082c4:	2200      	movs	r2, #0
 80082c6:	4659      	mov	r1, fp
 80082c8:	4640      	mov	r0, r8
 80082ca:	f000 feaf 	bl	800902c <_strtod_r>
 80082ce:	6822      	ldr	r2, [r4, #0]
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	f012 0f02 	tst.w	r2, #2
 80082d6:	ec57 6b10 	vmov	r6, r7, d0
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	d021      	beq.n	8008322 <_scanf_float+0x3d6>
 80082de:	9903      	ldr	r1, [sp, #12]
 80082e0:	1d1a      	adds	r2, r3, #4
 80082e2:	600a      	str	r2, [r1, #0]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	e9c3 6700 	strd	r6, r7, [r3]
 80082ea:	68e3      	ldr	r3, [r4, #12]
 80082ec:	3301      	adds	r3, #1
 80082ee:	60e3      	str	r3, [r4, #12]
 80082f0:	e66d      	b.n	8007fce <_scanf_float+0x82>
 80082f2:	9b04      	ldr	r3, [sp, #16]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0e5      	beq.n	80082c4 <_scanf_float+0x378>
 80082f8:	9905      	ldr	r1, [sp, #20]
 80082fa:	230a      	movs	r3, #10
 80082fc:	462a      	mov	r2, r5
 80082fe:	3101      	adds	r1, #1
 8008300:	4640      	mov	r0, r8
 8008302:	f000 ff1b 	bl	800913c <_strtol_r>
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	9e05      	ldr	r6, [sp, #20]
 800830a:	1ac2      	subs	r2, r0, r3
 800830c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008310:	429e      	cmp	r6, r3
 8008312:	bf28      	it	cs
 8008314:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008318:	4912      	ldr	r1, [pc, #72]	; (8008364 <_scanf_float+0x418>)
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f844 	bl	80083a8 <siprintf>
 8008320:	e7d0      	b.n	80082c4 <_scanf_float+0x378>
 8008322:	9903      	ldr	r1, [sp, #12]
 8008324:	f012 0f04 	tst.w	r2, #4
 8008328:	f103 0204 	add.w	r2, r3, #4
 800832c:	600a      	str	r2, [r1, #0]
 800832e:	d1d9      	bne.n	80082e4 <_scanf_float+0x398>
 8008330:	f8d3 8000 	ldr.w	r8, [r3]
 8008334:	ee10 2a10 	vmov	r2, s0
 8008338:	ee10 0a10 	vmov	r0, s0
 800833c:	463b      	mov	r3, r7
 800833e:	4639      	mov	r1, r7
 8008340:	f7f8 fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8008344:	b128      	cbz	r0, 8008352 <_scanf_float+0x406>
 8008346:	4808      	ldr	r0, [pc, #32]	; (8008368 <_scanf_float+0x41c>)
 8008348:	f000 f828 	bl	800839c <nanf>
 800834c:	ed88 0a00 	vstr	s0, [r8]
 8008350:	e7cb      	b.n	80082ea <_scanf_float+0x39e>
 8008352:	4630      	mov	r0, r6
 8008354:	4639      	mov	r1, r7
 8008356:	f7f8 fc47 	bl	8000be8 <__aeabi_d2f>
 800835a:	f8c8 0000 	str.w	r0, [r8]
 800835e:	e7c4      	b.n	80082ea <_scanf_float+0x39e>
 8008360:	2500      	movs	r5, #0
 8008362:	e634      	b.n	8007fce <_scanf_float+0x82>
 8008364:	0800c018 	.word	0x0800c018
 8008368:	0800c488 	.word	0x0800c488

0800836c <iprintf>:
 800836c:	b40f      	push	{r0, r1, r2, r3}
 800836e:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <iprintf+0x2c>)
 8008370:	b513      	push	{r0, r1, r4, lr}
 8008372:	681c      	ldr	r4, [r3, #0]
 8008374:	b124      	cbz	r4, 8008380 <iprintf+0x14>
 8008376:	69a3      	ldr	r3, [r4, #24]
 8008378:	b913      	cbnz	r3, 8008380 <iprintf+0x14>
 800837a:	4620      	mov	r0, r4
 800837c:	f001 fdbe 	bl	8009efc <__sinit>
 8008380:	ab05      	add	r3, sp, #20
 8008382:	9a04      	ldr	r2, [sp, #16]
 8008384:	68a1      	ldr	r1, [r4, #8]
 8008386:	9301      	str	r3, [sp, #4]
 8008388:	4620      	mov	r0, r4
 800838a:	f003 f931 	bl	800b5f0 <_vfiprintf_r>
 800838e:	b002      	add	sp, #8
 8008390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008394:	b004      	add	sp, #16
 8008396:	4770      	bx	lr
 8008398:	20000010 	.word	0x20000010

0800839c <nanf>:
 800839c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80083a4 <nanf+0x8>
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	7fc00000 	.word	0x7fc00000

080083a8 <siprintf>:
 80083a8:	b40e      	push	{r1, r2, r3}
 80083aa:	b500      	push	{lr}
 80083ac:	b09c      	sub	sp, #112	; 0x70
 80083ae:	ab1d      	add	r3, sp, #116	; 0x74
 80083b0:	9002      	str	r0, [sp, #8]
 80083b2:	9006      	str	r0, [sp, #24]
 80083b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80083b8:	4809      	ldr	r0, [pc, #36]	; (80083e0 <siprintf+0x38>)
 80083ba:	9107      	str	r1, [sp, #28]
 80083bc:	9104      	str	r1, [sp, #16]
 80083be:	4909      	ldr	r1, [pc, #36]	; (80083e4 <siprintf+0x3c>)
 80083c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c4:	9105      	str	r1, [sp, #20]
 80083c6:	6800      	ldr	r0, [r0, #0]
 80083c8:	9301      	str	r3, [sp, #4]
 80083ca:	a902      	add	r1, sp, #8
 80083cc:	f002 ffe6 	bl	800b39c <_svfiprintf_r>
 80083d0:	9b02      	ldr	r3, [sp, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	701a      	strb	r2, [r3, #0]
 80083d6:	b01c      	add	sp, #112	; 0x70
 80083d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083dc:	b003      	add	sp, #12
 80083de:	4770      	bx	lr
 80083e0:	20000010 	.word	0x20000010
 80083e4:	ffff0208 	.word	0xffff0208

080083e8 <sulp>:
 80083e8:	b570      	push	{r4, r5, r6, lr}
 80083ea:	4604      	mov	r4, r0
 80083ec:	460d      	mov	r5, r1
 80083ee:	ec45 4b10 	vmov	d0, r4, r5
 80083f2:	4616      	mov	r6, r2
 80083f4:	f002 fd30 	bl	800ae58 <__ulp>
 80083f8:	ec51 0b10 	vmov	r0, r1, d0
 80083fc:	b17e      	cbz	r6, 800841e <sulp+0x36>
 80083fe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008402:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008406:	2b00      	cmp	r3, #0
 8008408:	dd09      	ble.n	800841e <sulp+0x36>
 800840a:	051b      	lsls	r3, r3, #20
 800840c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008410:	2400      	movs	r4, #0
 8008412:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008416:	4622      	mov	r2, r4
 8008418:	462b      	mov	r3, r5
 800841a:	f7f8 f8ed 	bl	80005f8 <__aeabi_dmul>
 800841e:	bd70      	pop	{r4, r5, r6, pc}

08008420 <_strtod_l>:
 8008420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008424:	ed2d 8b02 	vpush	{d8}
 8008428:	b09d      	sub	sp, #116	; 0x74
 800842a:	461f      	mov	r7, r3
 800842c:	2300      	movs	r3, #0
 800842e:	9318      	str	r3, [sp, #96]	; 0x60
 8008430:	4ba2      	ldr	r3, [pc, #648]	; (80086bc <_strtod_l+0x29c>)
 8008432:	9213      	str	r2, [sp, #76]	; 0x4c
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	9305      	str	r3, [sp, #20]
 8008438:	4604      	mov	r4, r0
 800843a:	4618      	mov	r0, r3
 800843c:	4688      	mov	r8, r1
 800843e:	f7f7 fec7 	bl	80001d0 <strlen>
 8008442:	f04f 0a00 	mov.w	sl, #0
 8008446:	4605      	mov	r5, r0
 8008448:	f04f 0b00 	mov.w	fp, #0
 800844c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008450:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	2a2b      	cmp	r2, #43	; 0x2b
 8008456:	d04e      	beq.n	80084f6 <_strtod_l+0xd6>
 8008458:	d83b      	bhi.n	80084d2 <_strtod_l+0xb2>
 800845a:	2a0d      	cmp	r2, #13
 800845c:	d834      	bhi.n	80084c8 <_strtod_l+0xa8>
 800845e:	2a08      	cmp	r2, #8
 8008460:	d834      	bhi.n	80084cc <_strtod_l+0xac>
 8008462:	2a00      	cmp	r2, #0
 8008464:	d03e      	beq.n	80084e4 <_strtod_l+0xc4>
 8008466:	2300      	movs	r3, #0
 8008468:	930a      	str	r3, [sp, #40]	; 0x28
 800846a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800846c:	7833      	ldrb	r3, [r6, #0]
 800846e:	2b30      	cmp	r3, #48	; 0x30
 8008470:	f040 80b0 	bne.w	80085d4 <_strtod_l+0x1b4>
 8008474:	7873      	ldrb	r3, [r6, #1]
 8008476:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800847a:	2b58      	cmp	r3, #88	; 0x58
 800847c:	d168      	bne.n	8008550 <_strtod_l+0x130>
 800847e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	ab18      	add	r3, sp, #96	; 0x60
 8008484:	9702      	str	r7, [sp, #8]
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4a8d      	ldr	r2, [pc, #564]	; (80086c0 <_strtod_l+0x2a0>)
 800848a:	ab19      	add	r3, sp, #100	; 0x64
 800848c:	a917      	add	r1, sp, #92	; 0x5c
 800848e:	4620      	mov	r0, r4
 8008490:	f001 fe38 	bl	800a104 <__gethex>
 8008494:	f010 0707 	ands.w	r7, r0, #7
 8008498:	4605      	mov	r5, r0
 800849a:	d005      	beq.n	80084a8 <_strtod_l+0x88>
 800849c:	2f06      	cmp	r7, #6
 800849e:	d12c      	bne.n	80084fa <_strtod_l+0xda>
 80084a0:	3601      	adds	r6, #1
 80084a2:	2300      	movs	r3, #0
 80084a4:	9617      	str	r6, [sp, #92]	; 0x5c
 80084a6:	930a      	str	r3, [sp, #40]	; 0x28
 80084a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	f040 8590 	bne.w	8008fd0 <_strtod_l+0xbb0>
 80084b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084b2:	b1eb      	cbz	r3, 80084f0 <_strtod_l+0xd0>
 80084b4:	4652      	mov	r2, sl
 80084b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80084ba:	ec43 2b10 	vmov	d0, r2, r3
 80084be:	b01d      	add	sp, #116	; 0x74
 80084c0:	ecbd 8b02 	vpop	{d8}
 80084c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c8:	2a20      	cmp	r2, #32
 80084ca:	d1cc      	bne.n	8008466 <_strtod_l+0x46>
 80084cc:	3301      	adds	r3, #1
 80084ce:	9317      	str	r3, [sp, #92]	; 0x5c
 80084d0:	e7be      	b.n	8008450 <_strtod_l+0x30>
 80084d2:	2a2d      	cmp	r2, #45	; 0x2d
 80084d4:	d1c7      	bne.n	8008466 <_strtod_l+0x46>
 80084d6:	2201      	movs	r2, #1
 80084d8:	920a      	str	r2, [sp, #40]	; 0x28
 80084da:	1c5a      	adds	r2, r3, #1
 80084dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1c2      	bne.n	800846a <_strtod_l+0x4a>
 80084e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084e6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f040 856e 	bne.w	8008fcc <_strtod_l+0xbac>
 80084f0:	4652      	mov	r2, sl
 80084f2:	465b      	mov	r3, fp
 80084f4:	e7e1      	b.n	80084ba <_strtod_l+0x9a>
 80084f6:	2200      	movs	r2, #0
 80084f8:	e7ee      	b.n	80084d8 <_strtod_l+0xb8>
 80084fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084fc:	b13a      	cbz	r2, 800850e <_strtod_l+0xee>
 80084fe:	2135      	movs	r1, #53	; 0x35
 8008500:	a81a      	add	r0, sp, #104	; 0x68
 8008502:	f002 fdb4 	bl	800b06e <__copybits>
 8008506:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008508:	4620      	mov	r0, r4
 800850a:	f002 f973 	bl	800a7f4 <_Bfree>
 800850e:	3f01      	subs	r7, #1
 8008510:	2f04      	cmp	r7, #4
 8008512:	d806      	bhi.n	8008522 <_strtod_l+0x102>
 8008514:	e8df f007 	tbb	[pc, r7]
 8008518:	1714030a 	.word	0x1714030a
 800851c:	0a          	.byte	0x0a
 800851d:	00          	.byte	0x00
 800851e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008522:	0728      	lsls	r0, r5, #28
 8008524:	d5c0      	bpl.n	80084a8 <_strtod_l+0x88>
 8008526:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800852a:	e7bd      	b.n	80084a8 <_strtod_l+0x88>
 800852c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008530:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008532:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008536:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800853a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800853e:	e7f0      	b.n	8008522 <_strtod_l+0x102>
 8008540:	f8df b180 	ldr.w	fp, [pc, #384]	; 80086c4 <_strtod_l+0x2a4>
 8008544:	e7ed      	b.n	8008522 <_strtod_l+0x102>
 8008546:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800854a:	f04f 3aff 	mov.w	sl, #4294967295
 800854e:	e7e8      	b.n	8008522 <_strtod_l+0x102>
 8008550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008552:	1c5a      	adds	r2, r3, #1
 8008554:	9217      	str	r2, [sp, #92]	; 0x5c
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	2b30      	cmp	r3, #48	; 0x30
 800855a:	d0f9      	beq.n	8008550 <_strtod_l+0x130>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d0a3      	beq.n	80084a8 <_strtod_l+0x88>
 8008560:	2301      	movs	r3, #1
 8008562:	f04f 0900 	mov.w	r9, #0
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800856a:	9308      	str	r3, [sp, #32]
 800856c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008570:	464f      	mov	r7, r9
 8008572:	220a      	movs	r2, #10
 8008574:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008576:	7806      	ldrb	r6, [r0, #0]
 8008578:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800857c:	b2d9      	uxtb	r1, r3
 800857e:	2909      	cmp	r1, #9
 8008580:	d92a      	bls.n	80085d8 <_strtod_l+0x1b8>
 8008582:	9905      	ldr	r1, [sp, #20]
 8008584:	462a      	mov	r2, r5
 8008586:	f003 f9be 	bl	800b906 <strncmp>
 800858a:	b398      	cbz	r0, 80085f4 <_strtod_l+0x1d4>
 800858c:	2000      	movs	r0, #0
 800858e:	4632      	mov	r2, r6
 8008590:	463d      	mov	r5, r7
 8008592:	9005      	str	r0, [sp, #20]
 8008594:	4603      	mov	r3, r0
 8008596:	2a65      	cmp	r2, #101	; 0x65
 8008598:	d001      	beq.n	800859e <_strtod_l+0x17e>
 800859a:	2a45      	cmp	r2, #69	; 0x45
 800859c:	d118      	bne.n	80085d0 <_strtod_l+0x1b0>
 800859e:	b91d      	cbnz	r5, 80085a8 <_strtod_l+0x188>
 80085a0:	9a04      	ldr	r2, [sp, #16]
 80085a2:	4302      	orrs	r2, r0
 80085a4:	d09e      	beq.n	80084e4 <_strtod_l+0xc4>
 80085a6:	2500      	movs	r5, #0
 80085a8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80085ac:	f108 0201 	add.w	r2, r8, #1
 80085b0:	9217      	str	r2, [sp, #92]	; 0x5c
 80085b2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80085b6:	2a2b      	cmp	r2, #43	; 0x2b
 80085b8:	d075      	beq.n	80086a6 <_strtod_l+0x286>
 80085ba:	2a2d      	cmp	r2, #45	; 0x2d
 80085bc:	d07b      	beq.n	80086b6 <_strtod_l+0x296>
 80085be:	f04f 0c00 	mov.w	ip, #0
 80085c2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80085c6:	2909      	cmp	r1, #9
 80085c8:	f240 8082 	bls.w	80086d0 <_strtod_l+0x2b0>
 80085cc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80085d0:	2600      	movs	r6, #0
 80085d2:	e09d      	b.n	8008710 <_strtod_l+0x2f0>
 80085d4:	2300      	movs	r3, #0
 80085d6:	e7c4      	b.n	8008562 <_strtod_l+0x142>
 80085d8:	2f08      	cmp	r7, #8
 80085da:	bfd8      	it	le
 80085dc:	9907      	ldrle	r1, [sp, #28]
 80085de:	f100 0001 	add.w	r0, r0, #1
 80085e2:	bfda      	itte	le
 80085e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80085e8:	9307      	strle	r3, [sp, #28]
 80085ea:	fb02 3909 	mlagt	r9, r2, r9, r3
 80085ee:	3701      	adds	r7, #1
 80085f0:	9017      	str	r0, [sp, #92]	; 0x5c
 80085f2:	e7bf      	b.n	8008574 <_strtod_l+0x154>
 80085f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085f6:	195a      	adds	r2, r3, r5
 80085f8:	9217      	str	r2, [sp, #92]	; 0x5c
 80085fa:	5d5a      	ldrb	r2, [r3, r5]
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	d037      	beq.n	8008670 <_strtod_l+0x250>
 8008600:	9005      	str	r0, [sp, #20]
 8008602:	463d      	mov	r5, r7
 8008604:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008608:	2b09      	cmp	r3, #9
 800860a:	d912      	bls.n	8008632 <_strtod_l+0x212>
 800860c:	2301      	movs	r3, #1
 800860e:	e7c2      	b.n	8008596 <_strtod_l+0x176>
 8008610:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	9217      	str	r2, [sp, #92]	; 0x5c
 8008616:	785a      	ldrb	r2, [r3, #1]
 8008618:	3001      	adds	r0, #1
 800861a:	2a30      	cmp	r2, #48	; 0x30
 800861c:	d0f8      	beq.n	8008610 <_strtod_l+0x1f0>
 800861e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008622:	2b08      	cmp	r3, #8
 8008624:	f200 84d9 	bhi.w	8008fda <_strtod_l+0xbba>
 8008628:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800862a:	9005      	str	r0, [sp, #20]
 800862c:	2000      	movs	r0, #0
 800862e:	9308      	str	r3, [sp, #32]
 8008630:	4605      	mov	r5, r0
 8008632:	3a30      	subs	r2, #48	; 0x30
 8008634:	f100 0301 	add.w	r3, r0, #1
 8008638:	d014      	beq.n	8008664 <_strtod_l+0x244>
 800863a:	9905      	ldr	r1, [sp, #20]
 800863c:	4419      	add	r1, r3
 800863e:	9105      	str	r1, [sp, #20]
 8008640:	462b      	mov	r3, r5
 8008642:	eb00 0e05 	add.w	lr, r0, r5
 8008646:	210a      	movs	r1, #10
 8008648:	4573      	cmp	r3, lr
 800864a:	d113      	bne.n	8008674 <_strtod_l+0x254>
 800864c:	182b      	adds	r3, r5, r0
 800864e:	2b08      	cmp	r3, #8
 8008650:	f105 0501 	add.w	r5, r5, #1
 8008654:	4405      	add	r5, r0
 8008656:	dc1c      	bgt.n	8008692 <_strtod_l+0x272>
 8008658:	9907      	ldr	r1, [sp, #28]
 800865a:	230a      	movs	r3, #10
 800865c:	fb03 2301 	mla	r3, r3, r1, r2
 8008660:	9307      	str	r3, [sp, #28]
 8008662:	2300      	movs	r3, #0
 8008664:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008666:	1c51      	adds	r1, r2, #1
 8008668:	9117      	str	r1, [sp, #92]	; 0x5c
 800866a:	7852      	ldrb	r2, [r2, #1]
 800866c:	4618      	mov	r0, r3
 800866e:	e7c9      	b.n	8008604 <_strtod_l+0x1e4>
 8008670:	4638      	mov	r0, r7
 8008672:	e7d2      	b.n	800861a <_strtod_l+0x1fa>
 8008674:	2b08      	cmp	r3, #8
 8008676:	dc04      	bgt.n	8008682 <_strtod_l+0x262>
 8008678:	9e07      	ldr	r6, [sp, #28]
 800867a:	434e      	muls	r6, r1
 800867c:	9607      	str	r6, [sp, #28]
 800867e:	3301      	adds	r3, #1
 8008680:	e7e2      	b.n	8008648 <_strtod_l+0x228>
 8008682:	f103 0c01 	add.w	ip, r3, #1
 8008686:	f1bc 0f10 	cmp.w	ip, #16
 800868a:	bfd8      	it	le
 800868c:	fb01 f909 	mulle.w	r9, r1, r9
 8008690:	e7f5      	b.n	800867e <_strtod_l+0x25e>
 8008692:	2d10      	cmp	r5, #16
 8008694:	bfdc      	itt	le
 8008696:	230a      	movle	r3, #10
 8008698:	fb03 2909 	mlale	r9, r3, r9, r2
 800869c:	e7e1      	b.n	8008662 <_strtod_l+0x242>
 800869e:	2300      	movs	r3, #0
 80086a0:	9305      	str	r3, [sp, #20]
 80086a2:	2301      	movs	r3, #1
 80086a4:	e77c      	b.n	80085a0 <_strtod_l+0x180>
 80086a6:	f04f 0c00 	mov.w	ip, #0
 80086aa:	f108 0202 	add.w	r2, r8, #2
 80086ae:	9217      	str	r2, [sp, #92]	; 0x5c
 80086b0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80086b4:	e785      	b.n	80085c2 <_strtod_l+0x1a2>
 80086b6:	f04f 0c01 	mov.w	ip, #1
 80086ba:	e7f6      	b.n	80086aa <_strtod_l+0x28a>
 80086bc:	0800c2cc 	.word	0x0800c2cc
 80086c0:	0800c020 	.word	0x0800c020
 80086c4:	7ff00000 	.word	0x7ff00000
 80086c8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086ca:	1c51      	adds	r1, r2, #1
 80086cc:	9117      	str	r1, [sp, #92]	; 0x5c
 80086ce:	7852      	ldrb	r2, [r2, #1]
 80086d0:	2a30      	cmp	r2, #48	; 0x30
 80086d2:	d0f9      	beq.n	80086c8 <_strtod_l+0x2a8>
 80086d4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80086d8:	2908      	cmp	r1, #8
 80086da:	f63f af79 	bhi.w	80085d0 <_strtod_l+0x1b0>
 80086de:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80086e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086e4:	9206      	str	r2, [sp, #24]
 80086e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80086e8:	1c51      	adds	r1, r2, #1
 80086ea:	9117      	str	r1, [sp, #92]	; 0x5c
 80086ec:	7852      	ldrb	r2, [r2, #1]
 80086ee:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80086f2:	2e09      	cmp	r6, #9
 80086f4:	d937      	bls.n	8008766 <_strtod_l+0x346>
 80086f6:	9e06      	ldr	r6, [sp, #24]
 80086f8:	1b89      	subs	r1, r1, r6
 80086fa:	2908      	cmp	r1, #8
 80086fc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008700:	dc02      	bgt.n	8008708 <_strtod_l+0x2e8>
 8008702:	4576      	cmp	r6, lr
 8008704:	bfa8      	it	ge
 8008706:	4676      	movge	r6, lr
 8008708:	f1bc 0f00 	cmp.w	ip, #0
 800870c:	d000      	beq.n	8008710 <_strtod_l+0x2f0>
 800870e:	4276      	negs	r6, r6
 8008710:	2d00      	cmp	r5, #0
 8008712:	d14d      	bne.n	80087b0 <_strtod_l+0x390>
 8008714:	9904      	ldr	r1, [sp, #16]
 8008716:	4301      	orrs	r1, r0
 8008718:	f47f aec6 	bne.w	80084a8 <_strtod_l+0x88>
 800871c:	2b00      	cmp	r3, #0
 800871e:	f47f aee1 	bne.w	80084e4 <_strtod_l+0xc4>
 8008722:	2a69      	cmp	r2, #105	; 0x69
 8008724:	d027      	beq.n	8008776 <_strtod_l+0x356>
 8008726:	dc24      	bgt.n	8008772 <_strtod_l+0x352>
 8008728:	2a49      	cmp	r2, #73	; 0x49
 800872a:	d024      	beq.n	8008776 <_strtod_l+0x356>
 800872c:	2a4e      	cmp	r2, #78	; 0x4e
 800872e:	f47f aed9 	bne.w	80084e4 <_strtod_l+0xc4>
 8008732:	499f      	ldr	r1, [pc, #636]	; (80089b0 <_strtod_l+0x590>)
 8008734:	a817      	add	r0, sp, #92	; 0x5c
 8008736:	f001 ff3d 	bl	800a5b4 <__match>
 800873a:	2800      	cmp	r0, #0
 800873c:	f43f aed2 	beq.w	80084e4 <_strtod_l+0xc4>
 8008740:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	2b28      	cmp	r3, #40	; 0x28
 8008746:	d12d      	bne.n	80087a4 <_strtod_l+0x384>
 8008748:	499a      	ldr	r1, [pc, #616]	; (80089b4 <_strtod_l+0x594>)
 800874a:	aa1a      	add	r2, sp, #104	; 0x68
 800874c:	a817      	add	r0, sp, #92	; 0x5c
 800874e:	f001 ff45 	bl	800a5dc <__hexnan>
 8008752:	2805      	cmp	r0, #5
 8008754:	d126      	bne.n	80087a4 <_strtod_l+0x384>
 8008756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008758:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800875c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008760:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008764:	e6a0      	b.n	80084a8 <_strtod_l+0x88>
 8008766:	210a      	movs	r1, #10
 8008768:	fb01 2e0e 	mla	lr, r1, lr, r2
 800876c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008770:	e7b9      	b.n	80086e6 <_strtod_l+0x2c6>
 8008772:	2a6e      	cmp	r2, #110	; 0x6e
 8008774:	e7db      	b.n	800872e <_strtod_l+0x30e>
 8008776:	4990      	ldr	r1, [pc, #576]	; (80089b8 <_strtod_l+0x598>)
 8008778:	a817      	add	r0, sp, #92	; 0x5c
 800877a:	f001 ff1b 	bl	800a5b4 <__match>
 800877e:	2800      	cmp	r0, #0
 8008780:	f43f aeb0 	beq.w	80084e4 <_strtod_l+0xc4>
 8008784:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008786:	498d      	ldr	r1, [pc, #564]	; (80089bc <_strtod_l+0x59c>)
 8008788:	3b01      	subs	r3, #1
 800878a:	a817      	add	r0, sp, #92	; 0x5c
 800878c:	9317      	str	r3, [sp, #92]	; 0x5c
 800878e:	f001 ff11 	bl	800a5b4 <__match>
 8008792:	b910      	cbnz	r0, 800879a <_strtod_l+0x37a>
 8008794:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008796:	3301      	adds	r3, #1
 8008798:	9317      	str	r3, [sp, #92]	; 0x5c
 800879a:	f8df b230 	ldr.w	fp, [pc, #560]	; 80089cc <_strtod_l+0x5ac>
 800879e:	f04f 0a00 	mov.w	sl, #0
 80087a2:	e681      	b.n	80084a8 <_strtod_l+0x88>
 80087a4:	4886      	ldr	r0, [pc, #536]	; (80089c0 <_strtod_l+0x5a0>)
 80087a6:	f003 f853 	bl	800b850 <nan>
 80087aa:	ec5b ab10 	vmov	sl, fp, d0
 80087ae:	e67b      	b.n	80084a8 <_strtod_l+0x88>
 80087b0:	9b05      	ldr	r3, [sp, #20]
 80087b2:	9807      	ldr	r0, [sp, #28]
 80087b4:	1af3      	subs	r3, r6, r3
 80087b6:	2f00      	cmp	r7, #0
 80087b8:	bf08      	it	eq
 80087ba:	462f      	moveq	r7, r5
 80087bc:	2d10      	cmp	r5, #16
 80087be:	9306      	str	r3, [sp, #24]
 80087c0:	46a8      	mov	r8, r5
 80087c2:	bfa8      	it	ge
 80087c4:	f04f 0810 	movge.w	r8, #16
 80087c8:	f7f7 fe9c 	bl	8000504 <__aeabi_ui2d>
 80087cc:	2d09      	cmp	r5, #9
 80087ce:	4682      	mov	sl, r0
 80087d0:	468b      	mov	fp, r1
 80087d2:	dd13      	ble.n	80087fc <_strtod_l+0x3dc>
 80087d4:	4b7b      	ldr	r3, [pc, #492]	; (80089c4 <_strtod_l+0x5a4>)
 80087d6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80087da:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	4682      	mov	sl, r0
 80087e4:	4648      	mov	r0, r9
 80087e6:	468b      	mov	fp, r1
 80087e8:	f7f7 fe8c 	bl	8000504 <__aeabi_ui2d>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f7 fd4a 	bl	800028c <__adddf3>
 80087f8:	4682      	mov	sl, r0
 80087fa:	468b      	mov	fp, r1
 80087fc:	2d0f      	cmp	r5, #15
 80087fe:	dc38      	bgt.n	8008872 <_strtod_l+0x452>
 8008800:	9b06      	ldr	r3, [sp, #24]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f43f ae50 	beq.w	80084a8 <_strtod_l+0x88>
 8008808:	dd24      	ble.n	8008854 <_strtod_l+0x434>
 800880a:	2b16      	cmp	r3, #22
 800880c:	dc0b      	bgt.n	8008826 <_strtod_l+0x406>
 800880e:	496d      	ldr	r1, [pc, #436]	; (80089c4 <_strtod_l+0x5a4>)
 8008810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008814:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008818:	4652      	mov	r2, sl
 800881a:	465b      	mov	r3, fp
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	4682      	mov	sl, r0
 8008822:	468b      	mov	fp, r1
 8008824:	e640      	b.n	80084a8 <_strtod_l+0x88>
 8008826:	9a06      	ldr	r2, [sp, #24]
 8008828:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800882c:	4293      	cmp	r3, r2
 800882e:	db20      	blt.n	8008872 <_strtod_l+0x452>
 8008830:	4c64      	ldr	r4, [pc, #400]	; (80089c4 <_strtod_l+0x5a4>)
 8008832:	f1c5 050f 	rsb	r5, r5, #15
 8008836:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800883a:	4652      	mov	r2, sl
 800883c:	465b      	mov	r3, fp
 800883e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008842:	f7f7 fed9 	bl	80005f8 <__aeabi_dmul>
 8008846:	9b06      	ldr	r3, [sp, #24]
 8008848:	1b5d      	subs	r5, r3, r5
 800884a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800884e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008852:	e7e3      	b.n	800881c <_strtod_l+0x3fc>
 8008854:	9b06      	ldr	r3, [sp, #24]
 8008856:	3316      	adds	r3, #22
 8008858:	db0b      	blt.n	8008872 <_strtod_l+0x452>
 800885a:	9b05      	ldr	r3, [sp, #20]
 800885c:	1b9e      	subs	r6, r3, r6
 800885e:	4b59      	ldr	r3, [pc, #356]	; (80089c4 <_strtod_l+0x5a4>)
 8008860:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008864:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008868:	4650      	mov	r0, sl
 800886a:	4659      	mov	r1, fp
 800886c:	f7f7 ffee 	bl	800084c <__aeabi_ddiv>
 8008870:	e7d6      	b.n	8008820 <_strtod_l+0x400>
 8008872:	9b06      	ldr	r3, [sp, #24]
 8008874:	eba5 0808 	sub.w	r8, r5, r8
 8008878:	4498      	add	r8, r3
 800887a:	f1b8 0f00 	cmp.w	r8, #0
 800887e:	dd74      	ble.n	800896a <_strtod_l+0x54a>
 8008880:	f018 030f 	ands.w	r3, r8, #15
 8008884:	d00a      	beq.n	800889c <_strtod_l+0x47c>
 8008886:	494f      	ldr	r1, [pc, #316]	; (80089c4 <_strtod_l+0x5a4>)
 8008888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800888c:	4652      	mov	r2, sl
 800888e:	465b      	mov	r3, fp
 8008890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	f038 080f 	bics.w	r8, r8, #15
 80088a0:	d04f      	beq.n	8008942 <_strtod_l+0x522>
 80088a2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80088a6:	dd22      	ble.n	80088ee <_strtod_l+0x4ce>
 80088a8:	2500      	movs	r5, #0
 80088aa:	462e      	mov	r6, r5
 80088ac:	9507      	str	r5, [sp, #28]
 80088ae:	9505      	str	r5, [sp, #20]
 80088b0:	2322      	movs	r3, #34	; 0x22
 80088b2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80089cc <_strtod_l+0x5ac>
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	f04f 0a00 	mov.w	sl, #0
 80088bc:	9b07      	ldr	r3, [sp, #28]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f43f adf2 	beq.w	80084a8 <_strtod_l+0x88>
 80088c4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80088c6:	4620      	mov	r0, r4
 80088c8:	f001 ff94 	bl	800a7f4 <_Bfree>
 80088cc:	9905      	ldr	r1, [sp, #20]
 80088ce:	4620      	mov	r0, r4
 80088d0:	f001 ff90 	bl	800a7f4 <_Bfree>
 80088d4:	4631      	mov	r1, r6
 80088d6:	4620      	mov	r0, r4
 80088d8:	f001 ff8c 	bl	800a7f4 <_Bfree>
 80088dc:	9907      	ldr	r1, [sp, #28]
 80088de:	4620      	mov	r0, r4
 80088e0:	f001 ff88 	bl	800a7f4 <_Bfree>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4620      	mov	r0, r4
 80088e8:	f001 ff84 	bl	800a7f4 <_Bfree>
 80088ec:	e5dc      	b.n	80084a8 <_strtod_l+0x88>
 80088ee:	4b36      	ldr	r3, [pc, #216]	; (80089c8 <_strtod_l+0x5a8>)
 80088f0:	9304      	str	r3, [sp, #16]
 80088f2:	2300      	movs	r3, #0
 80088f4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80088f8:	4650      	mov	r0, sl
 80088fa:	4659      	mov	r1, fp
 80088fc:	4699      	mov	r9, r3
 80088fe:	f1b8 0f01 	cmp.w	r8, #1
 8008902:	dc21      	bgt.n	8008948 <_strtod_l+0x528>
 8008904:	b10b      	cbz	r3, 800890a <_strtod_l+0x4ea>
 8008906:	4682      	mov	sl, r0
 8008908:	468b      	mov	fp, r1
 800890a:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <_strtod_l+0x5a8>)
 800890c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008910:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008914:	4652      	mov	r2, sl
 8008916:	465b      	mov	r3, fp
 8008918:	e9d9 0100 	ldrd	r0, r1, [r9]
 800891c:	f7f7 fe6c 	bl	80005f8 <__aeabi_dmul>
 8008920:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <_strtod_l+0x5ac>)
 8008922:	460a      	mov	r2, r1
 8008924:	400b      	ands	r3, r1
 8008926:	492a      	ldr	r1, [pc, #168]	; (80089d0 <_strtod_l+0x5b0>)
 8008928:	428b      	cmp	r3, r1
 800892a:	4682      	mov	sl, r0
 800892c:	d8bc      	bhi.n	80088a8 <_strtod_l+0x488>
 800892e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008932:	428b      	cmp	r3, r1
 8008934:	bf86      	itte	hi
 8008936:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80089d4 <_strtod_l+0x5b4>
 800893a:	f04f 3aff 	movhi.w	sl, #4294967295
 800893e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008942:	2300      	movs	r3, #0
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	e084      	b.n	8008a52 <_strtod_l+0x632>
 8008948:	f018 0f01 	tst.w	r8, #1
 800894c:	d005      	beq.n	800895a <_strtod_l+0x53a>
 800894e:	9b04      	ldr	r3, [sp, #16]
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fe50 	bl	80005f8 <__aeabi_dmul>
 8008958:	2301      	movs	r3, #1
 800895a:	9a04      	ldr	r2, [sp, #16]
 800895c:	3208      	adds	r2, #8
 800895e:	f109 0901 	add.w	r9, r9, #1
 8008962:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008966:	9204      	str	r2, [sp, #16]
 8008968:	e7c9      	b.n	80088fe <_strtod_l+0x4de>
 800896a:	d0ea      	beq.n	8008942 <_strtod_l+0x522>
 800896c:	f1c8 0800 	rsb	r8, r8, #0
 8008970:	f018 020f 	ands.w	r2, r8, #15
 8008974:	d00a      	beq.n	800898c <_strtod_l+0x56c>
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <_strtod_l+0x5a4>)
 8008978:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897c:	4650      	mov	r0, sl
 800897e:	4659      	mov	r1, fp
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 ff62 	bl	800084c <__aeabi_ddiv>
 8008988:	4682      	mov	sl, r0
 800898a:	468b      	mov	fp, r1
 800898c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008990:	d0d7      	beq.n	8008942 <_strtod_l+0x522>
 8008992:	f1b8 0f1f 	cmp.w	r8, #31
 8008996:	dd1f      	ble.n	80089d8 <_strtod_l+0x5b8>
 8008998:	2500      	movs	r5, #0
 800899a:	462e      	mov	r6, r5
 800899c:	9507      	str	r5, [sp, #28]
 800899e:	9505      	str	r5, [sp, #20]
 80089a0:	2322      	movs	r3, #34	; 0x22
 80089a2:	f04f 0a00 	mov.w	sl, #0
 80089a6:	f04f 0b00 	mov.w	fp, #0
 80089aa:	6023      	str	r3, [r4, #0]
 80089ac:	e786      	b.n	80088bc <_strtod_l+0x49c>
 80089ae:	bf00      	nop
 80089b0:	0800bff1 	.word	0x0800bff1
 80089b4:	0800c034 	.word	0x0800c034
 80089b8:	0800bfe9 	.word	0x0800bfe9
 80089bc:	0800c174 	.word	0x0800c174
 80089c0:	0800c488 	.word	0x0800c488
 80089c4:	0800c368 	.word	0x0800c368
 80089c8:	0800c340 	.word	0x0800c340
 80089cc:	7ff00000 	.word	0x7ff00000
 80089d0:	7ca00000 	.word	0x7ca00000
 80089d4:	7fefffff 	.word	0x7fefffff
 80089d8:	f018 0310 	ands.w	r3, r8, #16
 80089dc:	bf18      	it	ne
 80089de:	236a      	movne	r3, #106	; 0x6a
 80089e0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008d90 <_strtod_l+0x970>
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	4650      	mov	r0, sl
 80089e8:	4659      	mov	r1, fp
 80089ea:	2300      	movs	r3, #0
 80089ec:	f018 0f01 	tst.w	r8, #1
 80089f0:	d004      	beq.n	80089fc <_strtod_l+0x5dc>
 80089f2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	2301      	movs	r3, #1
 80089fc:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008a00:	f109 0908 	add.w	r9, r9, #8
 8008a04:	d1f2      	bne.n	80089ec <_strtod_l+0x5cc>
 8008a06:	b10b      	cbz	r3, 8008a0c <_strtod_l+0x5ec>
 8008a08:	4682      	mov	sl, r0
 8008a0a:	468b      	mov	fp, r1
 8008a0c:	9b04      	ldr	r3, [sp, #16]
 8008a0e:	b1c3      	cbz	r3, 8008a42 <_strtod_l+0x622>
 8008a10:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a14:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	4659      	mov	r1, fp
 8008a1c:	dd11      	ble.n	8008a42 <_strtod_l+0x622>
 8008a1e:	2b1f      	cmp	r3, #31
 8008a20:	f340 8124 	ble.w	8008c6c <_strtod_l+0x84c>
 8008a24:	2b34      	cmp	r3, #52	; 0x34
 8008a26:	bfde      	ittt	le
 8008a28:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008a2c:	f04f 33ff 	movle.w	r3, #4294967295
 8008a30:	fa03 f202 	lslle.w	r2, r3, r2
 8008a34:	f04f 0a00 	mov.w	sl, #0
 8008a38:	bfcc      	ite	gt
 8008a3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008a3e:	ea02 0b01 	andle.w	fp, r2, r1
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	4650      	mov	r0, sl
 8008a48:	4659      	mov	r1, fp
 8008a4a:	f7f8 f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4e:	2800      	cmp	r0, #0
 8008a50:	d1a2      	bne.n	8008998 <_strtod_l+0x578>
 8008a52:	9b07      	ldr	r3, [sp, #28]
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	9908      	ldr	r1, [sp, #32]
 8008a58:	462b      	mov	r3, r5
 8008a5a:	463a      	mov	r2, r7
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f001 ff31 	bl	800a8c4 <__s2b>
 8008a62:	9007      	str	r0, [sp, #28]
 8008a64:	2800      	cmp	r0, #0
 8008a66:	f43f af1f 	beq.w	80088a8 <_strtod_l+0x488>
 8008a6a:	9b05      	ldr	r3, [sp, #20]
 8008a6c:	1b9e      	subs	r6, r3, r6
 8008a6e:	9b06      	ldr	r3, [sp, #24]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfb4      	ite	lt
 8008a74:	4633      	movlt	r3, r6
 8008a76:	2300      	movge	r3, #0
 8008a78:	930c      	str	r3, [sp, #48]	; 0x30
 8008a7a:	9b06      	ldr	r3, [sp, #24]
 8008a7c:	2500      	movs	r5, #0
 8008a7e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a82:	9312      	str	r3, [sp, #72]	; 0x48
 8008a84:	462e      	mov	r6, r5
 8008a86:	9b07      	ldr	r3, [sp, #28]
 8008a88:	4620      	mov	r0, r4
 8008a8a:	6859      	ldr	r1, [r3, #4]
 8008a8c:	f001 fe72 	bl	800a774 <_Balloc>
 8008a90:	9005      	str	r0, [sp, #20]
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f43f af0c 	beq.w	80088b0 <_strtod_l+0x490>
 8008a98:	9b07      	ldr	r3, [sp, #28]
 8008a9a:	691a      	ldr	r2, [r3, #16]
 8008a9c:	3202      	adds	r2, #2
 8008a9e:	f103 010c 	add.w	r1, r3, #12
 8008aa2:	0092      	lsls	r2, r2, #2
 8008aa4:	300c      	adds	r0, #12
 8008aa6:	f001 fe57 	bl	800a758 <memcpy>
 8008aaa:	ec4b ab10 	vmov	d0, sl, fp
 8008aae:	aa1a      	add	r2, sp, #104	; 0x68
 8008ab0:	a919      	add	r1, sp, #100	; 0x64
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	f002 fa4c 	bl	800af50 <__d2b>
 8008ab8:	ec4b ab18 	vmov	d8, sl, fp
 8008abc:	9018      	str	r0, [sp, #96]	; 0x60
 8008abe:	2800      	cmp	r0, #0
 8008ac0:	f43f aef6 	beq.w	80088b0 <_strtod_l+0x490>
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f001 ff96 	bl	800a9f8 <__i2b>
 8008acc:	4606      	mov	r6, r0
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f aeee 	beq.w	80088b0 <_strtod_l+0x490>
 8008ad4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008ad6:	9904      	ldr	r1, [sp, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	bfab      	itete	ge
 8008adc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008ade:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008ae0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008ae2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008ae6:	bfac      	ite	ge
 8008ae8:	eb03 0902 	addge.w	r9, r3, r2
 8008aec:	1ad7      	sublt	r7, r2, r3
 8008aee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008af0:	eba3 0801 	sub.w	r8, r3, r1
 8008af4:	4490      	add	r8, r2
 8008af6:	4ba1      	ldr	r3, [pc, #644]	; (8008d7c <_strtod_l+0x95c>)
 8008af8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008afc:	4598      	cmp	r8, r3
 8008afe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008b02:	f280 80c7 	bge.w	8008c94 <_strtod_l+0x874>
 8008b06:	eba3 0308 	sub.w	r3, r3, r8
 8008b0a:	2b1f      	cmp	r3, #31
 8008b0c:	eba2 0203 	sub.w	r2, r2, r3
 8008b10:	f04f 0101 	mov.w	r1, #1
 8008b14:	f300 80b1 	bgt.w	8008c7a <_strtod_l+0x85a>
 8008b18:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8008b1e:	2300      	movs	r3, #0
 8008b20:	9308      	str	r3, [sp, #32]
 8008b22:	eb09 0802 	add.w	r8, r9, r2
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	45c1      	cmp	r9, r8
 8008b2a:	4417      	add	r7, r2
 8008b2c:	441f      	add	r7, r3
 8008b2e:	464b      	mov	r3, r9
 8008b30:	bfa8      	it	ge
 8008b32:	4643      	movge	r3, r8
 8008b34:	42bb      	cmp	r3, r7
 8008b36:	bfa8      	it	ge
 8008b38:	463b      	movge	r3, r7
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bfc2      	ittt	gt
 8008b3e:	eba8 0803 	subgt.w	r8, r8, r3
 8008b42:	1aff      	subgt	r7, r7, r3
 8008b44:	eba9 0903 	subgt.w	r9, r9, r3
 8008b48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dd17      	ble.n	8008b7e <_strtod_l+0x75e>
 8008b4e:	4631      	mov	r1, r6
 8008b50:	461a      	mov	r2, r3
 8008b52:	4620      	mov	r0, r4
 8008b54:	f002 f810 	bl	800ab78 <__pow5mult>
 8008b58:	4606      	mov	r6, r0
 8008b5a:	2800      	cmp	r0, #0
 8008b5c:	f43f aea8 	beq.w	80088b0 <_strtod_l+0x490>
 8008b60:	4601      	mov	r1, r0
 8008b62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b64:	4620      	mov	r0, r4
 8008b66:	f001 ff5d 	bl	800aa24 <__multiply>
 8008b6a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f43f ae9f 	beq.w	80088b0 <_strtod_l+0x490>
 8008b72:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b74:	4620      	mov	r0, r4
 8008b76:	f001 fe3d 	bl	800a7f4 <_Bfree>
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	9318      	str	r3, [sp, #96]	; 0x60
 8008b7e:	f1b8 0f00 	cmp.w	r8, #0
 8008b82:	f300 808c 	bgt.w	8008c9e <_strtod_l+0x87e>
 8008b86:	9b06      	ldr	r3, [sp, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	dd08      	ble.n	8008b9e <_strtod_l+0x77e>
 8008b8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b8e:	9905      	ldr	r1, [sp, #20]
 8008b90:	4620      	mov	r0, r4
 8008b92:	f001 fff1 	bl	800ab78 <__pow5mult>
 8008b96:	9005      	str	r0, [sp, #20]
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	f43f ae89 	beq.w	80088b0 <_strtod_l+0x490>
 8008b9e:	2f00      	cmp	r7, #0
 8008ba0:	dd08      	ble.n	8008bb4 <_strtod_l+0x794>
 8008ba2:	9905      	ldr	r1, [sp, #20]
 8008ba4:	463a      	mov	r2, r7
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f002 f840 	bl	800ac2c <__lshift>
 8008bac:	9005      	str	r0, [sp, #20]
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f ae7e 	beq.w	80088b0 <_strtod_l+0x490>
 8008bb4:	f1b9 0f00 	cmp.w	r9, #0
 8008bb8:	dd08      	ble.n	8008bcc <_strtod_l+0x7ac>
 8008bba:	4631      	mov	r1, r6
 8008bbc:	464a      	mov	r2, r9
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f002 f834 	bl	800ac2c <__lshift>
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	f43f ae72 	beq.w	80088b0 <_strtod_l+0x490>
 8008bcc:	9a05      	ldr	r2, [sp, #20]
 8008bce:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bd0:	4620      	mov	r0, r4
 8008bd2:	f002 f8b7 	bl	800ad44 <__mdiff>
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f43f ae69 	beq.w	80088b0 <_strtod_l+0x490>
 8008bde:	68c3      	ldr	r3, [r0, #12]
 8008be0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008be2:	2300      	movs	r3, #0
 8008be4:	60c3      	str	r3, [r0, #12]
 8008be6:	4631      	mov	r1, r6
 8008be8:	f002 f890 	bl	800ad0c <__mcmp>
 8008bec:	2800      	cmp	r0, #0
 8008bee:	da60      	bge.n	8008cb2 <_strtod_l+0x892>
 8008bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bf2:	ea53 030a 	orrs.w	r3, r3, sl
 8008bf6:	f040 8082 	bne.w	8008cfe <_strtod_l+0x8de>
 8008bfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d17d      	bne.n	8008cfe <_strtod_l+0x8de>
 8008c02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008c06:	0d1b      	lsrs	r3, r3, #20
 8008c08:	051b      	lsls	r3, r3, #20
 8008c0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008c0e:	d976      	bls.n	8008cfe <_strtod_l+0x8de>
 8008c10:	696b      	ldr	r3, [r5, #20]
 8008c12:	b913      	cbnz	r3, 8008c1a <_strtod_l+0x7fa>
 8008c14:	692b      	ldr	r3, [r5, #16]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	dd71      	ble.n	8008cfe <_strtod_l+0x8de>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	2201      	movs	r2, #1
 8008c1e:	4620      	mov	r0, r4
 8008c20:	f002 f804 	bl	800ac2c <__lshift>
 8008c24:	4631      	mov	r1, r6
 8008c26:	4605      	mov	r5, r0
 8008c28:	f002 f870 	bl	800ad0c <__mcmp>
 8008c2c:	2800      	cmp	r0, #0
 8008c2e:	dd66      	ble.n	8008cfe <_strtod_l+0x8de>
 8008c30:	9904      	ldr	r1, [sp, #16]
 8008c32:	4a53      	ldr	r2, [pc, #332]	; (8008d80 <_strtod_l+0x960>)
 8008c34:	465b      	mov	r3, fp
 8008c36:	2900      	cmp	r1, #0
 8008c38:	f000 8081 	beq.w	8008d3e <_strtod_l+0x91e>
 8008c3c:	ea02 010b 	and.w	r1, r2, fp
 8008c40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008c44:	dc7b      	bgt.n	8008d3e <_strtod_l+0x91e>
 8008c46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008c4a:	f77f aea9 	ble.w	80089a0 <_strtod_l+0x580>
 8008c4e:	4b4d      	ldr	r3, [pc, #308]	; (8008d84 <_strtod_l+0x964>)
 8008c50:	4650      	mov	r0, sl
 8008c52:	4659      	mov	r1, fp
 8008c54:	2200      	movs	r2, #0
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4303      	orrs	r3, r0
 8008c5e:	bf08      	it	eq
 8008c60:	2322      	moveq	r3, #34	; 0x22
 8008c62:	4682      	mov	sl, r0
 8008c64:	468b      	mov	fp, r1
 8008c66:	bf08      	it	eq
 8008c68:	6023      	streq	r3, [r4, #0]
 8008c6a:	e62b      	b.n	80088c4 <_strtod_l+0x4a4>
 8008c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	ea03 0a0a 	and.w	sl, r3, sl
 8008c78:	e6e3      	b.n	8008a42 <_strtod_l+0x622>
 8008c7a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c7e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c82:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c86:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c8a:	fa01 f308 	lsl.w	r3, r1, r8
 8008c8e:	9308      	str	r3, [sp, #32]
 8008c90:	910d      	str	r1, [sp, #52]	; 0x34
 8008c92:	e746      	b.n	8008b22 <_strtod_l+0x702>
 8008c94:	2300      	movs	r3, #0
 8008c96:	9308      	str	r3, [sp, #32]
 8008c98:	2301      	movs	r3, #1
 8008c9a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c9c:	e741      	b.n	8008b22 <_strtod_l+0x702>
 8008c9e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	4620      	mov	r0, r4
 8008ca4:	f001 ffc2 	bl	800ac2c <__lshift>
 8008ca8:	9018      	str	r0, [sp, #96]	; 0x60
 8008caa:	2800      	cmp	r0, #0
 8008cac:	f47f af6b 	bne.w	8008b86 <_strtod_l+0x766>
 8008cb0:	e5fe      	b.n	80088b0 <_strtod_l+0x490>
 8008cb2:	465f      	mov	r7, fp
 8008cb4:	d16e      	bne.n	8008d94 <_strtod_l+0x974>
 8008cb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008cb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008cbc:	b342      	cbz	r2, 8008d10 <_strtod_l+0x8f0>
 8008cbe:	4a32      	ldr	r2, [pc, #200]	; (8008d88 <_strtod_l+0x968>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d128      	bne.n	8008d16 <_strtod_l+0x8f6>
 8008cc4:	9b04      	ldr	r3, [sp, #16]
 8008cc6:	4651      	mov	r1, sl
 8008cc8:	b1eb      	cbz	r3, 8008d06 <_strtod_l+0x8e6>
 8008cca:	4b2d      	ldr	r3, [pc, #180]	; (8008d80 <_strtod_l+0x960>)
 8008ccc:	403b      	ands	r3, r7
 8008cce:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd6:	d819      	bhi.n	8008d0c <_strtod_l+0x8ec>
 8008cd8:	0d1b      	lsrs	r3, r3, #20
 8008cda:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d117      	bne.n	8008d16 <_strtod_l+0x8f6>
 8008ce6:	4b29      	ldr	r3, [pc, #164]	; (8008d8c <_strtod_l+0x96c>)
 8008ce8:	429f      	cmp	r7, r3
 8008cea:	d102      	bne.n	8008cf2 <_strtod_l+0x8d2>
 8008cec:	3101      	adds	r1, #1
 8008cee:	f43f addf 	beq.w	80088b0 <_strtod_l+0x490>
 8008cf2:	4b23      	ldr	r3, [pc, #140]	; (8008d80 <_strtod_l+0x960>)
 8008cf4:	403b      	ands	r3, r7
 8008cf6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008cfa:	f04f 0a00 	mov.w	sl, #0
 8008cfe:	9b04      	ldr	r3, [sp, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1a4      	bne.n	8008c4e <_strtod_l+0x82e>
 8008d04:	e5de      	b.n	80088c4 <_strtod_l+0x4a4>
 8008d06:	f04f 33ff 	mov.w	r3, #4294967295
 8008d0a:	e7ea      	b.n	8008ce2 <_strtod_l+0x8c2>
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	e7e8      	b.n	8008ce2 <_strtod_l+0x8c2>
 8008d10:	ea53 030a 	orrs.w	r3, r3, sl
 8008d14:	d08c      	beq.n	8008c30 <_strtod_l+0x810>
 8008d16:	9b08      	ldr	r3, [sp, #32]
 8008d18:	b1db      	cbz	r3, 8008d52 <_strtod_l+0x932>
 8008d1a:	423b      	tst	r3, r7
 8008d1c:	d0ef      	beq.n	8008cfe <_strtod_l+0x8de>
 8008d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	4650      	mov	r0, sl
 8008d24:	4659      	mov	r1, fp
 8008d26:	b1c3      	cbz	r3, 8008d5a <_strtod_l+0x93a>
 8008d28:	f7ff fb5e 	bl	80083e8 <sulp>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	460b      	mov	r3, r1
 8008d30:	ec51 0b18 	vmov	r0, r1, d8
 8008d34:	f7f7 faaa 	bl	800028c <__adddf3>
 8008d38:	4682      	mov	sl, r0
 8008d3a:	468b      	mov	fp, r1
 8008d3c:	e7df      	b.n	8008cfe <_strtod_l+0x8de>
 8008d3e:	4013      	ands	r3, r2
 8008d40:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008d44:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d48:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d4c:	f04f 3aff 	mov.w	sl, #4294967295
 8008d50:	e7d5      	b.n	8008cfe <_strtod_l+0x8de>
 8008d52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d54:	ea13 0f0a 	tst.w	r3, sl
 8008d58:	e7e0      	b.n	8008d1c <_strtod_l+0x8fc>
 8008d5a:	f7ff fb45 	bl	80083e8 <sulp>
 8008d5e:	4602      	mov	r2, r0
 8008d60:	460b      	mov	r3, r1
 8008d62:	ec51 0b18 	vmov	r0, r1, d8
 8008d66:	f7f7 fa8f 	bl	8000288 <__aeabi_dsub>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4682      	mov	sl, r0
 8008d70:	468b      	mov	fp, r1
 8008d72:	f7f7 fea9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0c1      	beq.n	8008cfe <_strtod_l+0x8de>
 8008d7a:	e611      	b.n	80089a0 <_strtod_l+0x580>
 8008d7c:	fffffc02 	.word	0xfffffc02
 8008d80:	7ff00000 	.word	0x7ff00000
 8008d84:	39500000 	.word	0x39500000
 8008d88:	000fffff 	.word	0x000fffff
 8008d8c:	7fefffff 	.word	0x7fefffff
 8008d90:	0800c048 	.word	0x0800c048
 8008d94:	4631      	mov	r1, r6
 8008d96:	4628      	mov	r0, r5
 8008d98:	f002 f936 	bl	800b008 <__ratio>
 8008d9c:	ec59 8b10 	vmov	r8, r9, d0
 8008da0:	ee10 0a10 	vmov	r0, s0
 8008da4:	2200      	movs	r2, #0
 8008da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008daa:	4649      	mov	r1, r9
 8008dac:	f7f7 fea0 	bl	8000af0 <__aeabi_dcmple>
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d07a      	beq.n	8008eaa <_strtod_l+0xa8a>
 8008db4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d04a      	beq.n	8008e50 <_strtod_l+0xa30>
 8008dba:	4b95      	ldr	r3, [pc, #596]	; (8009010 <_strtod_l+0xbf0>)
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008dc2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009010 <_strtod_l+0xbf0>
 8008dc6:	f04f 0800 	mov.w	r8, #0
 8008dca:	4b92      	ldr	r3, [pc, #584]	; (8009014 <_strtod_l+0xbf4>)
 8008dcc:	403b      	ands	r3, r7
 8008dce:	930d      	str	r3, [sp, #52]	; 0x34
 8008dd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008dd2:	4b91      	ldr	r3, [pc, #580]	; (8009018 <_strtod_l+0xbf8>)
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	f040 80b0 	bne.w	8008f3a <_strtod_l+0xb1a>
 8008dda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008dde:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008de2:	ec4b ab10 	vmov	d0, sl, fp
 8008de6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dea:	f002 f835 	bl	800ae58 <__ulp>
 8008dee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008df2:	ec53 2b10 	vmov	r2, r3, d0
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	4652      	mov	r2, sl
 8008dfc:	465b      	mov	r3, fp
 8008dfe:	f7f7 fa45 	bl	800028c <__adddf3>
 8008e02:	460b      	mov	r3, r1
 8008e04:	4983      	ldr	r1, [pc, #524]	; (8009014 <_strtod_l+0xbf4>)
 8008e06:	4a85      	ldr	r2, [pc, #532]	; (800901c <_strtod_l+0xbfc>)
 8008e08:	4019      	ands	r1, r3
 8008e0a:	4291      	cmp	r1, r2
 8008e0c:	4682      	mov	sl, r0
 8008e0e:	d960      	bls.n	8008ed2 <_strtod_l+0xab2>
 8008e10:	ee18 3a90 	vmov	r3, s17
 8008e14:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d104      	bne.n	8008e26 <_strtod_l+0xa06>
 8008e1c:	ee18 3a10 	vmov	r3, s16
 8008e20:	3301      	adds	r3, #1
 8008e22:	f43f ad45 	beq.w	80088b0 <_strtod_l+0x490>
 8008e26:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009028 <_strtod_l+0xc08>
 8008e2a:	f04f 3aff 	mov.w	sl, #4294967295
 8008e2e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e30:	4620      	mov	r0, r4
 8008e32:	f001 fcdf 	bl	800a7f4 <_Bfree>
 8008e36:	9905      	ldr	r1, [sp, #20]
 8008e38:	4620      	mov	r0, r4
 8008e3a:	f001 fcdb 	bl	800a7f4 <_Bfree>
 8008e3e:	4631      	mov	r1, r6
 8008e40:	4620      	mov	r0, r4
 8008e42:	f001 fcd7 	bl	800a7f4 <_Bfree>
 8008e46:	4629      	mov	r1, r5
 8008e48:	4620      	mov	r0, r4
 8008e4a:	f001 fcd3 	bl	800a7f4 <_Bfree>
 8008e4e:	e61a      	b.n	8008a86 <_strtod_l+0x666>
 8008e50:	f1ba 0f00 	cmp.w	sl, #0
 8008e54:	d11b      	bne.n	8008e8e <_strtod_l+0xa6e>
 8008e56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e5a:	b9f3      	cbnz	r3, 8008e9a <_strtod_l+0xa7a>
 8008e5c:	4b6c      	ldr	r3, [pc, #432]	; (8009010 <_strtod_l+0xbf0>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4640      	mov	r0, r8
 8008e62:	4649      	mov	r1, r9
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	b9d0      	cbnz	r0, 8008ea0 <_strtod_l+0xa80>
 8008e6a:	4640      	mov	r0, r8
 8008e6c:	4649      	mov	r1, r9
 8008e6e:	4b6c      	ldr	r3, [pc, #432]	; (8009020 <_strtod_l+0xc00>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	f7f7 fbc1 	bl	80005f8 <__aeabi_dmul>
 8008e76:	4680      	mov	r8, r0
 8008e78:	4689      	mov	r9, r1
 8008e7a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e7e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008e82:	9315      	str	r3, [sp, #84]	; 0x54
 8008e84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e8c:	e79d      	b.n	8008dca <_strtod_l+0x9aa>
 8008e8e:	f1ba 0f01 	cmp.w	sl, #1
 8008e92:	d102      	bne.n	8008e9a <_strtod_l+0xa7a>
 8008e94:	2f00      	cmp	r7, #0
 8008e96:	f43f ad83 	beq.w	80089a0 <_strtod_l+0x580>
 8008e9a:	4b62      	ldr	r3, [pc, #392]	; (8009024 <_strtod_l+0xc04>)
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	e78e      	b.n	8008dbe <_strtod_l+0x99e>
 8008ea0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009020 <_strtod_l+0xc00>
 8008ea4:	f04f 0800 	mov.w	r8, #0
 8008ea8:	e7e7      	b.n	8008e7a <_strtod_l+0xa5a>
 8008eaa:	4b5d      	ldr	r3, [pc, #372]	; (8009020 <_strtod_l+0xc00>)
 8008eac:	4640      	mov	r0, r8
 8008eae:	4649      	mov	r1, r9
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f7f7 fba1 	bl	80005f8 <__aeabi_dmul>
 8008eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eb8:	4680      	mov	r8, r0
 8008eba:	4689      	mov	r9, r1
 8008ebc:	b933      	cbnz	r3, 8008ecc <_strtod_l+0xaac>
 8008ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ec2:	900e      	str	r0, [sp, #56]	; 0x38
 8008ec4:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ec6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008eca:	e7dd      	b.n	8008e88 <_strtod_l+0xa68>
 8008ecc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008ed0:	e7f9      	b.n	8008ec6 <_strtod_l+0xaa6>
 8008ed2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ed6:	9b04      	ldr	r3, [sp, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1a8      	bne.n	8008e2e <_strtod_l+0xa0e>
 8008edc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008ee0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ee2:	0d1b      	lsrs	r3, r3, #20
 8008ee4:	051b      	lsls	r3, r3, #20
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d1a1      	bne.n	8008e2e <_strtod_l+0xa0e>
 8008eea:	4640      	mov	r0, r8
 8008eec:	4649      	mov	r1, r9
 8008eee:	f7f7 fee3 	bl	8000cb8 <__aeabi_d2lz>
 8008ef2:	f7f7 fb53 	bl	800059c <__aeabi_l2d>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	460b      	mov	r3, r1
 8008efa:	4640      	mov	r0, r8
 8008efc:	4649      	mov	r1, r9
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008f04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f08:	ea43 030a 	orr.w	r3, r3, sl
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	4680      	mov	r8, r0
 8008f10:	4689      	mov	r9, r1
 8008f12:	d055      	beq.n	8008fc0 <_strtod_l+0xba0>
 8008f14:	a336      	add	r3, pc, #216	; (adr r3, 8008ff0 <_strtod_l+0xbd0>)
 8008f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1a:	f7f7 fddf 	bl	8000adc <__aeabi_dcmplt>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	f47f acd0 	bne.w	80088c4 <_strtod_l+0x4a4>
 8008f24:	a334      	add	r3, pc, #208	; (adr r3, 8008ff8 <_strtod_l+0xbd8>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 fdf3 	bl	8000b18 <__aeabi_dcmpgt>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	f43f af7b 	beq.w	8008e2e <_strtod_l+0xa0e>
 8008f38:	e4c4      	b.n	80088c4 <_strtod_l+0x4a4>
 8008f3a:	9b04      	ldr	r3, [sp, #16]
 8008f3c:	b333      	cbz	r3, 8008f8c <_strtod_l+0xb6c>
 8008f3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f40:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008f44:	d822      	bhi.n	8008f8c <_strtod_l+0xb6c>
 8008f46:	a32e      	add	r3, pc, #184	; (adr r3, 8009000 <_strtod_l+0xbe0>)
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	4640      	mov	r0, r8
 8008f4e:	4649      	mov	r1, r9
 8008f50:	f7f7 fdce 	bl	8000af0 <__aeabi_dcmple>
 8008f54:	b1a0      	cbz	r0, 8008f80 <_strtod_l+0xb60>
 8008f56:	4649      	mov	r1, r9
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f7f7 fe25 	bl	8000ba8 <__aeabi_d2uiz>
 8008f5e:	2801      	cmp	r0, #1
 8008f60:	bf38      	it	cc
 8008f62:	2001      	movcc	r0, #1
 8008f64:	f7f7 face 	bl	8000504 <__aeabi_ui2d>
 8008f68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	bb23      	cbnz	r3, 8008fba <_strtod_l+0xb9a>
 8008f70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f74:	9010      	str	r0, [sp, #64]	; 0x40
 8008f76:	9311      	str	r3, [sp, #68]	; 0x44
 8008f78:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f82:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f84:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f88:	1a9b      	subs	r3, r3, r2
 8008f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f90:	eeb0 0a48 	vmov.f32	s0, s16
 8008f94:	eef0 0a68 	vmov.f32	s1, s17
 8008f98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f9c:	f001 ff5c 	bl	800ae58 <__ulp>
 8008fa0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008fa4:	ec53 2b10 	vmov	r2, r3, d0
 8008fa8:	f7f7 fb26 	bl	80005f8 <__aeabi_dmul>
 8008fac:	ec53 2b18 	vmov	r2, r3, d8
 8008fb0:	f7f7 f96c 	bl	800028c <__adddf3>
 8008fb4:	4682      	mov	sl, r0
 8008fb6:	468b      	mov	fp, r1
 8008fb8:	e78d      	b.n	8008ed6 <_strtod_l+0xab6>
 8008fba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008fbe:	e7db      	b.n	8008f78 <_strtod_l+0xb58>
 8008fc0:	a311      	add	r3, pc, #68	; (adr r3, 8009008 <_strtod_l+0xbe8>)
 8008fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc6:	f7f7 fd89 	bl	8000adc <__aeabi_dcmplt>
 8008fca:	e7b2      	b.n	8008f32 <_strtod_l+0xb12>
 8008fcc:	2300      	movs	r3, #0
 8008fce:	930a      	str	r3, [sp, #40]	; 0x28
 8008fd0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008fd2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	f7ff ba6b 	b.w	80084b0 <_strtod_l+0x90>
 8008fda:	2a65      	cmp	r2, #101	; 0x65
 8008fdc:	f43f ab5f 	beq.w	800869e <_strtod_l+0x27e>
 8008fe0:	2a45      	cmp	r2, #69	; 0x45
 8008fe2:	f43f ab5c 	beq.w	800869e <_strtod_l+0x27e>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	f7ff bb94 	b.w	8008714 <_strtod_l+0x2f4>
 8008fec:	f3af 8000 	nop.w
 8008ff0:	94a03595 	.word	0x94a03595
 8008ff4:	3fdfffff 	.word	0x3fdfffff
 8008ff8:	35afe535 	.word	0x35afe535
 8008ffc:	3fe00000 	.word	0x3fe00000
 8009000:	ffc00000 	.word	0xffc00000
 8009004:	41dfffff 	.word	0x41dfffff
 8009008:	94a03595 	.word	0x94a03595
 800900c:	3fcfffff 	.word	0x3fcfffff
 8009010:	3ff00000 	.word	0x3ff00000
 8009014:	7ff00000 	.word	0x7ff00000
 8009018:	7fe00000 	.word	0x7fe00000
 800901c:	7c9fffff 	.word	0x7c9fffff
 8009020:	3fe00000 	.word	0x3fe00000
 8009024:	bff00000 	.word	0xbff00000
 8009028:	7fefffff 	.word	0x7fefffff

0800902c <_strtod_r>:
 800902c:	4b01      	ldr	r3, [pc, #4]	; (8009034 <_strtod_r+0x8>)
 800902e:	f7ff b9f7 	b.w	8008420 <_strtod_l>
 8009032:	bf00      	nop
 8009034:	20000078 	.word	0x20000078

08009038 <_strtol_l.constprop.0>:
 8009038:	2b01      	cmp	r3, #1
 800903a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903e:	d001      	beq.n	8009044 <_strtol_l.constprop.0+0xc>
 8009040:	2b24      	cmp	r3, #36	; 0x24
 8009042:	d906      	bls.n	8009052 <_strtol_l.constprop.0+0x1a>
 8009044:	f7fe fae6 	bl	8007614 <__errno>
 8009048:	2316      	movs	r3, #22
 800904a:	6003      	str	r3, [r0, #0]
 800904c:	2000      	movs	r0, #0
 800904e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009052:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009138 <_strtol_l.constprop.0+0x100>
 8009056:	460d      	mov	r5, r1
 8009058:	462e      	mov	r6, r5
 800905a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800905e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009062:	f017 0708 	ands.w	r7, r7, #8
 8009066:	d1f7      	bne.n	8009058 <_strtol_l.constprop.0+0x20>
 8009068:	2c2d      	cmp	r4, #45	; 0x2d
 800906a:	d132      	bne.n	80090d2 <_strtol_l.constprop.0+0x9a>
 800906c:	782c      	ldrb	r4, [r5, #0]
 800906e:	2701      	movs	r7, #1
 8009070:	1cb5      	adds	r5, r6, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d05b      	beq.n	800912e <_strtol_l.constprop.0+0xf6>
 8009076:	2b10      	cmp	r3, #16
 8009078:	d109      	bne.n	800908e <_strtol_l.constprop.0+0x56>
 800907a:	2c30      	cmp	r4, #48	; 0x30
 800907c:	d107      	bne.n	800908e <_strtol_l.constprop.0+0x56>
 800907e:	782c      	ldrb	r4, [r5, #0]
 8009080:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009084:	2c58      	cmp	r4, #88	; 0x58
 8009086:	d14d      	bne.n	8009124 <_strtol_l.constprop.0+0xec>
 8009088:	786c      	ldrb	r4, [r5, #1]
 800908a:	2310      	movs	r3, #16
 800908c:	3502      	adds	r5, #2
 800908e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009092:	f108 38ff 	add.w	r8, r8, #4294967295
 8009096:	f04f 0c00 	mov.w	ip, #0
 800909a:	fbb8 f9f3 	udiv	r9, r8, r3
 800909e:	4666      	mov	r6, ip
 80090a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80090a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80090a8:	f1be 0f09 	cmp.w	lr, #9
 80090ac:	d816      	bhi.n	80090dc <_strtol_l.constprop.0+0xa4>
 80090ae:	4674      	mov	r4, lr
 80090b0:	42a3      	cmp	r3, r4
 80090b2:	dd24      	ble.n	80090fe <_strtol_l.constprop.0+0xc6>
 80090b4:	f1bc 0f00 	cmp.w	ip, #0
 80090b8:	db1e      	blt.n	80090f8 <_strtol_l.constprop.0+0xc0>
 80090ba:	45b1      	cmp	r9, r6
 80090bc:	d31c      	bcc.n	80090f8 <_strtol_l.constprop.0+0xc0>
 80090be:	d101      	bne.n	80090c4 <_strtol_l.constprop.0+0x8c>
 80090c0:	45a2      	cmp	sl, r4
 80090c2:	db19      	blt.n	80090f8 <_strtol_l.constprop.0+0xc0>
 80090c4:	fb06 4603 	mla	r6, r6, r3, r4
 80090c8:	f04f 0c01 	mov.w	ip, #1
 80090cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090d0:	e7e8      	b.n	80090a4 <_strtol_l.constprop.0+0x6c>
 80090d2:	2c2b      	cmp	r4, #43	; 0x2b
 80090d4:	bf04      	itt	eq
 80090d6:	782c      	ldrbeq	r4, [r5, #0]
 80090d8:	1cb5      	addeq	r5, r6, #2
 80090da:	e7ca      	b.n	8009072 <_strtol_l.constprop.0+0x3a>
 80090dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80090e0:	f1be 0f19 	cmp.w	lr, #25
 80090e4:	d801      	bhi.n	80090ea <_strtol_l.constprop.0+0xb2>
 80090e6:	3c37      	subs	r4, #55	; 0x37
 80090e8:	e7e2      	b.n	80090b0 <_strtol_l.constprop.0+0x78>
 80090ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80090ee:	f1be 0f19 	cmp.w	lr, #25
 80090f2:	d804      	bhi.n	80090fe <_strtol_l.constprop.0+0xc6>
 80090f4:	3c57      	subs	r4, #87	; 0x57
 80090f6:	e7db      	b.n	80090b0 <_strtol_l.constprop.0+0x78>
 80090f8:	f04f 3cff 	mov.w	ip, #4294967295
 80090fc:	e7e6      	b.n	80090cc <_strtol_l.constprop.0+0x94>
 80090fe:	f1bc 0f00 	cmp.w	ip, #0
 8009102:	da05      	bge.n	8009110 <_strtol_l.constprop.0+0xd8>
 8009104:	2322      	movs	r3, #34	; 0x22
 8009106:	6003      	str	r3, [r0, #0]
 8009108:	4646      	mov	r6, r8
 800910a:	b942      	cbnz	r2, 800911e <_strtol_l.constprop.0+0xe6>
 800910c:	4630      	mov	r0, r6
 800910e:	e79e      	b.n	800904e <_strtol_l.constprop.0+0x16>
 8009110:	b107      	cbz	r7, 8009114 <_strtol_l.constprop.0+0xdc>
 8009112:	4276      	negs	r6, r6
 8009114:	2a00      	cmp	r2, #0
 8009116:	d0f9      	beq.n	800910c <_strtol_l.constprop.0+0xd4>
 8009118:	f1bc 0f00 	cmp.w	ip, #0
 800911c:	d000      	beq.n	8009120 <_strtol_l.constprop.0+0xe8>
 800911e:	1e69      	subs	r1, r5, #1
 8009120:	6011      	str	r1, [r2, #0]
 8009122:	e7f3      	b.n	800910c <_strtol_l.constprop.0+0xd4>
 8009124:	2430      	movs	r4, #48	; 0x30
 8009126:	2b00      	cmp	r3, #0
 8009128:	d1b1      	bne.n	800908e <_strtol_l.constprop.0+0x56>
 800912a:	2308      	movs	r3, #8
 800912c:	e7af      	b.n	800908e <_strtol_l.constprop.0+0x56>
 800912e:	2c30      	cmp	r4, #48	; 0x30
 8009130:	d0a5      	beq.n	800907e <_strtol_l.constprop.0+0x46>
 8009132:	230a      	movs	r3, #10
 8009134:	e7ab      	b.n	800908e <_strtol_l.constprop.0+0x56>
 8009136:	bf00      	nop
 8009138:	0800c071 	.word	0x0800c071

0800913c <_strtol_r>:
 800913c:	f7ff bf7c 	b.w	8009038 <_strtol_l.constprop.0>

08009140 <strtol>:
 8009140:	4613      	mov	r3, r2
 8009142:	460a      	mov	r2, r1
 8009144:	4601      	mov	r1, r0
 8009146:	4802      	ldr	r0, [pc, #8]	; (8009150 <strtol+0x10>)
 8009148:	6800      	ldr	r0, [r0, #0]
 800914a:	f7ff bf75 	b.w	8009038 <_strtol_l.constprop.0>
 800914e:	bf00      	nop
 8009150:	20000010 	.word	0x20000010

08009154 <quorem>:
 8009154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	6903      	ldr	r3, [r0, #16]
 800915a:	690c      	ldr	r4, [r1, #16]
 800915c:	42a3      	cmp	r3, r4
 800915e:	4607      	mov	r7, r0
 8009160:	f2c0 8081 	blt.w	8009266 <quorem+0x112>
 8009164:	3c01      	subs	r4, #1
 8009166:	f101 0814 	add.w	r8, r1, #20
 800916a:	f100 0514 	add.w	r5, r0, #20
 800916e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009178:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800917c:	3301      	adds	r3, #1
 800917e:	429a      	cmp	r2, r3
 8009180:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009184:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009188:	fbb2 f6f3 	udiv	r6, r2, r3
 800918c:	d331      	bcc.n	80091f2 <quorem+0x9e>
 800918e:	f04f 0e00 	mov.w	lr, #0
 8009192:	4640      	mov	r0, r8
 8009194:	46ac      	mov	ip, r5
 8009196:	46f2      	mov	sl, lr
 8009198:	f850 2b04 	ldr.w	r2, [r0], #4
 800919c:	b293      	uxth	r3, r2
 800919e:	fb06 e303 	mla	r3, r6, r3, lr
 80091a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	ebaa 0303 	sub.w	r3, sl, r3
 80091ac:	f8dc a000 	ldr.w	sl, [ip]
 80091b0:	0c12      	lsrs	r2, r2, #16
 80091b2:	fa13 f38a 	uxtah	r3, r3, sl
 80091b6:	fb06 e202 	mla	r2, r6, r2, lr
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	9b00      	ldr	r3, [sp, #0]
 80091be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80091c2:	b292      	uxth	r2, r2
 80091c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80091c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80091d0:	4581      	cmp	r9, r0
 80091d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091d6:	f84c 3b04 	str.w	r3, [ip], #4
 80091da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80091de:	d2db      	bcs.n	8009198 <quorem+0x44>
 80091e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80091e4:	b92b      	cbnz	r3, 80091f2 <quorem+0x9e>
 80091e6:	9b01      	ldr	r3, [sp, #4]
 80091e8:	3b04      	subs	r3, #4
 80091ea:	429d      	cmp	r5, r3
 80091ec:	461a      	mov	r2, r3
 80091ee:	d32e      	bcc.n	800924e <quorem+0xfa>
 80091f0:	613c      	str	r4, [r7, #16]
 80091f2:	4638      	mov	r0, r7
 80091f4:	f001 fd8a 	bl	800ad0c <__mcmp>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	db24      	blt.n	8009246 <quorem+0xf2>
 80091fc:	3601      	adds	r6, #1
 80091fe:	4628      	mov	r0, r5
 8009200:	f04f 0c00 	mov.w	ip, #0
 8009204:	f858 2b04 	ldr.w	r2, [r8], #4
 8009208:	f8d0 e000 	ldr.w	lr, [r0]
 800920c:	b293      	uxth	r3, r2
 800920e:	ebac 0303 	sub.w	r3, ip, r3
 8009212:	0c12      	lsrs	r2, r2, #16
 8009214:	fa13 f38e 	uxtah	r3, r3, lr
 8009218:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800921c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009220:	b29b      	uxth	r3, r3
 8009222:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009226:	45c1      	cmp	r9, r8
 8009228:	f840 3b04 	str.w	r3, [r0], #4
 800922c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009230:	d2e8      	bcs.n	8009204 <quorem+0xb0>
 8009232:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009236:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800923a:	b922      	cbnz	r2, 8009246 <quorem+0xf2>
 800923c:	3b04      	subs	r3, #4
 800923e:	429d      	cmp	r5, r3
 8009240:	461a      	mov	r2, r3
 8009242:	d30a      	bcc.n	800925a <quorem+0x106>
 8009244:	613c      	str	r4, [r7, #16]
 8009246:	4630      	mov	r0, r6
 8009248:	b003      	add	sp, #12
 800924a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	3b04      	subs	r3, #4
 8009252:	2a00      	cmp	r2, #0
 8009254:	d1cc      	bne.n	80091f0 <quorem+0x9c>
 8009256:	3c01      	subs	r4, #1
 8009258:	e7c7      	b.n	80091ea <quorem+0x96>
 800925a:	6812      	ldr	r2, [r2, #0]
 800925c:	3b04      	subs	r3, #4
 800925e:	2a00      	cmp	r2, #0
 8009260:	d1f0      	bne.n	8009244 <quorem+0xf0>
 8009262:	3c01      	subs	r4, #1
 8009264:	e7eb      	b.n	800923e <quorem+0xea>
 8009266:	2000      	movs	r0, #0
 8009268:	e7ee      	b.n	8009248 <quorem+0xf4>
 800926a:	0000      	movs	r0, r0
 800926c:	0000      	movs	r0, r0
	...

08009270 <_dtoa_r>:
 8009270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009274:	ed2d 8b04 	vpush	{d8-d9}
 8009278:	ec57 6b10 	vmov	r6, r7, d0
 800927c:	b093      	sub	sp, #76	; 0x4c
 800927e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009280:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009284:	9106      	str	r1, [sp, #24]
 8009286:	ee10 aa10 	vmov	sl, s0
 800928a:	4604      	mov	r4, r0
 800928c:	9209      	str	r2, [sp, #36]	; 0x24
 800928e:	930c      	str	r3, [sp, #48]	; 0x30
 8009290:	46bb      	mov	fp, r7
 8009292:	b975      	cbnz	r5, 80092b2 <_dtoa_r+0x42>
 8009294:	2010      	movs	r0, #16
 8009296:	f001 fa45 	bl	800a724 <malloc>
 800929a:	4602      	mov	r2, r0
 800929c:	6260      	str	r0, [r4, #36]	; 0x24
 800929e:	b920      	cbnz	r0, 80092aa <_dtoa_r+0x3a>
 80092a0:	4ba7      	ldr	r3, [pc, #668]	; (8009540 <_dtoa_r+0x2d0>)
 80092a2:	21ea      	movs	r1, #234	; 0xea
 80092a4:	48a7      	ldr	r0, [pc, #668]	; (8009544 <_dtoa_r+0x2d4>)
 80092a6:	f002 fc23 	bl	800baf0 <__assert_func>
 80092aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80092ae:	6005      	str	r5, [r0, #0]
 80092b0:	60c5      	str	r5, [r0, #12]
 80092b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092b4:	6819      	ldr	r1, [r3, #0]
 80092b6:	b151      	cbz	r1, 80092ce <_dtoa_r+0x5e>
 80092b8:	685a      	ldr	r2, [r3, #4]
 80092ba:	604a      	str	r2, [r1, #4]
 80092bc:	2301      	movs	r3, #1
 80092be:	4093      	lsls	r3, r2
 80092c0:	608b      	str	r3, [r1, #8]
 80092c2:	4620      	mov	r0, r4
 80092c4:	f001 fa96 	bl	800a7f4 <_Bfree>
 80092c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092ca:	2200      	movs	r2, #0
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	1e3b      	subs	r3, r7, #0
 80092d0:	bfaa      	itet	ge
 80092d2:	2300      	movge	r3, #0
 80092d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80092d8:	f8c8 3000 	strge.w	r3, [r8]
 80092dc:	4b9a      	ldr	r3, [pc, #616]	; (8009548 <_dtoa_r+0x2d8>)
 80092de:	bfbc      	itt	lt
 80092e0:	2201      	movlt	r2, #1
 80092e2:	f8c8 2000 	strlt.w	r2, [r8]
 80092e6:	ea33 030b 	bics.w	r3, r3, fp
 80092ea:	d11b      	bne.n	8009324 <_dtoa_r+0xb4>
 80092ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092f8:	4333      	orrs	r3, r6
 80092fa:	f000 8592 	beq.w	8009e22 <_dtoa_r+0xbb2>
 80092fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009300:	b963      	cbnz	r3, 800931c <_dtoa_r+0xac>
 8009302:	4b92      	ldr	r3, [pc, #584]	; (800954c <_dtoa_r+0x2dc>)
 8009304:	e022      	b.n	800934c <_dtoa_r+0xdc>
 8009306:	4b92      	ldr	r3, [pc, #584]	; (8009550 <_dtoa_r+0x2e0>)
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	3308      	adds	r3, #8
 800930c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	9801      	ldr	r0, [sp, #4]
 8009312:	b013      	add	sp, #76	; 0x4c
 8009314:	ecbd 8b04 	vpop	{d8-d9}
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	4b8b      	ldr	r3, [pc, #556]	; (800954c <_dtoa_r+0x2dc>)
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	3303      	adds	r3, #3
 8009322:	e7f3      	b.n	800930c <_dtoa_r+0x9c>
 8009324:	2200      	movs	r2, #0
 8009326:	2300      	movs	r3, #0
 8009328:	4650      	mov	r0, sl
 800932a:	4659      	mov	r1, fp
 800932c:	f7f7 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009330:	ec4b ab19 	vmov	d9, sl, fp
 8009334:	4680      	mov	r8, r0
 8009336:	b158      	cbz	r0, 8009350 <_dtoa_r+0xe0>
 8009338:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800933a:	2301      	movs	r3, #1
 800933c:	6013      	str	r3, [r2, #0]
 800933e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 856b 	beq.w	8009e1c <_dtoa_r+0xbac>
 8009346:	4883      	ldr	r0, [pc, #524]	; (8009554 <_dtoa_r+0x2e4>)
 8009348:	6018      	str	r0, [r3, #0]
 800934a:	1e43      	subs	r3, r0, #1
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	e7df      	b.n	8009310 <_dtoa_r+0xa0>
 8009350:	ec4b ab10 	vmov	d0, sl, fp
 8009354:	aa10      	add	r2, sp, #64	; 0x40
 8009356:	a911      	add	r1, sp, #68	; 0x44
 8009358:	4620      	mov	r0, r4
 800935a:	f001 fdf9 	bl	800af50 <__d2b>
 800935e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009362:	ee08 0a10 	vmov	s16, r0
 8009366:	2d00      	cmp	r5, #0
 8009368:	f000 8084 	beq.w	8009474 <_dtoa_r+0x204>
 800936c:	ee19 3a90 	vmov	r3, s19
 8009370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009374:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009378:	4656      	mov	r6, sl
 800937a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800937e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009382:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009386:	4b74      	ldr	r3, [pc, #464]	; (8009558 <_dtoa_r+0x2e8>)
 8009388:	2200      	movs	r2, #0
 800938a:	4630      	mov	r0, r6
 800938c:	4639      	mov	r1, r7
 800938e:	f7f6 ff7b 	bl	8000288 <__aeabi_dsub>
 8009392:	a365      	add	r3, pc, #404	; (adr r3, 8009528 <_dtoa_r+0x2b8>)
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f7f7 f92e 	bl	80005f8 <__aeabi_dmul>
 800939c:	a364      	add	r3, pc, #400	; (adr r3, 8009530 <_dtoa_r+0x2c0>)
 800939e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a2:	f7f6 ff73 	bl	800028c <__adddf3>
 80093a6:	4606      	mov	r6, r0
 80093a8:	4628      	mov	r0, r5
 80093aa:	460f      	mov	r7, r1
 80093ac:	f7f7 f8ba 	bl	8000524 <__aeabi_i2d>
 80093b0:	a361      	add	r3, pc, #388	; (adr r3, 8009538 <_dtoa_r+0x2c8>)
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f7f7 f91f 	bl	80005f8 <__aeabi_dmul>
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	4630      	mov	r0, r6
 80093c0:	4639      	mov	r1, r7
 80093c2:	f7f6 ff63 	bl	800028c <__adddf3>
 80093c6:	4606      	mov	r6, r0
 80093c8:	460f      	mov	r7, r1
 80093ca:	f7f7 fbc5 	bl	8000b58 <__aeabi_d2iz>
 80093ce:	2200      	movs	r2, #0
 80093d0:	9000      	str	r0, [sp, #0]
 80093d2:	2300      	movs	r3, #0
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f7 fb80 	bl	8000adc <__aeabi_dcmplt>
 80093dc:	b150      	cbz	r0, 80093f4 <_dtoa_r+0x184>
 80093de:	9800      	ldr	r0, [sp, #0]
 80093e0:	f7f7 f8a0 	bl	8000524 <__aeabi_i2d>
 80093e4:	4632      	mov	r2, r6
 80093e6:	463b      	mov	r3, r7
 80093e8:	f7f7 fb6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80093ec:	b910      	cbnz	r0, 80093f4 <_dtoa_r+0x184>
 80093ee:	9b00      	ldr	r3, [sp, #0]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	9b00      	ldr	r3, [sp, #0]
 80093f6:	2b16      	cmp	r3, #22
 80093f8:	d85a      	bhi.n	80094b0 <_dtoa_r+0x240>
 80093fa:	9a00      	ldr	r2, [sp, #0]
 80093fc:	4b57      	ldr	r3, [pc, #348]	; (800955c <_dtoa_r+0x2ec>)
 80093fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	ec51 0b19 	vmov	r0, r1, d9
 800940a:	f7f7 fb67 	bl	8000adc <__aeabi_dcmplt>
 800940e:	2800      	cmp	r0, #0
 8009410:	d050      	beq.n	80094b4 <_dtoa_r+0x244>
 8009412:	9b00      	ldr	r3, [sp, #0]
 8009414:	3b01      	subs	r3, #1
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	2300      	movs	r3, #0
 800941a:	930b      	str	r3, [sp, #44]	; 0x2c
 800941c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800941e:	1b5d      	subs	r5, r3, r5
 8009420:	1e6b      	subs	r3, r5, #1
 8009422:	9305      	str	r3, [sp, #20]
 8009424:	bf45      	ittet	mi
 8009426:	f1c5 0301 	rsbmi	r3, r5, #1
 800942a:	9304      	strmi	r3, [sp, #16]
 800942c:	2300      	movpl	r3, #0
 800942e:	2300      	movmi	r3, #0
 8009430:	bf4c      	ite	mi
 8009432:	9305      	strmi	r3, [sp, #20]
 8009434:	9304      	strpl	r3, [sp, #16]
 8009436:	9b00      	ldr	r3, [sp, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	db3d      	blt.n	80094b8 <_dtoa_r+0x248>
 800943c:	9b05      	ldr	r3, [sp, #20]
 800943e:	9a00      	ldr	r2, [sp, #0]
 8009440:	920a      	str	r2, [sp, #40]	; 0x28
 8009442:	4413      	add	r3, r2
 8009444:	9305      	str	r3, [sp, #20]
 8009446:	2300      	movs	r3, #0
 8009448:	9307      	str	r3, [sp, #28]
 800944a:	9b06      	ldr	r3, [sp, #24]
 800944c:	2b09      	cmp	r3, #9
 800944e:	f200 8089 	bhi.w	8009564 <_dtoa_r+0x2f4>
 8009452:	2b05      	cmp	r3, #5
 8009454:	bfc4      	itt	gt
 8009456:	3b04      	subgt	r3, #4
 8009458:	9306      	strgt	r3, [sp, #24]
 800945a:	9b06      	ldr	r3, [sp, #24]
 800945c:	f1a3 0302 	sub.w	r3, r3, #2
 8009460:	bfcc      	ite	gt
 8009462:	2500      	movgt	r5, #0
 8009464:	2501      	movle	r5, #1
 8009466:	2b03      	cmp	r3, #3
 8009468:	f200 8087 	bhi.w	800957a <_dtoa_r+0x30a>
 800946c:	e8df f003 	tbb	[pc, r3]
 8009470:	59383a2d 	.word	0x59383a2d
 8009474:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009478:	441d      	add	r5, r3
 800947a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800947e:	2b20      	cmp	r3, #32
 8009480:	bfc1      	itttt	gt
 8009482:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009486:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800948a:	fa0b f303 	lslgt.w	r3, fp, r3
 800948e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009492:	bfda      	itte	le
 8009494:	f1c3 0320 	rsble	r3, r3, #32
 8009498:	fa06 f003 	lslle.w	r0, r6, r3
 800949c:	4318      	orrgt	r0, r3
 800949e:	f7f7 f831 	bl	8000504 <__aeabi_ui2d>
 80094a2:	2301      	movs	r3, #1
 80094a4:	4606      	mov	r6, r0
 80094a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80094aa:	3d01      	subs	r5, #1
 80094ac:	930e      	str	r3, [sp, #56]	; 0x38
 80094ae:	e76a      	b.n	8009386 <_dtoa_r+0x116>
 80094b0:	2301      	movs	r3, #1
 80094b2:	e7b2      	b.n	800941a <_dtoa_r+0x1aa>
 80094b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80094b6:	e7b1      	b.n	800941c <_dtoa_r+0x1ac>
 80094b8:	9b04      	ldr	r3, [sp, #16]
 80094ba:	9a00      	ldr	r2, [sp, #0]
 80094bc:	1a9b      	subs	r3, r3, r2
 80094be:	9304      	str	r3, [sp, #16]
 80094c0:	4253      	negs	r3, r2
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	2300      	movs	r3, #0
 80094c6:	930a      	str	r3, [sp, #40]	; 0x28
 80094c8:	e7bf      	b.n	800944a <_dtoa_r+0x1da>
 80094ca:	2300      	movs	r3, #0
 80094cc:	9308      	str	r3, [sp, #32]
 80094ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	dc55      	bgt.n	8009580 <_dtoa_r+0x310>
 80094d4:	2301      	movs	r3, #1
 80094d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80094da:	461a      	mov	r2, r3
 80094dc:	9209      	str	r2, [sp, #36]	; 0x24
 80094de:	e00c      	b.n	80094fa <_dtoa_r+0x28a>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e7f3      	b.n	80094cc <_dtoa_r+0x25c>
 80094e4:	2300      	movs	r3, #0
 80094e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80094e8:	9308      	str	r3, [sp, #32]
 80094ea:	9b00      	ldr	r3, [sp, #0]
 80094ec:	4413      	add	r3, r2
 80094ee:	9302      	str	r3, [sp, #8]
 80094f0:	3301      	adds	r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	9303      	str	r3, [sp, #12]
 80094f6:	bfb8      	it	lt
 80094f8:	2301      	movlt	r3, #1
 80094fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80094fc:	2200      	movs	r2, #0
 80094fe:	6042      	str	r2, [r0, #4]
 8009500:	2204      	movs	r2, #4
 8009502:	f102 0614 	add.w	r6, r2, #20
 8009506:	429e      	cmp	r6, r3
 8009508:	6841      	ldr	r1, [r0, #4]
 800950a:	d93d      	bls.n	8009588 <_dtoa_r+0x318>
 800950c:	4620      	mov	r0, r4
 800950e:	f001 f931 	bl	800a774 <_Balloc>
 8009512:	9001      	str	r0, [sp, #4]
 8009514:	2800      	cmp	r0, #0
 8009516:	d13b      	bne.n	8009590 <_dtoa_r+0x320>
 8009518:	4b11      	ldr	r3, [pc, #68]	; (8009560 <_dtoa_r+0x2f0>)
 800951a:	4602      	mov	r2, r0
 800951c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009520:	e6c0      	b.n	80092a4 <_dtoa_r+0x34>
 8009522:	2301      	movs	r3, #1
 8009524:	e7df      	b.n	80094e6 <_dtoa_r+0x276>
 8009526:	bf00      	nop
 8009528:	636f4361 	.word	0x636f4361
 800952c:	3fd287a7 	.word	0x3fd287a7
 8009530:	8b60c8b3 	.word	0x8b60c8b3
 8009534:	3fc68a28 	.word	0x3fc68a28
 8009538:	509f79fb 	.word	0x509f79fb
 800953c:	3fd34413 	.word	0x3fd34413
 8009540:	0800c17e 	.word	0x0800c17e
 8009544:	0800c195 	.word	0x0800c195
 8009548:	7ff00000 	.word	0x7ff00000
 800954c:	0800c17a 	.word	0x0800c17a
 8009550:	0800c171 	.word	0x0800c171
 8009554:	0800bff5 	.word	0x0800bff5
 8009558:	3ff80000 	.word	0x3ff80000
 800955c:	0800c368 	.word	0x0800c368
 8009560:	0800c1f0 	.word	0x0800c1f0
 8009564:	2501      	movs	r5, #1
 8009566:	2300      	movs	r3, #0
 8009568:	9306      	str	r3, [sp, #24]
 800956a:	9508      	str	r5, [sp, #32]
 800956c:	f04f 33ff 	mov.w	r3, #4294967295
 8009570:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009574:	2200      	movs	r2, #0
 8009576:	2312      	movs	r3, #18
 8009578:	e7b0      	b.n	80094dc <_dtoa_r+0x26c>
 800957a:	2301      	movs	r3, #1
 800957c:	9308      	str	r3, [sp, #32]
 800957e:	e7f5      	b.n	800956c <_dtoa_r+0x2fc>
 8009580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009582:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009586:	e7b8      	b.n	80094fa <_dtoa_r+0x28a>
 8009588:	3101      	adds	r1, #1
 800958a:	6041      	str	r1, [r0, #4]
 800958c:	0052      	lsls	r2, r2, #1
 800958e:	e7b8      	b.n	8009502 <_dtoa_r+0x292>
 8009590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009592:	9a01      	ldr	r2, [sp, #4]
 8009594:	601a      	str	r2, [r3, #0]
 8009596:	9b03      	ldr	r3, [sp, #12]
 8009598:	2b0e      	cmp	r3, #14
 800959a:	f200 809d 	bhi.w	80096d8 <_dtoa_r+0x468>
 800959e:	2d00      	cmp	r5, #0
 80095a0:	f000 809a 	beq.w	80096d8 <_dtoa_r+0x468>
 80095a4:	9b00      	ldr	r3, [sp, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	dd32      	ble.n	8009610 <_dtoa_r+0x3a0>
 80095aa:	4ab7      	ldr	r2, [pc, #732]	; (8009888 <_dtoa_r+0x618>)
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80095b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	05d8      	lsls	r0, r3, #23
 80095bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80095c0:	d516      	bpl.n	80095f0 <_dtoa_r+0x380>
 80095c2:	4bb2      	ldr	r3, [pc, #712]	; (800988c <_dtoa_r+0x61c>)
 80095c4:	ec51 0b19 	vmov	r0, r1, d9
 80095c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095cc:	f7f7 f93e 	bl	800084c <__aeabi_ddiv>
 80095d0:	f007 070f 	and.w	r7, r7, #15
 80095d4:	4682      	mov	sl, r0
 80095d6:	468b      	mov	fp, r1
 80095d8:	2503      	movs	r5, #3
 80095da:	4eac      	ldr	r6, [pc, #688]	; (800988c <_dtoa_r+0x61c>)
 80095dc:	b957      	cbnz	r7, 80095f4 <_dtoa_r+0x384>
 80095de:	4642      	mov	r2, r8
 80095e0:	464b      	mov	r3, r9
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f7f7 f931 	bl	800084c <__aeabi_ddiv>
 80095ea:	4682      	mov	sl, r0
 80095ec:	468b      	mov	fp, r1
 80095ee:	e028      	b.n	8009642 <_dtoa_r+0x3d2>
 80095f0:	2502      	movs	r5, #2
 80095f2:	e7f2      	b.n	80095da <_dtoa_r+0x36a>
 80095f4:	07f9      	lsls	r1, r7, #31
 80095f6:	d508      	bpl.n	800960a <_dtoa_r+0x39a>
 80095f8:	4640      	mov	r0, r8
 80095fa:	4649      	mov	r1, r9
 80095fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009600:	f7f6 fffa 	bl	80005f8 <__aeabi_dmul>
 8009604:	3501      	adds	r5, #1
 8009606:	4680      	mov	r8, r0
 8009608:	4689      	mov	r9, r1
 800960a:	107f      	asrs	r7, r7, #1
 800960c:	3608      	adds	r6, #8
 800960e:	e7e5      	b.n	80095dc <_dtoa_r+0x36c>
 8009610:	f000 809b 	beq.w	800974a <_dtoa_r+0x4da>
 8009614:	9b00      	ldr	r3, [sp, #0]
 8009616:	4f9d      	ldr	r7, [pc, #628]	; (800988c <_dtoa_r+0x61c>)
 8009618:	425e      	negs	r6, r3
 800961a:	4b9b      	ldr	r3, [pc, #620]	; (8009888 <_dtoa_r+0x618>)
 800961c:	f006 020f 	and.w	r2, r6, #15
 8009620:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009628:	ec51 0b19 	vmov	r0, r1, d9
 800962c:	f7f6 ffe4 	bl	80005f8 <__aeabi_dmul>
 8009630:	1136      	asrs	r6, r6, #4
 8009632:	4682      	mov	sl, r0
 8009634:	468b      	mov	fp, r1
 8009636:	2300      	movs	r3, #0
 8009638:	2502      	movs	r5, #2
 800963a:	2e00      	cmp	r6, #0
 800963c:	d17a      	bne.n	8009734 <_dtoa_r+0x4c4>
 800963e:	2b00      	cmp	r3, #0
 8009640:	d1d3      	bne.n	80095ea <_dtoa_r+0x37a>
 8009642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009644:	2b00      	cmp	r3, #0
 8009646:	f000 8082 	beq.w	800974e <_dtoa_r+0x4de>
 800964a:	4b91      	ldr	r3, [pc, #580]	; (8009890 <_dtoa_r+0x620>)
 800964c:	2200      	movs	r2, #0
 800964e:	4650      	mov	r0, sl
 8009650:	4659      	mov	r1, fp
 8009652:	f7f7 fa43 	bl	8000adc <__aeabi_dcmplt>
 8009656:	2800      	cmp	r0, #0
 8009658:	d079      	beq.n	800974e <_dtoa_r+0x4de>
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d076      	beq.n	800974e <_dtoa_r+0x4de>
 8009660:	9b02      	ldr	r3, [sp, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dd36      	ble.n	80096d4 <_dtoa_r+0x464>
 8009666:	9b00      	ldr	r3, [sp, #0]
 8009668:	4650      	mov	r0, sl
 800966a:	4659      	mov	r1, fp
 800966c:	1e5f      	subs	r7, r3, #1
 800966e:	2200      	movs	r2, #0
 8009670:	4b88      	ldr	r3, [pc, #544]	; (8009894 <_dtoa_r+0x624>)
 8009672:	f7f6 ffc1 	bl	80005f8 <__aeabi_dmul>
 8009676:	9e02      	ldr	r6, [sp, #8]
 8009678:	4682      	mov	sl, r0
 800967a:	468b      	mov	fp, r1
 800967c:	3501      	adds	r5, #1
 800967e:	4628      	mov	r0, r5
 8009680:	f7f6 ff50 	bl	8000524 <__aeabi_i2d>
 8009684:	4652      	mov	r2, sl
 8009686:	465b      	mov	r3, fp
 8009688:	f7f6 ffb6 	bl	80005f8 <__aeabi_dmul>
 800968c:	4b82      	ldr	r3, [pc, #520]	; (8009898 <_dtoa_r+0x628>)
 800968e:	2200      	movs	r2, #0
 8009690:	f7f6 fdfc 	bl	800028c <__adddf3>
 8009694:	46d0      	mov	r8, sl
 8009696:	46d9      	mov	r9, fp
 8009698:	4682      	mov	sl, r0
 800969a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800969e:	2e00      	cmp	r6, #0
 80096a0:	d158      	bne.n	8009754 <_dtoa_r+0x4e4>
 80096a2:	4b7e      	ldr	r3, [pc, #504]	; (800989c <_dtoa_r+0x62c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f6 fded 	bl	8000288 <__aeabi_dsub>
 80096ae:	4652      	mov	r2, sl
 80096b0:	465b      	mov	r3, fp
 80096b2:	4680      	mov	r8, r0
 80096b4:	4689      	mov	r9, r1
 80096b6:	f7f7 fa2f 	bl	8000b18 <__aeabi_dcmpgt>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	f040 8295 	bne.w	8009bea <_dtoa_r+0x97a>
 80096c0:	4652      	mov	r2, sl
 80096c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80096c6:	4640      	mov	r0, r8
 80096c8:	4649      	mov	r1, r9
 80096ca:	f7f7 fa07 	bl	8000adc <__aeabi_dcmplt>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	f040 8289 	bne.w	8009be6 <_dtoa_r+0x976>
 80096d4:	ec5b ab19 	vmov	sl, fp, d9
 80096d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096da:	2b00      	cmp	r3, #0
 80096dc:	f2c0 8148 	blt.w	8009970 <_dtoa_r+0x700>
 80096e0:	9a00      	ldr	r2, [sp, #0]
 80096e2:	2a0e      	cmp	r2, #14
 80096e4:	f300 8144 	bgt.w	8009970 <_dtoa_r+0x700>
 80096e8:	4b67      	ldr	r3, [pc, #412]	; (8009888 <_dtoa_r+0x618>)
 80096ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80096f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f280 80d5 	bge.w	80098a4 <_dtoa_r+0x634>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f300 80d1 	bgt.w	80098a4 <_dtoa_r+0x634>
 8009702:	f040 826f 	bne.w	8009be4 <_dtoa_r+0x974>
 8009706:	4b65      	ldr	r3, [pc, #404]	; (800989c <_dtoa_r+0x62c>)
 8009708:	2200      	movs	r2, #0
 800970a:	4640      	mov	r0, r8
 800970c:	4649      	mov	r1, r9
 800970e:	f7f6 ff73 	bl	80005f8 <__aeabi_dmul>
 8009712:	4652      	mov	r2, sl
 8009714:	465b      	mov	r3, fp
 8009716:	f7f7 f9f5 	bl	8000b04 <__aeabi_dcmpge>
 800971a:	9e03      	ldr	r6, [sp, #12]
 800971c:	4637      	mov	r7, r6
 800971e:	2800      	cmp	r0, #0
 8009720:	f040 8245 	bne.w	8009bae <_dtoa_r+0x93e>
 8009724:	9d01      	ldr	r5, [sp, #4]
 8009726:	2331      	movs	r3, #49	; 0x31
 8009728:	f805 3b01 	strb.w	r3, [r5], #1
 800972c:	9b00      	ldr	r3, [sp, #0]
 800972e:	3301      	adds	r3, #1
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	e240      	b.n	8009bb6 <_dtoa_r+0x946>
 8009734:	07f2      	lsls	r2, r6, #31
 8009736:	d505      	bpl.n	8009744 <_dtoa_r+0x4d4>
 8009738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800973c:	f7f6 ff5c 	bl	80005f8 <__aeabi_dmul>
 8009740:	3501      	adds	r5, #1
 8009742:	2301      	movs	r3, #1
 8009744:	1076      	asrs	r6, r6, #1
 8009746:	3708      	adds	r7, #8
 8009748:	e777      	b.n	800963a <_dtoa_r+0x3ca>
 800974a:	2502      	movs	r5, #2
 800974c:	e779      	b.n	8009642 <_dtoa_r+0x3d2>
 800974e:	9f00      	ldr	r7, [sp, #0]
 8009750:	9e03      	ldr	r6, [sp, #12]
 8009752:	e794      	b.n	800967e <_dtoa_r+0x40e>
 8009754:	9901      	ldr	r1, [sp, #4]
 8009756:	4b4c      	ldr	r3, [pc, #304]	; (8009888 <_dtoa_r+0x618>)
 8009758:	4431      	add	r1, r6
 800975a:	910d      	str	r1, [sp, #52]	; 0x34
 800975c:	9908      	ldr	r1, [sp, #32]
 800975e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009766:	2900      	cmp	r1, #0
 8009768:	d043      	beq.n	80097f2 <_dtoa_r+0x582>
 800976a:	494d      	ldr	r1, [pc, #308]	; (80098a0 <_dtoa_r+0x630>)
 800976c:	2000      	movs	r0, #0
 800976e:	f7f7 f86d 	bl	800084c <__aeabi_ddiv>
 8009772:	4652      	mov	r2, sl
 8009774:	465b      	mov	r3, fp
 8009776:	f7f6 fd87 	bl	8000288 <__aeabi_dsub>
 800977a:	9d01      	ldr	r5, [sp, #4]
 800977c:	4682      	mov	sl, r0
 800977e:	468b      	mov	fp, r1
 8009780:	4649      	mov	r1, r9
 8009782:	4640      	mov	r0, r8
 8009784:	f7f7 f9e8 	bl	8000b58 <__aeabi_d2iz>
 8009788:	4606      	mov	r6, r0
 800978a:	f7f6 fecb 	bl	8000524 <__aeabi_i2d>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f6 fd77 	bl	8000288 <__aeabi_dsub>
 800979a:	3630      	adds	r6, #48	; 0x30
 800979c:	f805 6b01 	strb.w	r6, [r5], #1
 80097a0:	4652      	mov	r2, sl
 80097a2:	465b      	mov	r3, fp
 80097a4:	4680      	mov	r8, r0
 80097a6:	4689      	mov	r9, r1
 80097a8:	f7f7 f998 	bl	8000adc <__aeabi_dcmplt>
 80097ac:	2800      	cmp	r0, #0
 80097ae:	d163      	bne.n	8009878 <_dtoa_r+0x608>
 80097b0:	4642      	mov	r2, r8
 80097b2:	464b      	mov	r3, r9
 80097b4:	4936      	ldr	r1, [pc, #216]	; (8009890 <_dtoa_r+0x620>)
 80097b6:	2000      	movs	r0, #0
 80097b8:	f7f6 fd66 	bl	8000288 <__aeabi_dsub>
 80097bc:	4652      	mov	r2, sl
 80097be:	465b      	mov	r3, fp
 80097c0:	f7f7 f98c 	bl	8000adc <__aeabi_dcmplt>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	f040 80b5 	bne.w	8009934 <_dtoa_r+0x6c4>
 80097ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097cc:	429d      	cmp	r5, r3
 80097ce:	d081      	beq.n	80096d4 <_dtoa_r+0x464>
 80097d0:	4b30      	ldr	r3, [pc, #192]	; (8009894 <_dtoa_r+0x624>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	4650      	mov	r0, sl
 80097d6:	4659      	mov	r1, fp
 80097d8:	f7f6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80097dc:	4b2d      	ldr	r3, [pc, #180]	; (8009894 <_dtoa_r+0x624>)
 80097de:	4682      	mov	sl, r0
 80097e0:	468b      	mov	fp, r1
 80097e2:	4640      	mov	r0, r8
 80097e4:	4649      	mov	r1, r9
 80097e6:	2200      	movs	r2, #0
 80097e8:	f7f6 ff06 	bl	80005f8 <__aeabi_dmul>
 80097ec:	4680      	mov	r8, r0
 80097ee:	4689      	mov	r9, r1
 80097f0:	e7c6      	b.n	8009780 <_dtoa_r+0x510>
 80097f2:	4650      	mov	r0, sl
 80097f4:	4659      	mov	r1, fp
 80097f6:	f7f6 feff 	bl	80005f8 <__aeabi_dmul>
 80097fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097fc:	9d01      	ldr	r5, [sp, #4]
 80097fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009800:	4682      	mov	sl, r0
 8009802:	468b      	mov	fp, r1
 8009804:	4649      	mov	r1, r9
 8009806:	4640      	mov	r0, r8
 8009808:	f7f7 f9a6 	bl	8000b58 <__aeabi_d2iz>
 800980c:	4606      	mov	r6, r0
 800980e:	f7f6 fe89 	bl	8000524 <__aeabi_i2d>
 8009812:	3630      	adds	r6, #48	; 0x30
 8009814:	4602      	mov	r2, r0
 8009816:	460b      	mov	r3, r1
 8009818:	4640      	mov	r0, r8
 800981a:	4649      	mov	r1, r9
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	f805 6b01 	strb.w	r6, [r5], #1
 8009824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009826:	429d      	cmp	r5, r3
 8009828:	4680      	mov	r8, r0
 800982a:	4689      	mov	r9, r1
 800982c:	f04f 0200 	mov.w	r2, #0
 8009830:	d124      	bne.n	800987c <_dtoa_r+0x60c>
 8009832:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <_dtoa_r+0x630>)
 8009834:	4650      	mov	r0, sl
 8009836:	4659      	mov	r1, fp
 8009838:	f7f6 fd28 	bl	800028c <__adddf3>
 800983c:	4602      	mov	r2, r0
 800983e:	460b      	mov	r3, r1
 8009840:	4640      	mov	r0, r8
 8009842:	4649      	mov	r1, r9
 8009844:	f7f7 f968 	bl	8000b18 <__aeabi_dcmpgt>
 8009848:	2800      	cmp	r0, #0
 800984a:	d173      	bne.n	8009934 <_dtoa_r+0x6c4>
 800984c:	4652      	mov	r2, sl
 800984e:	465b      	mov	r3, fp
 8009850:	4913      	ldr	r1, [pc, #76]	; (80098a0 <_dtoa_r+0x630>)
 8009852:	2000      	movs	r0, #0
 8009854:	f7f6 fd18 	bl	8000288 <__aeabi_dsub>
 8009858:	4602      	mov	r2, r0
 800985a:	460b      	mov	r3, r1
 800985c:	4640      	mov	r0, r8
 800985e:	4649      	mov	r1, r9
 8009860:	f7f7 f93c 	bl	8000adc <__aeabi_dcmplt>
 8009864:	2800      	cmp	r0, #0
 8009866:	f43f af35 	beq.w	80096d4 <_dtoa_r+0x464>
 800986a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800986c:	1e6b      	subs	r3, r5, #1
 800986e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009870:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009874:	2b30      	cmp	r3, #48	; 0x30
 8009876:	d0f8      	beq.n	800986a <_dtoa_r+0x5fa>
 8009878:	9700      	str	r7, [sp, #0]
 800987a:	e049      	b.n	8009910 <_dtoa_r+0x6a0>
 800987c:	4b05      	ldr	r3, [pc, #20]	; (8009894 <_dtoa_r+0x624>)
 800987e:	f7f6 febb 	bl	80005f8 <__aeabi_dmul>
 8009882:	4680      	mov	r8, r0
 8009884:	4689      	mov	r9, r1
 8009886:	e7bd      	b.n	8009804 <_dtoa_r+0x594>
 8009888:	0800c368 	.word	0x0800c368
 800988c:	0800c340 	.word	0x0800c340
 8009890:	3ff00000 	.word	0x3ff00000
 8009894:	40240000 	.word	0x40240000
 8009898:	401c0000 	.word	0x401c0000
 800989c:	40140000 	.word	0x40140000
 80098a0:	3fe00000 	.word	0x3fe00000
 80098a4:	9d01      	ldr	r5, [sp, #4]
 80098a6:	4656      	mov	r6, sl
 80098a8:	465f      	mov	r7, fp
 80098aa:	4642      	mov	r2, r8
 80098ac:	464b      	mov	r3, r9
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 ffcb 	bl	800084c <__aeabi_ddiv>
 80098b6:	f7f7 f94f 	bl	8000b58 <__aeabi_d2iz>
 80098ba:	4682      	mov	sl, r0
 80098bc:	f7f6 fe32 	bl	8000524 <__aeabi_i2d>
 80098c0:	4642      	mov	r2, r8
 80098c2:	464b      	mov	r3, r9
 80098c4:	f7f6 fe98 	bl	80005f8 <__aeabi_dmul>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4630      	mov	r0, r6
 80098ce:	4639      	mov	r1, r7
 80098d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80098d4:	f7f6 fcd8 	bl	8000288 <__aeabi_dsub>
 80098d8:	f805 6b01 	strb.w	r6, [r5], #1
 80098dc:	9e01      	ldr	r6, [sp, #4]
 80098de:	9f03      	ldr	r7, [sp, #12]
 80098e0:	1bae      	subs	r6, r5, r6
 80098e2:	42b7      	cmp	r7, r6
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	d135      	bne.n	8009956 <_dtoa_r+0x6e6>
 80098ea:	f7f6 fccf 	bl	800028c <__adddf3>
 80098ee:	4642      	mov	r2, r8
 80098f0:	464b      	mov	r3, r9
 80098f2:	4606      	mov	r6, r0
 80098f4:	460f      	mov	r7, r1
 80098f6:	f7f7 f90f 	bl	8000b18 <__aeabi_dcmpgt>
 80098fa:	b9d0      	cbnz	r0, 8009932 <_dtoa_r+0x6c2>
 80098fc:	4642      	mov	r2, r8
 80098fe:	464b      	mov	r3, r9
 8009900:	4630      	mov	r0, r6
 8009902:	4639      	mov	r1, r7
 8009904:	f7f7 f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009908:	b110      	cbz	r0, 8009910 <_dtoa_r+0x6a0>
 800990a:	f01a 0f01 	tst.w	sl, #1
 800990e:	d110      	bne.n	8009932 <_dtoa_r+0x6c2>
 8009910:	4620      	mov	r0, r4
 8009912:	ee18 1a10 	vmov	r1, s16
 8009916:	f000 ff6d 	bl	800a7f4 <_Bfree>
 800991a:	2300      	movs	r3, #0
 800991c:	9800      	ldr	r0, [sp, #0]
 800991e:	702b      	strb	r3, [r5, #0]
 8009920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009922:	3001      	adds	r0, #1
 8009924:	6018      	str	r0, [r3, #0]
 8009926:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009928:	2b00      	cmp	r3, #0
 800992a:	f43f acf1 	beq.w	8009310 <_dtoa_r+0xa0>
 800992e:	601d      	str	r5, [r3, #0]
 8009930:	e4ee      	b.n	8009310 <_dtoa_r+0xa0>
 8009932:	9f00      	ldr	r7, [sp, #0]
 8009934:	462b      	mov	r3, r5
 8009936:	461d      	mov	r5, r3
 8009938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800993c:	2a39      	cmp	r2, #57	; 0x39
 800993e:	d106      	bne.n	800994e <_dtoa_r+0x6de>
 8009940:	9a01      	ldr	r2, [sp, #4]
 8009942:	429a      	cmp	r2, r3
 8009944:	d1f7      	bne.n	8009936 <_dtoa_r+0x6c6>
 8009946:	9901      	ldr	r1, [sp, #4]
 8009948:	2230      	movs	r2, #48	; 0x30
 800994a:	3701      	adds	r7, #1
 800994c:	700a      	strb	r2, [r1, #0]
 800994e:	781a      	ldrb	r2, [r3, #0]
 8009950:	3201      	adds	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
 8009954:	e790      	b.n	8009878 <_dtoa_r+0x608>
 8009956:	4ba6      	ldr	r3, [pc, #664]	; (8009bf0 <_dtoa_r+0x980>)
 8009958:	2200      	movs	r2, #0
 800995a:	f7f6 fe4d 	bl	80005f8 <__aeabi_dmul>
 800995e:	2200      	movs	r2, #0
 8009960:	2300      	movs	r3, #0
 8009962:	4606      	mov	r6, r0
 8009964:	460f      	mov	r7, r1
 8009966:	f7f7 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800996a:	2800      	cmp	r0, #0
 800996c:	d09d      	beq.n	80098aa <_dtoa_r+0x63a>
 800996e:	e7cf      	b.n	8009910 <_dtoa_r+0x6a0>
 8009970:	9a08      	ldr	r2, [sp, #32]
 8009972:	2a00      	cmp	r2, #0
 8009974:	f000 80d7 	beq.w	8009b26 <_dtoa_r+0x8b6>
 8009978:	9a06      	ldr	r2, [sp, #24]
 800997a:	2a01      	cmp	r2, #1
 800997c:	f300 80ba 	bgt.w	8009af4 <_dtoa_r+0x884>
 8009980:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009982:	2a00      	cmp	r2, #0
 8009984:	f000 80b2 	beq.w	8009aec <_dtoa_r+0x87c>
 8009988:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800998c:	9e07      	ldr	r6, [sp, #28]
 800998e:	9d04      	ldr	r5, [sp, #16]
 8009990:	9a04      	ldr	r2, [sp, #16]
 8009992:	441a      	add	r2, r3
 8009994:	9204      	str	r2, [sp, #16]
 8009996:	9a05      	ldr	r2, [sp, #20]
 8009998:	2101      	movs	r1, #1
 800999a:	441a      	add	r2, r3
 800999c:	4620      	mov	r0, r4
 800999e:	9205      	str	r2, [sp, #20]
 80099a0:	f001 f82a 	bl	800a9f8 <__i2b>
 80099a4:	4607      	mov	r7, r0
 80099a6:	2d00      	cmp	r5, #0
 80099a8:	dd0c      	ble.n	80099c4 <_dtoa_r+0x754>
 80099aa:	9b05      	ldr	r3, [sp, #20]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	dd09      	ble.n	80099c4 <_dtoa_r+0x754>
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	9a04      	ldr	r2, [sp, #16]
 80099b4:	bfa8      	it	ge
 80099b6:	462b      	movge	r3, r5
 80099b8:	1ad2      	subs	r2, r2, r3
 80099ba:	9204      	str	r2, [sp, #16]
 80099bc:	9a05      	ldr	r2, [sp, #20]
 80099be:	1aed      	subs	r5, r5, r3
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	9305      	str	r3, [sp, #20]
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	b31b      	cbz	r3, 8009a10 <_dtoa_r+0x7a0>
 80099c8:	9b08      	ldr	r3, [sp, #32]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f000 80af 	beq.w	8009b2e <_dtoa_r+0x8be>
 80099d0:	2e00      	cmp	r6, #0
 80099d2:	dd13      	ble.n	80099fc <_dtoa_r+0x78c>
 80099d4:	4639      	mov	r1, r7
 80099d6:	4632      	mov	r2, r6
 80099d8:	4620      	mov	r0, r4
 80099da:	f001 f8cd 	bl	800ab78 <__pow5mult>
 80099de:	ee18 2a10 	vmov	r2, s16
 80099e2:	4601      	mov	r1, r0
 80099e4:	4607      	mov	r7, r0
 80099e6:	4620      	mov	r0, r4
 80099e8:	f001 f81c 	bl	800aa24 <__multiply>
 80099ec:	ee18 1a10 	vmov	r1, s16
 80099f0:	4680      	mov	r8, r0
 80099f2:	4620      	mov	r0, r4
 80099f4:	f000 fefe 	bl	800a7f4 <_Bfree>
 80099f8:	ee08 8a10 	vmov	s16, r8
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	1b9a      	subs	r2, r3, r6
 8009a00:	d006      	beq.n	8009a10 <_dtoa_r+0x7a0>
 8009a02:	ee18 1a10 	vmov	r1, s16
 8009a06:	4620      	mov	r0, r4
 8009a08:	f001 f8b6 	bl	800ab78 <__pow5mult>
 8009a0c:	ee08 0a10 	vmov	s16, r0
 8009a10:	2101      	movs	r1, #1
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fff0 	bl	800a9f8 <__i2b>
 8009a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	4606      	mov	r6, r0
 8009a1e:	f340 8088 	ble.w	8009b32 <_dtoa_r+0x8c2>
 8009a22:	461a      	mov	r2, r3
 8009a24:	4601      	mov	r1, r0
 8009a26:	4620      	mov	r0, r4
 8009a28:	f001 f8a6 	bl	800ab78 <__pow5mult>
 8009a2c:	9b06      	ldr	r3, [sp, #24]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	4606      	mov	r6, r0
 8009a32:	f340 8081 	ble.w	8009b38 <_dtoa_r+0x8c8>
 8009a36:	f04f 0800 	mov.w	r8, #0
 8009a3a:	6933      	ldr	r3, [r6, #16]
 8009a3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009a40:	6918      	ldr	r0, [r3, #16]
 8009a42:	f000 ff89 	bl	800a958 <__hi0bits>
 8009a46:	f1c0 0020 	rsb	r0, r0, #32
 8009a4a:	9b05      	ldr	r3, [sp, #20]
 8009a4c:	4418      	add	r0, r3
 8009a4e:	f010 001f 	ands.w	r0, r0, #31
 8009a52:	f000 8092 	beq.w	8009b7a <_dtoa_r+0x90a>
 8009a56:	f1c0 0320 	rsb	r3, r0, #32
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	f340 808a 	ble.w	8009b74 <_dtoa_r+0x904>
 8009a60:	f1c0 001c 	rsb	r0, r0, #28
 8009a64:	9b04      	ldr	r3, [sp, #16]
 8009a66:	4403      	add	r3, r0
 8009a68:	9304      	str	r3, [sp, #16]
 8009a6a:	9b05      	ldr	r3, [sp, #20]
 8009a6c:	4403      	add	r3, r0
 8009a6e:	4405      	add	r5, r0
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	dd07      	ble.n	8009a88 <_dtoa_r+0x818>
 8009a78:	ee18 1a10 	vmov	r1, s16
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4620      	mov	r0, r4
 8009a80:	f001 f8d4 	bl	800ac2c <__lshift>
 8009a84:	ee08 0a10 	vmov	s16, r0
 8009a88:	9b05      	ldr	r3, [sp, #20]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	dd05      	ble.n	8009a9a <_dtoa_r+0x82a>
 8009a8e:	4631      	mov	r1, r6
 8009a90:	461a      	mov	r2, r3
 8009a92:	4620      	mov	r0, r4
 8009a94:	f001 f8ca 	bl	800ac2c <__lshift>
 8009a98:	4606      	mov	r6, r0
 8009a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d06e      	beq.n	8009b7e <_dtoa_r+0x90e>
 8009aa0:	ee18 0a10 	vmov	r0, s16
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	f001 f931 	bl	800ad0c <__mcmp>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	da67      	bge.n	8009b7e <_dtoa_r+0x90e>
 8009aae:	9b00      	ldr	r3, [sp, #0]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	ee18 1a10 	vmov	r1, s16
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	220a      	movs	r2, #10
 8009aba:	2300      	movs	r3, #0
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 febb 	bl	800a838 <__multadd>
 8009ac2:	9b08      	ldr	r3, [sp, #32]
 8009ac4:	ee08 0a10 	vmov	s16, r0
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	f000 81b1 	beq.w	8009e30 <_dtoa_r+0xbc0>
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	220a      	movs	r2, #10
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f000 feaf 	bl	800a838 <__multadd>
 8009ada:	9b02      	ldr	r3, [sp, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	4607      	mov	r7, r0
 8009ae0:	f300 808e 	bgt.w	8009c00 <_dtoa_r+0x990>
 8009ae4:	9b06      	ldr	r3, [sp, #24]
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	dc51      	bgt.n	8009b8e <_dtoa_r+0x91e>
 8009aea:	e089      	b.n	8009c00 <_dtoa_r+0x990>
 8009aec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009aee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009af2:	e74b      	b.n	800998c <_dtoa_r+0x71c>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	1e5e      	subs	r6, r3, #1
 8009af8:	9b07      	ldr	r3, [sp, #28]
 8009afa:	42b3      	cmp	r3, r6
 8009afc:	bfbf      	itttt	lt
 8009afe:	9b07      	ldrlt	r3, [sp, #28]
 8009b00:	9607      	strlt	r6, [sp, #28]
 8009b02:	1af2      	sublt	r2, r6, r3
 8009b04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009b06:	bfb6      	itet	lt
 8009b08:	189b      	addlt	r3, r3, r2
 8009b0a:	1b9e      	subge	r6, r3, r6
 8009b0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009b0e:	9b03      	ldr	r3, [sp, #12]
 8009b10:	bfb8      	it	lt
 8009b12:	2600      	movlt	r6, #0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	bfb7      	itett	lt
 8009b18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009b1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009b20:	1a9d      	sublt	r5, r3, r2
 8009b22:	2300      	movlt	r3, #0
 8009b24:	e734      	b.n	8009990 <_dtoa_r+0x720>
 8009b26:	9e07      	ldr	r6, [sp, #28]
 8009b28:	9d04      	ldr	r5, [sp, #16]
 8009b2a:	9f08      	ldr	r7, [sp, #32]
 8009b2c:	e73b      	b.n	80099a6 <_dtoa_r+0x736>
 8009b2e:	9a07      	ldr	r2, [sp, #28]
 8009b30:	e767      	b.n	8009a02 <_dtoa_r+0x792>
 8009b32:	9b06      	ldr	r3, [sp, #24]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	dc18      	bgt.n	8009b6a <_dtoa_r+0x8fa>
 8009b38:	f1ba 0f00 	cmp.w	sl, #0
 8009b3c:	d115      	bne.n	8009b6a <_dtoa_r+0x8fa>
 8009b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b42:	b993      	cbnz	r3, 8009b6a <_dtoa_r+0x8fa>
 8009b44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b48:	0d1b      	lsrs	r3, r3, #20
 8009b4a:	051b      	lsls	r3, r3, #20
 8009b4c:	b183      	cbz	r3, 8009b70 <_dtoa_r+0x900>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	3301      	adds	r3, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	9b05      	ldr	r3, [sp, #20]
 8009b56:	3301      	adds	r3, #1
 8009b58:	9305      	str	r3, [sp, #20]
 8009b5a:	f04f 0801 	mov.w	r8, #1
 8009b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f47f af6a 	bne.w	8009a3a <_dtoa_r+0x7ca>
 8009b66:	2001      	movs	r0, #1
 8009b68:	e76f      	b.n	8009a4a <_dtoa_r+0x7da>
 8009b6a:	f04f 0800 	mov.w	r8, #0
 8009b6e:	e7f6      	b.n	8009b5e <_dtoa_r+0x8ee>
 8009b70:	4698      	mov	r8, r3
 8009b72:	e7f4      	b.n	8009b5e <_dtoa_r+0x8ee>
 8009b74:	f43f af7d 	beq.w	8009a72 <_dtoa_r+0x802>
 8009b78:	4618      	mov	r0, r3
 8009b7a:	301c      	adds	r0, #28
 8009b7c:	e772      	b.n	8009a64 <_dtoa_r+0x7f4>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dc37      	bgt.n	8009bf4 <_dtoa_r+0x984>
 8009b84:	9b06      	ldr	r3, [sp, #24]
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	dd34      	ble.n	8009bf4 <_dtoa_r+0x984>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	9302      	str	r3, [sp, #8]
 8009b8e:	9b02      	ldr	r3, [sp, #8]
 8009b90:	b96b      	cbnz	r3, 8009bae <_dtoa_r+0x93e>
 8009b92:	4631      	mov	r1, r6
 8009b94:	2205      	movs	r2, #5
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fe4e 	bl	800a838 <__multadd>
 8009b9c:	4601      	mov	r1, r0
 8009b9e:	4606      	mov	r6, r0
 8009ba0:	ee18 0a10 	vmov	r0, s16
 8009ba4:	f001 f8b2 	bl	800ad0c <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	f73f adbb 	bgt.w	8009724 <_dtoa_r+0x4b4>
 8009bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bb0:	9d01      	ldr	r5, [sp, #4]
 8009bb2:	43db      	mvns	r3, r3
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	f04f 0800 	mov.w	r8, #0
 8009bba:	4631      	mov	r1, r6
 8009bbc:	4620      	mov	r0, r4
 8009bbe:	f000 fe19 	bl	800a7f4 <_Bfree>
 8009bc2:	2f00      	cmp	r7, #0
 8009bc4:	f43f aea4 	beq.w	8009910 <_dtoa_r+0x6a0>
 8009bc8:	f1b8 0f00 	cmp.w	r8, #0
 8009bcc:	d005      	beq.n	8009bda <_dtoa_r+0x96a>
 8009bce:	45b8      	cmp	r8, r7
 8009bd0:	d003      	beq.n	8009bda <_dtoa_r+0x96a>
 8009bd2:	4641      	mov	r1, r8
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	f000 fe0d 	bl	800a7f4 <_Bfree>
 8009bda:	4639      	mov	r1, r7
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f000 fe09 	bl	800a7f4 <_Bfree>
 8009be2:	e695      	b.n	8009910 <_dtoa_r+0x6a0>
 8009be4:	2600      	movs	r6, #0
 8009be6:	4637      	mov	r7, r6
 8009be8:	e7e1      	b.n	8009bae <_dtoa_r+0x93e>
 8009bea:	9700      	str	r7, [sp, #0]
 8009bec:	4637      	mov	r7, r6
 8009bee:	e599      	b.n	8009724 <_dtoa_r+0x4b4>
 8009bf0:	40240000 	.word	0x40240000
 8009bf4:	9b08      	ldr	r3, [sp, #32]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 80ca 	beq.w	8009d90 <_dtoa_r+0xb20>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	dd05      	ble.n	8009c10 <_dtoa_r+0x9a0>
 8009c04:	4639      	mov	r1, r7
 8009c06:	462a      	mov	r2, r5
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f001 f80f 	bl	800ac2c <__lshift>
 8009c0e:	4607      	mov	r7, r0
 8009c10:	f1b8 0f00 	cmp.w	r8, #0
 8009c14:	d05b      	beq.n	8009cce <_dtoa_r+0xa5e>
 8009c16:	6879      	ldr	r1, [r7, #4]
 8009c18:	4620      	mov	r0, r4
 8009c1a:	f000 fdab 	bl	800a774 <_Balloc>
 8009c1e:	4605      	mov	r5, r0
 8009c20:	b928      	cbnz	r0, 8009c2e <_dtoa_r+0x9be>
 8009c22:	4b87      	ldr	r3, [pc, #540]	; (8009e40 <_dtoa_r+0xbd0>)
 8009c24:	4602      	mov	r2, r0
 8009c26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009c2a:	f7ff bb3b 	b.w	80092a4 <_dtoa_r+0x34>
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	3202      	adds	r2, #2
 8009c32:	0092      	lsls	r2, r2, #2
 8009c34:	f107 010c 	add.w	r1, r7, #12
 8009c38:	300c      	adds	r0, #12
 8009c3a:	f000 fd8d 	bl	800a758 <memcpy>
 8009c3e:	2201      	movs	r2, #1
 8009c40:	4629      	mov	r1, r5
 8009c42:	4620      	mov	r0, r4
 8009c44:	f000 fff2 	bl	800ac2c <__lshift>
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	f103 0901 	add.w	r9, r3, #1
 8009c4e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009c52:	4413      	add	r3, r2
 8009c54:	9305      	str	r3, [sp, #20]
 8009c56:	f00a 0301 	and.w	r3, sl, #1
 8009c5a:	46b8      	mov	r8, r7
 8009c5c:	9304      	str	r3, [sp, #16]
 8009c5e:	4607      	mov	r7, r0
 8009c60:	4631      	mov	r1, r6
 8009c62:	ee18 0a10 	vmov	r0, s16
 8009c66:	f7ff fa75 	bl	8009154 <quorem>
 8009c6a:	4641      	mov	r1, r8
 8009c6c:	9002      	str	r0, [sp, #8]
 8009c6e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009c72:	ee18 0a10 	vmov	r0, s16
 8009c76:	f001 f849 	bl	800ad0c <__mcmp>
 8009c7a:	463a      	mov	r2, r7
 8009c7c:	9003      	str	r0, [sp, #12]
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4620      	mov	r0, r4
 8009c82:	f001 f85f 	bl	800ad44 <__mdiff>
 8009c86:	68c2      	ldr	r2, [r0, #12]
 8009c88:	f109 3bff 	add.w	fp, r9, #4294967295
 8009c8c:	4605      	mov	r5, r0
 8009c8e:	bb02      	cbnz	r2, 8009cd2 <_dtoa_r+0xa62>
 8009c90:	4601      	mov	r1, r0
 8009c92:	ee18 0a10 	vmov	r0, s16
 8009c96:	f001 f839 	bl	800ad0c <__mcmp>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	9207      	str	r2, [sp, #28]
 8009ca2:	f000 fda7 	bl	800a7f4 <_Bfree>
 8009ca6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009caa:	ea43 0102 	orr.w	r1, r3, r2
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	430b      	orrs	r3, r1
 8009cb2:	464d      	mov	r5, r9
 8009cb4:	d10f      	bne.n	8009cd6 <_dtoa_r+0xa66>
 8009cb6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009cba:	d02a      	beq.n	8009d12 <_dtoa_r+0xaa2>
 8009cbc:	9b03      	ldr	r3, [sp, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dd02      	ble.n	8009cc8 <_dtoa_r+0xa58>
 8009cc2:	9b02      	ldr	r3, [sp, #8]
 8009cc4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009cc8:	f88b a000 	strb.w	sl, [fp]
 8009ccc:	e775      	b.n	8009bba <_dtoa_r+0x94a>
 8009cce:	4638      	mov	r0, r7
 8009cd0:	e7ba      	b.n	8009c48 <_dtoa_r+0x9d8>
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	e7e2      	b.n	8009c9c <_dtoa_r+0xa2c>
 8009cd6:	9b03      	ldr	r3, [sp, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	db04      	blt.n	8009ce6 <_dtoa_r+0xa76>
 8009cdc:	9906      	ldr	r1, [sp, #24]
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	9904      	ldr	r1, [sp, #16]
 8009ce2:	430b      	orrs	r3, r1
 8009ce4:	d122      	bne.n	8009d2c <_dtoa_r+0xabc>
 8009ce6:	2a00      	cmp	r2, #0
 8009ce8:	ddee      	ble.n	8009cc8 <_dtoa_r+0xa58>
 8009cea:	ee18 1a10 	vmov	r1, s16
 8009cee:	2201      	movs	r2, #1
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 ff9b 	bl	800ac2c <__lshift>
 8009cf6:	4631      	mov	r1, r6
 8009cf8:	ee08 0a10 	vmov	s16, r0
 8009cfc:	f001 f806 	bl	800ad0c <__mcmp>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	dc03      	bgt.n	8009d0c <_dtoa_r+0xa9c>
 8009d04:	d1e0      	bne.n	8009cc8 <_dtoa_r+0xa58>
 8009d06:	f01a 0f01 	tst.w	sl, #1
 8009d0a:	d0dd      	beq.n	8009cc8 <_dtoa_r+0xa58>
 8009d0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d10:	d1d7      	bne.n	8009cc2 <_dtoa_r+0xa52>
 8009d12:	2339      	movs	r3, #57	; 0x39
 8009d14:	f88b 3000 	strb.w	r3, [fp]
 8009d18:	462b      	mov	r3, r5
 8009d1a:	461d      	mov	r5, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d22:	2a39      	cmp	r2, #57	; 0x39
 8009d24:	d071      	beq.n	8009e0a <_dtoa_r+0xb9a>
 8009d26:	3201      	adds	r2, #1
 8009d28:	701a      	strb	r2, [r3, #0]
 8009d2a:	e746      	b.n	8009bba <_dtoa_r+0x94a>
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	dd07      	ble.n	8009d40 <_dtoa_r+0xad0>
 8009d30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d34:	d0ed      	beq.n	8009d12 <_dtoa_r+0xaa2>
 8009d36:	f10a 0301 	add.w	r3, sl, #1
 8009d3a:	f88b 3000 	strb.w	r3, [fp]
 8009d3e:	e73c      	b.n	8009bba <_dtoa_r+0x94a>
 8009d40:	9b05      	ldr	r3, [sp, #20]
 8009d42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009d46:	4599      	cmp	r9, r3
 8009d48:	d047      	beq.n	8009dda <_dtoa_r+0xb6a>
 8009d4a:	ee18 1a10 	vmov	r1, s16
 8009d4e:	2300      	movs	r3, #0
 8009d50:	220a      	movs	r2, #10
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fd70 	bl	800a838 <__multadd>
 8009d58:	45b8      	cmp	r8, r7
 8009d5a:	ee08 0a10 	vmov	s16, r0
 8009d5e:	f04f 0300 	mov.w	r3, #0
 8009d62:	f04f 020a 	mov.w	r2, #10
 8009d66:	4641      	mov	r1, r8
 8009d68:	4620      	mov	r0, r4
 8009d6a:	d106      	bne.n	8009d7a <_dtoa_r+0xb0a>
 8009d6c:	f000 fd64 	bl	800a838 <__multadd>
 8009d70:	4680      	mov	r8, r0
 8009d72:	4607      	mov	r7, r0
 8009d74:	f109 0901 	add.w	r9, r9, #1
 8009d78:	e772      	b.n	8009c60 <_dtoa_r+0x9f0>
 8009d7a:	f000 fd5d 	bl	800a838 <__multadd>
 8009d7e:	4639      	mov	r1, r7
 8009d80:	4680      	mov	r8, r0
 8009d82:	2300      	movs	r3, #0
 8009d84:	220a      	movs	r2, #10
 8009d86:	4620      	mov	r0, r4
 8009d88:	f000 fd56 	bl	800a838 <__multadd>
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	e7f1      	b.n	8009d74 <_dtoa_r+0xb04>
 8009d90:	9b03      	ldr	r3, [sp, #12]
 8009d92:	9302      	str	r3, [sp, #8]
 8009d94:	9d01      	ldr	r5, [sp, #4]
 8009d96:	ee18 0a10 	vmov	r0, s16
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	f7ff f9da 	bl	8009154 <quorem>
 8009da0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009da4:	9b01      	ldr	r3, [sp, #4]
 8009da6:	f805 ab01 	strb.w	sl, [r5], #1
 8009daa:	1aea      	subs	r2, r5, r3
 8009dac:	9b02      	ldr	r3, [sp, #8]
 8009dae:	4293      	cmp	r3, r2
 8009db0:	dd09      	ble.n	8009dc6 <_dtoa_r+0xb56>
 8009db2:	ee18 1a10 	vmov	r1, s16
 8009db6:	2300      	movs	r3, #0
 8009db8:	220a      	movs	r2, #10
 8009dba:	4620      	mov	r0, r4
 8009dbc:	f000 fd3c 	bl	800a838 <__multadd>
 8009dc0:	ee08 0a10 	vmov	s16, r0
 8009dc4:	e7e7      	b.n	8009d96 <_dtoa_r+0xb26>
 8009dc6:	9b02      	ldr	r3, [sp, #8]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	bfc8      	it	gt
 8009dcc:	461d      	movgt	r5, r3
 8009dce:	9b01      	ldr	r3, [sp, #4]
 8009dd0:	bfd8      	it	le
 8009dd2:	2501      	movle	r5, #1
 8009dd4:	441d      	add	r5, r3
 8009dd6:	f04f 0800 	mov.w	r8, #0
 8009dda:	ee18 1a10 	vmov	r1, s16
 8009dde:	2201      	movs	r2, #1
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 ff23 	bl	800ac2c <__lshift>
 8009de6:	4631      	mov	r1, r6
 8009de8:	ee08 0a10 	vmov	s16, r0
 8009dec:	f000 ff8e 	bl	800ad0c <__mcmp>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	dc91      	bgt.n	8009d18 <_dtoa_r+0xaa8>
 8009df4:	d102      	bne.n	8009dfc <_dtoa_r+0xb8c>
 8009df6:	f01a 0f01 	tst.w	sl, #1
 8009dfa:	d18d      	bne.n	8009d18 <_dtoa_r+0xaa8>
 8009dfc:	462b      	mov	r3, r5
 8009dfe:	461d      	mov	r5, r3
 8009e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e04:	2a30      	cmp	r2, #48	; 0x30
 8009e06:	d0fa      	beq.n	8009dfe <_dtoa_r+0xb8e>
 8009e08:	e6d7      	b.n	8009bba <_dtoa_r+0x94a>
 8009e0a:	9a01      	ldr	r2, [sp, #4]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d184      	bne.n	8009d1a <_dtoa_r+0xaaa>
 8009e10:	9b00      	ldr	r3, [sp, #0]
 8009e12:	3301      	adds	r3, #1
 8009e14:	9300      	str	r3, [sp, #0]
 8009e16:	2331      	movs	r3, #49	; 0x31
 8009e18:	7013      	strb	r3, [r2, #0]
 8009e1a:	e6ce      	b.n	8009bba <_dtoa_r+0x94a>
 8009e1c:	4b09      	ldr	r3, [pc, #36]	; (8009e44 <_dtoa_r+0xbd4>)
 8009e1e:	f7ff ba95 	b.w	800934c <_dtoa_r+0xdc>
 8009e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f47f aa6e 	bne.w	8009306 <_dtoa_r+0x96>
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <_dtoa_r+0xbd8>)
 8009e2c:	f7ff ba8e 	b.w	800934c <_dtoa_r+0xdc>
 8009e30:	9b02      	ldr	r3, [sp, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	dcae      	bgt.n	8009d94 <_dtoa_r+0xb24>
 8009e36:	9b06      	ldr	r3, [sp, #24]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	f73f aea8 	bgt.w	8009b8e <_dtoa_r+0x91e>
 8009e3e:	e7a9      	b.n	8009d94 <_dtoa_r+0xb24>
 8009e40:	0800c1f0 	.word	0x0800c1f0
 8009e44:	0800bff4 	.word	0x0800bff4
 8009e48:	0800c171 	.word	0x0800c171

08009e4c <std>:
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	b510      	push	{r4, lr}
 8009e50:	4604      	mov	r4, r0
 8009e52:	e9c0 3300 	strd	r3, r3, [r0]
 8009e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e5a:	6083      	str	r3, [r0, #8]
 8009e5c:	8181      	strh	r1, [r0, #12]
 8009e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e60:	81c2      	strh	r2, [r0, #14]
 8009e62:	6183      	str	r3, [r0, #24]
 8009e64:	4619      	mov	r1, r3
 8009e66:	2208      	movs	r2, #8
 8009e68:	305c      	adds	r0, #92	; 0x5c
 8009e6a:	f7fd fbfd 	bl	8007668 <memset>
 8009e6e:	4b05      	ldr	r3, [pc, #20]	; (8009e84 <std+0x38>)
 8009e70:	6263      	str	r3, [r4, #36]	; 0x24
 8009e72:	4b05      	ldr	r3, [pc, #20]	; (8009e88 <std+0x3c>)
 8009e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e76:	4b05      	ldr	r3, [pc, #20]	; (8009e8c <std+0x40>)
 8009e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e7a:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <std+0x44>)
 8009e7c:	6224      	str	r4, [r4, #32]
 8009e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e80:	bd10      	pop	{r4, pc}
 8009e82:	bf00      	nop
 8009e84:	0800b881 	.word	0x0800b881
 8009e88:	0800b8a3 	.word	0x0800b8a3
 8009e8c:	0800b8db 	.word	0x0800b8db
 8009e90:	0800b8ff 	.word	0x0800b8ff

08009e94 <_cleanup_r>:
 8009e94:	4901      	ldr	r1, [pc, #4]	; (8009e9c <_cleanup_r+0x8>)
 8009e96:	f000 b8af 	b.w	8009ff8 <_fwalk_reent>
 8009e9a:	bf00      	nop
 8009e9c:	0800bc59 	.word	0x0800bc59

08009ea0 <__sfmoreglue>:
 8009ea0:	b570      	push	{r4, r5, r6, lr}
 8009ea2:	2268      	movs	r2, #104	; 0x68
 8009ea4:	1e4d      	subs	r5, r1, #1
 8009ea6:	4355      	muls	r5, r2
 8009ea8:	460e      	mov	r6, r1
 8009eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009eae:	f001 f9a5 	bl	800b1fc <_malloc_r>
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	b140      	cbz	r0, 8009ec8 <__sfmoreglue+0x28>
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8009ebc:	300c      	adds	r0, #12
 8009ebe:	60a0      	str	r0, [r4, #8]
 8009ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ec4:	f7fd fbd0 	bl	8007668 <memset>
 8009ec8:	4620      	mov	r0, r4
 8009eca:	bd70      	pop	{r4, r5, r6, pc}

08009ecc <__sfp_lock_acquire>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__sfp_lock_acquire+0x8>)
 8009ece:	f000 bc26 	b.w	800a71e <__retarget_lock_acquire_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20000409 	.word	0x20000409

08009ed8 <__sfp_lock_release>:
 8009ed8:	4801      	ldr	r0, [pc, #4]	; (8009ee0 <__sfp_lock_release+0x8>)
 8009eda:	f000 bc21 	b.w	800a720 <__retarget_lock_release_recursive>
 8009ede:	bf00      	nop
 8009ee0:	20000409 	.word	0x20000409

08009ee4 <__sinit_lock_acquire>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__sinit_lock_acquire+0x8>)
 8009ee6:	f000 bc1a 	b.w	800a71e <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	2000040a 	.word	0x2000040a

08009ef0 <__sinit_lock_release>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__sinit_lock_release+0x8>)
 8009ef2:	f000 bc15 	b.w	800a720 <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	2000040a 	.word	0x2000040a

08009efc <__sinit>:
 8009efc:	b510      	push	{r4, lr}
 8009efe:	4604      	mov	r4, r0
 8009f00:	f7ff fff0 	bl	8009ee4 <__sinit_lock_acquire>
 8009f04:	69a3      	ldr	r3, [r4, #24]
 8009f06:	b11b      	cbz	r3, 8009f10 <__sinit+0x14>
 8009f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f0c:	f7ff bff0 	b.w	8009ef0 <__sinit_lock_release>
 8009f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f14:	6523      	str	r3, [r4, #80]	; 0x50
 8009f16:	4b13      	ldr	r3, [pc, #76]	; (8009f64 <__sinit+0x68>)
 8009f18:	4a13      	ldr	r2, [pc, #76]	; (8009f68 <__sinit+0x6c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f1e:	42a3      	cmp	r3, r4
 8009f20:	bf04      	itt	eq
 8009f22:	2301      	moveq	r3, #1
 8009f24:	61a3      	streq	r3, [r4, #24]
 8009f26:	4620      	mov	r0, r4
 8009f28:	f000 f820 	bl	8009f6c <__sfp>
 8009f2c:	6060      	str	r0, [r4, #4]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	f000 f81c 	bl	8009f6c <__sfp>
 8009f34:	60a0      	str	r0, [r4, #8]
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 f818 	bl	8009f6c <__sfp>
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	60e0      	str	r0, [r4, #12]
 8009f40:	2104      	movs	r1, #4
 8009f42:	6860      	ldr	r0, [r4, #4]
 8009f44:	f7ff ff82 	bl	8009e4c <std>
 8009f48:	68a0      	ldr	r0, [r4, #8]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	2109      	movs	r1, #9
 8009f4e:	f7ff ff7d 	bl	8009e4c <std>
 8009f52:	68e0      	ldr	r0, [r4, #12]
 8009f54:	2202      	movs	r2, #2
 8009f56:	2112      	movs	r1, #18
 8009f58:	f7ff ff78 	bl	8009e4c <std>
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	61a3      	str	r3, [r4, #24]
 8009f60:	e7d2      	b.n	8009f08 <__sinit+0xc>
 8009f62:	bf00      	nop
 8009f64:	0800bfe0 	.word	0x0800bfe0
 8009f68:	08009e95 	.word	0x08009e95

08009f6c <__sfp>:
 8009f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f6e:	4607      	mov	r7, r0
 8009f70:	f7ff ffac 	bl	8009ecc <__sfp_lock_acquire>
 8009f74:	4b1e      	ldr	r3, [pc, #120]	; (8009ff0 <__sfp+0x84>)
 8009f76:	681e      	ldr	r6, [r3, #0]
 8009f78:	69b3      	ldr	r3, [r6, #24]
 8009f7a:	b913      	cbnz	r3, 8009f82 <__sfp+0x16>
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f7ff ffbd 	bl	8009efc <__sinit>
 8009f82:	3648      	adds	r6, #72	; 0x48
 8009f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	d503      	bpl.n	8009f94 <__sfp+0x28>
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	b30b      	cbz	r3, 8009fd4 <__sfp+0x68>
 8009f90:	6836      	ldr	r6, [r6, #0]
 8009f92:	e7f7      	b.n	8009f84 <__sfp+0x18>
 8009f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f98:	b9d5      	cbnz	r5, 8009fd0 <__sfp+0x64>
 8009f9a:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <__sfp+0x88>)
 8009f9c:	60e3      	str	r3, [r4, #12]
 8009f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8009fa4:	f000 fbba 	bl	800a71c <__retarget_lock_init_recursive>
 8009fa8:	f7ff ff96 	bl	8009ed8 <__sfp_lock_release>
 8009fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009fb4:	6025      	str	r5, [r4, #0]
 8009fb6:	61a5      	str	r5, [r4, #24]
 8009fb8:	2208      	movs	r2, #8
 8009fba:	4629      	mov	r1, r5
 8009fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fc0:	f7fd fb52 	bl	8007668 <memset>
 8009fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fcc:	4620      	mov	r0, r4
 8009fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd0:	3468      	adds	r4, #104	; 0x68
 8009fd2:	e7d9      	b.n	8009f88 <__sfp+0x1c>
 8009fd4:	2104      	movs	r1, #4
 8009fd6:	4638      	mov	r0, r7
 8009fd8:	f7ff ff62 	bl	8009ea0 <__sfmoreglue>
 8009fdc:	4604      	mov	r4, r0
 8009fde:	6030      	str	r0, [r6, #0]
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	d1d5      	bne.n	8009f90 <__sfp+0x24>
 8009fe4:	f7ff ff78 	bl	8009ed8 <__sfp_lock_release>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	e7ee      	b.n	8009fcc <__sfp+0x60>
 8009fee:	bf00      	nop
 8009ff0:	0800bfe0 	.word	0x0800bfe0
 8009ff4:	ffff0001 	.word	0xffff0001

08009ff8 <_fwalk_reent>:
 8009ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	4606      	mov	r6, r0
 8009ffe:	4688      	mov	r8, r1
 800a000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a004:	2700      	movs	r7, #0
 800a006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a00a:	f1b9 0901 	subs.w	r9, r9, #1
 800a00e:	d505      	bpl.n	800a01c <_fwalk_reent+0x24>
 800a010:	6824      	ldr	r4, [r4, #0]
 800a012:	2c00      	cmp	r4, #0
 800a014:	d1f7      	bne.n	800a006 <_fwalk_reent+0xe>
 800a016:	4638      	mov	r0, r7
 800a018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a01c:	89ab      	ldrh	r3, [r5, #12]
 800a01e:	2b01      	cmp	r3, #1
 800a020:	d907      	bls.n	800a032 <_fwalk_reent+0x3a>
 800a022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a026:	3301      	adds	r3, #1
 800a028:	d003      	beq.n	800a032 <_fwalk_reent+0x3a>
 800a02a:	4629      	mov	r1, r5
 800a02c:	4630      	mov	r0, r6
 800a02e:	47c0      	blx	r8
 800a030:	4307      	orrs	r7, r0
 800a032:	3568      	adds	r5, #104	; 0x68
 800a034:	e7e9      	b.n	800a00a <_fwalk_reent+0x12>

0800a036 <rshift>:
 800a036:	6903      	ldr	r3, [r0, #16]
 800a038:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a03c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a040:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a044:	f100 0414 	add.w	r4, r0, #20
 800a048:	dd45      	ble.n	800a0d6 <rshift+0xa0>
 800a04a:	f011 011f 	ands.w	r1, r1, #31
 800a04e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a052:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a056:	d10c      	bne.n	800a072 <rshift+0x3c>
 800a058:	f100 0710 	add.w	r7, r0, #16
 800a05c:	4629      	mov	r1, r5
 800a05e:	42b1      	cmp	r1, r6
 800a060:	d334      	bcc.n	800a0cc <rshift+0x96>
 800a062:	1a9b      	subs	r3, r3, r2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	1eea      	subs	r2, r5, #3
 800a068:	4296      	cmp	r6, r2
 800a06a:	bf38      	it	cc
 800a06c:	2300      	movcc	r3, #0
 800a06e:	4423      	add	r3, r4
 800a070:	e015      	b.n	800a09e <rshift+0x68>
 800a072:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a076:	f1c1 0820 	rsb	r8, r1, #32
 800a07a:	40cf      	lsrs	r7, r1
 800a07c:	f105 0e04 	add.w	lr, r5, #4
 800a080:	46a1      	mov	r9, r4
 800a082:	4576      	cmp	r6, lr
 800a084:	46f4      	mov	ip, lr
 800a086:	d815      	bhi.n	800a0b4 <rshift+0x7e>
 800a088:	1a9a      	subs	r2, r3, r2
 800a08a:	0092      	lsls	r2, r2, #2
 800a08c:	3a04      	subs	r2, #4
 800a08e:	3501      	adds	r5, #1
 800a090:	42ae      	cmp	r6, r5
 800a092:	bf38      	it	cc
 800a094:	2200      	movcc	r2, #0
 800a096:	18a3      	adds	r3, r4, r2
 800a098:	50a7      	str	r7, [r4, r2]
 800a09a:	b107      	cbz	r7, 800a09e <rshift+0x68>
 800a09c:	3304      	adds	r3, #4
 800a09e:	1b1a      	subs	r2, r3, r4
 800a0a0:	42a3      	cmp	r3, r4
 800a0a2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0a6:	bf08      	it	eq
 800a0a8:	2300      	moveq	r3, #0
 800a0aa:	6102      	str	r2, [r0, #16]
 800a0ac:	bf08      	it	eq
 800a0ae:	6143      	streq	r3, [r0, #20]
 800a0b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0b4:	f8dc c000 	ldr.w	ip, [ip]
 800a0b8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0bc:	ea4c 0707 	orr.w	r7, ip, r7
 800a0c0:	f849 7b04 	str.w	r7, [r9], #4
 800a0c4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0c8:	40cf      	lsrs	r7, r1
 800a0ca:	e7da      	b.n	800a082 <rshift+0x4c>
 800a0cc:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0d0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0d4:	e7c3      	b.n	800a05e <rshift+0x28>
 800a0d6:	4623      	mov	r3, r4
 800a0d8:	e7e1      	b.n	800a09e <rshift+0x68>

0800a0da <__hexdig_fun>:
 800a0da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a0de:	2b09      	cmp	r3, #9
 800a0e0:	d802      	bhi.n	800a0e8 <__hexdig_fun+0xe>
 800a0e2:	3820      	subs	r0, #32
 800a0e4:	b2c0      	uxtb	r0, r0
 800a0e6:	4770      	bx	lr
 800a0e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a0ec:	2b05      	cmp	r3, #5
 800a0ee:	d801      	bhi.n	800a0f4 <__hexdig_fun+0x1a>
 800a0f0:	3847      	subs	r0, #71	; 0x47
 800a0f2:	e7f7      	b.n	800a0e4 <__hexdig_fun+0xa>
 800a0f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a0f8:	2b05      	cmp	r3, #5
 800a0fa:	d801      	bhi.n	800a100 <__hexdig_fun+0x26>
 800a0fc:	3827      	subs	r0, #39	; 0x27
 800a0fe:	e7f1      	b.n	800a0e4 <__hexdig_fun+0xa>
 800a100:	2000      	movs	r0, #0
 800a102:	4770      	bx	lr

0800a104 <__gethex>:
 800a104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	ed2d 8b02 	vpush	{d8}
 800a10c:	b089      	sub	sp, #36	; 0x24
 800a10e:	ee08 0a10 	vmov	s16, r0
 800a112:	9304      	str	r3, [sp, #16]
 800a114:	4bb4      	ldr	r3, [pc, #720]	; (800a3e8 <__gethex+0x2e4>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	4618      	mov	r0, r3
 800a11c:	468b      	mov	fp, r1
 800a11e:	4690      	mov	r8, r2
 800a120:	f7f6 f856 	bl	80001d0 <strlen>
 800a124:	9b01      	ldr	r3, [sp, #4]
 800a126:	f8db 2000 	ldr.w	r2, [fp]
 800a12a:	4403      	add	r3, r0
 800a12c:	4682      	mov	sl, r0
 800a12e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a132:	9305      	str	r3, [sp, #20]
 800a134:	1c93      	adds	r3, r2, #2
 800a136:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a13a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a13e:	32fe      	adds	r2, #254	; 0xfe
 800a140:	18d1      	adds	r1, r2, r3
 800a142:	461f      	mov	r7, r3
 800a144:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a148:	9100      	str	r1, [sp, #0]
 800a14a:	2830      	cmp	r0, #48	; 0x30
 800a14c:	d0f8      	beq.n	800a140 <__gethex+0x3c>
 800a14e:	f7ff ffc4 	bl	800a0da <__hexdig_fun>
 800a152:	4604      	mov	r4, r0
 800a154:	2800      	cmp	r0, #0
 800a156:	d13a      	bne.n	800a1ce <__gethex+0xca>
 800a158:	9901      	ldr	r1, [sp, #4]
 800a15a:	4652      	mov	r2, sl
 800a15c:	4638      	mov	r0, r7
 800a15e:	f001 fbd2 	bl	800b906 <strncmp>
 800a162:	4605      	mov	r5, r0
 800a164:	2800      	cmp	r0, #0
 800a166:	d168      	bne.n	800a23a <__gethex+0x136>
 800a168:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a16c:	eb07 060a 	add.w	r6, r7, sl
 800a170:	f7ff ffb3 	bl	800a0da <__hexdig_fun>
 800a174:	2800      	cmp	r0, #0
 800a176:	d062      	beq.n	800a23e <__gethex+0x13a>
 800a178:	4633      	mov	r3, r6
 800a17a:	7818      	ldrb	r0, [r3, #0]
 800a17c:	2830      	cmp	r0, #48	; 0x30
 800a17e:	461f      	mov	r7, r3
 800a180:	f103 0301 	add.w	r3, r3, #1
 800a184:	d0f9      	beq.n	800a17a <__gethex+0x76>
 800a186:	f7ff ffa8 	bl	800a0da <__hexdig_fun>
 800a18a:	2301      	movs	r3, #1
 800a18c:	fab0 f480 	clz	r4, r0
 800a190:	0964      	lsrs	r4, r4, #5
 800a192:	4635      	mov	r5, r6
 800a194:	9300      	str	r3, [sp, #0]
 800a196:	463a      	mov	r2, r7
 800a198:	4616      	mov	r6, r2
 800a19a:	3201      	adds	r2, #1
 800a19c:	7830      	ldrb	r0, [r6, #0]
 800a19e:	f7ff ff9c 	bl	800a0da <__hexdig_fun>
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d1f8      	bne.n	800a198 <__gethex+0x94>
 800a1a6:	9901      	ldr	r1, [sp, #4]
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f001 fbab 	bl	800b906 <strncmp>
 800a1b0:	b980      	cbnz	r0, 800a1d4 <__gethex+0xd0>
 800a1b2:	b94d      	cbnz	r5, 800a1c8 <__gethex+0xc4>
 800a1b4:	eb06 050a 	add.w	r5, r6, sl
 800a1b8:	462a      	mov	r2, r5
 800a1ba:	4616      	mov	r6, r2
 800a1bc:	3201      	adds	r2, #1
 800a1be:	7830      	ldrb	r0, [r6, #0]
 800a1c0:	f7ff ff8b 	bl	800a0da <__hexdig_fun>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1f8      	bne.n	800a1ba <__gethex+0xb6>
 800a1c8:	1bad      	subs	r5, r5, r6
 800a1ca:	00ad      	lsls	r5, r5, #2
 800a1cc:	e004      	b.n	800a1d8 <__gethex+0xd4>
 800a1ce:	2400      	movs	r4, #0
 800a1d0:	4625      	mov	r5, r4
 800a1d2:	e7e0      	b.n	800a196 <__gethex+0x92>
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	d1f7      	bne.n	800a1c8 <__gethex+0xc4>
 800a1d8:	7833      	ldrb	r3, [r6, #0]
 800a1da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1de:	2b50      	cmp	r3, #80	; 0x50
 800a1e0:	d13b      	bne.n	800a25a <__gethex+0x156>
 800a1e2:	7873      	ldrb	r3, [r6, #1]
 800a1e4:	2b2b      	cmp	r3, #43	; 0x2b
 800a1e6:	d02c      	beq.n	800a242 <__gethex+0x13e>
 800a1e8:	2b2d      	cmp	r3, #45	; 0x2d
 800a1ea:	d02e      	beq.n	800a24a <__gethex+0x146>
 800a1ec:	1c71      	adds	r1, r6, #1
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	7808      	ldrb	r0, [r1, #0]
 800a1f4:	f7ff ff71 	bl	800a0da <__hexdig_fun>
 800a1f8:	1e43      	subs	r3, r0, #1
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	2b18      	cmp	r3, #24
 800a1fe:	d82c      	bhi.n	800a25a <__gethex+0x156>
 800a200:	f1a0 0210 	sub.w	r2, r0, #16
 800a204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a208:	f7ff ff67 	bl	800a0da <__hexdig_fun>
 800a20c:	1e43      	subs	r3, r0, #1
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b18      	cmp	r3, #24
 800a212:	d91d      	bls.n	800a250 <__gethex+0x14c>
 800a214:	f1b9 0f00 	cmp.w	r9, #0
 800a218:	d000      	beq.n	800a21c <__gethex+0x118>
 800a21a:	4252      	negs	r2, r2
 800a21c:	4415      	add	r5, r2
 800a21e:	f8cb 1000 	str.w	r1, [fp]
 800a222:	b1e4      	cbz	r4, 800a25e <__gethex+0x15a>
 800a224:	9b00      	ldr	r3, [sp, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	bf14      	ite	ne
 800a22a:	2700      	movne	r7, #0
 800a22c:	2706      	moveq	r7, #6
 800a22e:	4638      	mov	r0, r7
 800a230:	b009      	add	sp, #36	; 0x24
 800a232:	ecbd 8b02 	vpop	{d8}
 800a236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a23a:	463e      	mov	r6, r7
 800a23c:	4625      	mov	r5, r4
 800a23e:	2401      	movs	r4, #1
 800a240:	e7ca      	b.n	800a1d8 <__gethex+0xd4>
 800a242:	f04f 0900 	mov.w	r9, #0
 800a246:	1cb1      	adds	r1, r6, #2
 800a248:	e7d3      	b.n	800a1f2 <__gethex+0xee>
 800a24a:	f04f 0901 	mov.w	r9, #1
 800a24e:	e7fa      	b.n	800a246 <__gethex+0x142>
 800a250:	230a      	movs	r3, #10
 800a252:	fb03 0202 	mla	r2, r3, r2, r0
 800a256:	3a10      	subs	r2, #16
 800a258:	e7d4      	b.n	800a204 <__gethex+0x100>
 800a25a:	4631      	mov	r1, r6
 800a25c:	e7df      	b.n	800a21e <__gethex+0x11a>
 800a25e:	1bf3      	subs	r3, r6, r7
 800a260:	3b01      	subs	r3, #1
 800a262:	4621      	mov	r1, r4
 800a264:	2b07      	cmp	r3, #7
 800a266:	dc0b      	bgt.n	800a280 <__gethex+0x17c>
 800a268:	ee18 0a10 	vmov	r0, s16
 800a26c:	f000 fa82 	bl	800a774 <_Balloc>
 800a270:	4604      	mov	r4, r0
 800a272:	b940      	cbnz	r0, 800a286 <__gethex+0x182>
 800a274:	4b5d      	ldr	r3, [pc, #372]	; (800a3ec <__gethex+0x2e8>)
 800a276:	4602      	mov	r2, r0
 800a278:	21de      	movs	r1, #222	; 0xde
 800a27a:	485d      	ldr	r0, [pc, #372]	; (800a3f0 <__gethex+0x2ec>)
 800a27c:	f001 fc38 	bl	800baf0 <__assert_func>
 800a280:	3101      	adds	r1, #1
 800a282:	105b      	asrs	r3, r3, #1
 800a284:	e7ee      	b.n	800a264 <__gethex+0x160>
 800a286:	f100 0914 	add.w	r9, r0, #20
 800a28a:	f04f 0b00 	mov.w	fp, #0
 800a28e:	f1ca 0301 	rsb	r3, sl, #1
 800a292:	f8cd 9008 	str.w	r9, [sp, #8]
 800a296:	f8cd b000 	str.w	fp, [sp]
 800a29a:	9306      	str	r3, [sp, #24]
 800a29c:	42b7      	cmp	r7, r6
 800a29e:	d340      	bcc.n	800a322 <__gethex+0x21e>
 800a2a0:	9802      	ldr	r0, [sp, #8]
 800a2a2:	9b00      	ldr	r3, [sp, #0]
 800a2a4:	f840 3b04 	str.w	r3, [r0], #4
 800a2a8:	eba0 0009 	sub.w	r0, r0, r9
 800a2ac:	1080      	asrs	r0, r0, #2
 800a2ae:	0146      	lsls	r6, r0, #5
 800a2b0:	6120      	str	r0, [r4, #16]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 fb50 	bl	800a958 <__hi0bits>
 800a2b8:	1a30      	subs	r0, r6, r0
 800a2ba:	f8d8 6000 	ldr.w	r6, [r8]
 800a2be:	42b0      	cmp	r0, r6
 800a2c0:	dd63      	ble.n	800a38a <__gethex+0x286>
 800a2c2:	1b87      	subs	r7, r0, r6
 800a2c4:	4639      	mov	r1, r7
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	f000 fef4 	bl	800b0b4 <__any_on>
 800a2cc:	4682      	mov	sl, r0
 800a2ce:	b1a8      	cbz	r0, 800a2fc <__gethex+0x1f8>
 800a2d0:	1e7b      	subs	r3, r7, #1
 800a2d2:	1159      	asrs	r1, r3, #5
 800a2d4:	f003 021f 	and.w	r2, r3, #31
 800a2d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a2dc:	f04f 0a01 	mov.w	sl, #1
 800a2e0:	fa0a f202 	lsl.w	r2, sl, r2
 800a2e4:	420a      	tst	r2, r1
 800a2e6:	d009      	beq.n	800a2fc <__gethex+0x1f8>
 800a2e8:	4553      	cmp	r3, sl
 800a2ea:	dd05      	ble.n	800a2f8 <__gethex+0x1f4>
 800a2ec:	1eb9      	subs	r1, r7, #2
 800a2ee:	4620      	mov	r0, r4
 800a2f0:	f000 fee0 	bl	800b0b4 <__any_on>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d145      	bne.n	800a384 <__gethex+0x280>
 800a2f8:	f04f 0a02 	mov.w	sl, #2
 800a2fc:	4639      	mov	r1, r7
 800a2fe:	4620      	mov	r0, r4
 800a300:	f7ff fe99 	bl	800a036 <rshift>
 800a304:	443d      	add	r5, r7
 800a306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a30a:	42ab      	cmp	r3, r5
 800a30c:	da4c      	bge.n	800a3a8 <__gethex+0x2a4>
 800a30e:	ee18 0a10 	vmov	r0, s16
 800a312:	4621      	mov	r1, r4
 800a314:	f000 fa6e 	bl	800a7f4 <_Bfree>
 800a318:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a31a:	2300      	movs	r3, #0
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	27a3      	movs	r7, #163	; 0xa3
 800a320:	e785      	b.n	800a22e <__gethex+0x12a>
 800a322:	1e73      	subs	r3, r6, #1
 800a324:	9a05      	ldr	r2, [sp, #20]
 800a326:	9303      	str	r3, [sp, #12]
 800a328:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d019      	beq.n	800a364 <__gethex+0x260>
 800a330:	f1bb 0f20 	cmp.w	fp, #32
 800a334:	d107      	bne.n	800a346 <__gethex+0x242>
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	9a00      	ldr	r2, [sp, #0]
 800a33a:	f843 2b04 	str.w	r2, [r3], #4
 800a33e:	9302      	str	r3, [sp, #8]
 800a340:	2300      	movs	r3, #0
 800a342:	9300      	str	r3, [sp, #0]
 800a344:	469b      	mov	fp, r3
 800a346:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a34a:	f7ff fec6 	bl	800a0da <__hexdig_fun>
 800a34e:	9b00      	ldr	r3, [sp, #0]
 800a350:	f000 000f 	and.w	r0, r0, #15
 800a354:	fa00 f00b 	lsl.w	r0, r0, fp
 800a358:	4303      	orrs	r3, r0
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	f10b 0b04 	add.w	fp, fp, #4
 800a360:	9b03      	ldr	r3, [sp, #12]
 800a362:	e00d      	b.n	800a380 <__gethex+0x27c>
 800a364:	9b03      	ldr	r3, [sp, #12]
 800a366:	9a06      	ldr	r2, [sp, #24]
 800a368:	4413      	add	r3, r2
 800a36a:	42bb      	cmp	r3, r7
 800a36c:	d3e0      	bcc.n	800a330 <__gethex+0x22c>
 800a36e:	4618      	mov	r0, r3
 800a370:	9901      	ldr	r1, [sp, #4]
 800a372:	9307      	str	r3, [sp, #28]
 800a374:	4652      	mov	r2, sl
 800a376:	f001 fac6 	bl	800b906 <strncmp>
 800a37a:	9b07      	ldr	r3, [sp, #28]
 800a37c:	2800      	cmp	r0, #0
 800a37e:	d1d7      	bne.n	800a330 <__gethex+0x22c>
 800a380:	461e      	mov	r6, r3
 800a382:	e78b      	b.n	800a29c <__gethex+0x198>
 800a384:	f04f 0a03 	mov.w	sl, #3
 800a388:	e7b8      	b.n	800a2fc <__gethex+0x1f8>
 800a38a:	da0a      	bge.n	800a3a2 <__gethex+0x29e>
 800a38c:	1a37      	subs	r7, r6, r0
 800a38e:	4621      	mov	r1, r4
 800a390:	ee18 0a10 	vmov	r0, s16
 800a394:	463a      	mov	r2, r7
 800a396:	f000 fc49 	bl	800ac2c <__lshift>
 800a39a:	1bed      	subs	r5, r5, r7
 800a39c:	4604      	mov	r4, r0
 800a39e:	f100 0914 	add.w	r9, r0, #20
 800a3a2:	f04f 0a00 	mov.w	sl, #0
 800a3a6:	e7ae      	b.n	800a306 <__gethex+0x202>
 800a3a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3ac:	42a8      	cmp	r0, r5
 800a3ae:	dd72      	ble.n	800a496 <__gethex+0x392>
 800a3b0:	1b45      	subs	r5, r0, r5
 800a3b2:	42ae      	cmp	r6, r5
 800a3b4:	dc36      	bgt.n	800a424 <__gethex+0x320>
 800a3b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d02a      	beq.n	800a414 <__gethex+0x310>
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d02c      	beq.n	800a41c <__gethex+0x318>
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d11c      	bne.n	800a400 <__gethex+0x2fc>
 800a3c6:	42ae      	cmp	r6, r5
 800a3c8:	d11a      	bne.n	800a400 <__gethex+0x2fc>
 800a3ca:	2e01      	cmp	r6, #1
 800a3cc:	d112      	bne.n	800a3f4 <__gethex+0x2f0>
 800a3ce:	9a04      	ldr	r2, [sp, #16]
 800a3d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3d4:	6013      	str	r3, [r2, #0]
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	6123      	str	r3, [r4, #16]
 800a3da:	f8c9 3000 	str.w	r3, [r9]
 800a3de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3e0:	2762      	movs	r7, #98	; 0x62
 800a3e2:	601c      	str	r4, [r3, #0]
 800a3e4:	e723      	b.n	800a22e <__gethex+0x12a>
 800a3e6:	bf00      	nop
 800a3e8:	0800c2cc 	.word	0x0800c2cc
 800a3ec:	0800c1f0 	.word	0x0800c1f0
 800a3f0:	0800c264 	.word	0x0800c264
 800a3f4:	1e71      	subs	r1, r6, #1
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	f000 fe5c 	bl	800b0b4 <__any_on>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d1e6      	bne.n	800a3ce <__gethex+0x2ca>
 800a400:	ee18 0a10 	vmov	r0, s16
 800a404:	4621      	mov	r1, r4
 800a406:	f000 f9f5 	bl	800a7f4 <_Bfree>
 800a40a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a40c:	2300      	movs	r3, #0
 800a40e:	6013      	str	r3, [r2, #0]
 800a410:	2750      	movs	r7, #80	; 0x50
 800a412:	e70c      	b.n	800a22e <__gethex+0x12a>
 800a414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1f2      	bne.n	800a400 <__gethex+0x2fc>
 800a41a:	e7d8      	b.n	800a3ce <__gethex+0x2ca>
 800a41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1d5      	bne.n	800a3ce <__gethex+0x2ca>
 800a422:	e7ed      	b.n	800a400 <__gethex+0x2fc>
 800a424:	1e6f      	subs	r7, r5, #1
 800a426:	f1ba 0f00 	cmp.w	sl, #0
 800a42a:	d131      	bne.n	800a490 <__gethex+0x38c>
 800a42c:	b127      	cbz	r7, 800a438 <__gethex+0x334>
 800a42e:	4639      	mov	r1, r7
 800a430:	4620      	mov	r0, r4
 800a432:	f000 fe3f 	bl	800b0b4 <__any_on>
 800a436:	4682      	mov	sl, r0
 800a438:	117b      	asrs	r3, r7, #5
 800a43a:	2101      	movs	r1, #1
 800a43c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a440:	f007 071f 	and.w	r7, r7, #31
 800a444:	fa01 f707 	lsl.w	r7, r1, r7
 800a448:	421f      	tst	r7, r3
 800a44a:	4629      	mov	r1, r5
 800a44c:	4620      	mov	r0, r4
 800a44e:	bf18      	it	ne
 800a450:	f04a 0a02 	orrne.w	sl, sl, #2
 800a454:	1b76      	subs	r6, r6, r5
 800a456:	f7ff fdee 	bl	800a036 <rshift>
 800a45a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a45e:	2702      	movs	r7, #2
 800a460:	f1ba 0f00 	cmp.w	sl, #0
 800a464:	d048      	beq.n	800a4f8 <__gethex+0x3f4>
 800a466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d015      	beq.n	800a49a <__gethex+0x396>
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d017      	beq.n	800a4a2 <__gethex+0x39e>
 800a472:	2b01      	cmp	r3, #1
 800a474:	d109      	bne.n	800a48a <__gethex+0x386>
 800a476:	f01a 0f02 	tst.w	sl, #2
 800a47a:	d006      	beq.n	800a48a <__gethex+0x386>
 800a47c:	f8d9 0000 	ldr.w	r0, [r9]
 800a480:	ea4a 0a00 	orr.w	sl, sl, r0
 800a484:	f01a 0f01 	tst.w	sl, #1
 800a488:	d10e      	bne.n	800a4a8 <__gethex+0x3a4>
 800a48a:	f047 0710 	orr.w	r7, r7, #16
 800a48e:	e033      	b.n	800a4f8 <__gethex+0x3f4>
 800a490:	f04f 0a01 	mov.w	sl, #1
 800a494:	e7d0      	b.n	800a438 <__gethex+0x334>
 800a496:	2701      	movs	r7, #1
 800a498:	e7e2      	b.n	800a460 <__gethex+0x35c>
 800a49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a49c:	f1c3 0301 	rsb	r3, r3, #1
 800a4a0:	9315      	str	r3, [sp, #84]	; 0x54
 800a4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d0f0      	beq.n	800a48a <__gethex+0x386>
 800a4a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4ac:	f104 0314 	add.w	r3, r4, #20
 800a4b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a4b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a4b8:	f04f 0c00 	mov.w	ip, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a4c6:	d01c      	beq.n	800a502 <__gethex+0x3fe>
 800a4c8:	3201      	adds	r2, #1
 800a4ca:	6002      	str	r2, [r0, #0]
 800a4cc:	2f02      	cmp	r7, #2
 800a4ce:	f104 0314 	add.w	r3, r4, #20
 800a4d2:	d13f      	bne.n	800a554 <__gethex+0x450>
 800a4d4:	f8d8 2000 	ldr.w	r2, [r8]
 800a4d8:	3a01      	subs	r2, #1
 800a4da:	42b2      	cmp	r2, r6
 800a4dc:	d10a      	bne.n	800a4f4 <__gethex+0x3f0>
 800a4de:	1171      	asrs	r1, r6, #5
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a4e6:	f006 061f 	and.w	r6, r6, #31
 800a4ea:	fa02 f606 	lsl.w	r6, r2, r6
 800a4ee:	421e      	tst	r6, r3
 800a4f0:	bf18      	it	ne
 800a4f2:	4617      	movne	r7, r2
 800a4f4:	f047 0720 	orr.w	r7, r7, #32
 800a4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a4fa:	601c      	str	r4, [r3, #0]
 800a4fc:	9b04      	ldr	r3, [sp, #16]
 800a4fe:	601d      	str	r5, [r3, #0]
 800a500:	e695      	b.n	800a22e <__gethex+0x12a>
 800a502:	4299      	cmp	r1, r3
 800a504:	f843 cc04 	str.w	ip, [r3, #-4]
 800a508:	d8d8      	bhi.n	800a4bc <__gethex+0x3b8>
 800a50a:	68a3      	ldr	r3, [r4, #8]
 800a50c:	459b      	cmp	fp, r3
 800a50e:	db19      	blt.n	800a544 <__gethex+0x440>
 800a510:	6861      	ldr	r1, [r4, #4]
 800a512:	ee18 0a10 	vmov	r0, s16
 800a516:	3101      	adds	r1, #1
 800a518:	f000 f92c 	bl	800a774 <_Balloc>
 800a51c:	4681      	mov	r9, r0
 800a51e:	b918      	cbnz	r0, 800a528 <__gethex+0x424>
 800a520:	4b1a      	ldr	r3, [pc, #104]	; (800a58c <__gethex+0x488>)
 800a522:	4602      	mov	r2, r0
 800a524:	2184      	movs	r1, #132	; 0x84
 800a526:	e6a8      	b.n	800a27a <__gethex+0x176>
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	3202      	adds	r2, #2
 800a52c:	f104 010c 	add.w	r1, r4, #12
 800a530:	0092      	lsls	r2, r2, #2
 800a532:	300c      	adds	r0, #12
 800a534:	f000 f910 	bl	800a758 <memcpy>
 800a538:	4621      	mov	r1, r4
 800a53a:	ee18 0a10 	vmov	r0, s16
 800a53e:	f000 f959 	bl	800a7f4 <_Bfree>
 800a542:	464c      	mov	r4, r9
 800a544:	6923      	ldr	r3, [r4, #16]
 800a546:	1c5a      	adds	r2, r3, #1
 800a548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a54c:	6122      	str	r2, [r4, #16]
 800a54e:	2201      	movs	r2, #1
 800a550:	615a      	str	r2, [r3, #20]
 800a552:	e7bb      	b.n	800a4cc <__gethex+0x3c8>
 800a554:	6922      	ldr	r2, [r4, #16]
 800a556:	455a      	cmp	r2, fp
 800a558:	dd0b      	ble.n	800a572 <__gethex+0x46e>
 800a55a:	2101      	movs	r1, #1
 800a55c:	4620      	mov	r0, r4
 800a55e:	f7ff fd6a 	bl	800a036 <rshift>
 800a562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a566:	3501      	adds	r5, #1
 800a568:	42ab      	cmp	r3, r5
 800a56a:	f6ff aed0 	blt.w	800a30e <__gethex+0x20a>
 800a56e:	2701      	movs	r7, #1
 800a570:	e7c0      	b.n	800a4f4 <__gethex+0x3f0>
 800a572:	f016 061f 	ands.w	r6, r6, #31
 800a576:	d0fa      	beq.n	800a56e <__gethex+0x46a>
 800a578:	4453      	add	r3, sl
 800a57a:	f1c6 0620 	rsb	r6, r6, #32
 800a57e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a582:	f000 f9e9 	bl	800a958 <__hi0bits>
 800a586:	42b0      	cmp	r0, r6
 800a588:	dbe7      	blt.n	800a55a <__gethex+0x456>
 800a58a:	e7f0      	b.n	800a56e <__gethex+0x46a>
 800a58c:	0800c1f0 	.word	0x0800c1f0

0800a590 <L_shift>:
 800a590:	f1c2 0208 	rsb	r2, r2, #8
 800a594:	0092      	lsls	r2, r2, #2
 800a596:	b570      	push	{r4, r5, r6, lr}
 800a598:	f1c2 0620 	rsb	r6, r2, #32
 800a59c:	6843      	ldr	r3, [r0, #4]
 800a59e:	6804      	ldr	r4, [r0, #0]
 800a5a0:	fa03 f506 	lsl.w	r5, r3, r6
 800a5a4:	432c      	orrs	r4, r5
 800a5a6:	40d3      	lsrs	r3, r2
 800a5a8:	6004      	str	r4, [r0, #0]
 800a5aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5ae:	4288      	cmp	r0, r1
 800a5b0:	d3f4      	bcc.n	800a59c <L_shift+0xc>
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}

0800a5b4 <__match>:
 800a5b4:	b530      	push	{r4, r5, lr}
 800a5b6:	6803      	ldr	r3, [r0, #0]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5be:	b914      	cbnz	r4, 800a5c6 <__match+0x12>
 800a5c0:	6003      	str	r3, [r0, #0]
 800a5c2:	2001      	movs	r0, #1
 800a5c4:	bd30      	pop	{r4, r5, pc}
 800a5c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a5ce:	2d19      	cmp	r5, #25
 800a5d0:	bf98      	it	ls
 800a5d2:	3220      	addls	r2, #32
 800a5d4:	42a2      	cmp	r2, r4
 800a5d6:	d0f0      	beq.n	800a5ba <__match+0x6>
 800a5d8:	2000      	movs	r0, #0
 800a5da:	e7f3      	b.n	800a5c4 <__match+0x10>

0800a5dc <__hexnan>:
 800a5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e0:	680b      	ldr	r3, [r1, #0]
 800a5e2:	115e      	asrs	r6, r3, #5
 800a5e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a5e8:	f013 031f 	ands.w	r3, r3, #31
 800a5ec:	b087      	sub	sp, #28
 800a5ee:	bf18      	it	ne
 800a5f0:	3604      	addne	r6, #4
 800a5f2:	2500      	movs	r5, #0
 800a5f4:	1f37      	subs	r7, r6, #4
 800a5f6:	4690      	mov	r8, r2
 800a5f8:	6802      	ldr	r2, [r0, #0]
 800a5fa:	9301      	str	r3, [sp, #4]
 800a5fc:	4682      	mov	sl, r0
 800a5fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800a602:	46b9      	mov	r9, r7
 800a604:	463c      	mov	r4, r7
 800a606:	9502      	str	r5, [sp, #8]
 800a608:	46ab      	mov	fp, r5
 800a60a:	7851      	ldrb	r1, [r2, #1]
 800a60c:	1c53      	adds	r3, r2, #1
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	b341      	cbz	r1, 800a664 <__hexnan+0x88>
 800a612:	4608      	mov	r0, r1
 800a614:	9205      	str	r2, [sp, #20]
 800a616:	9104      	str	r1, [sp, #16]
 800a618:	f7ff fd5f 	bl	800a0da <__hexdig_fun>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d14f      	bne.n	800a6c0 <__hexnan+0xe4>
 800a620:	9904      	ldr	r1, [sp, #16]
 800a622:	9a05      	ldr	r2, [sp, #20]
 800a624:	2920      	cmp	r1, #32
 800a626:	d818      	bhi.n	800a65a <__hexnan+0x7e>
 800a628:	9b02      	ldr	r3, [sp, #8]
 800a62a:	459b      	cmp	fp, r3
 800a62c:	dd13      	ble.n	800a656 <__hexnan+0x7a>
 800a62e:	454c      	cmp	r4, r9
 800a630:	d206      	bcs.n	800a640 <__hexnan+0x64>
 800a632:	2d07      	cmp	r5, #7
 800a634:	dc04      	bgt.n	800a640 <__hexnan+0x64>
 800a636:	462a      	mov	r2, r5
 800a638:	4649      	mov	r1, r9
 800a63a:	4620      	mov	r0, r4
 800a63c:	f7ff ffa8 	bl	800a590 <L_shift>
 800a640:	4544      	cmp	r4, r8
 800a642:	d950      	bls.n	800a6e6 <__hexnan+0x10a>
 800a644:	2300      	movs	r3, #0
 800a646:	f1a4 0904 	sub.w	r9, r4, #4
 800a64a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a64e:	f8cd b008 	str.w	fp, [sp, #8]
 800a652:	464c      	mov	r4, r9
 800a654:	461d      	mov	r5, r3
 800a656:	9a03      	ldr	r2, [sp, #12]
 800a658:	e7d7      	b.n	800a60a <__hexnan+0x2e>
 800a65a:	2929      	cmp	r1, #41	; 0x29
 800a65c:	d156      	bne.n	800a70c <__hexnan+0x130>
 800a65e:	3202      	adds	r2, #2
 800a660:	f8ca 2000 	str.w	r2, [sl]
 800a664:	f1bb 0f00 	cmp.w	fp, #0
 800a668:	d050      	beq.n	800a70c <__hexnan+0x130>
 800a66a:	454c      	cmp	r4, r9
 800a66c:	d206      	bcs.n	800a67c <__hexnan+0xa0>
 800a66e:	2d07      	cmp	r5, #7
 800a670:	dc04      	bgt.n	800a67c <__hexnan+0xa0>
 800a672:	462a      	mov	r2, r5
 800a674:	4649      	mov	r1, r9
 800a676:	4620      	mov	r0, r4
 800a678:	f7ff ff8a 	bl	800a590 <L_shift>
 800a67c:	4544      	cmp	r4, r8
 800a67e:	d934      	bls.n	800a6ea <__hexnan+0x10e>
 800a680:	f1a8 0204 	sub.w	r2, r8, #4
 800a684:	4623      	mov	r3, r4
 800a686:	f853 1b04 	ldr.w	r1, [r3], #4
 800a68a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a68e:	429f      	cmp	r7, r3
 800a690:	d2f9      	bcs.n	800a686 <__hexnan+0xaa>
 800a692:	1b3b      	subs	r3, r7, r4
 800a694:	f023 0303 	bic.w	r3, r3, #3
 800a698:	3304      	adds	r3, #4
 800a69a:	3401      	adds	r4, #1
 800a69c:	3e03      	subs	r6, #3
 800a69e:	42b4      	cmp	r4, r6
 800a6a0:	bf88      	it	hi
 800a6a2:	2304      	movhi	r3, #4
 800a6a4:	4443      	add	r3, r8
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f843 2b04 	str.w	r2, [r3], #4
 800a6ac:	429f      	cmp	r7, r3
 800a6ae:	d2fb      	bcs.n	800a6a8 <__hexnan+0xcc>
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	b91b      	cbnz	r3, 800a6bc <__hexnan+0xe0>
 800a6b4:	4547      	cmp	r7, r8
 800a6b6:	d127      	bne.n	800a708 <__hexnan+0x12c>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	603b      	str	r3, [r7, #0]
 800a6bc:	2005      	movs	r0, #5
 800a6be:	e026      	b.n	800a70e <__hexnan+0x132>
 800a6c0:	3501      	adds	r5, #1
 800a6c2:	2d08      	cmp	r5, #8
 800a6c4:	f10b 0b01 	add.w	fp, fp, #1
 800a6c8:	dd06      	ble.n	800a6d8 <__hexnan+0xfc>
 800a6ca:	4544      	cmp	r4, r8
 800a6cc:	d9c3      	bls.n	800a656 <__hexnan+0x7a>
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a6d4:	2501      	movs	r5, #1
 800a6d6:	3c04      	subs	r4, #4
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	f000 000f 	and.w	r0, r0, #15
 800a6de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a6e2:	6022      	str	r2, [r4, #0]
 800a6e4:	e7b7      	b.n	800a656 <__hexnan+0x7a>
 800a6e6:	2508      	movs	r5, #8
 800a6e8:	e7b5      	b.n	800a656 <__hexnan+0x7a>
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0df      	beq.n	800a6b0 <__hexnan+0xd4>
 800a6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6f4:	f1c3 0320 	rsb	r3, r3, #32
 800a6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a700:	401a      	ands	r2, r3
 800a702:	f846 2c04 	str.w	r2, [r6, #-4]
 800a706:	e7d3      	b.n	800a6b0 <__hexnan+0xd4>
 800a708:	3f04      	subs	r7, #4
 800a70a:	e7d1      	b.n	800a6b0 <__hexnan+0xd4>
 800a70c:	2004      	movs	r0, #4
 800a70e:	b007      	add	sp, #28
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a714 <_localeconv_r>:
 800a714:	4800      	ldr	r0, [pc, #0]	; (800a718 <_localeconv_r+0x4>)
 800a716:	4770      	bx	lr
 800a718:	20000168 	.word	0x20000168

0800a71c <__retarget_lock_init_recursive>:
 800a71c:	4770      	bx	lr

0800a71e <__retarget_lock_acquire_recursive>:
 800a71e:	4770      	bx	lr

0800a720 <__retarget_lock_release_recursive>:
 800a720:	4770      	bx	lr
	...

0800a724 <malloc>:
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <malloc+0xc>)
 800a726:	4601      	mov	r1, r0
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	f000 bd67 	b.w	800b1fc <_malloc_r>
 800a72e:	bf00      	nop
 800a730:	20000010 	.word	0x20000010

0800a734 <__ascii_mbtowc>:
 800a734:	b082      	sub	sp, #8
 800a736:	b901      	cbnz	r1, 800a73a <__ascii_mbtowc+0x6>
 800a738:	a901      	add	r1, sp, #4
 800a73a:	b142      	cbz	r2, 800a74e <__ascii_mbtowc+0x1a>
 800a73c:	b14b      	cbz	r3, 800a752 <__ascii_mbtowc+0x1e>
 800a73e:	7813      	ldrb	r3, [r2, #0]
 800a740:	600b      	str	r3, [r1, #0]
 800a742:	7812      	ldrb	r2, [r2, #0]
 800a744:	1e10      	subs	r0, r2, #0
 800a746:	bf18      	it	ne
 800a748:	2001      	movne	r0, #1
 800a74a:	b002      	add	sp, #8
 800a74c:	4770      	bx	lr
 800a74e:	4610      	mov	r0, r2
 800a750:	e7fb      	b.n	800a74a <__ascii_mbtowc+0x16>
 800a752:	f06f 0001 	mvn.w	r0, #1
 800a756:	e7f8      	b.n	800a74a <__ascii_mbtowc+0x16>

0800a758 <memcpy>:
 800a758:	440a      	add	r2, r1
 800a75a:	4291      	cmp	r1, r2
 800a75c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a760:	d100      	bne.n	800a764 <memcpy+0xc>
 800a762:	4770      	bx	lr
 800a764:	b510      	push	{r4, lr}
 800a766:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a76a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a76e:	4291      	cmp	r1, r2
 800a770:	d1f9      	bne.n	800a766 <memcpy+0xe>
 800a772:	bd10      	pop	{r4, pc}

0800a774 <_Balloc>:
 800a774:	b570      	push	{r4, r5, r6, lr}
 800a776:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a778:	4604      	mov	r4, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	b976      	cbnz	r6, 800a79c <_Balloc+0x28>
 800a77e:	2010      	movs	r0, #16
 800a780:	f7ff ffd0 	bl	800a724 <malloc>
 800a784:	4602      	mov	r2, r0
 800a786:	6260      	str	r0, [r4, #36]	; 0x24
 800a788:	b920      	cbnz	r0, 800a794 <_Balloc+0x20>
 800a78a:	4b18      	ldr	r3, [pc, #96]	; (800a7ec <_Balloc+0x78>)
 800a78c:	4818      	ldr	r0, [pc, #96]	; (800a7f0 <_Balloc+0x7c>)
 800a78e:	2166      	movs	r1, #102	; 0x66
 800a790:	f001 f9ae 	bl	800baf0 <__assert_func>
 800a794:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a798:	6006      	str	r6, [r0, #0]
 800a79a:	60c6      	str	r6, [r0, #12]
 800a79c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a79e:	68f3      	ldr	r3, [r6, #12]
 800a7a0:	b183      	cbz	r3, 800a7c4 <_Balloc+0x50>
 800a7a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7a4:	68db      	ldr	r3, [r3, #12]
 800a7a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a7aa:	b9b8      	cbnz	r0, 800a7dc <_Balloc+0x68>
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	fa01 f605 	lsl.w	r6, r1, r5
 800a7b2:	1d72      	adds	r2, r6, #5
 800a7b4:	0092      	lsls	r2, r2, #2
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 fc9d 	bl	800b0f6 <_calloc_r>
 800a7bc:	b160      	cbz	r0, 800a7d8 <_Balloc+0x64>
 800a7be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7c2:	e00e      	b.n	800a7e2 <_Balloc+0x6e>
 800a7c4:	2221      	movs	r2, #33	; 0x21
 800a7c6:	2104      	movs	r1, #4
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fc94 	bl	800b0f6 <_calloc_r>
 800a7ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7d0:	60f0      	str	r0, [r6, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e4      	bne.n	800a7a2 <_Balloc+0x2e>
 800a7d8:	2000      	movs	r0, #0
 800a7da:	bd70      	pop	{r4, r5, r6, pc}
 800a7dc:	6802      	ldr	r2, [r0, #0]
 800a7de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7e8:	e7f7      	b.n	800a7da <_Balloc+0x66>
 800a7ea:	bf00      	nop
 800a7ec:	0800c17e 	.word	0x0800c17e
 800a7f0:	0800c2e0 	.word	0x0800c2e0

0800a7f4 <_Bfree>:
 800a7f4:	b570      	push	{r4, r5, r6, lr}
 800a7f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7f8:	4605      	mov	r5, r0
 800a7fa:	460c      	mov	r4, r1
 800a7fc:	b976      	cbnz	r6, 800a81c <_Bfree+0x28>
 800a7fe:	2010      	movs	r0, #16
 800a800:	f7ff ff90 	bl	800a724 <malloc>
 800a804:	4602      	mov	r2, r0
 800a806:	6268      	str	r0, [r5, #36]	; 0x24
 800a808:	b920      	cbnz	r0, 800a814 <_Bfree+0x20>
 800a80a:	4b09      	ldr	r3, [pc, #36]	; (800a830 <_Bfree+0x3c>)
 800a80c:	4809      	ldr	r0, [pc, #36]	; (800a834 <_Bfree+0x40>)
 800a80e:	218a      	movs	r1, #138	; 0x8a
 800a810:	f001 f96e 	bl	800baf0 <__assert_func>
 800a814:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a818:	6006      	str	r6, [r0, #0]
 800a81a:	60c6      	str	r6, [r0, #12]
 800a81c:	b13c      	cbz	r4, 800a82e <_Bfree+0x3a>
 800a81e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a820:	6862      	ldr	r2, [r4, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a828:	6021      	str	r1, [r4, #0]
 800a82a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a82e:	bd70      	pop	{r4, r5, r6, pc}
 800a830:	0800c17e 	.word	0x0800c17e
 800a834:	0800c2e0 	.word	0x0800c2e0

0800a838 <__multadd>:
 800a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	690d      	ldr	r5, [r1, #16]
 800a83e:	4607      	mov	r7, r0
 800a840:	460c      	mov	r4, r1
 800a842:	461e      	mov	r6, r3
 800a844:	f101 0c14 	add.w	ip, r1, #20
 800a848:	2000      	movs	r0, #0
 800a84a:	f8dc 3000 	ldr.w	r3, [ip]
 800a84e:	b299      	uxth	r1, r3
 800a850:	fb02 6101 	mla	r1, r2, r1, r6
 800a854:	0c1e      	lsrs	r6, r3, #16
 800a856:	0c0b      	lsrs	r3, r1, #16
 800a858:	fb02 3306 	mla	r3, r2, r6, r3
 800a85c:	b289      	uxth	r1, r1
 800a85e:	3001      	adds	r0, #1
 800a860:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a864:	4285      	cmp	r5, r0
 800a866:	f84c 1b04 	str.w	r1, [ip], #4
 800a86a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a86e:	dcec      	bgt.n	800a84a <__multadd+0x12>
 800a870:	b30e      	cbz	r6, 800a8b6 <__multadd+0x7e>
 800a872:	68a3      	ldr	r3, [r4, #8]
 800a874:	42ab      	cmp	r3, r5
 800a876:	dc19      	bgt.n	800a8ac <__multadd+0x74>
 800a878:	6861      	ldr	r1, [r4, #4]
 800a87a:	4638      	mov	r0, r7
 800a87c:	3101      	adds	r1, #1
 800a87e:	f7ff ff79 	bl	800a774 <_Balloc>
 800a882:	4680      	mov	r8, r0
 800a884:	b928      	cbnz	r0, 800a892 <__multadd+0x5a>
 800a886:	4602      	mov	r2, r0
 800a888:	4b0c      	ldr	r3, [pc, #48]	; (800a8bc <__multadd+0x84>)
 800a88a:	480d      	ldr	r0, [pc, #52]	; (800a8c0 <__multadd+0x88>)
 800a88c:	21b5      	movs	r1, #181	; 0xb5
 800a88e:	f001 f92f 	bl	800baf0 <__assert_func>
 800a892:	6922      	ldr	r2, [r4, #16]
 800a894:	3202      	adds	r2, #2
 800a896:	f104 010c 	add.w	r1, r4, #12
 800a89a:	0092      	lsls	r2, r2, #2
 800a89c:	300c      	adds	r0, #12
 800a89e:	f7ff ff5b 	bl	800a758 <memcpy>
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	4638      	mov	r0, r7
 800a8a6:	f7ff ffa5 	bl	800a7f4 <_Bfree>
 800a8aa:	4644      	mov	r4, r8
 800a8ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8b0:	3501      	adds	r5, #1
 800a8b2:	615e      	str	r6, [r3, #20]
 800a8b4:	6125      	str	r5, [r4, #16]
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8bc:	0800c1f0 	.word	0x0800c1f0
 800a8c0:	0800c2e0 	.word	0x0800c2e0

0800a8c4 <__s2b>:
 800a8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	4615      	mov	r5, r2
 800a8cc:	461f      	mov	r7, r3
 800a8ce:	2209      	movs	r2, #9
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d8:	2100      	movs	r1, #0
 800a8da:	2201      	movs	r2, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	db09      	blt.n	800a8f4 <__s2b+0x30>
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	f7ff ff47 	bl	800a774 <_Balloc>
 800a8e6:	b940      	cbnz	r0, 800a8fa <__s2b+0x36>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	4b19      	ldr	r3, [pc, #100]	; (800a950 <__s2b+0x8c>)
 800a8ec:	4819      	ldr	r0, [pc, #100]	; (800a954 <__s2b+0x90>)
 800a8ee:	21ce      	movs	r1, #206	; 0xce
 800a8f0:	f001 f8fe 	bl	800baf0 <__assert_func>
 800a8f4:	0052      	lsls	r2, r2, #1
 800a8f6:	3101      	adds	r1, #1
 800a8f8:	e7f0      	b.n	800a8dc <__s2b+0x18>
 800a8fa:	9b08      	ldr	r3, [sp, #32]
 800a8fc:	6143      	str	r3, [r0, #20]
 800a8fe:	2d09      	cmp	r5, #9
 800a900:	f04f 0301 	mov.w	r3, #1
 800a904:	6103      	str	r3, [r0, #16]
 800a906:	dd16      	ble.n	800a936 <__s2b+0x72>
 800a908:	f104 0909 	add.w	r9, r4, #9
 800a90c:	46c8      	mov	r8, r9
 800a90e:	442c      	add	r4, r5
 800a910:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a914:	4601      	mov	r1, r0
 800a916:	3b30      	subs	r3, #48	; 0x30
 800a918:	220a      	movs	r2, #10
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff8c 	bl	800a838 <__multadd>
 800a920:	45a0      	cmp	r8, r4
 800a922:	d1f5      	bne.n	800a910 <__s2b+0x4c>
 800a924:	f1a5 0408 	sub.w	r4, r5, #8
 800a928:	444c      	add	r4, r9
 800a92a:	1b2d      	subs	r5, r5, r4
 800a92c:	1963      	adds	r3, r4, r5
 800a92e:	42bb      	cmp	r3, r7
 800a930:	db04      	blt.n	800a93c <__s2b+0x78>
 800a932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a936:	340a      	adds	r4, #10
 800a938:	2509      	movs	r5, #9
 800a93a:	e7f6      	b.n	800a92a <__s2b+0x66>
 800a93c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a940:	4601      	mov	r1, r0
 800a942:	3b30      	subs	r3, #48	; 0x30
 800a944:	220a      	movs	r2, #10
 800a946:	4630      	mov	r0, r6
 800a948:	f7ff ff76 	bl	800a838 <__multadd>
 800a94c:	e7ee      	b.n	800a92c <__s2b+0x68>
 800a94e:	bf00      	nop
 800a950:	0800c1f0 	.word	0x0800c1f0
 800a954:	0800c2e0 	.word	0x0800c2e0

0800a958 <__hi0bits>:
 800a958:	0c03      	lsrs	r3, r0, #16
 800a95a:	041b      	lsls	r3, r3, #16
 800a95c:	b9d3      	cbnz	r3, 800a994 <__hi0bits+0x3c>
 800a95e:	0400      	lsls	r0, r0, #16
 800a960:	2310      	movs	r3, #16
 800a962:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a966:	bf04      	itt	eq
 800a968:	0200      	lsleq	r0, r0, #8
 800a96a:	3308      	addeq	r3, #8
 800a96c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a970:	bf04      	itt	eq
 800a972:	0100      	lsleq	r0, r0, #4
 800a974:	3304      	addeq	r3, #4
 800a976:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a97a:	bf04      	itt	eq
 800a97c:	0080      	lsleq	r0, r0, #2
 800a97e:	3302      	addeq	r3, #2
 800a980:	2800      	cmp	r0, #0
 800a982:	db05      	blt.n	800a990 <__hi0bits+0x38>
 800a984:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a988:	f103 0301 	add.w	r3, r3, #1
 800a98c:	bf08      	it	eq
 800a98e:	2320      	moveq	r3, #32
 800a990:	4618      	mov	r0, r3
 800a992:	4770      	bx	lr
 800a994:	2300      	movs	r3, #0
 800a996:	e7e4      	b.n	800a962 <__hi0bits+0xa>

0800a998 <__lo0bits>:
 800a998:	6803      	ldr	r3, [r0, #0]
 800a99a:	f013 0207 	ands.w	r2, r3, #7
 800a99e:	4601      	mov	r1, r0
 800a9a0:	d00b      	beq.n	800a9ba <__lo0bits+0x22>
 800a9a2:	07da      	lsls	r2, r3, #31
 800a9a4:	d423      	bmi.n	800a9ee <__lo0bits+0x56>
 800a9a6:	0798      	lsls	r0, r3, #30
 800a9a8:	bf49      	itett	mi
 800a9aa:	085b      	lsrmi	r3, r3, #1
 800a9ac:	089b      	lsrpl	r3, r3, #2
 800a9ae:	2001      	movmi	r0, #1
 800a9b0:	600b      	strmi	r3, [r1, #0]
 800a9b2:	bf5c      	itt	pl
 800a9b4:	600b      	strpl	r3, [r1, #0]
 800a9b6:	2002      	movpl	r0, #2
 800a9b8:	4770      	bx	lr
 800a9ba:	b298      	uxth	r0, r3
 800a9bc:	b9a8      	cbnz	r0, 800a9ea <__lo0bits+0x52>
 800a9be:	0c1b      	lsrs	r3, r3, #16
 800a9c0:	2010      	movs	r0, #16
 800a9c2:	b2da      	uxtb	r2, r3
 800a9c4:	b90a      	cbnz	r2, 800a9ca <__lo0bits+0x32>
 800a9c6:	3008      	adds	r0, #8
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	071a      	lsls	r2, r3, #28
 800a9cc:	bf04      	itt	eq
 800a9ce:	091b      	lsreq	r3, r3, #4
 800a9d0:	3004      	addeq	r0, #4
 800a9d2:	079a      	lsls	r2, r3, #30
 800a9d4:	bf04      	itt	eq
 800a9d6:	089b      	lsreq	r3, r3, #2
 800a9d8:	3002      	addeq	r0, #2
 800a9da:	07da      	lsls	r2, r3, #31
 800a9dc:	d403      	bmi.n	800a9e6 <__lo0bits+0x4e>
 800a9de:	085b      	lsrs	r3, r3, #1
 800a9e0:	f100 0001 	add.w	r0, r0, #1
 800a9e4:	d005      	beq.n	800a9f2 <__lo0bits+0x5a>
 800a9e6:	600b      	str	r3, [r1, #0]
 800a9e8:	4770      	bx	lr
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	e7e9      	b.n	800a9c2 <__lo0bits+0x2a>
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	4770      	bx	lr
 800a9f2:	2020      	movs	r0, #32
 800a9f4:	4770      	bx	lr
	...

0800a9f8 <__i2b>:
 800a9f8:	b510      	push	{r4, lr}
 800a9fa:	460c      	mov	r4, r1
 800a9fc:	2101      	movs	r1, #1
 800a9fe:	f7ff feb9 	bl	800a774 <_Balloc>
 800aa02:	4602      	mov	r2, r0
 800aa04:	b928      	cbnz	r0, 800aa12 <__i2b+0x1a>
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <__i2b+0x24>)
 800aa08:	4805      	ldr	r0, [pc, #20]	; (800aa20 <__i2b+0x28>)
 800aa0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa0e:	f001 f86f 	bl	800baf0 <__assert_func>
 800aa12:	2301      	movs	r3, #1
 800aa14:	6144      	str	r4, [r0, #20]
 800aa16:	6103      	str	r3, [r0, #16]
 800aa18:	bd10      	pop	{r4, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800c1f0 	.word	0x0800c1f0
 800aa20:	0800c2e0 	.word	0x0800c2e0

0800aa24 <__multiply>:
 800aa24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa28:	4691      	mov	r9, r2
 800aa2a:	690a      	ldr	r2, [r1, #16]
 800aa2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	bfb8      	it	lt
 800aa34:	460b      	movlt	r3, r1
 800aa36:	460c      	mov	r4, r1
 800aa38:	bfbc      	itt	lt
 800aa3a:	464c      	movlt	r4, r9
 800aa3c:	4699      	movlt	r9, r3
 800aa3e:	6927      	ldr	r7, [r4, #16]
 800aa40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa44:	68a3      	ldr	r3, [r4, #8]
 800aa46:	6861      	ldr	r1, [r4, #4]
 800aa48:	eb07 060a 	add.w	r6, r7, sl
 800aa4c:	42b3      	cmp	r3, r6
 800aa4e:	b085      	sub	sp, #20
 800aa50:	bfb8      	it	lt
 800aa52:	3101      	addlt	r1, #1
 800aa54:	f7ff fe8e 	bl	800a774 <_Balloc>
 800aa58:	b930      	cbnz	r0, 800aa68 <__multiply+0x44>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	4b44      	ldr	r3, [pc, #272]	; (800ab70 <__multiply+0x14c>)
 800aa5e:	4845      	ldr	r0, [pc, #276]	; (800ab74 <__multiply+0x150>)
 800aa60:	f240 115d 	movw	r1, #349	; 0x15d
 800aa64:	f001 f844 	bl	800baf0 <__assert_func>
 800aa68:	f100 0514 	add.w	r5, r0, #20
 800aa6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa70:	462b      	mov	r3, r5
 800aa72:	2200      	movs	r2, #0
 800aa74:	4543      	cmp	r3, r8
 800aa76:	d321      	bcc.n	800aabc <__multiply+0x98>
 800aa78:	f104 0314 	add.w	r3, r4, #20
 800aa7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa80:	f109 0314 	add.w	r3, r9, #20
 800aa84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa88:	9202      	str	r2, [sp, #8]
 800aa8a:	1b3a      	subs	r2, r7, r4
 800aa8c:	3a15      	subs	r2, #21
 800aa8e:	f022 0203 	bic.w	r2, r2, #3
 800aa92:	3204      	adds	r2, #4
 800aa94:	f104 0115 	add.w	r1, r4, #21
 800aa98:	428f      	cmp	r7, r1
 800aa9a:	bf38      	it	cc
 800aa9c:	2204      	movcc	r2, #4
 800aa9e:	9201      	str	r2, [sp, #4]
 800aaa0:	9a02      	ldr	r2, [sp, #8]
 800aaa2:	9303      	str	r3, [sp, #12]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d80c      	bhi.n	800aac2 <__multiply+0x9e>
 800aaa8:	2e00      	cmp	r6, #0
 800aaaa:	dd03      	ble.n	800aab4 <__multiply+0x90>
 800aaac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d05a      	beq.n	800ab6a <__multiply+0x146>
 800aab4:	6106      	str	r6, [r0, #16]
 800aab6:	b005      	add	sp, #20
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	f843 2b04 	str.w	r2, [r3], #4
 800aac0:	e7d8      	b.n	800aa74 <__multiply+0x50>
 800aac2:	f8b3 a000 	ldrh.w	sl, [r3]
 800aac6:	f1ba 0f00 	cmp.w	sl, #0
 800aaca:	d024      	beq.n	800ab16 <__multiply+0xf2>
 800aacc:	f104 0e14 	add.w	lr, r4, #20
 800aad0:	46a9      	mov	r9, r5
 800aad2:	f04f 0c00 	mov.w	ip, #0
 800aad6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aada:	f8d9 1000 	ldr.w	r1, [r9]
 800aade:	fa1f fb82 	uxth.w	fp, r2
 800aae2:	b289      	uxth	r1, r1
 800aae4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aae8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aaec:	f8d9 2000 	ldr.w	r2, [r9]
 800aaf0:	4461      	add	r1, ip
 800aaf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aafa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aafe:	b289      	uxth	r1, r1
 800ab00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab04:	4577      	cmp	r7, lr
 800ab06:	f849 1b04 	str.w	r1, [r9], #4
 800ab0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab0e:	d8e2      	bhi.n	800aad6 <__multiply+0xb2>
 800ab10:	9a01      	ldr	r2, [sp, #4]
 800ab12:	f845 c002 	str.w	ip, [r5, r2]
 800ab16:	9a03      	ldr	r2, [sp, #12]
 800ab18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	f1b9 0f00 	cmp.w	r9, #0
 800ab22:	d020      	beq.n	800ab66 <__multiply+0x142>
 800ab24:	6829      	ldr	r1, [r5, #0]
 800ab26:	f104 0c14 	add.w	ip, r4, #20
 800ab2a:	46ae      	mov	lr, r5
 800ab2c:	f04f 0a00 	mov.w	sl, #0
 800ab30:	f8bc b000 	ldrh.w	fp, [ip]
 800ab34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab38:	fb09 220b 	mla	r2, r9, fp, r2
 800ab3c:	4492      	add	sl, r2
 800ab3e:	b289      	uxth	r1, r1
 800ab40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab44:	f84e 1b04 	str.w	r1, [lr], #4
 800ab48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab4c:	f8be 1000 	ldrh.w	r1, [lr]
 800ab50:	0c12      	lsrs	r2, r2, #16
 800ab52:	fb09 1102 	mla	r1, r9, r2, r1
 800ab56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab5a:	4567      	cmp	r7, ip
 800ab5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab60:	d8e6      	bhi.n	800ab30 <__multiply+0x10c>
 800ab62:	9a01      	ldr	r2, [sp, #4]
 800ab64:	50a9      	str	r1, [r5, r2]
 800ab66:	3504      	adds	r5, #4
 800ab68:	e79a      	b.n	800aaa0 <__multiply+0x7c>
 800ab6a:	3e01      	subs	r6, #1
 800ab6c:	e79c      	b.n	800aaa8 <__multiply+0x84>
 800ab6e:	bf00      	nop
 800ab70:	0800c1f0 	.word	0x0800c1f0
 800ab74:	0800c2e0 	.word	0x0800c2e0

0800ab78 <__pow5mult>:
 800ab78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab7c:	4615      	mov	r5, r2
 800ab7e:	f012 0203 	ands.w	r2, r2, #3
 800ab82:	4606      	mov	r6, r0
 800ab84:	460f      	mov	r7, r1
 800ab86:	d007      	beq.n	800ab98 <__pow5mult+0x20>
 800ab88:	4c25      	ldr	r4, [pc, #148]	; (800ac20 <__pow5mult+0xa8>)
 800ab8a:	3a01      	subs	r2, #1
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab92:	f7ff fe51 	bl	800a838 <__multadd>
 800ab96:	4607      	mov	r7, r0
 800ab98:	10ad      	asrs	r5, r5, #2
 800ab9a:	d03d      	beq.n	800ac18 <__pow5mult+0xa0>
 800ab9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab9e:	b97c      	cbnz	r4, 800abc0 <__pow5mult+0x48>
 800aba0:	2010      	movs	r0, #16
 800aba2:	f7ff fdbf 	bl	800a724 <malloc>
 800aba6:	4602      	mov	r2, r0
 800aba8:	6270      	str	r0, [r6, #36]	; 0x24
 800abaa:	b928      	cbnz	r0, 800abb8 <__pow5mult+0x40>
 800abac:	4b1d      	ldr	r3, [pc, #116]	; (800ac24 <__pow5mult+0xac>)
 800abae:	481e      	ldr	r0, [pc, #120]	; (800ac28 <__pow5mult+0xb0>)
 800abb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abb4:	f000 ff9c 	bl	800baf0 <__assert_func>
 800abb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abbc:	6004      	str	r4, [r0, #0]
 800abbe:	60c4      	str	r4, [r0, #12]
 800abc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abc8:	b94c      	cbnz	r4, 800abde <__pow5mult+0x66>
 800abca:	f240 2171 	movw	r1, #625	; 0x271
 800abce:	4630      	mov	r0, r6
 800abd0:	f7ff ff12 	bl	800a9f8 <__i2b>
 800abd4:	2300      	movs	r3, #0
 800abd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abda:	4604      	mov	r4, r0
 800abdc:	6003      	str	r3, [r0, #0]
 800abde:	f04f 0900 	mov.w	r9, #0
 800abe2:	07eb      	lsls	r3, r5, #31
 800abe4:	d50a      	bpl.n	800abfc <__pow5mult+0x84>
 800abe6:	4639      	mov	r1, r7
 800abe8:	4622      	mov	r2, r4
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ff1a 	bl	800aa24 <__multiply>
 800abf0:	4639      	mov	r1, r7
 800abf2:	4680      	mov	r8, r0
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff fdfd 	bl	800a7f4 <_Bfree>
 800abfa:	4647      	mov	r7, r8
 800abfc:	106d      	asrs	r5, r5, #1
 800abfe:	d00b      	beq.n	800ac18 <__pow5mult+0xa0>
 800ac00:	6820      	ldr	r0, [r4, #0]
 800ac02:	b938      	cbnz	r0, 800ac14 <__pow5mult+0x9c>
 800ac04:	4622      	mov	r2, r4
 800ac06:	4621      	mov	r1, r4
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff ff0b 	bl	800aa24 <__multiply>
 800ac0e:	6020      	str	r0, [r4, #0]
 800ac10:	f8c0 9000 	str.w	r9, [r0]
 800ac14:	4604      	mov	r4, r0
 800ac16:	e7e4      	b.n	800abe2 <__pow5mult+0x6a>
 800ac18:	4638      	mov	r0, r7
 800ac1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800c430 	.word	0x0800c430
 800ac24:	0800c17e 	.word	0x0800c17e
 800ac28:	0800c2e0 	.word	0x0800c2e0

0800ac2c <__lshift>:
 800ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	6849      	ldr	r1, [r1, #4]
 800ac34:	6923      	ldr	r3, [r4, #16]
 800ac36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac3a:	68a3      	ldr	r3, [r4, #8]
 800ac3c:	4607      	mov	r7, r0
 800ac3e:	4691      	mov	r9, r2
 800ac40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac44:	f108 0601 	add.w	r6, r8, #1
 800ac48:	42b3      	cmp	r3, r6
 800ac4a:	db0b      	blt.n	800ac64 <__lshift+0x38>
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f7ff fd91 	bl	800a774 <_Balloc>
 800ac52:	4605      	mov	r5, r0
 800ac54:	b948      	cbnz	r0, 800ac6a <__lshift+0x3e>
 800ac56:	4602      	mov	r2, r0
 800ac58:	4b2a      	ldr	r3, [pc, #168]	; (800ad04 <__lshift+0xd8>)
 800ac5a:	482b      	ldr	r0, [pc, #172]	; (800ad08 <__lshift+0xdc>)
 800ac5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac60:	f000 ff46 	bl	800baf0 <__assert_func>
 800ac64:	3101      	adds	r1, #1
 800ac66:	005b      	lsls	r3, r3, #1
 800ac68:	e7ee      	b.n	800ac48 <__lshift+0x1c>
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	f100 0114 	add.w	r1, r0, #20
 800ac70:	f100 0210 	add.w	r2, r0, #16
 800ac74:	4618      	mov	r0, r3
 800ac76:	4553      	cmp	r3, sl
 800ac78:	db37      	blt.n	800acea <__lshift+0xbe>
 800ac7a:	6920      	ldr	r0, [r4, #16]
 800ac7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac80:	f104 0314 	add.w	r3, r4, #20
 800ac84:	f019 091f 	ands.w	r9, r9, #31
 800ac88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac90:	d02f      	beq.n	800acf2 <__lshift+0xc6>
 800ac92:	f1c9 0e20 	rsb	lr, r9, #32
 800ac96:	468a      	mov	sl, r1
 800ac98:	f04f 0c00 	mov.w	ip, #0
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	fa02 f209 	lsl.w	r2, r2, r9
 800aca2:	ea42 020c 	orr.w	r2, r2, ip
 800aca6:	f84a 2b04 	str.w	r2, [sl], #4
 800acaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800acae:	4298      	cmp	r0, r3
 800acb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acb4:	d8f2      	bhi.n	800ac9c <__lshift+0x70>
 800acb6:	1b03      	subs	r3, r0, r4
 800acb8:	3b15      	subs	r3, #21
 800acba:	f023 0303 	bic.w	r3, r3, #3
 800acbe:	3304      	adds	r3, #4
 800acc0:	f104 0215 	add.w	r2, r4, #21
 800acc4:	4290      	cmp	r0, r2
 800acc6:	bf38      	it	cc
 800acc8:	2304      	movcc	r3, #4
 800acca:	f841 c003 	str.w	ip, [r1, r3]
 800acce:	f1bc 0f00 	cmp.w	ip, #0
 800acd2:	d001      	beq.n	800acd8 <__lshift+0xac>
 800acd4:	f108 0602 	add.w	r6, r8, #2
 800acd8:	3e01      	subs	r6, #1
 800acda:	4638      	mov	r0, r7
 800acdc:	612e      	str	r6, [r5, #16]
 800acde:	4621      	mov	r1, r4
 800ace0:	f7ff fd88 	bl	800a7f4 <_Bfree>
 800ace4:	4628      	mov	r0, r5
 800ace6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acea:	f842 0f04 	str.w	r0, [r2, #4]!
 800acee:	3301      	adds	r3, #1
 800acf0:	e7c1      	b.n	800ac76 <__lshift+0x4a>
 800acf2:	3904      	subs	r1, #4
 800acf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800acfc:	4298      	cmp	r0, r3
 800acfe:	d8f9      	bhi.n	800acf4 <__lshift+0xc8>
 800ad00:	e7ea      	b.n	800acd8 <__lshift+0xac>
 800ad02:	bf00      	nop
 800ad04:	0800c1f0 	.word	0x0800c1f0
 800ad08:	0800c2e0 	.word	0x0800c2e0

0800ad0c <__mcmp>:
 800ad0c:	b530      	push	{r4, r5, lr}
 800ad0e:	6902      	ldr	r2, [r0, #16]
 800ad10:	690c      	ldr	r4, [r1, #16]
 800ad12:	1b12      	subs	r2, r2, r4
 800ad14:	d10e      	bne.n	800ad34 <__mcmp+0x28>
 800ad16:	f100 0314 	add.w	r3, r0, #20
 800ad1a:	3114      	adds	r1, #20
 800ad1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad2c:	42a5      	cmp	r5, r4
 800ad2e:	d003      	beq.n	800ad38 <__mcmp+0x2c>
 800ad30:	d305      	bcc.n	800ad3e <__mcmp+0x32>
 800ad32:	2201      	movs	r2, #1
 800ad34:	4610      	mov	r0, r2
 800ad36:	bd30      	pop	{r4, r5, pc}
 800ad38:	4283      	cmp	r3, r0
 800ad3a:	d3f3      	bcc.n	800ad24 <__mcmp+0x18>
 800ad3c:	e7fa      	b.n	800ad34 <__mcmp+0x28>
 800ad3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad42:	e7f7      	b.n	800ad34 <__mcmp+0x28>

0800ad44 <__mdiff>:
 800ad44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	460c      	mov	r4, r1
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4690      	mov	r8, r2
 800ad52:	f7ff ffdb 	bl	800ad0c <__mcmp>
 800ad56:	1e05      	subs	r5, r0, #0
 800ad58:	d110      	bne.n	800ad7c <__mdiff+0x38>
 800ad5a:	4629      	mov	r1, r5
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	f7ff fd09 	bl	800a774 <_Balloc>
 800ad62:	b930      	cbnz	r0, 800ad72 <__mdiff+0x2e>
 800ad64:	4b3a      	ldr	r3, [pc, #232]	; (800ae50 <__mdiff+0x10c>)
 800ad66:	4602      	mov	r2, r0
 800ad68:	f240 2132 	movw	r1, #562	; 0x232
 800ad6c:	4839      	ldr	r0, [pc, #228]	; (800ae54 <__mdiff+0x110>)
 800ad6e:	f000 febf 	bl	800baf0 <__assert_func>
 800ad72:	2301      	movs	r3, #1
 800ad74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad7c:	bfa4      	itt	ge
 800ad7e:	4643      	movge	r3, r8
 800ad80:	46a0      	movge	r8, r4
 800ad82:	4630      	mov	r0, r6
 800ad84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad88:	bfa6      	itte	ge
 800ad8a:	461c      	movge	r4, r3
 800ad8c:	2500      	movge	r5, #0
 800ad8e:	2501      	movlt	r5, #1
 800ad90:	f7ff fcf0 	bl	800a774 <_Balloc>
 800ad94:	b920      	cbnz	r0, 800ada0 <__mdiff+0x5c>
 800ad96:	4b2e      	ldr	r3, [pc, #184]	; (800ae50 <__mdiff+0x10c>)
 800ad98:	4602      	mov	r2, r0
 800ad9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad9e:	e7e5      	b.n	800ad6c <__mdiff+0x28>
 800ada0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ada4:	6926      	ldr	r6, [r4, #16]
 800ada6:	60c5      	str	r5, [r0, #12]
 800ada8:	f104 0914 	add.w	r9, r4, #20
 800adac:	f108 0514 	add.w	r5, r8, #20
 800adb0:	f100 0e14 	add.w	lr, r0, #20
 800adb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800adbc:	f108 0210 	add.w	r2, r8, #16
 800adc0:	46f2      	mov	sl, lr
 800adc2:	2100      	movs	r1, #0
 800adc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800adc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adcc:	fa1f f883 	uxth.w	r8, r3
 800add0:	fa11 f18b 	uxtah	r1, r1, fp
 800add4:	0c1b      	lsrs	r3, r3, #16
 800add6:	eba1 0808 	sub.w	r8, r1, r8
 800adda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ade2:	fa1f f888 	uxth.w	r8, r8
 800ade6:	1419      	asrs	r1, r3, #16
 800ade8:	454e      	cmp	r6, r9
 800adea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adee:	f84a 3b04 	str.w	r3, [sl], #4
 800adf2:	d8e7      	bhi.n	800adc4 <__mdiff+0x80>
 800adf4:	1b33      	subs	r3, r6, r4
 800adf6:	3b15      	subs	r3, #21
 800adf8:	f023 0303 	bic.w	r3, r3, #3
 800adfc:	3304      	adds	r3, #4
 800adfe:	3415      	adds	r4, #21
 800ae00:	42a6      	cmp	r6, r4
 800ae02:	bf38      	it	cc
 800ae04:	2304      	movcc	r3, #4
 800ae06:	441d      	add	r5, r3
 800ae08:	4473      	add	r3, lr
 800ae0a:	469e      	mov	lr, r3
 800ae0c:	462e      	mov	r6, r5
 800ae0e:	4566      	cmp	r6, ip
 800ae10:	d30e      	bcc.n	800ae30 <__mdiff+0xec>
 800ae12:	f10c 0203 	add.w	r2, ip, #3
 800ae16:	1b52      	subs	r2, r2, r5
 800ae18:	f022 0203 	bic.w	r2, r2, #3
 800ae1c:	3d03      	subs	r5, #3
 800ae1e:	45ac      	cmp	ip, r5
 800ae20:	bf38      	it	cc
 800ae22:	2200      	movcc	r2, #0
 800ae24:	441a      	add	r2, r3
 800ae26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae2a:	b17b      	cbz	r3, 800ae4c <__mdiff+0x108>
 800ae2c:	6107      	str	r7, [r0, #16]
 800ae2e:	e7a3      	b.n	800ad78 <__mdiff+0x34>
 800ae30:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae34:	fa11 f288 	uxtah	r2, r1, r8
 800ae38:	1414      	asrs	r4, r2, #16
 800ae3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae3e:	b292      	uxth	r2, r2
 800ae40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae44:	f84e 2b04 	str.w	r2, [lr], #4
 800ae48:	1421      	asrs	r1, r4, #16
 800ae4a:	e7e0      	b.n	800ae0e <__mdiff+0xca>
 800ae4c:	3f01      	subs	r7, #1
 800ae4e:	e7ea      	b.n	800ae26 <__mdiff+0xe2>
 800ae50:	0800c1f0 	.word	0x0800c1f0
 800ae54:	0800c2e0 	.word	0x0800c2e0

0800ae58 <__ulp>:
 800ae58:	b082      	sub	sp, #8
 800ae5a:	ed8d 0b00 	vstr	d0, [sp]
 800ae5e:	9b01      	ldr	r3, [sp, #4]
 800ae60:	4912      	ldr	r1, [pc, #72]	; (800aeac <__ulp+0x54>)
 800ae62:	4019      	ands	r1, r3
 800ae64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	dd05      	ble.n	800ae78 <__ulp+0x20>
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	ec43 2b10 	vmov	d0, r2, r3
 800ae74:	b002      	add	sp, #8
 800ae76:	4770      	bx	lr
 800ae78:	4249      	negs	r1, r1
 800ae7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ae7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ae82:	f04f 0200 	mov.w	r2, #0
 800ae86:	f04f 0300 	mov.w	r3, #0
 800ae8a:	da04      	bge.n	800ae96 <__ulp+0x3e>
 800ae8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ae90:	fa41 f300 	asr.w	r3, r1, r0
 800ae94:	e7ec      	b.n	800ae70 <__ulp+0x18>
 800ae96:	f1a0 0114 	sub.w	r1, r0, #20
 800ae9a:	291e      	cmp	r1, #30
 800ae9c:	bfda      	itte	le
 800ae9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aea2:	fa20 f101 	lsrle.w	r1, r0, r1
 800aea6:	2101      	movgt	r1, #1
 800aea8:	460a      	mov	r2, r1
 800aeaa:	e7e1      	b.n	800ae70 <__ulp+0x18>
 800aeac:	7ff00000 	.word	0x7ff00000

0800aeb0 <__b2d>:
 800aeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeb2:	6905      	ldr	r5, [r0, #16]
 800aeb4:	f100 0714 	add.w	r7, r0, #20
 800aeb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aebc:	1f2e      	subs	r6, r5, #4
 800aebe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7ff fd48 	bl	800a958 <__hi0bits>
 800aec8:	f1c0 0320 	rsb	r3, r0, #32
 800aecc:	280a      	cmp	r0, #10
 800aece:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800af4c <__b2d+0x9c>
 800aed2:	600b      	str	r3, [r1, #0]
 800aed4:	dc14      	bgt.n	800af00 <__b2d+0x50>
 800aed6:	f1c0 0e0b 	rsb	lr, r0, #11
 800aeda:	fa24 f10e 	lsr.w	r1, r4, lr
 800aede:	42b7      	cmp	r7, r6
 800aee0:	ea41 030c 	orr.w	r3, r1, ip
 800aee4:	bf34      	ite	cc
 800aee6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aeea:	2100      	movcs	r1, #0
 800aeec:	3015      	adds	r0, #21
 800aeee:	fa04 f000 	lsl.w	r0, r4, r0
 800aef2:	fa21 f10e 	lsr.w	r1, r1, lr
 800aef6:	ea40 0201 	orr.w	r2, r0, r1
 800aefa:	ec43 2b10 	vmov	d0, r2, r3
 800aefe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af00:	42b7      	cmp	r7, r6
 800af02:	bf3a      	itte	cc
 800af04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800af08:	f1a5 0608 	subcc.w	r6, r5, #8
 800af0c:	2100      	movcs	r1, #0
 800af0e:	380b      	subs	r0, #11
 800af10:	d017      	beq.n	800af42 <__b2d+0x92>
 800af12:	f1c0 0c20 	rsb	ip, r0, #32
 800af16:	fa04 f500 	lsl.w	r5, r4, r0
 800af1a:	42be      	cmp	r6, r7
 800af1c:	fa21 f40c 	lsr.w	r4, r1, ip
 800af20:	ea45 0504 	orr.w	r5, r5, r4
 800af24:	bf8c      	ite	hi
 800af26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800af2a:	2400      	movls	r4, #0
 800af2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800af30:	fa01 f000 	lsl.w	r0, r1, r0
 800af34:	fa24 f40c 	lsr.w	r4, r4, ip
 800af38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800af3c:	ea40 0204 	orr.w	r2, r0, r4
 800af40:	e7db      	b.n	800aefa <__b2d+0x4a>
 800af42:	ea44 030c 	orr.w	r3, r4, ip
 800af46:	460a      	mov	r2, r1
 800af48:	e7d7      	b.n	800aefa <__b2d+0x4a>
 800af4a:	bf00      	nop
 800af4c:	3ff00000 	.word	0x3ff00000

0800af50 <__d2b>:
 800af50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af54:	4689      	mov	r9, r1
 800af56:	2101      	movs	r1, #1
 800af58:	ec57 6b10 	vmov	r6, r7, d0
 800af5c:	4690      	mov	r8, r2
 800af5e:	f7ff fc09 	bl	800a774 <_Balloc>
 800af62:	4604      	mov	r4, r0
 800af64:	b930      	cbnz	r0, 800af74 <__d2b+0x24>
 800af66:	4602      	mov	r2, r0
 800af68:	4b25      	ldr	r3, [pc, #148]	; (800b000 <__d2b+0xb0>)
 800af6a:	4826      	ldr	r0, [pc, #152]	; (800b004 <__d2b+0xb4>)
 800af6c:	f240 310a 	movw	r1, #778	; 0x30a
 800af70:	f000 fdbe 	bl	800baf0 <__assert_func>
 800af74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800af78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af7c:	bb35      	cbnz	r5, 800afcc <__d2b+0x7c>
 800af7e:	2e00      	cmp	r6, #0
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	d028      	beq.n	800afd6 <__d2b+0x86>
 800af84:	4668      	mov	r0, sp
 800af86:	9600      	str	r6, [sp, #0]
 800af88:	f7ff fd06 	bl	800a998 <__lo0bits>
 800af8c:	9900      	ldr	r1, [sp, #0]
 800af8e:	b300      	cbz	r0, 800afd2 <__d2b+0x82>
 800af90:	9a01      	ldr	r2, [sp, #4]
 800af92:	f1c0 0320 	rsb	r3, r0, #32
 800af96:	fa02 f303 	lsl.w	r3, r2, r3
 800af9a:	430b      	orrs	r3, r1
 800af9c:	40c2      	lsrs	r2, r0
 800af9e:	6163      	str	r3, [r4, #20]
 800afa0:	9201      	str	r2, [sp, #4]
 800afa2:	9b01      	ldr	r3, [sp, #4]
 800afa4:	61a3      	str	r3, [r4, #24]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bf14      	ite	ne
 800afaa:	2202      	movne	r2, #2
 800afac:	2201      	moveq	r2, #1
 800afae:	6122      	str	r2, [r4, #16]
 800afb0:	b1d5      	cbz	r5, 800afe8 <__d2b+0x98>
 800afb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800afb6:	4405      	add	r5, r0
 800afb8:	f8c9 5000 	str.w	r5, [r9]
 800afbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800afc0:	f8c8 0000 	str.w	r0, [r8]
 800afc4:	4620      	mov	r0, r4
 800afc6:	b003      	add	sp, #12
 800afc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afd0:	e7d5      	b.n	800af7e <__d2b+0x2e>
 800afd2:	6161      	str	r1, [r4, #20]
 800afd4:	e7e5      	b.n	800afa2 <__d2b+0x52>
 800afd6:	a801      	add	r0, sp, #4
 800afd8:	f7ff fcde 	bl	800a998 <__lo0bits>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	6163      	str	r3, [r4, #20]
 800afe0:	2201      	movs	r2, #1
 800afe2:	6122      	str	r2, [r4, #16]
 800afe4:	3020      	adds	r0, #32
 800afe6:	e7e3      	b.n	800afb0 <__d2b+0x60>
 800afe8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aff0:	f8c9 0000 	str.w	r0, [r9]
 800aff4:	6918      	ldr	r0, [r3, #16]
 800aff6:	f7ff fcaf 	bl	800a958 <__hi0bits>
 800affa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800affe:	e7df      	b.n	800afc0 <__d2b+0x70>
 800b000:	0800c1f0 	.word	0x0800c1f0
 800b004:	0800c2e0 	.word	0x0800c2e0

0800b008 <__ratio>:
 800b008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b00c:	4688      	mov	r8, r1
 800b00e:	4669      	mov	r1, sp
 800b010:	4681      	mov	r9, r0
 800b012:	f7ff ff4d 	bl	800aeb0 <__b2d>
 800b016:	a901      	add	r1, sp, #4
 800b018:	4640      	mov	r0, r8
 800b01a:	ec55 4b10 	vmov	r4, r5, d0
 800b01e:	f7ff ff47 	bl	800aeb0 <__b2d>
 800b022:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b026:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b02a:	eba3 0c02 	sub.w	ip, r3, r2
 800b02e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b032:	1a9b      	subs	r3, r3, r2
 800b034:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b038:	ec51 0b10 	vmov	r0, r1, d0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	bfd6      	itet	le
 800b040:	460a      	movle	r2, r1
 800b042:	462a      	movgt	r2, r5
 800b044:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b048:	468b      	mov	fp, r1
 800b04a:	462f      	mov	r7, r5
 800b04c:	bfd4      	ite	le
 800b04e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b052:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b056:	4620      	mov	r0, r4
 800b058:	ee10 2a10 	vmov	r2, s0
 800b05c:	465b      	mov	r3, fp
 800b05e:	4639      	mov	r1, r7
 800b060:	f7f5 fbf4 	bl	800084c <__aeabi_ddiv>
 800b064:	ec41 0b10 	vmov	d0, r0, r1
 800b068:	b003      	add	sp, #12
 800b06a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b06e <__copybits>:
 800b06e:	3901      	subs	r1, #1
 800b070:	b570      	push	{r4, r5, r6, lr}
 800b072:	1149      	asrs	r1, r1, #5
 800b074:	6914      	ldr	r4, [r2, #16]
 800b076:	3101      	adds	r1, #1
 800b078:	f102 0314 	add.w	r3, r2, #20
 800b07c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b080:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b084:	1f05      	subs	r5, r0, #4
 800b086:	42a3      	cmp	r3, r4
 800b088:	d30c      	bcc.n	800b0a4 <__copybits+0x36>
 800b08a:	1aa3      	subs	r3, r4, r2
 800b08c:	3b11      	subs	r3, #17
 800b08e:	f023 0303 	bic.w	r3, r3, #3
 800b092:	3211      	adds	r2, #17
 800b094:	42a2      	cmp	r2, r4
 800b096:	bf88      	it	hi
 800b098:	2300      	movhi	r3, #0
 800b09a:	4418      	add	r0, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	4288      	cmp	r0, r1
 800b0a0:	d305      	bcc.n	800b0ae <__copybits+0x40>
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0ac:	e7eb      	b.n	800b086 <__copybits+0x18>
 800b0ae:	f840 3b04 	str.w	r3, [r0], #4
 800b0b2:	e7f4      	b.n	800b09e <__copybits+0x30>

0800b0b4 <__any_on>:
 800b0b4:	f100 0214 	add.w	r2, r0, #20
 800b0b8:	6900      	ldr	r0, [r0, #16]
 800b0ba:	114b      	asrs	r3, r1, #5
 800b0bc:	4298      	cmp	r0, r3
 800b0be:	b510      	push	{r4, lr}
 800b0c0:	db11      	blt.n	800b0e6 <__any_on+0x32>
 800b0c2:	dd0a      	ble.n	800b0da <__any_on+0x26>
 800b0c4:	f011 011f 	ands.w	r1, r1, #31
 800b0c8:	d007      	beq.n	800b0da <__any_on+0x26>
 800b0ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b0ce:	fa24 f001 	lsr.w	r0, r4, r1
 800b0d2:	fa00 f101 	lsl.w	r1, r0, r1
 800b0d6:	428c      	cmp	r4, r1
 800b0d8:	d10b      	bne.n	800b0f2 <__any_on+0x3e>
 800b0da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d803      	bhi.n	800b0ea <__any_on+0x36>
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	e7f7      	b.n	800b0da <__any_on+0x26>
 800b0ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	d0f5      	beq.n	800b0de <__any_on+0x2a>
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e7f6      	b.n	800b0e4 <__any_on+0x30>

0800b0f6 <_calloc_r>:
 800b0f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0f8:	fba1 2402 	umull	r2, r4, r1, r2
 800b0fc:	b94c      	cbnz	r4, 800b112 <_calloc_r+0x1c>
 800b0fe:	4611      	mov	r1, r2
 800b100:	9201      	str	r2, [sp, #4]
 800b102:	f000 f87b 	bl	800b1fc <_malloc_r>
 800b106:	9a01      	ldr	r2, [sp, #4]
 800b108:	4605      	mov	r5, r0
 800b10a:	b930      	cbnz	r0, 800b11a <_calloc_r+0x24>
 800b10c:	4628      	mov	r0, r5
 800b10e:	b003      	add	sp, #12
 800b110:	bd30      	pop	{r4, r5, pc}
 800b112:	220c      	movs	r2, #12
 800b114:	6002      	str	r2, [r0, #0]
 800b116:	2500      	movs	r5, #0
 800b118:	e7f8      	b.n	800b10c <_calloc_r+0x16>
 800b11a:	4621      	mov	r1, r4
 800b11c:	f7fc faa4 	bl	8007668 <memset>
 800b120:	e7f4      	b.n	800b10c <_calloc_r+0x16>
	...

0800b124 <_free_r>:
 800b124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b126:	2900      	cmp	r1, #0
 800b128:	d044      	beq.n	800b1b4 <_free_r+0x90>
 800b12a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b12e:	9001      	str	r0, [sp, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f1a1 0404 	sub.w	r4, r1, #4
 800b136:	bfb8      	it	lt
 800b138:	18e4      	addlt	r4, r4, r3
 800b13a:	f000 fe6d 	bl	800be18 <__malloc_lock>
 800b13e:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <_free_r+0x94>)
 800b140:	9801      	ldr	r0, [sp, #4]
 800b142:	6813      	ldr	r3, [r2, #0]
 800b144:	b933      	cbnz	r3, 800b154 <_free_r+0x30>
 800b146:	6063      	str	r3, [r4, #4]
 800b148:	6014      	str	r4, [r2, #0]
 800b14a:	b003      	add	sp, #12
 800b14c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b150:	f000 be68 	b.w	800be24 <__malloc_unlock>
 800b154:	42a3      	cmp	r3, r4
 800b156:	d908      	bls.n	800b16a <_free_r+0x46>
 800b158:	6825      	ldr	r5, [r4, #0]
 800b15a:	1961      	adds	r1, r4, r5
 800b15c:	428b      	cmp	r3, r1
 800b15e:	bf01      	itttt	eq
 800b160:	6819      	ldreq	r1, [r3, #0]
 800b162:	685b      	ldreq	r3, [r3, #4]
 800b164:	1949      	addeq	r1, r1, r5
 800b166:	6021      	streq	r1, [r4, #0]
 800b168:	e7ed      	b.n	800b146 <_free_r+0x22>
 800b16a:	461a      	mov	r2, r3
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	b10b      	cbz	r3, 800b174 <_free_r+0x50>
 800b170:	42a3      	cmp	r3, r4
 800b172:	d9fa      	bls.n	800b16a <_free_r+0x46>
 800b174:	6811      	ldr	r1, [r2, #0]
 800b176:	1855      	adds	r5, r2, r1
 800b178:	42a5      	cmp	r5, r4
 800b17a:	d10b      	bne.n	800b194 <_free_r+0x70>
 800b17c:	6824      	ldr	r4, [r4, #0]
 800b17e:	4421      	add	r1, r4
 800b180:	1854      	adds	r4, r2, r1
 800b182:	42a3      	cmp	r3, r4
 800b184:	6011      	str	r1, [r2, #0]
 800b186:	d1e0      	bne.n	800b14a <_free_r+0x26>
 800b188:	681c      	ldr	r4, [r3, #0]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	6053      	str	r3, [r2, #4]
 800b18e:	4421      	add	r1, r4
 800b190:	6011      	str	r1, [r2, #0]
 800b192:	e7da      	b.n	800b14a <_free_r+0x26>
 800b194:	d902      	bls.n	800b19c <_free_r+0x78>
 800b196:	230c      	movs	r3, #12
 800b198:	6003      	str	r3, [r0, #0]
 800b19a:	e7d6      	b.n	800b14a <_free_r+0x26>
 800b19c:	6825      	ldr	r5, [r4, #0]
 800b19e:	1961      	adds	r1, r4, r5
 800b1a0:	428b      	cmp	r3, r1
 800b1a2:	bf04      	itt	eq
 800b1a4:	6819      	ldreq	r1, [r3, #0]
 800b1a6:	685b      	ldreq	r3, [r3, #4]
 800b1a8:	6063      	str	r3, [r4, #4]
 800b1aa:	bf04      	itt	eq
 800b1ac:	1949      	addeq	r1, r1, r5
 800b1ae:	6021      	streq	r1, [r4, #0]
 800b1b0:	6054      	str	r4, [r2, #4]
 800b1b2:	e7ca      	b.n	800b14a <_free_r+0x26>
 800b1b4:	b003      	add	sp, #12
 800b1b6:	bd30      	pop	{r4, r5, pc}
 800b1b8:	2000040c 	.word	0x2000040c

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0e      	ldr	r6, [pc, #56]	; (800b1f8 <sbrk_aligned+0x3c>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 fb4a 	bl	800b860 <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 fb45 	bl	800b860 <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d00a      	beq.n	800b1f0 <sbrk_aligned+0x34>
 800b1da:	1cc4      	adds	r4, r0, #3
 800b1dc:	f024 0403 	bic.w	r4, r4, #3
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d007      	beq.n	800b1f4 <sbrk_aligned+0x38>
 800b1e4:	1a21      	subs	r1, r4, r0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 fb3a 	bl	800b860 <_sbrk_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d101      	bne.n	800b1f4 <sbrk_aligned+0x38>
 800b1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	20000410 	.word	0x20000410

0800b1fc <_malloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	1ccd      	adds	r5, r1, #3
 800b202:	f025 0503 	bic.w	r5, r5, #3
 800b206:	3508      	adds	r5, #8
 800b208:	2d0c      	cmp	r5, #12
 800b20a:	bf38      	it	cc
 800b20c:	250c      	movcc	r5, #12
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4607      	mov	r7, r0
 800b212:	db01      	blt.n	800b218 <_malloc_r+0x1c>
 800b214:	42a9      	cmp	r1, r5
 800b216:	d905      	bls.n	800b224 <_malloc_r+0x28>
 800b218:	230c      	movs	r3, #12
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	2600      	movs	r6, #0
 800b21e:	4630      	mov	r0, r6
 800b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b224:	4e2e      	ldr	r6, [pc, #184]	; (800b2e0 <_malloc_r+0xe4>)
 800b226:	f000 fdf7 	bl	800be18 <__malloc_lock>
 800b22a:	6833      	ldr	r3, [r6, #0]
 800b22c:	461c      	mov	r4, r3
 800b22e:	bb34      	cbnz	r4, 800b27e <_malloc_r+0x82>
 800b230:	4629      	mov	r1, r5
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ffc2 	bl	800b1bc <sbrk_aligned>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	4604      	mov	r4, r0
 800b23c:	d14d      	bne.n	800b2da <_malloc_r+0xde>
 800b23e:	6834      	ldr	r4, [r6, #0]
 800b240:	4626      	mov	r6, r4
 800b242:	2e00      	cmp	r6, #0
 800b244:	d140      	bne.n	800b2c8 <_malloc_r+0xcc>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	4631      	mov	r1, r6
 800b24a:	4638      	mov	r0, r7
 800b24c:	eb04 0803 	add.w	r8, r4, r3
 800b250:	f000 fb06 	bl	800b860 <_sbrk_r>
 800b254:	4580      	cmp	r8, r0
 800b256:	d13a      	bne.n	800b2ce <_malloc_r+0xd2>
 800b258:	6821      	ldr	r1, [r4, #0]
 800b25a:	3503      	adds	r5, #3
 800b25c:	1a6d      	subs	r5, r5, r1
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	4629      	mov	r1, r5
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa5 	bl	800b1bc <sbrk_aligned>
 800b272:	3001      	adds	r0, #1
 800b274:	d02b      	beq.n	800b2ce <_malloc_r+0xd2>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	442b      	add	r3, r5
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	e00e      	b.n	800b29c <_malloc_r+0xa0>
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	1b52      	subs	r2, r2, r5
 800b282:	d41e      	bmi.n	800b2c2 <_malloc_r+0xc6>
 800b284:	2a0b      	cmp	r2, #11
 800b286:	d916      	bls.n	800b2b6 <_malloc_r+0xba>
 800b288:	1961      	adds	r1, r4, r5
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	6025      	str	r5, [r4, #0]
 800b28e:	bf18      	it	ne
 800b290:	6059      	strne	r1, [r3, #4]
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	bf08      	it	eq
 800b296:	6031      	streq	r1, [r6, #0]
 800b298:	5162      	str	r2, [r4, r5]
 800b29a:	604b      	str	r3, [r1, #4]
 800b29c:	4638      	mov	r0, r7
 800b29e:	f104 060b 	add.w	r6, r4, #11
 800b2a2:	f000 fdbf 	bl	800be24 <__malloc_unlock>
 800b2a6:	f026 0607 	bic.w	r6, r6, #7
 800b2aa:	1d23      	adds	r3, r4, #4
 800b2ac:	1af2      	subs	r2, r6, r3
 800b2ae:	d0b6      	beq.n	800b21e <_malloc_r+0x22>
 800b2b0:	1b9b      	subs	r3, r3, r6
 800b2b2:	50a3      	str	r3, [r4, r2]
 800b2b4:	e7b3      	b.n	800b21e <_malloc_r+0x22>
 800b2b6:	6862      	ldr	r2, [r4, #4]
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	bf0c      	ite	eq
 800b2bc:	6032      	streq	r2, [r6, #0]
 800b2be:	605a      	strne	r2, [r3, #4]
 800b2c0:	e7ec      	b.n	800b29c <_malloc_r+0xa0>
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	6864      	ldr	r4, [r4, #4]
 800b2c6:	e7b2      	b.n	800b22e <_malloc_r+0x32>
 800b2c8:	4634      	mov	r4, r6
 800b2ca:	6876      	ldr	r6, [r6, #4]
 800b2cc:	e7b9      	b.n	800b242 <_malloc_r+0x46>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	603b      	str	r3, [r7, #0]
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 fda6 	bl	800be24 <__malloc_unlock>
 800b2d8:	e7a1      	b.n	800b21e <_malloc_r+0x22>
 800b2da:	6025      	str	r5, [r4, #0]
 800b2dc:	e7de      	b.n	800b29c <_malloc_r+0xa0>
 800b2de:	bf00      	nop
 800b2e0:	2000040c 	.word	0x2000040c

0800b2e4 <__ssputs_r>:
 800b2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2e8:	688e      	ldr	r6, [r1, #8]
 800b2ea:	429e      	cmp	r6, r3
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	4690      	mov	r8, r2
 800b2f2:	461f      	mov	r7, r3
 800b2f4:	d838      	bhi.n	800b368 <__ssputs_r+0x84>
 800b2f6:	898a      	ldrh	r2, [r1, #12]
 800b2f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2fc:	d032      	beq.n	800b364 <__ssputs_r+0x80>
 800b2fe:	6825      	ldr	r5, [r4, #0]
 800b300:	6909      	ldr	r1, [r1, #16]
 800b302:	eba5 0901 	sub.w	r9, r5, r1
 800b306:	6965      	ldr	r5, [r4, #20]
 800b308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b30c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b310:	3301      	adds	r3, #1
 800b312:	444b      	add	r3, r9
 800b314:	106d      	asrs	r5, r5, #1
 800b316:	429d      	cmp	r5, r3
 800b318:	bf38      	it	cc
 800b31a:	461d      	movcc	r5, r3
 800b31c:	0553      	lsls	r3, r2, #21
 800b31e:	d531      	bpl.n	800b384 <__ssputs_r+0xa0>
 800b320:	4629      	mov	r1, r5
 800b322:	f7ff ff6b 	bl	800b1fc <_malloc_r>
 800b326:	4606      	mov	r6, r0
 800b328:	b950      	cbnz	r0, 800b340 <__ssputs_r+0x5c>
 800b32a:	230c      	movs	r3, #12
 800b32c:	f8ca 3000 	str.w	r3, [sl]
 800b330:	89a3      	ldrh	r3, [r4, #12]
 800b332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b336:	81a3      	strh	r3, [r4, #12]
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b340:	6921      	ldr	r1, [r4, #16]
 800b342:	464a      	mov	r2, r9
 800b344:	f7ff fa08 	bl	800a758 <memcpy>
 800b348:	89a3      	ldrh	r3, [r4, #12]
 800b34a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b352:	81a3      	strh	r3, [r4, #12]
 800b354:	6126      	str	r6, [r4, #16]
 800b356:	6165      	str	r5, [r4, #20]
 800b358:	444e      	add	r6, r9
 800b35a:	eba5 0509 	sub.w	r5, r5, r9
 800b35e:	6026      	str	r6, [r4, #0]
 800b360:	60a5      	str	r5, [r4, #8]
 800b362:	463e      	mov	r6, r7
 800b364:	42be      	cmp	r6, r7
 800b366:	d900      	bls.n	800b36a <__ssputs_r+0x86>
 800b368:	463e      	mov	r6, r7
 800b36a:	6820      	ldr	r0, [r4, #0]
 800b36c:	4632      	mov	r2, r6
 800b36e:	4641      	mov	r1, r8
 800b370:	f000 fd38 	bl	800bde4 <memmove>
 800b374:	68a3      	ldr	r3, [r4, #8]
 800b376:	1b9b      	subs	r3, r3, r6
 800b378:	60a3      	str	r3, [r4, #8]
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	4433      	add	r3, r6
 800b37e:	6023      	str	r3, [r4, #0]
 800b380:	2000      	movs	r0, #0
 800b382:	e7db      	b.n	800b33c <__ssputs_r+0x58>
 800b384:	462a      	mov	r2, r5
 800b386:	f000 fd53 	bl	800be30 <_realloc_r>
 800b38a:	4606      	mov	r6, r0
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d1e1      	bne.n	800b354 <__ssputs_r+0x70>
 800b390:	6921      	ldr	r1, [r4, #16]
 800b392:	4650      	mov	r0, sl
 800b394:	f7ff fec6 	bl	800b124 <_free_r>
 800b398:	e7c7      	b.n	800b32a <__ssputs_r+0x46>
	...

0800b39c <_svfiprintf_r>:
 800b39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a0:	4698      	mov	r8, r3
 800b3a2:	898b      	ldrh	r3, [r1, #12]
 800b3a4:	061b      	lsls	r3, r3, #24
 800b3a6:	b09d      	sub	sp, #116	; 0x74
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	460d      	mov	r5, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	d50e      	bpl.n	800b3ce <_svfiprintf_r+0x32>
 800b3b0:	690b      	ldr	r3, [r1, #16]
 800b3b2:	b963      	cbnz	r3, 800b3ce <_svfiprintf_r+0x32>
 800b3b4:	2140      	movs	r1, #64	; 0x40
 800b3b6:	f7ff ff21 	bl	800b1fc <_malloc_r>
 800b3ba:	6028      	str	r0, [r5, #0]
 800b3bc:	6128      	str	r0, [r5, #16]
 800b3be:	b920      	cbnz	r0, 800b3ca <_svfiprintf_r+0x2e>
 800b3c0:	230c      	movs	r3, #12
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c8:	e0d1      	b.n	800b56e <_svfiprintf_r+0x1d2>
 800b3ca:	2340      	movs	r3, #64	; 0x40
 800b3cc:	616b      	str	r3, [r5, #20]
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b3d2:	2320      	movs	r3, #32
 800b3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3dc:	2330      	movs	r3, #48	; 0x30
 800b3de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b588 <_svfiprintf_r+0x1ec>
 800b3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3e6:	f04f 0901 	mov.w	r9, #1
 800b3ea:	4623      	mov	r3, r4
 800b3ec:	469a      	mov	sl, r3
 800b3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3f2:	b10a      	cbz	r2, 800b3f8 <_svfiprintf_r+0x5c>
 800b3f4:	2a25      	cmp	r2, #37	; 0x25
 800b3f6:	d1f9      	bne.n	800b3ec <_svfiprintf_r+0x50>
 800b3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b3fc:	d00b      	beq.n	800b416 <_svfiprintf_r+0x7a>
 800b3fe:	465b      	mov	r3, fp
 800b400:	4622      	mov	r2, r4
 800b402:	4629      	mov	r1, r5
 800b404:	4638      	mov	r0, r7
 800b406:	f7ff ff6d 	bl	800b2e4 <__ssputs_r>
 800b40a:	3001      	adds	r0, #1
 800b40c:	f000 80aa 	beq.w	800b564 <_svfiprintf_r+0x1c8>
 800b410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b412:	445a      	add	r2, fp
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	f89a 3000 	ldrb.w	r3, [sl]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	f000 80a2 	beq.w	800b564 <_svfiprintf_r+0x1c8>
 800b420:	2300      	movs	r3, #0
 800b422:	f04f 32ff 	mov.w	r2, #4294967295
 800b426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b42a:	f10a 0a01 	add.w	sl, sl, #1
 800b42e:	9304      	str	r3, [sp, #16]
 800b430:	9307      	str	r3, [sp, #28]
 800b432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b436:	931a      	str	r3, [sp, #104]	; 0x68
 800b438:	4654      	mov	r4, sl
 800b43a:	2205      	movs	r2, #5
 800b43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b440:	4851      	ldr	r0, [pc, #324]	; (800b588 <_svfiprintf_r+0x1ec>)
 800b442:	f7f4 fecd 	bl	80001e0 <memchr>
 800b446:	9a04      	ldr	r2, [sp, #16]
 800b448:	b9d8      	cbnz	r0, 800b482 <_svfiprintf_r+0xe6>
 800b44a:	06d0      	lsls	r0, r2, #27
 800b44c:	bf44      	itt	mi
 800b44e:	2320      	movmi	r3, #32
 800b450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b454:	0711      	lsls	r1, r2, #28
 800b456:	bf44      	itt	mi
 800b458:	232b      	movmi	r3, #43	; 0x2b
 800b45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45e:	f89a 3000 	ldrb.w	r3, [sl]
 800b462:	2b2a      	cmp	r3, #42	; 0x2a
 800b464:	d015      	beq.n	800b492 <_svfiprintf_r+0xf6>
 800b466:	9a07      	ldr	r2, [sp, #28]
 800b468:	4654      	mov	r4, sl
 800b46a:	2000      	movs	r0, #0
 800b46c:	f04f 0c0a 	mov.w	ip, #10
 800b470:	4621      	mov	r1, r4
 800b472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b476:	3b30      	subs	r3, #48	; 0x30
 800b478:	2b09      	cmp	r3, #9
 800b47a:	d94e      	bls.n	800b51a <_svfiprintf_r+0x17e>
 800b47c:	b1b0      	cbz	r0, 800b4ac <_svfiprintf_r+0x110>
 800b47e:	9207      	str	r2, [sp, #28]
 800b480:	e014      	b.n	800b4ac <_svfiprintf_r+0x110>
 800b482:	eba0 0308 	sub.w	r3, r0, r8
 800b486:	fa09 f303 	lsl.w	r3, r9, r3
 800b48a:	4313      	orrs	r3, r2
 800b48c:	9304      	str	r3, [sp, #16]
 800b48e:	46a2      	mov	sl, r4
 800b490:	e7d2      	b.n	800b438 <_svfiprintf_r+0x9c>
 800b492:	9b03      	ldr	r3, [sp, #12]
 800b494:	1d19      	adds	r1, r3, #4
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	9103      	str	r1, [sp, #12]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	bfbb      	ittet	lt
 800b49e:	425b      	neglt	r3, r3
 800b4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b4a4:	9307      	strge	r3, [sp, #28]
 800b4a6:	9307      	strlt	r3, [sp, #28]
 800b4a8:	bfb8      	it	lt
 800b4aa:	9204      	strlt	r2, [sp, #16]
 800b4ac:	7823      	ldrb	r3, [r4, #0]
 800b4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b0:	d10c      	bne.n	800b4cc <_svfiprintf_r+0x130>
 800b4b2:	7863      	ldrb	r3, [r4, #1]
 800b4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b4b6:	d135      	bne.n	800b524 <_svfiprintf_r+0x188>
 800b4b8:	9b03      	ldr	r3, [sp, #12]
 800b4ba:	1d1a      	adds	r2, r3, #4
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	9203      	str	r2, [sp, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bfb8      	it	lt
 800b4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4c8:	3402      	adds	r4, #2
 800b4ca:	9305      	str	r3, [sp, #20]
 800b4cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b598 <_svfiprintf_r+0x1fc>
 800b4d0:	7821      	ldrb	r1, [r4, #0]
 800b4d2:	2203      	movs	r2, #3
 800b4d4:	4650      	mov	r0, sl
 800b4d6:	f7f4 fe83 	bl	80001e0 <memchr>
 800b4da:	b140      	cbz	r0, 800b4ee <_svfiprintf_r+0x152>
 800b4dc:	2340      	movs	r3, #64	; 0x40
 800b4de:	eba0 000a 	sub.w	r0, r0, sl
 800b4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800b4e6:	9b04      	ldr	r3, [sp, #16]
 800b4e8:	4303      	orrs	r3, r0
 800b4ea:	3401      	adds	r4, #1
 800b4ec:	9304      	str	r3, [sp, #16]
 800b4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f2:	4826      	ldr	r0, [pc, #152]	; (800b58c <_svfiprintf_r+0x1f0>)
 800b4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4f8:	2206      	movs	r2, #6
 800b4fa:	f7f4 fe71 	bl	80001e0 <memchr>
 800b4fe:	2800      	cmp	r0, #0
 800b500:	d038      	beq.n	800b574 <_svfiprintf_r+0x1d8>
 800b502:	4b23      	ldr	r3, [pc, #140]	; (800b590 <_svfiprintf_r+0x1f4>)
 800b504:	bb1b      	cbnz	r3, 800b54e <_svfiprintf_r+0x1b2>
 800b506:	9b03      	ldr	r3, [sp, #12]
 800b508:	3307      	adds	r3, #7
 800b50a:	f023 0307 	bic.w	r3, r3, #7
 800b50e:	3308      	adds	r3, #8
 800b510:	9303      	str	r3, [sp, #12]
 800b512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b514:	4433      	add	r3, r6
 800b516:	9309      	str	r3, [sp, #36]	; 0x24
 800b518:	e767      	b.n	800b3ea <_svfiprintf_r+0x4e>
 800b51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b51e:	460c      	mov	r4, r1
 800b520:	2001      	movs	r0, #1
 800b522:	e7a5      	b.n	800b470 <_svfiprintf_r+0xd4>
 800b524:	2300      	movs	r3, #0
 800b526:	3401      	adds	r4, #1
 800b528:	9305      	str	r3, [sp, #20]
 800b52a:	4619      	mov	r1, r3
 800b52c:	f04f 0c0a 	mov.w	ip, #10
 800b530:	4620      	mov	r0, r4
 800b532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b536:	3a30      	subs	r2, #48	; 0x30
 800b538:	2a09      	cmp	r2, #9
 800b53a:	d903      	bls.n	800b544 <_svfiprintf_r+0x1a8>
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d0c5      	beq.n	800b4cc <_svfiprintf_r+0x130>
 800b540:	9105      	str	r1, [sp, #20]
 800b542:	e7c3      	b.n	800b4cc <_svfiprintf_r+0x130>
 800b544:	fb0c 2101 	mla	r1, ip, r1, r2
 800b548:	4604      	mov	r4, r0
 800b54a:	2301      	movs	r3, #1
 800b54c:	e7f0      	b.n	800b530 <_svfiprintf_r+0x194>
 800b54e:	ab03      	add	r3, sp, #12
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	462a      	mov	r2, r5
 800b554:	4b0f      	ldr	r3, [pc, #60]	; (800b594 <_svfiprintf_r+0x1f8>)
 800b556:	a904      	add	r1, sp, #16
 800b558:	4638      	mov	r0, r7
 800b55a:	f7fc f92d 	bl	80077b8 <_printf_float>
 800b55e:	1c42      	adds	r2, r0, #1
 800b560:	4606      	mov	r6, r0
 800b562:	d1d6      	bne.n	800b512 <_svfiprintf_r+0x176>
 800b564:	89ab      	ldrh	r3, [r5, #12]
 800b566:	065b      	lsls	r3, r3, #25
 800b568:	f53f af2c 	bmi.w	800b3c4 <_svfiprintf_r+0x28>
 800b56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b56e:	b01d      	add	sp, #116	; 0x74
 800b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b574:	ab03      	add	r3, sp, #12
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	462a      	mov	r2, r5
 800b57a:	4b06      	ldr	r3, [pc, #24]	; (800b594 <_svfiprintf_r+0x1f8>)
 800b57c:	a904      	add	r1, sp, #16
 800b57e:	4638      	mov	r0, r7
 800b580:	f7fc fbbe 	bl	8007d00 <_printf_i>
 800b584:	e7eb      	b.n	800b55e <_svfiprintf_r+0x1c2>
 800b586:	bf00      	nop
 800b588:	0800c43c 	.word	0x0800c43c
 800b58c:	0800c446 	.word	0x0800c446
 800b590:	080077b9 	.word	0x080077b9
 800b594:	0800b2e5 	.word	0x0800b2e5
 800b598:	0800c442 	.word	0x0800c442

0800b59c <__sfputc_r>:
 800b59c:	6893      	ldr	r3, [r2, #8]
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	b410      	push	{r4}
 800b5a4:	6093      	str	r3, [r2, #8]
 800b5a6:	da08      	bge.n	800b5ba <__sfputc_r+0x1e>
 800b5a8:	6994      	ldr	r4, [r2, #24]
 800b5aa:	42a3      	cmp	r3, r4
 800b5ac:	db01      	blt.n	800b5b2 <__sfputc_r+0x16>
 800b5ae:	290a      	cmp	r1, #10
 800b5b0:	d103      	bne.n	800b5ba <__sfputc_r+0x1e>
 800b5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5b6:	f000 b9bb 	b.w	800b930 <__swbuf_r>
 800b5ba:	6813      	ldr	r3, [r2, #0]
 800b5bc:	1c58      	adds	r0, r3, #1
 800b5be:	6010      	str	r0, [r2, #0]
 800b5c0:	7019      	strb	r1, [r3, #0]
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <__sfputs_r>:
 800b5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	460f      	mov	r7, r1
 800b5d0:	4614      	mov	r4, r2
 800b5d2:	18d5      	adds	r5, r2, r3
 800b5d4:	42ac      	cmp	r4, r5
 800b5d6:	d101      	bne.n	800b5dc <__sfputs_r+0x12>
 800b5d8:	2000      	movs	r0, #0
 800b5da:	e007      	b.n	800b5ec <__sfputs_r+0x22>
 800b5dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e0:	463a      	mov	r2, r7
 800b5e2:	4630      	mov	r0, r6
 800b5e4:	f7ff ffda 	bl	800b59c <__sfputc_r>
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	d1f3      	bne.n	800b5d4 <__sfputs_r+0xa>
 800b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5f0 <_vfiprintf_r>:
 800b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	b09d      	sub	sp, #116	; 0x74
 800b5f8:	4614      	mov	r4, r2
 800b5fa:	4698      	mov	r8, r3
 800b5fc:	4606      	mov	r6, r0
 800b5fe:	b118      	cbz	r0, 800b608 <_vfiprintf_r+0x18>
 800b600:	6983      	ldr	r3, [r0, #24]
 800b602:	b90b      	cbnz	r3, 800b608 <_vfiprintf_r+0x18>
 800b604:	f7fe fc7a 	bl	8009efc <__sinit>
 800b608:	4b89      	ldr	r3, [pc, #548]	; (800b830 <_vfiprintf_r+0x240>)
 800b60a:	429d      	cmp	r5, r3
 800b60c:	d11b      	bne.n	800b646 <_vfiprintf_r+0x56>
 800b60e:	6875      	ldr	r5, [r6, #4]
 800b610:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b612:	07d9      	lsls	r1, r3, #31
 800b614:	d405      	bmi.n	800b622 <_vfiprintf_r+0x32>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	059a      	lsls	r2, r3, #22
 800b61a:	d402      	bmi.n	800b622 <_vfiprintf_r+0x32>
 800b61c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b61e:	f7ff f87e 	bl	800a71e <__retarget_lock_acquire_recursive>
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	071b      	lsls	r3, r3, #28
 800b626:	d501      	bpl.n	800b62c <_vfiprintf_r+0x3c>
 800b628:	692b      	ldr	r3, [r5, #16]
 800b62a:	b9eb      	cbnz	r3, 800b668 <_vfiprintf_r+0x78>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f9f0 	bl	800ba14 <__swsetup_r>
 800b634:	b1c0      	cbz	r0, 800b668 <_vfiprintf_r+0x78>
 800b636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b638:	07dc      	lsls	r4, r3, #31
 800b63a:	d50e      	bpl.n	800b65a <_vfiprintf_r+0x6a>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	b01d      	add	sp, #116	; 0x74
 800b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b646:	4b7b      	ldr	r3, [pc, #492]	; (800b834 <_vfiprintf_r+0x244>)
 800b648:	429d      	cmp	r5, r3
 800b64a:	d101      	bne.n	800b650 <_vfiprintf_r+0x60>
 800b64c:	68b5      	ldr	r5, [r6, #8]
 800b64e:	e7df      	b.n	800b610 <_vfiprintf_r+0x20>
 800b650:	4b79      	ldr	r3, [pc, #484]	; (800b838 <_vfiprintf_r+0x248>)
 800b652:	429d      	cmp	r5, r3
 800b654:	bf08      	it	eq
 800b656:	68f5      	ldreq	r5, [r6, #12]
 800b658:	e7da      	b.n	800b610 <_vfiprintf_r+0x20>
 800b65a:	89ab      	ldrh	r3, [r5, #12]
 800b65c:	0598      	lsls	r0, r3, #22
 800b65e:	d4ed      	bmi.n	800b63c <_vfiprintf_r+0x4c>
 800b660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b662:	f7ff f85d 	bl	800a720 <__retarget_lock_release_recursive>
 800b666:	e7e9      	b.n	800b63c <_vfiprintf_r+0x4c>
 800b668:	2300      	movs	r3, #0
 800b66a:	9309      	str	r3, [sp, #36]	; 0x24
 800b66c:	2320      	movs	r3, #32
 800b66e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b672:	f8cd 800c 	str.w	r8, [sp, #12]
 800b676:	2330      	movs	r3, #48	; 0x30
 800b678:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b83c <_vfiprintf_r+0x24c>
 800b67c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b680:	f04f 0901 	mov.w	r9, #1
 800b684:	4623      	mov	r3, r4
 800b686:	469a      	mov	sl, r3
 800b688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b68c:	b10a      	cbz	r2, 800b692 <_vfiprintf_r+0xa2>
 800b68e:	2a25      	cmp	r2, #37	; 0x25
 800b690:	d1f9      	bne.n	800b686 <_vfiprintf_r+0x96>
 800b692:	ebba 0b04 	subs.w	fp, sl, r4
 800b696:	d00b      	beq.n	800b6b0 <_vfiprintf_r+0xc0>
 800b698:	465b      	mov	r3, fp
 800b69a:	4622      	mov	r2, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	4630      	mov	r0, r6
 800b6a0:	f7ff ff93 	bl	800b5ca <__sfputs_r>
 800b6a4:	3001      	adds	r0, #1
 800b6a6:	f000 80aa 	beq.w	800b7fe <_vfiprintf_r+0x20e>
 800b6aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6ac:	445a      	add	r2, fp
 800b6ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	f000 80a2 	beq.w	800b7fe <_vfiprintf_r+0x20e>
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c4:	f10a 0a01 	add.w	sl, sl, #1
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	9307      	str	r3, [sp, #28]
 800b6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d2:	4654      	mov	r4, sl
 800b6d4:	2205      	movs	r2, #5
 800b6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6da:	4858      	ldr	r0, [pc, #352]	; (800b83c <_vfiprintf_r+0x24c>)
 800b6dc:	f7f4 fd80 	bl	80001e0 <memchr>
 800b6e0:	9a04      	ldr	r2, [sp, #16]
 800b6e2:	b9d8      	cbnz	r0, 800b71c <_vfiprintf_r+0x12c>
 800b6e4:	06d1      	lsls	r1, r2, #27
 800b6e6:	bf44      	itt	mi
 800b6e8:	2320      	movmi	r3, #32
 800b6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ee:	0713      	lsls	r3, r2, #28
 800b6f0:	bf44      	itt	mi
 800b6f2:	232b      	movmi	r3, #43	; 0x2b
 800b6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b6fe:	d015      	beq.n	800b72c <_vfiprintf_r+0x13c>
 800b700:	9a07      	ldr	r2, [sp, #28]
 800b702:	4654      	mov	r4, sl
 800b704:	2000      	movs	r0, #0
 800b706:	f04f 0c0a 	mov.w	ip, #10
 800b70a:	4621      	mov	r1, r4
 800b70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b710:	3b30      	subs	r3, #48	; 0x30
 800b712:	2b09      	cmp	r3, #9
 800b714:	d94e      	bls.n	800b7b4 <_vfiprintf_r+0x1c4>
 800b716:	b1b0      	cbz	r0, 800b746 <_vfiprintf_r+0x156>
 800b718:	9207      	str	r2, [sp, #28]
 800b71a:	e014      	b.n	800b746 <_vfiprintf_r+0x156>
 800b71c:	eba0 0308 	sub.w	r3, r0, r8
 800b720:	fa09 f303 	lsl.w	r3, r9, r3
 800b724:	4313      	orrs	r3, r2
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	46a2      	mov	sl, r4
 800b72a:	e7d2      	b.n	800b6d2 <_vfiprintf_r+0xe2>
 800b72c:	9b03      	ldr	r3, [sp, #12]
 800b72e:	1d19      	adds	r1, r3, #4
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	9103      	str	r1, [sp, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	bfbb      	ittet	lt
 800b738:	425b      	neglt	r3, r3
 800b73a:	f042 0202 	orrlt.w	r2, r2, #2
 800b73e:	9307      	strge	r3, [sp, #28]
 800b740:	9307      	strlt	r3, [sp, #28]
 800b742:	bfb8      	it	lt
 800b744:	9204      	strlt	r2, [sp, #16]
 800b746:	7823      	ldrb	r3, [r4, #0]
 800b748:	2b2e      	cmp	r3, #46	; 0x2e
 800b74a:	d10c      	bne.n	800b766 <_vfiprintf_r+0x176>
 800b74c:	7863      	ldrb	r3, [r4, #1]
 800b74e:	2b2a      	cmp	r3, #42	; 0x2a
 800b750:	d135      	bne.n	800b7be <_vfiprintf_r+0x1ce>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	1d1a      	adds	r2, r3, #4
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	9203      	str	r2, [sp, #12]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bfb8      	it	lt
 800b75e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b762:	3402      	adds	r4, #2
 800b764:	9305      	str	r3, [sp, #20]
 800b766:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b84c <_vfiprintf_r+0x25c>
 800b76a:	7821      	ldrb	r1, [r4, #0]
 800b76c:	2203      	movs	r2, #3
 800b76e:	4650      	mov	r0, sl
 800b770:	f7f4 fd36 	bl	80001e0 <memchr>
 800b774:	b140      	cbz	r0, 800b788 <_vfiprintf_r+0x198>
 800b776:	2340      	movs	r3, #64	; 0x40
 800b778:	eba0 000a 	sub.w	r0, r0, sl
 800b77c:	fa03 f000 	lsl.w	r0, r3, r0
 800b780:	9b04      	ldr	r3, [sp, #16]
 800b782:	4303      	orrs	r3, r0
 800b784:	3401      	adds	r4, #1
 800b786:	9304      	str	r3, [sp, #16]
 800b788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b78c:	482c      	ldr	r0, [pc, #176]	; (800b840 <_vfiprintf_r+0x250>)
 800b78e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b792:	2206      	movs	r2, #6
 800b794:	f7f4 fd24 	bl	80001e0 <memchr>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d03f      	beq.n	800b81c <_vfiprintf_r+0x22c>
 800b79c:	4b29      	ldr	r3, [pc, #164]	; (800b844 <_vfiprintf_r+0x254>)
 800b79e:	bb1b      	cbnz	r3, 800b7e8 <_vfiprintf_r+0x1f8>
 800b7a0:	9b03      	ldr	r3, [sp, #12]
 800b7a2:	3307      	adds	r3, #7
 800b7a4:	f023 0307 	bic.w	r3, r3, #7
 800b7a8:	3308      	adds	r3, #8
 800b7aa:	9303      	str	r3, [sp, #12]
 800b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ae:	443b      	add	r3, r7
 800b7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b2:	e767      	b.n	800b684 <_vfiprintf_r+0x94>
 800b7b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7b8:	460c      	mov	r4, r1
 800b7ba:	2001      	movs	r0, #1
 800b7bc:	e7a5      	b.n	800b70a <_vfiprintf_r+0x11a>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	9305      	str	r3, [sp, #20]
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	f04f 0c0a 	mov.w	ip, #10
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7d0:	3a30      	subs	r2, #48	; 0x30
 800b7d2:	2a09      	cmp	r2, #9
 800b7d4:	d903      	bls.n	800b7de <_vfiprintf_r+0x1ee>
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d0c5      	beq.n	800b766 <_vfiprintf_r+0x176>
 800b7da:	9105      	str	r1, [sp, #20]
 800b7dc:	e7c3      	b.n	800b766 <_vfiprintf_r+0x176>
 800b7de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	e7f0      	b.n	800b7ca <_vfiprintf_r+0x1da>
 800b7e8:	ab03      	add	r3, sp, #12
 800b7ea:	9300      	str	r3, [sp, #0]
 800b7ec:	462a      	mov	r2, r5
 800b7ee:	4b16      	ldr	r3, [pc, #88]	; (800b848 <_vfiprintf_r+0x258>)
 800b7f0:	a904      	add	r1, sp, #16
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	f7fb ffe0 	bl	80077b8 <_printf_float>
 800b7f8:	4607      	mov	r7, r0
 800b7fa:	1c78      	adds	r0, r7, #1
 800b7fc:	d1d6      	bne.n	800b7ac <_vfiprintf_r+0x1bc>
 800b7fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b800:	07d9      	lsls	r1, r3, #31
 800b802:	d405      	bmi.n	800b810 <_vfiprintf_r+0x220>
 800b804:	89ab      	ldrh	r3, [r5, #12]
 800b806:	059a      	lsls	r2, r3, #22
 800b808:	d402      	bmi.n	800b810 <_vfiprintf_r+0x220>
 800b80a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b80c:	f7fe ff88 	bl	800a720 <__retarget_lock_release_recursive>
 800b810:	89ab      	ldrh	r3, [r5, #12]
 800b812:	065b      	lsls	r3, r3, #25
 800b814:	f53f af12 	bmi.w	800b63c <_vfiprintf_r+0x4c>
 800b818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b81a:	e711      	b.n	800b640 <_vfiprintf_r+0x50>
 800b81c:	ab03      	add	r3, sp, #12
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	462a      	mov	r2, r5
 800b822:	4b09      	ldr	r3, [pc, #36]	; (800b848 <_vfiprintf_r+0x258>)
 800b824:	a904      	add	r1, sp, #16
 800b826:	4630      	mov	r0, r6
 800b828:	f7fc fa6a 	bl	8007d00 <_printf_i>
 800b82c:	e7e4      	b.n	800b7f8 <_vfiprintf_r+0x208>
 800b82e:	bf00      	nop
 800b830:	0800c224 	.word	0x0800c224
 800b834:	0800c244 	.word	0x0800c244
 800b838:	0800c204 	.word	0x0800c204
 800b83c:	0800c43c 	.word	0x0800c43c
 800b840:	0800c446 	.word	0x0800c446
 800b844:	080077b9 	.word	0x080077b9
 800b848:	0800b5cb 	.word	0x0800b5cb
 800b84c:	0800c442 	.word	0x0800c442

0800b850 <nan>:
 800b850:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b858 <nan+0x8>
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	00000000 	.word	0x00000000
 800b85c:	7ff80000 	.word	0x7ff80000

0800b860 <_sbrk_r>:
 800b860:	b538      	push	{r3, r4, r5, lr}
 800b862:	4d06      	ldr	r5, [pc, #24]	; (800b87c <_sbrk_r+0x1c>)
 800b864:	2300      	movs	r3, #0
 800b866:	4604      	mov	r4, r0
 800b868:	4608      	mov	r0, r1
 800b86a:	602b      	str	r3, [r5, #0]
 800b86c:	f7f6 fef0 	bl	8002650 <_sbrk>
 800b870:	1c43      	adds	r3, r0, #1
 800b872:	d102      	bne.n	800b87a <_sbrk_r+0x1a>
 800b874:	682b      	ldr	r3, [r5, #0]
 800b876:	b103      	cbz	r3, 800b87a <_sbrk_r+0x1a>
 800b878:	6023      	str	r3, [r4, #0]
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	20000414 	.word	0x20000414

0800b880 <__sread>:
 800b880:	b510      	push	{r4, lr}
 800b882:	460c      	mov	r4, r1
 800b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b888:	f000 fb02 	bl	800be90 <_read_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	bfab      	itete	ge
 800b890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b892:	89a3      	ldrhlt	r3, [r4, #12]
 800b894:	181b      	addge	r3, r3, r0
 800b896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b89a:	bfac      	ite	ge
 800b89c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b89e:	81a3      	strhlt	r3, [r4, #12]
 800b8a0:	bd10      	pop	{r4, pc}

0800b8a2 <__swrite>:
 800b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a6:	461f      	mov	r7, r3
 800b8a8:	898b      	ldrh	r3, [r1, #12]
 800b8aa:	05db      	lsls	r3, r3, #23
 800b8ac:	4605      	mov	r5, r0
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	4616      	mov	r6, r2
 800b8b2:	d505      	bpl.n	800b8c0 <__swrite+0x1e>
 800b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f000 fa1a 	bl	800bcf4 <_lseek_r>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d6:	f000 b88b 	b.w	800b9f0 <_write_r>

0800b8da <__sseek>:
 800b8da:	b510      	push	{r4, lr}
 800b8dc:	460c      	mov	r4, r1
 800b8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e2:	f000 fa07 	bl	800bcf4 <_lseek_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	bf15      	itete	ne
 800b8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8f6:	81a3      	strheq	r3, [r4, #12]
 800b8f8:	bf18      	it	ne
 800b8fa:	81a3      	strhne	r3, [r4, #12]
 800b8fc:	bd10      	pop	{r4, pc}

0800b8fe <__sclose>:
 800b8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b902:	f000 b913 	b.w	800bb2c <_close_r>

0800b906 <strncmp>:
 800b906:	b510      	push	{r4, lr}
 800b908:	b17a      	cbz	r2, 800b92a <strncmp+0x24>
 800b90a:	4603      	mov	r3, r0
 800b90c:	3901      	subs	r1, #1
 800b90e:	1884      	adds	r4, r0, r2
 800b910:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b914:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b918:	4290      	cmp	r0, r2
 800b91a:	d101      	bne.n	800b920 <strncmp+0x1a>
 800b91c:	42a3      	cmp	r3, r4
 800b91e:	d101      	bne.n	800b924 <strncmp+0x1e>
 800b920:	1a80      	subs	r0, r0, r2
 800b922:	bd10      	pop	{r4, pc}
 800b924:	2800      	cmp	r0, #0
 800b926:	d1f3      	bne.n	800b910 <strncmp+0xa>
 800b928:	e7fa      	b.n	800b920 <strncmp+0x1a>
 800b92a:	4610      	mov	r0, r2
 800b92c:	e7f9      	b.n	800b922 <strncmp+0x1c>
	...

0800b930 <__swbuf_r>:
 800b930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b932:	460e      	mov	r6, r1
 800b934:	4614      	mov	r4, r2
 800b936:	4605      	mov	r5, r0
 800b938:	b118      	cbz	r0, 800b942 <__swbuf_r+0x12>
 800b93a:	6983      	ldr	r3, [r0, #24]
 800b93c:	b90b      	cbnz	r3, 800b942 <__swbuf_r+0x12>
 800b93e:	f7fe fadd 	bl	8009efc <__sinit>
 800b942:	4b21      	ldr	r3, [pc, #132]	; (800b9c8 <__swbuf_r+0x98>)
 800b944:	429c      	cmp	r4, r3
 800b946:	d12b      	bne.n	800b9a0 <__swbuf_r+0x70>
 800b948:	686c      	ldr	r4, [r5, #4]
 800b94a:	69a3      	ldr	r3, [r4, #24]
 800b94c:	60a3      	str	r3, [r4, #8]
 800b94e:	89a3      	ldrh	r3, [r4, #12]
 800b950:	071a      	lsls	r2, r3, #28
 800b952:	d52f      	bpl.n	800b9b4 <__swbuf_r+0x84>
 800b954:	6923      	ldr	r3, [r4, #16]
 800b956:	b36b      	cbz	r3, 800b9b4 <__swbuf_r+0x84>
 800b958:	6923      	ldr	r3, [r4, #16]
 800b95a:	6820      	ldr	r0, [r4, #0]
 800b95c:	1ac0      	subs	r0, r0, r3
 800b95e:	6963      	ldr	r3, [r4, #20]
 800b960:	b2f6      	uxtb	r6, r6
 800b962:	4283      	cmp	r3, r0
 800b964:	4637      	mov	r7, r6
 800b966:	dc04      	bgt.n	800b972 <__swbuf_r+0x42>
 800b968:	4621      	mov	r1, r4
 800b96a:	4628      	mov	r0, r5
 800b96c:	f000 f974 	bl	800bc58 <_fflush_r>
 800b970:	bb30      	cbnz	r0, 800b9c0 <__swbuf_r+0x90>
 800b972:	68a3      	ldr	r3, [r4, #8]
 800b974:	3b01      	subs	r3, #1
 800b976:	60a3      	str	r3, [r4, #8]
 800b978:	6823      	ldr	r3, [r4, #0]
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	6022      	str	r2, [r4, #0]
 800b97e:	701e      	strb	r6, [r3, #0]
 800b980:	6963      	ldr	r3, [r4, #20]
 800b982:	3001      	adds	r0, #1
 800b984:	4283      	cmp	r3, r0
 800b986:	d004      	beq.n	800b992 <__swbuf_r+0x62>
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	07db      	lsls	r3, r3, #31
 800b98c:	d506      	bpl.n	800b99c <__swbuf_r+0x6c>
 800b98e:	2e0a      	cmp	r6, #10
 800b990:	d104      	bne.n	800b99c <__swbuf_r+0x6c>
 800b992:	4621      	mov	r1, r4
 800b994:	4628      	mov	r0, r5
 800b996:	f000 f95f 	bl	800bc58 <_fflush_r>
 800b99a:	b988      	cbnz	r0, 800b9c0 <__swbuf_r+0x90>
 800b99c:	4638      	mov	r0, r7
 800b99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9a0:	4b0a      	ldr	r3, [pc, #40]	; (800b9cc <__swbuf_r+0x9c>)
 800b9a2:	429c      	cmp	r4, r3
 800b9a4:	d101      	bne.n	800b9aa <__swbuf_r+0x7a>
 800b9a6:	68ac      	ldr	r4, [r5, #8]
 800b9a8:	e7cf      	b.n	800b94a <__swbuf_r+0x1a>
 800b9aa:	4b09      	ldr	r3, [pc, #36]	; (800b9d0 <__swbuf_r+0xa0>)
 800b9ac:	429c      	cmp	r4, r3
 800b9ae:	bf08      	it	eq
 800b9b0:	68ec      	ldreq	r4, [r5, #12]
 800b9b2:	e7ca      	b.n	800b94a <__swbuf_r+0x1a>
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f82c 	bl	800ba14 <__swsetup_r>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d0cb      	beq.n	800b958 <__swbuf_r+0x28>
 800b9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9c4:	e7ea      	b.n	800b99c <__swbuf_r+0x6c>
 800b9c6:	bf00      	nop
 800b9c8:	0800c224 	.word	0x0800c224
 800b9cc:	0800c244 	.word	0x0800c244
 800b9d0:	0800c204 	.word	0x0800c204

0800b9d4 <__ascii_wctomb>:
 800b9d4:	b149      	cbz	r1, 800b9ea <__ascii_wctomb+0x16>
 800b9d6:	2aff      	cmp	r2, #255	; 0xff
 800b9d8:	bf85      	ittet	hi
 800b9da:	238a      	movhi	r3, #138	; 0x8a
 800b9dc:	6003      	strhi	r3, [r0, #0]
 800b9de:	700a      	strbls	r2, [r1, #0]
 800b9e0:	f04f 30ff 	movhi.w	r0, #4294967295
 800b9e4:	bf98      	it	ls
 800b9e6:	2001      	movls	r0, #1
 800b9e8:	4770      	bx	lr
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <_write_r>:
 800b9f0:	b538      	push	{r3, r4, r5, lr}
 800b9f2:	4d07      	ldr	r5, [pc, #28]	; (800ba10 <_write_r+0x20>)
 800b9f4:	4604      	mov	r4, r0
 800b9f6:	4608      	mov	r0, r1
 800b9f8:	4611      	mov	r1, r2
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	602a      	str	r2, [r5, #0]
 800b9fe:	461a      	mov	r2, r3
 800ba00:	f7f6 fdd5 	bl	80025ae <_write>
 800ba04:	1c43      	adds	r3, r0, #1
 800ba06:	d102      	bne.n	800ba0e <_write_r+0x1e>
 800ba08:	682b      	ldr	r3, [r5, #0]
 800ba0a:	b103      	cbz	r3, 800ba0e <_write_r+0x1e>
 800ba0c:	6023      	str	r3, [r4, #0]
 800ba0e:	bd38      	pop	{r3, r4, r5, pc}
 800ba10:	20000414 	.word	0x20000414

0800ba14 <__swsetup_r>:
 800ba14:	4b32      	ldr	r3, [pc, #200]	; (800bae0 <__swsetup_r+0xcc>)
 800ba16:	b570      	push	{r4, r5, r6, lr}
 800ba18:	681d      	ldr	r5, [r3, #0]
 800ba1a:	4606      	mov	r6, r0
 800ba1c:	460c      	mov	r4, r1
 800ba1e:	b125      	cbz	r5, 800ba2a <__swsetup_r+0x16>
 800ba20:	69ab      	ldr	r3, [r5, #24]
 800ba22:	b913      	cbnz	r3, 800ba2a <__swsetup_r+0x16>
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7fe fa69 	bl	8009efc <__sinit>
 800ba2a:	4b2e      	ldr	r3, [pc, #184]	; (800bae4 <__swsetup_r+0xd0>)
 800ba2c:	429c      	cmp	r4, r3
 800ba2e:	d10f      	bne.n	800ba50 <__swsetup_r+0x3c>
 800ba30:	686c      	ldr	r4, [r5, #4]
 800ba32:	89a3      	ldrh	r3, [r4, #12]
 800ba34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba38:	0719      	lsls	r1, r3, #28
 800ba3a:	d42c      	bmi.n	800ba96 <__swsetup_r+0x82>
 800ba3c:	06dd      	lsls	r5, r3, #27
 800ba3e:	d411      	bmi.n	800ba64 <__swsetup_r+0x50>
 800ba40:	2309      	movs	r3, #9
 800ba42:	6033      	str	r3, [r6, #0]
 800ba44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba48:	81a3      	strh	r3, [r4, #12]
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4e:	e03e      	b.n	800bace <__swsetup_r+0xba>
 800ba50:	4b25      	ldr	r3, [pc, #148]	; (800bae8 <__swsetup_r+0xd4>)
 800ba52:	429c      	cmp	r4, r3
 800ba54:	d101      	bne.n	800ba5a <__swsetup_r+0x46>
 800ba56:	68ac      	ldr	r4, [r5, #8]
 800ba58:	e7eb      	b.n	800ba32 <__swsetup_r+0x1e>
 800ba5a:	4b24      	ldr	r3, [pc, #144]	; (800baec <__swsetup_r+0xd8>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	bf08      	it	eq
 800ba60:	68ec      	ldreq	r4, [r5, #12]
 800ba62:	e7e6      	b.n	800ba32 <__swsetup_r+0x1e>
 800ba64:	0758      	lsls	r0, r3, #29
 800ba66:	d512      	bpl.n	800ba8e <__swsetup_r+0x7a>
 800ba68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba6a:	b141      	cbz	r1, 800ba7e <__swsetup_r+0x6a>
 800ba6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba70:	4299      	cmp	r1, r3
 800ba72:	d002      	beq.n	800ba7a <__swsetup_r+0x66>
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff fb55 	bl	800b124 <_free_r>
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba84:	81a3      	strh	r3, [r4, #12]
 800ba86:	2300      	movs	r3, #0
 800ba88:	6063      	str	r3, [r4, #4]
 800ba8a:	6923      	ldr	r3, [r4, #16]
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	89a3      	ldrh	r3, [r4, #12]
 800ba90:	f043 0308 	orr.w	r3, r3, #8
 800ba94:	81a3      	strh	r3, [r4, #12]
 800ba96:	6923      	ldr	r3, [r4, #16]
 800ba98:	b94b      	cbnz	r3, 800baae <__swsetup_r+0x9a>
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800baa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baa4:	d003      	beq.n	800baae <__swsetup_r+0x9a>
 800baa6:	4621      	mov	r1, r4
 800baa8:	4630      	mov	r0, r6
 800baaa:	f000 f95b 	bl	800bd64 <__smakebuf_r>
 800baae:	89a0      	ldrh	r0, [r4, #12]
 800bab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bab4:	f010 0301 	ands.w	r3, r0, #1
 800bab8:	d00a      	beq.n	800bad0 <__swsetup_r+0xbc>
 800baba:	2300      	movs	r3, #0
 800babc:	60a3      	str	r3, [r4, #8]
 800babe:	6963      	ldr	r3, [r4, #20]
 800bac0:	425b      	negs	r3, r3
 800bac2:	61a3      	str	r3, [r4, #24]
 800bac4:	6923      	ldr	r3, [r4, #16]
 800bac6:	b943      	cbnz	r3, 800bada <__swsetup_r+0xc6>
 800bac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bacc:	d1ba      	bne.n	800ba44 <__swsetup_r+0x30>
 800bace:	bd70      	pop	{r4, r5, r6, pc}
 800bad0:	0781      	lsls	r1, r0, #30
 800bad2:	bf58      	it	pl
 800bad4:	6963      	ldrpl	r3, [r4, #20]
 800bad6:	60a3      	str	r3, [r4, #8]
 800bad8:	e7f4      	b.n	800bac4 <__swsetup_r+0xb0>
 800bada:	2000      	movs	r0, #0
 800badc:	e7f7      	b.n	800bace <__swsetup_r+0xba>
 800bade:	bf00      	nop
 800bae0:	20000010 	.word	0x20000010
 800bae4:	0800c224 	.word	0x0800c224
 800bae8:	0800c244 	.word	0x0800c244
 800baec:	0800c204 	.word	0x0800c204

0800baf0 <__assert_func>:
 800baf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baf2:	4614      	mov	r4, r2
 800baf4:	461a      	mov	r2, r3
 800baf6:	4b09      	ldr	r3, [pc, #36]	; (800bb1c <__assert_func+0x2c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4605      	mov	r5, r0
 800bafc:	68d8      	ldr	r0, [r3, #12]
 800bafe:	b14c      	cbz	r4, 800bb14 <__assert_func+0x24>
 800bb00:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <__assert_func+0x30>)
 800bb02:	9100      	str	r1, [sp, #0]
 800bb04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb08:	4906      	ldr	r1, [pc, #24]	; (800bb24 <__assert_func+0x34>)
 800bb0a:	462b      	mov	r3, r5
 800bb0c:	f000 f8e0 	bl	800bcd0 <fiprintf>
 800bb10:	f000 f9d0 	bl	800beb4 <abort>
 800bb14:	4b04      	ldr	r3, [pc, #16]	; (800bb28 <__assert_func+0x38>)
 800bb16:	461c      	mov	r4, r3
 800bb18:	e7f3      	b.n	800bb02 <__assert_func+0x12>
 800bb1a:	bf00      	nop
 800bb1c:	20000010 	.word	0x20000010
 800bb20:	0800c44d 	.word	0x0800c44d
 800bb24:	0800c45a 	.word	0x0800c45a
 800bb28:	0800c488 	.word	0x0800c488

0800bb2c <_close_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	; (800bb48 <_close_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f6 fd55 	bl	80025e6 <_close>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_close_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_close_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	20000414 	.word	0x20000414

0800bb4c <__sflush_r>:
 800bb4c:	898a      	ldrh	r2, [r1, #12]
 800bb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	4605      	mov	r5, r0
 800bb54:	0710      	lsls	r0, r2, #28
 800bb56:	460c      	mov	r4, r1
 800bb58:	d458      	bmi.n	800bc0c <__sflush_r+0xc0>
 800bb5a:	684b      	ldr	r3, [r1, #4]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	dc05      	bgt.n	800bb6c <__sflush_r+0x20>
 800bb60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	dc02      	bgt.n	800bb6c <__sflush_r+0x20>
 800bb66:	2000      	movs	r0, #0
 800bb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb6e:	2e00      	cmp	r6, #0
 800bb70:	d0f9      	beq.n	800bb66 <__sflush_r+0x1a>
 800bb72:	2300      	movs	r3, #0
 800bb74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb78:	682f      	ldr	r7, [r5, #0]
 800bb7a:	602b      	str	r3, [r5, #0]
 800bb7c:	d032      	beq.n	800bbe4 <__sflush_r+0x98>
 800bb7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	075a      	lsls	r2, r3, #29
 800bb84:	d505      	bpl.n	800bb92 <__sflush_r+0x46>
 800bb86:	6863      	ldr	r3, [r4, #4]
 800bb88:	1ac0      	subs	r0, r0, r3
 800bb8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb8c:	b10b      	cbz	r3, 800bb92 <__sflush_r+0x46>
 800bb8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb90:	1ac0      	subs	r0, r0, r3
 800bb92:	2300      	movs	r3, #0
 800bb94:	4602      	mov	r2, r0
 800bb96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb98:	6a21      	ldr	r1, [r4, #32]
 800bb9a:	4628      	mov	r0, r5
 800bb9c:	47b0      	blx	r6
 800bb9e:	1c43      	adds	r3, r0, #1
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	d106      	bne.n	800bbb2 <__sflush_r+0x66>
 800bba4:	6829      	ldr	r1, [r5, #0]
 800bba6:	291d      	cmp	r1, #29
 800bba8:	d82c      	bhi.n	800bc04 <__sflush_r+0xb8>
 800bbaa:	4a2a      	ldr	r2, [pc, #168]	; (800bc54 <__sflush_r+0x108>)
 800bbac:	40ca      	lsrs	r2, r1
 800bbae:	07d6      	lsls	r6, r2, #31
 800bbb0:	d528      	bpl.n	800bc04 <__sflush_r+0xb8>
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	6062      	str	r2, [r4, #4]
 800bbb6:	04d9      	lsls	r1, r3, #19
 800bbb8:	6922      	ldr	r2, [r4, #16]
 800bbba:	6022      	str	r2, [r4, #0]
 800bbbc:	d504      	bpl.n	800bbc8 <__sflush_r+0x7c>
 800bbbe:	1c42      	adds	r2, r0, #1
 800bbc0:	d101      	bne.n	800bbc6 <__sflush_r+0x7a>
 800bbc2:	682b      	ldr	r3, [r5, #0]
 800bbc4:	b903      	cbnz	r3, 800bbc8 <__sflush_r+0x7c>
 800bbc6:	6560      	str	r0, [r4, #84]	; 0x54
 800bbc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbca:	602f      	str	r7, [r5, #0]
 800bbcc:	2900      	cmp	r1, #0
 800bbce:	d0ca      	beq.n	800bb66 <__sflush_r+0x1a>
 800bbd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbd4:	4299      	cmp	r1, r3
 800bbd6:	d002      	beq.n	800bbde <__sflush_r+0x92>
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7ff faa3 	bl	800b124 <_free_r>
 800bbde:	2000      	movs	r0, #0
 800bbe0:	6360      	str	r0, [r4, #52]	; 0x34
 800bbe2:	e7c1      	b.n	800bb68 <__sflush_r+0x1c>
 800bbe4:	6a21      	ldr	r1, [r4, #32]
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	4628      	mov	r0, r5
 800bbea:	47b0      	blx	r6
 800bbec:	1c41      	adds	r1, r0, #1
 800bbee:	d1c7      	bne.n	800bb80 <__sflush_r+0x34>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d0c4      	beq.n	800bb80 <__sflush_r+0x34>
 800bbf6:	2b1d      	cmp	r3, #29
 800bbf8:	d001      	beq.n	800bbfe <__sflush_r+0xb2>
 800bbfa:	2b16      	cmp	r3, #22
 800bbfc:	d101      	bne.n	800bc02 <__sflush_r+0xb6>
 800bbfe:	602f      	str	r7, [r5, #0]
 800bc00:	e7b1      	b.n	800bb66 <__sflush_r+0x1a>
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc08:	81a3      	strh	r3, [r4, #12]
 800bc0a:	e7ad      	b.n	800bb68 <__sflush_r+0x1c>
 800bc0c:	690f      	ldr	r7, [r1, #16]
 800bc0e:	2f00      	cmp	r7, #0
 800bc10:	d0a9      	beq.n	800bb66 <__sflush_r+0x1a>
 800bc12:	0793      	lsls	r3, r2, #30
 800bc14:	680e      	ldr	r6, [r1, #0]
 800bc16:	bf08      	it	eq
 800bc18:	694b      	ldreq	r3, [r1, #20]
 800bc1a:	600f      	str	r7, [r1, #0]
 800bc1c:	bf18      	it	ne
 800bc1e:	2300      	movne	r3, #0
 800bc20:	eba6 0807 	sub.w	r8, r6, r7
 800bc24:	608b      	str	r3, [r1, #8]
 800bc26:	f1b8 0f00 	cmp.w	r8, #0
 800bc2a:	dd9c      	ble.n	800bb66 <__sflush_r+0x1a>
 800bc2c:	6a21      	ldr	r1, [r4, #32]
 800bc2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc30:	4643      	mov	r3, r8
 800bc32:	463a      	mov	r2, r7
 800bc34:	4628      	mov	r0, r5
 800bc36:	47b0      	blx	r6
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	dc06      	bgt.n	800bc4a <__sflush_r+0xfe>
 800bc3c:	89a3      	ldrh	r3, [r4, #12]
 800bc3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc42:	81a3      	strh	r3, [r4, #12]
 800bc44:	f04f 30ff 	mov.w	r0, #4294967295
 800bc48:	e78e      	b.n	800bb68 <__sflush_r+0x1c>
 800bc4a:	4407      	add	r7, r0
 800bc4c:	eba8 0800 	sub.w	r8, r8, r0
 800bc50:	e7e9      	b.n	800bc26 <__sflush_r+0xda>
 800bc52:	bf00      	nop
 800bc54:	20400001 	.word	0x20400001

0800bc58 <_fflush_r>:
 800bc58:	b538      	push	{r3, r4, r5, lr}
 800bc5a:	690b      	ldr	r3, [r1, #16]
 800bc5c:	4605      	mov	r5, r0
 800bc5e:	460c      	mov	r4, r1
 800bc60:	b913      	cbnz	r3, 800bc68 <_fflush_r+0x10>
 800bc62:	2500      	movs	r5, #0
 800bc64:	4628      	mov	r0, r5
 800bc66:	bd38      	pop	{r3, r4, r5, pc}
 800bc68:	b118      	cbz	r0, 800bc72 <_fflush_r+0x1a>
 800bc6a:	6983      	ldr	r3, [r0, #24]
 800bc6c:	b90b      	cbnz	r3, 800bc72 <_fflush_r+0x1a>
 800bc6e:	f7fe f945 	bl	8009efc <__sinit>
 800bc72:	4b14      	ldr	r3, [pc, #80]	; (800bcc4 <_fflush_r+0x6c>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	d11b      	bne.n	800bcb0 <_fflush_r+0x58>
 800bc78:	686c      	ldr	r4, [r5, #4]
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0ef      	beq.n	800bc62 <_fflush_r+0xa>
 800bc82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc84:	07d0      	lsls	r0, r2, #31
 800bc86:	d404      	bmi.n	800bc92 <_fflush_r+0x3a>
 800bc88:	0599      	lsls	r1, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_fflush_r+0x3a>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc8e:	f7fe fd46 	bl	800a71e <__retarget_lock_acquire_recursive>
 800bc92:	4628      	mov	r0, r5
 800bc94:	4621      	mov	r1, r4
 800bc96:	f7ff ff59 	bl	800bb4c <__sflush_r>
 800bc9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc9c:	07da      	lsls	r2, r3, #31
 800bc9e:	4605      	mov	r5, r0
 800bca0:	d4e0      	bmi.n	800bc64 <_fflush_r+0xc>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	059b      	lsls	r3, r3, #22
 800bca6:	d4dd      	bmi.n	800bc64 <_fflush_r+0xc>
 800bca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcaa:	f7fe fd39 	bl	800a720 <__retarget_lock_release_recursive>
 800bcae:	e7d9      	b.n	800bc64 <_fflush_r+0xc>
 800bcb0:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <_fflush_r+0x70>)
 800bcb2:	429c      	cmp	r4, r3
 800bcb4:	d101      	bne.n	800bcba <_fflush_r+0x62>
 800bcb6:	68ac      	ldr	r4, [r5, #8]
 800bcb8:	e7df      	b.n	800bc7a <_fflush_r+0x22>
 800bcba:	4b04      	ldr	r3, [pc, #16]	; (800bccc <_fflush_r+0x74>)
 800bcbc:	429c      	cmp	r4, r3
 800bcbe:	bf08      	it	eq
 800bcc0:	68ec      	ldreq	r4, [r5, #12]
 800bcc2:	e7da      	b.n	800bc7a <_fflush_r+0x22>
 800bcc4:	0800c224 	.word	0x0800c224
 800bcc8:	0800c244 	.word	0x0800c244
 800bccc:	0800c204 	.word	0x0800c204

0800bcd0 <fiprintf>:
 800bcd0:	b40e      	push	{r1, r2, r3}
 800bcd2:	b503      	push	{r0, r1, lr}
 800bcd4:	4601      	mov	r1, r0
 800bcd6:	ab03      	add	r3, sp, #12
 800bcd8:	4805      	ldr	r0, [pc, #20]	; (800bcf0 <fiprintf+0x20>)
 800bcda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcde:	6800      	ldr	r0, [r0, #0]
 800bce0:	9301      	str	r3, [sp, #4]
 800bce2:	f7ff fc85 	bl	800b5f0 <_vfiprintf_r>
 800bce6:	b002      	add	sp, #8
 800bce8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcec:	b003      	add	sp, #12
 800bcee:	4770      	bx	lr
 800bcf0:	20000010 	.word	0x20000010

0800bcf4 <_lseek_r>:
 800bcf4:	b538      	push	{r3, r4, r5, lr}
 800bcf6:	4d07      	ldr	r5, [pc, #28]	; (800bd14 <_lseek_r+0x20>)
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	4608      	mov	r0, r1
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	2200      	movs	r2, #0
 800bd00:	602a      	str	r2, [r5, #0]
 800bd02:	461a      	mov	r2, r3
 800bd04:	f7f6 fc96 	bl	8002634 <_lseek>
 800bd08:	1c43      	adds	r3, r0, #1
 800bd0a:	d102      	bne.n	800bd12 <_lseek_r+0x1e>
 800bd0c:	682b      	ldr	r3, [r5, #0]
 800bd0e:	b103      	cbz	r3, 800bd12 <_lseek_r+0x1e>
 800bd10:	6023      	str	r3, [r4, #0]
 800bd12:	bd38      	pop	{r3, r4, r5, pc}
 800bd14:	20000414 	.word	0x20000414

0800bd18 <__swhatbuf_r>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	460e      	mov	r6, r1
 800bd1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd20:	2900      	cmp	r1, #0
 800bd22:	b096      	sub	sp, #88	; 0x58
 800bd24:	4614      	mov	r4, r2
 800bd26:	461d      	mov	r5, r3
 800bd28:	da08      	bge.n	800bd3c <__swhatbuf_r+0x24>
 800bd2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	602a      	str	r2, [r5, #0]
 800bd32:	061a      	lsls	r2, r3, #24
 800bd34:	d410      	bmi.n	800bd58 <__swhatbuf_r+0x40>
 800bd36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bd3a:	e00e      	b.n	800bd5a <__swhatbuf_r+0x42>
 800bd3c:	466a      	mov	r2, sp
 800bd3e:	f000 f8c1 	bl	800bec4 <_fstat_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	dbf1      	blt.n	800bd2a <__swhatbuf_r+0x12>
 800bd46:	9a01      	ldr	r2, [sp, #4]
 800bd48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bd4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bd50:	425a      	negs	r2, r3
 800bd52:	415a      	adcs	r2, r3
 800bd54:	602a      	str	r2, [r5, #0]
 800bd56:	e7ee      	b.n	800bd36 <__swhatbuf_r+0x1e>
 800bd58:	2340      	movs	r3, #64	; 0x40
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	b016      	add	sp, #88	; 0x58
 800bd60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bd64 <__smakebuf_r>:
 800bd64:	898b      	ldrh	r3, [r1, #12]
 800bd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bd68:	079d      	lsls	r5, r3, #30
 800bd6a:	4606      	mov	r6, r0
 800bd6c:	460c      	mov	r4, r1
 800bd6e:	d507      	bpl.n	800bd80 <__smakebuf_r+0x1c>
 800bd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	6123      	str	r3, [r4, #16]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	6163      	str	r3, [r4, #20]
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	ab01      	add	r3, sp, #4
 800bd82:	466a      	mov	r2, sp
 800bd84:	f7ff ffc8 	bl	800bd18 <__swhatbuf_r>
 800bd88:	9900      	ldr	r1, [sp, #0]
 800bd8a:	4605      	mov	r5, r0
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff fa35 	bl	800b1fc <_malloc_r>
 800bd92:	b948      	cbnz	r0, 800bda8 <__smakebuf_r+0x44>
 800bd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd98:	059a      	lsls	r2, r3, #22
 800bd9a:	d4ef      	bmi.n	800bd7c <__smakebuf_r+0x18>
 800bd9c:	f023 0303 	bic.w	r3, r3, #3
 800bda0:	f043 0302 	orr.w	r3, r3, #2
 800bda4:	81a3      	strh	r3, [r4, #12]
 800bda6:	e7e3      	b.n	800bd70 <__smakebuf_r+0xc>
 800bda8:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <__smakebuf_r+0x7c>)
 800bdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bdac:	89a3      	ldrh	r3, [r4, #12]
 800bdae:	6020      	str	r0, [r4, #0]
 800bdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	6163      	str	r3, [r4, #20]
 800bdba:	9b01      	ldr	r3, [sp, #4]
 800bdbc:	6120      	str	r0, [r4, #16]
 800bdbe:	b15b      	cbz	r3, 800bdd8 <__smakebuf_r+0x74>
 800bdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdc4:	4630      	mov	r0, r6
 800bdc6:	f000 f88f 	bl	800bee8 <_isatty_r>
 800bdca:	b128      	cbz	r0, 800bdd8 <__smakebuf_r+0x74>
 800bdcc:	89a3      	ldrh	r3, [r4, #12]
 800bdce:	f023 0303 	bic.w	r3, r3, #3
 800bdd2:	f043 0301 	orr.w	r3, r3, #1
 800bdd6:	81a3      	strh	r3, [r4, #12]
 800bdd8:	89a0      	ldrh	r0, [r4, #12]
 800bdda:	4305      	orrs	r5, r0
 800bddc:	81a5      	strh	r5, [r4, #12]
 800bdde:	e7cd      	b.n	800bd7c <__smakebuf_r+0x18>
 800bde0:	08009e95 	.word	0x08009e95

0800bde4 <memmove>:
 800bde4:	4288      	cmp	r0, r1
 800bde6:	b510      	push	{r4, lr}
 800bde8:	eb01 0402 	add.w	r4, r1, r2
 800bdec:	d902      	bls.n	800bdf4 <memmove+0x10>
 800bdee:	4284      	cmp	r4, r0
 800bdf0:	4623      	mov	r3, r4
 800bdf2:	d807      	bhi.n	800be04 <memmove+0x20>
 800bdf4:	1e43      	subs	r3, r0, #1
 800bdf6:	42a1      	cmp	r1, r4
 800bdf8:	d008      	beq.n	800be0c <memmove+0x28>
 800bdfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be02:	e7f8      	b.n	800bdf6 <memmove+0x12>
 800be04:	4402      	add	r2, r0
 800be06:	4601      	mov	r1, r0
 800be08:	428a      	cmp	r2, r1
 800be0a:	d100      	bne.n	800be0e <memmove+0x2a>
 800be0c:	bd10      	pop	{r4, pc}
 800be0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be16:	e7f7      	b.n	800be08 <memmove+0x24>

0800be18 <__malloc_lock>:
 800be18:	4801      	ldr	r0, [pc, #4]	; (800be20 <__malloc_lock+0x8>)
 800be1a:	f7fe bc80 	b.w	800a71e <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	20000408 	.word	0x20000408

0800be24 <__malloc_unlock>:
 800be24:	4801      	ldr	r0, [pc, #4]	; (800be2c <__malloc_unlock+0x8>)
 800be26:	f7fe bc7b 	b.w	800a720 <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	20000408 	.word	0x20000408

0800be30 <_realloc_r>:
 800be30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be34:	4680      	mov	r8, r0
 800be36:	4614      	mov	r4, r2
 800be38:	460e      	mov	r6, r1
 800be3a:	b921      	cbnz	r1, 800be46 <_realloc_r+0x16>
 800be3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be40:	4611      	mov	r1, r2
 800be42:	f7ff b9db 	b.w	800b1fc <_malloc_r>
 800be46:	b92a      	cbnz	r2, 800be54 <_realloc_r+0x24>
 800be48:	f7ff f96c 	bl	800b124 <_free_r>
 800be4c:	4625      	mov	r5, r4
 800be4e:	4628      	mov	r0, r5
 800be50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be54:	f000 f858 	bl	800bf08 <_malloc_usable_size_r>
 800be58:	4284      	cmp	r4, r0
 800be5a:	4607      	mov	r7, r0
 800be5c:	d802      	bhi.n	800be64 <_realloc_r+0x34>
 800be5e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be62:	d812      	bhi.n	800be8a <_realloc_r+0x5a>
 800be64:	4621      	mov	r1, r4
 800be66:	4640      	mov	r0, r8
 800be68:	f7ff f9c8 	bl	800b1fc <_malloc_r>
 800be6c:	4605      	mov	r5, r0
 800be6e:	2800      	cmp	r0, #0
 800be70:	d0ed      	beq.n	800be4e <_realloc_r+0x1e>
 800be72:	42bc      	cmp	r4, r7
 800be74:	4622      	mov	r2, r4
 800be76:	4631      	mov	r1, r6
 800be78:	bf28      	it	cs
 800be7a:	463a      	movcs	r2, r7
 800be7c:	f7fe fc6c 	bl	800a758 <memcpy>
 800be80:	4631      	mov	r1, r6
 800be82:	4640      	mov	r0, r8
 800be84:	f7ff f94e 	bl	800b124 <_free_r>
 800be88:	e7e1      	b.n	800be4e <_realloc_r+0x1e>
 800be8a:	4635      	mov	r5, r6
 800be8c:	e7df      	b.n	800be4e <_realloc_r+0x1e>
	...

0800be90 <_read_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d07      	ldr	r5, [pc, #28]	; (800beb0 <_read_r+0x20>)
 800be94:	4604      	mov	r4, r0
 800be96:	4608      	mov	r0, r1
 800be98:	4611      	mov	r1, r2
 800be9a:	2200      	movs	r2, #0
 800be9c:	602a      	str	r2, [r5, #0]
 800be9e:	461a      	mov	r2, r3
 800bea0:	f7f6 fb68 	bl	8002574 <_read>
 800bea4:	1c43      	adds	r3, r0, #1
 800bea6:	d102      	bne.n	800beae <_read_r+0x1e>
 800bea8:	682b      	ldr	r3, [r5, #0]
 800beaa:	b103      	cbz	r3, 800beae <_read_r+0x1e>
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	bd38      	pop	{r3, r4, r5, pc}
 800beb0:	20000414 	.word	0x20000414

0800beb4 <abort>:
 800beb4:	b508      	push	{r3, lr}
 800beb6:	2006      	movs	r0, #6
 800beb8:	f000 f856 	bl	800bf68 <raise>
 800bebc:	2001      	movs	r0, #1
 800bebe:	f7f6 fb4f 	bl	8002560 <_exit>
	...

0800bec4 <_fstat_r>:
 800bec4:	b538      	push	{r3, r4, r5, lr}
 800bec6:	4d07      	ldr	r5, [pc, #28]	; (800bee4 <_fstat_r+0x20>)
 800bec8:	2300      	movs	r3, #0
 800beca:	4604      	mov	r4, r0
 800becc:	4608      	mov	r0, r1
 800bece:	4611      	mov	r1, r2
 800bed0:	602b      	str	r3, [r5, #0]
 800bed2:	f7f6 fb94 	bl	80025fe <_fstat>
 800bed6:	1c43      	adds	r3, r0, #1
 800bed8:	d102      	bne.n	800bee0 <_fstat_r+0x1c>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	b103      	cbz	r3, 800bee0 <_fstat_r+0x1c>
 800bede:	6023      	str	r3, [r4, #0]
 800bee0:	bd38      	pop	{r3, r4, r5, pc}
 800bee2:	bf00      	nop
 800bee4:	20000414 	.word	0x20000414

0800bee8 <_isatty_r>:
 800bee8:	b538      	push	{r3, r4, r5, lr}
 800beea:	4d06      	ldr	r5, [pc, #24]	; (800bf04 <_isatty_r+0x1c>)
 800beec:	2300      	movs	r3, #0
 800beee:	4604      	mov	r4, r0
 800bef0:	4608      	mov	r0, r1
 800bef2:	602b      	str	r3, [r5, #0]
 800bef4:	f7f6 fb93 	bl	800261e <_isatty>
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	d102      	bne.n	800bf02 <_isatty_r+0x1a>
 800befc:	682b      	ldr	r3, [r5, #0]
 800befe:	b103      	cbz	r3, 800bf02 <_isatty_r+0x1a>
 800bf00:	6023      	str	r3, [r4, #0]
 800bf02:	bd38      	pop	{r3, r4, r5, pc}
 800bf04:	20000414 	.word	0x20000414

0800bf08 <_malloc_usable_size_r>:
 800bf08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf0c:	1f18      	subs	r0, r3, #4
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	bfbc      	itt	lt
 800bf12:	580b      	ldrlt	r3, [r1, r0]
 800bf14:	18c0      	addlt	r0, r0, r3
 800bf16:	4770      	bx	lr

0800bf18 <_raise_r>:
 800bf18:	291f      	cmp	r1, #31
 800bf1a:	b538      	push	{r3, r4, r5, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	460d      	mov	r5, r1
 800bf20:	d904      	bls.n	800bf2c <_raise_r+0x14>
 800bf22:	2316      	movs	r3, #22
 800bf24:	6003      	str	r3, [r0, #0]
 800bf26:	f04f 30ff 	mov.w	r0, #4294967295
 800bf2a:	bd38      	pop	{r3, r4, r5, pc}
 800bf2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf2e:	b112      	cbz	r2, 800bf36 <_raise_r+0x1e>
 800bf30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf34:	b94b      	cbnz	r3, 800bf4a <_raise_r+0x32>
 800bf36:	4620      	mov	r0, r4
 800bf38:	f000 f830 	bl	800bf9c <_getpid_r>
 800bf3c:	462a      	mov	r2, r5
 800bf3e:	4601      	mov	r1, r0
 800bf40:	4620      	mov	r0, r4
 800bf42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf46:	f000 b817 	b.w	800bf78 <_kill_r>
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d00a      	beq.n	800bf64 <_raise_r+0x4c>
 800bf4e:	1c59      	adds	r1, r3, #1
 800bf50:	d103      	bne.n	800bf5a <_raise_r+0x42>
 800bf52:	2316      	movs	r3, #22
 800bf54:	6003      	str	r3, [r0, #0]
 800bf56:	2001      	movs	r0, #1
 800bf58:	e7e7      	b.n	800bf2a <_raise_r+0x12>
 800bf5a:	2400      	movs	r4, #0
 800bf5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf60:	4628      	mov	r0, r5
 800bf62:	4798      	blx	r3
 800bf64:	2000      	movs	r0, #0
 800bf66:	e7e0      	b.n	800bf2a <_raise_r+0x12>

0800bf68 <raise>:
 800bf68:	4b02      	ldr	r3, [pc, #8]	; (800bf74 <raise+0xc>)
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	f7ff bfd3 	b.w	800bf18 <_raise_r>
 800bf72:	bf00      	nop
 800bf74:	20000010 	.word	0x20000010

0800bf78 <_kill_r>:
 800bf78:	b538      	push	{r3, r4, r5, lr}
 800bf7a:	4d07      	ldr	r5, [pc, #28]	; (800bf98 <_kill_r+0x20>)
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	4604      	mov	r4, r0
 800bf80:	4608      	mov	r0, r1
 800bf82:	4611      	mov	r1, r2
 800bf84:	602b      	str	r3, [r5, #0]
 800bf86:	f7f6 fadb 	bl	8002540 <_kill>
 800bf8a:	1c43      	adds	r3, r0, #1
 800bf8c:	d102      	bne.n	800bf94 <_kill_r+0x1c>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	b103      	cbz	r3, 800bf94 <_kill_r+0x1c>
 800bf92:	6023      	str	r3, [r4, #0]
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	bf00      	nop
 800bf98:	20000414 	.word	0x20000414

0800bf9c <_getpid_r>:
 800bf9c:	f7f6 bac8 	b.w	8002530 <_getpid>

0800bfa0 <_init>:
 800bfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa2:	bf00      	nop
 800bfa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfa6:	bc08      	pop	{r3}
 800bfa8:	469e      	mov	lr, r3
 800bfaa:	4770      	bx	lr

0800bfac <_fini>:
 800bfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfae:	bf00      	nop
 800bfb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb2:	bc08      	pop	{r3}
 800bfb4:	469e      	mov	lr, r3
 800bfb6:	4770      	bx	lr
