
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  0800a870  0800a870  0001a870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baec  0800baec  00020468  2**0
                  CONTENTS
  4 .ARM          00000008  0800baec  0800baec  0001baec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf4  0800baf4  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf8  0800baf8  0001baf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  0800bafc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000468  0800bf64  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  0800bf64  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013841  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e33  00000000  00000000  00033cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00036b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00037b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024675  00000000  00000000  000389d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014411  00000000  00000000  0005d04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da8e7  00000000  00000000  0007145e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bd45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  0014bd98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a854 	.word	0x0800a854

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0800a854 	.word	0x0800a854

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fa2f 	bl	80024bc <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fda0 	bl	8001ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f001 fb91 	bl	80027a0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fd90 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000484 	.word	0x20000484
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f002 fb93 	bl	8003834 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f001 ff6b 	bl	8003030 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f000 fd22 	bl	8001ba8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	200004cc 	.word	0x200004cc
 8001188:	40026410 	.word	0x40026410

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f001 feae 	bl	8002f02 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 fcfc 	bl	8001ba8 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f001 fee6 	bl	8002f90 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 fced 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000052c 	.word	0x2000052c
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 faf1 	bl	8003834 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2038      	movs	r0, #56	; 0x38
 8001290:	f001 fe01 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001294:	2038      	movs	r0, #56	; 0x38
 8001296:	f001 fe1a 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x140>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f248 0181 	movw	r1, #32897	; 0x8081
 8001350:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_GPIO_Init+0x144>)
 8001352:	f002 fc0b 	bl	8003b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <MX_GPIO_Init+0x148>)
 800135e:	f002 fc05 	bl	8003b6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_GPIO_Init+0x14c>)
 800136a:	f002 fbff 	bl	8003b6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = rec_right_Pin|rec_left_Pin;
 800136e:	2330      	movs	r3, #48	; 0x30
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0x150>)
 8001382:	f002 fa57 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 8001386:	f248 0381 	movw	r3, #32897	; 0x8081
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_GPIO_Init+0x144>)
 80013a0:	f002 fa48 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013a4:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0x148>)
 80013be:	f002 fa39 	bl	8003834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80013dc:	f002 fa2a 	bl	8003834 <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40021000 	.word	0x40021000

080013fc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b0a      	cmp	r3, #10
 8001408:	d109      	bne.n	800141e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800140a:	230d      	movs	r3, #13
 800140c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800140e:	f107 010f 	add.w	r1, r7, #15
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <__io_putchar+0x3c>)
 800141a:	f003 fcb7 	bl	8004d8c <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800141e:	1d39      	adds	r1, r7, #4
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2201      	movs	r2, #1
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <__io_putchar+0x3c>)
 8001428:	f003 fcb0 	bl	8004d8c <HAL_UART_Transmit>
    return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000060c 	.word	0x2000060c

0800143c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d110      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3305      	adds	r3, #5
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001456:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001460:	f005 fb6a 	bl	8006b38 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800146a:	f002 fb98 	bl	8003b9e <HAL_GPIO_TogglePin>
	}

	/*przerwanie od od TIM 2 - dekodowanie IR*/
	if (htim == &htim2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d104      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		printf("TIM2 przerwanie\n");
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001478:	f005 fbe4 	bl	8006c44 <puts>
		RC5_ResetPacket();
 800147c:	f000 fc12 	bl	8001ca4 <RC5_ResetPacket>
	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200005c4 	.word	0x200005c4
 800148c:	20000554 	.word	0x20000554
 8001490:	0800a870 	.word	0x0800a870
 8001494:	40020c00 	.word	0x40020c00
 8001498:	2000057c 	.word	0x2000057c
 800149c:	0800a884 	.word	0x0800a884

080014a0 <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	    ---------------------------------------------
	    It resets the InfraRed decoders packet.
	    - The Timer Overflow is set to 3.6 ms .*/

	    /* IC2 Interrupt*/
	    if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_1)
 80014a8:	4819      	ldr	r0, [pc, #100]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014aa:	f003 fb3d 	bl	8004b28 <HAL_TIM_GetActiveChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d113      	bne.n	80014dc <HAL_TIM_IC_CaptureCallback+0x3c>
	    {
	    	printf("CH 1 przerwanie\n");
 80014b4:	4817      	ldr	r0, [pc, #92]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x74>)
 80014b6:	f005 fbc5 	bl	8006c44 <puts>
	      ICValue2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4814      	ldr	r0, [pc, #80]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014be:	f003 fad1 	bl	8004a64 <HAL_TIM_ReadCapturedValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x78>)
 80014c6:	6013      	str	r3, [r2, #0]
	      /* RC5 */
	      RC5_DataSampling(ICValue2 - ICValue1 , 0);
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x78>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fbfb 	bl	8001cd0 <RC5_DataSampling>
	    {
	    	printf("CH 2 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
}
 80014da:	e015      	b.n	8001508 <HAL_TIM_IC_CaptureCallback+0x68>
	    else if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_2)
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014de:	f003 fb23 	bl	8004b28 <HAL_TIM_GetActiveChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d10f      	bne.n	8001508 <HAL_TIM_IC_CaptureCallback+0x68>
	    	printf("CH 2 przerwanie\n");
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x80>)
 80014ea:	f005 fbab 	bl	8006c44 <puts>
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80014ee:	2104      	movs	r1, #4
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014f2:	f003 fab7 	bl	8004a64 <HAL_TIM_ReadCapturedValue>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014fa:	6013      	str	r3, [r2, #0]
	      RC5_DataSampling(ICValue1 , 1);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fbe4 	bl	8001cd0 <RC5_DataSampling>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	2000057c 	.word	0x2000057c
 8001514:	0800a894 	.word	0x0800a894
 8001518:	20000550 	.word	0x20000550
 800151c:	2000054c 	.word	0x2000054c
 8001520:	0800a8a4 	.word	0x0800a8a4

08001524 <STOP>:

void STOP(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	speed = 0;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <STOP+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <STOP+0x34>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <STOP+0x38>)
 8001538:	f001 fd05 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <STOP+0x3c>)
 8001544:	f002 fb12 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <STOP+0x3c>)
 8001550:	f002 fb0c 	bl	8003b6c <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000544 	.word	0x20000544
 800155c:	2000052c 	.word	0x2000052c
 8001560:	40020800 	.word	0x40020800

08001564 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	/*podejmwoanie dzialan na podstawie odebranych danych
	oraz wpisywanie informacji zwrotnej do bufora*/
	switch( atoi((char*)&received) )
 800156c:	4851      	ldr	r0, [pc, #324]	; (80016b4 <HAL_UART_RxCpltCallback+0x150>)
 800156e:	f004 fc33 	bl	8005dd8 <atoi>
 8001572:	4603      	mov	r3, r0
 8001574:	2b09      	cmp	r3, #9
 8001576:	f200 8093 	bhi.w	80016a0 <HAL_UART_RxCpltCallback+0x13c>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <HAL_UART_RxCpltCallback+0x1c>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	080015a9 	.word	0x080015a9
 8001584:	080015bb 	.word	0x080015bb
 8001588:	080015fd 	.word	0x080015fd
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800164d 	.word	0x0800164d
 8001594:	0800165b 	.word	0x0800165b
 8001598:	08001669 	.word	0x08001669
 800159c:	08001677 	.word	0x08001677
 80015a0:	08001685 	.word	0x08001685
 80015a4:	08001693 	.word	0x08001693
	{
	case 0:
		drive=0;
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
		STOP();
 80015ae:	f7ff ffb9 	bl	8001524 <STOP>
		printf("Odebrano: 0\n");
 80015b2:	4842      	ldr	r0, [pc, #264]	; (80016bc <HAL_UART_RxCpltCallback+0x158>)
 80015b4:	f005 fb46 	bl	8006c44 <puts>
		break;
 80015b8:	e073      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 1:
		drive = 1;
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
		speed = speed + 10;
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	330a      	adds	r3, #10
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 80015c8:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	483c      	ldr	r0, [pc, #240]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015d2:	f002 facb 	bl	8003b6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	4839      	ldr	r0, [pc, #228]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015de:	f002 fac5 	bl	8003b6c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f000 ff46 	bl	8002474 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ee:	4835      	ldr	r0, [pc, #212]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015f0:	f002 fabc 	bl	8003b6c <HAL_GPIO_WritePin>
		printf("Odebrano: 1\n");
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <HAL_UART_RxCpltCallback+0x164>)
 80015f6:	f005 fb25 	bl	8006c44 <puts>
		break;
 80015fa:	e052      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 2:
		//STOP();
		drive = 2;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 2\n");
 8001602:	4832      	ldr	r0, [pc, #200]	; (80016cc <HAL_UART_RxCpltCallback+0x168>)
 8001604:	f005 fb1e 	bl	8006c44 <puts>
		break;
 8001608:	e04b      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 3:
		speed = speed - 10;
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b0a      	subs	r3, #10
 8001610:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 8001612:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161a:	482a      	ldr	r0, [pc, #168]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 800161c:	f002 faa6 	bl	8003b6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 8001628:	f002 faa0 	bl	8003b6c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	f000 ff21 	bl	8002474 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4822      	ldr	r0, [pc, #136]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 800163a:	f002 fa97 	bl	8003b6c <HAL_GPIO_WritePin>
		drive = 3;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001640:	2203      	movs	r2, #3
 8001642:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 3\n");
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <HAL_UART_RxCpltCallback+0x16c>)
 8001646:	f005 fafd 	bl	8006c44 <puts>
		break;
 800164a:	e02a      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 4:
		//STOP();
		drive = 4;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800164e:	2204      	movs	r2, #4
 8001650:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 4\n");
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <HAL_UART_RxCpltCallback+0x170>)
 8001654:	f005 faf6 	bl	8006c44 <puts>
		break;
 8001658:	e023      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 5:
		drive = 5;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800165c:	2205      	movs	r2, #5
 800165e:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 5\n");
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <HAL_UART_RxCpltCallback+0x174>)
 8001662:	f005 faef 	bl	8006c44 <puts>
		break;
 8001666:	e01c      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 6:
		//STOP();
		drive = 6;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800166a:	2206      	movs	r2, #6
 800166c:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 6\n");
 800166e:	481b      	ldr	r0, [pc, #108]	; (80016dc <HAL_UART_RxCpltCallback+0x178>)
 8001670:	f005 fae8 	bl	8006c44 <puts>
		break;
 8001674:	e015      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 7:
		//STOP();
		drive = 7;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 7\n");
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <HAL_UART_RxCpltCallback+0x17c>)
 800167e:	f005 fae1 	bl	8006c44 <puts>
		break;
 8001682:	e00e      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 8:
		//STOP();
		drive = 8;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001686:	2208      	movs	r2, #8
 8001688:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 8\n");
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <HAL_UART_RxCpltCallback+0x180>)
 800168c:	f005 fada 	bl	8006c44 <puts>
		break;
 8001690:	e007      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 9:
		//STOP();
		drive = 9;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001694:	2209      	movs	r2, #9
 8001696:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 9\n");
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <HAL_UART_RxCpltCallback+0x184>)
 800169a:	f005 fad3 	bl	8006c44 <puts>
		break;
 800169e:	e000      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	default:
		break;
 80016a0:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 80016a2:	2201      	movs	r2, #1
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <HAL_UART_RxCpltCallback+0x150>)
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <HAL_UART_RxCpltCallback+0x188>)
 80016a8:	f003 fc02 	bl	8004eb0 <HAL_UART_Receive_IT>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000004 	.word	0x20000004
 80016b8:	20000000 	.word	0x20000000
 80016bc:	0800a8b4 	.word	0x0800a8b4
 80016c0:	20000544 	.word	0x20000544
 80016c4:	40020800 	.word	0x40020800
 80016c8:	0800a8c0 	.word	0x0800a8c0
 80016cc:	0800a8cc 	.word	0x0800a8cc
 80016d0:	0800a8d8 	.word	0x0800a8d8
 80016d4:	0800a8e4 	.word	0x0800a8e4
 80016d8:	0800a8f0 	.word	0x0800a8f0
 80016dc:	0800a8fc 	.word	0x0800a8fc
 80016e0:	0800a908 	.word	0x0800a908
 80016e4:	0800a914 	.word	0x0800a914
 80016e8:	0800a920 	.word	0x0800a920
 80016ec:	2000060c 	.word	0x2000060c

080016f0 <PRZOD>:


void PRZOD(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <PRZOD+0x44>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <PRZOD+0x48>)
 80016fe:	f001 fc22 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//1 przód
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <PRZOD+0x4c>)
 800170a:	f002 fa2f 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);	//2 przód
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <PRZOD+0x4c>)
 8001716:	f002 fa29 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	//3 przód
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <PRZOD+0x50>)
 8001722:	f002 fa23 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);	//4 przód
 8001726:	2201      	movs	r2, #1
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <PRZOD+0x4c>)
 800172c:	f002 fa1e 	bl	8003b6c <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000544 	.word	0x20000544
 8001738:	2000052c 	.word	0x2000052c
 800173c:	40020800 	.word	0x40020800
 8001740:	40020000 	.word	0x40020000

08001744 <LEWA>:

void LEWA(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <LEWA+0x44>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <LEWA+0x48>)
 8001752:	f001 fbf8 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LEWA+0x4c>)
 800175e:	f002 fa05 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <LEWA+0x4c>)
 800176a:	f002 f9ff 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <LEWA+0x50>)
 8001776:	f002 f9f9 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <LEWA+0x4c>)
 8001780:	f002 f9f4 	bl	8003b6c <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000544 	.word	0x20000544
 800178c:	2000052c 	.word	0x2000052c
 8001790:	40020800 	.word	0x40020800
 8001794:	40020000 	.word	0x40020000

08001798 <PRAWA>:

void PRAWA(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <PRAWA+0x44>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <PRAWA+0x48>)
 80017a6:	f001 fbce 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <PRAWA+0x4c>)
 80017b2:	f002 f9db 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <PRAWA+0x4c>)
 80017be:	f002 f9d5 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <PRAWA+0x50>)
 80017ca:	f002 f9cf 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 80017ce:	2201      	movs	r2, #1
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <PRAWA+0x4c>)
 80017d4:	f002 f9ca 	bl	8003b6c <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000544 	.word	0x20000544
 80017e0:	2000052c 	.word	0x2000052c
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020000 	.word	0x40020000

080017ec <OBROT_P>:

void OBROT_P(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <OBROT_P+0x44>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <OBROT_P+0x48>)
 80017fa:	f001 fba4 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <OBROT_P+0x4c>)
 8001806:	f002 f9b1 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <OBROT_P+0x4c>)
 8001812:	f002 f9ab 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <OBROT_P+0x50>)
 800181e:	f002 f9a5 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 8001822:	2201      	movs	r2, #1
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <OBROT_P+0x4c>)
 8001828:	f002 f9a0 	bl	8003b6c <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000544 	.word	0x20000544
 8001834:	2000052c 	.word	0x2000052c
 8001838:	40020800 	.word	0x40020800
 800183c:	40020000 	.word	0x40020000

08001840 <OBROT_L>:

void OBROT_L(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <OBROT_L+0x44>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	480e      	ldr	r0, [pc, #56]	; (8001888 <OBROT_L+0x48>)
 800184e:	f001 fb7a 	bl	8002f46 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <OBROT_L+0x4c>)
 800185a:	f002 f987 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <OBROT_L+0x4c>)
 8001866:	f002 f981 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <OBROT_L+0x50>)
 8001872:	f002 f97b 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 8001876:	2200      	movs	r2, #0
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <OBROT_L+0x4c>)
 800187c:	f002 f976 	bl	8003b6c <HAL_GPIO_WritePin>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000544 	.word	0x20000544
 8001888:	2000052c 	.word	0x2000052c
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000

08001894 <TYL>:

void TYL(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <TYL+0x38>)
 80018a0:	f002 f964 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <TYL+0x38>)
 80018ac:	f002 f95e 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <TYL+0x3c>)
 80018b8:	f002 f958 	bl	8003b6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80018bc:	2200      	movs	r2, #0
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TYL+0x38>)
 80018c2:	f002 f953 	bl	8003b6c <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020000 	.word	0x40020000

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f000 fd5a 	bl	8002390 <HAL_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f8fa 	bl	8001ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f7ff fce2 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f7ff fcc0 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 80018e8:	f000 fc1e 	bl	8002128 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80018ec:	f000 fcac 	bl	8002248 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80018f0:	f7ff fc4c 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 80018f4:	f7ff fb80 	bl	8000ff8 <MX_ADC3_Init>
  //MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  //RC5_Init();

  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 80018f8:	2201      	movs	r2, #1
 80018fa:	495f      	ldr	r1, [pc, #380]	; (8001a78 <main+0x1a4>)
 80018fc:	485f      	ldr	r0, [pc, #380]	; (8001a7c <main+0x1a8>)
 80018fe:	f000 fe21 	bl	8002544 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10
 8001902:	485f      	ldr	r0, [pc, #380]	; (8001a80 <main+0x1ac>)
 8001904:	f002 fe0e 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001908:	485e      	ldr	r0, [pc, #376]	; (8001a84 <main+0x1b0>)
 800190a:	f002 fe0b 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800190e:	2100      	movs	r1, #0
 8001910:	485c      	ldr	r0, [pc, #368]	; (8001a84 <main+0x1b0>)
 8001912:	f002 fe77 	bl	8004604 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001916:	2104      	movs	r1, #4
 8001918:	485a      	ldr	r0, [pc, #360]	; (8001a84 <main+0x1b0>)
 800191a:	f002 fe73 	bl	8004604 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 800191e:	2201      	movs	r2, #1
 8001920:	4959      	ldr	r1, [pc, #356]	; (8001a88 <main+0x1b4>)
 8001922:	485a      	ldr	r0, [pc, #360]	; (8001a8c <main+0x1b8>)
 8001924:	f003 fac4 	bl	8004eb0 <HAL_UART_Receive_IT>

  //aktywacja Core2530 do pracy
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2101      	movs	r1, #1
 800192c:	4858      	ldr	r0, [pc, #352]	; (8001a90 <main+0x1bc>)
 800192e:	f002 f91d 	bl	8003b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	4856      	ldr	r0, [pc, #344]	; (8001a90 <main+0x1bc>)
 8001938:	f002 f918 	bl	8003b6c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800193c:	20c8      	movs	r0, #200	; 0xc8
 800193e:	f000 fd99 	bl	8002474 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001942:	2201      	movs	r2, #1
 8001944:	2101      	movs	r1, #1
 8001946:	4852      	ldr	r0, [pc, #328]	; (8001a90 <main+0x1bc>)
 8001948:	f002 f910 	bl	8003b6c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 800194c:	2201      	movs	r2, #1
 800194e:	2180      	movs	r1, #128	; 0x80
 8001950:	484f      	ldr	r0, [pc, #316]	; (8001a90 <main+0x1bc>)
 8001952:	f002 f90b 	bl	8003b6c <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*-----------Odczyt stanu bterii---------------*/
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001956:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <main+0x1a4>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001962:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a94 <main+0x1c0>
 8001966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800196a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001a98 <main+0x1c4>
 800196e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001972:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <main+0x1c8>)
 8001974:	edc3 7a00 	vstr	s15, [r3]
		  printf("prawy\n");
	  }
*/
	  /*-------RC5-------*/
	  /* if data do not received */
	  if(0x00 == RC5FrameReceived)
 8001978:	4b49      	ldr	r3, [pc, #292]	; (8001aa0 <main+0x1cc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d002      	beq.n	8001988 <main+0xb4>
	  {
		  //printf("Ni ma\n");
	  }else{
		  /* decode the rc5 frame */
		  RC5_Decode(&RC5_FRAME);
 8001982:	4848      	ldr	r0, [pc, #288]	; (8001aa4 <main+0x1d0>)
 8001984:	f000 f916 	bl	8001bb4 <RC5_Decode>
	  }

	  /* w switchu nastepuje wykonywanie instrukcji wedlug odebranych z komputera danych
	  wartosc zmiennej drive jest nadawana w przerwaniu UART po odebraniu komunikatu*/
	  switch(drive)
 8001988:	4b47      	ldr	r3, [pc, #284]	; (8001aa8 <main+0x1d4>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b09      	cmp	r3, #9
 800198e:	d871      	bhi.n	8001a74 <main+0x1a0>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <main+0xc4>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019c1 	.word	0x080019c1
 800199c:	080019d3 	.word	0x080019d3
 80019a0:	080019e7 	.word	0x080019e7
 80019a4:	080019f9 	.word	0x080019f9
 80019a8:	08001a0d 	.word	0x08001a0d
 80019ac:	08001a1f 	.word	0x08001a1f
 80019b0:	08001a2d 	.word	0x08001a2d
 80019b4:	08001a3f 	.word	0x08001a3f
 80019b8:	08001a51 	.word	0x08001a51
 80019bc:	08001a63 	.word	0x08001a63
	  {
	  case 0:
		  STOP();
 80019c0:	f7ff fdb0 	bl	8001524 <STOP>
		  //nadawanie informacji przez UART
		  printf("STOP\n");
 80019c4:	4839      	ldr	r0, [pc, #228]	; (8001aac <main+0x1d8>)
 80019c6:	f005 f93d 	bl	8006c44 <puts>
		  drive = 10;
 80019ca:	4b37      	ldr	r3, [pc, #220]	; (8001aa8 <main+0x1d4>)
 80019cc:	220a      	movs	r2, #10
 80019ce:	601a      	str	r2, [r3, #0]
		  break;
 80019d0:	e051      	b.n	8001a76 <main+0x1a2>
	  case 1:
		  //Zmiana wartości wypełnienia (+10)
		  printf("Wypelnienie: %d\n", speed);
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <main+0x1dc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	4836      	ldr	r0, [pc, #216]	; (8001ab4 <main+0x1e0>)
 80019da:	f005 f8ad 	bl	8006b38 <iprintf>
		  drive = 10;
 80019de:	4b32      	ldr	r3, [pc, #200]	; (8001aa8 <main+0x1d4>)
 80019e0:	220a      	movs	r2, #10
 80019e2:	601a      	str	r2, [r3, #0]
		  break;
 80019e4:	e047      	b.n	8001a76 <main+0x1a2>
	  case 2:
		  PRZOD(); /*funkcja nadajaca keirunek jazdy robota do przodu*/
 80019e6:	f7ff fe83 	bl	80016f0 <PRZOD>
		  printf("Jazda do przodu\n");
 80019ea:	4833      	ldr	r0, [pc, #204]	; (8001ab8 <main+0x1e4>)
 80019ec:	f005 f92a 	bl	8006c44 <puts>
		  drive = 10;
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <main+0x1d4>)
 80019f2:	220a      	movs	r2, #10
 80019f4:	601a      	str	r2, [r3, #0]
		  break;
 80019f6:	e03e      	b.n	8001a76 <main+0x1a2>
	  case 3:
		  //Zmiana wartości wypełnienia (-10)
		  printf("Wypelnienie: %d\n", speed);
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <main+0x1dc>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	482d      	ldr	r0, [pc, #180]	; (8001ab4 <main+0x1e0>)
 8001a00:	f005 f89a 	bl	8006b38 <iprintf>
		  drive = 10;
 8001a04:	4b28      	ldr	r3, [pc, #160]	; (8001aa8 <main+0x1d4>)
 8001a06:	220a      	movs	r2, #10
 8001a08:	601a      	str	r2, [r3, #0]
		  break;
 8001a0a:	e034      	b.n	8001a76 <main+0x1a2>
	  case 4:
		  LEWA(); /*funkcja nadajaca keirunek jazdy robota w lewo*/
 8001a0c:	f7ff fe9a 	bl	8001744 <LEWA>
		  printf("Jazda w lewo\n");
 8001a10:	482a      	ldr	r0, [pc, #168]	; (8001abc <main+0x1e8>)
 8001a12:	f005 f917 	bl	8006c44 <puts>
		  drive = 10;
 8001a16:	4b24      	ldr	r3, [pc, #144]	; (8001aa8 <main+0x1d4>)
 8001a18:	220a      	movs	r2, #10
 8001a1a:	601a      	str	r2, [r3, #0]
		  break;
 8001a1c:	e02b      	b.n	8001a76 <main+0x1a2>
	  case 5:
		  //speed=50; /*ustawienie wypelnienia na wartosc poczatkowa (50)*/
		  //printf("Wypelnienie: 50\n");
		  printf("NIC\n");
 8001a1e:	4828      	ldr	r0, [pc, #160]	; (8001ac0 <main+0x1ec>)
 8001a20:	f005 f910 	bl	8006c44 <puts>
		  drive = 10;
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <main+0x1d4>)
 8001a26:	220a      	movs	r2, #10
 8001a28:	601a      	str	r2, [r3, #0]
		  break;
 8001a2a:	e024      	b.n	8001a76 <main+0x1a2>
	  case 6:
		  PRAWA(); /*funkcja nadajaca keirunek jazdy robota w prawo*/
 8001a2c:	f7ff feb4 	bl	8001798 <PRAWA>
		  printf("Jazda w prawo\n");
 8001a30:	4824      	ldr	r0, [pc, #144]	; (8001ac4 <main+0x1f0>)
 8001a32:	f005 f907 	bl	8006c44 <puts>
		  drive = 10;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <main+0x1d4>)
 8001a38:	220a      	movs	r2, #10
 8001a3a:	601a      	str	r2, [r3, #0]
		  break;
 8001a3c:	e01b      	b.n	8001a76 <main+0x1a2>
	  case 7:
		  OBROT_L(); /*funkcja powodujaca rotacje robota w lewo*/
 8001a3e:	f7ff feff 	bl	8001840 <OBROT_L>
		  printf("Obrot w lewo\n");
 8001a42:	4821      	ldr	r0, [pc, #132]	; (8001ac8 <main+0x1f4>)
 8001a44:	f005 f8fe 	bl	8006c44 <puts>
		  drive = 10;
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <main+0x1d4>)
 8001a4a:	220a      	movs	r2, #10
 8001a4c:	601a      	str	r2, [r3, #0]
		  break;
 8001a4e:	e012      	b.n	8001a76 <main+0x1a2>
	  case 8:
		  TYL(); /*funkcja nadajaca keirunek jazdy robota do tylu*/
 8001a50:	f7ff ff20 	bl	8001894 <TYL>
		  printf("Jazda do tylu\n");
 8001a54:	481d      	ldr	r0, [pc, #116]	; (8001acc <main+0x1f8>)
 8001a56:	f005 f8f5 	bl	8006c44 <puts>
		  drive = 10;
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <main+0x1d4>)
 8001a5c:	220a      	movs	r2, #10
 8001a5e:	601a      	str	r2, [r3, #0]
		  break;
 8001a60:	e009      	b.n	8001a76 <main+0x1a2>
	  case 9:
		  OBROT_P(); /*funkcja powodujaca rotacje robota w prawo*/
 8001a62:	f7ff fec3 	bl	80017ec <OBROT_P>
		  printf("Obrot w prawo\n");
 8001a66:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <main+0x1fc>)
 8001a68:	f005 f8ec 	bl	8006c44 <puts>
		  drive = 10;
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	; (8001aa8 <main+0x1d4>)
 8001a6e:	220a      	movs	r2, #10
 8001a70:	601a      	str	r2, [r3, #0]
		  break;
 8001a72:	e000      	b.n	8001a76 <main+0x1a2>
	  default:
		  break;
 8001a74:	bf00      	nop
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001a76:	e76e      	b.n	8001956 <main+0x82>
 8001a78:	20000540 	.word	0x20000540
 8001a7c:	20000484 	.word	0x20000484
 8001a80:	200005c4 	.word	0x200005c4
 8001a84:	2000057c 	.word	0x2000057c
 8001a88:	20000004 	.word	0x20000004
 8001a8c:	2000060c 	.word	0x2000060c
 8001a90:	40020c00 	.word	0x40020c00
 8001a94:	40533333 	.word	0x40533333
 8001a98:	457ff000 	.word	0x457ff000
 8001a9c:	20000548 	.word	0x20000548
 8001aa0:	20000556 	.word	0x20000556
 8001aa4:	20000574 	.word	0x20000574
 8001aa8:	20000000 	.word	0x20000000
 8001aac:	0800a92c 	.word	0x0800a92c
 8001ab0:	20000544 	.word	0x20000544
 8001ab4:	0800a934 	.word	0x0800a934
 8001ab8:	0800a948 	.word	0x0800a948
 8001abc:	0800a958 	.word	0x0800a958
 8001ac0:	0800a968 	.word	0x0800a968
 8001ac4:	0800a96c 	.word	0x0800a96c
 8001ac8:	0800a97c 	.word	0x0800a97c
 8001acc:	0800a98c 	.word	0x0800a98c
 8001ad0:	0800a99c 	.word	0x0800a99c

08001ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b094      	sub	sp, #80	; 0x50
 8001ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ada:	f107 0320 	add.w	r3, r7, #32
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f004 f9a6 	bl	8005e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a27      	ldr	r2, [pc, #156]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <SystemClock_Config+0xcc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b14:	2300      	movs	r3, #0
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	4b22      	ldr	r3, [pc, #136]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a21      	ldr	r2, [pc, #132]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b1f      	ldr	r3, [pc, #124]	; (8001ba4 <SystemClock_Config+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b30:	2302      	movs	r3, #2
 8001b32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b38:	2310      	movs	r3, #16
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b44:	2308      	movs	r3, #8
 8001b46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b48:	23a0      	movs	r3, #160	; 0xa0
 8001b4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b50:	2304      	movs	r3, #4
 8001b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b54:	f107 0320 	add.w	r3, r7, #32
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f002 f83b 	bl	8003bd4 <HAL_RCC_OscConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b64:	f000 f820 	bl	8001ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b68:	230f      	movs	r3, #15
 8001b6a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b74:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b78:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	2105      	movs	r1, #5
 8001b86:	4618      	mov	r0, r3
 8001b88:	f002 fa9c 	bl	80040c4 <HAL_RCC_ClockConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b92:	f000 f809 	bl	8001ba8 <Error_Handler>
  }
}
 8001b96:	bf00      	nop
 8001b98:	3750      	adds	r7, #80	; 0x50
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	40007000 	.word	0x40007000

08001ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bac:	b672      	cpsid	i
}
 8001bae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <Error_Handler+0x8>
	...

08001bb4 <RC5_Decode>:
  *         is a new IR frame already received.
  * @param  pIRFrame: pointer to RC5_Frame_t structure that contains the
  *         the IR protocol fields (Address, Command,...).
  */
void RC5_Decode(RC5_Frame_t *pIRFrame)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* If frame received */
  if (RC5FrameReceived != NO)
 8001bbc:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <RC5_Decode+0xd4>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d05b      	beq.n	8001c7e <RC5_Decode+0xca>
  {
    RC5_Data = RC5TmpPacket.data ;
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <RC5_Decode+0xd8>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <RC5_Decode+0xdc>)
 8001bd0:	601a      	str	r2, [r3, #0]
    /* RC5 frame field decoding */
    pIRFrame->FieldBit = (RC5TmpPacket.data >> 12) & 0x1;
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <RC5_Decode+0xd8>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	0b1b      	lsrs	r3, r3, #12
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	701a      	strb	r2, [r3, #0]
    pIRFrame->ToggleBit = (RC5TmpPacket.data >> 11) & 0x1;
 8001be8:	4b28      	ldr	r3, [pc, #160]	; (8001c8c <RC5_Decode+0xd8>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	0adb      	lsrs	r3, r3, #11
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	705a      	strb	r2, [r3, #1]
    pIRFrame->Address = (RC5TmpPacket.data >> 6) & 0x1F;
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <RC5_Decode+0xd8>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	709a      	strb	r2, [r3, #2]
    pIRFrame->Command = (uint8_t)((RC5TmpPacket.data) & (uint8_t) 0x3F);
 8001c14:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <RC5_Decode+0xd8>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	70da      	strb	r2, [r3, #3]

    /* Check if command ranges between 64 to 127:Upper Field */
    if (((RC5TmpPacket.data >> 12) & 0x1) != 0x01)
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <RC5_Decode+0xd8>)
 8001c28:	881b      	ldrh	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	0b1b      	lsrs	r3, r3, #12
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d007      	beq.n	8001c48 <RC5_Decode+0x94>
    {
      pIRFrame->Command =  (1 << 6) | pIRFrame->Command;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	78db      	ldrb	r3, [r3, #3]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	70da      	strb	r2, [r3, #3]
    }
    /* Default state */
    RC5FrameReceived = NO;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <RC5_Decode+0xd4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
    RC5_ResetPacket();
 8001c4e:	f000 f829 	bl	8001ca4 <RC5_ResetPacket>
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAtLine(6, (uint8_t*)aRC5Commands[pIRFrame->Command]);
    BSP_LCD_DisplayStringAtLine(7, (uint8_t*)aRC5Devices[pIRFrame->Address]);
    BSP_LCD_SetFont(&Font24);
*/
    printf("Command: %p\n", (uint8_t*)aRC5Commands[pIRFrame->Command]);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	78db      	ldrb	r3, [r3, #3]
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <RC5_Decode+0xe0>)
 8001c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c60:	4619      	mov	r1, r3
 8001c62:	480d      	ldr	r0, [pc, #52]	; (8001c98 <RC5_Decode+0xe4>)
 8001c64:	f004 ff68 	bl	8006b38 <iprintf>
    printf("Address: %p\n", (uint8_t*)aRC5Devices[pIRFrame->Address]);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	789b      	ldrb	r3, [r3, #2]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <RC5_Decode+0xe8>)
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	4619      	mov	r1, r3
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <RC5_Decode+0xec>)
 8001c7a:	f004 ff5d 	bl	8006b38 <iprintf>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000556 	.word	0x20000556
 8001c8c:	20000558 	.word	0x20000558
 8001c90:	20000570 	.word	0x20000570
 8001c94:	20000088 	.word	0x20000088
 8001c98:	0800b5f4 	.word	0x0800b5f4
 8001c9c:	20000008 	.word	0x20000008
 8001ca0:	0800b604 	.word	0x0800b604

08001ca4 <RC5_ResetPacket>:
  * @brief  Set the incoming packet structure to default state.
  * @param  None
  * @retval None
  */
void RC5_ResetPacket(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  RC5TmpPacket.data = 0;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <RC5_ResetPacket+0x28>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
  RC5TmpPacket.bitCount = RC5_PACKET_BIT_COUNT - 1;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <RC5_ResetPacket+0x28>)
 8001cb0:	220c      	movs	r2, #12
 8001cb2:	711a      	strb	r2, [r3, #4]
  RC5TmpPacket.lastBit = RC5_ONE;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <RC5_ResetPacket+0x28>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	70da      	strb	r2, [r3, #3]
  RC5TmpPacket.status = RC5_PACKET_STATUS_EMPTY;
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <RC5_ResetPacket+0x28>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	709a      	strb	r2, [r3, #2]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000558 	.word	0x20000558

08001cd0 <RC5_DataSampling>:
  * @param  rawPulseLength: low/high pulse duration
  * @param  edge: '1' for Rising  or '0' for falling edge
  * @retval None
  */
void RC5_DataSampling(uint32_t rawPulseLength, uint32_t edge)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  uint8_t pulse;
  RC5_lastBit_t tmp_bit;

  /* Decode the pulse length in protocol units */
  pulse = RC5_GetPulseLength(rawPulseLength);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 f84a 	bl	8001d74 <RC5_GetPulseLength>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  /* On Rising Edge */
  if (edge == 1)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d115      	bne.n	8001d16 <RC5_DataSampling+0x46>
  {
    if (pulse <= RC5_2T_TIME)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d80f      	bhi.n	8001d10 <RC5_DataSampling+0x40>
    {
      /* Bit determination by the rising edge */
      tmp_bit = RC5_logicTableRisingEdge[RC5TmpPacket.lastBit][pulse];
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <RC5_DataSampling+0x98>)
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	491c      	ldr	r1, [pc, #112]	; (8001d6c <RC5_DataSampling+0x9c>)
 8001cfc:	0052      	lsls	r2, r2, #1
 8001cfe:	440a      	add	r2, r1
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	73bb      	strb	r3, [r7, #14]
      RC5_modifyLastBit (tmp_bit);
 8001d06:	7bbb      	ldrb	r3, [r7, #14]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f000 f85f 	bl	8001dcc <RC5_modifyLastBit>
      {
        RC5_ResetPacket();
      }
    }
  }
}
 8001d0e:	e027      	b.n	8001d60 <RC5_DataSampling+0x90>
      RC5_ResetPacket();
 8001d10:	f7ff ffc8 	bl	8001ca4 <RC5_ResetPacket>
}
 8001d14:	e024      	b.n	8001d60 <RC5_DataSampling+0x90>
    if (RC5TmpPacket.status & RC5_PACKET_STATUS_EMPTY)
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <RC5_DataSampling+0x98>)
 8001d18:	789b      	ldrb	r3, [r3, #2]
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d008      	beq.n	8001d36 <RC5_DataSampling+0x66>
      RC5TmpPacket.status &= (uint8_t)~RC5_PACKET_STATUS_EMPTY;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <RC5_DataSampling+0x98>)
 8001d26:	789b      	ldrb	r3, [r3, #2]
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	f023 0301 	bic.w	r3, r3, #1
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	4b0d      	ldr	r3, [pc, #52]	; (8001d68 <RC5_DataSampling+0x98>)
 8001d32:	709a      	strb	r2, [r3, #2]
}
 8001d34:	e014      	b.n	8001d60 <RC5_DataSampling+0x90>
      if (pulse <= RC5_2T_TIME)
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d80f      	bhi.n	8001d5c <RC5_DataSampling+0x8c>
        tmp_bit = RC5_logicTableFallingEdge[RC5TmpPacket.lastBit][pulse];
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <RC5_DataSampling+0x98>)
 8001d3e:	78db      	ldrb	r3, [r3, #3]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	490a      	ldr	r1, [pc, #40]	; (8001d70 <RC5_DataSampling+0xa0>)
 8001d48:	0052      	lsls	r2, r2, #1
 8001d4a:	440a      	add	r2, r1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	73bb      	strb	r3, [r7, #14]
        RC5_modifyLastBit (tmp_bit);
 8001d52:	7bbb      	ldrb	r3, [r7, #14]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f839 	bl	8001dcc <RC5_modifyLastBit>
}
 8001d5a:	e001      	b.n	8001d60 <RC5_DataSampling+0x90>
        RC5_ResetPacket();
 8001d5c:	f7ff ffa2 	bl	8001ca4 <RC5_ResetPacket>
}
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000558 	.word	0x20000558
 8001d6c:	0800b614 	.word	0x0800b614
 8001d70:	0800b618 	.word	0x0800b618

08001d74 <RC5_GetPulseLength>:
  * @brief  Convert raw pulse length expressed in timer ticks to protocol bit times.
  * @param  pulseLength:pulse duration
  * @retval bit time value
  */
static uint8_t RC5_GetPulseLength (uint32_t pulseLength)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Valid bit time */
  if ((pulseLength > RC5MinT) && (pulseLength < RC5MaxT))
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <RC5_GetPulseLength+0x48>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d906      	bls.n	8001d94 <RC5_GetPulseLength+0x20>
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <RC5_GetPulseLength+0x4c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d201      	bcs.n	8001d94 <RC5_GetPulseLength+0x20>
  {
    /* We've found the length */
    return (RC5_1T_TIME); /* Return the correct value */
 8001d90:	2300      	movs	r3, #0
 8001d92:	e00c      	b.n	8001dae <RC5_GetPulseLength+0x3a>
  }
  else if ((pulseLength > RC5Min2T) && (pulseLength < RC5Max2T))
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <RC5_GetPulseLength+0x50>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d906      	bls.n	8001dac <RC5_GetPulseLength+0x38>
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <RC5_GetPulseLength+0x54>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d201      	bcs.n	8001dac <RC5_GetPulseLength+0x38>
  {
    /* We've found the length */
    return (RC5_2T_TIME);/* Return the correct value */
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <RC5_GetPulseLength+0x3a>
  }
  return RC5_WRONG_TIME;/* Error */
 8001dac:	23ff      	movs	r3, #255	; 0xff
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000560 	.word	0x20000560
 8001dc0:	20000564 	.word	0x20000564
 8001dc4:	20000568 	.word	0x20000568
 8001dc8:	2000056c 	.word	0x2000056c

08001dcc <RC5_modifyLastBit>:
  * @brief  perform checks if the last bit was not incorrect.
  * @param  bit: where bit can be  RC5_NAN or RC5_INV or RC5_ZER or RC5_ONE
  * @retval None
  */
static void RC5_modifyLastBit(RC5_lastBit_t bit)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
  if (bit != RC5_NAN)
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d010      	beq.n	8001dfe <RC5_modifyLastBit+0x32>
  {
    if (RC5TmpPacket.lastBit != RC5_INV)
 8001ddc:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <RC5_modifyLastBit+0x3c>)
 8001dde:	78db      	ldrb	r3, [r3, #3]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d009      	beq.n	8001dfa <RC5_modifyLastBit+0x2e>
    {
      /* Restore the last bit */
      RC5TmpPacket.lastBit = bit;
 8001de6:	4a08      	ldr	r2, [pc, #32]	; (8001e08 <RC5_modifyLastBit+0x3c>)
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	70d3      	strb	r3, [r2, #3]

      /* Insert one bit into the RC5 Packet */
      RC5_WriteBit(RC5TmpPacket.lastBit);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <RC5_modifyLastBit+0x3c>)
 8001dee:	78db      	ldrb	r3, [r3, #3]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f80a 	bl	8001e0c <RC5_WriteBit>
    else
    {
      RC5_ResetPacket();
    }
  }
}
 8001df8:	e001      	b.n	8001dfe <RC5_modifyLastBit+0x32>
      RC5_ResetPacket();
 8001dfa:	f7ff ff53 	bl	8001ca4 <RC5_ResetPacket>
}
 8001dfe:	bf00      	nop
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000558 	.word	0x20000558

08001e0c <RC5_WriteBit>:
  * @brief  Insert one bit into the final data word.
  * @param  bitVal: bit value 'RC5_ONE' or 'RC5_ZER'
  * @retval None
  */
static void RC5_WriteBit(uint8_t bitVal)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  /* First convert RC5 symbols to ones and zeros */
  if (bitVal == RC5_ONE)
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <RC5_WriteBit+0x16>
  {
    bitVal = 1;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	71fb      	strb	r3, [r7, #7]
 8001e20:	e008      	b.n	8001e34 <RC5_WriteBit+0x28>
  }
  else if (bitVal == RC5_ZER)
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <RC5_WriteBit+0x22>
  {
    bitVal = 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	71fb      	strb	r3, [r7, #7]
 8001e2c:	e002      	b.n	8001e34 <RC5_WriteBit+0x28>
  }
  else
  {
    RC5_ResetPacket();
 8001e2e:	f7ff ff39 	bl	8001ca4 <RC5_ResetPacket>
    return;
 8001e32:	e01f      	b.n	8001e74 <RC5_WriteBit+0x68>
  }

  /* Write this particular bit to data field */
  RC5TmpPacket.data |=  bitVal;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e44:	801a      	strh	r2, [r3, #0]

  /* Test the bit number determined */
  if (RC5TmpPacket.bitCount != 0)  /* If this is not the last bit */
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e48:	791b      	ldrb	r3, [r3, #4]
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00e      	beq.n	8001e6e <RC5_WriteBit+0x62>
  {
    /* Shift the data field */
    RC5TmpPacket.data = RC5TmpPacket.data << 1;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e5c:	801a      	strh	r2, [r3, #0]
    /* And decrement the bitCount */
    RC5TmpPacket.bitCount--;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <RC5_WriteBit+0x70>)
 8001e6a:	711a      	strb	r2, [r3, #4]
 8001e6c:	e002      	b.n	8001e74 <RC5_WriteBit+0x68>
  }
  else
  {
    RC5FrameReceived = YES;
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <RC5_WriteBit+0x74>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
  }
}
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000558 	.word	0x20000558
 8001e80:	20000556 	.word	0x20000556

08001e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	607b      	str	r3, [r7, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4a08      	ldr	r2, [pc, #32]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_MspInit+0x4c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	603b      	str	r3, [r7, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800

08001ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <NMI_Handler+0x4>

08001eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ede:	e7fe      	b.n	8001ede <HardFault_Handler+0x4>

08001ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee4:	e7fe      	b.n	8001ee4 <MemManage_Handler+0x4>

08001ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eea:	e7fe      	b.n	8001eea <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	e7fe      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f20:	f000 fa88 	bl	8002434 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f2c:	4802      	ldr	r0, [pc, #8]	; (8001f38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f2e:	f002 fc91 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200005c4 	.word	0x200005c4

08001f3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f40:	4802      	ldr	r0, [pc, #8]	; (8001f4c <TIM2_IRQHandler+0x10>)
 8001f42:	f002 fc87 	bl	8004854 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2000057c 	.word	0x2000057c

08001f50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <USART2_IRQHandler+0x10>)
 8001f56:	f002 ffdb 	bl	8004f10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000060c 	.word	0x2000060c

08001f64 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA2_Stream0_IRQHandler+0x10>)
 8001f6a:	f001 f9f9 	bl	8003360 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200004cc 	.word	0x200004cc

08001f78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
	return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <_kill>:

int _kill(int pid, int sig)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f92:	f003 ff25 	bl	8005de0 <__errno>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2216      	movs	r2, #22
 8001f9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_exit>:

void _exit (int status)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ffe7 	bl	8001f88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fba:	e7fe      	b.n	8001fba <_exit+0x12>

08001fbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
 8001fcc:	e00a      	b.n	8001fe4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fce:	f3af 8000 	nop.w
 8001fd2:	4601      	mov	r1, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	b2ca      	uxtb	r2, r1
 8001fdc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	617b      	str	r3, [r7, #20]
 8001fe4:	697a      	ldr	r2, [r7, #20]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	dbf0      	blt.n	8001fce <_read+0x12>
	}

return len;
 8001fec:	687b      	ldr	r3, [r7, #4]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b086      	sub	sp, #24
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	60f8      	str	r0, [r7, #12]
 8001ffe:	60b9      	str	r1, [r7, #8]
 8002000:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	2300      	movs	r3, #0
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	e009      	b.n	800201c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	1c5a      	adds	r2, r3, #1
 800200c:	60ba      	str	r2, [r7, #8]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f9f3 	bl	80013fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	3301      	adds	r3, #1
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	429a      	cmp	r2, r3
 8002022:	dbf1      	blt.n	8002008 <_write+0x12>
	}
	return len;
 8002024:	687b      	ldr	r3, [r7, #4]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <_close>:

int _close(int file)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
	return -1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002056:	605a      	str	r2, [r3, #4]
	return 0;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_isatty>:

int _isatty(int file)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
	return 1;
 800206e:	2301      	movs	r3, #1
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
	return 0;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a0:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <_sbrk+0x5c>)
 80020a2:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <_sbrk+0x60>)
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <_sbrk+0x64>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <_sbrk+0x68>)
 80020b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <_sbrk+0x64>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4413      	add	r3, r2
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d207      	bcs.n	80020d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c8:	f003 fe8a 	bl	8005de0 <__errno>
 80020cc:	4603      	mov	r3, r0
 80020ce:	220c      	movs	r2, #12
 80020d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d2:	f04f 33ff 	mov.w	r3, #4294967295
 80020d6:	e009      	b.n	80020ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <_sbrk+0x64>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020de:	4b07      	ldr	r3, [pc, #28]	; (80020fc <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <_sbrk+0x64>)
 80020e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ea:	68fb      	ldr	r3, [r7, #12]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20020000 	.word	0x20020000
 80020f8:	00000400 	.word	0x00000400
 80020fc:	20000578 	.word	0x20000578
 8002100:	20000668 	.word	0x20000668

08002104 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <SystemInit+0x20>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <SystemInit+0x20>)
 8002110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <MX_TIM10_Init>:
  /* USER CODE END TIM2_Init 2 */

}
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800212c:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_TIM10_Init+0x40>)
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <MX_TIM10_Init+0x44>)
 8002130:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <MX_TIM10_Init+0x40>)
 8002134:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002138:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <MX_TIM10_Init+0x40>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_TIM10_Init+0x40>)
 8002142:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002146:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <MX_TIM10_Init+0x40>)
 800214a:	2200      	movs	r2, #0
 800214c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_TIM10_Init+0x40>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <MX_TIM10_Init+0x40>)
 8002156:	f002 f995 	bl	8004484 <HAL_TIM_Base_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002160:	f7ff fd22 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	200005c4 	.word	0x200005c4
 800216c:	40014400 	.word	0x40014400

08002170 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002190:	d134      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b29      	ldr	r3, [pc, #164]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	4a28      	ldr	r2, [pc, #160]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6413      	str	r3, [r2, #64]	; 0x40
 80021a2:	4b26      	ldr	r3, [pc, #152]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b22      	ldr	r3, [pc, #136]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b1f      	ldr	r3, [pc, #124]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ca:	2301      	movs	r3, #1
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ce:	2302      	movs	r3, #2
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d6:	2300      	movs	r3, #0
 80021d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021da:	2301      	movs	r3, #1
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021de:	f107 0314 	add.w	r3, r7, #20
 80021e2:	4619      	mov	r1, r3
 80021e4:	4816      	ldr	r0, [pc, #88]	; (8002240 <HAL_TIM_Base_MspInit+0xd0>)
 80021e6:	f001 fb25 	bl	8003834 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	201c      	movs	r0, #28
 80021f0:	f000 fe51 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021f4:	201c      	movs	r0, #28
 80021f6:	f000 fe6a 	bl	8002ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80021fa:	e01a      	b.n	8002232 <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM10)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a10      	ldr	r2, [pc, #64]	; (8002244 <HAL_TIM_Base_MspInit+0xd4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d115      	bne.n	8002232 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	4b0c      	ldr	r3, [pc, #48]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a0b      	ldr	r2, [pc, #44]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b09      	ldr	r3, [pc, #36]	; (800223c <HAL_TIM_Base_MspInit+0xcc>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2102      	movs	r1, #2
 8002226:	2019      	movs	r0, #25
 8002228:	f000 fe35 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800222c:	2019      	movs	r0, #25
 800222e:	f000 fe4e 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40020000 	.word	0x40020000
 8002244:	40014400 	.word	0x40014400

08002248 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800224c:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800224e:	4a12      	ldr	r2, [pc, #72]	; (8002298 <MX_USART2_UART_Init+0x50>)
 8002250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002252:	4b10      	ldr	r3, [pc, #64]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_USART2_UART_Init+0x4c>)
 8002280:	f002 fd37 	bl	8004cf2 <HAL_UART_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800228a:	f7ff fc8d 	bl	8001ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000060c 	.word	0x2000060c
 8002298:	40004400 	.word	0x40004400

0800229c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08a      	sub	sp, #40	; 0x28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	2200      	movs	r2, #0
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	605a      	str	r2, [r3, #4]
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	60da      	str	r2, [r3, #12]
 80022b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_UART_MspInit+0x94>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d133      	bne.n	8002326 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022cc:	6413      	str	r3, [r2, #64]	; 0x40
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a14      	ldr	r2, [pc, #80]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022e4:	f043 0308 	orr.w	r3, r3, #8
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_UART_MspInit+0x98>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0308 	and.w	r3, r3, #8
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80022f6:	2360      	movs	r3, #96	; 0x60
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002306:	2307      	movs	r3, #7
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	4809      	ldr	r0, [pc, #36]	; (8002338 <HAL_UART_MspInit+0x9c>)
 8002312:	f001 fa8f 	bl	8003834 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2103      	movs	r1, #3
 800231a:	2026      	movs	r0, #38	; 0x26
 800231c:	f000 fdbb 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002320:	2026      	movs	r0, #38	; 0x26
 8002322:	f000 fdd4 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002326:	bf00      	nop
 8002328:	3728      	adds	r7, #40	; 0x28
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40004400 	.word	0x40004400
 8002334:	40023800 	.word	0x40023800
 8002338:	40020c00 	.word	0x40020c00

0800233c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800233c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002374 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002342:	490e      	ldr	r1, [pc, #56]	; (800237c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002344:	4a0e      	ldr	r2, [pc, #56]	; (8002380 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002348:	e002      	b.n	8002350 <LoopCopyDataInit>

0800234a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800234a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800234c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800234e:	3304      	adds	r3, #4

08002350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002354:	d3f9      	bcc.n	800234a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002356:	4a0b      	ldr	r2, [pc, #44]	; (8002384 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002358:	4c0b      	ldr	r4, [pc, #44]	; (8002388 <LoopFillZerobss+0x26>)
  movs r3, #0
 800235a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800235c:	e001      	b.n	8002362 <LoopFillZerobss>

0800235e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800235e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002360:	3204      	adds	r2, #4

08002362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002364:	d3fb      	bcc.n	800235e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002366:	f7ff fecd 	bl	8002104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800236a:	f003 fd3f 	bl	8005dec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800236e:	f7ff fab1 	bl	80018d4 <main>
  bx  lr    
 8002372:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002374:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800237c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002380:	0800bafc 	.word	0x0800bafc
  ldr r2, =_sbss
 8002384:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002388:	20000664 	.word	0x20000664

0800238c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800238c:	e7fe      	b.n	800238c <ADC_IRQHandler>
	...

08002390 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002394:	4b0e      	ldr	r3, [pc, #56]	; (80023d0 <HAL_Init+0x40>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0d      	ldr	r2, [pc, #52]	; (80023d0 <HAL_Init+0x40>)
 800239a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800239e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_Init+0x40>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_Init+0x40>)
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <HAL_Init+0x40>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a07      	ldr	r2, [pc, #28]	; (80023d0 <HAL_Init+0x40>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023b8:	2003      	movs	r0, #3
 80023ba:	f000 fd61 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023be:	2000      	movs	r0, #0
 80023c0:	f000 f808 	bl	80023d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023c4:	f7ff fd5e 	bl	8001e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40023c00 	.word	0x40023c00

080023d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <HAL_InitTick+0x54>)
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	4b12      	ldr	r3, [pc, #72]	; (800242c <HAL_InitTick+0x58>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	4619      	mov	r1, r3
 80023e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fd79 	bl	8002eea <HAL_SYSTICK_Config>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e00e      	b.n	8002420 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d80a      	bhi.n	800241e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f000 fd41 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002414:	4a06      	ldr	r2, [pc, #24]	; (8002430 <HAL_InitTick+0x5c>)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	e000      	b.n	8002420 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
}
 8002420:	4618      	mov	r0, r3
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000288 	.word	0x20000288
 800242c:	20000290 	.word	0x20000290
 8002430:	2000028c 	.word	0x2000028c

08002434 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_IncTick+0x20>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x24>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4413      	add	r3, r2
 8002444:	4a04      	ldr	r2, [pc, #16]	; (8002458 <HAL_IncTick+0x24>)
 8002446:	6013      	str	r3, [r2, #0]
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000290 	.word	0x20000290
 8002458:	20000650 	.word	0x20000650

0800245c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  return uwTick;
 8002460:	4b03      	ldr	r3, [pc, #12]	; (8002470 <HAL_GetTick+0x14>)
 8002462:	681b      	ldr	r3, [r3, #0]
}
 8002464:	4618      	mov	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000650 	.word	0x20000650

08002474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff ffee 	bl	800245c <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d005      	beq.n	800249a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800248e:	4b0a      	ldr	r3, [pc, #40]	; (80024b8 <HAL_Delay+0x44>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	461a      	mov	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800249a:	bf00      	nop
 800249c:	f7ff ffde 	bl	800245c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d8f7      	bhi.n	800249c <HAL_Delay+0x28>
  {
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	20000290 	.word	0x20000290

080024bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d101      	bne.n	80024d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e033      	b.n	800253a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe fdde 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d118      	bne.n	800252c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002502:	f023 0302 	bic.w	r3, r3, #2
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa68 	bl	80029e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	e001      	b.n	8002530 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1e>
 800255e:	2302      	movs	r3, #2
 8002560:	e0e9      	b.n	8002736 <HAL_ADC_Start_DMA+0x1f2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d018      	beq.n	80025aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002588:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_ADC_Start_DMA+0x1fc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a6d      	ldr	r2, [pc, #436]	; (8002744 <HAL_ADC_Start_DMA+0x200>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	0c9a      	lsrs	r2, r3, #18
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d107      	bne.n	80025ca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	f040 80a1 	bne.w	800271c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002604:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d106      	bne.n	8002628 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f023 0206 	bic.w	r2, r3, #6
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
 8002626:	e002      	b.n	800262e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002636:	4b44      	ldr	r3, [pc, #272]	; (8002748 <HAL_ADC_Start_DMA+0x204>)
 8002638:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	4a43      	ldr	r2, [pc, #268]	; (800274c <HAL_ADC_Start_DMA+0x208>)
 8002640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	4a42      	ldr	r2, [pc, #264]	; (8002750 <HAL_ADC_Start_DMA+0x20c>)
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264e:	4a41      	ldr	r2, [pc, #260]	; (8002754 <HAL_ADC_Start_DMA+0x210>)
 8002650:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800265a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685a      	ldr	r2, [r3, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800266a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800267a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	334c      	adds	r3, #76	; 0x4c
 8002686:	4619      	mov	r1, r3
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f000 fd7e 	bl	800318c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	2b00      	cmp	r3, #0
 800269a:	d12a      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a2d      	ldr	r2, [pc, #180]	; (8002758 <HAL_ADC_Start_DMA+0x214>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d015      	beq.n	80026d2 <HAL_ADC_Start_DMA+0x18e>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a2c      	ldr	r2, [pc, #176]	; (800275c <HAL_ADC_Start_DMA+0x218>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d105      	bne.n	80026bc <HAL_ADC_Start_DMA+0x178>
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <HAL_ADC_Start_DMA+0x204>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 031f 	and.w	r3, r3, #31
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_ADC_Start_DMA+0x21c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d136      	bne.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <HAL_ADC_Start_DMA+0x204>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d130      	bne.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d129      	bne.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	e020      	b.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a18      	ldr	r2, [pc, #96]	; (8002758 <HAL_ADC_Start_DMA+0x214>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d11b      	bne.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d114      	bne.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002718:	609a      	str	r2, [r3, #8]
 800271a:	e00b      	b.n	8002734 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f043 0210 	orr.w	r2, r3, #16
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3718      	adds	r7, #24
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000288 	.word	0x20000288
 8002744:	431bde83 	.word	0x431bde83
 8002748:	40012300 	.word	0x40012300
 800274c:	08002bdd 	.word	0x08002bdd
 8002750:	08002c97 	.word	0x08002c97
 8002754:	08002cb3 	.word	0x08002cb3
 8002758:	40012000 	.word	0x40012000
 800275c:	40012100 	.word	0x40012100
 8002760:	40012200 	.word	0x40012200

08002764 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d101      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x1c>
 80027b8:	2302      	movs	r3, #2
 80027ba:	e105      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x228>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b09      	cmp	r3, #9
 80027ca:	d925      	bls.n	8002818 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68d9      	ldr	r1, [r3, #12]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	3b1e      	subs	r3, #30
 80027e2:	2207      	movs	r2, #7
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43da      	mvns	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	400a      	ands	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68d9      	ldr	r1, [r3, #12]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29b      	uxth	r3, r3
 8002802:	4618      	mov	r0, r3
 8002804:	4603      	mov	r3, r0
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4403      	add	r3, r0
 800280a:	3b1e      	subs	r3, #30
 800280c:	409a      	lsls	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	e022      	b.n	800285e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6919      	ldr	r1, [r3, #16]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	b29b      	uxth	r3, r3
 8002824:	461a      	mov	r2, r3
 8002826:	4613      	mov	r3, r2
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4413      	add	r3, r2
 800282c:	2207      	movs	r2, #7
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6919      	ldr	r1, [r3, #16]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	4618      	mov	r0, r3
 800284e:	4603      	mov	r3, r0
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	4403      	add	r3, r0
 8002854:	409a      	lsls	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b06      	cmp	r3, #6
 8002864:	d824      	bhi.n	80028b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	3b05      	subs	r3, #5
 8002878:	221f      	movs	r2, #31
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	400a      	ands	r2, r1
 8002886:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	b29b      	uxth	r3, r3
 8002894:	4618      	mov	r0, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685a      	ldr	r2, [r3, #4]
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	3b05      	subs	r3, #5
 80028a2:	fa00 f203 	lsl.w	r2, r0, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	635a      	str	r2, [r3, #52]	; 0x34
 80028ae:	e04c      	b.n	800294a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b0c      	cmp	r3, #12
 80028b6:	d824      	bhi.n	8002902 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	3b23      	subs	r3, #35	; 0x23
 80028ca:	221f      	movs	r2, #31
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43da      	mvns	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	400a      	ands	r2, r1
 80028d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	3b23      	subs	r3, #35	; 0x23
 80028f4:	fa00 f203 	lsl.w	r2, r0, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002900:	e023      	b.n	800294a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b41      	subs	r3, #65	; 0x41
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	400a      	ands	r2, r1
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b41      	subs	r3, #65	; 0x41
 800293e:	fa00 f203 	lsl.w	r2, r0, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800294a:	4b22      	ldr	r3, [pc, #136]	; (80029d4 <HAL_ADC_ConfigChannel+0x234>)
 800294c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a21      	ldr	r2, [pc, #132]	; (80029d8 <HAL_ADC_ConfigChannel+0x238>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d109      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1cc>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b12      	cmp	r3, #18
 800295e:	d105      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_ADC_ConfigChannel+0x238>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d123      	bne.n	80029be <HAL_ADC_ConfigChannel+0x21e>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b10      	cmp	r3, #16
 800297c:	d003      	beq.n	8002986 <HAL_ADC_ConfigChannel+0x1e6>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b11      	cmp	r3, #17
 8002984:	d11b      	bne.n	80029be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b10      	cmp	r3, #16
 8002998:	d111      	bne.n	80029be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_ADC_ConfigChannel+0x23c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a10      	ldr	r2, [pc, #64]	; (80029e0 <HAL_ADC_ConfigChannel+0x240>)
 80029a0:	fba2 2303 	umull	r2, r3, r2, r3
 80029a4:	0c9a      	lsrs	r2, r3, #18
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029b0:	e002      	b.n	80029b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f9      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029c6:	2300      	movs	r3, #0
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	40012300 	.word	0x40012300
 80029d8:	40012000 	.word	0x40012000
 80029dc:	20000288 	.word	0x20000288
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029ec:	4b79      	ldr	r3, [pc, #484]	; (8002bd4 <ADC_Init+0x1f0>)
 80029ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	021a      	lsls	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6899      	ldr	r1, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a76:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <ADC_Init+0x1f4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d022      	beq.n	8002ac2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	6899      	ldr	r1, [r3, #8]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	689a      	ldr	r2, [r3, #8]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6899      	ldr	r1, [r3, #8]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	e00f      	b.n	8002ae2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689a      	ldr	r2, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0202 	bic.w	r2, r2, #2
 8002af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e1b      	ldrb	r3, [r3, #24]
 8002afc:	005a      	lsls	r2, r3, #1
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01b      	beq.n	8002b48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	035a      	lsls	r2, r3, #13
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	e007      	b.n	8002b58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	3b01      	subs	r3, #1
 8002b74:	051a      	lsls	r2, r3, #20
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b9a:	025a      	lsls	r2, r3, #9
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	029a      	lsls	r2, r3, #10
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40012300 	.word	0x40012300
 8002bd8:	0f000001 	.word	0x0f000001

08002bdc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13c      	bne.n	8002c70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d127      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d006      	beq.n	8002c34 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d119      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0220 	bic.w	r2, r2, #32
 8002c42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fd7b 	bl	8002764 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd85 	bl	800278c <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fd67 	bl	8002778 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2240      	movs	r2, #64	; 0x40
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f043 0204 	orr.w	r2, r3, #4
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fd5a 	bl	800278c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd8:	bf00      	nop
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	; (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff3e 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff31 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e014      	b.n	8002f3e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	791b      	ldrb	r3, [r3, #4]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d105      	bne.n	8002f2a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fe f95b 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d105      	bne.n	8002f70 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f64:	697a      	ldr	r2, [r7, #20]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e004      	b.n	8002f7a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	3314      	adds	r3, #20
 8002f78:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	371c      	adds	r7, #28
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	795b      	ldrb	r3, [r3, #5]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DAC_ConfigChannel+0x18>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e03c      	b.n	8003022 <HAL_DAC_ConfigChannel+0x92>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f003 0310 	and.w	r3, r3, #16
 8002fc2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6819      	ldr	r1, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f003 0310 	and.w	r3, r3, #16
 8003004:	22c0      	movs	r2, #192	; 0xc0
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43da      	mvns	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	400a      	ands	r2, r1
 8003012:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
	...

08003030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800303c:	f7ff fa0e 	bl	800245c <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e099      	b.n	8003180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800306c:	e00f      	b.n	800308e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800306e:	f7ff f9f5 	bl	800245c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b05      	cmp	r3, #5
 800307a:	d908      	bls.n	800308e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2203      	movs	r2, #3
 8003086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e078      	b.n	8003180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e8      	bne.n	800306e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4b38      	ldr	r3, [pc, #224]	; (8003188 <HAL_DMA_Init+0x158>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d107      	bne.n	80030f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4313      	orrs	r3, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0307 	bic.w	r3, r3, #7
 800310e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b04      	cmp	r3, #4
 8003120:	d117      	bne.n	8003152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fb01 	bl	800373c <DMA_CheckFifoParam>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2240      	movs	r2, #64	; 0x40
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800314e:	2301      	movs	r3, #1
 8003150:	e016      	b.n	8003180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fab8 	bl	80036d0 <DMA_CalcBaseAndBitshift>
 8003160:	4603      	mov	r3, r0
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	223f      	movs	r2, #63	; 0x3f
 800316a:	409a      	lsls	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}
 8003188:	f010803f 	.word	0xf010803f

0800318c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800319a:	2300      	movs	r3, #0
 800319c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_DMA_Start_IT+0x26>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e040      	b.n	8003234 <HAL_DMA_Start_IT+0xa8>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d12f      	bne.n	8003226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 fa4a 	bl	8003674 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e4:	223f      	movs	r2, #63	; 0x3f
 80031e6:	409a      	lsls	r2, r3
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0216 	orr.w	r2, r2, #22
 80031fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0208 	orr.w	r2, r2, #8
 8003212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e005      	b.n	8003232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003232:	7dfb      	ldrb	r3, [r7, #23]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003248:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800324a:	f7ff f907 	bl	800245c <HAL_GetTick>
 800324e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d008      	beq.n	800326e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2280      	movs	r2, #128	; 0x80
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e052      	b.n	8003314 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0216 	bic.w	r2, r2, #22
 800327c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695a      	ldr	r2, [r3, #20]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800328c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <HAL_DMA_Abort+0x62>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0208 	bic.w	r2, r2, #8
 80032ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032be:	e013      	b.n	80032e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032c0:	f7ff f8cc 	bl	800245c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d90c      	bls.n	80032e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2203      	movs	r2, #3
 80032d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e015      	b.n	8003314 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e4      	bne.n	80032c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fa:	223f      	movs	r2, #63	; 0x3f
 80032fc:	409a      	lsls	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2201      	movs	r2, #1
 8003306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b02      	cmp	r3, #2
 800332e:	d004      	beq.n	800333a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2280      	movs	r2, #128	; 0x80
 8003334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e00c      	b.n	8003354 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2205      	movs	r2, #5
 800333e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800336c:	4b8e      	ldr	r3, [pc, #568]	; (80035a8 <HAL_DMA_IRQHandler+0x248>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_DMA_IRQHandler+0x24c>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	0a9b      	lsrs	r3, r3, #10
 8003378:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338a:	2208      	movs	r2, #8
 800338c:	409a      	lsls	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4013      	ands	r3, r2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d01a      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0204 	bic.w	r2, r2, #4
 80033b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	2208      	movs	r2, #8
 80033ba:	409a      	lsls	r2, r3
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4013      	ands	r3, r2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d012      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	2201      	movs	r2, #1
 80033f0:	409a      	lsls	r2, r3
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0202 	orr.w	r2, r3, #2
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	2204      	movs	r2, #4
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d012      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00b      	beq.n	8003438 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003424:	2204      	movs	r2, #4
 8003426:	409a      	lsls	r2, r3
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f043 0204 	orr.w	r2, r3, #4
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343c:	2210      	movs	r2, #16
 800343e:	409a      	lsls	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d043      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d03c      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	2210      	movs	r2, #16
 800345c:	409a      	lsls	r2, r3
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d108      	bne.n	8003490 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d024      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
 800348e:	e01f      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	2b00      	cmp	r3, #0
 8003496:	d01b      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
 80034a0:	e016      	b.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d107      	bne.n	80034c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0208 	bic.w	r2, r2, #8
 80034be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d003      	beq.n	80034d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2220      	movs	r2, #32
 80034d6:	409a      	lsls	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4013      	ands	r3, r2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 808f 	beq.w	8003600 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8087 	beq.w	8003600 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f6:	2220      	movs	r2, #32
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b05      	cmp	r3, #5
 8003508:	d136      	bne.n	8003578 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0216 	bic.w	r2, r2, #22
 8003518:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003528:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b00      	cmp	r3, #0
 8003530:	d103      	bne.n	800353a <HAL_DMA_IRQHandler+0x1da>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003536:	2b00      	cmp	r3, #0
 8003538:	d007      	beq.n	800354a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0208 	bic.w	r2, r2, #8
 8003548:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800354e:	223f      	movs	r2, #63	; 0x3f
 8003550:	409a      	lsls	r2, r3
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	2b00      	cmp	r3, #0
 800356c:	d07e      	beq.n	800366c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	4798      	blx	r3
        }
        return;
 8003576:	e079      	b.n	800366c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01d      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10d      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	2b00      	cmp	r3, #0
 800359a:	d031      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	4798      	blx	r3
 80035a4:	e02c      	b.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
 80035a6:	bf00      	nop
 80035a8:	20000288 	.word	0x20000288
 80035ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
 80035c0:	e01e      	b.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	d032      	beq.n	800366e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d022      	beq.n	800365a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2205      	movs	r2, #5
 8003618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	429a      	cmp	r2, r3
 8003636:	d307      	bcc.n	8003648 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f2      	bne.n	800362c <HAL_DMA_IRQHandler+0x2cc>
 8003646:	e000      	b.n	800364a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003648:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e000      	b.n	800366e <HAL_DMA_IRQHandler+0x30e>
        return;
 800366c:	bf00      	nop
    }
  }
}
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003690:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b40      	cmp	r3, #64	; 0x40
 80036a0:	d108      	bne.n	80036b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036b2:	e007      	b.n	80036c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]
}
 80036c4:	bf00      	nop
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3b10      	subs	r3, #16
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <DMA_CalcBaseAndBitshift+0x64>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <DMA_CalcBaseAndBitshift+0x68>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	461a      	mov	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d909      	bls.n	8003712 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	1d1a      	adds	r2, r3, #4
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	659a      	str	r2, [r3, #88]	; 0x58
 8003710:	e007      	b.n	8003722 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	aaaaaaab 	.word	0xaaaaaaab
 8003738:	0800b634 	.word	0x0800b634

0800373c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11f      	bne.n	8003796 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b03      	cmp	r3, #3
 800375a:	d856      	bhi.n	800380a <DMA_CheckFifoParam+0xce>
 800375c:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <DMA_CheckFifoParam+0x28>)
 800375e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003762:	bf00      	nop
 8003764:	08003775 	.word	0x08003775
 8003768:	08003787 	.word	0x08003787
 800376c:	08003775 	.word	0x08003775
 8003770:	0800380b 	.word	0x0800380b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d046      	beq.n	800380e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003784:	e043      	b.n	800380e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800378e:	d140      	bne.n	8003812 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003794:	e03d      	b.n	8003812 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379e:	d121      	bne.n	80037e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b03      	cmp	r3, #3
 80037a4:	d837      	bhi.n	8003816 <DMA_CheckFifoParam+0xda>
 80037a6:	a201      	add	r2, pc, #4	; (adr r2, 80037ac <DMA_CheckFifoParam+0x70>)
 80037a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ac:	080037bd 	.word	0x080037bd
 80037b0:	080037c3 	.word	0x080037c3
 80037b4:	080037bd 	.word	0x080037bd
 80037b8:	080037d5 	.word	0x080037d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      break;
 80037c0:	e030      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d025      	beq.n	800381a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037d2:	e022      	b.n	800381a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037dc:	d11f      	bne.n	800381e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037e2:	e01c      	b.n	800381e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d903      	bls.n	80037f2 <DMA_CheckFifoParam+0xb6>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d003      	beq.n	80037f8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037f0:	e018      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      break;
 80037f6:	e015      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00e      	beq.n	8003822 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
      break;
 8003808:	e00b      	b.n	8003822 <DMA_CheckFifoParam+0xe6>
      break;
 800380a:	bf00      	nop
 800380c:	e00a      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e008      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e006      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003816:	bf00      	nop
 8003818:	e004      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;   
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
    }
  } 
  
  return status; 
 8003824:	7bfb      	ldrb	r3, [r7, #15]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3714      	adds	r7, #20
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003842:	2300      	movs	r3, #0
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003846:	2300      	movs	r3, #0
 8003848:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800384a:	2300      	movs	r3, #0
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e16b      	b.n	8003b28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003850:	2201      	movs	r2, #1
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4013      	ands	r3, r2
 8003862:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	429a      	cmp	r2, r3
 800386a:	f040 815a 	bne.w	8003b22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d005      	beq.n	8003886 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003882:	2b02      	cmp	r3, #2
 8003884:	d130      	bne.n	80038e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	2203      	movs	r2, #3
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	005b      	lsls	r3, r3, #1
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038bc:	2201      	movs	r2, #1
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4013      	ands	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	091b      	lsrs	r3, r3, #4
 80038d2:	f003 0201 	and.w	r2, r3, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d017      	beq.n	8003924 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	2203      	movs	r2, #3
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4013      	ands	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fa02 f303 	lsl.w	r3, r2, r3
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	4313      	orrs	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	2b02      	cmp	r3, #2
 800392e:	d123      	bne.n	8003978 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	08da      	lsrs	r2, r3, #3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3208      	adds	r2, #8
 8003938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	220f      	movs	r2, #15
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	08da      	lsrs	r2, r3, #3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	69b9      	ldr	r1, [r7, #24]
 8003974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 0203 	and.w	r2, r3, #3
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	fa02 f303 	lsl.w	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80b4 	beq.w	8003b22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	4b60      	ldr	r3, [pc, #384]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c2:	4a5f      	ldr	r2, [pc, #380]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 80039c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c8:	6453      	str	r3, [r2, #68]	; 0x44
 80039ca:	4b5d      	ldr	r3, [pc, #372]	; (8003b40 <HAL_GPIO_Init+0x30c>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039d6:	4a5b      	ldr	r2, [pc, #364]	; (8003b44 <HAL_GPIO_Init+0x310>)
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	089b      	lsrs	r3, r3, #2
 80039dc:	3302      	adds	r3, #2
 80039de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	220f      	movs	r2, #15
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	4013      	ands	r3, r2
 80039f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a52      	ldr	r2, [pc, #328]	; (8003b48 <HAL_GPIO_Init+0x314>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d02b      	beq.n	8003a5a <HAL_GPIO_Init+0x226>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a51      	ldr	r2, [pc, #324]	; (8003b4c <HAL_GPIO_Init+0x318>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d025      	beq.n	8003a56 <HAL_GPIO_Init+0x222>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_GPIO_Init+0x31c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01f      	beq.n	8003a52 <HAL_GPIO_Init+0x21e>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a4f      	ldr	r2, [pc, #316]	; (8003b54 <HAL_GPIO_Init+0x320>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d019      	beq.n	8003a4e <HAL_GPIO_Init+0x21a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <HAL_GPIO_Init+0x324>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <HAL_GPIO_Init+0x216>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a4d      	ldr	r2, [pc, #308]	; (8003b5c <HAL_GPIO_Init+0x328>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d00d      	beq.n	8003a46 <HAL_GPIO_Init+0x212>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a4c      	ldr	r2, [pc, #304]	; (8003b60 <HAL_GPIO_Init+0x32c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d007      	beq.n	8003a42 <HAL_GPIO_Init+0x20e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_GPIO_Init+0x330>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_GPIO_Init+0x20a>
 8003a3a:	2307      	movs	r3, #7
 8003a3c:	e00e      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	e00c      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a42:	2306      	movs	r3, #6
 8003a44:	e00a      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a46:	2305      	movs	r3, #5
 8003a48:	e008      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	e006      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e004      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e002      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a56:	2301      	movs	r3, #1
 8003a58:	e000      	b.n	8003a5c <HAL_GPIO_Init+0x228>
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	f002 0203 	and.w	r2, r2, #3
 8003a62:	0092      	lsls	r2, r2, #2
 8003a64:	4093      	lsls	r3, r2
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a6c:	4935      	ldr	r1, [pc, #212]	; (8003b44 <HAL_GPIO_Init+0x310>)
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	089b      	lsrs	r3, r3, #2
 8003a72:	3302      	adds	r3, #2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a7a:	4b3b      	ldr	r3, [pc, #236]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	43db      	mvns	r3, r3
 8003a84:	69ba      	ldr	r2, [r7, #24]
 8003a86:	4013      	ands	r3, r2
 8003a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a96:	69ba      	ldr	r2, [r7, #24]
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a9e:	4a32      	ldr	r2, [pc, #200]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003aa4:	4b30      	ldr	r3, [pc, #192]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac8:	4a27      	ldr	r2, [pc, #156]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4013      	ands	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003af2:	4a1d      	ldr	r2, [pc, #116]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	43db      	mvns	r3, r3
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b1c:	4a12      	ldr	r2, [pc, #72]	; (8003b68 <HAL_GPIO_Init+0x334>)
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	3301      	adds	r3, #1
 8003b26:	61fb      	str	r3, [r7, #28]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b0f      	cmp	r3, #15
 8003b2c:	f67f ae90 	bls.w	8003850 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3724      	adds	r7, #36	; 0x24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	40020400 	.word	0x40020400
 8003b50:	40020800 	.word	0x40020800
 8003b54:	40020c00 	.word	0x40020c00
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40021400 	.word	0x40021400
 8003b60:	40021800 	.word	0x40021800
 8003b64:	40021c00 	.word	0x40021c00
 8003b68:	40013c00 	.word	0x40013c00

08003b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b7c:	787b      	ldrb	r3, [r7, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b82:	887a      	ldrh	r2, [r7, #2]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b88:	e003      	b.n	8003b92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b8a:	887b      	ldrh	r3, [r7, #2]
 8003b8c:	041a      	lsls	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	619a      	str	r2, [r3, #24]
}
 8003b92:	bf00      	nop
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bb0:	887a      	ldrh	r2, [r7, #2]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	041a      	lsls	r2, r3, #16
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	43d9      	mvns	r1, r3
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	400b      	ands	r3, r1
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	619a      	str	r2, [r3, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e267      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d075      	beq.n	8003cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf2:	4b88      	ldr	r3, [pc, #544]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d00c      	beq.n	8003c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4b85      	ldr	r3, [pc, #532]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d112      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0a:	4b82      	ldr	r3, [pc, #520]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c18:	4b7e      	ldr	r3, [pc, #504]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05b      	beq.n	8003cdc <HAL_RCC_OscConfig+0x108>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d157      	bne.n	8003cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e242      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d106      	bne.n	8003c48 <HAL_RCC_OscConfig+0x74>
 8003c3a:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a75      	ldr	r2, [pc, #468]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c44:	6013      	str	r3, [r2, #0]
 8003c46:	e01d      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x98>
 8003c52:	4b70      	ldr	r3, [pc, #448]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6f      	ldr	r2, [pc, #444]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	4b6d      	ldr	r3, [pc, #436]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a6c      	ldr	r2, [pc, #432]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	4b69      	ldr	r3, [pc, #420]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a68      	ldr	r2, [pc, #416]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	6013      	str	r3, [r2, #0]
 8003c78:	4b66      	ldr	r3, [pc, #408]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a65      	ldr	r2, [pc, #404]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d013      	beq.n	8003cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fbe6 	bl	800245c <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fbe2 	bl	800245c <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e207      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca6:	4b5b      	ldr	r3, [pc, #364]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d0f0      	beq.n	8003c94 <HAL_RCC_OscConfig+0xc0>
 8003cb2:	e014      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fe fbd2 	bl	800245c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fbce 	bl	800245c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e1f3      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0xe8>
 8003cda:	e000      	b.n	8003cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d063      	beq.n	8003db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cea:	4b4a      	ldr	r3, [pc, #296]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d11c      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d02:	4b44      	ldr	r3, [pc, #272]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d116      	bne.n	8003d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0e:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e1c7      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d26:	4b3b      	ldr	r3, [pc, #236]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	00db      	lsls	r3, r3, #3
 8003d34:	4937      	ldr	r1, [pc, #220]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3a:	e03a      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d020      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d44:	4b34      	ldr	r3, [pc, #208]	; (8003e18 <HAL_RCC_OscConfig+0x244>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fb87 	bl	800245c <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d52:	f7fe fb83 	bl	800245c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e1a8      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0302 	and.w	r3, r3, #2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d70:	4b28      	ldr	r3, [pc, #160]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4925      	ldr	r1, [pc, #148]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	e015      	b.n	8003db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d86:	4b24      	ldr	r3, [pc, #144]	; (8003e18 <HAL_RCC_OscConfig+0x244>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fb66 	bl	800245c <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fe fb62 	bl	800245c <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e187      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da6:	4b1b      	ldr	r3, [pc, #108]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d036      	beq.n	8003e2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d016      	beq.n	8003df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_RCC_OscConfig+0x248>)
 8003dc8:	2201      	movs	r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fe fb46 	bl	800245c <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fb42 	bl	800245c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e167      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCC_OscConfig+0x240>)
 8003de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0f0      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x200>
 8003df2:	e01b      	b.n	8003e2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df4:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <HAL_RCC_OscConfig+0x248>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfa:	f7fe fb2f 	bl	800245c <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e00:	e00e      	b.n	8003e20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e02:	f7fe fb2b 	bl	800245c <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d907      	bls.n	8003e20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e150      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
 8003e14:	40023800 	.word	0x40023800
 8003e18:	42470000 	.word	0x42470000
 8003e1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	4b88      	ldr	r3, [pc, #544]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d1ea      	bne.n	8003e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0304 	and.w	r3, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8097 	beq.w	8003f68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b81      	ldr	r3, [pc, #516]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10f      	bne.n	8003e6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	4b7d      	ldr	r3, [pc, #500]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	4a7c      	ldr	r2, [pc, #496]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e58:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5a:	4b7a      	ldr	r3, [pc, #488]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e66:	2301      	movs	r3, #1
 8003e68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6a:	4b77      	ldr	r3, [pc, #476]	; (8004048 <HAL_RCC_OscConfig+0x474>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d118      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e76:	4b74      	ldr	r3, [pc, #464]	; (8004048 <HAL_RCC_OscConfig+0x474>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a73      	ldr	r2, [pc, #460]	; (8004048 <HAL_RCC_OscConfig+0x474>)
 8003e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e82:	f7fe faeb 	bl	800245c <HAL_GetTick>
 8003e86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e88:	e008      	b.n	8003e9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8a:	f7fe fae7 	bl	800245c <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d901      	bls.n	8003e9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e10c      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_OscConfig+0x474>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d0f0      	beq.n	8003e8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d106      	bne.n	8003ebe <HAL_RCC_OscConfig+0x2ea>
 8003eb0:	4b64      	ldr	r3, [pc, #400]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb4:	4a63      	ldr	r2, [pc, #396]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	; 0x70
 8003ebc:	e01c      	b.n	8003ef8 <HAL_RCC_OscConfig+0x324>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b05      	cmp	r3, #5
 8003ec4:	d10c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x30c>
 8003ec6:	4b5f      	ldr	r3, [pc, #380]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a5e      	ldr	r2, [pc, #376]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 0304 	orr.w	r3, r3, #4
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	4b5c      	ldr	r3, [pc, #368]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a5b      	ldr	r2, [pc, #364]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
 8003ede:	e00b      	b.n	8003ef8 <HAL_RCC_OscConfig+0x324>
 8003ee0:	4b58      	ldr	r3, [pc, #352]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a57      	ldr	r2, [pc, #348]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	f023 0301 	bic.w	r3, r3, #1
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
 8003eec:	4b55      	ldr	r3, [pc, #340]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef0:	4a54      	ldr	r2, [pc, #336]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	f023 0304 	bic.w	r3, r3, #4
 8003ef6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d015      	beq.n	8003f2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe faac 	bl	800245c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	e00a      	b.n	8003f1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f08:	f7fe faa8 	bl	800245c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e0cb      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1e:	4b49      	ldr	r3, [pc, #292]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ee      	beq.n	8003f08 <HAL_RCC_OscConfig+0x334>
 8003f2a:	e014      	b.n	8003f56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f2c:	f7fe fa96 	bl	800245c <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f32:	e00a      	b.n	8003f4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe fa92 	bl	800245c <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e0b5      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1ee      	bne.n	8003f34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5c:	4b39      	ldr	r3, [pc, #228]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a38      	ldr	r2, [pc, #224]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a1 	beq.w	80040b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f72:	4b34      	ldr	r3, [pc, #208]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d05c      	beq.n	8004038 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d141      	bne.n	800400a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f86:	4b31      	ldr	r3, [pc, #196]	; (800404c <HAL_RCC_OscConfig+0x478>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fa66 	bl	800245c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fe fa62 	bl	800245c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e087      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	085b      	lsrs	r3, r3, #1
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	041b      	lsls	r3, r3, #16
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	491b      	ldr	r1, [pc, #108]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fdc:	4b1b      	ldr	r3, [pc, #108]	; (800404c <HAL_RCC_OscConfig+0x478>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe2:	f7fe fa3b 	bl	800245c <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe8:	e008      	b.n	8003ffc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fe fa37 	bl	800245c <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d901      	bls.n	8003ffc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e05c      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d0f0      	beq.n	8003fea <HAL_RCC_OscConfig+0x416>
 8004008:	e054      	b.n	80040b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400a:	4b10      	ldr	r3, [pc, #64]	; (800404c <HAL_RCC_OscConfig+0x478>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7fe fa24 	bl	800245c <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004018:	f7fe fa20 	bl	800245c <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e045      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_OscConfig+0x470>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x444>
 8004036:	e03d      	b.n	80040b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e038      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
 8004044:	40023800 	.word	0x40023800
 8004048:	40007000 	.word	0x40007000
 800404c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004050:	4b1b      	ldr	r3, [pc, #108]	; (80040c0 <HAL_RCC_OscConfig+0x4ec>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d028      	beq.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d121      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d11a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004086:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d107      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d001      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	40023800 	.word	0x40023800

080040c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0cc      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040d8:	4b68      	ldr	r3, [pc, #416]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d90c      	bls.n	8004100 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b65      	ldr	r3, [pc, #404]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b63      	ldr	r3, [pc, #396]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0b8      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d020      	beq.n	800414e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0304 	and.w	r3, r3, #4
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004118:	4b59      	ldr	r3, [pc, #356]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	4a58      	ldr	r2, [pc, #352]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004122:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004130:	4b53      	ldr	r3, [pc, #332]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	4a52      	ldr	r2, [pc, #328]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800413c:	4b50      	ldr	r3, [pc, #320]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	494d      	ldr	r1, [pc, #308]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800414a:	4313      	orrs	r3, r2
 800414c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d044      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	4b47      	ldr	r3, [pc, #284]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d119      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e07f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b02      	cmp	r3, #2
 8004178:	d003      	beq.n	8004182 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	2b03      	cmp	r3, #3
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004182:	4b3f      	ldr	r3, [pc, #252]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e067      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a2:	4b37      	ldr	r3, [pc, #220]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f023 0203 	bic.w	r2, r3, #3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4934      	ldr	r1, [pc, #208]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b4:	f7fe f952 	bl	800245c <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041bc:	f7fe f94e 	bl	800245c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04f      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d2:	4b2b      	ldr	r3, [pc, #172]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 020c 	and.w	r2, r3, #12
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d1eb      	bne.n	80041bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e4:	4b25      	ldr	r3, [pc, #148]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d20c      	bcs.n	800420c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b22      	ldr	r3, [pc, #136]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fa:	4b20      	ldr	r3, [pc, #128]	; (800427c <HAL_RCC_ClockConfig+0x1b8>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e032      	b.n	8004272 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004218:	4b19      	ldr	r3, [pc, #100]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4916      	ldr	r1, [pc, #88]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0308 	and.w	r3, r3, #8
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004236:	4b12      	ldr	r3, [pc, #72]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	490e      	ldr	r1, [pc, #56]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424a:	f000 f821 	bl	8004290 <HAL_RCC_GetSysClockFreq>
 800424e:	4602      	mov	r2, r0
 8004250:	4b0b      	ldr	r3, [pc, #44]	; (8004280 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	490a      	ldr	r1, [pc, #40]	; (8004284 <HAL_RCC_ClockConfig+0x1c0>)
 800425c:	5ccb      	ldrb	r3, [r1, r3]
 800425e:	fa22 f303 	lsr.w	r3, r2, r3
 8004262:	4a09      	ldr	r2, [pc, #36]	; (8004288 <HAL_RCC_ClockConfig+0x1c4>)
 8004264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004266:	4b09      	ldr	r3, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c8>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe f8b2 	bl	80023d4 <HAL_InitTick>

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40023c00 	.word	0x40023c00
 8004280:	40023800 	.word	0x40023800
 8004284:	0800b61c 	.word	0x0800b61c
 8004288:	20000288 	.word	0x20000288
 800428c:	2000028c 	.word	0x2000028c

08004290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004290:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004294:	b090      	sub	sp, #64	; 0x40
 8004296:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	637b      	str	r3, [r7, #52]	; 0x34
 800429c:	2300      	movs	r3, #0
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a0:	2300      	movs	r3, #0
 80042a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042a8:	4b59      	ldr	r3, [pc, #356]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 030c 	and.w	r3, r3, #12
 80042b0:	2b08      	cmp	r3, #8
 80042b2:	d00d      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0x40>
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	f200 80a1 	bhi.w	80043fc <HAL_RCC_GetSysClockFreq+0x16c>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x34>
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_GetSysClockFreq+0x3a>
 80042c2:	e09b      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b53      	ldr	r3, [pc, #332]	; (8004414 <HAL_RCC_GetSysClockFreq+0x184>)
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042c8:	e09b      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ca:	4b53      	ldr	r3, [pc, #332]	; (8004418 <HAL_RCC_GetSysClockFreq+0x188>)
 80042cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042ce:	e098      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d0:	4b4f      	ldr	r3, [pc, #316]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042da:	4b4d      	ldr	r3, [pc, #308]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d028      	beq.n	8004338 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042e6:	4b4a      	ldr	r3, [pc, #296]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	099b      	lsrs	r3, r3, #6
 80042ec:	2200      	movs	r2, #0
 80042ee:	623b      	str	r3, [r7, #32]
 80042f0:	627a      	str	r2, [r7, #36]	; 0x24
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042f8:	2100      	movs	r1, #0
 80042fa:	4b47      	ldr	r3, [pc, #284]	; (8004418 <HAL_RCC_GetSysClockFreq+0x188>)
 80042fc:	fb03 f201 	mul.w	r2, r3, r1
 8004300:	2300      	movs	r3, #0
 8004302:	fb00 f303 	mul.w	r3, r0, r3
 8004306:	4413      	add	r3, r2
 8004308:	4a43      	ldr	r2, [pc, #268]	; (8004418 <HAL_RCC_GetSysClockFreq+0x188>)
 800430a:	fba0 1202 	umull	r1, r2, r0, r2
 800430e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004310:	460a      	mov	r2, r1
 8004312:	62ba      	str	r2, [r7, #40]	; 0x28
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	4413      	add	r3, r2
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800431a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431c:	2200      	movs	r2, #0
 800431e:	61bb      	str	r3, [r7, #24]
 8004320:	61fa      	str	r2, [r7, #28]
 8004322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004326:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800432a:	f7fc fcad 	bl	8000c88 <__aeabi_uldivmod>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	4613      	mov	r3, r2
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004336:	e053      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004338:	4b35      	ldr	r3, [pc, #212]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	2200      	movs	r2, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	617a      	str	r2, [r7, #20]
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800434a:	f04f 0b00 	mov.w	fp, #0
 800434e:	4652      	mov	r2, sl
 8004350:	465b      	mov	r3, fp
 8004352:	f04f 0000 	mov.w	r0, #0
 8004356:	f04f 0100 	mov.w	r1, #0
 800435a:	0159      	lsls	r1, r3, #5
 800435c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004360:	0150      	lsls	r0, r2, #5
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	ebb2 080a 	subs.w	r8, r2, sl
 800436a:	eb63 090b 	sbc.w	r9, r3, fp
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	f04f 0300 	mov.w	r3, #0
 8004376:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800437a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800437e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004382:	ebb2 0408 	subs.w	r4, r2, r8
 8004386:	eb63 0509 	sbc.w	r5, r3, r9
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	f04f 0300 	mov.w	r3, #0
 8004392:	00eb      	lsls	r3, r5, #3
 8004394:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004398:	00e2      	lsls	r2, r4, #3
 800439a:	4614      	mov	r4, r2
 800439c:	461d      	mov	r5, r3
 800439e:	eb14 030a 	adds.w	r3, r4, sl
 80043a2:	603b      	str	r3, [r7, #0]
 80043a4:	eb45 030b 	adc.w	r3, r5, fp
 80043a8:	607b      	str	r3, [r7, #4]
 80043aa:	f04f 0200 	mov.w	r2, #0
 80043ae:	f04f 0300 	mov.w	r3, #0
 80043b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043b6:	4629      	mov	r1, r5
 80043b8:	028b      	lsls	r3, r1, #10
 80043ba:	4621      	mov	r1, r4
 80043bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c0:	4621      	mov	r1, r4
 80043c2:	028a      	lsls	r2, r1, #10
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ca:	2200      	movs	r2, #0
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	60fa      	str	r2, [r7, #12]
 80043d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043d4:	f7fc fc58 	bl	8000c88 <__aeabi_uldivmod>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4613      	mov	r3, r2
 80043de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043e0:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <HAL_RCC_GetSysClockFreq+0x180>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	3301      	adds	r3, #1
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80043f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043fa:	e002      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetSysClockFreq+0x184>)
 80043fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004400:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004404:	4618      	mov	r0, r3
 8004406:	3740      	adds	r7, #64	; 0x40
 8004408:	46bd      	mov	sp, r7
 800440a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800440e:	bf00      	nop
 8004410:	40023800 	.word	0x40023800
 8004414:	00f42400 	.word	0x00f42400
 8004418:	017d7840 	.word	0x017d7840

0800441c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_RCC_GetHCLKFreq+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000288 	.word	0x20000288

08004434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004438:	f7ff fff0 	bl	800441c <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4903      	ldr	r1, [pc, #12]	; (8004458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004450:	4618      	mov	r0, r3
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800b62c 	.word	0x0800b62c

0800445c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004460:	f7ff ffdc 	bl	800441c <HAL_RCC_GetHCLKFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b05      	ldr	r3, [pc, #20]	; (800447c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	0b5b      	lsrs	r3, r3, #13
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	4903      	ldr	r1, [pc, #12]	; (8004480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004478:	4618      	mov	r0, r3
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	0800b62c 	.word	0x0800b62c

08004484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e041      	b.n	800451a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd fe60 	bl	8002170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	4610      	mov	r0, r2
 80044c4:	f000 fb3c 	bl	8004b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
	...

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e04e      	b.n	80045da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a23      	ldr	r2, [pc, #140]	; (80045e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_Base_Start_IT+0xc8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a18      	ldr	r2, [pc, #96]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d111      	bne.n	80045c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d010      	beq.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f042 0201 	orr.w	r2, r2, #1
 80045c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c6:	e007      	b.n	80045d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40010400 	.word	0x40010400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40001800 	.word	0x40001800

08004604 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_IC_Start_IT+0x1e>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e013      	b.n	800464a <HAL_TIM_IC_Start_IT+0x46>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_IC_Start_IT+0x2e>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800462e:	b2db      	uxtb	r3, r3
 8004630:	e00b      	b.n	800464a <HAL_TIM_IC_Start_IT+0x46>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_IC_Start_IT+0x3e>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800463e:	b2db      	uxtb	r3, r3
 8004640:	e003      	b.n	800464a <HAL_TIM_IC_Start_IT+0x46>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004648:	b2db      	uxtb	r3, r3
 800464a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d104      	bne.n	800465c <HAL_TIM_IC_Start_IT+0x58>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004658:	b2db      	uxtb	r3, r3
 800465a:	e013      	b.n	8004684 <HAL_TIM_IC_Start_IT+0x80>
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	2b04      	cmp	r3, #4
 8004660:	d104      	bne.n	800466c <HAL_TIM_IC_Start_IT+0x68>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e00b      	b.n	8004684 <HAL_TIM_IC_Start_IT+0x80>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b08      	cmp	r3, #8
 8004670:	d104      	bne.n	800467c <HAL_TIM_IC_Start_IT+0x78>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004678:	b2db      	uxtb	r3, r3
 800467a:	e003      	b.n	8004684 <HAL_TIM_IC_Start_IT+0x80>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004682:	b2db      	uxtb	r3, r3
 8004684:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004686:	7bbb      	ldrb	r3, [r7, #14]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d102      	bne.n	8004692 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800468c:	7b7b      	ldrb	r3, [r7, #13]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d001      	beq.n	8004696 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0cc      	b.n	8004830 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_IC_Start_IT+0xa2>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a4:	e013      	b.n	80046ce <HAL_TIM_IC_Start_IT+0xca>
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d104      	bne.n	80046b6 <HAL_TIM_IC_Start_IT+0xb2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046b4:	e00b      	b.n	80046ce <HAL_TIM_IC_Start_IT+0xca>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d104      	bne.n	80046c6 <HAL_TIM_IC_Start_IT+0xc2>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c4:	e003      	b.n	80046ce <HAL_TIM_IC_Start_IT+0xca>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2202      	movs	r2, #2
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d104      	bne.n	80046de <HAL_TIM_IC_Start_IT+0xda>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046dc:	e013      	b.n	8004706 <HAL_TIM_IC_Start_IT+0x102>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d104      	bne.n	80046ee <HAL_TIM_IC_Start_IT+0xea>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ec:	e00b      	b.n	8004706 <HAL_TIM_IC_Start_IT+0x102>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d104      	bne.n	80046fe <HAL_TIM_IC_Start_IT+0xfa>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2202      	movs	r2, #2
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fc:	e003      	b.n	8004706 <HAL_TIM_IC_Start_IT+0x102>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2202      	movs	r2, #2
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b0c      	cmp	r3, #12
 800470a:	d841      	bhi.n	8004790 <HAL_TIM_IC_Start_IT+0x18c>
 800470c:	a201      	add	r2, pc, #4	; (adr r2, 8004714 <HAL_TIM_IC_Start_IT+0x110>)
 800470e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004712:	bf00      	nop
 8004714:	08004749 	.word	0x08004749
 8004718:	08004791 	.word	0x08004791
 800471c:	08004791 	.word	0x08004791
 8004720:	08004791 	.word	0x08004791
 8004724:	0800475b 	.word	0x0800475b
 8004728:	08004791 	.word	0x08004791
 800472c:	08004791 	.word	0x08004791
 8004730:	08004791 	.word	0x08004791
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004791 	.word	0x08004791
 800473c:	08004791 	.word	0x08004791
 8004740:	08004791 	.word	0x08004791
 8004744:	0800477f 	.word	0x0800477f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68da      	ldr	r2, [r3, #12]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0202 	orr.w	r2, r2, #2
 8004756:	60da      	str	r2, [r3, #12]
      break;
 8004758:	e01d      	b.n	8004796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0204 	orr.w	r2, r2, #4
 8004768:	60da      	str	r2, [r3, #12]
      break;
 800476a:	e014      	b.n	8004796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0208 	orr.w	r2, r2, #8
 800477a:	60da      	str	r2, [r3, #12]
      break;
 800477c:	e00b      	b.n	8004796 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68da      	ldr	r2, [r3, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0210 	orr.w	r2, r2, #16
 800478c:	60da      	str	r2, [r3, #12]
      break;
 800478e:	e002      	b.n	8004796 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	bf00      	nop
  }

  if (status == HAL_OK)
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d148      	bne.n	800482e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2201      	movs	r2, #1
 80047a2:	6839      	ldr	r1, [r7, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fa6b 	bl	8004c80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a22      	ldr	r2, [pc, #136]	; (8004838 <HAL_TIM_IC_Start_IT+0x234>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d022      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047bc:	d01d      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1e      	ldr	r2, [pc, #120]	; (800483c <HAL_TIM_IC_Start_IT+0x238>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a1c      	ldr	r2, [pc, #112]	; (8004840 <HAL_TIM_IC_Start_IT+0x23c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_TIM_IC_Start_IT+0x240>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a19      	ldr	r2, [pc, #100]	; (8004848 <HAL_TIM_IC_Start_IT+0x244>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a18      	ldr	r2, [pc, #96]	; (800484c <HAL_TIM_IC_Start_IT+0x248>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIM_IC_Start_IT+0x1f6>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a16      	ldr	r2, [pc, #88]	; (8004850 <HAL_TIM_IC_Start_IT+0x24c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d010      	beq.n	800482e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	e007      	b.n	800482e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800482e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40010400 	.word	0x40010400
 800484c:	40014000 	.word	0x40014000
 8004850:	40001800 	.word	0x40001800

08004854 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	d122      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d11b      	bne.n	80048b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f06f 0202 	mvn.w	r2, #2
 8004880:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d003      	beq.n	800489e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7fc fe02 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 800489c:	e005      	b.n	80048aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f924 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f92b 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d122      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d11b      	bne.n	8004904 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0204 	mvn.w	r2, #4
 80048d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2202      	movs	r2, #2
 80048da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fdd8 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f8fa 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f901 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b08      	cmp	r3, #8
 8004910:	d122      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11b      	bne.n	8004958 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0208 	mvn.w	r2, #8
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2204      	movs	r2, #4
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fc fdae 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f8d0 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f8d7 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0310 	and.w	r3, r3, #16
 8004962:	2b10      	cmp	r3, #16
 8004964:	d122      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0310 	and.w	r3, r3, #16
 8004970:	2b10      	cmp	r3, #16
 8004972:	d11b      	bne.n	80049ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0210 	mvn.w	r2, #16
 800497c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2208      	movs	r2, #8
 8004982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fd84 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004998:	e005      	b.n	80049a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f8a6 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8ad 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d10e      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d107      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f06f 0201 	mvn.w	r2, #1
 80049d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc fd32 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e2:	2b80      	cmp	r3, #128	; 0x80
 80049e4:	d10e      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f0:	2b80      	cmp	r3, #128	; 0x80
 80049f2:	d107      	bne.n	8004a04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f96d 	bl	8004cde <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1c:	2b40      	cmp	r3, #64	; 0x40
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f872 	bl	8004b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0320 	and.w	r3, r3, #32
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0320 	and.w	r3, r3, #32
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0220 	mvn.w	r2, #32
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f937 	bl	8004cca <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a5c:	bf00      	nop
 8004a5e:	3708      	adds	r7, #8
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d831      	bhi.n	8004adc <HAL_TIM_ReadCapturedValue+0x78>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004add 	.word	0x08004add
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	60fb      	str	r3, [r7, #12]

      break;
 8004abc:	e00f      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	60fb      	str	r3, [r7, #12]

      break;
 8004ac6:	e00a      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ace:	60fb      	str	r3, [r7, #12]

      break;
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	60fb      	str	r3, [r7, #12]

      break;
 8004ada:	e000      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004adc:	bf00      	nop
  }

  return tmpreg;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	7f1b      	ldrb	r3, [r3, #28]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a40      	ldr	r2, [pc, #256]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d013      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b5e:	d00f      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d00b      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d007      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a3b      	ldr	r2, [pc, #236]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d003      	beq.n	8004b80 <TIM_Base_SetConfig+0x40>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a3a      	ldr	r2, [pc, #232]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d108      	bne.n	8004b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d02b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ba0:	d027      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	; (8004c58 <TIM_Base_SetConfig+0x118>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d023      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	; (8004c5c <TIM_Base_SetConfig+0x11c>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d01f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	; (8004c60 <TIM_Base_SetConfig+0x120>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d01b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d017      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	; (8004c68 <TIM_Base_SetConfig+0x128>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d013      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	; (8004c6c <TIM_Base_SetConfig+0x12c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00f      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <TIM_Base_SetConfig+0x130>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00b      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a25      	ldr	r2, [pc, #148]	; (8004c74 <TIM_Base_SetConfig+0x134>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d007      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a24      	ldr	r2, [pc, #144]	; (8004c78 <TIM_Base_SetConfig+0x138>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d003      	beq.n	8004bf2 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <TIM_Base_SetConfig+0x13c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d108      	bne.n	8004c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a0a      	ldr	r2, [pc, #40]	; (8004c54 <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_Base_SetConfig+0xf8>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <TIM_Base_SetConfig+0x124>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d103      	bne.n	8004c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	615a      	str	r2, [r3, #20]
}
 8004c46:	bf00      	nop
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40010000 	.word	0x40010000
 8004c58:	40000400 	.word	0x40000400
 8004c5c:	40000800 	.word	0x40000800
 8004c60:	40000c00 	.word	0x40000c00
 8004c64:	40010400 	.word	0x40010400
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800
 8004c74:	40001800 	.word	0x40001800
 8004c78:	40001c00 	.word	0x40001c00
 8004c7c:	40002000 	.word	0x40002000

08004c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b087      	sub	sp, #28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2201      	movs	r2, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6a1a      	ldr	r2, [r3, #32]
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	43db      	mvns	r3, r3
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a1a      	ldr	r2, [r3, #32]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	6879      	ldr	r1, [r7, #4]
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e03f      	b.n	8004d84 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d106      	bne.n	8004d1e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f7fd fabf 	bl	800229c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2224      	movs	r2, #36	; 0x24
 8004d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d34:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 fdda 	bl	80058f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695a      	ldr	r2, [r3, #20]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08a      	sub	sp, #40	; 0x28
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d17c      	bne.n	8004ea6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_UART_Transmit+0x2c>
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d101      	bne.n	8004dbc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e075      	b.n	8004ea8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Transmit+0x3e>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	e06e      	b.n	8004ea8 <HAL_UART_Transmit+0x11c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2221      	movs	r2, #33	; 0x21
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004de0:	f7fd fb3c 	bl	800245c <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	88fa      	ldrh	r2, [r7, #6]
 8004dea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	88fa      	ldrh	r2, [r7, #6]
 8004df0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dfa:	d108      	bne.n	8004e0e <HAL_UART_Transmit+0x82>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
 8004e0c:	e003      	b.n	8004e16 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e12:	2300      	movs	r3, #0
 8004e14:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004e1e:	e02a      	b.n	8004e76 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	2200      	movs	r2, #0
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f000 fb1e 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d001      	beq.n	8004e3a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e036      	b.n	8004ea8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10b      	bne.n	8004e58 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	881b      	ldrh	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e4e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e50:	69bb      	ldr	r3, [r7, #24]
 8004e52:	3302      	adds	r3, #2
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e007      	b.n	8004e68 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	781a      	ldrb	r2, [r3, #0]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	3301      	adds	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1cf      	bne.n	8004e20 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 faee 	bl	800546c <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e006      	b.n	8004ea8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	e000      	b.n	8004ea8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ea6:	2302      	movs	r3, #2
  }
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3720      	adds	r7, #32
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b20      	cmp	r3, #32
 8004ec8:	d11d      	bne.n	8004f06 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <HAL_UART_Receive_IT+0x26>
 8004ed0:	88fb      	ldrh	r3, [r7, #6]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e016      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Receive_IT+0x38>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e00f      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ef6:	88fb      	ldrh	r3, [r7, #6]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb23 	bl	8005548 <UART_Start_Receive_IT>
 8004f02:	4603      	mov	r3, r0
 8004f04:	e000      	b.n	8004f08 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f06:	2302      	movs	r3, #2
  }
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0ba      	sub	sp, #232	; 0xe8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
 8004f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fc03 	bl	800577a <UART_Receive_IT>
      return;
 8004f74:	e256      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 80de 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
 8004f80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d106      	bne.n	8004f9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80d1 	beq.w	800513c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
 8004fa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
 8004fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fda:	f043 0202 	orr.w	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
 8004fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d005      	beq.n	8005006 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f043 0204 	orr.w	r2, r3, #4
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500a:	f003 0308 	and.w	r3, r3, #8
 800500e:	2b00      	cmp	r3, #0
 8005010:	d011      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
 8005012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d105      	bne.n	800502a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800501e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	f043 0208 	orr.w	r2, r3, #8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	f000 81ed 	beq.w	800541a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
 800504c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb8e 	bl	800577a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005068:	2b40      	cmp	r3, #64	; 0x40
 800506a:	bf0c      	ite	eq
 800506c:	2301      	moveq	r3, #1
 800506e:	2300      	movne	r3, #0
 8005070:	b2db      	uxtb	r3, r3
 8005072:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d103      	bne.n	800508a <HAL_UART_IRQHandler+0x17a>
 8005082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d04f      	beq.n	800512a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fa96 	bl	80055bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d141      	bne.n	8005122 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3314      	adds	r3, #20
 80050a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050ac:	e853 3f00 	ldrex	r3, [r3]
 80050b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3314      	adds	r3, #20
 80050c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1d9      	bne.n	800509e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d013      	beq.n	800511a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f6:	4a7d      	ldr	r2, [pc, #500]	; (80052ec <HAL_UART_IRQHandler+0x3dc>)
 80050f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fe f90c 	bl	800331c <HAL_DMA_Abort_IT>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d016      	beq.n	8005138 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005114:	4610      	mov	r0, r2
 8005116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005118:	e00e      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f990 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005120:	e00a      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f98c 	bl	8005440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005128:	e006      	b.n	8005138 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f988 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005136:	e170      	b.n	800541a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	bf00      	nop
    return;
 800513a:	e16e      	b.n	800541a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	2b01      	cmp	r3, #1
 8005142:	f040 814a 	bne.w	80053da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	2b00      	cmp	r3, #0
 8005150:	f000 8143 	beq.w	80053da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	f000 813c 	beq.w	80053da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	60bb      	str	r3, [r7, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005182:	2b40      	cmp	r3, #64	; 0x40
 8005184:	f040 80b4 	bne.w	80052f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005194:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 8140 	beq.w	800541e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051a6:	429a      	cmp	r2, r3
 80051a8:	f080 8139 	bcs.w	800541e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	f000 8088 	beq.w	80052d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	330c      	adds	r3, #12
 80051c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80051fe:	e841 2300 	strex	r3, r2, [r1]
 8005202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005206:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1d9      	bne.n	80051c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3314      	adds	r3, #20
 8005214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800521e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3314      	adds	r3, #20
 800522e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005236:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800523a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e1      	bne.n	800520e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3314      	adds	r3, #20
 8005250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800525a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800525c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005260:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3314      	adds	r3, #20
 800526a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800526e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005270:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005274:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800527c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e3      	bne.n	800524a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2220      	movs	r2, #32
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	330c      	adds	r3, #12
 8005296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a2:	f023 0310 	bic.w	r3, r3, #16
 80052a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	330c      	adds	r3, #12
 80052b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80052b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052bc:	e841 2300 	strex	r3, r2, [r1]
 80052c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1e3      	bne.n	8005290 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	4618      	mov	r0, r3
 80052ce:	f7fd ffb5 	bl	800323c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052da:	b29b      	uxth	r3, r3
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	b29b      	uxth	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f8b6 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052e8:	e099      	b.n	800541e <HAL_UART_IRQHandler+0x50e>
 80052ea:	bf00      	nop
 80052ec:	08005683 	.word	0x08005683
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 808b 	beq.w	8005422 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800530c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8086 	beq.w	8005422 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800532c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	330c      	adds	r3, #12
 8005336:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800533a:	647a      	str	r2, [r7, #68]	; 0x44
 800533c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005340:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d1e3      	bne.n	8005316 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3314      	adds	r3, #20
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	623b      	str	r3, [r7, #32]
   return(result);
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f023 0301 	bic.w	r3, r3, #1
 8005364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3314      	adds	r3, #20
 800536e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005372:	633a      	str	r2, [r7, #48]	; 0x30
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005378:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e3      	bne.n	800534e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	330c      	adds	r3, #12
 800539a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0310 	bic.w	r3, r3, #16
 80053aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053b8:	61fa      	str	r2, [r7, #28]
 80053ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	617b      	str	r3, [r7, #20]
   return(result);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e3      	bne.n	8005394 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d0:	4619      	mov	r1, r3
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f83e 	bl	8005454 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053d8:	e023      	b.n	8005422 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <HAL_UART_IRQHandler+0x4ea>
 80053e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f959 	bl	80056aa <UART_Transmit_IT>
    return;
 80053f8:	e014      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <HAL_UART_IRQHandler+0x514>
 8005406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540e:	2b00      	cmp	r3, #0
 8005410:	d008      	beq.n	8005424 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f999 	bl	800574a <UART_EndTransmit_IT>
    return;
 8005418:	e004      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
    return;
 800541a:	bf00      	nop
 800541c:	e002      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
      return;
 800541e:	bf00      	nop
 8005420:	e000      	b.n	8005424 <HAL_UART_IRQHandler+0x514>
      return;
 8005422:	bf00      	nop
  }
}
 8005424:	37e8      	adds	r7, #232	; 0xe8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop

0800542c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	460b      	mov	r3, r1
 800545e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b090      	sub	sp, #64	; 0x40
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547c:	e050      	b.n	8005520 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d04c      	beq.n	8005520 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005488:	2b00      	cmp	r3, #0
 800548a:	d007      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
 800548c:	f7fc ffe6 	bl	800245c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005498:	429a      	cmp	r2, r3
 800549a:	d241      	bcs.n	8005520 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	330c      	adds	r3, #12
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80054bc:	637a      	str	r2, [r7, #52]	; 0x34
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054c4:	e841 2300 	strex	r3, r2, [r1]
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d1e5      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3314      	adds	r3, #20
 80054d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	e853 3f00 	ldrex	r3, [r3]
 80054de:	613b      	str	r3, [r7, #16]
   return(result);
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	3314      	adds	r3, #20
 80054ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054f0:	623a      	str	r2, [r7, #32]
 80054f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f4:	69f9      	ldr	r1, [r7, #28]
 80054f6:	6a3a      	ldr	r2, [r7, #32]
 80054f8:	e841 2300 	strex	r3, r2, [r1]
 80054fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1e5      	bne.n	80054d0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e00f      	b.n	8005540 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	4013      	ands	r3, r2
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	429a      	cmp	r2, r3
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	79fb      	ldrb	r3, [r7, #7]
 800553a:	429a      	cmp	r2, r3
 800553c:	d09f      	beq.n	800547e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3740      	adds	r7, #64	; 0x40
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	4613      	mov	r3, r2
 8005554:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	88fa      	ldrh	r2, [r7, #6]
 8005560:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	88fa      	ldrh	r2, [r7, #6]
 8005566:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2222      	movs	r2, #34	; 0x22
 8005572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800558c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f042 0201 	orr.w	r2, r2, #1
 800559c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0220 	orr.w	r2, r2, #32
 80055ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b095      	sub	sp, #84	; 0x54
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	330c      	adds	r3, #12
 80055ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ce:	e853 3f00 	ldrex	r3, [r3]
 80055d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	330c      	adds	r3, #12
 80055e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055e4:	643a      	str	r2, [r7, #64]	; 0x40
 80055e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80055ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80055ec:	e841 2300 	strex	r3, r2, [r1]
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d1e5      	bne.n	80055c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3314      	adds	r3, #20
 80055fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	61fb      	str	r3, [r7, #28]
   return(result);
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f023 0301 	bic.w	r3, r3, #1
 800560e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	3314      	adds	r3, #20
 8005616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005618:	62fa      	str	r2, [r7, #44]	; 0x2c
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800561e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b01      	cmp	r3, #1
 8005632:	d119      	bne.n	8005668 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	e853 3f00 	ldrex	r3, [r3]
 8005642:	60bb      	str	r3, [r7, #8]
   return(result);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f023 0310 	bic.w	r3, r3, #16
 800564a:	647b      	str	r3, [r7, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	330c      	adds	r3, #12
 8005652:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005654:	61ba      	str	r2, [r7, #24]
 8005656:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6979      	ldr	r1, [r7, #20]
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	e841 2300 	strex	r3, r2, [r1]
 8005660:	613b      	str	r3, [r7, #16]
   return(result);
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d1e5      	bne.n	8005634 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005676:	bf00      	nop
 8005678:	3754      	adds	r7, #84	; 0x54
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f7ff fecf 	bl	8005440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056a2:	bf00      	nop
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b085      	sub	sp, #20
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b21      	cmp	r3, #33	; 0x21
 80056bc:	d13e      	bne.n	800573c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d114      	bne.n	80056f2 <UART_Transmit_IT+0x48>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d110      	bne.n	80056f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	461a      	mov	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	1c9a      	adds	r2, r3, #2
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	621a      	str	r2, [r3, #32]
 80056f0:	e008      	b.n	8005704 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	6211      	str	r1, [r2, #32]
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005708:	b29b      	uxth	r3, r3
 800570a:	3b01      	subs	r3, #1
 800570c:	b29b      	uxth	r3, r3
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	4619      	mov	r1, r3
 8005712:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10f      	bne.n	8005738 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005726:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005736:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68da      	ldr	r2, [r3, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005760:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff fe5e 	bl	800542c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b08c      	sub	sp, #48	; 0x30
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b22      	cmp	r3, #34	; 0x22
 800578c:	f040 80ab 	bne.w	80058e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d117      	bne.n	80057ca <UART_Receive_IT+0x50>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d113      	bne.n	80057ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c2:	1c9a      	adds	r2, r3, #2
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	629a      	str	r2, [r3, #40]	; 0x28
 80057c8:	e026      	b.n	8005818 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80057d0:	2300      	movs	r3, #0
 80057d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057dc:	d007      	beq.n	80057ee <UART_Receive_IT+0x74>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <UART_Receive_IT+0x82>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d106      	bne.n	80057fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	b2da      	uxtb	r2, r3
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	701a      	strb	r2, [r3, #0]
 80057fa:	e008      	b.n	800580e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005808:	b2da      	uxtb	r2, r3
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29b      	uxth	r3, r3
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4619      	mov	r1, r3
 8005826:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005828:	2b00      	cmp	r3, #0
 800582a:	d15a      	bne.n	80058e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68da      	ldr	r2, [r3, #12]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0220 	bic.w	r2, r2, #32
 800583a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2220      	movs	r2, #32
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	2b01      	cmp	r3, #1
 800586a:	d135      	bne.n	80058d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	613b      	str	r3, [r7, #16]
   return(result);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005892:	623a      	str	r2, [r7, #32]
 8005894:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	69f9      	ldr	r1, [r7, #28]
 8005898:	6a3a      	ldr	r2, [r7, #32]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	61bb      	str	r3, [r7, #24]
   return(result);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b10      	cmp	r3, #16
 80058b2:	d10a      	bne.n	80058ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	60fb      	str	r3, [r7, #12]
 80058c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80058ce:	4619      	mov	r1, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f7ff fdbf 	bl	8005454 <HAL_UARTEx_RxEventCallback>
 80058d6:	e002      	b.n	80058de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7fb fe43 	bl	8001564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e002      	b.n	80058e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80058e2:	2300      	movs	r3, #0
 80058e4:	e000      	b.n	80058e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80058e6:	2302      	movs	r3, #2
  }
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3730      	adds	r7, #48	; 0x30
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058f4:	b0c0      	sub	sp, #256	; 0x100
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800590c:	68d9      	ldr	r1, [r3, #12]
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	ea40 0301 	orr.w	r3, r0, r1
 8005918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	431a      	orrs	r2, r3
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	431a      	orrs	r2, r3
 8005930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800593c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005948:	f021 010c 	bic.w	r1, r1, #12
 800594c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005956:	430b      	orrs	r3, r1
 8005958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	6999      	ldr	r1, [r3, #24]
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	ea40 0301 	orr.w	r3, r0, r1
 8005976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	4b8f      	ldr	r3, [pc, #572]	; (8005bbc <UART_SetConfig+0x2cc>)
 8005980:	429a      	cmp	r2, r3
 8005982:	d005      	beq.n	8005990 <UART_SetConfig+0xa0>
 8005984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b8d      	ldr	r3, [pc, #564]	; (8005bc0 <UART_SetConfig+0x2d0>)
 800598c:	429a      	cmp	r2, r3
 800598e:	d104      	bne.n	800599a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005990:	f7fe fd64 	bl	800445c <HAL_RCC_GetPCLK2Freq>
 8005994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005998:	e003      	b.n	80059a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800599a:	f7fe fd4b 	bl	8004434 <HAL_RCC_GetPCLK1Freq>
 800599e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059a6:	69db      	ldr	r3, [r3, #28]
 80059a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ac:	f040 810c 	bne.w	8005bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80059ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80059be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80059ca:	415b      	adcs	r3, r3
 80059cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059d2:	4621      	mov	r1, r4
 80059d4:	eb12 0801 	adds.w	r8, r2, r1
 80059d8:	4629      	mov	r1, r5
 80059da:	eb43 0901 	adc.w	r9, r3, r1
 80059de:	f04f 0200 	mov.w	r2, #0
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059f2:	4690      	mov	r8, r2
 80059f4:	4699      	mov	r9, r3
 80059f6:	4623      	mov	r3, r4
 80059f8:	eb18 0303 	adds.w	r3, r8, r3
 80059fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a00:	462b      	mov	r3, r5
 8005a02:	eb49 0303 	adc.w	r3, r9, r3
 8005a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a1e:	460b      	mov	r3, r1
 8005a20:	18db      	adds	r3, r3, r3
 8005a22:	653b      	str	r3, [r7, #80]	; 0x50
 8005a24:	4613      	mov	r3, r2
 8005a26:	eb42 0303 	adc.w	r3, r2, r3
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005a34:	f7fb f928 	bl	8000c88 <__aeabi_uldivmod>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4b61      	ldr	r3, [pc, #388]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	011c      	lsls	r4, r3, #4
 8005a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005a58:	4642      	mov	r2, r8
 8005a5a:	464b      	mov	r3, r9
 8005a5c:	1891      	adds	r1, r2, r2
 8005a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a60:	415b      	adcs	r3, r3
 8005a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a68:	4641      	mov	r1, r8
 8005a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8005a6e:	4649      	mov	r1, r9
 8005a70:	eb43 0b01 	adc.w	fp, r3, r1
 8005a74:	f04f 0200 	mov.w	r2, #0
 8005a78:	f04f 0300 	mov.w	r3, #0
 8005a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a88:	4692      	mov	sl, r2
 8005a8a:	469b      	mov	fp, r3
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8005a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a96:	464b      	mov	r3, r9
 8005a98:	eb4b 0303 	adc.w	r3, fp, r3
 8005a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	18db      	adds	r3, r3, r3
 8005ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8005aba:	4613      	mov	r3, r2
 8005abc:	eb42 0303 	adc.w	r3, r2, r3
 8005ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005aca:	f7fb f8dd 	bl	8000c88 <__aeabi_uldivmod>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4611      	mov	r1, r2
 8005ad4:	4b3b      	ldr	r3, [pc, #236]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2264      	movs	r2, #100	; 0x64
 8005ade:	fb02 f303 	mul.w	r3, r2, r3
 8005ae2:	1acb      	subs	r3, r1, r3
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005aea:	4b36      	ldr	r3, [pc, #216]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005aec:	fba3 2302 	umull	r2, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005af8:	441c      	add	r4, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	464b      	mov	r3, r9
 8005b10:	1891      	adds	r1, r2, r2
 8005b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8005b14:	415b      	adcs	r3, r3
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6339      	str	r1, [r7, #48]	; 0x30
 8005b22:	4649      	mov	r1, r9
 8005b24:	414b      	adcs	r3, r1
 8005b26:	637b      	str	r3, [r7, #52]	; 0x34
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005b34:	4659      	mov	r1, fp
 8005b36:	00cb      	lsls	r3, r1, #3
 8005b38:	4651      	mov	r1, sl
 8005b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3e:	4651      	mov	r1, sl
 8005b40:	00ca      	lsls	r2, r1, #3
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	4603      	mov	r3, r0
 8005b48:	4642      	mov	r2, r8
 8005b4a:	189b      	adds	r3, r3, r2
 8005b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005b50:	464b      	mov	r3, r9
 8005b52:	460a      	mov	r2, r1
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005b70:	460b      	mov	r3, r1
 8005b72:	18db      	adds	r3, r3, r3
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b76:	4613      	mov	r3, r2
 8005b78:	eb42 0303 	adc.w	r3, r2, r3
 8005b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b86:	f7fb f87f 	bl	8000c88 <__aeabi_uldivmod>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4b0d      	ldr	r3, [pc, #52]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005b90:	fba3 1302 	umull	r1, r3, r3, r2
 8005b94:	095b      	lsrs	r3, r3, #5
 8005b96:	2164      	movs	r1, #100	; 0x64
 8005b98:	fb01 f303 	mul.w	r3, r1, r3
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	3332      	adds	r3, #50	; 0x32
 8005ba2:	4a08      	ldr	r2, [pc, #32]	; (8005bc4 <UART_SetConfig+0x2d4>)
 8005ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba8:	095b      	lsrs	r3, r3, #5
 8005baa:	f003 0207 	and.w	r2, r3, #7
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4422      	add	r2, r4
 8005bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005bb8:	e105      	b.n	8005dc6 <UART_SetConfig+0x4d6>
 8005bba:	bf00      	nop
 8005bbc:	40011000 	.word	0x40011000
 8005bc0:	40011400 	.word	0x40011400
 8005bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005bda:	4642      	mov	r2, r8
 8005bdc:	464b      	mov	r3, r9
 8005bde:	1891      	adds	r1, r2, r2
 8005be0:	6239      	str	r1, [r7, #32]
 8005be2:	415b      	adcs	r3, r3
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bea:	4641      	mov	r1, r8
 8005bec:	1854      	adds	r4, r2, r1
 8005bee:	4649      	mov	r1, r9
 8005bf0:	eb43 0501 	adc.w	r5, r3, r1
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	00eb      	lsls	r3, r5, #3
 8005bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c02:	00e2      	lsls	r2, r4, #3
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18e3      	adds	r3, r4, r3
 8005c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c10:	464b      	mov	r3, r9
 8005c12:	eb45 0303 	adc.w	r3, r5, r3
 8005c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005c36:	4629      	mov	r1, r5
 8005c38:	008b      	lsls	r3, r1, #2
 8005c3a:	4621      	mov	r1, r4
 8005c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c40:	4621      	mov	r1, r4
 8005c42:	008a      	lsls	r2, r1, #2
 8005c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005c48:	f7fb f81e 	bl	8000c88 <__aeabi_uldivmod>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	460b      	mov	r3, r1
 8005c50:	4b60      	ldr	r3, [pc, #384]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005c52:	fba3 2302 	umull	r2, r3, r3, r2
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	011c      	lsls	r4, r3, #4
 8005c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	464b      	mov	r3, r9
 8005c70:	1891      	adds	r1, r2, r2
 8005c72:	61b9      	str	r1, [r7, #24]
 8005c74:	415b      	adcs	r3, r3
 8005c76:	61fb      	str	r3, [r7, #28]
 8005c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7c:	4641      	mov	r1, r8
 8005c7e:	1851      	adds	r1, r2, r1
 8005c80:	6139      	str	r1, [r7, #16]
 8005c82:	4649      	mov	r1, r9
 8005c84:	414b      	adcs	r3, r1
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	f04f 0300 	mov.w	r3, #0
 8005c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c94:	4659      	mov	r1, fp
 8005c96:	00cb      	lsls	r3, r1, #3
 8005c98:	4651      	mov	r1, sl
 8005c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c9e:	4651      	mov	r1, sl
 8005ca0:	00ca      	lsls	r2, r1, #3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4642      	mov	r2, r8
 8005caa:	189b      	adds	r3, r3, r2
 8005cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cb0:	464b      	mov	r3, r9
 8005cb2:	460a      	mov	r2, r1
 8005cb4:	eb42 0303 	adc.w	r3, r2, r3
 8005cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005cd4:	4649      	mov	r1, r9
 8005cd6:	008b      	lsls	r3, r1, #2
 8005cd8:	4641      	mov	r1, r8
 8005cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cde:	4641      	mov	r1, r8
 8005ce0:	008a      	lsls	r2, r1, #2
 8005ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ce6:	f7fa ffcf 	bl	8000c88 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	2164      	movs	r1, #100	; 0x64
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	3332      	adds	r3, #50	; 0x32
 8005d02:	4a34      	ldr	r2, [pc, #208]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d0e:	441c      	add	r4, r3
 8005d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d14:	2200      	movs	r2, #0
 8005d16:	673b      	str	r3, [r7, #112]	; 0x70
 8005d18:	677a      	str	r2, [r7, #116]	; 0x74
 8005d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005d1e:	4642      	mov	r2, r8
 8005d20:	464b      	mov	r3, r9
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	415b      	adcs	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d2e:	4641      	mov	r1, r8
 8005d30:	1851      	adds	r1, r2, r1
 8005d32:	6039      	str	r1, [r7, #0]
 8005d34:	4649      	mov	r1, r9
 8005d36:	414b      	adcs	r3, r1
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d46:	4659      	mov	r1, fp
 8005d48:	00cb      	lsls	r3, r1, #3
 8005d4a:	4651      	mov	r1, sl
 8005d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d50:	4651      	mov	r1, sl
 8005d52:	00ca      	lsls	r2, r1, #3
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4642      	mov	r2, r8
 8005d5c:	189b      	adds	r3, r3, r2
 8005d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d60:	464b      	mov	r3, r9
 8005d62:	460a      	mov	r2, r1
 8005d64:	eb42 0303 	adc.w	r3, r2, r3
 8005d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	663b      	str	r3, [r7, #96]	; 0x60
 8005d74:	667a      	str	r2, [r7, #100]	; 0x64
 8005d76:	f04f 0200 	mov.w	r2, #0
 8005d7a:	f04f 0300 	mov.w	r3, #0
 8005d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005d82:	4649      	mov	r1, r9
 8005d84:	008b      	lsls	r3, r1, #2
 8005d86:	4641      	mov	r1, r8
 8005d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d8c:	4641      	mov	r1, r8
 8005d8e:	008a      	lsls	r2, r1, #2
 8005d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005d94:	f7fa ff78 	bl	8000c88 <__aeabi_uldivmod>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2164      	movs	r1, #100	; 0x64
 8005da6:	fb01 f303 	mul.w	r3, r1, r3
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	3332      	adds	r3, #50	; 0x32
 8005db0:	4a08      	ldr	r2, [pc, #32]	; (8005dd4 <UART_SetConfig+0x4e4>)
 8005db2:	fba2 2303 	umull	r2, r3, r2, r3
 8005db6:	095b      	lsrs	r3, r3, #5
 8005db8:	f003 020f 	and.w	r2, r3, #15
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4422      	add	r2, r4
 8005dc4:	609a      	str	r2, [r3, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dd2:	bf00      	nop
 8005dd4:	51eb851f 	.word	0x51eb851f

08005dd8 <atoi>:
 8005dd8:	220a      	movs	r2, #10
 8005dda:	2100      	movs	r1, #0
 8005ddc:	f001 be0c 	b.w	80079f8 <strtol>

08005de0 <__errno>:
 8005de0:	4b01      	ldr	r3, [pc, #4]	; (8005de8 <__errno+0x8>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	20000294 	.word	0x20000294

08005dec <__libc_init_array>:
 8005dec:	b570      	push	{r4, r5, r6, lr}
 8005dee:	4d0d      	ldr	r5, [pc, #52]	; (8005e24 <__libc_init_array+0x38>)
 8005df0:	4c0d      	ldr	r4, [pc, #52]	; (8005e28 <__libc_init_array+0x3c>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	2600      	movs	r6, #0
 8005df8:	42a6      	cmp	r6, r4
 8005dfa:	d109      	bne.n	8005e10 <__libc_init_array+0x24>
 8005dfc:	4d0b      	ldr	r5, [pc, #44]	; (8005e2c <__libc_init_array+0x40>)
 8005dfe:	4c0c      	ldr	r4, [pc, #48]	; (8005e30 <__libc_init_array+0x44>)
 8005e00:	f004 fd28 	bl	800a854 <_init>
 8005e04:	1b64      	subs	r4, r4, r5
 8005e06:	10a4      	asrs	r4, r4, #2
 8005e08:	2600      	movs	r6, #0
 8005e0a:	42a6      	cmp	r6, r4
 8005e0c:	d105      	bne.n	8005e1a <__libc_init_array+0x2e>
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e14:	4798      	blx	r3
 8005e16:	3601      	adds	r6, #1
 8005e18:	e7ee      	b.n	8005df8 <__libc_init_array+0xc>
 8005e1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e1e:	4798      	blx	r3
 8005e20:	3601      	adds	r6, #1
 8005e22:	e7f2      	b.n	8005e0a <__libc_init_array+0x1e>
 8005e24:	0800baf4 	.word	0x0800baf4
 8005e28:	0800baf4 	.word	0x0800baf4
 8005e2c:	0800baf4 	.word	0x0800baf4
 8005e30:	0800baf8 	.word	0x0800baf8

08005e34 <memset>:
 8005e34:	4402      	add	r2, r0
 8005e36:	4603      	mov	r3, r0
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d100      	bne.n	8005e3e <memset+0xa>
 8005e3c:	4770      	bx	lr
 8005e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e42:	e7f9      	b.n	8005e38 <memset+0x4>

08005e44 <__cvt>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	ec55 4b10 	vmov	r4, r5, d0
 8005e4c:	2d00      	cmp	r5, #0
 8005e4e:	460e      	mov	r6, r1
 8005e50:	4619      	mov	r1, r3
 8005e52:	462b      	mov	r3, r5
 8005e54:	bfbb      	ittet	lt
 8005e56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005e5a:	461d      	movlt	r5, r3
 8005e5c:	2300      	movge	r3, #0
 8005e5e:	232d      	movlt	r3, #45	; 0x2d
 8005e60:	700b      	strb	r3, [r1, #0]
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005e68:	4691      	mov	r9, r2
 8005e6a:	f023 0820 	bic.w	r8, r3, #32
 8005e6e:	bfbc      	itt	lt
 8005e70:	4622      	movlt	r2, r4
 8005e72:	4614      	movlt	r4, r2
 8005e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e78:	d005      	beq.n	8005e86 <__cvt+0x42>
 8005e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e7e:	d100      	bne.n	8005e82 <__cvt+0x3e>
 8005e80:	3601      	adds	r6, #1
 8005e82:	2102      	movs	r1, #2
 8005e84:	e000      	b.n	8005e88 <__cvt+0x44>
 8005e86:	2103      	movs	r1, #3
 8005e88:	ab03      	add	r3, sp, #12
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	ab02      	add	r3, sp, #8
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	ec45 4b10 	vmov	d0, r4, r5
 8005e94:	4653      	mov	r3, sl
 8005e96:	4632      	mov	r2, r6
 8005e98:	f001 ff06 	bl	8007ca8 <_dtoa_r>
 8005e9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea0:	4607      	mov	r7, r0
 8005ea2:	d102      	bne.n	8005eaa <__cvt+0x66>
 8005ea4:	f019 0f01 	tst.w	r9, #1
 8005ea8:	d022      	beq.n	8005ef0 <__cvt+0xac>
 8005eaa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eae:	eb07 0906 	add.w	r9, r7, r6
 8005eb2:	d110      	bne.n	8005ed6 <__cvt+0x92>
 8005eb4:	783b      	ldrb	r3, [r7, #0]
 8005eb6:	2b30      	cmp	r3, #48	; 0x30
 8005eb8:	d10a      	bne.n	8005ed0 <__cvt+0x8c>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	f7fa fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ec6:	b918      	cbnz	r0, 8005ed0 <__cvt+0x8c>
 8005ec8:	f1c6 0601 	rsb	r6, r6, #1
 8005ecc:	f8ca 6000 	str.w	r6, [sl]
 8005ed0:	f8da 3000 	ldr.w	r3, [sl]
 8005ed4:	4499      	add	r9, r3
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	2300      	movs	r3, #0
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f7fa fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee2:	b108      	cbz	r0, 8005ee8 <__cvt+0xa4>
 8005ee4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ee8:	2230      	movs	r2, #48	; 0x30
 8005eea:	9b03      	ldr	r3, [sp, #12]
 8005eec:	454b      	cmp	r3, r9
 8005eee:	d307      	bcc.n	8005f00 <__cvt+0xbc>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ef4:	1bdb      	subs	r3, r3, r7
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	b004      	add	sp, #16
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	9103      	str	r1, [sp, #12]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e7f0      	b.n	8005eea <__cvt+0xa6>

08005f08 <__exponent>:
 8005f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2900      	cmp	r1, #0
 8005f0e:	bfb8      	it	lt
 8005f10:	4249      	neglt	r1, r1
 8005f12:	f803 2b02 	strb.w	r2, [r3], #2
 8005f16:	bfb4      	ite	lt
 8005f18:	222d      	movlt	r2, #45	; 0x2d
 8005f1a:	222b      	movge	r2, #43	; 0x2b
 8005f1c:	2909      	cmp	r1, #9
 8005f1e:	7042      	strb	r2, [r0, #1]
 8005f20:	dd2a      	ble.n	8005f78 <__exponent+0x70>
 8005f22:	f10d 0407 	add.w	r4, sp, #7
 8005f26:	46a4      	mov	ip, r4
 8005f28:	270a      	movs	r7, #10
 8005f2a:	46a6      	mov	lr, r4
 8005f2c:	460a      	mov	r2, r1
 8005f2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005f32:	fb07 1516 	mls	r5, r7, r6, r1
 8005f36:	3530      	adds	r5, #48	; 0x30
 8005f38:	2a63      	cmp	r2, #99	; 0x63
 8005f3a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005f3e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005f42:	4631      	mov	r1, r6
 8005f44:	dcf1      	bgt.n	8005f2a <__exponent+0x22>
 8005f46:	3130      	adds	r1, #48	; 0x30
 8005f48:	f1ae 0502 	sub.w	r5, lr, #2
 8005f4c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005f50:	1c44      	adds	r4, r0, #1
 8005f52:	4629      	mov	r1, r5
 8005f54:	4561      	cmp	r1, ip
 8005f56:	d30a      	bcc.n	8005f6e <__exponent+0x66>
 8005f58:	f10d 0209 	add.w	r2, sp, #9
 8005f5c:	eba2 020e 	sub.w	r2, r2, lr
 8005f60:	4565      	cmp	r5, ip
 8005f62:	bf88      	it	hi
 8005f64:	2200      	movhi	r2, #0
 8005f66:	4413      	add	r3, r2
 8005f68:	1a18      	subs	r0, r3, r0
 8005f6a:	b003      	add	sp, #12
 8005f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f72:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005f76:	e7ed      	b.n	8005f54 <__exponent+0x4c>
 8005f78:	2330      	movs	r3, #48	; 0x30
 8005f7a:	3130      	adds	r1, #48	; 0x30
 8005f7c:	7083      	strb	r3, [r0, #2]
 8005f7e:	70c1      	strb	r1, [r0, #3]
 8005f80:	1d03      	adds	r3, r0, #4
 8005f82:	e7f1      	b.n	8005f68 <__exponent+0x60>

08005f84 <_printf_float>:
 8005f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	ed2d 8b02 	vpush	{d8}
 8005f8c:	b08d      	sub	sp, #52	; 0x34
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f003 f999 	bl	80092d0 <_localeconv_r>
 8005f9e:	f8d0 a000 	ldr.w	sl, [r0]
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	f7fa f914 	bl	80001d0 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930a      	str	r3, [sp, #40]	; 0x28
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005fb8:	3307      	adds	r3, #7
 8005fba:	f023 0307 	bic.w	r3, r3, #7
 8005fbe:	f103 0208 	add.w	r2, r3, #8
 8005fc2:	f8c8 2000 	str.w	r2, [r8]
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005fd6:	9307      	str	r3, [sp, #28]
 8005fd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fdc:	ee08 0a10 	vmov	s16, r0
 8005fe0:	4b9f      	ldr	r3, [pc, #636]	; (8006260 <_printf_float+0x2dc>)
 8005fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fea:	f7fa fd9f 	bl	8000b2c <__aeabi_dcmpun>
 8005fee:	bb88      	cbnz	r0, 8006054 <_printf_float+0xd0>
 8005ff0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ff4:	4b9a      	ldr	r3, [pc, #616]	; (8006260 <_printf_float+0x2dc>)
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	f7fa fd79 	bl	8000af0 <__aeabi_dcmple>
 8005ffe:	bb48      	cbnz	r0, 8006054 <_printf_float+0xd0>
 8006000:	2200      	movs	r2, #0
 8006002:	2300      	movs	r3, #0
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	f7fa fd68 	bl	8000adc <__aeabi_dcmplt>
 800600c:	b110      	cbz	r0, 8006014 <_printf_float+0x90>
 800600e:	232d      	movs	r3, #45	; 0x2d
 8006010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006014:	4b93      	ldr	r3, [pc, #588]	; (8006264 <_printf_float+0x2e0>)
 8006016:	4894      	ldr	r0, [pc, #592]	; (8006268 <_printf_float+0x2e4>)
 8006018:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800601c:	bf94      	ite	ls
 800601e:	4698      	movls	r8, r3
 8006020:	4680      	movhi	r8, r0
 8006022:	2303      	movs	r3, #3
 8006024:	6123      	str	r3, [r4, #16]
 8006026:	9b05      	ldr	r3, [sp, #20]
 8006028:	f023 0204 	bic.w	r2, r3, #4
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	f04f 0900 	mov.w	r9, #0
 8006032:	9700      	str	r7, [sp, #0]
 8006034:	4633      	mov	r3, r6
 8006036:	aa0b      	add	r2, sp, #44	; 0x2c
 8006038:	4621      	mov	r1, r4
 800603a:	4628      	mov	r0, r5
 800603c:	f000 f9d8 	bl	80063f0 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	f040 8090 	bne.w	8006166 <_printf_float+0x1e2>
 8006046:	f04f 30ff 	mov.w	r0, #4294967295
 800604a:	b00d      	add	sp, #52	; 0x34
 800604c:	ecbd 8b02 	vpop	{d8}
 8006050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006054:	4642      	mov	r2, r8
 8006056:	464b      	mov	r3, r9
 8006058:	4640      	mov	r0, r8
 800605a:	4649      	mov	r1, r9
 800605c:	f7fa fd66 	bl	8000b2c <__aeabi_dcmpun>
 8006060:	b140      	cbz	r0, 8006074 <_printf_float+0xf0>
 8006062:	464b      	mov	r3, r9
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfbc      	itt	lt
 8006068:	232d      	movlt	r3, #45	; 0x2d
 800606a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800606e:	487f      	ldr	r0, [pc, #508]	; (800626c <_printf_float+0x2e8>)
 8006070:	4b7f      	ldr	r3, [pc, #508]	; (8006270 <_printf_float+0x2ec>)
 8006072:	e7d1      	b.n	8006018 <_printf_float+0x94>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	d13f      	bne.n	8006100 <_printf_float+0x17c>
 8006080:	2306      	movs	r3, #6
 8006082:	6063      	str	r3, [r4, #4]
 8006084:	9b05      	ldr	r3, [sp, #20]
 8006086:	6861      	ldr	r1, [r4, #4]
 8006088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800608c:	2300      	movs	r3, #0
 800608e:	9303      	str	r3, [sp, #12]
 8006090:	ab0a      	add	r3, sp, #40	; 0x28
 8006092:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006096:	ab09      	add	r3, sp, #36	; 0x24
 8006098:	ec49 8b10 	vmov	d0, r8, r9
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80060a4:	4628      	mov	r0, r5
 80060a6:	f7ff fecd 	bl	8005e44 <__cvt>
 80060aa:	9b06      	ldr	r3, [sp, #24]
 80060ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060ae:	2b47      	cmp	r3, #71	; 0x47
 80060b0:	4680      	mov	r8, r0
 80060b2:	d108      	bne.n	80060c6 <_printf_float+0x142>
 80060b4:	1cc8      	adds	r0, r1, #3
 80060b6:	db02      	blt.n	80060be <_printf_float+0x13a>
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	4299      	cmp	r1, r3
 80060bc:	dd41      	ble.n	8006142 <_printf_float+0x1be>
 80060be:	f1ab 0b02 	sub.w	fp, fp, #2
 80060c2:	fa5f fb8b 	uxtb.w	fp, fp
 80060c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80060ca:	d820      	bhi.n	800610e <_printf_float+0x18a>
 80060cc:	3901      	subs	r1, #1
 80060ce:	465a      	mov	r2, fp
 80060d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060d4:	9109      	str	r1, [sp, #36]	; 0x24
 80060d6:	f7ff ff17 	bl	8005f08 <__exponent>
 80060da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80060dc:	1813      	adds	r3, r2, r0
 80060de:	2a01      	cmp	r2, #1
 80060e0:	4681      	mov	r9, r0
 80060e2:	6123      	str	r3, [r4, #16]
 80060e4:	dc02      	bgt.n	80060ec <_printf_float+0x168>
 80060e6:	6822      	ldr	r2, [r4, #0]
 80060e8:	07d2      	lsls	r2, r2, #31
 80060ea:	d501      	bpl.n	80060f0 <_printf_float+0x16c>
 80060ec:	3301      	adds	r3, #1
 80060ee:	6123      	str	r3, [r4, #16]
 80060f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d09c      	beq.n	8006032 <_printf_float+0xae>
 80060f8:	232d      	movs	r3, #45	; 0x2d
 80060fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060fe:	e798      	b.n	8006032 <_printf_float+0xae>
 8006100:	9a06      	ldr	r2, [sp, #24]
 8006102:	2a47      	cmp	r2, #71	; 0x47
 8006104:	d1be      	bne.n	8006084 <_printf_float+0x100>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1bc      	bne.n	8006084 <_printf_float+0x100>
 800610a:	2301      	movs	r3, #1
 800610c:	e7b9      	b.n	8006082 <_printf_float+0xfe>
 800610e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006112:	d118      	bne.n	8006146 <_printf_float+0x1c2>
 8006114:	2900      	cmp	r1, #0
 8006116:	6863      	ldr	r3, [r4, #4]
 8006118:	dd0b      	ble.n	8006132 <_printf_float+0x1ae>
 800611a:	6121      	str	r1, [r4, #16]
 800611c:	b913      	cbnz	r3, 8006124 <_printf_float+0x1a0>
 800611e:	6822      	ldr	r2, [r4, #0]
 8006120:	07d0      	lsls	r0, r2, #31
 8006122:	d502      	bpl.n	800612a <_printf_float+0x1a6>
 8006124:	3301      	adds	r3, #1
 8006126:	440b      	add	r3, r1
 8006128:	6123      	str	r3, [r4, #16]
 800612a:	65a1      	str	r1, [r4, #88]	; 0x58
 800612c:	f04f 0900 	mov.w	r9, #0
 8006130:	e7de      	b.n	80060f0 <_printf_float+0x16c>
 8006132:	b913      	cbnz	r3, 800613a <_printf_float+0x1b6>
 8006134:	6822      	ldr	r2, [r4, #0]
 8006136:	07d2      	lsls	r2, r2, #31
 8006138:	d501      	bpl.n	800613e <_printf_float+0x1ba>
 800613a:	3302      	adds	r3, #2
 800613c:	e7f4      	b.n	8006128 <_printf_float+0x1a4>
 800613e:	2301      	movs	r3, #1
 8006140:	e7f2      	b.n	8006128 <_printf_float+0x1a4>
 8006142:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006146:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006148:	4299      	cmp	r1, r3
 800614a:	db05      	blt.n	8006158 <_printf_float+0x1d4>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	6121      	str	r1, [r4, #16]
 8006150:	07d8      	lsls	r0, r3, #31
 8006152:	d5ea      	bpl.n	800612a <_printf_float+0x1a6>
 8006154:	1c4b      	adds	r3, r1, #1
 8006156:	e7e7      	b.n	8006128 <_printf_float+0x1a4>
 8006158:	2900      	cmp	r1, #0
 800615a:	bfd4      	ite	le
 800615c:	f1c1 0202 	rsble	r2, r1, #2
 8006160:	2201      	movgt	r2, #1
 8006162:	4413      	add	r3, r2
 8006164:	e7e0      	b.n	8006128 <_printf_float+0x1a4>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	055a      	lsls	r2, r3, #21
 800616a:	d407      	bmi.n	800617c <_printf_float+0x1f8>
 800616c:	6923      	ldr	r3, [r4, #16]
 800616e:	4642      	mov	r2, r8
 8006170:	4631      	mov	r1, r6
 8006172:	4628      	mov	r0, r5
 8006174:	47b8      	blx	r7
 8006176:	3001      	adds	r0, #1
 8006178:	d12c      	bne.n	80061d4 <_printf_float+0x250>
 800617a:	e764      	b.n	8006046 <_printf_float+0xc2>
 800617c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006180:	f240 80e0 	bls.w	8006344 <_printf_float+0x3c0>
 8006184:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006188:	2200      	movs	r2, #0
 800618a:	2300      	movs	r3, #0
 800618c:	f7fa fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006190:	2800      	cmp	r0, #0
 8006192:	d034      	beq.n	80061fe <_printf_float+0x27a>
 8006194:	4a37      	ldr	r2, [pc, #220]	; (8006274 <_printf_float+0x2f0>)
 8006196:	2301      	movs	r3, #1
 8006198:	4631      	mov	r1, r6
 800619a:	4628      	mov	r0, r5
 800619c:	47b8      	blx	r7
 800619e:	3001      	adds	r0, #1
 80061a0:	f43f af51 	beq.w	8006046 <_printf_float+0xc2>
 80061a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061a8:	429a      	cmp	r2, r3
 80061aa:	db02      	blt.n	80061b2 <_printf_float+0x22e>
 80061ac:	6823      	ldr	r3, [r4, #0]
 80061ae:	07d8      	lsls	r0, r3, #31
 80061b0:	d510      	bpl.n	80061d4 <_printf_float+0x250>
 80061b2:	ee18 3a10 	vmov	r3, s16
 80061b6:	4652      	mov	r2, sl
 80061b8:	4631      	mov	r1, r6
 80061ba:	4628      	mov	r0, r5
 80061bc:	47b8      	blx	r7
 80061be:	3001      	adds	r0, #1
 80061c0:	f43f af41 	beq.w	8006046 <_printf_float+0xc2>
 80061c4:	f04f 0800 	mov.w	r8, #0
 80061c8:	f104 091a 	add.w	r9, r4, #26
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	3b01      	subs	r3, #1
 80061d0:	4543      	cmp	r3, r8
 80061d2:	dc09      	bgt.n	80061e8 <_printf_float+0x264>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	079b      	lsls	r3, r3, #30
 80061d8:	f100 8105 	bmi.w	80063e6 <_printf_float+0x462>
 80061dc:	68e0      	ldr	r0, [r4, #12]
 80061de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061e0:	4298      	cmp	r0, r3
 80061e2:	bfb8      	it	lt
 80061e4:	4618      	movlt	r0, r3
 80061e6:	e730      	b.n	800604a <_printf_float+0xc6>
 80061e8:	2301      	movs	r3, #1
 80061ea:	464a      	mov	r2, r9
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f af27 	beq.w	8006046 <_printf_float+0xc2>
 80061f8:	f108 0801 	add.w	r8, r8, #1
 80061fc:	e7e6      	b.n	80061cc <_printf_float+0x248>
 80061fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006200:	2b00      	cmp	r3, #0
 8006202:	dc39      	bgt.n	8006278 <_printf_float+0x2f4>
 8006204:	4a1b      	ldr	r2, [pc, #108]	; (8006274 <_printf_float+0x2f0>)
 8006206:	2301      	movs	r3, #1
 8006208:	4631      	mov	r1, r6
 800620a:	4628      	mov	r0, r5
 800620c:	47b8      	blx	r7
 800620e:	3001      	adds	r0, #1
 8006210:	f43f af19 	beq.w	8006046 <_printf_float+0xc2>
 8006214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006218:	4313      	orrs	r3, r2
 800621a:	d102      	bne.n	8006222 <_printf_float+0x29e>
 800621c:	6823      	ldr	r3, [r4, #0]
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d5d8      	bpl.n	80061d4 <_printf_float+0x250>
 8006222:	ee18 3a10 	vmov	r3, s16
 8006226:	4652      	mov	r2, sl
 8006228:	4631      	mov	r1, r6
 800622a:	4628      	mov	r0, r5
 800622c:	47b8      	blx	r7
 800622e:	3001      	adds	r0, #1
 8006230:	f43f af09 	beq.w	8006046 <_printf_float+0xc2>
 8006234:	f04f 0900 	mov.w	r9, #0
 8006238:	f104 0a1a 	add.w	sl, r4, #26
 800623c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623e:	425b      	negs	r3, r3
 8006240:	454b      	cmp	r3, r9
 8006242:	dc01      	bgt.n	8006248 <_printf_float+0x2c4>
 8006244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006246:	e792      	b.n	800616e <_printf_float+0x1ea>
 8006248:	2301      	movs	r3, #1
 800624a:	4652      	mov	r2, sl
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f aef7 	beq.w	8006046 <_printf_float+0xc2>
 8006258:	f109 0901 	add.w	r9, r9, #1
 800625c:	e7ee      	b.n	800623c <_printf_float+0x2b8>
 800625e:	bf00      	nop
 8006260:	7fefffff 	.word	0x7fefffff
 8006264:	0800b640 	.word	0x0800b640
 8006268:	0800b644 	.word	0x0800b644
 800626c:	0800b64c 	.word	0x0800b64c
 8006270:	0800b648 	.word	0x0800b648
 8006274:	0800b650 	.word	0x0800b650
 8006278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800627c:	429a      	cmp	r2, r3
 800627e:	bfa8      	it	ge
 8006280:	461a      	movge	r2, r3
 8006282:	2a00      	cmp	r2, #0
 8006284:	4691      	mov	r9, r2
 8006286:	dc37      	bgt.n	80062f8 <_printf_float+0x374>
 8006288:	f04f 0b00 	mov.w	fp, #0
 800628c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006290:	f104 021a 	add.w	r2, r4, #26
 8006294:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006296:	9305      	str	r3, [sp, #20]
 8006298:	eba3 0309 	sub.w	r3, r3, r9
 800629c:	455b      	cmp	r3, fp
 800629e:	dc33      	bgt.n	8006308 <_printf_float+0x384>
 80062a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062a4:	429a      	cmp	r2, r3
 80062a6:	db3b      	blt.n	8006320 <_printf_float+0x39c>
 80062a8:	6823      	ldr	r3, [r4, #0]
 80062aa:	07da      	lsls	r2, r3, #31
 80062ac:	d438      	bmi.n	8006320 <_printf_float+0x39c>
 80062ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062b0:	9a05      	ldr	r2, [sp, #20]
 80062b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80062b4:	1a9a      	subs	r2, r3, r2
 80062b6:	eba3 0901 	sub.w	r9, r3, r1
 80062ba:	4591      	cmp	r9, r2
 80062bc:	bfa8      	it	ge
 80062be:	4691      	movge	r9, r2
 80062c0:	f1b9 0f00 	cmp.w	r9, #0
 80062c4:	dc35      	bgt.n	8006332 <_printf_float+0x3ae>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062ce:	f104 0a1a 	add.w	sl, r4, #26
 80062d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062d6:	1a9b      	subs	r3, r3, r2
 80062d8:	eba3 0309 	sub.w	r3, r3, r9
 80062dc:	4543      	cmp	r3, r8
 80062de:	f77f af79 	ble.w	80061d4 <_printf_float+0x250>
 80062e2:	2301      	movs	r3, #1
 80062e4:	4652      	mov	r2, sl
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	f43f aeaa 	beq.w	8006046 <_printf_float+0xc2>
 80062f2:	f108 0801 	add.w	r8, r8, #1
 80062f6:	e7ec      	b.n	80062d2 <_printf_float+0x34e>
 80062f8:	4613      	mov	r3, r2
 80062fa:	4631      	mov	r1, r6
 80062fc:	4642      	mov	r2, r8
 80062fe:	4628      	mov	r0, r5
 8006300:	47b8      	blx	r7
 8006302:	3001      	adds	r0, #1
 8006304:	d1c0      	bne.n	8006288 <_printf_float+0x304>
 8006306:	e69e      	b.n	8006046 <_printf_float+0xc2>
 8006308:	2301      	movs	r3, #1
 800630a:	4631      	mov	r1, r6
 800630c:	4628      	mov	r0, r5
 800630e:	9205      	str	r2, [sp, #20]
 8006310:	47b8      	blx	r7
 8006312:	3001      	adds	r0, #1
 8006314:	f43f ae97 	beq.w	8006046 <_printf_float+0xc2>
 8006318:	9a05      	ldr	r2, [sp, #20]
 800631a:	f10b 0b01 	add.w	fp, fp, #1
 800631e:	e7b9      	b.n	8006294 <_printf_float+0x310>
 8006320:	ee18 3a10 	vmov	r3, s16
 8006324:	4652      	mov	r2, sl
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d1be      	bne.n	80062ae <_printf_float+0x32a>
 8006330:	e689      	b.n	8006046 <_printf_float+0xc2>
 8006332:	9a05      	ldr	r2, [sp, #20]
 8006334:	464b      	mov	r3, r9
 8006336:	4442      	add	r2, r8
 8006338:	4631      	mov	r1, r6
 800633a:	4628      	mov	r0, r5
 800633c:	47b8      	blx	r7
 800633e:	3001      	adds	r0, #1
 8006340:	d1c1      	bne.n	80062c6 <_printf_float+0x342>
 8006342:	e680      	b.n	8006046 <_printf_float+0xc2>
 8006344:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006346:	2a01      	cmp	r2, #1
 8006348:	dc01      	bgt.n	800634e <_printf_float+0x3ca>
 800634a:	07db      	lsls	r3, r3, #31
 800634c:	d538      	bpl.n	80063c0 <_printf_float+0x43c>
 800634e:	2301      	movs	r3, #1
 8006350:	4642      	mov	r2, r8
 8006352:	4631      	mov	r1, r6
 8006354:	4628      	mov	r0, r5
 8006356:	47b8      	blx	r7
 8006358:	3001      	adds	r0, #1
 800635a:	f43f ae74 	beq.w	8006046 <_printf_float+0xc2>
 800635e:	ee18 3a10 	vmov	r3, s16
 8006362:	4652      	mov	r2, sl
 8006364:	4631      	mov	r1, r6
 8006366:	4628      	mov	r0, r5
 8006368:	47b8      	blx	r7
 800636a:	3001      	adds	r0, #1
 800636c:	f43f ae6b 	beq.w	8006046 <_printf_float+0xc2>
 8006370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006374:	2200      	movs	r2, #0
 8006376:	2300      	movs	r3, #0
 8006378:	f7fa fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800637c:	b9d8      	cbnz	r0, 80063b6 <_printf_float+0x432>
 800637e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006380:	f108 0201 	add.w	r2, r8, #1
 8006384:	3b01      	subs	r3, #1
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	d10e      	bne.n	80063ae <_printf_float+0x42a>
 8006390:	e659      	b.n	8006046 <_printf_float+0xc2>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f ae52 	beq.w	8006046 <_printf_float+0xc2>
 80063a2:	f108 0801 	add.w	r8, r8, #1
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	3b01      	subs	r3, #1
 80063aa:	4543      	cmp	r3, r8
 80063ac:	dcf1      	bgt.n	8006392 <_printf_float+0x40e>
 80063ae:	464b      	mov	r3, r9
 80063b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063b4:	e6dc      	b.n	8006170 <_printf_float+0x1ec>
 80063b6:	f04f 0800 	mov.w	r8, #0
 80063ba:	f104 0a1a 	add.w	sl, r4, #26
 80063be:	e7f2      	b.n	80063a6 <_printf_float+0x422>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4642      	mov	r2, r8
 80063c4:	e7df      	b.n	8006386 <_printf_float+0x402>
 80063c6:	2301      	movs	r3, #1
 80063c8:	464a      	mov	r2, r9
 80063ca:	4631      	mov	r1, r6
 80063cc:	4628      	mov	r0, r5
 80063ce:	47b8      	blx	r7
 80063d0:	3001      	adds	r0, #1
 80063d2:	f43f ae38 	beq.w	8006046 <_printf_float+0xc2>
 80063d6:	f108 0801 	add.w	r8, r8, #1
 80063da:	68e3      	ldr	r3, [r4, #12]
 80063dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80063de:	1a5b      	subs	r3, r3, r1
 80063e0:	4543      	cmp	r3, r8
 80063e2:	dcf0      	bgt.n	80063c6 <_printf_float+0x442>
 80063e4:	e6fa      	b.n	80061dc <_printf_float+0x258>
 80063e6:	f04f 0800 	mov.w	r8, #0
 80063ea:	f104 0919 	add.w	r9, r4, #25
 80063ee:	e7f4      	b.n	80063da <_printf_float+0x456>

080063f0 <_printf_common>:
 80063f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f4:	4616      	mov	r6, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	688a      	ldr	r2, [r1, #8]
 80063fa:	690b      	ldr	r3, [r1, #16]
 80063fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006400:	4293      	cmp	r3, r2
 8006402:	bfb8      	it	lt
 8006404:	4613      	movlt	r3, r2
 8006406:	6033      	str	r3, [r6, #0]
 8006408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800640c:	4607      	mov	r7, r0
 800640e:	460c      	mov	r4, r1
 8006410:	b10a      	cbz	r2, 8006416 <_printf_common+0x26>
 8006412:	3301      	adds	r3, #1
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	0699      	lsls	r1, r3, #26
 800641a:	bf42      	ittt	mi
 800641c:	6833      	ldrmi	r3, [r6, #0]
 800641e:	3302      	addmi	r3, #2
 8006420:	6033      	strmi	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	f015 0506 	ands.w	r5, r5, #6
 8006428:	d106      	bne.n	8006438 <_printf_common+0x48>
 800642a:	f104 0a19 	add.w	sl, r4, #25
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	6832      	ldr	r2, [r6, #0]
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dc26      	bgt.n	8006486 <_printf_common+0x96>
 8006438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800643c:	1e13      	subs	r3, r2, #0
 800643e:	6822      	ldr	r2, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	2301      	movne	r3, #1
 8006444:	0692      	lsls	r2, r2, #26
 8006446:	d42b      	bmi.n	80064a0 <_printf_common+0xb0>
 8006448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d01e      	beq.n	8006494 <_printf_common+0xa4>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	68e5      	ldr	r5, [r4, #12]
 800645a:	6832      	ldr	r2, [r6, #0]
 800645c:	f003 0306 	and.w	r3, r3, #6
 8006460:	2b04      	cmp	r3, #4
 8006462:	bf08      	it	eq
 8006464:	1aad      	subeq	r5, r5, r2
 8006466:	68a3      	ldr	r3, [r4, #8]
 8006468:	6922      	ldr	r2, [r4, #16]
 800646a:	bf0c      	ite	eq
 800646c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006470:	2500      	movne	r5, #0
 8006472:	4293      	cmp	r3, r2
 8006474:	bfc4      	itt	gt
 8006476:	1a9b      	subgt	r3, r3, r2
 8006478:	18ed      	addgt	r5, r5, r3
 800647a:	2600      	movs	r6, #0
 800647c:	341a      	adds	r4, #26
 800647e:	42b5      	cmp	r5, r6
 8006480:	d11a      	bne.n	80064b8 <_printf_common+0xc8>
 8006482:	2000      	movs	r0, #0
 8006484:	e008      	b.n	8006498 <_printf_common+0xa8>
 8006486:	2301      	movs	r3, #1
 8006488:	4652      	mov	r2, sl
 800648a:	4649      	mov	r1, r9
 800648c:	4638      	mov	r0, r7
 800648e:	47c0      	blx	r8
 8006490:	3001      	adds	r0, #1
 8006492:	d103      	bne.n	800649c <_printf_common+0xac>
 8006494:	f04f 30ff 	mov.w	r0, #4294967295
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	3501      	adds	r5, #1
 800649e:	e7c6      	b.n	800642e <_printf_common+0x3e>
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	1c5a      	adds	r2, r3, #1
 80064a4:	2030      	movs	r0, #48	; 0x30
 80064a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064aa:	4422      	add	r2, r4
 80064ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	3302      	adds	r3, #2
 80064b6:	e7c7      	b.n	8006448 <_printf_common+0x58>
 80064b8:	2301      	movs	r3, #1
 80064ba:	4622      	mov	r2, r4
 80064bc:	4649      	mov	r1, r9
 80064be:	4638      	mov	r0, r7
 80064c0:	47c0      	blx	r8
 80064c2:	3001      	adds	r0, #1
 80064c4:	d0e6      	beq.n	8006494 <_printf_common+0xa4>
 80064c6:	3601      	adds	r6, #1
 80064c8:	e7d9      	b.n	800647e <_printf_common+0x8e>
	...

080064cc <_printf_i>:
 80064cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	7e0f      	ldrb	r7, [r1, #24]
 80064d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064d4:	2f78      	cmp	r7, #120	; 0x78
 80064d6:	4691      	mov	r9, r2
 80064d8:	4680      	mov	r8, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	469a      	mov	sl, r3
 80064de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064e2:	d807      	bhi.n	80064f4 <_printf_i+0x28>
 80064e4:	2f62      	cmp	r7, #98	; 0x62
 80064e6:	d80a      	bhi.n	80064fe <_printf_i+0x32>
 80064e8:	2f00      	cmp	r7, #0
 80064ea:	f000 80d8 	beq.w	800669e <_printf_i+0x1d2>
 80064ee:	2f58      	cmp	r7, #88	; 0x58
 80064f0:	f000 80a3 	beq.w	800663a <_printf_i+0x16e>
 80064f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064fc:	e03a      	b.n	8006574 <_printf_i+0xa8>
 80064fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006502:	2b15      	cmp	r3, #21
 8006504:	d8f6      	bhi.n	80064f4 <_printf_i+0x28>
 8006506:	a101      	add	r1, pc, #4	; (adr r1, 800650c <_printf_i+0x40>)
 8006508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800650c:	08006565 	.word	0x08006565
 8006510:	08006579 	.word	0x08006579
 8006514:	080064f5 	.word	0x080064f5
 8006518:	080064f5 	.word	0x080064f5
 800651c:	080064f5 	.word	0x080064f5
 8006520:	080064f5 	.word	0x080064f5
 8006524:	08006579 	.word	0x08006579
 8006528:	080064f5 	.word	0x080064f5
 800652c:	080064f5 	.word	0x080064f5
 8006530:	080064f5 	.word	0x080064f5
 8006534:	080064f5 	.word	0x080064f5
 8006538:	08006685 	.word	0x08006685
 800653c:	080065a9 	.word	0x080065a9
 8006540:	08006667 	.word	0x08006667
 8006544:	080064f5 	.word	0x080064f5
 8006548:	080064f5 	.word	0x080064f5
 800654c:	080066a7 	.word	0x080066a7
 8006550:	080064f5 	.word	0x080064f5
 8006554:	080065a9 	.word	0x080065a9
 8006558:	080064f5 	.word	0x080064f5
 800655c:	080064f5 	.word	0x080064f5
 8006560:	0800666f 	.word	0x0800666f
 8006564:	682b      	ldr	r3, [r5, #0]
 8006566:	1d1a      	adds	r2, r3, #4
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	602a      	str	r2, [r5, #0]
 800656c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006574:	2301      	movs	r3, #1
 8006576:	e0a3      	b.n	80066c0 <_printf_i+0x1f4>
 8006578:	6820      	ldr	r0, [r4, #0]
 800657a:	6829      	ldr	r1, [r5, #0]
 800657c:	0606      	lsls	r6, r0, #24
 800657e:	f101 0304 	add.w	r3, r1, #4
 8006582:	d50a      	bpl.n	800659a <_printf_i+0xce>
 8006584:	680e      	ldr	r6, [r1, #0]
 8006586:	602b      	str	r3, [r5, #0]
 8006588:	2e00      	cmp	r6, #0
 800658a:	da03      	bge.n	8006594 <_printf_i+0xc8>
 800658c:	232d      	movs	r3, #45	; 0x2d
 800658e:	4276      	negs	r6, r6
 8006590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006594:	485e      	ldr	r0, [pc, #376]	; (8006710 <_printf_i+0x244>)
 8006596:	230a      	movs	r3, #10
 8006598:	e019      	b.n	80065ce <_printf_i+0x102>
 800659a:	680e      	ldr	r6, [r1, #0]
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80065a2:	bf18      	it	ne
 80065a4:	b236      	sxthne	r6, r6
 80065a6:	e7ef      	b.n	8006588 <_printf_i+0xbc>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	6820      	ldr	r0, [r4, #0]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	6029      	str	r1, [r5, #0]
 80065b0:	0601      	lsls	r1, r0, #24
 80065b2:	d501      	bpl.n	80065b8 <_printf_i+0xec>
 80065b4:	681e      	ldr	r6, [r3, #0]
 80065b6:	e002      	b.n	80065be <_printf_i+0xf2>
 80065b8:	0646      	lsls	r6, r0, #25
 80065ba:	d5fb      	bpl.n	80065b4 <_printf_i+0xe8>
 80065bc:	881e      	ldrh	r6, [r3, #0]
 80065be:	4854      	ldr	r0, [pc, #336]	; (8006710 <_printf_i+0x244>)
 80065c0:	2f6f      	cmp	r7, #111	; 0x6f
 80065c2:	bf0c      	ite	eq
 80065c4:	2308      	moveq	r3, #8
 80065c6:	230a      	movne	r3, #10
 80065c8:	2100      	movs	r1, #0
 80065ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065ce:	6865      	ldr	r5, [r4, #4]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	2d00      	cmp	r5, #0
 80065d4:	bfa2      	ittt	ge
 80065d6:	6821      	ldrge	r1, [r4, #0]
 80065d8:	f021 0104 	bicge.w	r1, r1, #4
 80065dc:	6021      	strge	r1, [r4, #0]
 80065de:	b90e      	cbnz	r6, 80065e4 <_printf_i+0x118>
 80065e0:	2d00      	cmp	r5, #0
 80065e2:	d04d      	beq.n	8006680 <_printf_i+0x1b4>
 80065e4:	4615      	mov	r5, r2
 80065e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80065ea:	fb03 6711 	mls	r7, r3, r1, r6
 80065ee:	5dc7      	ldrb	r7, [r0, r7]
 80065f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065f4:	4637      	mov	r7, r6
 80065f6:	42bb      	cmp	r3, r7
 80065f8:	460e      	mov	r6, r1
 80065fa:	d9f4      	bls.n	80065e6 <_printf_i+0x11a>
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d10b      	bne.n	8006618 <_printf_i+0x14c>
 8006600:	6823      	ldr	r3, [r4, #0]
 8006602:	07de      	lsls	r6, r3, #31
 8006604:	d508      	bpl.n	8006618 <_printf_i+0x14c>
 8006606:	6923      	ldr	r3, [r4, #16]
 8006608:	6861      	ldr	r1, [r4, #4]
 800660a:	4299      	cmp	r1, r3
 800660c:	bfde      	ittt	le
 800660e:	2330      	movle	r3, #48	; 0x30
 8006610:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006614:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006618:	1b52      	subs	r2, r2, r5
 800661a:	6122      	str	r2, [r4, #16]
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	464b      	mov	r3, r9
 8006622:	aa03      	add	r2, sp, #12
 8006624:	4621      	mov	r1, r4
 8006626:	4640      	mov	r0, r8
 8006628:	f7ff fee2 	bl	80063f0 <_printf_common>
 800662c:	3001      	adds	r0, #1
 800662e:	d14c      	bne.n	80066ca <_printf_i+0x1fe>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	b004      	add	sp, #16
 8006636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663a:	4835      	ldr	r0, [pc, #212]	; (8006710 <_printf_i+0x244>)
 800663c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006640:	6829      	ldr	r1, [r5, #0]
 8006642:	6823      	ldr	r3, [r4, #0]
 8006644:	f851 6b04 	ldr.w	r6, [r1], #4
 8006648:	6029      	str	r1, [r5, #0]
 800664a:	061d      	lsls	r5, r3, #24
 800664c:	d514      	bpl.n	8006678 <_printf_i+0x1ac>
 800664e:	07df      	lsls	r7, r3, #31
 8006650:	bf44      	itt	mi
 8006652:	f043 0320 	orrmi.w	r3, r3, #32
 8006656:	6023      	strmi	r3, [r4, #0]
 8006658:	b91e      	cbnz	r6, 8006662 <_printf_i+0x196>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	f023 0320 	bic.w	r3, r3, #32
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	2310      	movs	r3, #16
 8006664:	e7b0      	b.n	80065c8 <_printf_i+0xfc>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f043 0320 	orr.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2378      	movs	r3, #120	; 0x78
 8006670:	4828      	ldr	r0, [pc, #160]	; (8006714 <_printf_i+0x248>)
 8006672:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006676:	e7e3      	b.n	8006640 <_printf_i+0x174>
 8006678:	0659      	lsls	r1, r3, #25
 800667a:	bf48      	it	mi
 800667c:	b2b6      	uxthmi	r6, r6
 800667e:	e7e6      	b.n	800664e <_printf_i+0x182>
 8006680:	4615      	mov	r5, r2
 8006682:	e7bb      	b.n	80065fc <_printf_i+0x130>
 8006684:	682b      	ldr	r3, [r5, #0]
 8006686:	6826      	ldr	r6, [r4, #0]
 8006688:	6961      	ldr	r1, [r4, #20]
 800668a:	1d18      	adds	r0, r3, #4
 800668c:	6028      	str	r0, [r5, #0]
 800668e:	0635      	lsls	r5, r6, #24
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	d501      	bpl.n	8006698 <_printf_i+0x1cc>
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	e002      	b.n	800669e <_printf_i+0x1d2>
 8006698:	0670      	lsls	r0, r6, #25
 800669a:	d5fb      	bpl.n	8006694 <_printf_i+0x1c8>
 800669c:	8019      	strh	r1, [r3, #0]
 800669e:	2300      	movs	r3, #0
 80066a0:	6123      	str	r3, [r4, #16]
 80066a2:	4615      	mov	r5, r2
 80066a4:	e7ba      	b.n	800661c <_printf_i+0x150>
 80066a6:	682b      	ldr	r3, [r5, #0]
 80066a8:	1d1a      	adds	r2, r3, #4
 80066aa:	602a      	str	r2, [r5, #0]
 80066ac:	681d      	ldr	r5, [r3, #0]
 80066ae:	6862      	ldr	r2, [r4, #4]
 80066b0:	2100      	movs	r1, #0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7f9 fd94 	bl	80001e0 <memchr>
 80066b8:	b108      	cbz	r0, 80066be <_printf_i+0x1f2>
 80066ba:	1b40      	subs	r0, r0, r5
 80066bc:	6060      	str	r0, [r4, #4]
 80066be:	6863      	ldr	r3, [r4, #4]
 80066c0:	6123      	str	r3, [r4, #16]
 80066c2:	2300      	movs	r3, #0
 80066c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066c8:	e7a8      	b.n	800661c <_printf_i+0x150>
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4649      	mov	r1, r9
 80066d0:	4640      	mov	r0, r8
 80066d2:	47d0      	blx	sl
 80066d4:	3001      	adds	r0, #1
 80066d6:	d0ab      	beq.n	8006630 <_printf_i+0x164>
 80066d8:	6823      	ldr	r3, [r4, #0]
 80066da:	079b      	lsls	r3, r3, #30
 80066dc:	d413      	bmi.n	8006706 <_printf_i+0x23a>
 80066de:	68e0      	ldr	r0, [r4, #12]
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	4298      	cmp	r0, r3
 80066e4:	bfb8      	it	lt
 80066e6:	4618      	movlt	r0, r3
 80066e8:	e7a4      	b.n	8006634 <_printf_i+0x168>
 80066ea:	2301      	movs	r3, #1
 80066ec:	4632      	mov	r2, r6
 80066ee:	4649      	mov	r1, r9
 80066f0:	4640      	mov	r0, r8
 80066f2:	47d0      	blx	sl
 80066f4:	3001      	adds	r0, #1
 80066f6:	d09b      	beq.n	8006630 <_printf_i+0x164>
 80066f8:	3501      	adds	r5, #1
 80066fa:	68e3      	ldr	r3, [r4, #12]
 80066fc:	9903      	ldr	r1, [sp, #12]
 80066fe:	1a5b      	subs	r3, r3, r1
 8006700:	42ab      	cmp	r3, r5
 8006702:	dcf2      	bgt.n	80066ea <_printf_i+0x21e>
 8006704:	e7eb      	b.n	80066de <_printf_i+0x212>
 8006706:	2500      	movs	r5, #0
 8006708:	f104 0619 	add.w	r6, r4, #25
 800670c:	e7f5      	b.n	80066fa <_printf_i+0x22e>
 800670e:	bf00      	nop
 8006710:	0800b652 	.word	0x0800b652
 8006714:	0800b663 	.word	0x0800b663

08006718 <_scanf_float>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	b087      	sub	sp, #28
 800671e:	4617      	mov	r7, r2
 8006720:	9303      	str	r3, [sp, #12]
 8006722:	688b      	ldr	r3, [r1, #8]
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800672a:	bf83      	ittte	hi
 800672c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006730:	195b      	addhi	r3, r3, r5
 8006732:	9302      	strhi	r3, [sp, #8]
 8006734:	2300      	movls	r3, #0
 8006736:	bf86      	itte	hi
 8006738:	f240 135d 	movwhi	r3, #349	; 0x15d
 800673c:	608b      	strhi	r3, [r1, #8]
 800673e:	9302      	strls	r3, [sp, #8]
 8006740:	680b      	ldr	r3, [r1, #0]
 8006742:	468b      	mov	fp, r1
 8006744:	2500      	movs	r5, #0
 8006746:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800674a:	f84b 3b1c 	str.w	r3, [fp], #28
 800674e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006752:	4680      	mov	r8, r0
 8006754:	460c      	mov	r4, r1
 8006756:	465e      	mov	r6, fp
 8006758:	46aa      	mov	sl, r5
 800675a:	46a9      	mov	r9, r5
 800675c:	9501      	str	r5, [sp, #4]
 800675e:	68a2      	ldr	r2, [r4, #8]
 8006760:	b152      	cbz	r2, 8006778 <_scanf_float+0x60>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b4e      	cmp	r3, #78	; 0x4e
 8006768:	d864      	bhi.n	8006834 <_scanf_float+0x11c>
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d83c      	bhi.n	80067e8 <_scanf_float+0xd0>
 800676e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006772:	b2c8      	uxtb	r0, r1
 8006774:	280e      	cmp	r0, #14
 8006776:	d93a      	bls.n	80067ee <_scanf_float+0xd6>
 8006778:	f1b9 0f00 	cmp.w	r9, #0
 800677c:	d003      	beq.n	8006786 <_scanf_float+0x6e>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800678a:	f1ba 0f01 	cmp.w	sl, #1
 800678e:	f200 8113 	bhi.w	80069b8 <_scanf_float+0x2a0>
 8006792:	455e      	cmp	r6, fp
 8006794:	f200 8105 	bhi.w	80069a2 <_scanf_float+0x28a>
 8006798:	2501      	movs	r5, #1
 800679a:	4628      	mov	r0, r5
 800679c:	b007      	add	sp, #28
 800679e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80067a6:	2a0d      	cmp	r2, #13
 80067a8:	d8e6      	bhi.n	8006778 <_scanf_float+0x60>
 80067aa:	a101      	add	r1, pc, #4	; (adr r1, 80067b0 <_scanf_float+0x98>)
 80067ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80067b0:	080068ef 	.word	0x080068ef
 80067b4:	08006779 	.word	0x08006779
 80067b8:	08006779 	.word	0x08006779
 80067bc:	08006779 	.word	0x08006779
 80067c0:	0800694f 	.word	0x0800694f
 80067c4:	08006927 	.word	0x08006927
 80067c8:	08006779 	.word	0x08006779
 80067cc:	08006779 	.word	0x08006779
 80067d0:	080068fd 	.word	0x080068fd
 80067d4:	08006779 	.word	0x08006779
 80067d8:	08006779 	.word	0x08006779
 80067dc:	08006779 	.word	0x08006779
 80067e0:	08006779 	.word	0x08006779
 80067e4:	080068b5 	.word	0x080068b5
 80067e8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80067ec:	e7db      	b.n	80067a6 <_scanf_float+0x8e>
 80067ee:	290e      	cmp	r1, #14
 80067f0:	d8c2      	bhi.n	8006778 <_scanf_float+0x60>
 80067f2:	a001      	add	r0, pc, #4	; (adr r0, 80067f8 <_scanf_float+0xe0>)
 80067f4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067f8:	080068a7 	.word	0x080068a7
 80067fc:	08006779 	.word	0x08006779
 8006800:	080068a7 	.word	0x080068a7
 8006804:	0800693b 	.word	0x0800693b
 8006808:	08006779 	.word	0x08006779
 800680c:	08006855 	.word	0x08006855
 8006810:	08006891 	.word	0x08006891
 8006814:	08006891 	.word	0x08006891
 8006818:	08006891 	.word	0x08006891
 800681c:	08006891 	.word	0x08006891
 8006820:	08006891 	.word	0x08006891
 8006824:	08006891 	.word	0x08006891
 8006828:	08006891 	.word	0x08006891
 800682c:	08006891 	.word	0x08006891
 8006830:	08006891 	.word	0x08006891
 8006834:	2b6e      	cmp	r3, #110	; 0x6e
 8006836:	d809      	bhi.n	800684c <_scanf_float+0x134>
 8006838:	2b60      	cmp	r3, #96	; 0x60
 800683a:	d8b2      	bhi.n	80067a2 <_scanf_float+0x8a>
 800683c:	2b54      	cmp	r3, #84	; 0x54
 800683e:	d077      	beq.n	8006930 <_scanf_float+0x218>
 8006840:	2b59      	cmp	r3, #89	; 0x59
 8006842:	d199      	bne.n	8006778 <_scanf_float+0x60>
 8006844:	2d07      	cmp	r5, #7
 8006846:	d197      	bne.n	8006778 <_scanf_float+0x60>
 8006848:	2508      	movs	r5, #8
 800684a:	e029      	b.n	80068a0 <_scanf_float+0x188>
 800684c:	2b74      	cmp	r3, #116	; 0x74
 800684e:	d06f      	beq.n	8006930 <_scanf_float+0x218>
 8006850:	2b79      	cmp	r3, #121	; 0x79
 8006852:	e7f6      	b.n	8006842 <_scanf_float+0x12a>
 8006854:	6821      	ldr	r1, [r4, #0]
 8006856:	05c8      	lsls	r0, r1, #23
 8006858:	d51a      	bpl.n	8006890 <_scanf_float+0x178>
 800685a:	9b02      	ldr	r3, [sp, #8]
 800685c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006860:	6021      	str	r1, [r4, #0]
 8006862:	f109 0901 	add.w	r9, r9, #1
 8006866:	b11b      	cbz	r3, 8006870 <_scanf_float+0x158>
 8006868:	3b01      	subs	r3, #1
 800686a:	3201      	adds	r2, #1
 800686c:	9302      	str	r3, [sp, #8]
 800686e:	60a2      	str	r2, [r4, #8]
 8006870:	68a3      	ldr	r3, [r4, #8]
 8006872:	3b01      	subs	r3, #1
 8006874:	60a3      	str	r3, [r4, #8]
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	3301      	adds	r3, #1
 800687a:	6123      	str	r3, [r4, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3b01      	subs	r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	607b      	str	r3, [r7, #4]
 8006884:	f340 8084 	ble.w	8006990 <_scanf_float+0x278>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	e766      	b.n	800675e <_scanf_float+0x46>
 8006890:	eb1a 0f05 	cmn.w	sl, r5
 8006894:	f47f af70 	bne.w	8006778 <_scanf_float+0x60>
 8006898:	6822      	ldr	r2, [r4, #0]
 800689a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800689e:	6022      	str	r2, [r4, #0]
 80068a0:	f806 3b01 	strb.w	r3, [r6], #1
 80068a4:	e7e4      	b.n	8006870 <_scanf_float+0x158>
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	0610      	lsls	r0, r2, #24
 80068aa:	f57f af65 	bpl.w	8006778 <_scanf_float+0x60>
 80068ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068b2:	e7f4      	b.n	800689e <_scanf_float+0x186>
 80068b4:	f1ba 0f00 	cmp.w	sl, #0
 80068b8:	d10e      	bne.n	80068d8 <_scanf_float+0x1c0>
 80068ba:	f1b9 0f00 	cmp.w	r9, #0
 80068be:	d10e      	bne.n	80068de <_scanf_float+0x1c6>
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80068c6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80068ca:	d108      	bne.n	80068de <_scanf_float+0x1c6>
 80068cc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	f04f 0a01 	mov.w	sl, #1
 80068d6:	e7e3      	b.n	80068a0 <_scanf_float+0x188>
 80068d8:	f1ba 0f02 	cmp.w	sl, #2
 80068dc:	d055      	beq.n	800698a <_scanf_float+0x272>
 80068de:	2d01      	cmp	r5, #1
 80068e0:	d002      	beq.n	80068e8 <_scanf_float+0x1d0>
 80068e2:	2d04      	cmp	r5, #4
 80068e4:	f47f af48 	bne.w	8006778 <_scanf_float+0x60>
 80068e8:	3501      	adds	r5, #1
 80068ea:	b2ed      	uxtb	r5, r5
 80068ec:	e7d8      	b.n	80068a0 <_scanf_float+0x188>
 80068ee:	f1ba 0f01 	cmp.w	sl, #1
 80068f2:	f47f af41 	bne.w	8006778 <_scanf_float+0x60>
 80068f6:	f04f 0a02 	mov.w	sl, #2
 80068fa:	e7d1      	b.n	80068a0 <_scanf_float+0x188>
 80068fc:	b97d      	cbnz	r5, 800691e <_scanf_float+0x206>
 80068fe:	f1b9 0f00 	cmp.w	r9, #0
 8006902:	f47f af3c 	bne.w	800677e <_scanf_float+0x66>
 8006906:	6822      	ldr	r2, [r4, #0]
 8006908:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800690c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006910:	f47f af39 	bne.w	8006786 <_scanf_float+0x6e>
 8006914:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006918:	6022      	str	r2, [r4, #0]
 800691a:	2501      	movs	r5, #1
 800691c:	e7c0      	b.n	80068a0 <_scanf_float+0x188>
 800691e:	2d03      	cmp	r5, #3
 8006920:	d0e2      	beq.n	80068e8 <_scanf_float+0x1d0>
 8006922:	2d05      	cmp	r5, #5
 8006924:	e7de      	b.n	80068e4 <_scanf_float+0x1cc>
 8006926:	2d02      	cmp	r5, #2
 8006928:	f47f af26 	bne.w	8006778 <_scanf_float+0x60>
 800692c:	2503      	movs	r5, #3
 800692e:	e7b7      	b.n	80068a0 <_scanf_float+0x188>
 8006930:	2d06      	cmp	r5, #6
 8006932:	f47f af21 	bne.w	8006778 <_scanf_float+0x60>
 8006936:	2507      	movs	r5, #7
 8006938:	e7b2      	b.n	80068a0 <_scanf_float+0x188>
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	0591      	lsls	r1, r2, #22
 800693e:	f57f af1b 	bpl.w	8006778 <_scanf_float+0x60>
 8006942:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006946:	6022      	str	r2, [r4, #0]
 8006948:	f8cd 9004 	str.w	r9, [sp, #4]
 800694c:	e7a8      	b.n	80068a0 <_scanf_float+0x188>
 800694e:	6822      	ldr	r2, [r4, #0]
 8006950:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006954:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006958:	d006      	beq.n	8006968 <_scanf_float+0x250>
 800695a:	0550      	lsls	r0, r2, #21
 800695c:	f57f af0c 	bpl.w	8006778 <_scanf_float+0x60>
 8006960:	f1b9 0f00 	cmp.w	r9, #0
 8006964:	f43f af0f 	beq.w	8006786 <_scanf_float+0x6e>
 8006968:	0591      	lsls	r1, r2, #22
 800696a:	bf58      	it	pl
 800696c:	9901      	ldrpl	r1, [sp, #4]
 800696e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006972:	bf58      	it	pl
 8006974:	eba9 0101 	subpl.w	r1, r9, r1
 8006978:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800697c:	bf58      	it	pl
 800697e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006982:	6022      	str	r2, [r4, #0]
 8006984:	f04f 0900 	mov.w	r9, #0
 8006988:	e78a      	b.n	80068a0 <_scanf_float+0x188>
 800698a:	f04f 0a03 	mov.w	sl, #3
 800698e:	e787      	b.n	80068a0 <_scanf_float+0x188>
 8006990:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006994:	4639      	mov	r1, r7
 8006996:	4640      	mov	r0, r8
 8006998:	4798      	blx	r3
 800699a:	2800      	cmp	r0, #0
 800699c:	f43f aedf 	beq.w	800675e <_scanf_float+0x46>
 80069a0:	e6ea      	b.n	8006778 <_scanf_float+0x60>
 80069a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069aa:	463a      	mov	r2, r7
 80069ac:	4640      	mov	r0, r8
 80069ae:	4798      	blx	r3
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	6123      	str	r3, [r4, #16]
 80069b6:	e6ec      	b.n	8006792 <_scanf_float+0x7a>
 80069b8:	1e6b      	subs	r3, r5, #1
 80069ba:	2b06      	cmp	r3, #6
 80069bc:	d825      	bhi.n	8006a0a <_scanf_float+0x2f2>
 80069be:	2d02      	cmp	r5, #2
 80069c0:	d836      	bhi.n	8006a30 <_scanf_float+0x318>
 80069c2:	455e      	cmp	r6, fp
 80069c4:	f67f aee8 	bls.w	8006798 <_scanf_float+0x80>
 80069c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069cc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069d0:	463a      	mov	r2, r7
 80069d2:	4640      	mov	r0, r8
 80069d4:	4798      	blx	r3
 80069d6:	6923      	ldr	r3, [r4, #16]
 80069d8:	3b01      	subs	r3, #1
 80069da:	6123      	str	r3, [r4, #16]
 80069dc:	e7f1      	b.n	80069c2 <_scanf_float+0x2aa>
 80069de:	9802      	ldr	r0, [sp, #8]
 80069e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80069e4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80069e8:	9002      	str	r0, [sp, #8]
 80069ea:	463a      	mov	r2, r7
 80069ec:	4640      	mov	r0, r8
 80069ee:	4798      	blx	r3
 80069f0:	6923      	ldr	r3, [r4, #16]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069fa:	fa5f fa8a 	uxtb.w	sl, sl
 80069fe:	f1ba 0f02 	cmp.w	sl, #2
 8006a02:	d1ec      	bne.n	80069de <_scanf_float+0x2c6>
 8006a04:	3d03      	subs	r5, #3
 8006a06:	b2ed      	uxtb	r5, r5
 8006a08:	1b76      	subs	r6, r6, r5
 8006a0a:	6823      	ldr	r3, [r4, #0]
 8006a0c:	05da      	lsls	r2, r3, #23
 8006a0e:	d52f      	bpl.n	8006a70 <_scanf_float+0x358>
 8006a10:	055b      	lsls	r3, r3, #21
 8006a12:	d510      	bpl.n	8006a36 <_scanf_float+0x31e>
 8006a14:	455e      	cmp	r6, fp
 8006a16:	f67f aebf 	bls.w	8006798 <_scanf_float+0x80>
 8006a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006a22:	463a      	mov	r2, r7
 8006a24:	4640      	mov	r0, r8
 8006a26:	4798      	blx	r3
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	e7f1      	b.n	8006a14 <_scanf_float+0x2fc>
 8006a30:	46aa      	mov	sl, r5
 8006a32:	9602      	str	r6, [sp, #8]
 8006a34:	e7df      	b.n	80069f6 <_scanf_float+0x2de>
 8006a36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006a3a:	6923      	ldr	r3, [r4, #16]
 8006a3c:	2965      	cmp	r1, #101	; 0x65
 8006a3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a42:	f106 35ff 	add.w	r5, r6, #4294967295
 8006a46:	6123      	str	r3, [r4, #16]
 8006a48:	d00c      	beq.n	8006a64 <_scanf_float+0x34c>
 8006a4a:	2945      	cmp	r1, #69	; 0x45
 8006a4c:	d00a      	beq.n	8006a64 <_scanf_float+0x34c>
 8006a4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a52:	463a      	mov	r2, r7
 8006a54:	4640      	mov	r0, r8
 8006a56:	4798      	blx	r3
 8006a58:	6923      	ldr	r3, [r4, #16]
 8006a5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	1eb5      	subs	r5, r6, #2
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006a68:	463a      	mov	r2, r7
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4798      	blx	r3
 8006a6e:	462e      	mov	r6, r5
 8006a70:	6825      	ldr	r5, [r4, #0]
 8006a72:	f015 0510 	ands.w	r5, r5, #16
 8006a76:	d159      	bne.n	8006b2c <_scanf_float+0x414>
 8006a78:	7035      	strb	r5, [r6, #0]
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a84:	d11b      	bne.n	8006abe <_scanf_float+0x3a6>
 8006a86:	9b01      	ldr	r3, [sp, #4]
 8006a88:	454b      	cmp	r3, r9
 8006a8a:	eba3 0209 	sub.w	r2, r3, r9
 8006a8e:	d123      	bne.n	8006ad8 <_scanf_float+0x3c0>
 8006a90:	2200      	movs	r2, #0
 8006a92:	4659      	mov	r1, fp
 8006a94:	4640      	mov	r0, r8
 8006a96:	f000 ff25 	bl	80078e4 <_strtod_r>
 8006a9a:	6822      	ldr	r2, [r4, #0]
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	f012 0f02 	tst.w	r2, #2
 8006aa2:	ec57 6b10 	vmov	r6, r7, d0
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	d021      	beq.n	8006aee <_scanf_float+0x3d6>
 8006aaa:	9903      	ldr	r1, [sp, #12]
 8006aac:	1d1a      	adds	r2, r3, #4
 8006aae:	600a      	str	r2, [r1, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	e9c3 6700 	strd	r6, r7, [r3]
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	60e3      	str	r3, [r4, #12]
 8006abc:	e66d      	b.n	800679a <_scanf_float+0x82>
 8006abe:	9b04      	ldr	r3, [sp, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d0e5      	beq.n	8006a90 <_scanf_float+0x378>
 8006ac4:	9905      	ldr	r1, [sp, #20]
 8006ac6:	230a      	movs	r3, #10
 8006ac8:	462a      	mov	r2, r5
 8006aca:	3101      	adds	r1, #1
 8006acc:	4640      	mov	r0, r8
 8006ace:	f000 ff91 	bl	80079f4 <_strtol_r>
 8006ad2:	9b04      	ldr	r3, [sp, #16]
 8006ad4:	9e05      	ldr	r6, [sp, #20]
 8006ad6:	1ac2      	subs	r2, r0, r3
 8006ad8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006adc:	429e      	cmp	r6, r3
 8006ade:	bf28      	it	cs
 8006ae0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006ae4:	4912      	ldr	r1, [pc, #72]	; (8006b30 <_scanf_float+0x418>)
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 f8ba 	bl	8006c60 <siprintf>
 8006aec:	e7d0      	b.n	8006a90 <_scanf_float+0x378>
 8006aee:	9903      	ldr	r1, [sp, #12]
 8006af0:	f012 0f04 	tst.w	r2, #4
 8006af4:	f103 0204 	add.w	r2, r3, #4
 8006af8:	600a      	str	r2, [r1, #0]
 8006afa:	d1d9      	bne.n	8006ab0 <_scanf_float+0x398>
 8006afc:	f8d3 8000 	ldr.w	r8, [r3]
 8006b00:	ee10 2a10 	vmov	r2, s0
 8006b04:	ee10 0a10 	vmov	r0, s0
 8006b08:	463b      	mov	r3, r7
 8006b0a:	4639      	mov	r1, r7
 8006b0c:	f7fa f80e 	bl	8000b2c <__aeabi_dcmpun>
 8006b10:	b128      	cbz	r0, 8006b1e <_scanf_float+0x406>
 8006b12:	4808      	ldr	r0, [pc, #32]	; (8006b34 <_scanf_float+0x41c>)
 8006b14:	f000 f89e 	bl	8006c54 <nanf>
 8006b18:	ed88 0a00 	vstr	s0, [r8]
 8006b1c:	e7cb      	b.n	8006ab6 <_scanf_float+0x39e>
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7fa f861 	bl	8000be8 <__aeabi_d2f>
 8006b26:	f8c8 0000 	str.w	r0, [r8]
 8006b2a:	e7c4      	b.n	8006ab6 <_scanf_float+0x39e>
 8006b2c:	2500      	movs	r5, #0
 8006b2e:	e634      	b.n	800679a <_scanf_float+0x82>
 8006b30:	0800b674 	.word	0x0800b674
 8006b34:	0800bae8 	.word	0x0800bae8

08006b38 <iprintf>:
 8006b38:	b40f      	push	{r0, r1, r2, r3}
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <iprintf+0x2c>)
 8006b3c:	b513      	push	{r0, r1, r4, lr}
 8006b3e:	681c      	ldr	r4, [r3, #0]
 8006b40:	b124      	cbz	r4, 8006b4c <iprintf+0x14>
 8006b42:	69a3      	ldr	r3, [r4, #24]
 8006b44:	b913      	cbnz	r3, 8006b4c <iprintf+0x14>
 8006b46:	4620      	mov	r0, r4
 8006b48:	f001 ffb6 	bl	8008ab8 <__sinit>
 8006b4c:	ab05      	add	r3, sp, #20
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	68a1      	ldr	r1, [r4, #8]
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	4620      	mov	r0, r4
 8006b56:	f003 fb8d 	bl	800a274 <_vfiprintf_r>
 8006b5a:	b002      	add	sp, #8
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	b004      	add	sp, #16
 8006b62:	4770      	bx	lr
 8006b64:	20000294 	.word	0x20000294

08006b68 <_puts_r>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	460e      	mov	r6, r1
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	b118      	cbz	r0, 8006b78 <_puts_r+0x10>
 8006b70:	6983      	ldr	r3, [r0, #24]
 8006b72:	b90b      	cbnz	r3, 8006b78 <_puts_r+0x10>
 8006b74:	f001 ffa0 	bl	8008ab8 <__sinit>
 8006b78:	69ab      	ldr	r3, [r5, #24]
 8006b7a:	68ac      	ldr	r4, [r5, #8]
 8006b7c:	b913      	cbnz	r3, 8006b84 <_puts_r+0x1c>
 8006b7e:	4628      	mov	r0, r5
 8006b80:	f001 ff9a 	bl	8008ab8 <__sinit>
 8006b84:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <_puts_r+0xd0>)
 8006b86:	429c      	cmp	r4, r3
 8006b88:	d120      	bne.n	8006bcc <_puts_r+0x64>
 8006b8a:	686c      	ldr	r4, [r5, #4]
 8006b8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b8e:	07db      	lsls	r3, r3, #31
 8006b90:	d405      	bmi.n	8006b9e <_puts_r+0x36>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	0598      	lsls	r0, r3, #22
 8006b96:	d402      	bmi.n	8006b9e <_puts_r+0x36>
 8006b98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b9a:	f002 fb9e 	bl	80092da <__retarget_lock_acquire_recursive>
 8006b9e:	89a3      	ldrh	r3, [r4, #12]
 8006ba0:	0719      	lsls	r1, r3, #28
 8006ba2:	d51d      	bpl.n	8006be0 <_puts_r+0x78>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	b1db      	cbz	r3, 8006be0 <_puts_r+0x78>
 8006ba8:	3e01      	subs	r6, #1
 8006baa:	68a3      	ldr	r3, [r4, #8]
 8006bac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	60a3      	str	r3, [r4, #8]
 8006bb4:	bb39      	cbnz	r1, 8006c06 <_puts_r+0x9e>
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	da38      	bge.n	8006c2c <_puts_r+0xc4>
 8006bba:	4622      	mov	r2, r4
 8006bbc:	210a      	movs	r1, #10
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 ff24 	bl	8007a0c <__swbuf_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d011      	beq.n	8006bec <_puts_r+0x84>
 8006bc8:	250a      	movs	r5, #10
 8006bca:	e011      	b.n	8006bf0 <_puts_r+0x88>
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <_puts_r+0xd4>)
 8006bce:	429c      	cmp	r4, r3
 8006bd0:	d101      	bne.n	8006bd6 <_puts_r+0x6e>
 8006bd2:	68ac      	ldr	r4, [r5, #8]
 8006bd4:	e7da      	b.n	8006b8c <_puts_r+0x24>
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <_puts_r+0xd8>)
 8006bd8:	429c      	cmp	r4, r3
 8006bda:	bf08      	it	eq
 8006bdc:	68ec      	ldreq	r4, [r5, #12]
 8006bde:	e7d5      	b.n	8006b8c <_puts_r+0x24>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 ff64 	bl	8007ab0 <__swsetup_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0dd      	beq.n	8006ba8 <_puts_r+0x40>
 8006bec:	f04f 35ff 	mov.w	r5, #4294967295
 8006bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf2:	07da      	lsls	r2, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_puts_r+0x9a>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	059b      	lsls	r3, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_puts_r+0x9a>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfe:	f002 fb6d 	bl	80092dc <__retarget_lock_release_recursive>
 8006c02:	4628      	mov	r0, r5
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da04      	bge.n	8006c14 <_puts_r+0xac>
 8006c0a:	69a2      	ldr	r2, [r4, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	dc06      	bgt.n	8006c1e <_puts_r+0xb6>
 8006c10:	290a      	cmp	r1, #10
 8006c12:	d004      	beq.n	8006c1e <_puts_r+0xb6>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	7019      	strb	r1, [r3, #0]
 8006c1c:	e7c5      	b.n	8006baa <_puts_r+0x42>
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 fef3 	bl	8007a0c <__swbuf_r>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d1bf      	bne.n	8006baa <_puts_r+0x42>
 8006c2a:	e7df      	b.n	8006bec <_puts_r+0x84>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	250a      	movs	r5, #10
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	701d      	strb	r5, [r3, #0]
 8006c36:	e7db      	b.n	8006bf0 <_puts_r+0x88>
 8006c38:	0800b884 	.word	0x0800b884
 8006c3c:	0800b8a4 	.word	0x0800b8a4
 8006c40:	0800b864 	.word	0x0800b864

08006c44 <puts>:
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <puts+0xc>)
 8006c46:	4601      	mov	r1, r0
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	f7ff bf8d 	b.w	8006b68 <_puts_r>
 8006c4e:	bf00      	nop
 8006c50:	20000294 	.word	0x20000294

08006c54 <nanf>:
 8006c54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006c5c <nanf+0x8>
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	7fc00000 	.word	0x7fc00000

08006c60 <siprintf>:
 8006c60:	b40e      	push	{r1, r2, r3}
 8006c62:	b500      	push	{lr}
 8006c64:	b09c      	sub	sp, #112	; 0x70
 8006c66:	ab1d      	add	r3, sp, #116	; 0x74
 8006c68:	9002      	str	r0, [sp, #8]
 8006c6a:	9006      	str	r0, [sp, #24]
 8006c6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c70:	4809      	ldr	r0, [pc, #36]	; (8006c98 <siprintf+0x38>)
 8006c72:	9107      	str	r1, [sp, #28]
 8006c74:	9104      	str	r1, [sp, #16]
 8006c76:	4909      	ldr	r1, [pc, #36]	; (8006c9c <siprintf+0x3c>)
 8006c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	a902      	add	r1, sp, #8
 8006c84:	f003 f9cc 	bl	800a020 <_svfiprintf_r>
 8006c88:	9b02      	ldr	r3, [sp, #8]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	b01c      	add	sp, #112	; 0x70
 8006c90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c94:	b003      	add	sp, #12
 8006c96:	4770      	bx	lr
 8006c98:	20000294 	.word	0x20000294
 8006c9c:	ffff0208 	.word	0xffff0208

08006ca0 <sulp>:
 8006ca0:	b570      	push	{r4, r5, r6, lr}
 8006ca2:	4604      	mov	r4, r0
 8006ca4:	460d      	mov	r5, r1
 8006ca6:	ec45 4b10 	vmov	d0, r4, r5
 8006caa:	4616      	mov	r6, r2
 8006cac:	f002 ff16 	bl	8009adc <__ulp>
 8006cb0:	ec51 0b10 	vmov	r0, r1, d0
 8006cb4:	b17e      	cbz	r6, 8006cd6 <sulp+0x36>
 8006cb6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dd09      	ble.n	8006cd6 <sulp+0x36>
 8006cc2:	051b      	lsls	r3, r3, #20
 8006cc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cc8:	2400      	movs	r4, #0
 8006cca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	f7f9 fc91 	bl	80005f8 <__aeabi_dmul>
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}

08006cd8 <_strtod_l>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	ed2d 8b02 	vpush	{d8}
 8006ce0:	b09d      	sub	sp, #116	; 0x74
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	9318      	str	r3, [sp, #96]	; 0x60
 8006ce8:	4ba2      	ldr	r3, [pc, #648]	; (8006f74 <_strtod_l+0x29c>)
 8006cea:	9213      	str	r2, [sp, #76]	; 0x4c
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9305      	str	r3, [sp, #20]
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	4688      	mov	r8, r1
 8006cf6:	f7f9 fa6b 	bl	80001d0 <strlen>
 8006cfa:	f04f 0a00 	mov.w	sl, #0
 8006cfe:	4605      	mov	r5, r0
 8006d00:	f04f 0b00 	mov.w	fp, #0
 8006d04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006d08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006d0a:	781a      	ldrb	r2, [r3, #0]
 8006d0c:	2a2b      	cmp	r2, #43	; 0x2b
 8006d0e:	d04e      	beq.n	8006dae <_strtod_l+0xd6>
 8006d10:	d83b      	bhi.n	8006d8a <_strtod_l+0xb2>
 8006d12:	2a0d      	cmp	r2, #13
 8006d14:	d834      	bhi.n	8006d80 <_strtod_l+0xa8>
 8006d16:	2a08      	cmp	r2, #8
 8006d18:	d834      	bhi.n	8006d84 <_strtod_l+0xac>
 8006d1a:	2a00      	cmp	r2, #0
 8006d1c:	d03e      	beq.n	8006d9c <_strtod_l+0xc4>
 8006d1e:	2300      	movs	r3, #0
 8006d20:	930a      	str	r3, [sp, #40]	; 0x28
 8006d22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006d24:	7833      	ldrb	r3, [r6, #0]
 8006d26:	2b30      	cmp	r3, #48	; 0x30
 8006d28:	f040 80b0 	bne.w	8006e8c <_strtod_l+0x1b4>
 8006d2c:	7873      	ldrb	r3, [r6, #1]
 8006d2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d32:	2b58      	cmp	r3, #88	; 0x58
 8006d34:	d168      	bne.n	8006e08 <_strtod_l+0x130>
 8006d36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d38:	9301      	str	r3, [sp, #4]
 8006d3a:	ab18      	add	r3, sp, #96	; 0x60
 8006d3c:	9702      	str	r7, [sp, #8]
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	4a8d      	ldr	r2, [pc, #564]	; (8006f78 <_strtod_l+0x2a0>)
 8006d42:	ab19      	add	r3, sp, #100	; 0x64
 8006d44:	a917      	add	r1, sp, #92	; 0x5c
 8006d46:	4620      	mov	r0, r4
 8006d48:	f001 ffba 	bl	8008cc0 <__gethex>
 8006d4c:	f010 0707 	ands.w	r7, r0, #7
 8006d50:	4605      	mov	r5, r0
 8006d52:	d005      	beq.n	8006d60 <_strtod_l+0x88>
 8006d54:	2f06      	cmp	r7, #6
 8006d56:	d12c      	bne.n	8006db2 <_strtod_l+0xda>
 8006d58:	3601      	adds	r6, #1
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8006d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006d60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f040 8590 	bne.w	8007888 <_strtod_l+0xbb0>
 8006d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d6a:	b1eb      	cbz	r3, 8006da8 <_strtod_l+0xd0>
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006d72:	ec43 2b10 	vmov	d0, r2, r3
 8006d76:	b01d      	add	sp, #116	; 0x74
 8006d78:	ecbd 8b02 	vpop	{d8}
 8006d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d80:	2a20      	cmp	r2, #32
 8006d82:	d1cc      	bne.n	8006d1e <_strtod_l+0x46>
 8006d84:	3301      	adds	r3, #1
 8006d86:	9317      	str	r3, [sp, #92]	; 0x5c
 8006d88:	e7be      	b.n	8006d08 <_strtod_l+0x30>
 8006d8a:	2a2d      	cmp	r2, #45	; 0x2d
 8006d8c:	d1c7      	bne.n	8006d1e <_strtod_l+0x46>
 8006d8e:	2201      	movs	r2, #1
 8006d90:	920a      	str	r2, [sp, #40]	; 0x28
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	9217      	str	r2, [sp, #92]	; 0x5c
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1c2      	bne.n	8006d22 <_strtod_l+0x4a>
 8006d9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 856e 	bne.w	8007884 <_strtod_l+0xbac>
 8006da8:	4652      	mov	r2, sl
 8006daa:	465b      	mov	r3, fp
 8006dac:	e7e1      	b.n	8006d72 <_strtod_l+0x9a>
 8006dae:	2200      	movs	r2, #0
 8006db0:	e7ee      	b.n	8006d90 <_strtod_l+0xb8>
 8006db2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006db4:	b13a      	cbz	r2, 8006dc6 <_strtod_l+0xee>
 8006db6:	2135      	movs	r1, #53	; 0x35
 8006db8:	a81a      	add	r0, sp, #104	; 0x68
 8006dba:	f002 ff9a 	bl	8009cf2 <__copybits>
 8006dbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006dc0:	4620      	mov	r0, r4
 8006dc2:	f002 fb59 	bl	8009478 <_Bfree>
 8006dc6:	3f01      	subs	r7, #1
 8006dc8:	2f04      	cmp	r7, #4
 8006dca:	d806      	bhi.n	8006dda <_strtod_l+0x102>
 8006dcc:	e8df f007 	tbb	[pc, r7]
 8006dd0:	1714030a 	.word	0x1714030a
 8006dd4:	0a          	.byte	0x0a
 8006dd5:	00          	.byte	0x00
 8006dd6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006dda:	0728      	lsls	r0, r5, #28
 8006ddc:	d5c0      	bpl.n	8006d60 <_strtod_l+0x88>
 8006dde:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006de2:	e7bd      	b.n	8006d60 <_strtod_l+0x88>
 8006de4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006de8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006dea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006dee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006df2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006df6:	e7f0      	b.n	8006dda <_strtod_l+0x102>
 8006df8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006f7c <_strtod_l+0x2a4>
 8006dfc:	e7ed      	b.n	8006dda <_strtod_l+0x102>
 8006dfe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006e02:	f04f 3aff 	mov.w	sl, #4294967295
 8006e06:	e7e8      	b.n	8006dda <_strtod_l+0x102>
 8006e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e0a:	1c5a      	adds	r2, r3, #1
 8006e0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b30      	cmp	r3, #48	; 0x30
 8006e12:	d0f9      	beq.n	8006e08 <_strtod_l+0x130>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0a3      	beq.n	8006d60 <_strtod_l+0x88>
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f04f 0900 	mov.w	r9, #0
 8006e1e:	9304      	str	r3, [sp, #16]
 8006e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006e22:	9308      	str	r3, [sp, #32]
 8006e24:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e28:	464f      	mov	r7, r9
 8006e2a:	220a      	movs	r2, #10
 8006e2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006e2e:	7806      	ldrb	r6, [r0, #0]
 8006e30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006e34:	b2d9      	uxtb	r1, r3
 8006e36:	2909      	cmp	r1, #9
 8006e38:	d92a      	bls.n	8006e90 <_strtod_l+0x1b8>
 8006e3a:	9905      	ldr	r1, [sp, #20]
 8006e3c:	462a      	mov	r2, r5
 8006e3e:	f003 fba6 	bl	800a58e <strncmp>
 8006e42:	b398      	cbz	r0, 8006eac <_strtod_l+0x1d4>
 8006e44:	2000      	movs	r0, #0
 8006e46:	4632      	mov	r2, r6
 8006e48:	463d      	mov	r5, r7
 8006e4a:	9005      	str	r0, [sp, #20]
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2a65      	cmp	r2, #101	; 0x65
 8006e50:	d001      	beq.n	8006e56 <_strtod_l+0x17e>
 8006e52:	2a45      	cmp	r2, #69	; 0x45
 8006e54:	d118      	bne.n	8006e88 <_strtod_l+0x1b0>
 8006e56:	b91d      	cbnz	r5, 8006e60 <_strtod_l+0x188>
 8006e58:	9a04      	ldr	r2, [sp, #16]
 8006e5a:	4302      	orrs	r2, r0
 8006e5c:	d09e      	beq.n	8006d9c <_strtod_l+0xc4>
 8006e5e:	2500      	movs	r5, #0
 8006e60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8006e64:	f108 0201 	add.w	r2, r8, #1
 8006e68:	9217      	str	r2, [sp, #92]	; 0x5c
 8006e6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006e6e:	2a2b      	cmp	r2, #43	; 0x2b
 8006e70:	d075      	beq.n	8006f5e <_strtod_l+0x286>
 8006e72:	2a2d      	cmp	r2, #45	; 0x2d
 8006e74:	d07b      	beq.n	8006f6e <_strtod_l+0x296>
 8006e76:	f04f 0c00 	mov.w	ip, #0
 8006e7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e7e:	2909      	cmp	r1, #9
 8006e80:	f240 8082 	bls.w	8006f88 <_strtod_l+0x2b0>
 8006e84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006e88:	2600      	movs	r6, #0
 8006e8a:	e09d      	b.n	8006fc8 <_strtod_l+0x2f0>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e7c4      	b.n	8006e1a <_strtod_l+0x142>
 8006e90:	2f08      	cmp	r7, #8
 8006e92:	bfd8      	it	le
 8006e94:	9907      	ldrle	r1, [sp, #28]
 8006e96:	f100 0001 	add.w	r0, r0, #1
 8006e9a:	bfda      	itte	le
 8006e9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006ea0:	9307      	strle	r3, [sp, #28]
 8006ea2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006ea6:	3701      	adds	r7, #1
 8006ea8:	9017      	str	r0, [sp, #92]	; 0x5c
 8006eaa:	e7bf      	b.n	8006e2c <_strtod_l+0x154>
 8006eac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eae:	195a      	adds	r2, r3, r5
 8006eb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006eb2:	5d5a      	ldrb	r2, [r3, r5]
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	d037      	beq.n	8006f28 <_strtod_l+0x250>
 8006eb8:	9005      	str	r0, [sp, #20]
 8006eba:	463d      	mov	r5, r7
 8006ebc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ec0:	2b09      	cmp	r3, #9
 8006ec2:	d912      	bls.n	8006eea <_strtod_l+0x212>
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e7c2      	b.n	8006e4e <_strtod_l+0x176>
 8006ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eca:	1c5a      	adds	r2, r3, #1
 8006ecc:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ece:	785a      	ldrb	r2, [r3, #1]
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	2a30      	cmp	r2, #48	; 0x30
 8006ed4:	d0f8      	beq.n	8006ec8 <_strtod_l+0x1f0>
 8006ed6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006eda:	2b08      	cmp	r3, #8
 8006edc:	f200 84d9 	bhi.w	8007892 <_strtod_l+0xbba>
 8006ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ee2:	9005      	str	r0, [sp, #20]
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	9308      	str	r3, [sp, #32]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	3a30      	subs	r2, #48	; 0x30
 8006eec:	f100 0301 	add.w	r3, r0, #1
 8006ef0:	d014      	beq.n	8006f1c <_strtod_l+0x244>
 8006ef2:	9905      	ldr	r1, [sp, #20]
 8006ef4:	4419      	add	r1, r3
 8006ef6:	9105      	str	r1, [sp, #20]
 8006ef8:	462b      	mov	r3, r5
 8006efa:	eb00 0e05 	add.w	lr, r0, r5
 8006efe:	210a      	movs	r1, #10
 8006f00:	4573      	cmp	r3, lr
 8006f02:	d113      	bne.n	8006f2c <_strtod_l+0x254>
 8006f04:	182b      	adds	r3, r5, r0
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	f105 0501 	add.w	r5, r5, #1
 8006f0c:	4405      	add	r5, r0
 8006f0e:	dc1c      	bgt.n	8006f4a <_strtod_l+0x272>
 8006f10:	9907      	ldr	r1, [sp, #28]
 8006f12:	230a      	movs	r3, #10
 8006f14:	fb03 2301 	mla	r3, r3, r1, r2
 8006f18:	9307      	str	r3, [sp, #28]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f1e:	1c51      	adds	r1, r2, #1
 8006f20:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f22:	7852      	ldrb	r2, [r2, #1]
 8006f24:	4618      	mov	r0, r3
 8006f26:	e7c9      	b.n	8006ebc <_strtod_l+0x1e4>
 8006f28:	4638      	mov	r0, r7
 8006f2a:	e7d2      	b.n	8006ed2 <_strtod_l+0x1fa>
 8006f2c:	2b08      	cmp	r3, #8
 8006f2e:	dc04      	bgt.n	8006f3a <_strtod_l+0x262>
 8006f30:	9e07      	ldr	r6, [sp, #28]
 8006f32:	434e      	muls	r6, r1
 8006f34:	9607      	str	r6, [sp, #28]
 8006f36:	3301      	adds	r3, #1
 8006f38:	e7e2      	b.n	8006f00 <_strtod_l+0x228>
 8006f3a:	f103 0c01 	add.w	ip, r3, #1
 8006f3e:	f1bc 0f10 	cmp.w	ip, #16
 8006f42:	bfd8      	it	le
 8006f44:	fb01 f909 	mulle.w	r9, r1, r9
 8006f48:	e7f5      	b.n	8006f36 <_strtod_l+0x25e>
 8006f4a:	2d10      	cmp	r5, #16
 8006f4c:	bfdc      	itt	le
 8006f4e:	230a      	movle	r3, #10
 8006f50:	fb03 2909 	mlale	r9, r3, r9, r2
 8006f54:	e7e1      	b.n	8006f1a <_strtod_l+0x242>
 8006f56:	2300      	movs	r3, #0
 8006f58:	9305      	str	r3, [sp, #20]
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e77c      	b.n	8006e58 <_strtod_l+0x180>
 8006f5e:	f04f 0c00 	mov.w	ip, #0
 8006f62:	f108 0202 	add.w	r2, r8, #2
 8006f66:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f68:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006f6c:	e785      	b.n	8006e7a <_strtod_l+0x1a2>
 8006f6e:	f04f 0c01 	mov.w	ip, #1
 8006f72:	e7f6      	b.n	8006f62 <_strtod_l+0x28a>
 8006f74:	0800b92c 	.word	0x0800b92c
 8006f78:	0800b67c 	.word	0x0800b67c
 8006f7c:	7ff00000 	.word	0x7ff00000
 8006f80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f82:	1c51      	adds	r1, r2, #1
 8006f84:	9117      	str	r1, [sp, #92]	; 0x5c
 8006f86:	7852      	ldrb	r2, [r2, #1]
 8006f88:	2a30      	cmp	r2, #48	; 0x30
 8006f8a:	d0f9      	beq.n	8006f80 <_strtod_l+0x2a8>
 8006f8c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f90:	2908      	cmp	r1, #8
 8006f92:	f63f af79 	bhi.w	8006e88 <_strtod_l+0x1b0>
 8006f96:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006f9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006f9c:	9206      	str	r2, [sp, #24]
 8006f9e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006fa0:	1c51      	adds	r1, r2, #1
 8006fa2:	9117      	str	r1, [sp, #92]	; 0x5c
 8006fa4:	7852      	ldrb	r2, [r2, #1]
 8006fa6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006faa:	2e09      	cmp	r6, #9
 8006fac:	d937      	bls.n	800701e <_strtod_l+0x346>
 8006fae:	9e06      	ldr	r6, [sp, #24]
 8006fb0:	1b89      	subs	r1, r1, r6
 8006fb2:	2908      	cmp	r1, #8
 8006fb4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006fb8:	dc02      	bgt.n	8006fc0 <_strtod_l+0x2e8>
 8006fba:	4576      	cmp	r6, lr
 8006fbc:	bfa8      	it	ge
 8006fbe:	4676      	movge	r6, lr
 8006fc0:	f1bc 0f00 	cmp.w	ip, #0
 8006fc4:	d000      	beq.n	8006fc8 <_strtod_l+0x2f0>
 8006fc6:	4276      	negs	r6, r6
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	d14d      	bne.n	8007068 <_strtod_l+0x390>
 8006fcc:	9904      	ldr	r1, [sp, #16]
 8006fce:	4301      	orrs	r1, r0
 8006fd0:	f47f aec6 	bne.w	8006d60 <_strtod_l+0x88>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f47f aee1 	bne.w	8006d9c <_strtod_l+0xc4>
 8006fda:	2a69      	cmp	r2, #105	; 0x69
 8006fdc:	d027      	beq.n	800702e <_strtod_l+0x356>
 8006fde:	dc24      	bgt.n	800702a <_strtod_l+0x352>
 8006fe0:	2a49      	cmp	r2, #73	; 0x49
 8006fe2:	d024      	beq.n	800702e <_strtod_l+0x356>
 8006fe4:	2a4e      	cmp	r2, #78	; 0x4e
 8006fe6:	f47f aed9 	bne.w	8006d9c <_strtod_l+0xc4>
 8006fea:	499f      	ldr	r1, [pc, #636]	; (8007268 <_strtod_l+0x590>)
 8006fec:	a817      	add	r0, sp, #92	; 0x5c
 8006fee:	f002 f8bf 	bl	8009170 <__match>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f43f aed2 	beq.w	8006d9c <_strtod_l+0xc4>
 8006ff8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	2b28      	cmp	r3, #40	; 0x28
 8006ffe:	d12d      	bne.n	800705c <_strtod_l+0x384>
 8007000:	499a      	ldr	r1, [pc, #616]	; (800726c <_strtod_l+0x594>)
 8007002:	aa1a      	add	r2, sp, #104	; 0x68
 8007004:	a817      	add	r0, sp, #92	; 0x5c
 8007006:	f002 f8c7 	bl	8009198 <__hexnan>
 800700a:	2805      	cmp	r0, #5
 800700c:	d126      	bne.n	800705c <_strtod_l+0x384>
 800700e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007010:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007014:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007018:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800701c:	e6a0      	b.n	8006d60 <_strtod_l+0x88>
 800701e:	210a      	movs	r1, #10
 8007020:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007024:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007028:	e7b9      	b.n	8006f9e <_strtod_l+0x2c6>
 800702a:	2a6e      	cmp	r2, #110	; 0x6e
 800702c:	e7db      	b.n	8006fe6 <_strtod_l+0x30e>
 800702e:	4990      	ldr	r1, [pc, #576]	; (8007270 <_strtod_l+0x598>)
 8007030:	a817      	add	r0, sp, #92	; 0x5c
 8007032:	f002 f89d 	bl	8009170 <__match>
 8007036:	2800      	cmp	r0, #0
 8007038:	f43f aeb0 	beq.w	8006d9c <_strtod_l+0xc4>
 800703c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703e:	498d      	ldr	r1, [pc, #564]	; (8007274 <_strtod_l+0x59c>)
 8007040:	3b01      	subs	r3, #1
 8007042:	a817      	add	r0, sp, #92	; 0x5c
 8007044:	9317      	str	r3, [sp, #92]	; 0x5c
 8007046:	f002 f893 	bl	8009170 <__match>
 800704a:	b910      	cbnz	r0, 8007052 <_strtod_l+0x37a>
 800704c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704e:	3301      	adds	r3, #1
 8007050:	9317      	str	r3, [sp, #92]	; 0x5c
 8007052:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007284 <_strtod_l+0x5ac>
 8007056:	f04f 0a00 	mov.w	sl, #0
 800705a:	e681      	b.n	8006d60 <_strtod_l+0x88>
 800705c:	4886      	ldr	r0, [pc, #536]	; (8007278 <_strtod_l+0x5a0>)
 800705e:	f003 fa3b 	bl	800a4d8 <nan>
 8007062:	ec5b ab10 	vmov	sl, fp, d0
 8007066:	e67b      	b.n	8006d60 <_strtod_l+0x88>
 8007068:	9b05      	ldr	r3, [sp, #20]
 800706a:	9807      	ldr	r0, [sp, #28]
 800706c:	1af3      	subs	r3, r6, r3
 800706e:	2f00      	cmp	r7, #0
 8007070:	bf08      	it	eq
 8007072:	462f      	moveq	r7, r5
 8007074:	2d10      	cmp	r5, #16
 8007076:	9306      	str	r3, [sp, #24]
 8007078:	46a8      	mov	r8, r5
 800707a:	bfa8      	it	ge
 800707c:	f04f 0810 	movge.w	r8, #16
 8007080:	f7f9 fa40 	bl	8000504 <__aeabi_ui2d>
 8007084:	2d09      	cmp	r5, #9
 8007086:	4682      	mov	sl, r0
 8007088:	468b      	mov	fp, r1
 800708a:	dd13      	ble.n	80070b4 <_strtod_l+0x3dc>
 800708c:	4b7b      	ldr	r3, [pc, #492]	; (800727c <_strtod_l+0x5a4>)
 800708e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007092:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007096:	f7f9 faaf 	bl	80005f8 <__aeabi_dmul>
 800709a:	4682      	mov	sl, r0
 800709c:	4648      	mov	r0, r9
 800709e:	468b      	mov	fp, r1
 80070a0:	f7f9 fa30 	bl	8000504 <__aeabi_ui2d>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	4650      	mov	r0, sl
 80070aa:	4659      	mov	r1, fp
 80070ac:	f7f9 f8ee 	bl	800028c <__adddf3>
 80070b0:	4682      	mov	sl, r0
 80070b2:	468b      	mov	fp, r1
 80070b4:	2d0f      	cmp	r5, #15
 80070b6:	dc38      	bgt.n	800712a <_strtod_l+0x452>
 80070b8:	9b06      	ldr	r3, [sp, #24]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f43f ae50 	beq.w	8006d60 <_strtod_l+0x88>
 80070c0:	dd24      	ble.n	800710c <_strtod_l+0x434>
 80070c2:	2b16      	cmp	r3, #22
 80070c4:	dc0b      	bgt.n	80070de <_strtod_l+0x406>
 80070c6:	496d      	ldr	r1, [pc, #436]	; (800727c <_strtod_l+0x5a4>)
 80070c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d0:	4652      	mov	r2, sl
 80070d2:	465b      	mov	r3, fp
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	e640      	b.n	8006d60 <_strtod_l+0x88>
 80070de:	9a06      	ldr	r2, [sp, #24]
 80070e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80070e4:	4293      	cmp	r3, r2
 80070e6:	db20      	blt.n	800712a <_strtod_l+0x452>
 80070e8:	4c64      	ldr	r4, [pc, #400]	; (800727c <_strtod_l+0x5a4>)
 80070ea:	f1c5 050f 	rsb	r5, r5, #15
 80070ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070fa:	f7f9 fa7d 	bl	80005f8 <__aeabi_dmul>
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	1b5d      	subs	r5, r3, r5
 8007102:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007106:	e9d4 2300 	ldrd	r2, r3, [r4]
 800710a:	e7e3      	b.n	80070d4 <_strtod_l+0x3fc>
 800710c:	9b06      	ldr	r3, [sp, #24]
 800710e:	3316      	adds	r3, #22
 8007110:	db0b      	blt.n	800712a <_strtod_l+0x452>
 8007112:	9b05      	ldr	r3, [sp, #20]
 8007114:	1b9e      	subs	r6, r3, r6
 8007116:	4b59      	ldr	r3, [pc, #356]	; (800727c <_strtod_l+0x5a4>)
 8007118:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800711c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007120:	4650      	mov	r0, sl
 8007122:	4659      	mov	r1, fp
 8007124:	f7f9 fb92 	bl	800084c <__aeabi_ddiv>
 8007128:	e7d6      	b.n	80070d8 <_strtod_l+0x400>
 800712a:	9b06      	ldr	r3, [sp, #24]
 800712c:	eba5 0808 	sub.w	r8, r5, r8
 8007130:	4498      	add	r8, r3
 8007132:	f1b8 0f00 	cmp.w	r8, #0
 8007136:	dd74      	ble.n	8007222 <_strtod_l+0x54a>
 8007138:	f018 030f 	ands.w	r3, r8, #15
 800713c:	d00a      	beq.n	8007154 <_strtod_l+0x47c>
 800713e:	494f      	ldr	r1, [pc, #316]	; (800727c <_strtod_l+0x5a4>)
 8007140:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007144:	4652      	mov	r2, sl
 8007146:	465b      	mov	r3, fp
 8007148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800714c:	f7f9 fa54 	bl	80005f8 <__aeabi_dmul>
 8007150:	4682      	mov	sl, r0
 8007152:	468b      	mov	fp, r1
 8007154:	f038 080f 	bics.w	r8, r8, #15
 8007158:	d04f      	beq.n	80071fa <_strtod_l+0x522>
 800715a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800715e:	dd22      	ble.n	80071a6 <_strtod_l+0x4ce>
 8007160:	2500      	movs	r5, #0
 8007162:	462e      	mov	r6, r5
 8007164:	9507      	str	r5, [sp, #28]
 8007166:	9505      	str	r5, [sp, #20]
 8007168:	2322      	movs	r3, #34	; 0x22
 800716a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007284 <_strtod_l+0x5ac>
 800716e:	6023      	str	r3, [r4, #0]
 8007170:	f04f 0a00 	mov.w	sl, #0
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	2b00      	cmp	r3, #0
 8007178:	f43f adf2 	beq.w	8006d60 <_strtod_l+0x88>
 800717c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800717e:	4620      	mov	r0, r4
 8007180:	f002 f97a 	bl	8009478 <_Bfree>
 8007184:	9905      	ldr	r1, [sp, #20]
 8007186:	4620      	mov	r0, r4
 8007188:	f002 f976 	bl	8009478 <_Bfree>
 800718c:	4631      	mov	r1, r6
 800718e:	4620      	mov	r0, r4
 8007190:	f002 f972 	bl	8009478 <_Bfree>
 8007194:	9907      	ldr	r1, [sp, #28]
 8007196:	4620      	mov	r0, r4
 8007198:	f002 f96e 	bl	8009478 <_Bfree>
 800719c:	4629      	mov	r1, r5
 800719e:	4620      	mov	r0, r4
 80071a0:	f002 f96a 	bl	8009478 <_Bfree>
 80071a4:	e5dc      	b.n	8006d60 <_strtod_l+0x88>
 80071a6:	4b36      	ldr	r3, [pc, #216]	; (8007280 <_strtod_l+0x5a8>)
 80071a8:	9304      	str	r3, [sp, #16]
 80071aa:	2300      	movs	r3, #0
 80071ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80071b0:	4650      	mov	r0, sl
 80071b2:	4659      	mov	r1, fp
 80071b4:	4699      	mov	r9, r3
 80071b6:	f1b8 0f01 	cmp.w	r8, #1
 80071ba:	dc21      	bgt.n	8007200 <_strtod_l+0x528>
 80071bc:	b10b      	cbz	r3, 80071c2 <_strtod_l+0x4ea>
 80071be:	4682      	mov	sl, r0
 80071c0:	468b      	mov	fp, r1
 80071c2:	4b2f      	ldr	r3, [pc, #188]	; (8007280 <_strtod_l+0x5a8>)
 80071c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80071c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80071cc:	4652      	mov	r2, sl
 80071ce:	465b      	mov	r3, fp
 80071d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80071d4:	f7f9 fa10 	bl	80005f8 <__aeabi_dmul>
 80071d8:	4b2a      	ldr	r3, [pc, #168]	; (8007284 <_strtod_l+0x5ac>)
 80071da:	460a      	mov	r2, r1
 80071dc:	400b      	ands	r3, r1
 80071de:	492a      	ldr	r1, [pc, #168]	; (8007288 <_strtod_l+0x5b0>)
 80071e0:	428b      	cmp	r3, r1
 80071e2:	4682      	mov	sl, r0
 80071e4:	d8bc      	bhi.n	8007160 <_strtod_l+0x488>
 80071e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071ea:	428b      	cmp	r3, r1
 80071ec:	bf86      	itte	hi
 80071ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800728c <_strtod_l+0x5b4>
 80071f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80071f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80071fa:	2300      	movs	r3, #0
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	e084      	b.n	800730a <_strtod_l+0x632>
 8007200:	f018 0f01 	tst.w	r8, #1
 8007204:	d005      	beq.n	8007212 <_strtod_l+0x53a>
 8007206:	9b04      	ldr	r3, [sp, #16]
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	f7f9 f9f4 	bl	80005f8 <__aeabi_dmul>
 8007210:	2301      	movs	r3, #1
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	3208      	adds	r2, #8
 8007216:	f109 0901 	add.w	r9, r9, #1
 800721a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800721e:	9204      	str	r2, [sp, #16]
 8007220:	e7c9      	b.n	80071b6 <_strtod_l+0x4de>
 8007222:	d0ea      	beq.n	80071fa <_strtod_l+0x522>
 8007224:	f1c8 0800 	rsb	r8, r8, #0
 8007228:	f018 020f 	ands.w	r2, r8, #15
 800722c:	d00a      	beq.n	8007244 <_strtod_l+0x56c>
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <_strtod_l+0x5a4>)
 8007230:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007234:	4650      	mov	r0, sl
 8007236:	4659      	mov	r1, fp
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f7f9 fb06 	bl	800084c <__aeabi_ddiv>
 8007240:	4682      	mov	sl, r0
 8007242:	468b      	mov	fp, r1
 8007244:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007248:	d0d7      	beq.n	80071fa <_strtod_l+0x522>
 800724a:	f1b8 0f1f 	cmp.w	r8, #31
 800724e:	dd1f      	ble.n	8007290 <_strtod_l+0x5b8>
 8007250:	2500      	movs	r5, #0
 8007252:	462e      	mov	r6, r5
 8007254:	9507      	str	r5, [sp, #28]
 8007256:	9505      	str	r5, [sp, #20]
 8007258:	2322      	movs	r3, #34	; 0x22
 800725a:	f04f 0a00 	mov.w	sl, #0
 800725e:	f04f 0b00 	mov.w	fp, #0
 8007262:	6023      	str	r3, [r4, #0]
 8007264:	e786      	b.n	8007174 <_strtod_l+0x49c>
 8007266:	bf00      	nop
 8007268:	0800b64d 	.word	0x0800b64d
 800726c:	0800b690 	.word	0x0800b690
 8007270:	0800b645 	.word	0x0800b645
 8007274:	0800b7d4 	.word	0x0800b7d4
 8007278:	0800bae8 	.word	0x0800bae8
 800727c:	0800b9c8 	.word	0x0800b9c8
 8007280:	0800b9a0 	.word	0x0800b9a0
 8007284:	7ff00000 	.word	0x7ff00000
 8007288:	7ca00000 	.word	0x7ca00000
 800728c:	7fefffff 	.word	0x7fefffff
 8007290:	f018 0310 	ands.w	r3, r8, #16
 8007294:	bf18      	it	ne
 8007296:	236a      	movne	r3, #106	; 0x6a
 8007298:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007648 <_strtod_l+0x970>
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	4650      	mov	r0, sl
 80072a0:	4659      	mov	r1, fp
 80072a2:	2300      	movs	r3, #0
 80072a4:	f018 0f01 	tst.w	r8, #1
 80072a8:	d004      	beq.n	80072b4 <_strtod_l+0x5dc>
 80072aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	2301      	movs	r3, #1
 80072b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80072b8:	f109 0908 	add.w	r9, r9, #8
 80072bc:	d1f2      	bne.n	80072a4 <_strtod_l+0x5cc>
 80072be:	b10b      	cbz	r3, 80072c4 <_strtod_l+0x5ec>
 80072c0:	4682      	mov	sl, r0
 80072c2:	468b      	mov	fp, r1
 80072c4:	9b04      	ldr	r3, [sp, #16]
 80072c6:	b1c3      	cbz	r3, 80072fa <_strtod_l+0x622>
 80072c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	4659      	mov	r1, fp
 80072d4:	dd11      	ble.n	80072fa <_strtod_l+0x622>
 80072d6:	2b1f      	cmp	r3, #31
 80072d8:	f340 8124 	ble.w	8007524 <_strtod_l+0x84c>
 80072dc:	2b34      	cmp	r3, #52	; 0x34
 80072de:	bfde      	ittt	le
 80072e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072e4:	f04f 33ff 	movle.w	r3, #4294967295
 80072e8:	fa03 f202 	lslle.w	r2, r3, r2
 80072ec:	f04f 0a00 	mov.w	sl, #0
 80072f0:	bfcc      	ite	gt
 80072f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80072f6:	ea02 0b01 	andle.w	fp, r2, r1
 80072fa:	2200      	movs	r2, #0
 80072fc:	2300      	movs	r3, #0
 80072fe:	4650      	mov	r0, sl
 8007300:	4659      	mov	r1, fp
 8007302:	f7f9 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007306:	2800      	cmp	r0, #0
 8007308:	d1a2      	bne.n	8007250 <_strtod_l+0x578>
 800730a:	9b07      	ldr	r3, [sp, #28]
 800730c:	9300      	str	r3, [sp, #0]
 800730e:	9908      	ldr	r1, [sp, #32]
 8007310:	462b      	mov	r3, r5
 8007312:	463a      	mov	r2, r7
 8007314:	4620      	mov	r0, r4
 8007316:	f002 f917 	bl	8009548 <__s2b>
 800731a:	9007      	str	r0, [sp, #28]
 800731c:	2800      	cmp	r0, #0
 800731e:	f43f af1f 	beq.w	8007160 <_strtod_l+0x488>
 8007322:	9b05      	ldr	r3, [sp, #20]
 8007324:	1b9e      	subs	r6, r3, r6
 8007326:	9b06      	ldr	r3, [sp, #24]
 8007328:	2b00      	cmp	r3, #0
 800732a:	bfb4      	ite	lt
 800732c:	4633      	movlt	r3, r6
 800732e:	2300      	movge	r3, #0
 8007330:	930c      	str	r3, [sp, #48]	; 0x30
 8007332:	9b06      	ldr	r3, [sp, #24]
 8007334:	2500      	movs	r5, #0
 8007336:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800733a:	9312      	str	r3, [sp, #72]	; 0x48
 800733c:	462e      	mov	r6, r5
 800733e:	9b07      	ldr	r3, [sp, #28]
 8007340:	4620      	mov	r0, r4
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	f002 f858 	bl	80093f8 <_Balloc>
 8007348:	9005      	str	r0, [sp, #20]
 800734a:	2800      	cmp	r0, #0
 800734c:	f43f af0c 	beq.w	8007168 <_strtod_l+0x490>
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	691a      	ldr	r2, [r3, #16]
 8007354:	3202      	adds	r2, #2
 8007356:	f103 010c 	add.w	r1, r3, #12
 800735a:	0092      	lsls	r2, r2, #2
 800735c:	300c      	adds	r0, #12
 800735e:	f002 f83d 	bl	80093dc <memcpy>
 8007362:	ec4b ab10 	vmov	d0, sl, fp
 8007366:	aa1a      	add	r2, sp, #104	; 0x68
 8007368:	a919      	add	r1, sp, #100	; 0x64
 800736a:	4620      	mov	r0, r4
 800736c:	f002 fc32 	bl	8009bd4 <__d2b>
 8007370:	ec4b ab18 	vmov	d8, sl, fp
 8007374:	9018      	str	r0, [sp, #96]	; 0x60
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f aef6 	beq.w	8007168 <_strtod_l+0x490>
 800737c:	2101      	movs	r1, #1
 800737e:	4620      	mov	r0, r4
 8007380:	f002 f97c 	bl	800967c <__i2b>
 8007384:	4606      	mov	r6, r0
 8007386:	2800      	cmp	r0, #0
 8007388:	f43f aeee 	beq.w	8007168 <_strtod_l+0x490>
 800738c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800738e:	9904      	ldr	r1, [sp, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	bfab      	itete	ge
 8007394:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007396:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007398:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800739a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800739e:	bfac      	ite	ge
 80073a0:	eb03 0902 	addge.w	r9, r3, r2
 80073a4:	1ad7      	sublt	r7, r2, r3
 80073a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073a8:	eba3 0801 	sub.w	r8, r3, r1
 80073ac:	4490      	add	r8, r2
 80073ae:	4ba1      	ldr	r3, [pc, #644]	; (8007634 <_strtod_l+0x95c>)
 80073b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80073b4:	4598      	cmp	r8, r3
 80073b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073ba:	f280 80c7 	bge.w	800754c <_strtod_l+0x874>
 80073be:	eba3 0308 	sub.w	r3, r3, r8
 80073c2:	2b1f      	cmp	r3, #31
 80073c4:	eba2 0203 	sub.w	r2, r2, r3
 80073c8:	f04f 0101 	mov.w	r1, #1
 80073cc:	f300 80b1 	bgt.w	8007532 <_strtod_l+0x85a>
 80073d0:	fa01 f303 	lsl.w	r3, r1, r3
 80073d4:	930d      	str	r3, [sp, #52]	; 0x34
 80073d6:	2300      	movs	r3, #0
 80073d8:	9308      	str	r3, [sp, #32]
 80073da:	eb09 0802 	add.w	r8, r9, r2
 80073de:	9b04      	ldr	r3, [sp, #16]
 80073e0:	45c1      	cmp	r9, r8
 80073e2:	4417      	add	r7, r2
 80073e4:	441f      	add	r7, r3
 80073e6:	464b      	mov	r3, r9
 80073e8:	bfa8      	it	ge
 80073ea:	4643      	movge	r3, r8
 80073ec:	42bb      	cmp	r3, r7
 80073ee:	bfa8      	it	ge
 80073f0:	463b      	movge	r3, r7
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfc2      	ittt	gt
 80073f6:	eba8 0803 	subgt.w	r8, r8, r3
 80073fa:	1aff      	subgt	r7, r7, r3
 80073fc:	eba9 0903 	subgt.w	r9, r9, r3
 8007400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd17      	ble.n	8007436 <_strtod_l+0x75e>
 8007406:	4631      	mov	r1, r6
 8007408:	461a      	mov	r2, r3
 800740a:	4620      	mov	r0, r4
 800740c:	f002 f9f6 	bl	80097fc <__pow5mult>
 8007410:	4606      	mov	r6, r0
 8007412:	2800      	cmp	r0, #0
 8007414:	f43f aea8 	beq.w	8007168 <_strtod_l+0x490>
 8007418:	4601      	mov	r1, r0
 800741a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800741c:	4620      	mov	r0, r4
 800741e:	f002 f943 	bl	80096a8 <__multiply>
 8007422:	900b      	str	r0, [sp, #44]	; 0x2c
 8007424:	2800      	cmp	r0, #0
 8007426:	f43f ae9f 	beq.w	8007168 <_strtod_l+0x490>
 800742a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800742c:	4620      	mov	r0, r4
 800742e:	f002 f823 	bl	8009478 <_Bfree>
 8007432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007434:	9318      	str	r3, [sp, #96]	; 0x60
 8007436:	f1b8 0f00 	cmp.w	r8, #0
 800743a:	f300 808c 	bgt.w	8007556 <_strtod_l+0x87e>
 800743e:	9b06      	ldr	r3, [sp, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	dd08      	ble.n	8007456 <_strtod_l+0x77e>
 8007444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007446:	9905      	ldr	r1, [sp, #20]
 8007448:	4620      	mov	r0, r4
 800744a:	f002 f9d7 	bl	80097fc <__pow5mult>
 800744e:	9005      	str	r0, [sp, #20]
 8007450:	2800      	cmp	r0, #0
 8007452:	f43f ae89 	beq.w	8007168 <_strtod_l+0x490>
 8007456:	2f00      	cmp	r7, #0
 8007458:	dd08      	ble.n	800746c <_strtod_l+0x794>
 800745a:	9905      	ldr	r1, [sp, #20]
 800745c:	463a      	mov	r2, r7
 800745e:	4620      	mov	r0, r4
 8007460:	f002 fa26 	bl	80098b0 <__lshift>
 8007464:	9005      	str	r0, [sp, #20]
 8007466:	2800      	cmp	r0, #0
 8007468:	f43f ae7e 	beq.w	8007168 <_strtod_l+0x490>
 800746c:	f1b9 0f00 	cmp.w	r9, #0
 8007470:	dd08      	ble.n	8007484 <_strtod_l+0x7ac>
 8007472:	4631      	mov	r1, r6
 8007474:	464a      	mov	r2, r9
 8007476:	4620      	mov	r0, r4
 8007478:	f002 fa1a 	bl	80098b0 <__lshift>
 800747c:	4606      	mov	r6, r0
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f ae72 	beq.w	8007168 <_strtod_l+0x490>
 8007484:	9a05      	ldr	r2, [sp, #20]
 8007486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007488:	4620      	mov	r0, r4
 800748a:	f002 fa9d 	bl	80099c8 <__mdiff>
 800748e:	4605      	mov	r5, r0
 8007490:	2800      	cmp	r0, #0
 8007492:	f43f ae69 	beq.w	8007168 <_strtod_l+0x490>
 8007496:	68c3      	ldr	r3, [r0, #12]
 8007498:	930b      	str	r3, [sp, #44]	; 0x2c
 800749a:	2300      	movs	r3, #0
 800749c:	60c3      	str	r3, [r0, #12]
 800749e:	4631      	mov	r1, r6
 80074a0:	f002 fa76 	bl	8009990 <__mcmp>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	da60      	bge.n	800756a <_strtod_l+0x892>
 80074a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074aa:	ea53 030a 	orrs.w	r3, r3, sl
 80074ae:	f040 8082 	bne.w	80075b6 <_strtod_l+0x8de>
 80074b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d17d      	bne.n	80075b6 <_strtod_l+0x8de>
 80074ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80074be:	0d1b      	lsrs	r3, r3, #20
 80074c0:	051b      	lsls	r3, r3, #20
 80074c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074c6:	d976      	bls.n	80075b6 <_strtod_l+0x8de>
 80074c8:	696b      	ldr	r3, [r5, #20]
 80074ca:	b913      	cbnz	r3, 80074d2 <_strtod_l+0x7fa>
 80074cc:	692b      	ldr	r3, [r5, #16]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	dd71      	ble.n	80075b6 <_strtod_l+0x8de>
 80074d2:	4629      	mov	r1, r5
 80074d4:	2201      	movs	r2, #1
 80074d6:	4620      	mov	r0, r4
 80074d8:	f002 f9ea 	bl	80098b0 <__lshift>
 80074dc:	4631      	mov	r1, r6
 80074de:	4605      	mov	r5, r0
 80074e0:	f002 fa56 	bl	8009990 <__mcmp>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	dd66      	ble.n	80075b6 <_strtod_l+0x8de>
 80074e8:	9904      	ldr	r1, [sp, #16]
 80074ea:	4a53      	ldr	r2, [pc, #332]	; (8007638 <_strtod_l+0x960>)
 80074ec:	465b      	mov	r3, fp
 80074ee:	2900      	cmp	r1, #0
 80074f0:	f000 8081 	beq.w	80075f6 <_strtod_l+0x91e>
 80074f4:	ea02 010b 	and.w	r1, r2, fp
 80074f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074fc:	dc7b      	bgt.n	80075f6 <_strtod_l+0x91e>
 80074fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007502:	f77f aea9 	ble.w	8007258 <_strtod_l+0x580>
 8007506:	4b4d      	ldr	r3, [pc, #308]	; (800763c <_strtod_l+0x964>)
 8007508:	4650      	mov	r0, sl
 800750a:	4659      	mov	r1, fp
 800750c:	2200      	movs	r2, #0
 800750e:	f7f9 f873 	bl	80005f8 <__aeabi_dmul>
 8007512:	460b      	mov	r3, r1
 8007514:	4303      	orrs	r3, r0
 8007516:	bf08      	it	eq
 8007518:	2322      	moveq	r3, #34	; 0x22
 800751a:	4682      	mov	sl, r0
 800751c:	468b      	mov	fp, r1
 800751e:	bf08      	it	eq
 8007520:	6023      	streq	r3, [r4, #0]
 8007522:	e62b      	b.n	800717c <_strtod_l+0x4a4>
 8007524:	f04f 32ff 	mov.w	r2, #4294967295
 8007528:	fa02 f303 	lsl.w	r3, r2, r3
 800752c:	ea03 0a0a 	and.w	sl, r3, sl
 8007530:	e6e3      	b.n	80072fa <_strtod_l+0x622>
 8007532:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007536:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800753a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800753e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007542:	fa01 f308 	lsl.w	r3, r1, r8
 8007546:	9308      	str	r3, [sp, #32]
 8007548:	910d      	str	r1, [sp, #52]	; 0x34
 800754a:	e746      	b.n	80073da <_strtod_l+0x702>
 800754c:	2300      	movs	r3, #0
 800754e:	9308      	str	r3, [sp, #32]
 8007550:	2301      	movs	r3, #1
 8007552:	930d      	str	r3, [sp, #52]	; 0x34
 8007554:	e741      	b.n	80073da <_strtod_l+0x702>
 8007556:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007558:	4642      	mov	r2, r8
 800755a:	4620      	mov	r0, r4
 800755c:	f002 f9a8 	bl	80098b0 <__lshift>
 8007560:	9018      	str	r0, [sp, #96]	; 0x60
 8007562:	2800      	cmp	r0, #0
 8007564:	f47f af6b 	bne.w	800743e <_strtod_l+0x766>
 8007568:	e5fe      	b.n	8007168 <_strtod_l+0x490>
 800756a:	465f      	mov	r7, fp
 800756c:	d16e      	bne.n	800764c <_strtod_l+0x974>
 800756e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007574:	b342      	cbz	r2, 80075c8 <_strtod_l+0x8f0>
 8007576:	4a32      	ldr	r2, [pc, #200]	; (8007640 <_strtod_l+0x968>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d128      	bne.n	80075ce <_strtod_l+0x8f6>
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	4651      	mov	r1, sl
 8007580:	b1eb      	cbz	r3, 80075be <_strtod_l+0x8e6>
 8007582:	4b2d      	ldr	r3, [pc, #180]	; (8007638 <_strtod_l+0x960>)
 8007584:	403b      	ands	r3, r7
 8007586:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	d819      	bhi.n	80075c4 <_strtod_l+0x8ec>
 8007590:	0d1b      	lsrs	r3, r3, #20
 8007592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	4299      	cmp	r1, r3
 800759c:	d117      	bne.n	80075ce <_strtod_l+0x8f6>
 800759e:	4b29      	ldr	r3, [pc, #164]	; (8007644 <_strtod_l+0x96c>)
 80075a0:	429f      	cmp	r7, r3
 80075a2:	d102      	bne.n	80075aa <_strtod_l+0x8d2>
 80075a4:	3101      	adds	r1, #1
 80075a6:	f43f addf 	beq.w	8007168 <_strtod_l+0x490>
 80075aa:	4b23      	ldr	r3, [pc, #140]	; (8007638 <_strtod_l+0x960>)
 80075ac:	403b      	ands	r3, r7
 80075ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80075b2:	f04f 0a00 	mov.w	sl, #0
 80075b6:	9b04      	ldr	r3, [sp, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1a4      	bne.n	8007506 <_strtod_l+0x82e>
 80075bc:	e5de      	b.n	800717c <_strtod_l+0x4a4>
 80075be:	f04f 33ff 	mov.w	r3, #4294967295
 80075c2:	e7ea      	b.n	800759a <_strtod_l+0x8c2>
 80075c4:	4613      	mov	r3, r2
 80075c6:	e7e8      	b.n	800759a <_strtod_l+0x8c2>
 80075c8:	ea53 030a 	orrs.w	r3, r3, sl
 80075cc:	d08c      	beq.n	80074e8 <_strtod_l+0x810>
 80075ce:	9b08      	ldr	r3, [sp, #32]
 80075d0:	b1db      	cbz	r3, 800760a <_strtod_l+0x932>
 80075d2:	423b      	tst	r3, r7
 80075d4:	d0ef      	beq.n	80075b6 <_strtod_l+0x8de>
 80075d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d8:	9a04      	ldr	r2, [sp, #16]
 80075da:	4650      	mov	r0, sl
 80075dc:	4659      	mov	r1, fp
 80075de:	b1c3      	cbz	r3, 8007612 <_strtod_l+0x93a>
 80075e0:	f7ff fb5e 	bl	8006ca0 <sulp>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	ec51 0b18 	vmov	r0, r1, d8
 80075ec:	f7f8 fe4e 	bl	800028c <__adddf3>
 80075f0:	4682      	mov	sl, r0
 80075f2:	468b      	mov	fp, r1
 80075f4:	e7df      	b.n	80075b6 <_strtod_l+0x8de>
 80075f6:	4013      	ands	r3, r2
 80075f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80075fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007600:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007604:	f04f 3aff 	mov.w	sl, #4294967295
 8007608:	e7d5      	b.n	80075b6 <_strtod_l+0x8de>
 800760a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800760c:	ea13 0f0a 	tst.w	r3, sl
 8007610:	e7e0      	b.n	80075d4 <_strtod_l+0x8fc>
 8007612:	f7ff fb45 	bl	8006ca0 <sulp>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	ec51 0b18 	vmov	r0, r1, d8
 800761e:	f7f8 fe33 	bl	8000288 <__aeabi_dsub>
 8007622:	2200      	movs	r2, #0
 8007624:	2300      	movs	r3, #0
 8007626:	4682      	mov	sl, r0
 8007628:	468b      	mov	fp, r1
 800762a:	f7f9 fa4d 	bl	8000ac8 <__aeabi_dcmpeq>
 800762e:	2800      	cmp	r0, #0
 8007630:	d0c1      	beq.n	80075b6 <_strtod_l+0x8de>
 8007632:	e611      	b.n	8007258 <_strtod_l+0x580>
 8007634:	fffffc02 	.word	0xfffffc02
 8007638:	7ff00000 	.word	0x7ff00000
 800763c:	39500000 	.word	0x39500000
 8007640:	000fffff 	.word	0x000fffff
 8007644:	7fefffff 	.word	0x7fefffff
 8007648:	0800b6a8 	.word	0x0800b6a8
 800764c:	4631      	mov	r1, r6
 800764e:	4628      	mov	r0, r5
 8007650:	f002 fb1c 	bl	8009c8c <__ratio>
 8007654:	ec59 8b10 	vmov	r8, r9, d0
 8007658:	ee10 0a10 	vmov	r0, s0
 800765c:	2200      	movs	r2, #0
 800765e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007662:	4649      	mov	r1, r9
 8007664:	f7f9 fa44 	bl	8000af0 <__aeabi_dcmple>
 8007668:	2800      	cmp	r0, #0
 800766a:	d07a      	beq.n	8007762 <_strtod_l+0xa8a>
 800766c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800766e:	2b00      	cmp	r3, #0
 8007670:	d04a      	beq.n	8007708 <_strtod_l+0xa30>
 8007672:	4b95      	ldr	r3, [pc, #596]	; (80078c8 <_strtod_l+0xbf0>)
 8007674:	2200      	movs	r2, #0
 8007676:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800767a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80078c8 <_strtod_l+0xbf0>
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	4b92      	ldr	r3, [pc, #584]	; (80078cc <_strtod_l+0xbf4>)
 8007684:	403b      	ands	r3, r7
 8007686:	930d      	str	r3, [sp, #52]	; 0x34
 8007688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800768a:	4b91      	ldr	r3, [pc, #580]	; (80078d0 <_strtod_l+0xbf8>)
 800768c:	429a      	cmp	r2, r3
 800768e:	f040 80b0 	bne.w	80077f2 <_strtod_l+0xb1a>
 8007692:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007696:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800769a:	ec4b ab10 	vmov	d0, sl, fp
 800769e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076a2:	f002 fa1b 	bl	8009adc <__ulp>
 80076a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80076aa:	ec53 2b10 	vmov	r2, r3, d0
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	4652      	mov	r2, sl
 80076b4:	465b      	mov	r3, fp
 80076b6:	f7f8 fde9 	bl	800028c <__adddf3>
 80076ba:	460b      	mov	r3, r1
 80076bc:	4983      	ldr	r1, [pc, #524]	; (80078cc <_strtod_l+0xbf4>)
 80076be:	4a85      	ldr	r2, [pc, #532]	; (80078d4 <_strtod_l+0xbfc>)
 80076c0:	4019      	ands	r1, r3
 80076c2:	4291      	cmp	r1, r2
 80076c4:	4682      	mov	sl, r0
 80076c6:	d960      	bls.n	800778a <_strtod_l+0xab2>
 80076c8:	ee18 3a90 	vmov	r3, s17
 80076cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d104      	bne.n	80076de <_strtod_l+0xa06>
 80076d4:	ee18 3a10 	vmov	r3, s16
 80076d8:	3301      	adds	r3, #1
 80076da:	f43f ad45 	beq.w	8007168 <_strtod_l+0x490>
 80076de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80078e0 <_strtod_l+0xc08>
 80076e2:	f04f 3aff 	mov.w	sl, #4294967295
 80076e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076e8:	4620      	mov	r0, r4
 80076ea:	f001 fec5 	bl	8009478 <_Bfree>
 80076ee:	9905      	ldr	r1, [sp, #20]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f001 fec1 	bl	8009478 <_Bfree>
 80076f6:	4631      	mov	r1, r6
 80076f8:	4620      	mov	r0, r4
 80076fa:	f001 febd 	bl	8009478 <_Bfree>
 80076fe:	4629      	mov	r1, r5
 8007700:	4620      	mov	r0, r4
 8007702:	f001 feb9 	bl	8009478 <_Bfree>
 8007706:	e61a      	b.n	800733e <_strtod_l+0x666>
 8007708:	f1ba 0f00 	cmp.w	sl, #0
 800770c:	d11b      	bne.n	8007746 <_strtod_l+0xa6e>
 800770e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007712:	b9f3      	cbnz	r3, 8007752 <_strtod_l+0xa7a>
 8007714:	4b6c      	ldr	r3, [pc, #432]	; (80078c8 <_strtod_l+0xbf0>)
 8007716:	2200      	movs	r2, #0
 8007718:	4640      	mov	r0, r8
 800771a:	4649      	mov	r1, r9
 800771c:	f7f9 f9de 	bl	8000adc <__aeabi_dcmplt>
 8007720:	b9d0      	cbnz	r0, 8007758 <_strtod_l+0xa80>
 8007722:	4640      	mov	r0, r8
 8007724:	4649      	mov	r1, r9
 8007726:	4b6c      	ldr	r3, [pc, #432]	; (80078d8 <_strtod_l+0xc00>)
 8007728:	2200      	movs	r2, #0
 800772a:	f7f8 ff65 	bl	80005f8 <__aeabi_dmul>
 800772e:	4680      	mov	r8, r0
 8007730:	4689      	mov	r9, r1
 8007732:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007736:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800773a:	9315      	str	r3, [sp, #84]	; 0x54
 800773c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007744:	e79d      	b.n	8007682 <_strtod_l+0x9aa>
 8007746:	f1ba 0f01 	cmp.w	sl, #1
 800774a:	d102      	bne.n	8007752 <_strtod_l+0xa7a>
 800774c:	2f00      	cmp	r7, #0
 800774e:	f43f ad83 	beq.w	8007258 <_strtod_l+0x580>
 8007752:	4b62      	ldr	r3, [pc, #392]	; (80078dc <_strtod_l+0xc04>)
 8007754:	2200      	movs	r2, #0
 8007756:	e78e      	b.n	8007676 <_strtod_l+0x99e>
 8007758:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80078d8 <_strtod_l+0xc00>
 800775c:	f04f 0800 	mov.w	r8, #0
 8007760:	e7e7      	b.n	8007732 <_strtod_l+0xa5a>
 8007762:	4b5d      	ldr	r3, [pc, #372]	; (80078d8 <_strtod_l+0xc00>)
 8007764:	4640      	mov	r0, r8
 8007766:	4649      	mov	r1, r9
 8007768:	2200      	movs	r2, #0
 800776a:	f7f8 ff45 	bl	80005f8 <__aeabi_dmul>
 800776e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007770:	4680      	mov	r8, r0
 8007772:	4689      	mov	r9, r1
 8007774:	b933      	cbnz	r3, 8007784 <_strtod_l+0xaac>
 8007776:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800777a:	900e      	str	r0, [sp, #56]	; 0x38
 800777c:	930f      	str	r3, [sp, #60]	; 0x3c
 800777e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007782:	e7dd      	b.n	8007740 <_strtod_l+0xa68>
 8007784:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007788:	e7f9      	b.n	800777e <_strtod_l+0xaa6>
 800778a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800778e:	9b04      	ldr	r3, [sp, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1a8      	bne.n	80076e6 <_strtod_l+0xa0e>
 8007794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007798:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800779a:	0d1b      	lsrs	r3, r3, #20
 800779c:	051b      	lsls	r3, r3, #20
 800779e:	429a      	cmp	r2, r3
 80077a0:	d1a1      	bne.n	80076e6 <_strtod_l+0xa0e>
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f9 fa87 	bl	8000cb8 <__aeabi_d2lz>
 80077aa:	f7f8 fef7 	bl	800059c <__aeabi_l2d>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 fd67 	bl	8000288 <__aeabi_dsub>
 80077ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077c0:	ea43 030a 	orr.w	r3, r3, sl
 80077c4:	4313      	orrs	r3, r2
 80077c6:	4680      	mov	r8, r0
 80077c8:	4689      	mov	r9, r1
 80077ca:	d055      	beq.n	8007878 <_strtod_l+0xba0>
 80077cc:	a336      	add	r3, pc, #216	; (adr r3, 80078a8 <_strtod_l+0xbd0>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f9 f983 	bl	8000adc <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f47f acd0 	bne.w	800717c <_strtod_l+0x4a4>
 80077dc:	a334      	add	r3, pc, #208	; (adr r3, 80078b0 <_strtod_l+0xbd8>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	4640      	mov	r0, r8
 80077e4:	4649      	mov	r1, r9
 80077e6:	f7f9 f997 	bl	8000b18 <__aeabi_dcmpgt>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f af7b 	beq.w	80076e6 <_strtod_l+0xa0e>
 80077f0:	e4c4      	b.n	800717c <_strtod_l+0x4a4>
 80077f2:	9b04      	ldr	r3, [sp, #16]
 80077f4:	b333      	cbz	r3, 8007844 <_strtod_l+0xb6c>
 80077f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077fc:	d822      	bhi.n	8007844 <_strtod_l+0xb6c>
 80077fe:	a32e      	add	r3, pc, #184	; (adr r3, 80078b8 <_strtod_l+0xbe0>)
 8007800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007804:	4640      	mov	r0, r8
 8007806:	4649      	mov	r1, r9
 8007808:	f7f9 f972 	bl	8000af0 <__aeabi_dcmple>
 800780c:	b1a0      	cbz	r0, 8007838 <_strtod_l+0xb60>
 800780e:	4649      	mov	r1, r9
 8007810:	4640      	mov	r0, r8
 8007812:	f7f9 f9c9 	bl	8000ba8 <__aeabi_d2uiz>
 8007816:	2801      	cmp	r0, #1
 8007818:	bf38      	it	cc
 800781a:	2001      	movcc	r0, #1
 800781c:	f7f8 fe72 	bl	8000504 <__aeabi_ui2d>
 8007820:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007822:	4680      	mov	r8, r0
 8007824:	4689      	mov	r9, r1
 8007826:	bb23      	cbnz	r3, 8007872 <_strtod_l+0xb9a>
 8007828:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800782c:	9010      	str	r0, [sp, #64]	; 0x40
 800782e:	9311      	str	r3, [sp, #68]	; 0x44
 8007830:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007834:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800783c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007840:	1a9b      	subs	r3, r3, r2
 8007842:	9309      	str	r3, [sp, #36]	; 0x24
 8007844:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007848:	eeb0 0a48 	vmov.f32	s0, s16
 800784c:	eef0 0a68 	vmov.f32	s1, s17
 8007850:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007854:	f002 f942 	bl	8009adc <__ulp>
 8007858:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800785c:	ec53 2b10 	vmov	r2, r3, d0
 8007860:	f7f8 feca 	bl	80005f8 <__aeabi_dmul>
 8007864:	ec53 2b18 	vmov	r2, r3, d8
 8007868:	f7f8 fd10 	bl	800028c <__adddf3>
 800786c:	4682      	mov	sl, r0
 800786e:	468b      	mov	fp, r1
 8007870:	e78d      	b.n	800778e <_strtod_l+0xab6>
 8007872:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007876:	e7db      	b.n	8007830 <_strtod_l+0xb58>
 8007878:	a311      	add	r3, pc, #68	; (adr r3, 80078c0 <_strtod_l+0xbe8>)
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f7f9 f92d 	bl	8000adc <__aeabi_dcmplt>
 8007882:	e7b2      	b.n	80077ea <_strtod_l+0xb12>
 8007884:	2300      	movs	r3, #0
 8007886:	930a      	str	r3, [sp, #40]	; 0x28
 8007888:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800788a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	f7ff ba6b 	b.w	8006d68 <_strtod_l+0x90>
 8007892:	2a65      	cmp	r2, #101	; 0x65
 8007894:	f43f ab5f 	beq.w	8006f56 <_strtod_l+0x27e>
 8007898:	2a45      	cmp	r2, #69	; 0x45
 800789a:	f43f ab5c 	beq.w	8006f56 <_strtod_l+0x27e>
 800789e:	2301      	movs	r3, #1
 80078a0:	f7ff bb94 	b.w	8006fcc <_strtod_l+0x2f4>
 80078a4:	f3af 8000 	nop.w
 80078a8:	94a03595 	.word	0x94a03595
 80078ac:	3fdfffff 	.word	0x3fdfffff
 80078b0:	35afe535 	.word	0x35afe535
 80078b4:	3fe00000 	.word	0x3fe00000
 80078b8:	ffc00000 	.word	0xffc00000
 80078bc:	41dfffff 	.word	0x41dfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fcfffff 	.word	0x3fcfffff
 80078c8:	3ff00000 	.word	0x3ff00000
 80078cc:	7ff00000 	.word	0x7ff00000
 80078d0:	7fe00000 	.word	0x7fe00000
 80078d4:	7c9fffff 	.word	0x7c9fffff
 80078d8:	3fe00000 	.word	0x3fe00000
 80078dc:	bff00000 	.word	0xbff00000
 80078e0:	7fefffff 	.word	0x7fefffff

080078e4 <_strtod_r>:
 80078e4:	4b01      	ldr	r3, [pc, #4]	; (80078ec <_strtod_r+0x8>)
 80078e6:	f7ff b9f7 	b.w	8006cd8 <_strtod_l>
 80078ea:	bf00      	nop
 80078ec:	200002fc 	.word	0x200002fc

080078f0 <_strtol_l.constprop.0>:
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f6:	d001      	beq.n	80078fc <_strtol_l.constprop.0+0xc>
 80078f8:	2b24      	cmp	r3, #36	; 0x24
 80078fa:	d906      	bls.n	800790a <_strtol_l.constprop.0+0x1a>
 80078fc:	f7fe fa70 	bl	8005de0 <__errno>
 8007900:	2316      	movs	r3, #22
 8007902:	6003      	str	r3, [r0, #0]
 8007904:	2000      	movs	r0, #0
 8007906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800790a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80079f0 <_strtol_l.constprop.0+0x100>
 800790e:	460d      	mov	r5, r1
 8007910:	462e      	mov	r6, r5
 8007912:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007916:	f814 700c 	ldrb.w	r7, [r4, ip]
 800791a:	f017 0708 	ands.w	r7, r7, #8
 800791e:	d1f7      	bne.n	8007910 <_strtol_l.constprop.0+0x20>
 8007920:	2c2d      	cmp	r4, #45	; 0x2d
 8007922:	d132      	bne.n	800798a <_strtol_l.constprop.0+0x9a>
 8007924:	782c      	ldrb	r4, [r5, #0]
 8007926:	2701      	movs	r7, #1
 8007928:	1cb5      	adds	r5, r6, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d05b      	beq.n	80079e6 <_strtol_l.constprop.0+0xf6>
 800792e:	2b10      	cmp	r3, #16
 8007930:	d109      	bne.n	8007946 <_strtol_l.constprop.0+0x56>
 8007932:	2c30      	cmp	r4, #48	; 0x30
 8007934:	d107      	bne.n	8007946 <_strtol_l.constprop.0+0x56>
 8007936:	782c      	ldrb	r4, [r5, #0]
 8007938:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800793c:	2c58      	cmp	r4, #88	; 0x58
 800793e:	d14d      	bne.n	80079dc <_strtol_l.constprop.0+0xec>
 8007940:	786c      	ldrb	r4, [r5, #1]
 8007942:	2310      	movs	r3, #16
 8007944:	3502      	adds	r5, #2
 8007946:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800794a:	f108 38ff 	add.w	r8, r8, #4294967295
 800794e:	f04f 0c00 	mov.w	ip, #0
 8007952:	fbb8 f9f3 	udiv	r9, r8, r3
 8007956:	4666      	mov	r6, ip
 8007958:	fb03 8a19 	mls	sl, r3, r9, r8
 800795c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007960:	f1be 0f09 	cmp.w	lr, #9
 8007964:	d816      	bhi.n	8007994 <_strtol_l.constprop.0+0xa4>
 8007966:	4674      	mov	r4, lr
 8007968:	42a3      	cmp	r3, r4
 800796a:	dd24      	ble.n	80079b6 <_strtol_l.constprop.0+0xc6>
 800796c:	f1bc 0f00 	cmp.w	ip, #0
 8007970:	db1e      	blt.n	80079b0 <_strtol_l.constprop.0+0xc0>
 8007972:	45b1      	cmp	r9, r6
 8007974:	d31c      	bcc.n	80079b0 <_strtol_l.constprop.0+0xc0>
 8007976:	d101      	bne.n	800797c <_strtol_l.constprop.0+0x8c>
 8007978:	45a2      	cmp	sl, r4
 800797a:	db19      	blt.n	80079b0 <_strtol_l.constprop.0+0xc0>
 800797c:	fb06 4603 	mla	r6, r6, r3, r4
 8007980:	f04f 0c01 	mov.w	ip, #1
 8007984:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007988:	e7e8      	b.n	800795c <_strtol_l.constprop.0+0x6c>
 800798a:	2c2b      	cmp	r4, #43	; 0x2b
 800798c:	bf04      	itt	eq
 800798e:	782c      	ldrbeq	r4, [r5, #0]
 8007990:	1cb5      	addeq	r5, r6, #2
 8007992:	e7ca      	b.n	800792a <_strtol_l.constprop.0+0x3a>
 8007994:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007998:	f1be 0f19 	cmp.w	lr, #25
 800799c:	d801      	bhi.n	80079a2 <_strtol_l.constprop.0+0xb2>
 800799e:	3c37      	subs	r4, #55	; 0x37
 80079a0:	e7e2      	b.n	8007968 <_strtol_l.constprop.0+0x78>
 80079a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80079a6:	f1be 0f19 	cmp.w	lr, #25
 80079aa:	d804      	bhi.n	80079b6 <_strtol_l.constprop.0+0xc6>
 80079ac:	3c57      	subs	r4, #87	; 0x57
 80079ae:	e7db      	b.n	8007968 <_strtol_l.constprop.0+0x78>
 80079b0:	f04f 3cff 	mov.w	ip, #4294967295
 80079b4:	e7e6      	b.n	8007984 <_strtol_l.constprop.0+0x94>
 80079b6:	f1bc 0f00 	cmp.w	ip, #0
 80079ba:	da05      	bge.n	80079c8 <_strtol_l.constprop.0+0xd8>
 80079bc:	2322      	movs	r3, #34	; 0x22
 80079be:	6003      	str	r3, [r0, #0]
 80079c0:	4646      	mov	r6, r8
 80079c2:	b942      	cbnz	r2, 80079d6 <_strtol_l.constprop.0+0xe6>
 80079c4:	4630      	mov	r0, r6
 80079c6:	e79e      	b.n	8007906 <_strtol_l.constprop.0+0x16>
 80079c8:	b107      	cbz	r7, 80079cc <_strtol_l.constprop.0+0xdc>
 80079ca:	4276      	negs	r6, r6
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	d0f9      	beq.n	80079c4 <_strtol_l.constprop.0+0xd4>
 80079d0:	f1bc 0f00 	cmp.w	ip, #0
 80079d4:	d000      	beq.n	80079d8 <_strtol_l.constprop.0+0xe8>
 80079d6:	1e69      	subs	r1, r5, #1
 80079d8:	6011      	str	r1, [r2, #0]
 80079da:	e7f3      	b.n	80079c4 <_strtol_l.constprop.0+0xd4>
 80079dc:	2430      	movs	r4, #48	; 0x30
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d1b1      	bne.n	8007946 <_strtol_l.constprop.0+0x56>
 80079e2:	2308      	movs	r3, #8
 80079e4:	e7af      	b.n	8007946 <_strtol_l.constprop.0+0x56>
 80079e6:	2c30      	cmp	r4, #48	; 0x30
 80079e8:	d0a5      	beq.n	8007936 <_strtol_l.constprop.0+0x46>
 80079ea:	230a      	movs	r3, #10
 80079ec:	e7ab      	b.n	8007946 <_strtol_l.constprop.0+0x56>
 80079ee:	bf00      	nop
 80079f0:	0800b6d1 	.word	0x0800b6d1

080079f4 <_strtol_r>:
 80079f4:	f7ff bf7c 	b.w	80078f0 <_strtol_l.constprop.0>

080079f8 <strtol>:
 80079f8:	4613      	mov	r3, r2
 80079fa:	460a      	mov	r2, r1
 80079fc:	4601      	mov	r1, r0
 80079fe:	4802      	ldr	r0, [pc, #8]	; (8007a08 <strtol+0x10>)
 8007a00:	6800      	ldr	r0, [r0, #0]
 8007a02:	f7ff bf75 	b.w	80078f0 <_strtol_l.constprop.0>
 8007a06:	bf00      	nop
 8007a08:	20000294 	.word	0x20000294

08007a0c <__swbuf_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	460e      	mov	r6, r1
 8007a10:	4614      	mov	r4, r2
 8007a12:	4605      	mov	r5, r0
 8007a14:	b118      	cbz	r0, 8007a1e <__swbuf_r+0x12>
 8007a16:	6983      	ldr	r3, [r0, #24]
 8007a18:	b90b      	cbnz	r3, 8007a1e <__swbuf_r+0x12>
 8007a1a:	f001 f84d 	bl	8008ab8 <__sinit>
 8007a1e:	4b21      	ldr	r3, [pc, #132]	; (8007aa4 <__swbuf_r+0x98>)
 8007a20:	429c      	cmp	r4, r3
 8007a22:	d12b      	bne.n	8007a7c <__swbuf_r+0x70>
 8007a24:	686c      	ldr	r4, [r5, #4]
 8007a26:	69a3      	ldr	r3, [r4, #24]
 8007a28:	60a3      	str	r3, [r4, #8]
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	071a      	lsls	r2, r3, #28
 8007a2e:	d52f      	bpl.n	8007a90 <__swbuf_r+0x84>
 8007a30:	6923      	ldr	r3, [r4, #16]
 8007a32:	b36b      	cbz	r3, 8007a90 <__swbuf_r+0x84>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	6820      	ldr	r0, [r4, #0]
 8007a38:	1ac0      	subs	r0, r0, r3
 8007a3a:	6963      	ldr	r3, [r4, #20]
 8007a3c:	b2f6      	uxtb	r6, r6
 8007a3e:	4283      	cmp	r3, r0
 8007a40:	4637      	mov	r7, r6
 8007a42:	dc04      	bgt.n	8007a4e <__swbuf_r+0x42>
 8007a44:	4621      	mov	r1, r4
 8007a46:	4628      	mov	r0, r5
 8007a48:	f000 ffa2 	bl	8008990 <_fflush_r>
 8007a4c:	bb30      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	3b01      	subs	r3, #1
 8007a52:	60a3      	str	r3, [r4, #8]
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	1c5a      	adds	r2, r3, #1
 8007a58:	6022      	str	r2, [r4, #0]
 8007a5a:	701e      	strb	r6, [r3, #0]
 8007a5c:	6963      	ldr	r3, [r4, #20]
 8007a5e:	3001      	adds	r0, #1
 8007a60:	4283      	cmp	r3, r0
 8007a62:	d004      	beq.n	8007a6e <__swbuf_r+0x62>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d506      	bpl.n	8007a78 <__swbuf_r+0x6c>
 8007a6a:	2e0a      	cmp	r6, #10
 8007a6c:	d104      	bne.n	8007a78 <__swbuf_r+0x6c>
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4628      	mov	r0, r5
 8007a72:	f000 ff8d 	bl	8008990 <_fflush_r>
 8007a76:	b988      	cbnz	r0, 8007a9c <__swbuf_r+0x90>
 8007a78:	4638      	mov	r0, r7
 8007a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a7c:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <__swbuf_r+0x9c>)
 8007a7e:	429c      	cmp	r4, r3
 8007a80:	d101      	bne.n	8007a86 <__swbuf_r+0x7a>
 8007a82:	68ac      	ldr	r4, [r5, #8]
 8007a84:	e7cf      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <__swbuf_r+0xa0>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	bf08      	it	eq
 8007a8c:	68ec      	ldreq	r4, [r5, #12]
 8007a8e:	e7ca      	b.n	8007a26 <__swbuf_r+0x1a>
 8007a90:	4621      	mov	r1, r4
 8007a92:	4628      	mov	r0, r5
 8007a94:	f000 f80c 	bl	8007ab0 <__swsetup_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	d0cb      	beq.n	8007a34 <__swbuf_r+0x28>
 8007a9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007aa0:	e7ea      	b.n	8007a78 <__swbuf_r+0x6c>
 8007aa2:	bf00      	nop
 8007aa4:	0800b884 	.word	0x0800b884
 8007aa8:	0800b8a4 	.word	0x0800b8a4
 8007aac:	0800b864 	.word	0x0800b864

08007ab0 <__swsetup_r>:
 8007ab0:	4b32      	ldr	r3, [pc, #200]	; (8007b7c <__swsetup_r+0xcc>)
 8007ab2:	b570      	push	{r4, r5, r6, lr}
 8007ab4:	681d      	ldr	r5, [r3, #0]
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	b125      	cbz	r5, 8007ac6 <__swsetup_r+0x16>
 8007abc:	69ab      	ldr	r3, [r5, #24]
 8007abe:	b913      	cbnz	r3, 8007ac6 <__swsetup_r+0x16>
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 fff9 	bl	8008ab8 <__sinit>
 8007ac6:	4b2e      	ldr	r3, [pc, #184]	; (8007b80 <__swsetup_r+0xd0>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d10f      	bne.n	8007aec <__swsetup_r+0x3c>
 8007acc:	686c      	ldr	r4, [r5, #4]
 8007ace:	89a3      	ldrh	r3, [r4, #12]
 8007ad0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ad4:	0719      	lsls	r1, r3, #28
 8007ad6:	d42c      	bmi.n	8007b32 <__swsetup_r+0x82>
 8007ad8:	06dd      	lsls	r5, r3, #27
 8007ada:	d411      	bmi.n	8007b00 <__swsetup_r+0x50>
 8007adc:	2309      	movs	r3, #9
 8007ade:	6033      	str	r3, [r6, #0]
 8007ae0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ae4:	81a3      	strh	r3, [r4, #12]
 8007ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8007aea:	e03e      	b.n	8007b6a <__swsetup_r+0xba>
 8007aec:	4b25      	ldr	r3, [pc, #148]	; (8007b84 <__swsetup_r+0xd4>)
 8007aee:	429c      	cmp	r4, r3
 8007af0:	d101      	bne.n	8007af6 <__swsetup_r+0x46>
 8007af2:	68ac      	ldr	r4, [r5, #8]
 8007af4:	e7eb      	b.n	8007ace <__swsetup_r+0x1e>
 8007af6:	4b24      	ldr	r3, [pc, #144]	; (8007b88 <__swsetup_r+0xd8>)
 8007af8:	429c      	cmp	r4, r3
 8007afa:	bf08      	it	eq
 8007afc:	68ec      	ldreq	r4, [r5, #12]
 8007afe:	e7e6      	b.n	8007ace <__swsetup_r+0x1e>
 8007b00:	0758      	lsls	r0, r3, #29
 8007b02:	d512      	bpl.n	8007b2a <__swsetup_r+0x7a>
 8007b04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b06:	b141      	cbz	r1, 8007b1a <__swsetup_r+0x6a>
 8007b08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	d002      	beq.n	8007b16 <__swsetup_r+0x66>
 8007b10:	4630      	mov	r0, r6
 8007b12:	f002 f949 	bl	8009da8 <_free_r>
 8007b16:	2300      	movs	r3, #0
 8007b18:	6363      	str	r3, [r4, #52]	; 0x34
 8007b1a:	89a3      	ldrh	r3, [r4, #12]
 8007b1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	2300      	movs	r3, #0
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	6923      	ldr	r3, [r4, #16]
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	89a3      	ldrh	r3, [r4, #12]
 8007b2c:	f043 0308 	orr.w	r3, r3, #8
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	b94b      	cbnz	r3, 8007b4a <__swsetup_r+0x9a>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b40:	d003      	beq.n	8007b4a <__swsetup_r+0x9a>
 8007b42:	4621      	mov	r1, r4
 8007b44:	4630      	mov	r0, r6
 8007b46:	f001 fbef 	bl	8009328 <__smakebuf_r>
 8007b4a:	89a0      	ldrh	r0, [r4, #12]
 8007b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b50:	f010 0301 	ands.w	r3, r0, #1
 8007b54:	d00a      	beq.n	8007b6c <__swsetup_r+0xbc>
 8007b56:	2300      	movs	r3, #0
 8007b58:	60a3      	str	r3, [r4, #8]
 8007b5a:	6963      	ldr	r3, [r4, #20]
 8007b5c:	425b      	negs	r3, r3
 8007b5e:	61a3      	str	r3, [r4, #24]
 8007b60:	6923      	ldr	r3, [r4, #16]
 8007b62:	b943      	cbnz	r3, 8007b76 <__swsetup_r+0xc6>
 8007b64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b68:	d1ba      	bne.n	8007ae0 <__swsetup_r+0x30>
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	0781      	lsls	r1, r0, #30
 8007b6e:	bf58      	it	pl
 8007b70:	6963      	ldrpl	r3, [r4, #20]
 8007b72:	60a3      	str	r3, [r4, #8]
 8007b74:	e7f4      	b.n	8007b60 <__swsetup_r+0xb0>
 8007b76:	2000      	movs	r0, #0
 8007b78:	e7f7      	b.n	8007b6a <__swsetup_r+0xba>
 8007b7a:	bf00      	nop
 8007b7c:	20000294 	.word	0x20000294
 8007b80:	0800b884 	.word	0x0800b884
 8007b84:	0800b8a4 	.word	0x0800b8a4
 8007b88:	0800b864 	.word	0x0800b864

08007b8c <quorem>:
 8007b8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b90:	6903      	ldr	r3, [r0, #16]
 8007b92:	690c      	ldr	r4, [r1, #16]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	4607      	mov	r7, r0
 8007b98:	f2c0 8081 	blt.w	8007c9e <quorem+0x112>
 8007b9c:	3c01      	subs	r4, #1
 8007b9e:	f101 0814 	add.w	r8, r1, #20
 8007ba2:	f100 0514 	add.w	r5, r0, #20
 8007ba6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bc4:	d331      	bcc.n	8007c2a <quorem+0x9e>
 8007bc6:	f04f 0e00 	mov.w	lr, #0
 8007bca:	4640      	mov	r0, r8
 8007bcc:	46ac      	mov	ip, r5
 8007bce:	46f2      	mov	sl, lr
 8007bd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bd4:	b293      	uxth	r3, r2
 8007bd6:	fb06 e303 	mla	r3, r6, r3, lr
 8007bda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	ebaa 0303 	sub.w	r3, sl, r3
 8007be4:	f8dc a000 	ldr.w	sl, [ip]
 8007be8:	0c12      	lsrs	r2, r2, #16
 8007bea:	fa13 f38a 	uxtah	r3, r3, sl
 8007bee:	fb06 e202 	mla	r2, r6, r2, lr
 8007bf2:	9300      	str	r3, [sp, #0]
 8007bf4:	9b00      	ldr	r3, [sp, #0]
 8007bf6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bfa:	b292      	uxth	r2, r2
 8007bfc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c04:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c08:	4581      	cmp	r9, r0
 8007c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007c12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c16:	d2db      	bcs.n	8007bd0 <quorem+0x44>
 8007c18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c1c:	b92b      	cbnz	r3, 8007c2a <quorem+0x9e>
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	3b04      	subs	r3, #4
 8007c22:	429d      	cmp	r5, r3
 8007c24:	461a      	mov	r2, r3
 8007c26:	d32e      	bcc.n	8007c86 <quorem+0xfa>
 8007c28:	613c      	str	r4, [r7, #16]
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	f001 feb0 	bl	8009990 <__mcmp>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	db24      	blt.n	8007c7e <quorem+0xf2>
 8007c34:	3601      	adds	r6, #1
 8007c36:	4628      	mov	r0, r5
 8007c38:	f04f 0c00 	mov.w	ip, #0
 8007c3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c40:	f8d0 e000 	ldr.w	lr, [r0]
 8007c44:	b293      	uxth	r3, r2
 8007c46:	ebac 0303 	sub.w	r3, ip, r3
 8007c4a:	0c12      	lsrs	r2, r2, #16
 8007c4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007c50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c5e:	45c1      	cmp	r9, r8
 8007c60:	f840 3b04 	str.w	r3, [r0], #4
 8007c64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c68:	d2e8      	bcs.n	8007c3c <quorem+0xb0>
 8007c6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c72:	b922      	cbnz	r2, 8007c7e <quorem+0xf2>
 8007c74:	3b04      	subs	r3, #4
 8007c76:	429d      	cmp	r5, r3
 8007c78:	461a      	mov	r2, r3
 8007c7a:	d30a      	bcc.n	8007c92 <quorem+0x106>
 8007c7c:	613c      	str	r4, [r7, #16]
 8007c7e:	4630      	mov	r0, r6
 8007c80:	b003      	add	sp, #12
 8007c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	3b04      	subs	r3, #4
 8007c8a:	2a00      	cmp	r2, #0
 8007c8c:	d1cc      	bne.n	8007c28 <quorem+0x9c>
 8007c8e:	3c01      	subs	r4, #1
 8007c90:	e7c7      	b.n	8007c22 <quorem+0x96>
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1f0      	bne.n	8007c7c <quorem+0xf0>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7eb      	b.n	8007c76 <quorem+0xea>
 8007c9e:	2000      	movs	r0, #0
 8007ca0:	e7ee      	b.n	8007c80 <quorem+0xf4>
 8007ca2:	0000      	movs	r0, r0
 8007ca4:	0000      	movs	r0, r0
	...

08007ca8 <_dtoa_r>:
 8007ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cac:	ed2d 8b04 	vpush	{d8-d9}
 8007cb0:	ec57 6b10 	vmov	r6, r7, d0
 8007cb4:	b093      	sub	sp, #76	; 0x4c
 8007cb6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cb8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cbc:	9106      	str	r1, [sp, #24]
 8007cbe:	ee10 aa10 	vmov	sl, s0
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	930c      	str	r3, [sp, #48]	; 0x30
 8007cc8:	46bb      	mov	fp, r7
 8007cca:	b975      	cbnz	r5, 8007cea <_dtoa_r+0x42>
 8007ccc:	2010      	movs	r0, #16
 8007cce:	f001 fb6b 	bl	80093a8 <malloc>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	6260      	str	r0, [r4, #36]	; 0x24
 8007cd6:	b920      	cbnz	r0, 8007ce2 <_dtoa_r+0x3a>
 8007cd8:	4ba7      	ldr	r3, [pc, #668]	; (8007f78 <_dtoa_r+0x2d0>)
 8007cda:	21ea      	movs	r1, #234	; 0xea
 8007cdc:	48a7      	ldr	r0, [pc, #668]	; (8007f7c <_dtoa_r+0x2d4>)
 8007cde:	f002 fc89 	bl	800a5f4 <__assert_func>
 8007ce2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ce6:	6005      	str	r5, [r0, #0]
 8007ce8:	60c5      	str	r5, [r0, #12]
 8007cea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cec:	6819      	ldr	r1, [r3, #0]
 8007cee:	b151      	cbz	r1, 8007d06 <_dtoa_r+0x5e>
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	604a      	str	r2, [r1, #4]
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	4093      	lsls	r3, r2
 8007cf8:	608b      	str	r3, [r1, #8]
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	f001 fbbc 	bl	8009478 <_Bfree>
 8007d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	1e3b      	subs	r3, r7, #0
 8007d08:	bfaa      	itet	ge
 8007d0a:	2300      	movge	r3, #0
 8007d0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d10:	f8c8 3000 	strge.w	r3, [r8]
 8007d14:	4b9a      	ldr	r3, [pc, #616]	; (8007f80 <_dtoa_r+0x2d8>)
 8007d16:	bfbc      	itt	lt
 8007d18:	2201      	movlt	r2, #1
 8007d1a:	f8c8 2000 	strlt.w	r2, [r8]
 8007d1e:	ea33 030b 	bics.w	r3, r3, fp
 8007d22:	d11b      	bne.n	8007d5c <_dtoa_r+0xb4>
 8007d24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d26:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d2a:	6013      	str	r3, [r2, #0]
 8007d2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d30:	4333      	orrs	r3, r6
 8007d32:	f000 8592 	beq.w	800885a <_dtoa_r+0xbb2>
 8007d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d38:	b963      	cbnz	r3, 8007d54 <_dtoa_r+0xac>
 8007d3a:	4b92      	ldr	r3, [pc, #584]	; (8007f84 <_dtoa_r+0x2dc>)
 8007d3c:	e022      	b.n	8007d84 <_dtoa_r+0xdc>
 8007d3e:	4b92      	ldr	r3, [pc, #584]	; (8007f88 <_dtoa_r+0x2e0>)
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	3308      	adds	r3, #8
 8007d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d46:	6013      	str	r3, [r2, #0]
 8007d48:	9801      	ldr	r0, [sp, #4]
 8007d4a:	b013      	add	sp, #76	; 0x4c
 8007d4c:	ecbd 8b04 	vpop	{d8-d9}
 8007d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d54:	4b8b      	ldr	r3, [pc, #556]	; (8007f84 <_dtoa_r+0x2dc>)
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	3303      	adds	r3, #3
 8007d5a:	e7f3      	b.n	8007d44 <_dtoa_r+0x9c>
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	4650      	mov	r0, sl
 8007d62:	4659      	mov	r1, fp
 8007d64:	f7f8 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d68:	ec4b ab19 	vmov	d9, sl, fp
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	b158      	cbz	r0, 8007d88 <_dtoa_r+0xe0>
 8007d70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d72:	2301      	movs	r3, #1
 8007d74:	6013      	str	r3, [r2, #0]
 8007d76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 856b 	beq.w	8008854 <_dtoa_r+0xbac>
 8007d7e:	4883      	ldr	r0, [pc, #524]	; (8007f8c <_dtoa_r+0x2e4>)
 8007d80:	6018      	str	r0, [r3, #0]
 8007d82:	1e43      	subs	r3, r0, #1
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	e7df      	b.n	8007d48 <_dtoa_r+0xa0>
 8007d88:	ec4b ab10 	vmov	d0, sl, fp
 8007d8c:	aa10      	add	r2, sp, #64	; 0x40
 8007d8e:	a911      	add	r1, sp, #68	; 0x44
 8007d90:	4620      	mov	r0, r4
 8007d92:	f001 ff1f 	bl	8009bd4 <__d2b>
 8007d96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d9a:	ee08 0a10 	vmov	s16, r0
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	f000 8084 	beq.w	8007eac <_dtoa_r+0x204>
 8007da4:	ee19 3a90 	vmov	r3, s19
 8007da8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007db0:	4656      	mov	r6, sl
 8007db2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007db6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dbe:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <_dtoa_r+0x2e8>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	4639      	mov	r1, r7
 8007dc6:	f7f8 fa5f 	bl	8000288 <__aeabi_dsub>
 8007dca:	a365      	add	r3, pc, #404	; (adr r3, 8007f60 <_dtoa_r+0x2b8>)
 8007dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd0:	f7f8 fc12 	bl	80005f8 <__aeabi_dmul>
 8007dd4:	a364      	add	r3, pc, #400	; (adr r3, 8007f68 <_dtoa_r+0x2c0>)
 8007dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dda:	f7f8 fa57 	bl	800028c <__adddf3>
 8007dde:	4606      	mov	r6, r0
 8007de0:	4628      	mov	r0, r5
 8007de2:	460f      	mov	r7, r1
 8007de4:	f7f8 fb9e 	bl	8000524 <__aeabi_i2d>
 8007de8:	a361      	add	r3, pc, #388	; (adr r3, 8007f70 <_dtoa_r+0x2c8>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	f7f8 fc03 	bl	80005f8 <__aeabi_dmul>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4630      	mov	r0, r6
 8007df8:	4639      	mov	r1, r7
 8007dfa:	f7f8 fa47 	bl	800028c <__adddf3>
 8007dfe:	4606      	mov	r6, r0
 8007e00:	460f      	mov	r7, r1
 8007e02:	f7f8 fea9 	bl	8000b58 <__aeabi_d2iz>
 8007e06:	2200      	movs	r2, #0
 8007e08:	9000      	str	r0, [sp, #0]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4630      	mov	r0, r6
 8007e0e:	4639      	mov	r1, r7
 8007e10:	f7f8 fe64 	bl	8000adc <__aeabi_dcmplt>
 8007e14:	b150      	cbz	r0, 8007e2c <_dtoa_r+0x184>
 8007e16:	9800      	ldr	r0, [sp, #0]
 8007e18:	f7f8 fb84 	bl	8000524 <__aeabi_i2d>
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	463b      	mov	r3, r7
 8007e20:	f7f8 fe52 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e24:	b910      	cbnz	r0, 8007e2c <_dtoa_r+0x184>
 8007e26:	9b00      	ldr	r3, [sp, #0]
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	9300      	str	r3, [sp, #0]
 8007e2c:	9b00      	ldr	r3, [sp, #0]
 8007e2e:	2b16      	cmp	r3, #22
 8007e30:	d85a      	bhi.n	8007ee8 <_dtoa_r+0x240>
 8007e32:	9a00      	ldr	r2, [sp, #0]
 8007e34:	4b57      	ldr	r3, [pc, #348]	; (8007f94 <_dtoa_r+0x2ec>)
 8007e36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3e:	ec51 0b19 	vmov	r0, r1, d9
 8007e42:	f7f8 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d050      	beq.n	8007eec <_dtoa_r+0x244>
 8007e4a:	9b00      	ldr	r3, [sp, #0]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	2300      	movs	r3, #0
 8007e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e56:	1b5d      	subs	r5, r3, r5
 8007e58:	1e6b      	subs	r3, r5, #1
 8007e5a:	9305      	str	r3, [sp, #20]
 8007e5c:	bf45      	ittet	mi
 8007e5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e62:	9304      	strmi	r3, [sp, #16]
 8007e64:	2300      	movpl	r3, #0
 8007e66:	2300      	movmi	r3, #0
 8007e68:	bf4c      	ite	mi
 8007e6a:	9305      	strmi	r3, [sp, #20]
 8007e6c:	9304      	strpl	r3, [sp, #16]
 8007e6e:	9b00      	ldr	r3, [sp, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	db3d      	blt.n	8007ef0 <_dtoa_r+0x248>
 8007e74:	9b05      	ldr	r3, [sp, #20]
 8007e76:	9a00      	ldr	r2, [sp, #0]
 8007e78:	920a      	str	r2, [sp, #40]	; 0x28
 8007e7a:	4413      	add	r3, r2
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	9307      	str	r3, [sp, #28]
 8007e82:	9b06      	ldr	r3, [sp, #24]
 8007e84:	2b09      	cmp	r3, #9
 8007e86:	f200 8089 	bhi.w	8007f9c <_dtoa_r+0x2f4>
 8007e8a:	2b05      	cmp	r3, #5
 8007e8c:	bfc4      	itt	gt
 8007e8e:	3b04      	subgt	r3, #4
 8007e90:	9306      	strgt	r3, [sp, #24]
 8007e92:	9b06      	ldr	r3, [sp, #24]
 8007e94:	f1a3 0302 	sub.w	r3, r3, #2
 8007e98:	bfcc      	ite	gt
 8007e9a:	2500      	movgt	r5, #0
 8007e9c:	2501      	movle	r5, #1
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	f200 8087 	bhi.w	8007fb2 <_dtoa_r+0x30a>
 8007ea4:	e8df f003 	tbb	[pc, r3]
 8007ea8:	59383a2d 	.word	0x59383a2d
 8007eac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eb0:	441d      	add	r5, r3
 8007eb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007eb6:	2b20      	cmp	r3, #32
 8007eb8:	bfc1      	itttt	gt
 8007eba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ebe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ec2:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ec6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007eca:	bfda      	itte	le
 8007ecc:	f1c3 0320 	rsble	r3, r3, #32
 8007ed0:	fa06 f003 	lslle.w	r0, r6, r3
 8007ed4:	4318      	orrgt	r0, r3
 8007ed6:	f7f8 fb15 	bl	8000504 <__aeabi_ui2d>
 8007eda:	2301      	movs	r3, #1
 8007edc:	4606      	mov	r6, r0
 8007ede:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ee2:	3d01      	subs	r5, #1
 8007ee4:	930e      	str	r3, [sp, #56]	; 0x38
 8007ee6:	e76a      	b.n	8007dbe <_dtoa_r+0x116>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e7b2      	b.n	8007e52 <_dtoa_r+0x1aa>
 8007eec:	900b      	str	r0, [sp, #44]	; 0x2c
 8007eee:	e7b1      	b.n	8007e54 <_dtoa_r+0x1ac>
 8007ef0:	9b04      	ldr	r3, [sp, #16]
 8007ef2:	9a00      	ldr	r2, [sp, #0]
 8007ef4:	1a9b      	subs	r3, r3, r2
 8007ef6:	9304      	str	r3, [sp, #16]
 8007ef8:	4253      	negs	r3, r2
 8007efa:	9307      	str	r3, [sp, #28]
 8007efc:	2300      	movs	r3, #0
 8007efe:	930a      	str	r3, [sp, #40]	; 0x28
 8007f00:	e7bf      	b.n	8007e82 <_dtoa_r+0x1da>
 8007f02:	2300      	movs	r3, #0
 8007f04:	9308      	str	r3, [sp, #32]
 8007f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc55      	bgt.n	8007fb8 <_dtoa_r+0x310>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f12:	461a      	mov	r2, r3
 8007f14:	9209      	str	r2, [sp, #36]	; 0x24
 8007f16:	e00c      	b.n	8007f32 <_dtoa_r+0x28a>
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e7f3      	b.n	8007f04 <_dtoa_r+0x25c>
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f20:	9308      	str	r3, [sp, #32]
 8007f22:	9b00      	ldr	r3, [sp, #0]
 8007f24:	4413      	add	r3, r2
 8007f26:	9302      	str	r3, [sp, #8]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	2b01      	cmp	r3, #1
 8007f2c:	9303      	str	r3, [sp, #12]
 8007f2e:	bfb8      	it	lt
 8007f30:	2301      	movlt	r3, #1
 8007f32:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f34:	2200      	movs	r2, #0
 8007f36:	6042      	str	r2, [r0, #4]
 8007f38:	2204      	movs	r2, #4
 8007f3a:	f102 0614 	add.w	r6, r2, #20
 8007f3e:	429e      	cmp	r6, r3
 8007f40:	6841      	ldr	r1, [r0, #4]
 8007f42:	d93d      	bls.n	8007fc0 <_dtoa_r+0x318>
 8007f44:	4620      	mov	r0, r4
 8007f46:	f001 fa57 	bl	80093f8 <_Balloc>
 8007f4a:	9001      	str	r0, [sp, #4]
 8007f4c:	2800      	cmp	r0, #0
 8007f4e:	d13b      	bne.n	8007fc8 <_dtoa_r+0x320>
 8007f50:	4b11      	ldr	r3, [pc, #68]	; (8007f98 <_dtoa_r+0x2f0>)
 8007f52:	4602      	mov	r2, r0
 8007f54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f58:	e6c0      	b.n	8007cdc <_dtoa_r+0x34>
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e7df      	b.n	8007f1e <_dtoa_r+0x276>
 8007f5e:	bf00      	nop
 8007f60:	636f4361 	.word	0x636f4361
 8007f64:	3fd287a7 	.word	0x3fd287a7
 8007f68:	8b60c8b3 	.word	0x8b60c8b3
 8007f6c:	3fc68a28 	.word	0x3fc68a28
 8007f70:	509f79fb 	.word	0x509f79fb
 8007f74:	3fd34413 	.word	0x3fd34413
 8007f78:	0800b7de 	.word	0x0800b7de
 8007f7c:	0800b7f5 	.word	0x0800b7f5
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	0800b7da 	.word	0x0800b7da
 8007f88:	0800b7d1 	.word	0x0800b7d1
 8007f8c:	0800b651 	.word	0x0800b651
 8007f90:	3ff80000 	.word	0x3ff80000
 8007f94:	0800b9c8 	.word	0x0800b9c8
 8007f98:	0800b850 	.word	0x0800b850
 8007f9c:	2501      	movs	r5, #1
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	9306      	str	r3, [sp, #24]
 8007fa2:	9508      	str	r5, [sp, #32]
 8007fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2312      	movs	r3, #18
 8007fb0:	e7b0      	b.n	8007f14 <_dtoa_r+0x26c>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	9308      	str	r3, [sp, #32]
 8007fb6:	e7f5      	b.n	8007fa4 <_dtoa_r+0x2fc>
 8007fb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fbe:	e7b8      	b.n	8007f32 <_dtoa_r+0x28a>
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	6041      	str	r1, [r0, #4]
 8007fc4:	0052      	lsls	r2, r2, #1
 8007fc6:	e7b8      	b.n	8007f3a <_dtoa_r+0x292>
 8007fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	9b03      	ldr	r3, [sp, #12]
 8007fd0:	2b0e      	cmp	r3, #14
 8007fd2:	f200 809d 	bhi.w	8008110 <_dtoa_r+0x468>
 8007fd6:	2d00      	cmp	r5, #0
 8007fd8:	f000 809a 	beq.w	8008110 <_dtoa_r+0x468>
 8007fdc:	9b00      	ldr	r3, [sp, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd32      	ble.n	8008048 <_dtoa_r+0x3a0>
 8007fe2:	4ab7      	ldr	r2, [pc, #732]	; (80082c0 <_dtoa_r+0x618>)
 8007fe4:	f003 030f 	and.w	r3, r3, #15
 8007fe8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ff0:	9b00      	ldr	r3, [sp, #0]
 8007ff2:	05d8      	lsls	r0, r3, #23
 8007ff4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007ff8:	d516      	bpl.n	8008028 <_dtoa_r+0x380>
 8007ffa:	4bb2      	ldr	r3, [pc, #712]	; (80082c4 <_dtoa_r+0x61c>)
 8007ffc:	ec51 0b19 	vmov	r0, r1, d9
 8008000:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008004:	f7f8 fc22 	bl	800084c <__aeabi_ddiv>
 8008008:	f007 070f 	and.w	r7, r7, #15
 800800c:	4682      	mov	sl, r0
 800800e:	468b      	mov	fp, r1
 8008010:	2503      	movs	r5, #3
 8008012:	4eac      	ldr	r6, [pc, #688]	; (80082c4 <_dtoa_r+0x61c>)
 8008014:	b957      	cbnz	r7, 800802c <_dtoa_r+0x384>
 8008016:	4642      	mov	r2, r8
 8008018:	464b      	mov	r3, r9
 800801a:	4650      	mov	r0, sl
 800801c:	4659      	mov	r1, fp
 800801e:	f7f8 fc15 	bl	800084c <__aeabi_ddiv>
 8008022:	4682      	mov	sl, r0
 8008024:	468b      	mov	fp, r1
 8008026:	e028      	b.n	800807a <_dtoa_r+0x3d2>
 8008028:	2502      	movs	r5, #2
 800802a:	e7f2      	b.n	8008012 <_dtoa_r+0x36a>
 800802c:	07f9      	lsls	r1, r7, #31
 800802e:	d508      	bpl.n	8008042 <_dtoa_r+0x39a>
 8008030:	4640      	mov	r0, r8
 8008032:	4649      	mov	r1, r9
 8008034:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008038:	f7f8 fade 	bl	80005f8 <__aeabi_dmul>
 800803c:	3501      	adds	r5, #1
 800803e:	4680      	mov	r8, r0
 8008040:	4689      	mov	r9, r1
 8008042:	107f      	asrs	r7, r7, #1
 8008044:	3608      	adds	r6, #8
 8008046:	e7e5      	b.n	8008014 <_dtoa_r+0x36c>
 8008048:	f000 809b 	beq.w	8008182 <_dtoa_r+0x4da>
 800804c:	9b00      	ldr	r3, [sp, #0]
 800804e:	4f9d      	ldr	r7, [pc, #628]	; (80082c4 <_dtoa_r+0x61c>)
 8008050:	425e      	negs	r6, r3
 8008052:	4b9b      	ldr	r3, [pc, #620]	; (80082c0 <_dtoa_r+0x618>)
 8008054:	f006 020f 	and.w	r2, r6, #15
 8008058:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	ec51 0b19 	vmov	r0, r1, d9
 8008064:	f7f8 fac8 	bl	80005f8 <__aeabi_dmul>
 8008068:	1136      	asrs	r6, r6, #4
 800806a:	4682      	mov	sl, r0
 800806c:	468b      	mov	fp, r1
 800806e:	2300      	movs	r3, #0
 8008070:	2502      	movs	r5, #2
 8008072:	2e00      	cmp	r6, #0
 8008074:	d17a      	bne.n	800816c <_dtoa_r+0x4c4>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1d3      	bne.n	8008022 <_dtoa_r+0x37a>
 800807a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8082 	beq.w	8008186 <_dtoa_r+0x4de>
 8008082:	4b91      	ldr	r3, [pc, #580]	; (80082c8 <_dtoa_r+0x620>)
 8008084:	2200      	movs	r2, #0
 8008086:	4650      	mov	r0, sl
 8008088:	4659      	mov	r1, fp
 800808a:	f7f8 fd27 	bl	8000adc <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	d079      	beq.n	8008186 <_dtoa_r+0x4de>
 8008092:	9b03      	ldr	r3, [sp, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d076      	beq.n	8008186 <_dtoa_r+0x4de>
 8008098:	9b02      	ldr	r3, [sp, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd36      	ble.n	800810c <_dtoa_r+0x464>
 800809e:	9b00      	ldr	r3, [sp, #0]
 80080a0:	4650      	mov	r0, sl
 80080a2:	4659      	mov	r1, fp
 80080a4:	1e5f      	subs	r7, r3, #1
 80080a6:	2200      	movs	r2, #0
 80080a8:	4b88      	ldr	r3, [pc, #544]	; (80082cc <_dtoa_r+0x624>)
 80080aa:	f7f8 faa5 	bl	80005f8 <__aeabi_dmul>
 80080ae:	9e02      	ldr	r6, [sp, #8]
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	3501      	adds	r5, #1
 80080b6:	4628      	mov	r0, r5
 80080b8:	f7f8 fa34 	bl	8000524 <__aeabi_i2d>
 80080bc:	4652      	mov	r2, sl
 80080be:	465b      	mov	r3, fp
 80080c0:	f7f8 fa9a 	bl	80005f8 <__aeabi_dmul>
 80080c4:	4b82      	ldr	r3, [pc, #520]	; (80082d0 <_dtoa_r+0x628>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	f7f8 f8e0 	bl	800028c <__adddf3>
 80080cc:	46d0      	mov	r8, sl
 80080ce:	46d9      	mov	r9, fp
 80080d0:	4682      	mov	sl, r0
 80080d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080d6:	2e00      	cmp	r6, #0
 80080d8:	d158      	bne.n	800818c <_dtoa_r+0x4e4>
 80080da:	4b7e      	ldr	r3, [pc, #504]	; (80082d4 <_dtoa_r+0x62c>)
 80080dc:	2200      	movs	r2, #0
 80080de:	4640      	mov	r0, r8
 80080e0:	4649      	mov	r1, r9
 80080e2:	f7f8 f8d1 	bl	8000288 <__aeabi_dsub>
 80080e6:	4652      	mov	r2, sl
 80080e8:	465b      	mov	r3, fp
 80080ea:	4680      	mov	r8, r0
 80080ec:	4689      	mov	r9, r1
 80080ee:	f7f8 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 80080f2:	2800      	cmp	r0, #0
 80080f4:	f040 8295 	bne.w	8008622 <_dtoa_r+0x97a>
 80080f8:	4652      	mov	r2, sl
 80080fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 fceb 	bl	8000adc <__aeabi_dcmplt>
 8008106:	2800      	cmp	r0, #0
 8008108:	f040 8289 	bne.w	800861e <_dtoa_r+0x976>
 800810c:	ec5b ab19 	vmov	sl, fp, d9
 8008110:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008112:	2b00      	cmp	r3, #0
 8008114:	f2c0 8148 	blt.w	80083a8 <_dtoa_r+0x700>
 8008118:	9a00      	ldr	r2, [sp, #0]
 800811a:	2a0e      	cmp	r2, #14
 800811c:	f300 8144 	bgt.w	80083a8 <_dtoa_r+0x700>
 8008120:	4b67      	ldr	r3, [pc, #412]	; (80082c0 <_dtoa_r+0x618>)
 8008122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008126:	e9d3 8900 	ldrd	r8, r9, [r3]
 800812a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	f280 80d5 	bge.w	80082dc <_dtoa_r+0x634>
 8008132:	9b03      	ldr	r3, [sp, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	f300 80d1 	bgt.w	80082dc <_dtoa_r+0x634>
 800813a:	f040 826f 	bne.w	800861c <_dtoa_r+0x974>
 800813e:	4b65      	ldr	r3, [pc, #404]	; (80082d4 <_dtoa_r+0x62c>)
 8008140:	2200      	movs	r2, #0
 8008142:	4640      	mov	r0, r8
 8008144:	4649      	mov	r1, r9
 8008146:	f7f8 fa57 	bl	80005f8 <__aeabi_dmul>
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	f7f8 fcd9 	bl	8000b04 <__aeabi_dcmpge>
 8008152:	9e03      	ldr	r6, [sp, #12]
 8008154:	4637      	mov	r7, r6
 8008156:	2800      	cmp	r0, #0
 8008158:	f040 8245 	bne.w	80085e6 <_dtoa_r+0x93e>
 800815c:	9d01      	ldr	r5, [sp, #4]
 800815e:	2331      	movs	r3, #49	; 0x31
 8008160:	f805 3b01 	strb.w	r3, [r5], #1
 8008164:	9b00      	ldr	r3, [sp, #0]
 8008166:	3301      	adds	r3, #1
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	e240      	b.n	80085ee <_dtoa_r+0x946>
 800816c:	07f2      	lsls	r2, r6, #31
 800816e:	d505      	bpl.n	800817c <_dtoa_r+0x4d4>
 8008170:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008174:	f7f8 fa40 	bl	80005f8 <__aeabi_dmul>
 8008178:	3501      	adds	r5, #1
 800817a:	2301      	movs	r3, #1
 800817c:	1076      	asrs	r6, r6, #1
 800817e:	3708      	adds	r7, #8
 8008180:	e777      	b.n	8008072 <_dtoa_r+0x3ca>
 8008182:	2502      	movs	r5, #2
 8008184:	e779      	b.n	800807a <_dtoa_r+0x3d2>
 8008186:	9f00      	ldr	r7, [sp, #0]
 8008188:	9e03      	ldr	r6, [sp, #12]
 800818a:	e794      	b.n	80080b6 <_dtoa_r+0x40e>
 800818c:	9901      	ldr	r1, [sp, #4]
 800818e:	4b4c      	ldr	r3, [pc, #304]	; (80082c0 <_dtoa_r+0x618>)
 8008190:	4431      	add	r1, r6
 8008192:	910d      	str	r1, [sp, #52]	; 0x34
 8008194:	9908      	ldr	r1, [sp, #32]
 8008196:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800819a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800819e:	2900      	cmp	r1, #0
 80081a0:	d043      	beq.n	800822a <_dtoa_r+0x582>
 80081a2:	494d      	ldr	r1, [pc, #308]	; (80082d8 <_dtoa_r+0x630>)
 80081a4:	2000      	movs	r0, #0
 80081a6:	f7f8 fb51 	bl	800084c <__aeabi_ddiv>
 80081aa:	4652      	mov	r2, sl
 80081ac:	465b      	mov	r3, fp
 80081ae:	f7f8 f86b 	bl	8000288 <__aeabi_dsub>
 80081b2:	9d01      	ldr	r5, [sp, #4]
 80081b4:	4682      	mov	sl, r0
 80081b6:	468b      	mov	fp, r1
 80081b8:	4649      	mov	r1, r9
 80081ba:	4640      	mov	r0, r8
 80081bc:	f7f8 fccc 	bl	8000b58 <__aeabi_d2iz>
 80081c0:	4606      	mov	r6, r0
 80081c2:	f7f8 f9af 	bl	8000524 <__aeabi_i2d>
 80081c6:	4602      	mov	r2, r0
 80081c8:	460b      	mov	r3, r1
 80081ca:	4640      	mov	r0, r8
 80081cc:	4649      	mov	r1, r9
 80081ce:	f7f8 f85b 	bl	8000288 <__aeabi_dsub>
 80081d2:	3630      	adds	r6, #48	; 0x30
 80081d4:	f805 6b01 	strb.w	r6, [r5], #1
 80081d8:	4652      	mov	r2, sl
 80081da:	465b      	mov	r3, fp
 80081dc:	4680      	mov	r8, r0
 80081de:	4689      	mov	r9, r1
 80081e0:	f7f8 fc7c 	bl	8000adc <__aeabi_dcmplt>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	d163      	bne.n	80082b0 <_dtoa_r+0x608>
 80081e8:	4642      	mov	r2, r8
 80081ea:	464b      	mov	r3, r9
 80081ec:	4936      	ldr	r1, [pc, #216]	; (80082c8 <_dtoa_r+0x620>)
 80081ee:	2000      	movs	r0, #0
 80081f0:	f7f8 f84a 	bl	8000288 <__aeabi_dsub>
 80081f4:	4652      	mov	r2, sl
 80081f6:	465b      	mov	r3, fp
 80081f8:	f7f8 fc70 	bl	8000adc <__aeabi_dcmplt>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	f040 80b5 	bne.w	800836c <_dtoa_r+0x6c4>
 8008202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008204:	429d      	cmp	r5, r3
 8008206:	d081      	beq.n	800810c <_dtoa_r+0x464>
 8008208:	4b30      	ldr	r3, [pc, #192]	; (80082cc <_dtoa_r+0x624>)
 800820a:	2200      	movs	r2, #0
 800820c:	4650      	mov	r0, sl
 800820e:	4659      	mov	r1, fp
 8008210:	f7f8 f9f2 	bl	80005f8 <__aeabi_dmul>
 8008214:	4b2d      	ldr	r3, [pc, #180]	; (80082cc <_dtoa_r+0x624>)
 8008216:	4682      	mov	sl, r0
 8008218:	468b      	mov	fp, r1
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	2200      	movs	r2, #0
 8008220:	f7f8 f9ea 	bl	80005f8 <__aeabi_dmul>
 8008224:	4680      	mov	r8, r0
 8008226:	4689      	mov	r9, r1
 8008228:	e7c6      	b.n	80081b8 <_dtoa_r+0x510>
 800822a:	4650      	mov	r0, sl
 800822c:	4659      	mov	r1, fp
 800822e:	f7f8 f9e3 	bl	80005f8 <__aeabi_dmul>
 8008232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008234:	9d01      	ldr	r5, [sp, #4]
 8008236:	930f      	str	r3, [sp, #60]	; 0x3c
 8008238:	4682      	mov	sl, r0
 800823a:	468b      	mov	fp, r1
 800823c:	4649      	mov	r1, r9
 800823e:	4640      	mov	r0, r8
 8008240:	f7f8 fc8a 	bl	8000b58 <__aeabi_d2iz>
 8008244:	4606      	mov	r6, r0
 8008246:	f7f8 f96d 	bl	8000524 <__aeabi_i2d>
 800824a:	3630      	adds	r6, #48	; 0x30
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4640      	mov	r0, r8
 8008252:	4649      	mov	r1, r9
 8008254:	f7f8 f818 	bl	8000288 <__aeabi_dsub>
 8008258:	f805 6b01 	strb.w	r6, [r5], #1
 800825c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800825e:	429d      	cmp	r5, r3
 8008260:	4680      	mov	r8, r0
 8008262:	4689      	mov	r9, r1
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	d124      	bne.n	80082b4 <_dtoa_r+0x60c>
 800826a:	4b1b      	ldr	r3, [pc, #108]	; (80082d8 <_dtoa_r+0x630>)
 800826c:	4650      	mov	r0, sl
 800826e:	4659      	mov	r1, fp
 8008270:	f7f8 f80c 	bl	800028c <__adddf3>
 8008274:	4602      	mov	r2, r0
 8008276:	460b      	mov	r3, r1
 8008278:	4640      	mov	r0, r8
 800827a:	4649      	mov	r1, r9
 800827c:	f7f8 fc4c 	bl	8000b18 <__aeabi_dcmpgt>
 8008280:	2800      	cmp	r0, #0
 8008282:	d173      	bne.n	800836c <_dtoa_r+0x6c4>
 8008284:	4652      	mov	r2, sl
 8008286:	465b      	mov	r3, fp
 8008288:	4913      	ldr	r1, [pc, #76]	; (80082d8 <_dtoa_r+0x630>)
 800828a:	2000      	movs	r0, #0
 800828c:	f7f7 fffc 	bl	8000288 <__aeabi_dsub>
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4640      	mov	r0, r8
 8008296:	4649      	mov	r1, r9
 8008298:	f7f8 fc20 	bl	8000adc <__aeabi_dcmplt>
 800829c:	2800      	cmp	r0, #0
 800829e:	f43f af35 	beq.w	800810c <_dtoa_r+0x464>
 80082a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082a4:	1e6b      	subs	r3, r5, #1
 80082a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80082a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d0f8      	beq.n	80082a2 <_dtoa_r+0x5fa>
 80082b0:	9700      	str	r7, [sp, #0]
 80082b2:	e049      	b.n	8008348 <_dtoa_r+0x6a0>
 80082b4:	4b05      	ldr	r3, [pc, #20]	; (80082cc <_dtoa_r+0x624>)
 80082b6:	f7f8 f99f 	bl	80005f8 <__aeabi_dmul>
 80082ba:	4680      	mov	r8, r0
 80082bc:	4689      	mov	r9, r1
 80082be:	e7bd      	b.n	800823c <_dtoa_r+0x594>
 80082c0:	0800b9c8 	.word	0x0800b9c8
 80082c4:	0800b9a0 	.word	0x0800b9a0
 80082c8:	3ff00000 	.word	0x3ff00000
 80082cc:	40240000 	.word	0x40240000
 80082d0:	401c0000 	.word	0x401c0000
 80082d4:	40140000 	.word	0x40140000
 80082d8:	3fe00000 	.word	0x3fe00000
 80082dc:	9d01      	ldr	r5, [sp, #4]
 80082de:	4656      	mov	r6, sl
 80082e0:	465f      	mov	r7, fp
 80082e2:	4642      	mov	r2, r8
 80082e4:	464b      	mov	r3, r9
 80082e6:	4630      	mov	r0, r6
 80082e8:	4639      	mov	r1, r7
 80082ea:	f7f8 faaf 	bl	800084c <__aeabi_ddiv>
 80082ee:	f7f8 fc33 	bl	8000b58 <__aeabi_d2iz>
 80082f2:	4682      	mov	sl, r0
 80082f4:	f7f8 f916 	bl	8000524 <__aeabi_i2d>
 80082f8:	4642      	mov	r2, r8
 80082fa:	464b      	mov	r3, r9
 80082fc:	f7f8 f97c 	bl	80005f8 <__aeabi_dmul>
 8008300:	4602      	mov	r2, r0
 8008302:	460b      	mov	r3, r1
 8008304:	4630      	mov	r0, r6
 8008306:	4639      	mov	r1, r7
 8008308:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800830c:	f7f7 ffbc 	bl	8000288 <__aeabi_dsub>
 8008310:	f805 6b01 	strb.w	r6, [r5], #1
 8008314:	9e01      	ldr	r6, [sp, #4]
 8008316:	9f03      	ldr	r7, [sp, #12]
 8008318:	1bae      	subs	r6, r5, r6
 800831a:	42b7      	cmp	r7, r6
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	d135      	bne.n	800838e <_dtoa_r+0x6e6>
 8008322:	f7f7 ffb3 	bl	800028c <__adddf3>
 8008326:	4642      	mov	r2, r8
 8008328:	464b      	mov	r3, r9
 800832a:	4606      	mov	r6, r0
 800832c:	460f      	mov	r7, r1
 800832e:	f7f8 fbf3 	bl	8000b18 <__aeabi_dcmpgt>
 8008332:	b9d0      	cbnz	r0, 800836a <_dtoa_r+0x6c2>
 8008334:	4642      	mov	r2, r8
 8008336:	464b      	mov	r3, r9
 8008338:	4630      	mov	r0, r6
 800833a:	4639      	mov	r1, r7
 800833c:	f7f8 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008340:	b110      	cbz	r0, 8008348 <_dtoa_r+0x6a0>
 8008342:	f01a 0f01 	tst.w	sl, #1
 8008346:	d110      	bne.n	800836a <_dtoa_r+0x6c2>
 8008348:	4620      	mov	r0, r4
 800834a:	ee18 1a10 	vmov	r1, s16
 800834e:	f001 f893 	bl	8009478 <_Bfree>
 8008352:	2300      	movs	r3, #0
 8008354:	9800      	ldr	r0, [sp, #0]
 8008356:	702b      	strb	r3, [r5, #0]
 8008358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835a:	3001      	adds	r0, #1
 800835c:	6018      	str	r0, [r3, #0]
 800835e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008360:	2b00      	cmp	r3, #0
 8008362:	f43f acf1 	beq.w	8007d48 <_dtoa_r+0xa0>
 8008366:	601d      	str	r5, [r3, #0]
 8008368:	e4ee      	b.n	8007d48 <_dtoa_r+0xa0>
 800836a:	9f00      	ldr	r7, [sp, #0]
 800836c:	462b      	mov	r3, r5
 800836e:	461d      	mov	r5, r3
 8008370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008374:	2a39      	cmp	r2, #57	; 0x39
 8008376:	d106      	bne.n	8008386 <_dtoa_r+0x6de>
 8008378:	9a01      	ldr	r2, [sp, #4]
 800837a:	429a      	cmp	r2, r3
 800837c:	d1f7      	bne.n	800836e <_dtoa_r+0x6c6>
 800837e:	9901      	ldr	r1, [sp, #4]
 8008380:	2230      	movs	r2, #48	; 0x30
 8008382:	3701      	adds	r7, #1
 8008384:	700a      	strb	r2, [r1, #0]
 8008386:	781a      	ldrb	r2, [r3, #0]
 8008388:	3201      	adds	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e790      	b.n	80082b0 <_dtoa_r+0x608>
 800838e:	4ba6      	ldr	r3, [pc, #664]	; (8008628 <_dtoa_r+0x980>)
 8008390:	2200      	movs	r2, #0
 8008392:	f7f8 f931 	bl	80005f8 <__aeabi_dmul>
 8008396:	2200      	movs	r2, #0
 8008398:	2300      	movs	r3, #0
 800839a:	4606      	mov	r6, r0
 800839c:	460f      	mov	r7, r1
 800839e:	f7f8 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d09d      	beq.n	80082e2 <_dtoa_r+0x63a>
 80083a6:	e7cf      	b.n	8008348 <_dtoa_r+0x6a0>
 80083a8:	9a08      	ldr	r2, [sp, #32]
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 80d7 	beq.w	800855e <_dtoa_r+0x8b6>
 80083b0:	9a06      	ldr	r2, [sp, #24]
 80083b2:	2a01      	cmp	r2, #1
 80083b4:	f300 80ba 	bgt.w	800852c <_dtoa_r+0x884>
 80083b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80b2 	beq.w	8008524 <_dtoa_r+0x87c>
 80083c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083c4:	9e07      	ldr	r6, [sp, #28]
 80083c6:	9d04      	ldr	r5, [sp, #16]
 80083c8:	9a04      	ldr	r2, [sp, #16]
 80083ca:	441a      	add	r2, r3
 80083cc:	9204      	str	r2, [sp, #16]
 80083ce:	9a05      	ldr	r2, [sp, #20]
 80083d0:	2101      	movs	r1, #1
 80083d2:	441a      	add	r2, r3
 80083d4:	4620      	mov	r0, r4
 80083d6:	9205      	str	r2, [sp, #20]
 80083d8:	f001 f950 	bl	800967c <__i2b>
 80083dc:	4607      	mov	r7, r0
 80083de:	2d00      	cmp	r5, #0
 80083e0:	dd0c      	ble.n	80083fc <_dtoa_r+0x754>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	dd09      	ble.n	80083fc <_dtoa_r+0x754>
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	9a04      	ldr	r2, [sp, #16]
 80083ec:	bfa8      	it	ge
 80083ee:	462b      	movge	r3, r5
 80083f0:	1ad2      	subs	r2, r2, r3
 80083f2:	9204      	str	r2, [sp, #16]
 80083f4:	9a05      	ldr	r2, [sp, #20]
 80083f6:	1aed      	subs	r5, r5, r3
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	9305      	str	r3, [sp, #20]
 80083fc:	9b07      	ldr	r3, [sp, #28]
 80083fe:	b31b      	cbz	r3, 8008448 <_dtoa_r+0x7a0>
 8008400:	9b08      	ldr	r3, [sp, #32]
 8008402:	2b00      	cmp	r3, #0
 8008404:	f000 80af 	beq.w	8008566 <_dtoa_r+0x8be>
 8008408:	2e00      	cmp	r6, #0
 800840a:	dd13      	ble.n	8008434 <_dtoa_r+0x78c>
 800840c:	4639      	mov	r1, r7
 800840e:	4632      	mov	r2, r6
 8008410:	4620      	mov	r0, r4
 8008412:	f001 f9f3 	bl	80097fc <__pow5mult>
 8008416:	ee18 2a10 	vmov	r2, s16
 800841a:	4601      	mov	r1, r0
 800841c:	4607      	mov	r7, r0
 800841e:	4620      	mov	r0, r4
 8008420:	f001 f942 	bl	80096a8 <__multiply>
 8008424:	ee18 1a10 	vmov	r1, s16
 8008428:	4680      	mov	r8, r0
 800842a:	4620      	mov	r0, r4
 800842c:	f001 f824 	bl	8009478 <_Bfree>
 8008430:	ee08 8a10 	vmov	s16, r8
 8008434:	9b07      	ldr	r3, [sp, #28]
 8008436:	1b9a      	subs	r2, r3, r6
 8008438:	d006      	beq.n	8008448 <_dtoa_r+0x7a0>
 800843a:	ee18 1a10 	vmov	r1, s16
 800843e:	4620      	mov	r0, r4
 8008440:	f001 f9dc 	bl	80097fc <__pow5mult>
 8008444:	ee08 0a10 	vmov	s16, r0
 8008448:	2101      	movs	r1, #1
 800844a:	4620      	mov	r0, r4
 800844c:	f001 f916 	bl	800967c <__i2b>
 8008450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008452:	2b00      	cmp	r3, #0
 8008454:	4606      	mov	r6, r0
 8008456:	f340 8088 	ble.w	800856a <_dtoa_r+0x8c2>
 800845a:	461a      	mov	r2, r3
 800845c:	4601      	mov	r1, r0
 800845e:	4620      	mov	r0, r4
 8008460:	f001 f9cc 	bl	80097fc <__pow5mult>
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	2b01      	cmp	r3, #1
 8008468:	4606      	mov	r6, r0
 800846a:	f340 8081 	ble.w	8008570 <_dtoa_r+0x8c8>
 800846e:	f04f 0800 	mov.w	r8, #0
 8008472:	6933      	ldr	r3, [r6, #16]
 8008474:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008478:	6918      	ldr	r0, [r3, #16]
 800847a:	f001 f8af 	bl	80095dc <__hi0bits>
 800847e:	f1c0 0020 	rsb	r0, r0, #32
 8008482:	9b05      	ldr	r3, [sp, #20]
 8008484:	4418      	add	r0, r3
 8008486:	f010 001f 	ands.w	r0, r0, #31
 800848a:	f000 8092 	beq.w	80085b2 <_dtoa_r+0x90a>
 800848e:	f1c0 0320 	rsb	r3, r0, #32
 8008492:	2b04      	cmp	r3, #4
 8008494:	f340 808a 	ble.w	80085ac <_dtoa_r+0x904>
 8008498:	f1c0 001c 	rsb	r0, r0, #28
 800849c:	9b04      	ldr	r3, [sp, #16]
 800849e:	4403      	add	r3, r0
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	4403      	add	r3, r0
 80084a6:	4405      	add	r5, r0
 80084a8:	9305      	str	r3, [sp, #20]
 80084aa:	9b04      	ldr	r3, [sp, #16]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	dd07      	ble.n	80084c0 <_dtoa_r+0x818>
 80084b0:	ee18 1a10 	vmov	r1, s16
 80084b4:	461a      	mov	r2, r3
 80084b6:	4620      	mov	r0, r4
 80084b8:	f001 f9fa 	bl	80098b0 <__lshift>
 80084bc:	ee08 0a10 	vmov	s16, r0
 80084c0:	9b05      	ldr	r3, [sp, #20]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd05      	ble.n	80084d2 <_dtoa_r+0x82a>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f001 f9f0 	bl	80098b0 <__lshift>
 80084d0:	4606      	mov	r6, r0
 80084d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d06e      	beq.n	80085b6 <_dtoa_r+0x90e>
 80084d8:	ee18 0a10 	vmov	r0, s16
 80084dc:	4631      	mov	r1, r6
 80084de:	f001 fa57 	bl	8009990 <__mcmp>
 80084e2:	2800      	cmp	r0, #0
 80084e4:	da67      	bge.n	80085b6 <_dtoa_r+0x90e>
 80084e6:	9b00      	ldr	r3, [sp, #0]
 80084e8:	3b01      	subs	r3, #1
 80084ea:	ee18 1a10 	vmov	r1, s16
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	220a      	movs	r2, #10
 80084f2:	2300      	movs	r3, #0
 80084f4:	4620      	mov	r0, r4
 80084f6:	f000 ffe1 	bl	80094bc <__multadd>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	ee08 0a10 	vmov	s16, r0
 8008500:	2b00      	cmp	r3, #0
 8008502:	f000 81b1 	beq.w	8008868 <_dtoa_r+0xbc0>
 8008506:	2300      	movs	r3, #0
 8008508:	4639      	mov	r1, r7
 800850a:	220a      	movs	r2, #10
 800850c:	4620      	mov	r0, r4
 800850e:	f000 ffd5 	bl	80094bc <__multadd>
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	4607      	mov	r7, r0
 8008518:	f300 808e 	bgt.w	8008638 <_dtoa_r+0x990>
 800851c:	9b06      	ldr	r3, [sp, #24]
 800851e:	2b02      	cmp	r3, #2
 8008520:	dc51      	bgt.n	80085c6 <_dtoa_r+0x91e>
 8008522:	e089      	b.n	8008638 <_dtoa_r+0x990>
 8008524:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008526:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800852a:	e74b      	b.n	80083c4 <_dtoa_r+0x71c>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	1e5e      	subs	r6, r3, #1
 8008530:	9b07      	ldr	r3, [sp, #28]
 8008532:	42b3      	cmp	r3, r6
 8008534:	bfbf      	itttt	lt
 8008536:	9b07      	ldrlt	r3, [sp, #28]
 8008538:	9607      	strlt	r6, [sp, #28]
 800853a:	1af2      	sublt	r2, r6, r3
 800853c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800853e:	bfb6      	itet	lt
 8008540:	189b      	addlt	r3, r3, r2
 8008542:	1b9e      	subge	r6, r3, r6
 8008544:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008546:	9b03      	ldr	r3, [sp, #12]
 8008548:	bfb8      	it	lt
 800854a:	2600      	movlt	r6, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	bfb7      	itett	lt
 8008550:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008554:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008558:	1a9d      	sublt	r5, r3, r2
 800855a:	2300      	movlt	r3, #0
 800855c:	e734      	b.n	80083c8 <_dtoa_r+0x720>
 800855e:	9e07      	ldr	r6, [sp, #28]
 8008560:	9d04      	ldr	r5, [sp, #16]
 8008562:	9f08      	ldr	r7, [sp, #32]
 8008564:	e73b      	b.n	80083de <_dtoa_r+0x736>
 8008566:	9a07      	ldr	r2, [sp, #28]
 8008568:	e767      	b.n	800843a <_dtoa_r+0x792>
 800856a:	9b06      	ldr	r3, [sp, #24]
 800856c:	2b01      	cmp	r3, #1
 800856e:	dc18      	bgt.n	80085a2 <_dtoa_r+0x8fa>
 8008570:	f1ba 0f00 	cmp.w	sl, #0
 8008574:	d115      	bne.n	80085a2 <_dtoa_r+0x8fa>
 8008576:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800857a:	b993      	cbnz	r3, 80085a2 <_dtoa_r+0x8fa>
 800857c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008580:	0d1b      	lsrs	r3, r3, #20
 8008582:	051b      	lsls	r3, r3, #20
 8008584:	b183      	cbz	r3, 80085a8 <_dtoa_r+0x900>
 8008586:	9b04      	ldr	r3, [sp, #16]
 8008588:	3301      	adds	r3, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	9b05      	ldr	r3, [sp, #20]
 800858e:	3301      	adds	r3, #1
 8008590:	9305      	str	r3, [sp, #20]
 8008592:	f04f 0801 	mov.w	r8, #1
 8008596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008598:	2b00      	cmp	r3, #0
 800859a:	f47f af6a 	bne.w	8008472 <_dtoa_r+0x7ca>
 800859e:	2001      	movs	r0, #1
 80085a0:	e76f      	b.n	8008482 <_dtoa_r+0x7da>
 80085a2:	f04f 0800 	mov.w	r8, #0
 80085a6:	e7f6      	b.n	8008596 <_dtoa_r+0x8ee>
 80085a8:	4698      	mov	r8, r3
 80085aa:	e7f4      	b.n	8008596 <_dtoa_r+0x8ee>
 80085ac:	f43f af7d 	beq.w	80084aa <_dtoa_r+0x802>
 80085b0:	4618      	mov	r0, r3
 80085b2:	301c      	adds	r0, #28
 80085b4:	e772      	b.n	800849c <_dtoa_r+0x7f4>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	dc37      	bgt.n	800862c <_dtoa_r+0x984>
 80085bc:	9b06      	ldr	r3, [sp, #24]
 80085be:	2b02      	cmp	r3, #2
 80085c0:	dd34      	ble.n	800862c <_dtoa_r+0x984>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	9302      	str	r3, [sp, #8]
 80085c6:	9b02      	ldr	r3, [sp, #8]
 80085c8:	b96b      	cbnz	r3, 80085e6 <_dtoa_r+0x93e>
 80085ca:	4631      	mov	r1, r6
 80085cc:	2205      	movs	r2, #5
 80085ce:	4620      	mov	r0, r4
 80085d0:	f000 ff74 	bl	80094bc <__multadd>
 80085d4:	4601      	mov	r1, r0
 80085d6:	4606      	mov	r6, r0
 80085d8:	ee18 0a10 	vmov	r0, s16
 80085dc:	f001 f9d8 	bl	8009990 <__mcmp>
 80085e0:	2800      	cmp	r0, #0
 80085e2:	f73f adbb 	bgt.w	800815c <_dtoa_r+0x4b4>
 80085e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e8:	9d01      	ldr	r5, [sp, #4]
 80085ea:	43db      	mvns	r3, r3
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	f04f 0800 	mov.w	r8, #0
 80085f2:	4631      	mov	r1, r6
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 ff3f 	bl	8009478 <_Bfree>
 80085fa:	2f00      	cmp	r7, #0
 80085fc:	f43f aea4 	beq.w	8008348 <_dtoa_r+0x6a0>
 8008600:	f1b8 0f00 	cmp.w	r8, #0
 8008604:	d005      	beq.n	8008612 <_dtoa_r+0x96a>
 8008606:	45b8      	cmp	r8, r7
 8008608:	d003      	beq.n	8008612 <_dtoa_r+0x96a>
 800860a:	4641      	mov	r1, r8
 800860c:	4620      	mov	r0, r4
 800860e:	f000 ff33 	bl	8009478 <_Bfree>
 8008612:	4639      	mov	r1, r7
 8008614:	4620      	mov	r0, r4
 8008616:	f000 ff2f 	bl	8009478 <_Bfree>
 800861a:	e695      	b.n	8008348 <_dtoa_r+0x6a0>
 800861c:	2600      	movs	r6, #0
 800861e:	4637      	mov	r7, r6
 8008620:	e7e1      	b.n	80085e6 <_dtoa_r+0x93e>
 8008622:	9700      	str	r7, [sp, #0]
 8008624:	4637      	mov	r7, r6
 8008626:	e599      	b.n	800815c <_dtoa_r+0x4b4>
 8008628:	40240000 	.word	0x40240000
 800862c:	9b08      	ldr	r3, [sp, #32]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f000 80ca 	beq.w	80087c8 <_dtoa_r+0xb20>
 8008634:	9b03      	ldr	r3, [sp, #12]
 8008636:	9302      	str	r3, [sp, #8]
 8008638:	2d00      	cmp	r5, #0
 800863a:	dd05      	ble.n	8008648 <_dtoa_r+0x9a0>
 800863c:	4639      	mov	r1, r7
 800863e:	462a      	mov	r2, r5
 8008640:	4620      	mov	r0, r4
 8008642:	f001 f935 	bl	80098b0 <__lshift>
 8008646:	4607      	mov	r7, r0
 8008648:	f1b8 0f00 	cmp.w	r8, #0
 800864c:	d05b      	beq.n	8008706 <_dtoa_r+0xa5e>
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4620      	mov	r0, r4
 8008652:	f000 fed1 	bl	80093f8 <_Balloc>
 8008656:	4605      	mov	r5, r0
 8008658:	b928      	cbnz	r0, 8008666 <_dtoa_r+0x9be>
 800865a:	4b87      	ldr	r3, [pc, #540]	; (8008878 <_dtoa_r+0xbd0>)
 800865c:	4602      	mov	r2, r0
 800865e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008662:	f7ff bb3b 	b.w	8007cdc <_dtoa_r+0x34>
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	3202      	adds	r2, #2
 800866a:	0092      	lsls	r2, r2, #2
 800866c:	f107 010c 	add.w	r1, r7, #12
 8008670:	300c      	adds	r0, #12
 8008672:	f000 feb3 	bl	80093dc <memcpy>
 8008676:	2201      	movs	r2, #1
 8008678:	4629      	mov	r1, r5
 800867a:	4620      	mov	r0, r4
 800867c:	f001 f918 	bl	80098b0 <__lshift>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	f103 0901 	add.w	r9, r3, #1
 8008686:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800868a:	4413      	add	r3, r2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	f00a 0301 	and.w	r3, sl, #1
 8008692:	46b8      	mov	r8, r7
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	4607      	mov	r7, r0
 8008698:	4631      	mov	r1, r6
 800869a:	ee18 0a10 	vmov	r0, s16
 800869e:	f7ff fa75 	bl	8007b8c <quorem>
 80086a2:	4641      	mov	r1, r8
 80086a4:	9002      	str	r0, [sp, #8]
 80086a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086aa:	ee18 0a10 	vmov	r0, s16
 80086ae:	f001 f96f 	bl	8009990 <__mcmp>
 80086b2:	463a      	mov	r2, r7
 80086b4:	9003      	str	r0, [sp, #12]
 80086b6:	4631      	mov	r1, r6
 80086b8:	4620      	mov	r0, r4
 80086ba:	f001 f985 	bl	80099c8 <__mdiff>
 80086be:	68c2      	ldr	r2, [r0, #12]
 80086c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80086c4:	4605      	mov	r5, r0
 80086c6:	bb02      	cbnz	r2, 800870a <_dtoa_r+0xa62>
 80086c8:	4601      	mov	r1, r0
 80086ca:	ee18 0a10 	vmov	r0, s16
 80086ce:	f001 f95f 	bl	8009990 <__mcmp>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4629      	mov	r1, r5
 80086d6:	4620      	mov	r0, r4
 80086d8:	9207      	str	r2, [sp, #28]
 80086da:	f000 fecd 	bl	8009478 <_Bfree>
 80086de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086e2:	ea43 0102 	orr.w	r1, r3, r2
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	430b      	orrs	r3, r1
 80086ea:	464d      	mov	r5, r9
 80086ec:	d10f      	bne.n	800870e <_dtoa_r+0xa66>
 80086ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086f2:	d02a      	beq.n	800874a <_dtoa_r+0xaa2>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd02      	ble.n	8008700 <_dtoa_r+0xa58>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008700:	f88b a000 	strb.w	sl, [fp]
 8008704:	e775      	b.n	80085f2 <_dtoa_r+0x94a>
 8008706:	4638      	mov	r0, r7
 8008708:	e7ba      	b.n	8008680 <_dtoa_r+0x9d8>
 800870a:	2201      	movs	r2, #1
 800870c:	e7e2      	b.n	80086d4 <_dtoa_r+0xa2c>
 800870e:	9b03      	ldr	r3, [sp, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	db04      	blt.n	800871e <_dtoa_r+0xa76>
 8008714:	9906      	ldr	r1, [sp, #24]
 8008716:	430b      	orrs	r3, r1
 8008718:	9904      	ldr	r1, [sp, #16]
 800871a:	430b      	orrs	r3, r1
 800871c:	d122      	bne.n	8008764 <_dtoa_r+0xabc>
 800871e:	2a00      	cmp	r2, #0
 8008720:	ddee      	ble.n	8008700 <_dtoa_r+0xa58>
 8008722:	ee18 1a10 	vmov	r1, s16
 8008726:	2201      	movs	r2, #1
 8008728:	4620      	mov	r0, r4
 800872a:	f001 f8c1 	bl	80098b0 <__lshift>
 800872e:	4631      	mov	r1, r6
 8008730:	ee08 0a10 	vmov	s16, r0
 8008734:	f001 f92c 	bl	8009990 <__mcmp>
 8008738:	2800      	cmp	r0, #0
 800873a:	dc03      	bgt.n	8008744 <_dtoa_r+0xa9c>
 800873c:	d1e0      	bne.n	8008700 <_dtoa_r+0xa58>
 800873e:	f01a 0f01 	tst.w	sl, #1
 8008742:	d0dd      	beq.n	8008700 <_dtoa_r+0xa58>
 8008744:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008748:	d1d7      	bne.n	80086fa <_dtoa_r+0xa52>
 800874a:	2339      	movs	r3, #57	; 0x39
 800874c:	f88b 3000 	strb.w	r3, [fp]
 8008750:	462b      	mov	r3, r5
 8008752:	461d      	mov	r5, r3
 8008754:	3b01      	subs	r3, #1
 8008756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875a:	2a39      	cmp	r2, #57	; 0x39
 800875c:	d071      	beq.n	8008842 <_dtoa_r+0xb9a>
 800875e:	3201      	adds	r2, #1
 8008760:	701a      	strb	r2, [r3, #0]
 8008762:	e746      	b.n	80085f2 <_dtoa_r+0x94a>
 8008764:	2a00      	cmp	r2, #0
 8008766:	dd07      	ble.n	8008778 <_dtoa_r+0xad0>
 8008768:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800876c:	d0ed      	beq.n	800874a <_dtoa_r+0xaa2>
 800876e:	f10a 0301 	add.w	r3, sl, #1
 8008772:	f88b 3000 	strb.w	r3, [fp]
 8008776:	e73c      	b.n	80085f2 <_dtoa_r+0x94a>
 8008778:	9b05      	ldr	r3, [sp, #20]
 800877a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800877e:	4599      	cmp	r9, r3
 8008780:	d047      	beq.n	8008812 <_dtoa_r+0xb6a>
 8008782:	ee18 1a10 	vmov	r1, s16
 8008786:	2300      	movs	r3, #0
 8008788:	220a      	movs	r2, #10
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fe96 	bl	80094bc <__multadd>
 8008790:	45b8      	cmp	r8, r7
 8008792:	ee08 0a10 	vmov	s16, r0
 8008796:	f04f 0300 	mov.w	r3, #0
 800879a:	f04f 020a 	mov.w	r2, #10
 800879e:	4641      	mov	r1, r8
 80087a0:	4620      	mov	r0, r4
 80087a2:	d106      	bne.n	80087b2 <_dtoa_r+0xb0a>
 80087a4:	f000 fe8a 	bl	80094bc <__multadd>
 80087a8:	4680      	mov	r8, r0
 80087aa:	4607      	mov	r7, r0
 80087ac:	f109 0901 	add.w	r9, r9, #1
 80087b0:	e772      	b.n	8008698 <_dtoa_r+0x9f0>
 80087b2:	f000 fe83 	bl	80094bc <__multadd>
 80087b6:	4639      	mov	r1, r7
 80087b8:	4680      	mov	r8, r0
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	4620      	mov	r0, r4
 80087c0:	f000 fe7c 	bl	80094bc <__multadd>
 80087c4:	4607      	mov	r7, r0
 80087c6:	e7f1      	b.n	80087ac <_dtoa_r+0xb04>
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	ee18 0a10 	vmov	r0, s16
 80087d2:	4631      	mov	r1, r6
 80087d4:	f7ff f9da 	bl	8007b8c <quorem>
 80087d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	f805 ab01 	strb.w	sl, [r5], #1
 80087e2:	1aea      	subs	r2, r5, r3
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	4293      	cmp	r3, r2
 80087e8:	dd09      	ble.n	80087fe <_dtoa_r+0xb56>
 80087ea:	ee18 1a10 	vmov	r1, s16
 80087ee:	2300      	movs	r3, #0
 80087f0:	220a      	movs	r2, #10
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 fe62 	bl	80094bc <__multadd>
 80087f8:	ee08 0a10 	vmov	s16, r0
 80087fc:	e7e7      	b.n	80087ce <_dtoa_r+0xb26>
 80087fe:	9b02      	ldr	r3, [sp, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	bfc8      	it	gt
 8008804:	461d      	movgt	r5, r3
 8008806:	9b01      	ldr	r3, [sp, #4]
 8008808:	bfd8      	it	le
 800880a:	2501      	movle	r5, #1
 800880c:	441d      	add	r5, r3
 800880e:	f04f 0800 	mov.w	r8, #0
 8008812:	ee18 1a10 	vmov	r1, s16
 8008816:	2201      	movs	r2, #1
 8008818:	4620      	mov	r0, r4
 800881a:	f001 f849 	bl	80098b0 <__lshift>
 800881e:	4631      	mov	r1, r6
 8008820:	ee08 0a10 	vmov	s16, r0
 8008824:	f001 f8b4 	bl	8009990 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	dc91      	bgt.n	8008750 <_dtoa_r+0xaa8>
 800882c:	d102      	bne.n	8008834 <_dtoa_r+0xb8c>
 800882e:	f01a 0f01 	tst.w	sl, #1
 8008832:	d18d      	bne.n	8008750 <_dtoa_r+0xaa8>
 8008834:	462b      	mov	r3, r5
 8008836:	461d      	mov	r5, r3
 8008838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883c:	2a30      	cmp	r2, #48	; 0x30
 800883e:	d0fa      	beq.n	8008836 <_dtoa_r+0xb8e>
 8008840:	e6d7      	b.n	80085f2 <_dtoa_r+0x94a>
 8008842:	9a01      	ldr	r2, [sp, #4]
 8008844:	429a      	cmp	r2, r3
 8008846:	d184      	bne.n	8008752 <_dtoa_r+0xaaa>
 8008848:	9b00      	ldr	r3, [sp, #0]
 800884a:	3301      	adds	r3, #1
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	2331      	movs	r3, #49	; 0x31
 8008850:	7013      	strb	r3, [r2, #0]
 8008852:	e6ce      	b.n	80085f2 <_dtoa_r+0x94a>
 8008854:	4b09      	ldr	r3, [pc, #36]	; (800887c <_dtoa_r+0xbd4>)
 8008856:	f7ff ba95 	b.w	8007d84 <_dtoa_r+0xdc>
 800885a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800885c:	2b00      	cmp	r3, #0
 800885e:	f47f aa6e 	bne.w	8007d3e <_dtoa_r+0x96>
 8008862:	4b07      	ldr	r3, [pc, #28]	; (8008880 <_dtoa_r+0xbd8>)
 8008864:	f7ff ba8e 	b.w	8007d84 <_dtoa_r+0xdc>
 8008868:	9b02      	ldr	r3, [sp, #8]
 800886a:	2b00      	cmp	r3, #0
 800886c:	dcae      	bgt.n	80087cc <_dtoa_r+0xb24>
 800886e:	9b06      	ldr	r3, [sp, #24]
 8008870:	2b02      	cmp	r3, #2
 8008872:	f73f aea8 	bgt.w	80085c6 <_dtoa_r+0x91e>
 8008876:	e7a9      	b.n	80087cc <_dtoa_r+0xb24>
 8008878:	0800b850 	.word	0x0800b850
 800887c:	0800b650 	.word	0x0800b650
 8008880:	0800b7d1 	.word	0x0800b7d1

08008884 <__sflush_r>:
 8008884:	898a      	ldrh	r2, [r1, #12]
 8008886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800888a:	4605      	mov	r5, r0
 800888c:	0710      	lsls	r0, r2, #28
 800888e:	460c      	mov	r4, r1
 8008890:	d458      	bmi.n	8008944 <__sflush_r+0xc0>
 8008892:	684b      	ldr	r3, [r1, #4]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc05      	bgt.n	80088a4 <__sflush_r+0x20>
 8008898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800889a:	2b00      	cmp	r3, #0
 800889c:	dc02      	bgt.n	80088a4 <__sflush_r+0x20>
 800889e:	2000      	movs	r0, #0
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088a6:	2e00      	cmp	r6, #0
 80088a8:	d0f9      	beq.n	800889e <__sflush_r+0x1a>
 80088aa:	2300      	movs	r3, #0
 80088ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088b0:	682f      	ldr	r7, [r5, #0]
 80088b2:	602b      	str	r3, [r5, #0]
 80088b4:	d032      	beq.n	800891c <__sflush_r+0x98>
 80088b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	075a      	lsls	r2, r3, #29
 80088bc:	d505      	bpl.n	80088ca <__sflush_r+0x46>
 80088be:	6863      	ldr	r3, [r4, #4]
 80088c0:	1ac0      	subs	r0, r0, r3
 80088c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088c4:	b10b      	cbz	r3, 80088ca <__sflush_r+0x46>
 80088c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088c8:	1ac0      	subs	r0, r0, r3
 80088ca:	2300      	movs	r3, #0
 80088cc:	4602      	mov	r2, r0
 80088ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088d0:	6a21      	ldr	r1, [r4, #32]
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b0      	blx	r6
 80088d6:	1c43      	adds	r3, r0, #1
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	d106      	bne.n	80088ea <__sflush_r+0x66>
 80088dc:	6829      	ldr	r1, [r5, #0]
 80088de:	291d      	cmp	r1, #29
 80088e0:	d82c      	bhi.n	800893c <__sflush_r+0xb8>
 80088e2:	4a2a      	ldr	r2, [pc, #168]	; (800898c <__sflush_r+0x108>)
 80088e4:	40ca      	lsrs	r2, r1
 80088e6:	07d6      	lsls	r6, r2, #31
 80088e8:	d528      	bpl.n	800893c <__sflush_r+0xb8>
 80088ea:	2200      	movs	r2, #0
 80088ec:	6062      	str	r2, [r4, #4]
 80088ee:	04d9      	lsls	r1, r3, #19
 80088f0:	6922      	ldr	r2, [r4, #16]
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	d504      	bpl.n	8008900 <__sflush_r+0x7c>
 80088f6:	1c42      	adds	r2, r0, #1
 80088f8:	d101      	bne.n	80088fe <__sflush_r+0x7a>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b903      	cbnz	r3, 8008900 <__sflush_r+0x7c>
 80088fe:	6560      	str	r0, [r4, #84]	; 0x54
 8008900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008902:	602f      	str	r7, [r5, #0]
 8008904:	2900      	cmp	r1, #0
 8008906:	d0ca      	beq.n	800889e <__sflush_r+0x1a>
 8008908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800890c:	4299      	cmp	r1, r3
 800890e:	d002      	beq.n	8008916 <__sflush_r+0x92>
 8008910:	4628      	mov	r0, r5
 8008912:	f001 fa49 	bl	8009da8 <_free_r>
 8008916:	2000      	movs	r0, #0
 8008918:	6360      	str	r0, [r4, #52]	; 0x34
 800891a:	e7c1      	b.n	80088a0 <__sflush_r+0x1c>
 800891c:	6a21      	ldr	r1, [r4, #32]
 800891e:	2301      	movs	r3, #1
 8008920:	4628      	mov	r0, r5
 8008922:	47b0      	blx	r6
 8008924:	1c41      	adds	r1, r0, #1
 8008926:	d1c7      	bne.n	80088b8 <__sflush_r+0x34>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d0c4      	beq.n	80088b8 <__sflush_r+0x34>
 800892e:	2b1d      	cmp	r3, #29
 8008930:	d001      	beq.n	8008936 <__sflush_r+0xb2>
 8008932:	2b16      	cmp	r3, #22
 8008934:	d101      	bne.n	800893a <__sflush_r+0xb6>
 8008936:	602f      	str	r7, [r5, #0]
 8008938:	e7b1      	b.n	800889e <__sflush_r+0x1a>
 800893a:	89a3      	ldrh	r3, [r4, #12]
 800893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008940:	81a3      	strh	r3, [r4, #12]
 8008942:	e7ad      	b.n	80088a0 <__sflush_r+0x1c>
 8008944:	690f      	ldr	r7, [r1, #16]
 8008946:	2f00      	cmp	r7, #0
 8008948:	d0a9      	beq.n	800889e <__sflush_r+0x1a>
 800894a:	0793      	lsls	r3, r2, #30
 800894c:	680e      	ldr	r6, [r1, #0]
 800894e:	bf08      	it	eq
 8008950:	694b      	ldreq	r3, [r1, #20]
 8008952:	600f      	str	r7, [r1, #0]
 8008954:	bf18      	it	ne
 8008956:	2300      	movne	r3, #0
 8008958:	eba6 0807 	sub.w	r8, r6, r7
 800895c:	608b      	str	r3, [r1, #8]
 800895e:	f1b8 0f00 	cmp.w	r8, #0
 8008962:	dd9c      	ble.n	800889e <__sflush_r+0x1a>
 8008964:	6a21      	ldr	r1, [r4, #32]
 8008966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008968:	4643      	mov	r3, r8
 800896a:	463a      	mov	r2, r7
 800896c:	4628      	mov	r0, r5
 800896e:	47b0      	blx	r6
 8008970:	2800      	cmp	r0, #0
 8008972:	dc06      	bgt.n	8008982 <__sflush_r+0xfe>
 8008974:	89a3      	ldrh	r3, [r4, #12]
 8008976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897a:	81a3      	strh	r3, [r4, #12]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	e78e      	b.n	80088a0 <__sflush_r+0x1c>
 8008982:	4407      	add	r7, r0
 8008984:	eba8 0800 	sub.w	r8, r8, r0
 8008988:	e7e9      	b.n	800895e <__sflush_r+0xda>
 800898a:	bf00      	nop
 800898c:	20400001 	.word	0x20400001

08008990 <_fflush_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	690b      	ldr	r3, [r1, #16]
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	b913      	cbnz	r3, 80089a0 <_fflush_r+0x10>
 800899a:	2500      	movs	r5, #0
 800899c:	4628      	mov	r0, r5
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	b118      	cbz	r0, 80089aa <_fflush_r+0x1a>
 80089a2:	6983      	ldr	r3, [r0, #24]
 80089a4:	b90b      	cbnz	r3, 80089aa <_fflush_r+0x1a>
 80089a6:	f000 f887 	bl	8008ab8 <__sinit>
 80089aa:	4b14      	ldr	r3, [pc, #80]	; (80089fc <_fflush_r+0x6c>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	d11b      	bne.n	80089e8 <_fflush_r+0x58>
 80089b0:	686c      	ldr	r4, [r5, #4]
 80089b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d0ef      	beq.n	800899a <_fflush_r+0xa>
 80089ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089bc:	07d0      	lsls	r0, r2, #31
 80089be:	d404      	bmi.n	80089ca <_fflush_r+0x3a>
 80089c0:	0599      	lsls	r1, r3, #22
 80089c2:	d402      	bmi.n	80089ca <_fflush_r+0x3a>
 80089c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c6:	f000 fc88 	bl	80092da <__retarget_lock_acquire_recursive>
 80089ca:	4628      	mov	r0, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7ff ff59 	bl	8008884 <__sflush_r>
 80089d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d4:	07da      	lsls	r2, r3, #31
 80089d6:	4605      	mov	r5, r0
 80089d8:	d4e0      	bmi.n	800899c <_fflush_r+0xc>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	059b      	lsls	r3, r3, #22
 80089de:	d4dd      	bmi.n	800899c <_fflush_r+0xc>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f000 fc7b 	bl	80092dc <__retarget_lock_release_recursive>
 80089e6:	e7d9      	b.n	800899c <_fflush_r+0xc>
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <_fflush_r+0x70>)
 80089ea:	429c      	cmp	r4, r3
 80089ec:	d101      	bne.n	80089f2 <_fflush_r+0x62>
 80089ee:	68ac      	ldr	r4, [r5, #8]
 80089f0:	e7df      	b.n	80089b2 <_fflush_r+0x22>
 80089f2:	4b04      	ldr	r3, [pc, #16]	; (8008a04 <_fflush_r+0x74>)
 80089f4:	429c      	cmp	r4, r3
 80089f6:	bf08      	it	eq
 80089f8:	68ec      	ldreq	r4, [r5, #12]
 80089fa:	e7da      	b.n	80089b2 <_fflush_r+0x22>
 80089fc:	0800b884 	.word	0x0800b884
 8008a00:	0800b8a4 	.word	0x0800b8a4
 8008a04:	0800b864 	.word	0x0800b864

08008a08 <std>:
 8008a08:	2300      	movs	r3, #0
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8008a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a16:	6083      	str	r3, [r0, #8]
 8008a18:	8181      	strh	r1, [r0, #12]
 8008a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8008a1c:	81c2      	strh	r2, [r0, #14]
 8008a1e:	6183      	str	r3, [r0, #24]
 8008a20:	4619      	mov	r1, r3
 8008a22:	2208      	movs	r2, #8
 8008a24:	305c      	adds	r0, #92	; 0x5c
 8008a26:	f7fd fa05 	bl	8005e34 <memset>
 8008a2a:	4b05      	ldr	r3, [pc, #20]	; (8008a40 <std+0x38>)
 8008a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8008a2e:	4b05      	ldr	r3, [pc, #20]	; (8008a44 <std+0x3c>)
 8008a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a32:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <std+0x40>)
 8008a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a36:	4b05      	ldr	r3, [pc, #20]	; (8008a4c <std+0x44>)
 8008a38:	6224      	str	r4, [r4, #32]
 8008a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8008a3c:	bd10      	pop	{r4, pc}
 8008a3e:	bf00      	nop
 8008a40:	0800a509 	.word	0x0800a509
 8008a44:	0800a52b 	.word	0x0800a52b
 8008a48:	0800a563 	.word	0x0800a563
 8008a4c:	0800a587 	.word	0x0800a587

08008a50 <_cleanup_r>:
 8008a50:	4901      	ldr	r1, [pc, #4]	; (8008a58 <_cleanup_r+0x8>)
 8008a52:	f000 b8af 	b.w	8008bb4 <_fwalk_reent>
 8008a56:	bf00      	nop
 8008a58:	08008991 	.word	0x08008991

08008a5c <__sfmoreglue>:
 8008a5c:	b570      	push	{r4, r5, r6, lr}
 8008a5e:	2268      	movs	r2, #104	; 0x68
 8008a60:	1e4d      	subs	r5, r1, #1
 8008a62:	4355      	muls	r5, r2
 8008a64:	460e      	mov	r6, r1
 8008a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a6a:	f001 fa09 	bl	8009e80 <_malloc_r>
 8008a6e:	4604      	mov	r4, r0
 8008a70:	b140      	cbz	r0, 8008a84 <__sfmoreglue+0x28>
 8008a72:	2100      	movs	r1, #0
 8008a74:	e9c0 1600 	strd	r1, r6, [r0]
 8008a78:	300c      	adds	r0, #12
 8008a7a:	60a0      	str	r0, [r4, #8]
 8008a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a80:	f7fd f9d8 	bl	8005e34 <memset>
 8008a84:	4620      	mov	r0, r4
 8008a86:	bd70      	pop	{r4, r5, r6, pc}

08008a88 <__sfp_lock_acquire>:
 8008a88:	4801      	ldr	r0, [pc, #4]	; (8008a90 <__sfp_lock_acquire+0x8>)
 8008a8a:	f000 bc26 	b.w	80092da <__retarget_lock_acquire_recursive>
 8008a8e:	bf00      	nop
 8008a90:	20000655 	.word	0x20000655

08008a94 <__sfp_lock_release>:
 8008a94:	4801      	ldr	r0, [pc, #4]	; (8008a9c <__sfp_lock_release+0x8>)
 8008a96:	f000 bc21 	b.w	80092dc <__retarget_lock_release_recursive>
 8008a9a:	bf00      	nop
 8008a9c:	20000655 	.word	0x20000655

08008aa0 <__sinit_lock_acquire>:
 8008aa0:	4801      	ldr	r0, [pc, #4]	; (8008aa8 <__sinit_lock_acquire+0x8>)
 8008aa2:	f000 bc1a 	b.w	80092da <__retarget_lock_acquire_recursive>
 8008aa6:	bf00      	nop
 8008aa8:	20000656 	.word	0x20000656

08008aac <__sinit_lock_release>:
 8008aac:	4801      	ldr	r0, [pc, #4]	; (8008ab4 <__sinit_lock_release+0x8>)
 8008aae:	f000 bc15 	b.w	80092dc <__retarget_lock_release_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	20000656 	.word	0x20000656

08008ab8 <__sinit>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	4604      	mov	r4, r0
 8008abc:	f7ff fff0 	bl	8008aa0 <__sinit_lock_acquire>
 8008ac0:	69a3      	ldr	r3, [r4, #24]
 8008ac2:	b11b      	cbz	r3, 8008acc <__sinit+0x14>
 8008ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ac8:	f7ff bff0 	b.w	8008aac <__sinit_lock_release>
 8008acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ad2:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <__sinit+0x68>)
 8008ad4:	4a13      	ldr	r2, [pc, #76]	; (8008b24 <__sinit+0x6c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008ada:	42a3      	cmp	r3, r4
 8008adc:	bf04      	itt	eq
 8008ade:	2301      	moveq	r3, #1
 8008ae0:	61a3      	streq	r3, [r4, #24]
 8008ae2:	4620      	mov	r0, r4
 8008ae4:	f000 f820 	bl	8008b28 <__sfp>
 8008ae8:	6060      	str	r0, [r4, #4]
 8008aea:	4620      	mov	r0, r4
 8008aec:	f000 f81c 	bl	8008b28 <__sfp>
 8008af0:	60a0      	str	r0, [r4, #8]
 8008af2:	4620      	mov	r0, r4
 8008af4:	f000 f818 	bl	8008b28 <__sfp>
 8008af8:	2200      	movs	r2, #0
 8008afa:	60e0      	str	r0, [r4, #12]
 8008afc:	2104      	movs	r1, #4
 8008afe:	6860      	ldr	r0, [r4, #4]
 8008b00:	f7ff ff82 	bl	8008a08 <std>
 8008b04:	68a0      	ldr	r0, [r4, #8]
 8008b06:	2201      	movs	r2, #1
 8008b08:	2109      	movs	r1, #9
 8008b0a:	f7ff ff7d 	bl	8008a08 <std>
 8008b0e:	68e0      	ldr	r0, [r4, #12]
 8008b10:	2202      	movs	r2, #2
 8008b12:	2112      	movs	r1, #18
 8008b14:	f7ff ff78 	bl	8008a08 <std>
 8008b18:	2301      	movs	r3, #1
 8008b1a:	61a3      	str	r3, [r4, #24]
 8008b1c:	e7d2      	b.n	8008ac4 <__sinit+0xc>
 8008b1e:	bf00      	nop
 8008b20:	0800b63c 	.word	0x0800b63c
 8008b24:	08008a51 	.word	0x08008a51

08008b28 <__sfp>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	4607      	mov	r7, r0
 8008b2c:	f7ff ffac 	bl	8008a88 <__sfp_lock_acquire>
 8008b30:	4b1e      	ldr	r3, [pc, #120]	; (8008bac <__sfp+0x84>)
 8008b32:	681e      	ldr	r6, [r3, #0]
 8008b34:	69b3      	ldr	r3, [r6, #24]
 8008b36:	b913      	cbnz	r3, 8008b3e <__sfp+0x16>
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f7ff ffbd 	bl	8008ab8 <__sinit>
 8008b3e:	3648      	adds	r6, #72	; 0x48
 8008b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b44:	3b01      	subs	r3, #1
 8008b46:	d503      	bpl.n	8008b50 <__sfp+0x28>
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	b30b      	cbz	r3, 8008b90 <__sfp+0x68>
 8008b4c:	6836      	ldr	r6, [r6, #0]
 8008b4e:	e7f7      	b.n	8008b40 <__sfp+0x18>
 8008b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b54:	b9d5      	cbnz	r5, 8008b8c <__sfp+0x64>
 8008b56:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <__sfp+0x88>)
 8008b58:	60e3      	str	r3, [r4, #12]
 8008b5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8008b60:	f000 fbba 	bl	80092d8 <__retarget_lock_init_recursive>
 8008b64:	f7ff ff96 	bl	8008a94 <__sfp_lock_release>
 8008b68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b70:	6025      	str	r5, [r4, #0]
 8008b72:	61a5      	str	r5, [r4, #24]
 8008b74:	2208      	movs	r2, #8
 8008b76:	4629      	mov	r1, r5
 8008b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b7c:	f7fd f95a 	bl	8005e34 <memset>
 8008b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b88:	4620      	mov	r0, r4
 8008b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b8c:	3468      	adds	r4, #104	; 0x68
 8008b8e:	e7d9      	b.n	8008b44 <__sfp+0x1c>
 8008b90:	2104      	movs	r1, #4
 8008b92:	4638      	mov	r0, r7
 8008b94:	f7ff ff62 	bl	8008a5c <__sfmoreglue>
 8008b98:	4604      	mov	r4, r0
 8008b9a:	6030      	str	r0, [r6, #0]
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	d1d5      	bne.n	8008b4c <__sfp+0x24>
 8008ba0:	f7ff ff78 	bl	8008a94 <__sfp_lock_release>
 8008ba4:	230c      	movs	r3, #12
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	e7ee      	b.n	8008b88 <__sfp+0x60>
 8008baa:	bf00      	nop
 8008bac:	0800b63c 	.word	0x0800b63c
 8008bb0:	ffff0001 	.word	0xffff0001

08008bb4 <_fwalk_reent>:
 8008bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bb8:	4606      	mov	r6, r0
 8008bba:	4688      	mov	r8, r1
 8008bbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bc0:	2700      	movs	r7, #0
 8008bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8008bca:	d505      	bpl.n	8008bd8 <_fwalk_reent+0x24>
 8008bcc:	6824      	ldr	r4, [r4, #0]
 8008bce:	2c00      	cmp	r4, #0
 8008bd0:	d1f7      	bne.n	8008bc2 <_fwalk_reent+0xe>
 8008bd2:	4638      	mov	r0, r7
 8008bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bd8:	89ab      	ldrh	r3, [r5, #12]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d907      	bls.n	8008bee <_fwalk_reent+0x3a>
 8008bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008be2:	3301      	adds	r3, #1
 8008be4:	d003      	beq.n	8008bee <_fwalk_reent+0x3a>
 8008be6:	4629      	mov	r1, r5
 8008be8:	4630      	mov	r0, r6
 8008bea:	47c0      	blx	r8
 8008bec:	4307      	orrs	r7, r0
 8008bee:	3568      	adds	r5, #104	; 0x68
 8008bf0:	e7e9      	b.n	8008bc6 <_fwalk_reent+0x12>

08008bf2 <rshift>:
 8008bf2:	6903      	ldr	r3, [r0, #16]
 8008bf4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c00:	f100 0414 	add.w	r4, r0, #20
 8008c04:	dd45      	ble.n	8008c92 <rshift+0xa0>
 8008c06:	f011 011f 	ands.w	r1, r1, #31
 8008c0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c0e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c12:	d10c      	bne.n	8008c2e <rshift+0x3c>
 8008c14:	f100 0710 	add.w	r7, r0, #16
 8008c18:	4629      	mov	r1, r5
 8008c1a:	42b1      	cmp	r1, r6
 8008c1c:	d334      	bcc.n	8008c88 <rshift+0x96>
 8008c1e:	1a9b      	subs	r3, r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	1eea      	subs	r2, r5, #3
 8008c24:	4296      	cmp	r6, r2
 8008c26:	bf38      	it	cc
 8008c28:	2300      	movcc	r3, #0
 8008c2a:	4423      	add	r3, r4
 8008c2c:	e015      	b.n	8008c5a <rshift+0x68>
 8008c2e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c32:	f1c1 0820 	rsb	r8, r1, #32
 8008c36:	40cf      	lsrs	r7, r1
 8008c38:	f105 0e04 	add.w	lr, r5, #4
 8008c3c:	46a1      	mov	r9, r4
 8008c3e:	4576      	cmp	r6, lr
 8008c40:	46f4      	mov	ip, lr
 8008c42:	d815      	bhi.n	8008c70 <rshift+0x7e>
 8008c44:	1a9a      	subs	r2, r3, r2
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	3a04      	subs	r2, #4
 8008c4a:	3501      	adds	r5, #1
 8008c4c:	42ae      	cmp	r6, r5
 8008c4e:	bf38      	it	cc
 8008c50:	2200      	movcc	r2, #0
 8008c52:	18a3      	adds	r3, r4, r2
 8008c54:	50a7      	str	r7, [r4, r2]
 8008c56:	b107      	cbz	r7, 8008c5a <rshift+0x68>
 8008c58:	3304      	adds	r3, #4
 8008c5a:	1b1a      	subs	r2, r3, r4
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c62:	bf08      	it	eq
 8008c64:	2300      	moveq	r3, #0
 8008c66:	6102      	str	r2, [r0, #16]
 8008c68:	bf08      	it	eq
 8008c6a:	6143      	streq	r3, [r0, #20]
 8008c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c70:	f8dc c000 	ldr.w	ip, [ip]
 8008c74:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c78:	ea4c 0707 	orr.w	r7, ip, r7
 8008c7c:	f849 7b04 	str.w	r7, [r9], #4
 8008c80:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c84:	40cf      	lsrs	r7, r1
 8008c86:	e7da      	b.n	8008c3e <rshift+0x4c>
 8008c88:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c8c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c90:	e7c3      	b.n	8008c1a <rshift+0x28>
 8008c92:	4623      	mov	r3, r4
 8008c94:	e7e1      	b.n	8008c5a <rshift+0x68>

08008c96 <__hexdig_fun>:
 8008c96:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c9a:	2b09      	cmp	r3, #9
 8008c9c:	d802      	bhi.n	8008ca4 <__hexdig_fun+0xe>
 8008c9e:	3820      	subs	r0, #32
 8008ca0:	b2c0      	uxtb	r0, r0
 8008ca2:	4770      	bx	lr
 8008ca4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ca8:	2b05      	cmp	r3, #5
 8008caa:	d801      	bhi.n	8008cb0 <__hexdig_fun+0x1a>
 8008cac:	3847      	subs	r0, #71	; 0x47
 8008cae:	e7f7      	b.n	8008ca0 <__hexdig_fun+0xa>
 8008cb0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cb4:	2b05      	cmp	r3, #5
 8008cb6:	d801      	bhi.n	8008cbc <__hexdig_fun+0x26>
 8008cb8:	3827      	subs	r0, #39	; 0x27
 8008cba:	e7f1      	b.n	8008ca0 <__hexdig_fun+0xa>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	4770      	bx	lr

08008cc0 <__gethex>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b02 	vpush	{d8}
 8008cc8:	b089      	sub	sp, #36	; 0x24
 8008cca:	ee08 0a10 	vmov	s16, r0
 8008cce:	9304      	str	r3, [sp, #16]
 8008cd0:	4bb4      	ldr	r3, [pc, #720]	; (8008fa4 <__gethex+0x2e4>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	468b      	mov	fp, r1
 8008cda:	4690      	mov	r8, r2
 8008cdc:	f7f7 fa78 	bl	80001d0 <strlen>
 8008ce0:	9b01      	ldr	r3, [sp, #4]
 8008ce2:	f8db 2000 	ldr.w	r2, [fp]
 8008ce6:	4403      	add	r3, r0
 8008ce8:	4682      	mov	sl, r0
 8008cea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008cee:	9305      	str	r3, [sp, #20]
 8008cf0:	1c93      	adds	r3, r2, #2
 8008cf2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008cf6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008cfa:	32fe      	adds	r2, #254	; 0xfe
 8008cfc:	18d1      	adds	r1, r2, r3
 8008cfe:	461f      	mov	r7, r3
 8008d00:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008d04:	9100      	str	r1, [sp, #0]
 8008d06:	2830      	cmp	r0, #48	; 0x30
 8008d08:	d0f8      	beq.n	8008cfc <__gethex+0x3c>
 8008d0a:	f7ff ffc4 	bl	8008c96 <__hexdig_fun>
 8008d0e:	4604      	mov	r4, r0
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d13a      	bne.n	8008d8a <__gethex+0xca>
 8008d14:	9901      	ldr	r1, [sp, #4]
 8008d16:	4652      	mov	r2, sl
 8008d18:	4638      	mov	r0, r7
 8008d1a:	f001 fc38 	bl	800a58e <strncmp>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d168      	bne.n	8008df6 <__gethex+0x136>
 8008d24:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008d28:	eb07 060a 	add.w	r6, r7, sl
 8008d2c:	f7ff ffb3 	bl	8008c96 <__hexdig_fun>
 8008d30:	2800      	cmp	r0, #0
 8008d32:	d062      	beq.n	8008dfa <__gethex+0x13a>
 8008d34:	4633      	mov	r3, r6
 8008d36:	7818      	ldrb	r0, [r3, #0]
 8008d38:	2830      	cmp	r0, #48	; 0x30
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	f103 0301 	add.w	r3, r3, #1
 8008d40:	d0f9      	beq.n	8008d36 <__gethex+0x76>
 8008d42:	f7ff ffa8 	bl	8008c96 <__hexdig_fun>
 8008d46:	2301      	movs	r3, #1
 8008d48:	fab0 f480 	clz	r4, r0
 8008d4c:	0964      	lsrs	r4, r4, #5
 8008d4e:	4635      	mov	r5, r6
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	463a      	mov	r2, r7
 8008d54:	4616      	mov	r6, r2
 8008d56:	3201      	adds	r2, #1
 8008d58:	7830      	ldrb	r0, [r6, #0]
 8008d5a:	f7ff ff9c 	bl	8008c96 <__hexdig_fun>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d1f8      	bne.n	8008d54 <__gethex+0x94>
 8008d62:	9901      	ldr	r1, [sp, #4]
 8008d64:	4652      	mov	r2, sl
 8008d66:	4630      	mov	r0, r6
 8008d68:	f001 fc11 	bl	800a58e <strncmp>
 8008d6c:	b980      	cbnz	r0, 8008d90 <__gethex+0xd0>
 8008d6e:	b94d      	cbnz	r5, 8008d84 <__gethex+0xc4>
 8008d70:	eb06 050a 	add.w	r5, r6, sl
 8008d74:	462a      	mov	r2, r5
 8008d76:	4616      	mov	r6, r2
 8008d78:	3201      	adds	r2, #1
 8008d7a:	7830      	ldrb	r0, [r6, #0]
 8008d7c:	f7ff ff8b 	bl	8008c96 <__hexdig_fun>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	d1f8      	bne.n	8008d76 <__gethex+0xb6>
 8008d84:	1bad      	subs	r5, r5, r6
 8008d86:	00ad      	lsls	r5, r5, #2
 8008d88:	e004      	b.n	8008d94 <__gethex+0xd4>
 8008d8a:	2400      	movs	r4, #0
 8008d8c:	4625      	mov	r5, r4
 8008d8e:	e7e0      	b.n	8008d52 <__gethex+0x92>
 8008d90:	2d00      	cmp	r5, #0
 8008d92:	d1f7      	bne.n	8008d84 <__gethex+0xc4>
 8008d94:	7833      	ldrb	r3, [r6, #0]
 8008d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d9a:	2b50      	cmp	r3, #80	; 0x50
 8008d9c:	d13b      	bne.n	8008e16 <__gethex+0x156>
 8008d9e:	7873      	ldrb	r3, [r6, #1]
 8008da0:	2b2b      	cmp	r3, #43	; 0x2b
 8008da2:	d02c      	beq.n	8008dfe <__gethex+0x13e>
 8008da4:	2b2d      	cmp	r3, #45	; 0x2d
 8008da6:	d02e      	beq.n	8008e06 <__gethex+0x146>
 8008da8:	1c71      	adds	r1, r6, #1
 8008daa:	f04f 0900 	mov.w	r9, #0
 8008dae:	7808      	ldrb	r0, [r1, #0]
 8008db0:	f7ff ff71 	bl	8008c96 <__hexdig_fun>
 8008db4:	1e43      	subs	r3, r0, #1
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b18      	cmp	r3, #24
 8008dba:	d82c      	bhi.n	8008e16 <__gethex+0x156>
 8008dbc:	f1a0 0210 	sub.w	r2, r0, #16
 8008dc0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dc4:	f7ff ff67 	bl	8008c96 <__hexdig_fun>
 8008dc8:	1e43      	subs	r3, r0, #1
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	2b18      	cmp	r3, #24
 8008dce:	d91d      	bls.n	8008e0c <__gethex+0x14c>
 8008dd0:	f1b9 0f00 	cmp.w	r9, #0
 8008dd4:	d000      	beq.n	8008dd8 <__gethex+0x118>
 8008dd6:	4252      	negs	r2, r2
 8008dd8:	4415      	add	r5, r2
 8008dda:	f8cb 1000 	str.w	r1, [fp]
 8008dde:	b1e4      	cbz	r4, 8008e1a <__gethex+0x15a>
 8008de0:	9b00      	ldr	r3, [sp, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bf14      	ite	ne
 8008de6:	2700      	movne	r7, #0
 8008de8:	2706      	moveq	r7, #6
 8008dea:	4638      	mov	r0, r7
 8008dec:	b009      	add	sp, #36	; 0x24
 8008dee:	ecbd 8b02 	vpop	{d8}
 8008df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df6:	463e      	mov	r6, r7
 8008df8:	4625      	mov	r5, r4
 8008dfa:	2401      	movs	r4, #1
 8008dfc:	e7ca      	b.n	8008d94 <__gethex+0xd4>
 8008dfe:	f04f 0900 	mov.w	r9, #0
 8008e02:	1cb1      	adds	r1, r6, #2
 8008e04:	e7d3      	b.n	8008dae <__gethex+0xee>
 8008e06:	f04f 0901 	mov.w	r9, #1
 8008e0a:	e7fa      	b.n	8008e02 <__gethex+0x142>
 8008e0c:	230a      	movs	r3, #10
 8008e0e:	fb03 0202 	mla	r2, r3, r2, r0
 8008e12:	3a10      	subs	r2, #16
 8008e14:	e7d4      	b.n	8008dc0 <__gethex+0x100>
 8008e16:	4631      	mov	r1, r6
 8008e18:	e7df      	b.n	8008dda <__gethex+0x11a>
 8008e1a:	1bf3      	subs	r3, r6, r7
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	4621      	mov	r1, r4
 8008e20:	2b07      	cmp	r3, #7
 8008e22:	dc0b      	bgt.n	8008e3c <__gethex+0x17c>
 8008e24:	ee18 0a10 	vmov	r0, s16
 8008e28:	f000 fae6 	bl	80093f8 <_Balloc>
 8008e2c:	4604      	mov	r4, r0
 8008e2e:	b940      	cbnz	r0, 8008e42 <__gethex+0x182>
 8008e30:	4b5d      	ldr	r3, [pc, #372]	; (8008fa8 <__gethex+0x2e8>)
 8008e32:	4602      	mov	r2, r0
 8008e34:	21de      	movs	r1, #222	; 0xde
 8008e36:	485d      	ldr	r0, [pc, #372]	; (8008fac <__gethex+0x2ec>)
 8008e38:	f001 fbdc 	bl	800a5f4 <__assert_func>
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	105b      	asrs	r3, r3, #1
 8008e40:	e7ee      	b.n	8008e20 <__gethex+0x160>
 8008e42:	f100 0914 	add.w	r9, r0, #20
 8008e46:	f04f 0b00 	mov.w	fp, #0
 8008e4a:	f1ca 0301 	rsb	r3, sl, #1
 8008e4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e52:	f8cd b000 	str.w	fp, [sp]
 8008e56:	9306      	str	r3, [sp, #24]
 8008e58:	42b7      	cmp	r7, r6
 8008e5a:	d340      	bcc.n	8008ede <__gethex+0x21e>
 8008e5c:	9802      	ldr	r0, [sp, #8]
 8008e5e:	9b00      	ldr	r3, [sp, #0]
 8008e60:	f840 3b04 	str.w	r3, [r0], #4
 8008e64:	eba0 0009 	sub.w	r0, r0, r9
 8008e68:	1080      	asrs	r0, r0, #2
 8008e6a:	0146      	lsls	r6, r0, #5
 8008e6c:	6120      	str	r0, [r4, #16]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f000 fbb4 	bl	80095dc <__hi0bits>
 8008e74:	1a30      	subs	r0, r6, r0
 8008e76:	f8d8 6000 	ldr.w	r6, [r8]
 8008e7a:	42b0      	cmp	r0, r6
 8008e7c:	dd63      	ble.n	8008f46 <__gethex+0x286>
 8008e7e:	1b87      	subs	r7, r0, r6
 8008e80:	4639      	mov	r1, r7
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 ff58 	bl	8009d38 <__any_on>
 8008e88:	4682      	mov	sl, r0
 8008e8a:	b1a8      	cbz	r0, 8008eb8 <__gethex+0x1f8>
 8008e8c:	1e7b      	subs	r3, r7, #1
 8008e8e:	1159      	asrs	r1, r3, #5
 8008e90:	f003 021f 	and.w	r2, r3, #31
 8008e94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e98:	f04f 0a01 	mov.w	sl, #1
 8008e9c:	fa0a f202 	lsl.w	r2, sl, r2
 8008ea0:	420a      	tst	r2, r1
 8008ea2:	d009      	beq.n	8008eb8 <__gethex+0x1f8>
 8008ea4:	4553      	cmp	r3, sl
 8008ea6:	dd05      	ble.n	8008eb4 <__gethex+0x1f4>
 8008ea8:	1eb9      	subs	r1, r7, #2
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 ff44 	bl	8009d38 <__any_on>
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	d145      	bne.n	8008f40 <__gethex+0x280>
 8008eb4:	f04f 0a02 	mov.w	sl, #2
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f7ff fe99 	bl	8008bf2 <rshift>
 8008ec0:	443d      	add	r5, r7
 8008ec2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ec6:	42ab      	cmp	r3, r5
 8008ec8:	da4c      	bge.n	8008f64 <__gethex+0x2a4>
 8008eca:	ee18 0a10 	vmov	r0, s16
 8008ece:	4621      	mov	r1, r4
 8008ed0:	f000 fad2 	bl	8009478 <_Bfree>
 8008ed4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	6013      	str	r3, [r2, #0]
 8008eda:	27a3      	movs	r7, #163	; 0xa3
 8008edc:	e785      	b.n	8008dea <__gethex+0x12a>
 8008ede:	1e73      	subs	r3, r6, #1
 8008ee0:	9a05      	ldr	r2, [sp, #20]
 8008ee2:	9303      	str	r3, [sp, #12]
 8008ee4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ee8:	4293      	cmp	r3, r2
 8008eea:	d019      	beq.n	8008f20 <__gethex+0x260>
 8008eec:	f1bb 0f20 	cmp.w	fp, #32
 8008ef0:	d107      	bne.n	8008f02 <__gethex+0x242>
 8008ef2:	9b02      	ldr	r3, [sp, #8]
 8008ef4:	9a00      	ldr	r2, [sp, #0]
 8008ef6:	f843 2b04 	str.w	r2, [r3], #4
 8008efa:	9302      	str	r3, [sp, #8]
 8008efc:	2300      	movs	r3, #0
 8008efe:	9300      	str	r3, [sp, #0]
 8008f00:	469b      	mov	fp, r3
 8008f02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008f06:	f7ff fec6 	bl	8008c96 <__hexdig_fun>
 8008f0a:	9b00      	ldr	r3, [sp, #0]
 8008f0c:	f000 000f 	and.w	r0, r0, #15
 8008f10:	fa00 f00b 	lsl.w	r0, r0, fp
 8008f14:	4303      	orrs	r3, r0
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	f10b 0b04 	add.w	fp, fp, #4
 8008f1c:	9b03      	ldr	r3, [sp, #12]
 8008f1e:	e00d      	b.n	8008f3c <__gethex+0x27c>
 8008f20:	9b03      	ldr	r3, [sp, #12]
 8008f22:	9a06      	ldr	r2, [sp, #24]
 8008f24:	4413      	add	r3, r2
 8008f26:	42bb      	cmp	r3, r7
 8008f28:	d3e0      	bcc.n	8008eec <__gethex+0x22c>
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	9901      	ldr	r1, [sp, #4]
 8008f2e:	9307      	str	r3, [sp, #28]
 8008f30:	4652      	mov	r2, sl
 8008f32:	f001 fb2c 	bl	800a58e <strncmp>
 8008f36:	9b07      	ldr	r3, [sp, #28]
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d1d7      	bne.n	8008eec <__gethex+0x22c>
 8008f3c:	461e      	mov	r6, r3
 8008f3e:	e78b      	b.n	8008e58 <__gethex+0x198>
 8008f40:	f04f 0a03 	mov.w	sl, #3
 8008f44:	e7b8      	b.n	8008eb8 <__gethex+0x1f8>
 8008f46:	da0a      	bge.n	8008f5e <__gethex+0x29e>
 8008f48:	1a37      	subs	r7, r6, r0
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	ee18 0a10 	vmov	r0, s16
 8008f50:	463a      	mov	r2, r7
 8008f52:	f000 fcad 	bl	80098b0 <__lshift>
 8008f56:	1bed      	subs	r5, r5, r7
 8008f58:	4604      	mov	r4, r0
 8008f5a:	f100 0914 	add.w	r9, r0, #20
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	e7ae      	b.n	8008ec2 <__gethex+0x202>
 8008f64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008f68:	42a8      	cmp	r0, r5
 8008f6a:	dd72      	ble.n	8009052 <__gethex+0x392>
 8008f6c:	1b45      	subs	r5, r0, r5
 8008f6e:	42ae      	cmp	r6, r5
 8008f70:	dc36      	bgt.n	8008fe0 <__gethex+0x320>
 8008f72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d02a      	beq.n	8008fd0 <__gethex+0x310>
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d02c      	beq.n	8008fd8 <__gethex+0x318>
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d11c      	bne.n	8008fbc <__gethex+0x2fc>
 8008f82:	42ae      	cmp	r6, r5
 8008f84:	d11a      	bne.n	8008fbc <__gethex+0x2fc>
 8008f86:	2e01      	cmp	r6, #1
 8008f88:	d112      	bne.n	8008fb0 <__gethex+0x2f0>
 8008f8a:	9a04      	ldr	r2, [sp, #16]
 8008f8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	2301      	movs	r3, #1
 8008f94:	6123      	str	r3, [r4, #16]
 8008f96:	f8c9 3000 	str.w	r3, [r9]
 8008f9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f9c:	2762      	movs	r7, #98	; 0x62
 8008f9e:	601c      	str	r4, [r3, #0]
 8008fa0:	e723      	b.n	8008dea <__gethex+0x12a>
 8008fa2:	bf00      	nop
 8008fa4:	0800b92c 	.word	0x0800b92c
 8008fa8:	0800b850 	.word	0x0800b850
 8008fac:	0800b8c4 	.word	0x0800b8c4
 8008fb0:	1e71      	subs	r1, r6, #1
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fec0 	bl	8009d38 <__any_on>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d1e6      	bne.n	8008f8a <__gethex+0x2ca>
 8008fbc:	ee18 0a10 	vmov	r0, s16
 8008fc0:	4621      	mov	r1, r4
 8008fc2:	f000 fa59 	bl	8009478 <_Bfree>
 8008fc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	2750      	movs	r7, #80	; 0x50
 8008fce:	e70c      	b.n	8008dea <__gethex+0x12a>
 8008fd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1f2      	bne.n	8008fbc <__gethex+0x2fc>
 8008fd6:	e7d8      	b.n	8008f8a <__gethex+0x2ca>
 8008fd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1d5      	bne.n	8008f8a <__gethex+0x2ca>
 8008fde:	e7ed      	b.n	8008fbc <__gethex+0x2fc>
 8008fe0:	1e6f      	subs	r7, r5, #1
 8008fe2:	f1ba 0f00 	cmp.w	sl, #0
 8008fe6:	d131      	bne.n	800904c <__gethex+0x38c>
 8008fe8:	b127      	cbz	r7, 8008ff4 <__gethex+0x334>
 8008fea:	4639      	mov	r1, r7
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fea3 	bl	8009d38 <__any_on>
 8008ff2:	4682      	mov	sl, r0
 8008ff4:	117b      	asrs	r3, r7, #5
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008ffc:	f007 071f 	and.w	r7, r7, #31
 8009000:	fa01 f707 	lsl.w	r7, r1, r7
 8009004:	421f      	tst	r7, r3
 8009006:	4629      	mov	r1, r5
 8009008:	4620      	mov	r0, r4
 800900a:	bf18      	it	ne
 800900c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009010:	1b76      	subs	r6, r6, r5
 8009012:	f7ff fdee 	bl	8008bf2 <rshift>
 8009016:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800901a:	2702      	movs	r7, #2
 800901c:	f1ba 0f00 	cmp.w	sl, #0
 8009020:	d048      	beq.n	80090b4 <__gethex+0x3f4>
 8009022:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d015      	beq.n	8009056 <__gethex+0x396>
 800902a:	2b03      	cmp	r3, #3
 800902c:	d017      	beq.n	800905e <__gethex+0x39e>
 800902e:	2b01      	cmp	r3, #1
 8009030:	d109      	bne.n	8009046 <__gethex+0x386>
 8009032:	f01a 0f02 	tst.w	sl, #2
 8009036:	d006      	beq.n	8009046 <__gethex+0x386>
 8009038:	f8d9 0000 	ldr.w	r0, [r9]
 800903c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009040:	f01a 0f01 	tst.w	sl, #1
 8009044:	d10e      	bne.n	8009064 <__gethex+0x3a4>
 8009046:	f047 0710 	orr.w	r7, r7, #16
 800904a:	e033      	b.n	80090b4 <__gethex+0x3f4>
 800904c:	f04f 0a01 	mov.w	sl, #1
 8009050:	e7d0      	b.n	8008ff4 <__gethex+0x334>
 8009052:	2701      	movs	r7, #1
 8009054:	e7e2      	b.n	800901c <__gethex+0x35c>
 8009056:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009058:	f1c3 0301 	rsb	r3, r3, #1
 800905c:	9315      	str	r3, [sp, #84]	; 0x54
 800905e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0f0      	beq.n	8009046 <__gethex+0x386>
 8009064:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009068:	f104 0314 	add.w	r3, r4, #20
 800906c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009070:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009074:	f04f 0c00 	mov.w	ip, #0
 8009078:	4618      	mov	r0, r3
 800907a:	f853 2b04 	ldr.w	r2, [r3], #4
 800907e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009082:	d01c      	beq.n	80090be <__gethex+0x3fe>
 8009084:	3201      	adds	r2, #1
 8009086:	6002      	str	r2, [r0, #0]
 8009088:	2f02      	cmp	r7, #2
 800908a:	f104 0314 	add.w	r3, r4, #20
 800908e:	d13f      	bne.n	8009110 <__gethex+0x450>
 8009090:	f8d8 2000 	ldr.w	r2, [r8]
 8009094:	3a01      	subs	r2, #1
 8009096:	42b2      	cmp	r2, r6
 8009098:	d10a      	bne.n	80090b0 <__gethex+0x3f0>
 800909a:	1171      	asrs	r1, r6, #5
 800909c:	2201      	movs	r2, #1
 800909e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090a2:	f006 061f 	and.w	r6, r6, #31
 80090a6:	fa02 f606 	lsl.w	r6, r2, r6
 80090aa:	421e      	tst	r6, r3
 80090ac:	bf18      	it	ne
 80090ae:	4617      	movne	r7, r2
 80090b0:	f047 0720 	orr.w	r7, r7, #32
 80090b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090b6:	601c      	str	r4, [r3, #0]
 80090b8:	9b04      	ldr	r3, [sp, #16]
 80090ba:	601d      	str	r5, [r3, #0]
 80090bc:	e695      	b.n	8008dea <__gethex+0x12a>
 80090be:	4299      	cmp	r1, r3
 80090c0:	f843 cc04 	str.w	ip, [r3, #-4]
 80090c4:	d8d8      	bhi.n	8009078 <__gethex+0x3b8>
 80090c6:	68a3      	ldr	r3, [r4, #8]
 80090c8:	459b      	cmp	fp, r3
 80090ca:	db19      	blt.n	8009100 <__gethex+0x440>
 80090cc:	6861      	ldr	r1, [r4, #4]
 80090ce:	ee18 0a10 	vmov	r0, s16
 80090d2:	3101      	adds	r1, #1
 80090d4:	f000 f990 	bl	80093f8 <_Balloc>
 80090d8:	4681      	mov	r9, r0
 80090da:	b918      	cbnz	r0, 80090e4 <__gethex+0x424>
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <__gethex+0x488>)
 80090de:	4602      	mov	r2, r0
 80090e0:	2184      	movs	r1, #132	; 0x84
 80090e2:	e6a8      	b.n	8008e36 <__gethex+0x176>
 80090e4:	6922      	ldr	r2, [r4, #16]
 80090e6:	3202      	adds	r2, #2
 80090e8:	f104 010c 	add.w	r1, r4, #12
 80090ec:	0092      	lsls	r2, r2, #2
 80090ee:	300c      	adds	r0, #12
 80090f0:	f000 f974 	bl	80093dc <memcpy>
 80090f4:	4621      	mov	r1, r4
 80090f6:	ee18 0a10 	vmov	r0, s16
 80090fa:	f000 f9bd 	bl	8009478 <_Bfree>
 80090fe:	464c      	mov	r4, r9
 8009100:	6923      	ldr	r3, [r4, #16]
 8009102:	1c5a      	adds	r2, r3, #1
 8009104:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009108:	6122      	str	r2, [r4, #16]
 800910a:	2201      	movs	r2, #1
 800910c:	615a      	str	r2, [r3, #20]
 800910e:	e7bb      	b.n	8009088 <__gethex+0x3c8>
 8009110:	6922      	ldr	r2, [r4, #16]
 8009112:	455a      	cmp	r2, fp
 8009114:	dd0b      	ble.n	800912e <__gethex+0x46e>
 8009116:	2101      	movs	r1, #1
 8009118:	4620      	mov	r0, r4
 800911a:	f7ff fd6a 	bl	8008bf2 <rshift>
 800911e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009122:	3501      	adds	r5, #1
 8009124:	42ab      	cmp	r3, r5
 8009126:	f6ff aed0 	blt.w	8008eca <__gethex+0x20a>
 800912a:	2701      	movs	r7, #1
 800912c:	e7c0      	b.n	80090b0 <__gethex+0x3f0>
 800912e:	f016 061f 	ands.w	r6, r6, #31
 8009132:	d0fa      	beq.n	800912a <__gethex+0x46a>
 8009134:	4453      	add	r3, sl
 8009136:	f1c6 0620 	rsb	r6, r6, #32
 800913a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800913e:	f000 fa4d 	bl	80095dc <__hi0bits>
 8009142:	42b0      	cmp	r0, r6
 8009144:	dbe7      	blt.n	8009116 <__gethex+0x456>
 8009146:	e7f0      	b.n	800912a <__gethex+0x46a>
 8009148:	0800b850 	.word	0x0800b850

0800914c <L_shift>:
 800914c:	f1c2 0208 	rsb	r2, r2, #8
 8009150:	0092      	lsls	r2, r2, #2
 8009152:	b570      	push	{r4, r5, r6, lr}
 8009154:	f1c2 0620 	rsb	r6, r2, #32
 8009158:	6843      	ldr	r3, [r0, #4]
 800915a:	6804      	ldr	r4, [r0, #0]
 800915c:	fa03 f506 	lsl.w	r5, r3, r6
 8009160:	432c      	orrs	r4, r5
 8009162:	40d3      	lsrs	r3, r2
 8009164:	6004      	str	r4, [r0, #0]
 8009166:	f840 3f04 	str.w	r3, [r0, #4]!
 800916a:	4288      	cmp	r0, r1
 800916c:	d3f4      	bcc.n	8009158 <L_shift+0xc>
 800916e:	bd70      	pop	{r4, r5, r6, pc}

08009170 <__match>:
 8009170:	b530      	push	{r4, r5, lr}
 8009172:	6803      	ldr	r3, [r0, #0]
 8009174:	3301      	adds	r3, #1
 8009176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800917a:	b914      	cbnz	r4, 8009182 <__match+0x12>
 800917c:	6003      	str	r3, [r0, #0]
 800917e:	2001      	movs	r0, #1
 8009180:	bd30      	pop	{r4, r5, pc}
 8009182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009186:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800918a:	2d19      	cmp	r5, #25
 800918c:	bf98      	it	ls
 800918e:	3220      	addls	r2, #32
 8009190:	42a2      	cmp	r2, r4
 8009192:	d0f0      	beq.n	8009176 <__match+0x6>
 8009194:	2000      	movs	r0, #0
 8009196:	e7f3      	b.n	8009180 <__match+0x10>

08009198 <__hexnan>:
 8009198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800919c:	680b      	ldr	r3, [r1, #0]
 800919e:	115e      	asrs	r6, r3, #5
 80091a0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091a4:	f013 031f 	ands.w	r3, r3, #31
 80091a8:	b087      	sub	sp, #28
 80091aa:	bf18      	it	ne
 80091ac:	3604      	addne	r6, #4
 80091ae:	2500      	movs	r5, #0
 80091b0:	1f37      	subs	r7, r6, #4
 80091b2:	4690      	mov	r8, r2
 80091b4:	6802      	ldr	r2, [r0, #0]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	4682      	mov	sl, r0
 80091ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80091be:	46b9      	mov	r9, r7
 80091c0:	463c      	mov	r4, r7
 80091c2:	9502      	str	r5, [sp, #8]
 80091c4:	46ab      	mov	fp, r5
 80091c6:	7851      	ldrb	r1, [r2, #1]
 80091c8:	1c53      	adds	r3, r2, #1
 80091ca:	9303      	str	r3, [sp, #12]
 80091cc:	b341      	cbz	r1, 8009220 <__hexnan+0x88>
 80091ce:	4608      	mov	r0, r1
 80091d0:	9205      	str	r2, [sp, #20]
 80091d2:	9104      	str	r1, [sp, #16]
 80091d4:	f7ff fd5f 	bl	8008c96 <__hexdig_fun>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d14f      	bne.n	800927c <__hexnan+0xe4>
 80091dc:	9904      	ldr	r1, [sp, #16]
 80091de:	9a05      	ldr	r2, [sp, #20]
 80091e0:	2920      	cmp	r1, #32
 80091e2:	d818      	bhi.n	8009216 <__hexnan+0x7e>
 80091e4:	9b02      	ldr	r3, [sp, #8]
 80091e6:	459b      	cmp	fp, r3
 80091e8:	dd13      	ble.n	8009212 <__hexnan+0x7a>
 80091ea:	454c      	cmp	r4, r9
 80091ec:	d206      	bcs.n	80091fc <__hexnan+0x64>
 80091ee:	2d07      	cmp	r5, #7
 80091f0:	dc04      	bgt.n	80091fc <__hexnan+0x64>
 80091f2:	462a      	mov	r2, r5
 80091f4:	4649      	mov	r1, r9
 80091f6:	4620      	mov	r0, r4
 80091f8:	f7ff ffa8 	bl	800914c <L_shift>
 80091fc:	4544      	cmp	r4, r8
 80091fe:	d950      	bls.n	80092a2 <__hexnan+0x10a>
 8009200:	2300      	movs	r3, #0
 8009202:	f1a4 0904 	sub.w	r9, r4, #4
 8009206:	f844 3c04 	str.w	r3, [r4, #-4]
 800920a:	f8cd b008 	str.w	fp, [sp, #8]
 800920e:	464c      	mov	r4, r9
 8009210:	461d      	mov	r5, r3
 8009212:	9a03      	ldr	r2, [sp, #12]
 8009214:	e7d7      	b.n	80091c6 <__hexnan+0x2e>
 8009216:	2929      	cmp	r1, #41	; 0x29
 8009218:	d156      	bne.n	80092c8 <__hexnan+0x130>
 800921a:	3202      	adds	r2, #2
 800921c:	f8ca 2000 	str.w	r2, [sl]
 8009220:	f1bb 0f00 	cmp.w	fp, #0
 8009224:	d050      	beq.n	80092c8 <__hexnan+0x130>
 8009226:	454c      	cmp	r4, r9
 8009228:	d206      	bcs.n	8009238 <__hexnan+0xa0>
 800922a:	2d07      	cmp	r5, #7
 800922c:	dc04      	bgt.n	8009238 <__hexnan+0xa0>
 800922e:	462a      	mov	r2, r5
 8009230:	4649      	mov	r1, r9
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff ff8a 	bl	800914c <L_shift>
 8009238:	4544      	cmp	r4, r8
 800923a:	d934      	bls.n	80092a6 <__hexnan+0x10e>
 800923c:	f1a8 0204 	sub.w	r2, r8, #4
 8009240:	4623      	mov	r3, r4
 8009242:	f853 1b04 	ldr.w	r1, [r3], #4
 8009246:	f842 1f04 	str.w	r1, [r2, #4]!
 800924a:	429f      	cmp	r7, r3
 800924c:	d2f9      	bcs.n	8009242 <__hexnan+0xaa>
 800924e:	1b3b      	subs	r3, r7, r4
 8009250:	f023 0303 	bic.w	r3, r3, #3
 8009254:	3304      	adds	r3, #4
 8009256:	3401      	adds	r4, #1
 8009258:	3e03      	subs	r6, #3
 800925a:	42b4      	cmp	r4, r6
 800925c:	bf88      	it	hi
 800925e:	2304      	movhi	r3, #4
 8009260:	4443      	add	r3, r8
 8009262:	2200      	movs	r2, #0
 8009264:	f843 2b04 	str.w	r2, [r3], #4
 8009268:	429f      	cmp	r7, r3
 800926a:	d2fb      	bcs.n	8009264 <__hexnan+0xcc>
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	b91b      	cbnz	r3, 8009278 <__hexnan+0xe0>
 8009270:	4547      	cmp	r7, r8
 8009272:	d127      	bne.n	80092c4 <__hexnan+0x12c>
 8009274:	2301      	movs	r3, #1
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	2005      	movs	r0, #5
 800927a:	e026      	b.n	80092ca <__hexnan+0x132>
 800927c:	3501      	adds	r5, #1
 800927e:	2d08      	cmp	r5, #8
 8009280:	f10b 0b01 	add.w	fp, fp, #1
 8009284:	dd06      	ble.n	8009294 <__hexnan+0xfc>
 8009286:	4544      	cmp	r4, r8
 8009288:	d9c3      	bls.n	8009212 <__hexnan+0x7a>
 800928a:	2300      	movs	r3, #0
 800928c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009290:	2501      	movs	r5, #1
 8009292:	3c04      	subs	r4, #4
 8009294:	6822      	ldr	r2, [r4, #0]
 8009296:	f000 000f 	and.w	r0, r0, #15
 800929a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800929e:	6022      	str	r2, [r4, #0]
 80092a0:	e7b7      	b.n	8009212 <__hexnan+0x7a>
 80092a2:	2508      	movs	r5, #8
 80092a4:	e7b5      	b.n	8009212 <__hexnan+0x7a>
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0df      	beq.n	800926c <__hexnan+0xd4>
 80092ac:	f04f 32ff 	mov.w	r2, #4294967295
 80092b0:	f1c3 0320 	rsb	r3, r3, #32
 80092b4:	fa22 f303 	lsr.w	r3, r2, r3
 80092b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092bc:	401a      	ands	r2, r3
 80092be:	f846 2c04 	str.w	r2, [r6, #-4]
 80092c2:	e7d3      	b.n	800926c <__hexnan+0xd4>
 80092c4:	3f04      	subs	r7, #4
 80092c6:	e7d1      	b.n	800926c <__hexnan+0xd4>
 80092c8:	2004      	movs	r0, #4
 80092ca:	b007      	add	sp, #28
 80092cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092d0 <_localeconv_r>:
 80092d0:	4800      	ldr	r0, [pc, #0]	; (80092d4 <_localeconv_r+0x4>)
 80092d2:	4770      	bx	lr
 80092d4:	200003ec 	.word	0x200003ec

080092d8 <__retarget_lock_init_recursive>:
 80092d8:	4770      	bx	lr

080092da <__retarget_lock_acquire_recursive>:
 80092da:	4770      	bx	lr

080092dc <__retarget_lock_release_recursive>:
 80092dc:	4770      	bx	lr

080092de <__swhatbuf_r>:
 80092de:	b570      	push	{r4, r5, r6, lr}
 80092e0:	460e      	mov	r6, r1
 80092e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092e6:	2900      	cmp	r1, #0
 80092e8:	b096      	sub	sp, #88	; 0x58
 80092ea:	4614      	mov	r4, r2
 80092ec:	461d      	mov	r5, r3
 80092ee:	da08      	bge.n	8009302 <__swhatbuf_r+0x24>
 80092f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	602a      	str	r2, [r5, #0]
 80092f8:	061a      	lsls	r2, r3, #24
 80092fa:	d410      	bmi.n	800931e <__swhatbuf_r+0x40>
 80092fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009300:	e00e      	b.n	8009320 <__swhatbuf_r+0x42>
 8009302:	466a      	mov	r2, sp
 8009304:	f001 f9b6 	bl	800a674 <_fstat_r>
 8009308:	2800      	cmp	r0, #0
 800930a:	dbf1      	blt.n	80092f0 <__swhatbuf_r+0x12>
 800930c:	9a01      	ldr	r2, [sp, #4]
 800930e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009312:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009316:	425a      	negs	r2, r3
 8009318:	415a      	adcs	r2, r3
 800931a:	602a      	str	r2, [r5, #0]
 800931c:	e7ee      	b.n	80092fc <__swhatbuf_r+0x1e>
 800931e:	2340      	movs	r3, #64	; 0x40
 8009320:	2000      	movs	r0, #0
 8009322:	6023      	str	r3, [r4, #0]
 8009324:	b016      	add	sp, #88	; 0x58
 8009326:	bd70      	pop	{r4, r5, r6, pc}

08009328 <__smakebuf_r>:
 8009328:	898b      	ldrh	r3, [r1, #12]
 800932a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800932c:	079d      	lsls	r5, r3, #30
 800932e:	4606      	mov	r6, r0
 8009330:	460c      	mov	r4, r1
 8009332:	d507      	bpl.n	8009344 <__smakebuf_r+0x1c>
 8009334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009338:	6023      	str	r3, [r4, #0]
 800933a:	6123      	str	r3, [r4, #16]
 800933c:	2301      	movs	r3, #1
 800933e:	6163      	str	r3, [r4, #20]
 8009340:	b002      	add	sp, #8
 8009342:	bd70      	pop	{r4, r5, r6, pc}
 8009344:	ab01      	add	r3, sp, #4
 8009346:	466a      	mov	r2, sp
 8009348:	f7ff ffc9 	bl	80092de <__swhatbuf_r>
 800934c:	9900      	ldr	r1, [sp, #0]
 800934e:	4605      	mov	r5, r0
 8009350:	4630      	mov	r0, r6
 8009352:	f000 fd95 	bl	8009e80 <_malloc_r>
 8009356:	b948      	cbnz	r0, 800936c <__smakebuf_r+0x44>
 8009358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800935c:	059a      	lsls	r2, r3, #22
 800935e:	d4ef      	bmi.n	8009340 <__smakebuf_r+0x18>
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	f043 0302 	orr.w	r3, r3, #2
 8009368:	81a3      	strh	r3, [r4, #12]
 800936a:	e7e3      	b.n	8009334 <__smakebuf_r+0xc>
 800936c:	4b0d      	ldr	r3, [pc, #52]	; (80093a4 <__smakebuf_r+0x7c>)
 800936e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009378:	81a3      	strh	r3, [r4, #12]
 800937a:	9b00      	ldr	r3, [sp, #0]
 800937c:	6163      	str	r3, [r4, #20]
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	6120      	str	r0, [r4, #16]
 8009382:	b15b      	cbz	r3, 800939c <__smakebuf_r+0x74>
 8009384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009388:	4630      	mov	r0, r6
 800938a:	f001 f985 	bl	800a698 <_isatty_r>
 800938e:	b128      	cbz	r0, 800939c <__smakebuf_r+0x74>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	f023 0303 	bic.w	r3, r3, #3
 8009396:	f043 0301 	orr.w	r3, r3, #1
 800939a:	81a3      	strh	r3, [r4, #12]
 800939c:	89a0      	ldrh	r0, [r4, #12]
 800939e:	4305      	orrs	r5, r0
 80093a0:	81a5      	strh	r5, [r4, #12]
 80093a2:	e7cd      	b.n	8009340 <__smakebuf_r+0x18>
 80093a4:	08008a51 	.word	0x08008a51

080093a8 <malloc>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <malloc+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f000 bd67 	b.w	8009e80 <_malloc_r>
 80093b2:	bf00      	nop
 80093b4:	20000294 	.word	0x20000294

080093b8 <__ascii_mbtowc>:
 80093b8:	b082      	sub	sp, #8
 80093ba:	b901      	cbnz	r1, 80093be <__ascii_mbtowc+0x6>
 80093bc:	a901      	add	r1, sp, #4
 80093be:	b142      	cbz	r2, 80093d2 <__ascii_mbtowc+0x1a>
 80093c0:	b14b      	cbz	r3, 80093d6 <__ascii_mbtowc+0x1e>
 80093c2:	7813      	ldrb	r3, [r2, #0]
 80093c4:	600b      	str	r3, [r1, #0]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	1e10      	subs	r0, r2, #0
 80093ca:	bf18      	it	ne
 80093cc:	2001      	movne	r0, #1
 80093ce:	b002      	add	sp, #8
 80093d0:	4770      	bx	lr
 80093d2:	4610      	mov	r0, r2
 80093d4:	e7fb      	b.n	80093ce <__ascii_mbtowc+0x16>
 80093d6:	f06f 0001 	mvn.w	r0, #1
 80093da:	e7f8      	b.n	80093ce <__ascii_mbtowc+0x16>

080093dc <memcpy>:
 80093dc:	440a      	add	r2, r1
 80093de:	4291      	cmp	r1, r2
 80093e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093e4:	d100      	bne.n	80093e8 <memcpy+0xc>
 80093e6:	4770      	bx	lr
 80093e8:	b510      	push	{r4, lr}
 80093ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093f2:	4291      	cmp	r1, r2
 80093f4:	d1f9      	bne.n	80093ea <memcpy+0xe>
 80093f6:	bd10      	pop	{r4, pc}

080093f8 <_Balloc>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093fc:	4604      	mov	r4, r0
 80093fe:	460d      	mov	r5, r1
 8009400:	b976      	cbnz	r6, 8009420 <_Balloc+0x28>
 8009402:	2010      	movs	r0, #16
 8009404:	f7ff ffd0 	bl	80093a8 <malloc>
 8009408:	4602      	mov	r2, r0
 800940a:	6260      	str	r0, [r4, #36]	; 0x24
 800940c:	b920      	cbnz	r0, 8009418 <_Balloc+0x20>
 800940e:	4b18      	ldr	r3, [pc, #96]	; (8009470 <_Balloc+0x78>)
 8009410:	4818      	ldr	r0, [pc, #96]	; (8009474 <_Balloc+0x7c>)
 8009412:	2166      	movs	r1, #102	; 0x66
 8009414:	f001 f8ee 	bl	800a5f4 <__assert_func>
 8009418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800941c:	6006      	str	r6, [r0, #0]
 800941e:	60c6      	str	r6, [r0, #12]
 8009420:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009422:	68f3      	ldr	r3, [r6, #12]
 8009424:	b183      	cbz	r3, 8009448 <_Balloc+0x50>
 8009426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800942e:	b9b8      	cbnz	r0, 8009460 <_Balloc+0x68>
 8009430:	2101      	movs	r1, #1
 8009432:	fa01 f605 	lsl.w	r6, r1, r5
 8009436:	1d72      	adds	r2, r6, #5
 8009438:	0092      	lsls	r2, r2, #2
 800943a:	4620      	mov	r0, r4
 800943c:	f000 fc9d 	bl	8009d7a <_calloc_r>
 8009440:	b160      	cbz	r0, 800945c <_Balloc+0x64>
 8009442:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009446:	e00e      	b.n	8009466 <_Balloc+0x6e>
 8009448:	2221      	movs	r2, #33	; 0x21
 800944a:	2104      	movs	r1, #4
 800944c:	4620      	mov	r0, r4
 800944e:	f000 fc94 	bl	8009d7a <_calloc_r>
 8009452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009454:	60f0      	str	r0, [r6, #12]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1e4      	bne.n	8009426 <_Balloc+0x2e>
 800945c:	2000      	movs	r0, #0
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	6802      	ldr	r2, [r0, #0]
 8009462:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009466:	2300      	movs	r3, #0
 8009468:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800946c:	e7f7      	b.n	800945e <_Balloc+0x66>
 800946e:	bf00      	nop
 8009470:	0800b7de 	.word	0x0800b7de
 8009474:	0800b940 	.word	0x0800b940

08009478 <_Bfree>:
 8009478:	b570      	push	{r4, r5, r6, lr}
 800947a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800947c:	4605      	mov	r5, r0
 800947e:	460c      	mov	r4, r1
 8009480:	b976      	cbnz	r6, 80094a0 <_Bfree+0x28>
 8009482:	2010      	movs	r0, #16
 8009484:	f7ff ff90 	bl	80093a8 <malloc>
 8009488:	4602      	mov	r2, r0
 800948a:	6268      	str	r0, [r5, #36]	; 0x24
 800948c:	b920      	cbnz	r0, 8009498 <_Bfree+0x20>
 800948e:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <_Bfree+0x3c>)
 8009490:	4809      	ldr	r0, [pc, #36]	; (80094b8 <_Bfree+0x40>)
 8009492:	218a      	movs	r1, #138	; 0x8a
 8009494:	f001 f8ae 	bl	800a5f4 <__assert_func>
 8009498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800949c:	6006      	str	r6, [r0, #0]
 800949e:	60c6      	str	r6, [r0, #12]
 80094a0:	b13c      	cbz	r4, 80094b2 <_Bfree+0x3a>
 80094a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094a4:	6862      	ldr	r2, [r4, #4]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094ac:	6021      	str	r1, [r4, #0]
 80094ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094b2:	bd70      	pop	{r4, r5, r6, pc}
 80094b4:	0800b7de 	.word	0x0800b7de
 80094b8:	0800b940 	.word	0x0800b940

080094bc <__multadd>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	690d      	ldr	r5, [r1, #16]
 80094c2:	4607      	mov	r7, r0
 80094c4:	460c      	mov	r4, r1
 80094c6:	461e      	mov	r6, r3
 80094c8:	f101 0c14 	add.w	ip, r1, #20
 80094cc:	2000      	movs	r0, #0
 80094ce:	f8dc 3000 	ldr.w	r3, [ip]
 80094d2:	b299      	uxth	r1, r3
 80094d4:	fb02 6101 	mla	r1, r2, r1, r6
 80094d8:	0c1e      	lsrs	r6, r3, #16
 80094da:	0c0b      	lsrs	r3, r1, #16
 80094dc:	fb02 3306 	mla	r3, r2, r6, r3
 80094e0:	b289      	uxth	r1, r1
 80094e2:	3001      	adds	r0, #1
 80094e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094e8:	4285      	cmp	r5, r0
 80094ea:	f84c 1b04 	str.w	r1, [ip], #4
 80094ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094f2:	dcec      	bgt.n	80094ce <__multadd+0x12>
 80094f4:	b30e      	cbz	r6, 800953a <__multadd+0x7e>
 80094f6:	68a3      	ldr	r3, [r4, #8]
 80094f8:	42ab      	cmp	r3, r5
 80094fa:	dc19      	bgt.n	8009530 <__multadd+0x74>
 80094fc:	6861      	ldr	r1, [r4, #4]
 80094fe:	4638      	mov	r0, r7
 8009500:	3101      	adds	r1, #1
 8009502:	f7ff ff79 	bl	80093f8 <_Balloc>
 8009506:	4680      	mov	r8, r0
 8009508:	b928      	cbnz	r0, 8009516 <__multadd+0x5a>
 800950a:	4602      	mov	r2, r0
 800950c:	4b0c      	ldr	r3, [pc, #48]	; (8009540 <__multadd+0x84>)
 800950e:	480d      	ldr	r0, [pc, #52]	; (8009544 <__multadd+0x88>)
 8009510:	21b5      	movs	r1, #181	; 0xb5
 8009512:	f001 f86f 	bl	800a5f4 <__assert_func>
 8009516:	6922      	ldr	r2, [r4, #16]
 8009518:	3202      	adds	r2, #2
 800951a:	f104 010c 	add.w	r1, r4, #12
 800951e:	0092      	lsls	r2, r2, #2
 8009520:	300c      	adds	r0, #12
 8009522:	f7ff ff5b 	bl	80093dc <memcpy>
 8009526:	4621      	mov	r1, r4
 8009528:	4638      	mov	r0, r7
 800952a:	f7ff ffa5 	bl	8009478 <_Bfree>
 800952e:	4644      	mov	r4, r8
 8009530:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009534:	3501      	adds	r5, #1
 8009536:	615e      	str	r6, [r3, #20]
 8009538:	6125      	str	r5, [r4, #16]
 800953a:	4620      	mov	r0, r4
 800953c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009540:	0800b850 	.word	0x0800b850
 8009544:	0800b940 	.word	0x0800b940

08009548 <__s2b>:
 8009548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	4615      	mov	r5, r2
 8009550:	461f      	mov	r7, r3
 8009552:	2209      	movs	r2, #9
 8009554:	3308      	adds	r3, #8
 8009556:	4606      	mov	r6, r0
 8009558:	fb93 f3f2 	sdiv	r3, r3, r2
 800955c:	2100      	movs	r1, #0
 800955e:	2201      	movs	r2, #1
 8009560:	429a      	cmp	r2, r3
 8009562:	db09      	blt.n	8009578 <__s2b+0x30>
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff ff47 	bl	80093f8 <_Balloc>
 800956a:	b940      	cbnz	r0, 800957e <__s2b+0x36>
 800956c:	4602      	mov	r2, r0
 800956e:	4b19      	ldr	r3, [pc, #100]	; (80095d4 <__s2b+0x8c>)
 8009570:	4819      	ldr	r0, [pc, #100]	; (80095d8 <__s2b+0x90>)
 8009572:	21ce      	movs	r1, #206	; 0xce
 8009574:	f001 f83e 	bl	800a5f4 <__assert_func>
 8009578:	0052      	lsls	r2, r2, #1
 800957a:	3101      	adds	r1, #1
 800957c:	e7f0      	b.n	8009560 <__s2b+0x18>
 800957e:	9b08      	ldr	r3, [sp, #32]
 8009580:	6143      	str	r3, [r0, #20]
 8009582:	2d09      	cmp	r5, #9
 8009584:	f04f 0301 	mov.w	r3, #1
 8009588:	6103      	str	r3, [r0, #16]
 800958a:	dd16      	ble.n	80095ba <__s2b+0x72>
 800958c:	f104 0909 	add.w	r9, r4, #9
 8009590:	46c8      	mov	r8, r9
 8009592:	442c      	add	r4, r5
 8009594:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009598:	4601      	mov	r1, r0
 800959a:	3b30      	subs	r3, #48	; 0x30
 800959c:	220a      	movs	r2, #10
 800959e:	4630      	mov	r0, r6
 80095a0:	f7ff ff8c 	bl	80094bc <__multadd>
 80095a4:	45a0      	cmp	r8, r4
 80095a6:	d1f5      	bne.n	8009594 <__s2b+0x4c>
 80095a8:	f1a5 0408 	sub.w	r4, r5, #8
 80095ac:	444c      	add	r4, r9
 80095ae:	1b2d      	subs	r5, r5, r4
 80095b0:	1963      	adds	r3, r4, r5
 80095b2:	42bb      	cmp	r3, r7
 80095b4:	db04      	blt.n	80095c0 <__s2b+0x78>
 80095b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ba:	340a      	adds	r4, #10
 80095bc:	2509      	movs	r5, #9
 80095be:	e7f6      	b.n	80095ae <__s2b+0x66>
 80095c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095c4:	4601      	mov	r1, r0
 80095c6:	3b30      	subs	r3, #48	; 0x30
 80095c8:	220a      	movs	r2, #10
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7ff ff76 	bl	80094bc <__multadd>
 80095d0:	e7ee      	b.n	80095b0 <__s2b+0x68>
 80095d2:	bf00      	nop
 80095d4:	0800b850 	.word	0x0800b850
 80095d8:	0800b940 	.word	0x0800b940

080095dc <__hi0bits>:
 80095dc:	0c03      	lsrs	r3, r0, #16
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	b9d3      	cbnz	r3, 8009618 <__hi0bits+0x3c>
 80095e2:	0400      	lsls	r0, r0, #16
 80095e4:	2310      	movs	r3, #16
 80095e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095ea:	bf04      	itt	eq
 80095ec:	0200      	lsleq	r0, r0, #8
 80095ee:	3308      	addeq	r3, #8
 80095f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095f4:	bf04      	itt	eq
 80095f6:	0100      	lsleq	r0, r0, #4
 80095f8:	3304      	addeq	r3, #4
 80095fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80095fe:	bf04      	itt	eq
 8009600:	0080      	lsleq	r0, r0, #2
 8009602:	3302      	addeq	r3, #2
 8009604:	2800      	cmp	r0, #0
 8009606:	db05      	blt.n	8009614 <__hi0bits+0x38>
 8009608:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800960c:	f103 0301 	add.w	r3, r3, #1
 8009610:	bf08      	it	eq
 8009612:	2320      	moveq	r3, #32
 8009614:	4618      	mov	r0, r3
 8009616:	4770      	bx	lr
 8009618:	2300      	movs	r3, #0
 800961a:	e7e4      	b.n	80095e6 <__hi0bits+0xa>

0800961c <__lo0bits>:
 800961c:	6803      	ldr	r3, [r0, #0]
 800961e:	f013 0207 	ands.w	r2, r3, #7
 8009622:	4601      	mov	r1, r0
 8009624:	d00b      	beq.n	800963e <__lo0bits+0x22>
 8009626:	07da      	lsls	r2, r3, #31
 8009628:	d423      	bmi.n	8009672 <__lo0bits+0x56>
 800962a:	0798      	lsls	r0, r3, #30
 800962c:	bf49      	itett	mi
 800962e:	085b      	lsrmi	r3, r3, #1
 8009630:	089b      	lsrpl	r3, r3, #2
 8009632:	2001      	movmi	r0, #1
 8009634:	600b      	strmi	r3, [r1, #0]
 8009636:	bf5c      	itt	pl
 8009638:	600b      	strpl	r3, [r1, #0]
 800963a:	2002      	movpl	r0, #2
 800963c:	4770      	bx	lr
 800963e:	b298      	uxth	r0, r3
 8009640:	b9a8      	cbnz	r0, 800966e <__lo0bits+0x52>
 8009642:	0c1b      	lsrs	r3, r3, #16
 8009644:	2010      	movs	r0, #16
 8009646:	b2da      	uxtb	r2, r3
 8009648:	b90a      	cbnz	r2, 800964e <__lo0bits+0x32>
 800964a:	3008      	adds	r0, #8
 800964c:	0a1b      	lsrs	r3, r3, #8
 800964e:	071a      	lsls	r2, r3, #28
 8009650:	bf04      	itt	eq
 8009652:	091b      	lsreq	r3, r3, #4
 8009654:	3004      	addeq	r0, #4
 8009656:	079a      	lsls	r2, r3, #30
 8009658:	bf04      	itt	eq
 800965a:	089b      	lsreq	r3, r3, #2
 800965c:	3002      	addeq	r0, #2
 800965e:	07da      	lsls	r2, r3, #31
 8009660:	d403      	bmi.n	800966a <__lo0bits+0x4e>
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	f100 0001 	add.w	r0, r0, #1
 8009668:	d005      	beq.n	8009676 <__lo0bits+0x5a>
 800966a:	600b      	str	r3, [r1, #0]
 800966c:	4770      	bx	lr
 800966e:	4610      	mov	r0, r2
 8009670:	e7e9      	b.n	8009646 <__lo0bits+0x2a>
 8009672:	2000      	movs	r0, #0
 8009674:	4770      	bx	lr
 8009676:	2020      	movs	r0, #32
 8009678:	4770      	bx	lr
	...

0800967c <__i2b>:
 800967c:	b510      	push	{r4, lr}
 800967e:	460c      	mov	r4, r1
 8009680:	2101      	movs	r1, #1
 8009682:	f7ff feb9 	bl	80093f8 <_Balloc>
 8009686:	4602      	mov	r2, r0
 8009688:	b928      	cbnz	r0, 8009696 <__i2b+0x1a>
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <__i2b+0x24>)
 800968c:	4805      	ldr	r0, [pc, #20]	; (80096a4 <__i2b+0x28>)
 800968e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009692:	f000 ffaf 	bl	800a5f4 <__assert_func>
 8009696:	2301      	movs	r3, #1
 8009698:	6144      	str	r4, [r0, #20]
 800969a:	6103      	str	r3, [r0, #16]
 800969c:	bd10      	pop	{r4, pc}
 800969e:	bf00      	nop
 80096a0:	0800b850 	.word	0x0800b850
 80096a4:	0800b940 	.word	0x0800b940

080096a8 <__multiply>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	4691      	mov	r9, r2
 80096ae:	690a      	ldr	r2, [r1, #16]
 80096b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	bfb8      	it	lt
 80096b8:	460b      	movlt	r3, r1
 80096ba:	460c      	mov	r4, r1
 80096bc:	bfbc      	itt	lt
 80096be:	464c      	movlt	r4, r9
 80096c0:	4699      	movlt	r9, r3
 80096c2:	6927      	ldr	r7, [r4, #16]
 80096c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	6861      	ldr	r1, [r4, #4]
 80096cc:	eb07 060a 	add.w	r6, r7, sl
 80096d0:	42b3      	cmp	r3, r6
 80096d2:	b085      	sub	sp, #20
 80096d4:	bfb8      	it	lt
 80096d6:	3101      	addlt	r1, #1
 80096d8:	f7ff fe8e 	bl	80093f8 <_Balloc>
 80096dc:	b930      	cbnz	r0, 80096ec <__multiply+0x44>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b44      	ldr	r3, [pc, #272]	; (80097f4 <__multiply+0x14c>)
 80096e2:	4845      	ldr	r0, [pc, #276]	; (80097f8 <__multiply+0x150>)
 80096e4:	f240 115d 	movw	r1, #349	; 0x15d
 80096e8:	f000 ff84 	bl	800a5f4 <__assert_func>
 80096ec:	f100 0514 	add.w	r5, r0, #20
 80096f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096f4:	462b      	mov	r3, r5
 80096f6:	2200      	movs	r2, #0
 80096f8:	4543      	cmp	r3, r8
 80096fa:	d321      	bcc.n	8009740 <__multiply+0x98>
 80096fc:	f104 0314 	add.w	r3, r4, #20
 8009700:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009704:	f109 0314 	add.w	r3, r9, #20
 8009708:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800970c:	9202      	str	r2, [sp, #8]
 800970e:	1b3a      	subs	r2, r7, r4
 8009710:	3a15      	subs	r2, #21
 8009712:	f022 0203 	bic.w	r2, r2, #3
 8009716:	3204      	adds	r2, #4
 8009718:	f104 0115 	add.w	r1, r4, #21
 800971c:	428f      	cmp	r7, r1
 800971e:	bf38      	it	cc
 8009720:	2204      	movcc	r2, #4
 8009722:	9201      	str	r2, [sp, #4]
 8009724:	9a02      	ldr	r2, [sp, #8]
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	429a      	cmp	r2, r3
 800972a:	d80c      	bhi.n	8009746 <__multiply+0x9e>
 800972c:	2e00      	cmp	r6, #0
 800972e:	dd03      	ble.n	8009738 <__multiply+0x90>
 8009730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009734:	2b00      	cmp	r3, #0
 8009736:	d05a      	beq.n	80097ee <__multiply+0x146>
 8009738:	6106      	str	r6, [r0, #16]
 800973a:	b005      	add	sp, #20
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	f843 2b04 	str.w	r2, [r3], #4
 8009744:	e7d8      	b.n	80096f8 <__multiply+0x50>
 8009746:	f8b3 a000 	ldrh.w	sl, [r3]
 800974a:	f1ba 0f00 	cmp.w	sl, #0
 800974e:	d024      	beq.n	800979a <__multiply+0xf2>
 8009750:	f104 0e14 	add.w	lr, r4, #20
 8009754:	46a9      	mov	r9, r5
 8009756:	f04f 0c00 	mov.w	ip, #0
 800975a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800975e:	f8d9 1000 	ldr.w	r1, [r9]
 8009762:	fa1f fb82 	uxth.w	fp, r2
 8009766:	b289      	uxth	r1, r1
 8009768:	fb0a 110b 	mla	r1, sl, fp, r1
 800976c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009770:	f8d9 2000 	ldr.w	r2, [r9]
 8009774:	4461      	add	r1, ip
 8009776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800977a:	fb0a c20b 	mla	r2, sl, fp, ip
 800977e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009782:	b289      	uxth	r1, r1
 8009784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009788:	4577      	cmp	r7, lr
 800978a:	f849 1b04 	str.w	r1, [r9], #4
 800978e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009792:	d8e2      	bhi.n	800975a <__multiply+0xb2>
 8009794:	9a01      	ldr	r2, [sp, #4]
 8009796:	f845 c002 	str.w	ip, [r5, r2]
 800979a:	9a03      	ldr	r2, [sp, #12]
 800979c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097a0:	3304      	adds	r3, #4
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	d020      	beq.n	80097ea <__multiply+0x142>
 80097a8:	6829      	ldr	r1, [r5, #0]
 80097aa:	f104 0c14 	add.w	ip, r4, #20
 80097ae:	46ae      	mov	lr, r5
 80097b0:	f04f 0a00 	mov.w	sl, #0
 80097b4:	f8bc b000 	ldrh.w	fp, [ip]
 80097b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097bc:	fb09 220b 	mla	r2, r9, fp, r2
 80097c0:	4492      	add	sl, r2
 80097c2:	b289      	uxth	r1, r1
 80097c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80097c8:	f84e 1b04 	str.w	r1, [lr], #4
 80097cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80097d0:	f8be 1000 	ldrh.w	r1, [lr]
 80097d4:	0c12      	lsrs	r2, r2, #16
 80097d6:	fb09 1102 	mla	r1, r9, r2, r1
 80097da:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80097de:	4567      	cmp	r7, ip
 80097e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097e4:	d8e6      	bhi.n	80097b4 <__multiply+0x10c>
 80097e6:	9a01      	ldr	r2, [sp, #4]
 80097e8:	50a9      	str	r1, [r5, r2]
 80097ea:	3504      	adds	r5, #4
 80097ec:	e79a      	b.n	8009724 <__multiply+0x7c>
 80097ee:	3e01      	subs	r6, #1
 80097f0:	e79c      	b.n	800972c <__multiply+0x84>
 80097f2:	bf00      	nop
 80097f4:	0800b850 	.word	0x0800b850
 80097f8:	0800b940 	.word	0x0800b940

080097fc <__pow5mult>:
 80097fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009800:	4615      	mov	r5, r2
 8009802:	f012 0203 	ands.w	r2, r2, #3
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	d007      	beq.n	800981c <__pow5mult+0x20>
 800980c:	4c25      	ldr	r4, [pc, #148]	; (80098a4 <__pow5mult+0xa8>)
 800980e:	3a01      	subs	r2, #1
 8009810:	2300      	movs	r3, #0
 8009812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009816:	f7ff fe51 	bl	80094bc <__multadd>
 800981a:	4607      	mov	r7, r0
 800981c:	10ad      	asrs	r5, r5, #2
 800981e:	d03d      	beq.n	800989c <__pow5mult+0xa0>
 8009820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009822:	b97c      	cbnz	r4, 8009844 <__pow5mult+0x48>
 8009824:	2010      	movs	r0, #16
 8009826:	f7ff fdbf 	bl	80093a8 <malloc>
 800982a:	4602      	mov	r2, r0
 800982c:	6270      	str	r0, [r6, #36]	; 0x24
 800982e:	b928      	cbnz	r0, 800983c <__pow5mult+0x40>
 8009830:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <__pow5mult+0xac>)
 8009832:	481e      	ldr	r0, [pc, #120]	; (80098ac <__pow5mult+0xb0>)
 8009834:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009838:	f000 fedc 	bl	800a5f4 <__assert_func>
 800983c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009840:	6004      	str	r4, [r0, #0]
 8009842:	60c4      	str	r4, [r0, #12]
 8009844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800984c:	b94c      	cbnz	r4, 8009862 <__pow5mult+0x66>
 800984e:	f240 2171 	movw	r1, #625	; 0x271
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ff12 	bl	800967c <__i2b>
 8009858:	2300      	movs	r3, #0
 800985a:	f8c8 0008 	str.w	r0, [r8, #8]
 800985e:	4604      	mov	r4, r0
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	f04f 0900 	mov.w	r9, #0
 8009866:	07eb      	lsls	r3, r5, #31
 8009868:	d50a      	bpl.n	8009880 <__pow5mult+0x84>
 800986a:	4639      	mov	r1, r7
 800986c:	4622      	mov	r2, r4
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ff1a 	bl	80096a8 <__multiply>
 8009874:	4639      	mov	r1, r7
 8009876:	4680      	mov	r8, r0
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff fdfd 	bl	8009478 <_Bfree>
 800987e:	4647      	mov	r7, r8
 8009880:	106d      	asrs	r5, r5, #1
 8009882:	d00b      	beq.n	800989c <__pow5mult+0xa0>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	b938      	cbnz	r0, 8009898 <__pow5mult+0x9c>
 8009888:	4622      	mov	r2, r4
 800988a:	4621      	mov	r1, r4
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff ff0b 	bl	80096a8 <__multiply>
 8009892:	6020      	str	r0, [r4, #0]
 8009894:	f8c0 9000 	str.w	r9, [r0]
 8009898:	4604      	mov	r4, r0
 800989a:	e7e4      	b.n	8009866 <__pow5mult+0x6a>
 800989c:	4638      	mov	r0, r7
 800989e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a2:	bf00      	nop
 80098a4:	0800ba90 	.word	0x0800ba90
 80098a8:	0800b7de 	.word	0x0800b7de
 80098ac:	0800b940 	.word	0x0800b940

080098b0 <__lshift>:
 80098b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	460c      	mov	r4, r1
 80098b6:	6849      	ldr	r1, [r1, #4]
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	4607      	mov	r7, r0
 80098c2:	4691      	mov	r9, r2
 80098c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098c8:	f108 0601 	add.w	r6, r8, #1
 80098cc:	42b3      	cmp	r3, r6
 80098ce:	db0b      	blt.n	80098e8 <__lshift+0x38>
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fd91 	bl	80093f8 <_Balloc>
 80098d6:	4605      	mov	r5, r0
 80098d8:	b948      	cbnz	r0, 80098ee <__lshift+0x3e>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b2a      	ldr	r3, [pc, #168]	; (8009988 <__lshift+0xd8>)
 80098de:	482b      	ldr	r0, [pc, #172]	; (800998c <__lshift+0xdc>)
 80098e0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80098e4:	f000 fe86 	bl	800a5f4 <__assert_func>
 80098e8:	3101      	adds	r1, #1
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	e7ee      	b.n	80098cc <__lshift+0x1c>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f100 0114 	add.w	r1, r0, #20
 80098f4:	f100 0210 	add.w	r2, r0, #16
 80098f8:	4618      	mov	r0, r3
 80098fa:	4553      	cmp	r3, sl
 80098fc:	db37      	blt.n	800996e <__lshift+0xbe>
 80098fe:	6920      	ldr	r0, [r4, #16]
 8009900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009904:	f104 0314 	add.w	r3, r4, #20
 8009908:	f019 091f 	ands.w	r9, r9, #31
 800990c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009914:	d02f      	beq.n	8009976 <__lshift+0xc6>
 8009916:	f1c9 0e20 	rsb	lr, r9, #32
 800991a:	468a      	mov	sl, r1
 800991c:	f04f 0c00 	mov.w	ip, #0
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	fa02 f209 	lsl.w	r2, r2, r9
 8009926:	ea42 020c 	orr.w	r2, r2, ip
 800992a:	f84a 2b04 	str.w	r2, [sl], #4
 800992e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009932:	4298      	cmp	r0, r3
 8009934:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009938:	d8f2      	bhi.n	8009920 <__lshift+0x70>
 800993a:	1b03      	subs	r3, r0, r4
 800993c:	3b15      	subs	r3, #21
 800993e:	f023 0303 	bic.w	r3, r3, #3
 8009942:	3304      	adds	r3, #4
 8009944:	f104 0215 	add.w	r2, r4, #21
 8009948:	4290      	cmp	r0, r2
 800994a:	bf38      	it	cc
 800994c:	2304      	movcc	r3, #4
 800994e:	f841 c003 	str.w	ip, [r1, r3]
 8009952:	f1bc 0f00 	cmp.w	ip, #0
 8009956:	d001      	beq.n	800995c <__lshift+0xac>
 8009958:	f108 0602 	add.w	r6, r8, #2
 800995c:	3e01      	subs	r6, #1
 800995e:	4638      	mov	r0, r7
 8009960:	612e      	str	r6, [r5, #16]
 8009962:	4621      	mov	r1, r4
 8009964:	f7ff fd88 	bl	8009478 <_Bfree>
 8009968:	4628      	mov	r0, r5
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009972:	3301      	adds	r3, #1
 8009974:	e7c1      	b.n	80098fa <__lshift+0x4a>
 8009976:	3904      	subs	r1, #4
 8009978:	f853 2b04 	ldr.w	r2, [r3], #4
 800997c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009980:	4298      	cmp	r0, r3
 8009982:	d8f9      	bhi.n	8009978 <__lshift+0xc8>
 8009984:	e7ea      	b.n	800995c <__lshift+0xac>
 8009986:	bf00      	nop
 8009988:	0800b850 	.word	0x0800b850
 800998c:	0800b940 	.word	0x0800b940

08009990 <__mcmp>:
 8009990:	b530      	push	{r4, r5, lr}
 8009992:	6902      	ldr	r2, [r0, #16]
 8009994:	690c      	ldr	r4, [r1, #16]
 8009996:	1b12      	subs	r2, r2, r4
 8009998:	d10e      	bne.n	80099b8 <__mcmp+0x28>
 800999a:	f100 0314 	add.w	r3, r0, #20
 800999e:	3114      	adds	r1, #20
 80099a0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099a4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099a8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099ac:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099b0:	42a5      	cmp	r5, r4
 80099b2:	d003      	beq.n	80099bc <__mcmp+0x2c>
 80099b4:	d305      	bcc.n	80099c2 <__mcmp+0x32>
 80099b6:	2201      	movs	r2, #1
 80099b8:	4610      	mov	r0, r2
 80099ba:	bd30      	pop	{r4, r5, pc}
 80099bc:	4283      	cmp	r3, r0
 80099be:	d3f3      	bcc.n	80099a8 <__mcmp+0x18>
 80099c0:	e7fa      	b.n	80099b8 <__mcmp+0x28>
 80099c2:	f04f 32ff 	mov.w	r2, #4294967295
 80099c6:	e7f7      	b.n	80099b8 <__mcmp+0x28>

080099c8 <__mdiff>:
 80099c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099cc:	460c      	mov	r4, r1
 80099ce:	4606      	mov	r6, r0
 80099d0:	4611      	mov	r1, r2
 80099d2:	4620      	mov	r0, r4
 80099d4:	4690      	mov	r8, r2
 80099d6:	f7ff ffdb 	bl	8009990 <__mcmp>
 80099da:	1e05      	subs	r5, r0, #0
 80099dc:	d110      	bne.n	8009a00 <__mdiff+0x38>
 80099de:	4629      	mov	r1, r5
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7ff fd09 	bl	80093f8 <_Balloc>
 80099e6:	b930      	cbnz	r0, 80099f6 <__mdiff+0x2e>
 80099e8:	4b3a      	ldr	r3, [pc, #232]	; (8009ad4 <__mdiff+0x10c>)
 80099ea:	4602      	mov	r2, r0
 80099ec:	f240 2132 	movw	r1, #562	; 0x232
 80099f0:	4839      	ldr	r0, [pc, #228]	; (8009ad8 <__mdiff+0x110>)
 80099f2:	f000 fdff 	bl	800a5f4 <__assert_func>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a00:	bfa4      	itt	ge
 8009a02:	4643      	movge	r3, r8
 8009a04:	46a0      	movge	r8, r4
 8009a06:	4630      	mov	r0, r6
 8009a08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a0c:	bfa6      	itte	ge
 8009a0e:	461c      	movge	r4, r3
 8009a10:	2500      	movge	r5, #0
 8009a12:	2501      	movlt	r5, #1
 8009a14:	f7ff fcf0 	bl	80093f8 <_Balloc>
 8009a18:	b920      	cbnz	r0, 8009a24 <__mdiff+0x5c>
 8009a1a:	4b2e      	ldr	r3, [pc, #184]	; (8009ad4 <__mdiff+0x10c>)
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a22:	e7e5      	b.n	80099f0 <__mdiff+0x28>
 8009a24:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a28:	6926      	ldr	r6, [r4, #16]
 8009a2a:	60c5      	str	r5, [r0, #12]
 8009a2c:	f104 0914 	add.w	r9, r4, #20
 8009a30:	f108 0514 	add.w	r5, r8, #20
 8009a34:	f100 0e14 	add.w	lr, r0, #20
 8009a38:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a40:	f108 0210 	add.w	r2, r8, #16
 8009a44:	46f2      	mov	sl, lr
 8009a46:	2100      	movs	r1, #0
 8009a48:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a4c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a50:	fa1f f883 	uxth.w	r8, r3
 8009a54:	fa11 f18b 	uxtah	r1, r1, fp
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	eba1 0808 	sub.w	r8, r1, r8
 8009a5e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a62:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a66:	fa1f f888 	uxth.w	r8, r8
 8009a6a:	1419      	asrs	r1, r3, #16
 8009a6c:	454e      	cmp	r6, r9
 8009a6e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a72:	f84a 3b04 	str.w	r3, [sl], #4
 8009a76:	d8e7      	bhi.n	8009a48 <__mdiff+0x80>
 8009a78:	1b33      	subs	r3, r6, r4
 8009a7a:	3b15      	subs	r3, #21
 8009a7c:	f023 0303 	bic.w	r3, r3, #3
 8009a80:	3304      	adds	r3, #4
 8009a82:	3415      	adds	r4, #21
 8009a84:	42a6      	cmp	r6, r4
 8009a86:	bf38      	it	cc
 8009a88:	2304      	movcc	r3, #4
 8009a8a:	441d      	add	r5, r3
 8009a8c:	4473      	add	r3, lr
 8009a8e:	469e      	mov	lr, r3
 8009a90:	462e      	mov	r6, r5
 8009a92:	4566      	cmp	r6, ip
 8009a94:	d30e      	bcc.n	8009ab4 <__mdiff+0xec>
 8009a96:	f10c 0203 	add.w	r2, ip, #3
 8009a9a:	1b52      	subs	r2, r2, r5
 8009a9c:	f022 0203 	bic.w	r2, r2, #3
 8009aa0:	3d03      	subs	r5, #3
 8009aa2:	45ac      	cmp	ip, r5
 8009aa4:	bf38      	it	cc
 8009aa6:	2200      	movcc	r2, #0
 8009aa8:	441a      	add	r2, r3
 8009aaa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009aae:	b17b      	cbz	r3, 8009ad0 <__mdiff+0x108>
 8009ab0:	6107      	str	r7, [r0, #16]
 8009ab2:	e7a3      	b.n	80099fc <__mdiff+0x34>
 8009ab4:	f856 8b04 	ldr.w	r8, [r6], #4
 8009ab8:	fa11 f288 	uxtah	r2, r1, r8
 8009abc:	1414      	asrs	r4, r2, #16
 8009abe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ac2:	b292      	uxth	r2, r2
 8009ac4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009ac8:	f84e 2b04 	str.w	r2, [lr], #4
 8009acc:	1421      	asrs	r1, r4, #16
 8009ace:	e7e0      	b.n	8009a92 <__mdiff+0xca>
 8009ad0:	3f01      	subs	r7, #1
 8009ad2:	e7ea      	b.n	8009aaa <__mdiff+0xe2>
 8009ad4:	0800b850 	.word	0x0800b850
 8009ad8:	0800b940 	.word	0x0800b940

08009adc <__ulp>:
 8009adc:	b082      	sub	sp, #8
 8009ade:	ed8d 0b00 	vstr	d0, [sp]
 8009ae2:	9b01      	ldr	r3, [sp, #4]
 8009ae4:	4912      	ldr	r1, [pc, #72]	; (8009b30 <__ulp+0x54>)
 8009ae6:	4019      	ands	r1, r3
 8009ae8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009aec:	2900      	cmp	r1, #0
 8009aee:	dd05      	ble.n	8009afc <__ulp+0x20>
 8009af0:	2200      	movs	r2, #0
 8009af2:	460b      	mov	r3, r1
 8009af4:	ec43 2b10 	vmov	d0, r2, r3
 8009af8:	b002      	add	sp, #8
 8009afa:	4770      	bx	lr
 8009afc:	4249      	negs	r1, r1
 8009afe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b02:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b06:	f04f 0200 	mov.w	r2, #0
 8009b0a:	f04f 0300 	mov.w	r3, #0
 8009b0e:	da04      	bge.n	8009b1a <__ulp+0x3e>
 8009b10:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b14:	fa41 f300 	asr.w	r3, r1, r0
 8009b18:	e7ec      	b.n	8009af4 <__ulp+0x18>
 8009b1a:	f1a0 0114 	sub.w	r1, r0, #20
 8009b1e:	291e      	cmp	r1, #30
 8009b20:	bfda      	itte	le
 8009b22:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b26:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b2a:	2101      	movgt	r1, #1
 8009b2c:	460a      	mov	r2, r1
 8009b2e:	e7e1      	b.n	8009af4 <__ulp+0x18>
 8009b30:	7ff00000 	.word	0x7ff00000

08009b34 <__b2d>:
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b36:	6905      	ldr	r5, [r0, #16]
 8009b38:	f100 0714 	add.w	r7, r0, #20
 8009b3c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b40:	1f2e      	subs	r6, r5, #4
 8009b42:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b46:	4620      	mov	r0, r4
 8009b48:	f7ff fd48 	bl	80095dc <__hi0bits>
 8009b4c:	f1c0 0320 	rsb	r3, r0, #32
 8009b50:	280a      	cmp	r0, #10
 8009b52:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009bd0 <__b2d+0x9c>
 8009b56:	600b      	str	r3, [r1, #0]
 8009b58:	dc14      	bgt.n	8009b84 <__b2d+0x50>
 8009b5a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b5e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b62:	42b7      	cmp	r7, r6
 8009b64:	ea41 030c 	orr.w	r3, r1, ip
 8009b68:	bf34      	ite	cc
 8009b6a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b6e:	2100      	movcs	r1, #0
 8009b70:	3015      	adds	r0, #21
 8009b72:	fa04 f000 	lsl.w	r0, r4, r0
 8009b76:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b7a:	ea40 0201 	orr.w	r2, r0, r1
 8009b7e:	ec43 2b10 	vmov	d0, r2, r3
 8009b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b84:	42b7      	cmp	r7, r6
 8009b86:	bf3a      	itte	cc
 8009b88:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009b90:	2100      	movcs	r1, #0
 8009b92:	380b      	subs	r0, #11
 8009b94:	d017      	beq.n	8009bc6 <__b2d+0x92>
 8009b96:	f1c0 0c20 	rsb	ip, r0, #32
 8009b9a:	fa04 f500 	lsl.w	r5, r4, r0
 8009b9e:	42be      	cmp	r6, r7
 8009ba0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009ba4:	ea45 0504 	orr.w	r5, r5, r4
 8009ba8:	bf8c      	ite	hi
 8009baa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bae:	2400      	movls	r4, #0
 8009bb0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bb4:	fa01 f000 	lsl.w	r0, r1, r0
 8009bb8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bbc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bc0:	ea40 0204 	orr.w	r2, r0, r4
 8009bc4:	e7db      	b.n	8009b7e <__b2d+0x4a>
 8009bc6:	ea44 030c 	orr.w	r3, r4, ip
 8009bca:	460a      	mov	r2, r1
 8009bcc:	e7d7      	b.n	8009b7e <__b2d+0x4a>
 8009bce:	bf00      	nop
 8009bd0:	3ff00000 	.word	0x3ff00000

08009bd4 <__d2b>:
 8009bd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	4689      	mov	r9, r1
 8009bda:	2101      	movs	r1, #1
 8009bdc:	ec57 6b10 	vmov	r6, r7, d0
 8009be0:	4690      	mov	r8, r2
 8009be2:	f7ff fc09 	bl	80093f8 <_Balloc>
 8009be6:	4604      	mov	r4, r0
 8009be8:	b930      	cbnz	r0, 8009bf8 <__d2b+0x24>
 8009bea:	4602      	mov	r2, r0
 8009bec:	4b25      	ldr	r3, [pc, #148]	; (8009c84 <__d2b+0xb0>)
 8009bee:	4826      	ldr	r0, [pc, #152]	; (8009c88 <__d2b+0xb4>)
 8009bf0:	f240 310a 	movw	r1, #778	; 0x30a
 8009bf4:	f000 fcfe 	bl	800a5f4 <__assert_func>
 8009bf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009bfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c00:	bb35      	cbnz	r5, 8009c50 <__d2b+0x7c>
 8009c02:	2e00      	cmp	r6, #0
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	d028      	beq.n	8009c5a <__d2b+0x86>
 8009c08:	4668      	mov	r0, sp
 8009c0a:	9600      	str	r6, [sp, #0]
 8009c0c:	f7ff fd06 	bl	800961c <__lo0bits>
 8009c10:	9900      	ldr	r1, [sp, #0]
 8009c12:	b300      	cbz	r0, 8009c56 <__d2b+0x82>
 8009c14:	9a01      	ldr	r2, [sp, #4]
 8009c16:	f1c0 0320 	rsb	r3, r0, #32
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	430b      	orrs	r3, r1
 8009c20:	40c2      	lsrs	r2, r0
 8009c22:	6163      	str	r3, [r4, #20]
 8009c24:	9201      	str	r2, [sp, #4]
 8009c26:	9b01      	ldr	r3, [sp, #4]
 8009c28:	61a3      	str	r3, [r4, #24]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	bf14      	ite	ne
 8009c2e:	2202      	movne	r2, #2
 8009c30:	2201      	moveq	r2, #1
 8009c32:	6122      	str	r2, [r4, #16]
 8009c34:	b1d5      	cbz	r5, 8009c6c <__d2b+0x98>
 8009c36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c3a:	4405      	add	r5, r0
 8009c3c:	f8c9 5000 	str.w	r5, [r9]
 8009c40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c44:	f8c8 0000 	str.w	r0, [r8]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	b003      	add	sp, #12
 8009c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c54:	e7d5      	b.n	8009c02 <__d2b+0x2e>
 8009c56:	6161      	str	r1, [r4, #20]
 8009c58:	e7e5      	b.n	8009c26 <__d2b+0x52>
 8009c5a:	a801      	add	r0, sp, #4
 8009c5c:	f7ff fcde 	bl	800961c <__lo0bits>
 8009c60:	9b01      	ldr	r3, [sp, #4]
 8009c62:	6163      	str	r3, [r4, #20]
 8009c64:	2201      	movs	r2, #1
 8009c66:	6122      	str	r2, [r4, #16]
 8009c68:	3020      	adds	r0, #32
 8009c6a:	e7e3      	b.n	8009c34 <__d2b+0x60>
 8009c6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c74:	f8c9 0000 	str.w	r0, [r9]
 8009c78:	6918      	ldr	r0, [r3, #16]
 8009c7a:	f7ff fcaf 	bl	80095dc <__hi0bits>
 8009c7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c82:	e7df      	b.n	8009c44 <__d2b+0x70>
 8009c84:	0800b850 	.word	0x0800b850
 8009c88:	0800b940 	.word	0x0800b940

08009c8c <__ratio>:
 8009c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4688      	mov	r8, r1
 8009c92:	4669      	mov	r1, sp
 8009c94:	4681      	mov	r9, r0
 8009c96:	f7ff ff4d 	bl	8009b34 <__b2d>
 8009c9a:	a901      	add	r1, sp, #4
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	ec55 4b10 	vmov	r4, r5, d0
 8009ca2:	f7ff ff47 	bl	8009b34 <__b2d>
 8009ca6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009caa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cae:	eba3 0c02 	sub.w	ip, r3, r2
 8009cb2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009cbc:	ec51 0b10 	vmov	r0, r1, d0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	bfd6      	itet	le
 8009cc4:	460a      	movle	r2, r1
 8009cc6:	462a      	movgt	r2, r5
 8009cc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ccc:	468b      	mov	fp, r1
 8009cce:	462f      	mov	r7, r5
 8009cd0:	bfd4      	ite	le
 8009cd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cd6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cda:	4620      	mov	r0, r4
 8009cdc:	ee10 2a10 	vmov	r2, s0
 8009ce0:	465b      	mov	r3, fp
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fdb2 	bl	800084c <__aeabi_ddiv>
 8009ce8:	ec41 0b10 	vmov	d0, r0, r1
 8009cec:	b003      	add	sp, #12
 8009cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cf2 <__copybits>:
 8009cf2:	3901      	subs	r1, #1
 8009cf4:	b570      	push	{r4, r5, r6, lr}
 8009cf6:	1149      	asrs	r1, r1, #5
 8009cf8:	6914      	ldr	r4, [r2, #16]
 8009cfa:	3101      	adds	r1, #1
 8009cfc:	f102 0314 	add.w	r3, r2, #20
 8009d00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d08:	1f05      	subs	r5, r0, #4
 8009d0a:	42a3      	cmp	r3, r4
 8009d0c:	d30c      	bcc.n	8009d28 <__copybits+0x36>
 8009d0e:	1aa3      	subs	r3, r4, r2
 8009d10:	3b11      	subs	r3, #17
 8009d12:	f023 0303 	bic.w	r3, r3, #3
 8009d16:	3211      	adds	r2, #17
 8009d18:	42a2      	cmp	r2, r4
 8009d1a:	bf88      	it	hi
 8009d1c:	2300      	movhi	r3, #0
 8009d1e:	4418      	add	r0, r3
 8009d20:	2300      	movs	r3, #0
 8009d22:	4288      	cmp	r0, r1
 8009d24:	d305      	bcc.n	8009d32 <__copybits+0x40>
 8009d26:	bd70      	pop	{r4, r5, r6, pc}
 8009d28:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d30:	e7eb      	b.n	8009d0a <__copybits+0x18>
 8009d32:	f840 3b04 	str.w	r3, [r0], #4
 8009d36:	e7f4      	b.n	8009d22 <__copybits+0x30>

08009d38 <__any_on>:
 8009d38:	f100 0214 	add.w	r2, r0, #20
 8009d3c:	6900      	ldr	r0, [r0, #16]
 8009d3e:	114b      	asrs	r3, r1, #5
 8009d40:	4298      	cmp	r0, r3
 8009d42:	b510      	push	{r4, lr}
 8009d44:	db11      	blt.n	8009d6a <__any_on+0x32>
 8009d46:	dd0a      	ble.n	8009d5e <__any_on+0x26>
 8009d48:	f011 011f 	ands.w	r1, r1, #31
 8009d4c:	d007      	beq.n	8009d5e <__any_on+0x26>
 8009d4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d52:	fa24 f001 	lsr.w	r0, r4, r1
 8009d56:	fa00 f101 	lsl.w	r1, r0, r1
 8009d5a:	428c      	cmp	r4, r1
 8009d5c:	d10b      	bne.n	8009d76 <__any_on+0x3e>
 8009d5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d803      	bhi.n	8009d6e <__any_on+0x36>
 8009d66:	2000      	movs	r0, #0
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	e7f7      	b.n	8009d5e <__any_on+0x26>
 8009d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d72:	2900      	cmp	r1, #0
 8009d74:	d0f5      	beq.n	8009d62 <__any_on+0x2a>
 8009d76:	2001      	movs	r0, #1
 8009d78:	e7f6      	b.n	8009d68 <__any_on+0x30>

08009d7a <_calloc_r>:
 8009d7a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d7c:	fba1 2402 	umull	r2, r4, r1, r2
 8009d80:	b94c      	cbnz	r4, 8009d96 <_calloc_r+0x1c>
 8009d82:	4611      	mov	r1, r2
 8009d84:	9201      	str	r2, [sp, #4]
 8009d86:	f000 f87b 	bl	8009e80 <_malloc_r>
 8009d8a:	9a01      	ldr	r2, [sp, #4]
 8009d8c:	4605      	mov	r5, r0
 8009d8e:	b930      	cbnz	r0, 8009d9e <_calloc_r+0x24>
 8009d90:	4628      	mov	r0, r5
 8009d92:	b003      	add	sp, #12
 8009d94:	bd30      	pop	{r4, r5, pc}
 8009d96:	220c      	movs	r2, #12
 8009d98:	6002      	str	r2, [r0, #0]
 8009d9a:	2500      	movs	r5, #0
 8009d9c:	e7f8      	b.n	8009d90 <_calloc_r+0x16>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	f7fc f848 	bl	8005e34 <memset>
 8009da4:	e7f4      	b.n	8009d90 <_calloc_r+0x16>
	...

08009da8 <_free_r>:
 8009da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	d044      	beq.n	8009e38 <_free_r+0x90>
 8009dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db2:	9001      	str	r0, [sp, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dba:	bfb8      	it	lt
 8009dbc:	18e4      	addlt	r4, r4, r3
 8009dbe:	f000 fca7 	bl	800a710 <__malloc_lock>
 8009dc2:	4a1e      	ldr	r2, [pc, #120]	; (8009e3c <_free_r+0x94>)
 8009dc4:	9801      	ldr	r0, [sp, #4]
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	b933      	cbnz	r3, 8009dd8 <_free_r+0x30>
 8009dca:	6063      	str	r3, [r4, #4]
 8009dcc:	6014      	str	r4, [r2, #0]
 8009dce:	b003      	add	sp, #12
 8009dd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dd4:	f000 bca2 	b.w	800a71c <__malloc_unlock>
 8009dd8:	42a3      	cmp	r3, r4
 8009dda:	d908      	bls.n	8009dee <_free_r+0x46>
 8009ddc:	6825      	ldr	r5, [r4, #0]
 8009dde:	1961      	adds	r1, r4, r5
 8009de0:	428b      	cmp	r3, r1
 8009de2:	bf01      	itttt	eq
 8009de4:	6819      	ldreq	r1, [r3, #0]
 8009de6:	685b      	ldreq	r3, [r3, #4]
 8009de8:	1949      	addeq	r1, r1, r5
 8009dea:	6021      	streq	r1, [r4, #0]
 8009dec:	e7ed      	b.n	8009dca <_free_r+0x22>
 8009dee:	461a      	mov	r2, r3
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	b10b      	cbz	r3, 8009df8 <_free_r+0x50>
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d9fa      	bls.n	8009dee <_free_r+0x46>
 8009df8:	6811      	ldr	r1, [r2, #0]
 8009dfa:	1855      	adds	r5, r2, r1
 8009dfc:	42a5      	cmp	r5, r4
 8009dfe:	d10b      	bne.n	8009e18 <_free_r+0x70>
 8009e00:	6824      	ldr	r4, [r4, #0]
 8009e02:	4421      	add	r1, r4
 8009e04:	1854      	adds	r4, r2, r1
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	6011      	str	r1, [r2, #0]
 8009e0a:	d1e0      	bne.n	8009dce <_free_r+0x26>
 8009e0c:	681c      	ldr	r4, [r3, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	6053      	str	r3, [r2, #4]
 8009e12:	4421      	add	r1, r4
 8009e14:	6011      	str	r1, [r2, #0]
 8009e16:	e7da      	b.n	8009dce <_free_r+0x26>
 8009e18:	d902      	bls.n	8009e20 <_free_r+0x78>
 8009e1a:	230c      	movs	r3, #12
 8009e1c:	6003      	str	r3, [r0, #0]
 8009e1e:	e7d6      	b.n	8009dce <_free_r+0x26>
 8009e20:	6825      	ldr	r5, [r4, #0]
 8009e22:	1961      	adds	r1, r4, r5
 8009e24:	428b      	cmp	r3, r1
 8009e26:	bf04      	itt	eq
 8009e28:	6819      	ldreq	r1, [r3, #0]
 8009e2a:	685b      	ldreq	r3, [r3, #4]
 8009e2c:	6063      	str	r3, [r4, #4]
 8009e2e:	bf04      	itt	eq
 8009e30:	1949      	addeq	r1, r1, r5
 8009e32:	6021      	streq	r1, [r4, #0]
 8009e34:	6054      	str	r4, [r2, #4]
 8009e36:	e7ca      	b.n	8009dce <_free_r+0x26>
 8009e38:	b003      	add	sp, #12
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	20000658 	.word	0x20000658

08009e40 <sbrk_aligned>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	4e0e      	ldr	r6, [pc, #56]	; (8009e7c <sbrk_aligned+0x3c>)
 8009e44:	460c      	mov	r4, r1
 8009e46:	6831      	ldr	r1, [r6, #0]
 8009e48:	4605      	mov	r5, r0
 8009e4a:	b911      	cbnz	r1, 8009e52 <sbrk_aligned+0x12>
 8009e4c:	f000 fb4c 	bl	800a4e8 <_sbrk_r>
 8009e50:	6030      	str	r0, [r6, #0]
 8009e52:	4621      	mov	r1, r4
 8009e54:	4628      	mov	r0, r5
 8009e56:	f000 fb47 	bl	800a4e8 <_sbrk_r>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d00a      	beq.n	8009e74 <sbrk_aligned+0x34>
 8009e5e:	1cc4      	adds	r4, r0, #3
 8009e60:	f024 0403 	bic.w	r4, r4, #3
 8009e64:	42a0      	cmp	r0, r4
 8009e66:	d007      	beq.n	8009e78 <sbrk_aligned+0x38>
 8009e68:	1a21      	subs	r1, r4, r0
 8009e6a:	4628      	mov	r0, r5
 8009e6c:	f000 fb3c 	bl	800a4e8 <_sbrk_r>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d101      	bne.n	8009e78 <sbrk_aligned+0x38>
 8009e74:	f04f 34ff 	mov.w	r4, #4294967295
 8009e78:	4620      	mov	r0, r4
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	2000065c 	.word	0x2000065c

08009e80 <_malloc_r>:
 8009e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e84:	1ccd      	adds	r5, r1, #3
 8009e86:	f025 0503 	bic.w	r5, r5, #3
 8009e8a:	3508      	adds	r5, #8
 8009e8c:	2d0c      	cmp	r5, #12
 8009e8e:	bf38      	it	cc
 8009e90:	250c      	movcc	r5, #12
 8009e92:	2d00      	cmp	r5, #0
 8009e94:	4607      	mov	r7, r0
 8009e96:	db01      	blt.n	8009e9c <_malloc_r+0x1c>
 8009e98:	42a9      	cmp	r1, r5
 8009e9a:	d905      	bls.n	8009ea8 <_malloc_r+0x28>
 8009e9c:	230c      	movs	r3, #12
 8009e9e:	603b      	str	r3, [r7, #0]
 8009ea0:	2600      	movs	r6, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea8:	4e2e      	ldr	r6, [pc, #184]	; (8009f64 <_malloc_r+0xe4>)
 8009eaa:	f000 fc31 	bl	800a710 <__malloc_lock>
 8009eae:	6833      	ldr	r3, [r6, #0]
 8009eb0:	461c      	mov	r4, r3
 8009eb2:	bb34      	cbnz	r4, 8009f02 <_malloc_r+0x82>
 8009eb4:	4629      	mov	r1, r5
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f7ff ffc2 	bl	8009e40 <sbrk_aligned>
 8009ebc:	1c43      	adds	r3, r0, #1
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	d14d      	bne.n	8009f5e <_malloc_r+0xde>
 8009ec2:	6834      	ldr	r4, [r6, #0]
 8009ec4:	4626      	mov	r6, r4
 8009ec6:	2e00      	cmp	r6, #0
 8009ec8:	d140      	bne.n	8009f4c <_malloc_r+0xcc>
 8009eca:	6823      	ldr	r3, [r4, #0]
 8009ecc:	4631      	mov	r1, r6
 8009ece:	4638      	mov	r0, r7
 8009ed0:	eb04 0803 	add.w	r8, r4, r3
 8009ed4:	f000 fb08 	bl	800a4e8 <_sbrk_r>
 8009ed8:	4580      	cmp	r8, r0
 8009eda:	d13a      	bne.n	8009f52 <_malloc_r+0xd2>
 8009edc:	6821      	ldr	r1, [r4, #0]
 8009ede:	3503      	adds	r5, #3
 8009ee0:	1a6d      	subs	r5, r5, r1
 8009ee2:	f025 0503 	bic.w	r5, r5, #3
 8009ee6:	3508      	adds	r5, #8
 8009ee8:	2d0c      	cmp	r5, #12
 8009eea:	bf38      	it	cc
 8009eec:	250c      	movcc	r5, #12
 8009eee:	4629      	mov	r1, r5
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ffa5 	bl	8009e40 <sbrk_aligned>
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d02b      	beq.n	8009f52 <_malloc_r+0xd2>
 8009efa:	6823      	ldr	r3, [r4, #0]
 8009efc:	442b      	add	r3, r5
 8009efe:	6023      	str	r3, [r4, #0]
 8009f00:	e00e      	b.n	8009f20 <_malloc_r+0xa0>
 8009f02:	6822      	ldr	r2, [r4, #0]
 8009f04:	1b52      	subs	r2, r2, r5
 8009f06:	d41e      	bmi.n	8009f46 <_malloc_r+0xc6>
 8009f08:	2a0b      	cmp	r2, #11
 8009f0a:	d916      	bls.n	8009f3a <_malloc_r+0xba>
 8009f0c:	1961      	adds	r1, r4, r5
 8009f0e:	42a3      	cmp	r3, r4
 8009f10:	6025      	str	r5, [r4, #0]
 8009f12:	bf18      	it	ne
 8009f14:	6059      	strne	r1, [r3, #4]
 8009f16:	6863      	ldr	r3, [r4, #4]
 8009f18:	bf08      	it	eq
 8009f1a:	6031      	streq	r1, [r6, #0]
 8009f1c:	5162      	str	r2, [r4, r5]
 8009f1e:	604b      	str	r3, [r1, #4]
 8009f20:	4638      	mov	r0, r7
 8009f22:	f104 060b 	add.w	r6, r4, #11
 8009f26:	f000 fbf9 	bl	800a71c <__malloc_unlock>
 8009f2a:	f026 0607 	bic.w	r6, r6, #7
 8009f2e:	1d23      	adds	r3, r4, #4
 8009f30:	1af2      	subs	r2, r6, r3
 8009f32:	d0b6      	beq.n	8009ea2 <_malloc_r+0x22>
 8009f34:	1b9b      	subs	r3, r3, r6
 8009f36:	50a3      	str	r3, [r4, r2]
 8009f38:	e7b3      	b.n	8009ea2 <_malloc_r+0x22>
 8009f3a:	6862      	ldr	r2, [r4, #4]
 8009f3c:	42a3      	cmp	r3, r4
 8009f3e:	bf0c      	ite	eq
 8009f40:	6032      	streq	r2, [r6, #0]
 8009f42:	605a      	strne	r2, [r3, #4]
 8009f44:	e7ec      	b.n	8009f20 <_malloc_r+0xa0>
 8009f46:	4623      	mov	r3, r4
 8009f48:	6864      	ldr	r4, [r4, #4]
 8009f4a:	e7b2      	b.n	8009eb2 <_malloc_r+0x32>
 8009f4c:	4634      	mov	r4, r6
 8009f4e:	6876      	ldr	r6, [r6, #4]
 8009f50:	e7b9      	b.n	8009ec6 <_malloc_r+0x46>
 8009f52:	230c      	movs	r3, #12
 8009f54:	603b      	str	r3, [r7, #0]
 8009f56:	4638      	mov	r0, r7
 8009f58:	f000 fbe0 	bl	800a71c <__malloc_unlock>
 8009f5c:	e7a1      	b.n	8009ea2 <_malloc_r+0x22>
 8009f5e:	6025      	str	r5, [r4, #0]
 8009f60:	e7de      	b.n	8009f20 <_malloc_r+0xa0>
 8009f62:	bf00      	nop
 8009f64:	20000658 	.word	0x20000658

08009f68 <__ssputs_r>:
 8009f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f6c:	688e      	ldr	r6, [r1, #8]
 8009f6e:	429e      	cmp	r6, r3
 8009f70:	4682      	mov	sl, r0
 8009f72:	460c      	mov	r4, r1
 8009f74:	4690      	mov	r8, r2
 8009f76:	461f      	mov	r7, r3
 8009f78:	d838      	bhi.n	8009fec <__ssputs_r+0x84>
 8009f7a:	898a      	ldrh	r2, [r1, #12]
 8009f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f80:	d032      	beq.n	8009fe8 <__ssputs_r+0x80>
 8009f82:	6825      	ldr	r5, [r4, #0]
 8009f84:	6909      	ldr	r1, [r1, #16]
 8009f86:	eba5 0901 	sub.w	r9, r5, r1
 8009f8a:	6965      	ldr	r5, [r4, #20]
 8009f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f94:	3301      	adds	r3, #1
 8009f96:	444b      	add	r3, r9
 8009f98:	106d      	asrs	r5, r5, #1
 8009f9a:	429d      	cmp	r5, r3
 8009f9c:	bf38      	it	cc
 8009f9e:	461d      	movcc	r5, r3
 8009fa0:	0553      	lsls	r3, r2, #21
 8009fa2:	d531      	bpl.n	800a008 <__ssputs_r+0xa0>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7ff ff6b 	bl	8009e80 <_malloc_r>
 8009faa:	4606      	mov	r6, r0
 8009fac:	b950      	cbnz	r0, 8009fc4 <__ssputs_r+0x5c>
 8009fae:	230c      	movs	r3, #12
 8009fb0:	f8ca 3000 	str.w	r3, [sl]
 8009fb4:	89a3      	ldrh	r3, [r4, #12]
 8009fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc4:	6921      	ldr	r1, [r4, #16]
 8009fc6:	464a      	mov	r2, r9
 8009fc8:	f7ff fa08 	bl	80093dc <memcpy>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	6126      	str	r6, [r4, #16]
 8009fda:	6165      	str	r5, [r4, #20]
 8009fdc:	444e      	add	r6, r9
 8009fde:	eba5 0509 	sub.w	r5, r5, r9
 8009fe2:	6026      	str	r6, [r4, #0]
 8009fe4:	60a5      	str	r5, [r4, #8]
 8009fe6:	463e      	mov	r6, r7
 8009fe8:	42be      	cmp	r6, r7
 8009fea:	d900      	bls.n	8009fee <__ssputs_r+0x86>
 8009fec:	463e      	mov	r6, r7
 8009fee:	6820      	ldr	r0, [r4, #0]
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	4641      	mov	r1, r8
 8009ff4:	f000 fb72 	bl	800a6dc <memmove>
 8009ff8:	68a3      	ldr	r3, [r4, #8]
 8009ffa:	1b9b      	subs	r3, r3, r6
 8009ffc:	60a3      	str	r3, [r4, #8]
 8009ffe:	6823      	ldr	r3, [r4, #0]
 800a000:	4433      	add	r3, r6
 800a002:	6023      	str	r3, [r4, #0]
 800a004:	2000      	movs	r0, #0
 800a006:	e7db      	b.n	8009fc0 <__ssputs_r+0x58>
 800a008:	462a      	mov	r2, r5
 800a00a:	f000 fb8d 	bl	800a728 <_realloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	2800      	cmp	r0, #0
 800a012:	d1e1      	bne.n	8009fd8 <__ssputs_r+0x70>
 800a014:	6921      	ldr	r1, [r4, #16]
 800a016:	4650      	mov	r0, sl
 800a018:	f7ff fec6 	bl	8009da8 <_free_r>
 800a01c:	e7c7      	b.n	8009fae <__ssputs_r+0x46>
	...

0800a020 <_svfiprintf_r>:
 800a020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a024:	4698      	mov	r8, r3
 800a026:	898b      	ldrh	r3, [r1, #12]
 800a028:	061b      	lsls	r3, r3, #24
 800a02a:	b09d      	sub	sp, #116	; 0x74
 800a02c:	4607      	mov	r7, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	4614      	mov	r4, r2
 800a032:	d50e      	bpl.n	800a052 <_svfiprintf_r+0x32>
 800a034:	690b      	ldr	r3, [r1, #16]
 800a036:	b963      	cbnz	r3, 800a052 <_svfiprintf_r+0x32>
 800a038:	2140      	movs	r1, #64	; 0x40
 800a03a:	f7ff ff21 	bl	8009e80 <_malloc_r>
 800a03e:	6028      	str	r0, [r5, #0]
 800a040:	6128      	str	r0, [r5, #16]
 800a042:	b920      	cbnz	r0, 800a04e <_svfiprintf_r+0x2e>
 800a044:	230c      	movs	r3, #12
 800a046:	603b      	str	r3, [r7, #0]
 800a048:	f04f 30ff 	mov.w	r0, #4294967295
 800a04c:	e0d1      	b.n	800a1f2 <_svfiprintf_r+0x1d2>
 800a04e:	2340      	movs	r3, #64	; 0x40
 800a050:	616b      	str	r3, [r5, #20]
 800a052:	2300      	movs	r3, #0
 800a054:	9309      	str	r3, [sp, #36]	; 0x24
 800a056:	2320      	movs	r3, #32
 800a058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a060:	2330      	movs	r3, #48	; 0x30
 800a062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a20c <_svfiprintf_r+0x1ec>
 800a066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	4623      	mov	r3, r4
 800a070:	469a      	mov	sl, r3
 800a072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a076:	b10a      	cbz	r2, 800a07c <_svfiprintf_r+0x5c>
 800a078:	2a25      	cmp	r2, #37	; 0x25
 800a07a:	d1f9      	bne.n	800a070 <_svfiprintf_r+0x50>
 800a07c:	ebba 0b04 	subs.w	fp, sl, r4
 800a080:	d00b      	beq.n	800a09a <_svfiprintf_r+0x7a>
 800a082:	465b      	mov	r3, fp
 800a084:	4622      	mov	r2, r4
 800a086:	4629      	mov	r1, r5
 800a088:	4638      	mov	r0, r7
 800a08a:	f7ff ff6d 	bl	8009f68 <__ssputs_r>
 800a08e:	3001      	adds	r0, #1
 800a090:	f000 80aa 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a096:	445a      	add	r2, fp
 800a098:	9209      	str	r2, [sp, #36]	; 0x24
 800a09a:	f89a 3000 	ldrb.w	r3, [sl]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	f000 80a2 	beq.w	800a1e8 <_svfiprintf_r+0x1c8>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ae:	f10a 0a01 	add.w	sl, sl, #1
 800a0b2:	9304      	str	r3, [sp, #16]
 800a0b4:	9307      	str	r3, [sp, #28]
 800a0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800a0bc:	4654      	mov	r4, sl
 800a0be:	2205      	movs	r2, #5
 800a0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c4:	4851      	ldr	r0, [pc, #324]	; (800a20c <_svfiprintf_r+0x1ec>)
 800a0c6:	f7f6 f88b 	bl	80001e0 <memchr>
 800a0ca:	9a04      	ldr	r2, [sp, #16]
 800a0cc:	b9d8      	cbnz	r0, 800a106 <_svfiprintf_r+0xe6>
 800a0ce:	06d0      	lsls	r0, r2, #27
 800a0d0:	bf44      	itt	mi
 800a0d2:	2320      	movmi	r3, #32
 800a0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d8:	0711      	lsls	r1, r2, #28
 800a0da:	bf44      	itt	mi
 800a0dc:	232b      	movmi	r3, #43	; 0x2b
 800a0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a0e8:	d015      	beq.n	800a116 <_svfiprintf_r+0xf6>
 800a0ea:	9a07      	ldr	r2, [sp, #28]
 800a0ec:	4654      	mov	r4, sl
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f04f 0c0a 	mov.w	ip, #10
 800a0f4:	4621      	mov	r1, r4
 800a0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0fa:	3b30      	subs	r3, #48	; 0x30
 800a0fc:	2b09      	cmp	r3, #9
 800a0fe:	d94e      	bls.n	800a19e <_svfiprintf_r+0x17e>
 800a100:	b1b0      	cbz	r0, 800a130 <_svfiprintf_r+0x110>
 800a102:	9207      	str	r2, [sp, #28]
 800a104:	e014      	b.n	800a130 <_svfiprintf_r+0x110>
 800a106:	eba0 0308 	sub.w	r3, r0, r8
 800a10a:	fa09 f303 	lsl.w	r3, r9, r3
 800a10e:	4313      	orrs	r3, r2
 800a110:	9304      	str	r3, [sp, #16]
 800a112:	46a2      	mov	sl, r4
 800a114:	e7d2      	b.n	800a0bc <_svfiprintf_r+0x9c>
 800a116:	9b03      	ldr	r3, [sp, #12]
 800a118:	1d19      	adds	r1, r3, #4
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	9103      	str	r1, [sp, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	bfbb      	ittet	lt
 800a122:	425b      	neglt	r3, r3
 800a124:	f042 0202 	orrlt.w	r2, r2, #2
 800a128:	9307      	strge	r3, [sp, #28]
 800a12a:	9307      	strlt	r3, [sp, #28]
 800a12c:	bfb8      	it	lt
 800a12e:	9204      	strlt	r2, [sp, #16]
 800a130:	7823      	ldrb	r3, [r4, #0]
 800a132:	2b2e      	cmp	r3, #46	; 0x2e
 800a134:	d10c      	bne.n	800a150 <_svfiprintf_r+0x130>
 800a136:	7863      	ldrb	r3, [r4, #1]
 800a138:	2b2a      	cmp	r3, #42	; 0x2a
 800a13a:	d135      	bne.n	800a1a8 <_svfiprintf_r+0x188>
 800a13c:	9b03      	ldr	r3, [sp, #12]
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	9203      	str	r2, [sp, #12]
 800a144:	2b00      	cmp	r3, #0
 800a146:	bfb8      	it	lt
 800a148:	f04f 33ff 	movlt.w	r3, #4294967295
 800a14c:	3402      	adds	r4, #2
 800a14e:	9305      	str	r3, [sp, #20]
 800a150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a21c <_svfiprintf_r+0x1fc>
 800a154:	7821      	ldrb	r1, [r4, #0]
 800a156:	2203      	movs	r2, #3
 800a158:	4650      	mov	r0, sl
 800a15a:	f7f6 f841 	bl	80001e0 <memchr>
 800a15e:	b140      	cbz	r0, 800a172 <_svfiprintf_r+0x152>
 800a160:	2340      	movs	r3, #64	; 0x40
 800a162:	eba0 000a 	sub.w	r0, r0, sl
 800a166:	fa03 f000 	lsl.w	r0, r3, r0
 800a16a:	9b04      	ldr	r3, [sp, #16]
 800a16c:	4303      	orrs	r3, r0
 800a16e:	3401      	adds	r4, #1
 800a170:	9304      	str	r3, [sp, #16]
 800a172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a176:	4826      	ldr	r0, [pc, #152]	; (800a210 <_svfiprintf_r+0x1f0>)
 800a178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a17c:	2206      	movs	r2, #6
 800a17e:	f7f6 f82f 	bl	80001e0 <memchr>
 800a182:	2800      	cmp	r0, #0
 800a184:	d038      	beq.n	800a1f8 <_svfiprintf_r+0x1d8>
 800a186:	4b23      	ldr	r3, [pc, #140]	; (800a214 <_svfiprintf_r+0x1f4>)
 800a188:	bb1b      	cbnz	r3, 800a1d2 <_svfiprintf_r+0x1b2>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	3307      	adds	r3, #7
 800a18e:	f023 0307 	bic.w	r3, r3, #7
 800a192:	3308      	adds	r3, #8
 800a194:	9303      	str	r3, [sp, #12]
 800a196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a198:	4433      	add	r3, r6
 800a19a:	9309      	str	r3, [sp, #36]	; 0x24
 800a19c:	e767      	b.n	800a06e <_svfiprintf_r+0x4e>
 800a19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	2001      	movs	r0, #1
 800a1a6:	e7a5      	b.n	800a0f4 <_svfiprintf_r+0xd4>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	3401      	adds	r4, #1
 800a1ac:	9305      	str	r3, [sp, #20]
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	f04f 0c0a 	mov.w	ip, #10
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1ba:	3a30      	subs	r2, #48	; 0x30
 800a1bc:	2a09      	cmp	r2, #9
 800a1be:	d903      	bls.n	800a1c8 <_svfiprintf_r+0x1a8>
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d0c5      	beq.n	800a150 <_svfiprintf_r+0x130>
 800a1c4:	9105      	str	r1, [sp, #20]
 800a1c6:	e7c3      	b.n	800a150 <_svfiprintf_r+0x130>
 800a1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e7f0      	b.n	800a1b4 <_svfiprintf_r+0x194>
 800a1d2:	ab03      	add	r3, sp, #12
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	462a      	mov	r2, r5
 800a1d8:	4b0f      	ldr	r3, [pc, #60]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a1da:	a904      	add	r1, sp, #16
 800a1dc:	4638      	mov	r0, r7
 800a1de:	f7fb fed1 	bl	8005f84 <_printf_float>
 800a1e2:	1c42      	adds	r2, r0, #1
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	d1d6      	bne.n	800a196 <_svfiprintf_r+0x176>
 800a1e8:	89ab      	ldrh	r3, [r5, #12]
 800a1ea:	065b      	lsls	r3, r3, #25
 800a1ec:	f53f af2c 	bmi.w	800a048 <_svfiprintf_r+0x28>
 800a1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f2:	b01d      	add	sp, #116	; 0x74
 800a1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1f8:	ab03      	add	r3, sp, #12
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	462a      	mov	r2, r5
 800a1fe:	4b06      	ldr	r3, [pc, #24]	; (800a218 <_svfiprintf_r+0x1f8>)
 800a200:	a904      	add	r1, sp, #16
 800a202:	4638      	mov	r0, r7
 800a204:	f7fc f962 	bl	80064cc <_printf_i>
 800a208:	e7eb      	b.n	800a1e2 <_svfiprintf_r+0x1c2>
 800a20a:	bf00      	nop
 800a20c:	0800ba9c 	.word	0x0800ba9c
 800a210:	0800baa6 	.word	0x0800baa6
 800a214:	08005f85 	.word	0x08005f85
 800a218:	08009f69 	.word	0x08009f69
 800a21c:	0800baa2 	.word	0x0800baa2

0800a220 <__sfputc_r>:
 800a220:	6893      	ldr	r3, [r2, #8]
 800a222:	3b01      	subs	r3, #1
 800a224:	2b00      	cmp	r3, #0
 800a226:	b410      	push	{r4}
 800a228:	6093      	str	r3, [r2, #8]
 800a22a:	da08      	bge.n	800a23e <__sfputc_r+0x1e>
 800a22c:	6994      	ldr	r4, [r2, #24]
 800a22e:	42a3      	cmp	r3, r4
 800a230:	db01      	blt.n	800a236 <__sfputc_r+0x16>
 800a232:	290a      	cmp	r1, #10
 800a234:	d103      	bne.n	800a23e <__sfputc_r+0x1e>
 800a236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a23a:	f7fd bbe7 	b.w	8007a0c <__swbuf_r>
 800a23e:	6813      	ldr	r3, [r2, #0]
 800a240:	1c58      	adds	r0, r3, #1
 800a242:	6010      	str	r0, [r2, #0]
 800a244:	7019      	strb	r1, [r3, #0]
 800a246:	4608      	mov	r0, r1
 800a248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a24c:	4770      	bx	lr

0800a24e <__sfputs_r>:
 800a24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a250:	4606      	mov	r6, r0
 800a252:	460f      	mov	r7, r1
 800a254:	4614      	mov	r4, r2
 800a256:	18d5      	adds	r5, r2, r3
 800a258:	42ac      	cmp	r4, r5
 800a25a:	d101      	bne.n	800a260 <__sfputs_r+0x12>
 800a25c:	2000      	movs	r0, #0
 800a25e:	e007      	b.n	800a270 <__sfputs_r+0x22>
 800a260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a264:	463a      	mov	r2, r7
 800a266:	4630      	mov	r0, r6
 800a268:	f7ff ffda 	bl	800a220 <__sfputc_r>
 800a26c:	1c43      	adds	r3, r0, #1
 800a26e:	d1f3      	bne.n	800a258 <__sfputs_r+0xa>
 800a270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a274 <_vfiprintf_r>:
 800a274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a278:	460d      	mov	r5, r1
 800a27a:	b09d      	sub	sp, #116	; 0x74
 800a27c:	4614      	mov	r4, r2
 800a27e:	4698      	mov	r8, r3
 800a280:	4606      	mov	r6, r0
 800a282:	b118      	cbz	r0, 800a28c <_vfiprintf_r+0x18>
 800a284:	6983      	ldr	r3, [r0, #24]
 800a286:	b90b      	cbnz	r3, 800a28c <_vfiprintf_r+0x18>
 800a288:	f7fe fc16 	bl	8008ab8 <__sinit>
 800a28c:	4b89      	ldr	r3, [pc, #548]	; (800a4b4 <_vfiprintf_r+0x240>)
 800a28e:	429d      	cmp	r5, r3
 800a290:	d11b      	bne.n	800a2ca <_vfiprintf_r+0x56>
 800a292:	6875      	ldr	r5, [r6, #4]
 800a294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a296:	07d9      	lsls	r1, r3, #31
 800a298:	d405      	bmi.n	800a2a6 <_vfiprintf_r+0x32>
 800a29a:	89ab      	ldrh	r3, [r5, #12]
 800a29c:	059a      	lsls	r2, r3, #22
 800a29e:	d402      	bmi.n	800a2a6 <_vfiprintf_r+0x32>
 800a2a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2a2:	f7ff f81a 	bl	80092da <__retarget_lock_acquire_recursive>
 800a2a6:	89ab      	ldrh	r3, [r5, #12]
 800a2a8:	071b      	lsls	r3, r3, #28
 800a2aa:	d501      	bpl.n	800a2b0 <_vfiprintf_r+0x3c>
 800a2ac:	692b      	ldr	r3, [r5, #16]
 800a2ae:	b9eb      	cbnz	r3, 800a2ec <_vfiprintf_r+0x78>
 800a2b0:	4629      	mov	r1, r5
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7fd fbfc 	bl	8007ab0 <__swsetup_r>
 800a2b8:	b1c0      	cbz	r0, 800a2ec <_vfiprintf_r+0x78>
 800a2ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2bc:	07dc      	lsls	r4, r3, #31
 800a2be:	d50e      	bpl.n	800a2de <_vfiprintf_r+0x6a>
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	b01d      	add	sp, #116	; 0x74
 800a2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ca:	4b7b      	ldr	r3, [pc, #492]	; (800a4b8 <_vfiprintf_r+0x244>)
 800a2cc:	429d      	cmp	r5, r3
 800a2ce:	d101      	bne.n	800a2d4 <_vfiprintf_r+0x60>
 800a2d0:	68b5      	ldr	r5, [r6, #8]
 800a2d2:	e7df      	b.n	800a294 <_vfiprintf_r+0x20>
 800a2d4:	4b79      	ldr	r3, [pc, #484]	; (800a4bc <_vfiprintf_r+0x248>)
 800a2d6:	429d      	cmp	r5, r3
 800a2d8:	bf08      	it	eq
 800a2da:	68f5      	ldreq	r5, [r6, #12]
 800a2dc:	e7da      	b.n	800a294 <_vfiprintf_r+0x20>
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	0598      	lsls	r0, r3, #22
 800a2e2:	d4ed      	bmi.n	800a2c0 <_vfiprintf_r+0x4c>
 800a2e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2e6:	f7fe fff9 	bl	80092dc <__retarget_lock_release_recursive>
 800a2ea:	e7e9      	b.n	800a2c0 <_vfiprintf_r+0x4c>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2fa:	2330      	movs	r3, #48	; 0x30
 800a2fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a4c0 <_vfiprintf_r+0x24c>
 800a300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a304:	f04f 0901 	mov.w	r9, #1
 800a308:	4623      	mov	r3, r4
 800a30a:	469a      	mov	sl, r3
 800a30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a310:	b10a      	cbz	r2, 800a316 <_vfiprintf_r+0xa2>
 800a312:	2a25      	cmp	r2, #37	; 0x25
 800a314:	d1f9      	bne.n	800a30a <_vfiprintf_r+0x96>
 800a316:	ebba 0b04 	subs.w	fp, sl, r4
 800a31a:	d00b      	beq.n	800a334 <_vfiprintf_r+0xc0>
 800a31c:	465b      	mov	r3, fp
 800a31e:	4622      	mov	r2, r4
 800a320:	4629      	mov	r1, r5
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ff93 	bl	800a24e <__sfputs_r>
 800a328:	3001      	adds	r0, #1
 800a32a:	f000 80aa 	beq.w	800a482 <_vfiprintf_r+0x20e>
 800a32e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a330:	445a      	add	r2, fp
 800a332:	9209      	str	r2, [sp, #36]	; 0x24
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80a2 	beq.w	800a482 <_vfiprintf_r+0x20e>
 800a33e:	2300      	movs	r3, #0
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9307      	str	r3, [sp, #28]
 800a350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a354:	931a      	str	r3, [sp, #104]	; 0x68
 800a356:	4654      	mov	r4, sl
 800a358:	2205      	movs	r2, #5
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	4858      	ldr	r0, [pc, #352]	; (800a4c0 <_vfiprintf_r+0x24c>)
 800a360:	f7f5 ff3e 	bl	80001e0 <memchr>
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	b9d8      	cbnz	r0, 800a3a0 <_vfiprintf_r+0x12c>
 800a368:	06d1      	lsls	r1, r2, #27
 800a36a:	bf44      	itt	mi
 800a36c:	2320      	movmi	r3, #32
 800a36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a372:	0713      	lsls	r3, r2, #28
 800a374:	bf44      	itt	mi
 800a376:	232b      	movmi	r3, #43	; 0x2b
 800a378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a37c:	f89a 3000 	ldrb.w	r3, [sl]
 800a380:	2b2a      	cmp	r3, #42	; 0x2a
 800a382:	d015      	beq.n	800a3b0 <_vfiprintf_r+0x13c>
 800a384:	9a07      	ldr	r2, [sp, #28]
 800a386:	4654      	mov	r4, sl
 800a388:	2000      	movs	r0, #0
 800a38a:	f04f 0c0a 	mov.w	ip, #10
 800a38e:	4621      	mov	r1, r4
 800a390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a394:	3b30      	subs	r3, #48	; 0x30
 800a396:	2b09      	cmp	r3, #9
 800a398:	d94e      	bls.n	800a438 <_vfiprintf_r+0x1c4>
 800a39a:	b1b0      	cbz	r0, 800a3ca <_vfiprintf_r+0x156>
 800a39c:	9207      	str	r2, [sp, #28]
 800a39e:	e014      	b.n	800a3ca <_vfiprintf_r+0x156>
 800a3a0:	eba0 0308 	sub.w	r3, r0, r8
 800a3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	46a2      	mov	sl, r4
 800a3ae:	e7d2      	b.n	800a356 <_vfiprintf_r+0xe2>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d19      	adds	r1, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9103      	str	r1, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfbb      	ittet	lt
 800a3bc:	425b      	neglt	r3, r3
 800a3be:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c2:	9307      	strge	r3, [sp, #28]
 800a3c4:	9307      	strlt	r3, [sp, #28]
 800a3c6:	bfb8      	it	lt
 800a3c8:	9204      	strlt	r2, [sp, #16]
 800a3ca:	7823      	ldrb	r3, [r4, #0]
 800a3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a3ce:	d10c      	bne.n	800a3ea <_vfiprintf_r+0x176>
 800a3d0:	7863      	ldrb	r3, [r4, #1]
 800a3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a3d4:	d135      	bne.n	800a442 <_vfiprintf_r+0x1ce>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9203      	str	r2, [sp, #12]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	bfb8      	it	lt
 800a3e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a3e6:	3402      	adds	r4, #2
 800a3e8:	9305      	str	r3, [sp, #20]
 800a3ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a4d0 <_vfiprintf_r+0x25c>
 800a3ee:	7821      	ldrb	r1, [r4, #0]
 800a3f0:	2203      	movs	r2, #3
 800a3f2:	4650      	mov	r0, sl
 800a3f4:	f7f5 fef4 	bl	80001e0 <memchr>
 800a3f8:	b140      	cbz	r0, 800a40c <_vfiprintf_r+0x198>
 800a3fa:	2340      	movs	r3, #64	; 0x40
 800a3fc:	eba0 000a 	sub.w	r0, r0, sl
 800a400:	fa03 f000 	lsl.w	r0, r3, r0
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	4303      	orrs	r3, r0
 800a408:	3401      	adds	r4, #1
 800a40a:	9304      	str	r3, [sp, #16]
 800a40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a410:	482c      	ldr	r0, [pc, #176]	; (800a4c4 <_vfiprintf_r+0x250>)
 800a412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a416:	2206      	movs	r2, #6
 800a418:	f7f5 fee2 	bl	80001e0 <memchr>
 800a41c:	2800      	cmp	r0, #0
 800a41e:	d03f      	beq.n	800a4a0 <_vfiprintf_r+0x22c>
 800a420:	4b29      	ldr	r3, [pc, #164]	; (800a4c8 <_vfiprintf_r+0x254>)
 800a422:	bb1b      	cbnz	r3, 800a46c <_vfiprintf_r+0x1f8>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	3307      	adds	r3, #7
 800a428:	f023 0307 	bic.w	r3, r3, #7
 800a42c:	3308      	adds	r3, #8
 800a42e:	9303      	str	r3, [sp, #12]
 800a430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a432:	443b      	add	r3, r7
 800a434:	9309      	str	r3, [sp, #36]	; 0x24
 800a436:	e767      	b.n	800a308 <_vfiprintf_r+0x94>
 800a438:	fb0c 3202 	mla	r2, ip, r2, r3
 800a43c:	460c      	mov	r4, r1
 800a43e:	2001      	movs	r0, #1
 800a440:	e7a5      	b.n	800a38e <_vfiprintf_r+0x11a>
 800a442:	2300      	movs	r3, #0
 800a444:	3401      	adds	r4, #1
 800a446:	9305      	str	r3, [sp, #20]
 800a448:	4619      	mov	r1, r3
 800a44a:	f04f 0c0a 	mov.w	ip, #10
 800a44e:	4620      	mov	r0, r4
 800a450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a454:	3a30      	subs	r2, #48	; 0x30
 800a456:	2a09      	cmp	r2, #9
 800a458:	d903      	bls.n	800a462 <_vfiprintf_r+0x1ee>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0c5      	beq.n	800a3ea <_vfiprintf_r+0x176>
 800a45e:	9105      	str	r1, [sp, #20]
 800a460:	e7c3      	b.n	800a3ea <_vfiprintf_r+0x176>
 800a462:	fb0c 2101 	mla	r1, ip, r1, r2
 800a466:	4604      	mov	r4, r0
 800a468:	2301      	movs	r3, #1
 800a46a:	e7f0      	b.n	800a44e <_vfiprintf_r+0x1da>
 800a46c:	ab03      	add	r3, sp, #12
 800a46e:	9300      	str	r3, [sp, #0]
 800a470:	462a      	mov	r2, r5
 800a472:	4b16      	ldr	r3, [pc, #88]	; (800a4cc <_vfiprintf_r+0x258>)
 800a474:	a904      	add	r1, sp, #16
 800a476:	4630      	mov	r0, r6
 800a478:	f7fb fd84 	bl	8005f84 <_printf_float>
 800a47c:	4607      	mov	r7, r0
 800a47e:	1c78      	adds	r0, r7, #1
 800a480:	d1d6      	bne.n	800a430 <_vfiprintf_r+0x1bc>
 800a482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a484:	07d9      	lsls	r1, r3, #31
 800a486:	d405      	bmi.n	800a494 <_vfiprintf_r+0x220>
 800a488:	89ab      	ldrh	r3, [r5, #12]
 800a48a:	059a      	lsls	r2, r3, #22
 800a48c:	d402      	bmi.n	800a494 <_vfiprintf_r+0x220>
 800a48e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a490:	f7fe ff24 	bl	80092dc <__retarget_lock_release_recursive>
 800a494:	89ab      	ldrh	r3, [r5, #12]
 800a496:	065b      	lsls	r3, r3, #25
 800a498:	f53f af12 	bmi.w	800a2c0 <_vfiprintf_r+0x4c>
 800a49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a49e:	e711      	b.n	800a2c4 <_vfiprintf_r+0x50>
 800a4a0:	ab03      	add	r3, sp, #12
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	462a      	mov	r2, r5
 800a4a6:	4b09      	ldr	r3, [pc, #36]	; (800a4cc <_vfiprintf_r+0x258>)
 800a4a8:	a904      	add	r1, sp, #16
 800a4aa:	4630      	mov	r0, r6
 800a4ac:	f7fc f80e 	bl	80064cc <_printf_i>
 800a4b0:	e7e4      	b.n	800a47c <_vfiprintf_r+0x208>
 800a4b2:	bf00      	nop
 800a4b4:	0800b884 	.word	0x0800b884
 800a4b8:	0800b8a4 	.word	0x0800b8a4
 800a4bc:	0800b864 	.word	0x0800b864
 800a4c0:	0800ba9c 	.word	0x0800ba9c
 800a4c4:	0800baa6 	.word	0x0800baa6
 800a4c8:	08005f85 	.word	0x08005f85
 800a4cc:	0800a24f 	.word	0x0800a24f
 800a4d0:	0800baa2 	.word	0x0800baa2
 800a4d4:	00000000 	.word	0x00000000

0800a4d8 <nan>:
 800a4d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a4e0 <nan+0x8>
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	00000000 	.word	0x00000000
 800a4e4:	7ff80000 	.word	0x7ff80000

0800a4e8 <_sbrk_r>:
 800a4e8:	b538      	push	{r3, r4, r5, lr}
 800a4ea:	4d06      	ldr	r5, [pc, #24]	; (800a504 <_sbrk_r+0x1c>)
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	4604      	mov	r4, r0
 800a4f0:	4608      	mov	r0, r1
 800a4f2:	602b      	str	r3, [r5, #0]
 800a4f4:	f7f7 fdd0 	bl	8002098 <_sbrk>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_sbrk_r+0x1a>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_sbrk_r+0x1a>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20000660 	.word	0x20000660

0800a508 <__sread>:
 800a508:	b510      	push	{r4, lr}
 800a50a:	460c      	mov	r4, r1
 800a50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a510:	f000 f93a 	bl	800a788 <_read_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	bfab      	itete	ge
 800a518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a51a:	89a3      	ldrhlt	r3, [r4, #12]
 800a51c:	181b      	addge	r3, r3, r0
 800a51e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a522:	bfac      	ite	ge
 800a524:	6563      	strge	r3, [r4, #84]	; 0x54
 800a526:	81a3      	strhlt	r3, [r4, #12]
 800a528:	bd10      	pop	{r4, pc}

0800a52a <__swrite>:
 800a52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a52e:	461f      	mov	r7, r3
 800a530:	898b      	ldrh	r3, [r1, #12]
 800a532:	05db      	lsls	r3, r3, #23
 800a534:	4605      	mov	r5, r0
 800a536:	460c      	mov	r4, r1
 800a538:	4616      	mov	r6, r2
 800a53a:	d505      	bpl.n	800a548 <__swrite+0x1e>
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	2302      	movs	r3, #2
 800a542:	2200      	movs	r2, #0
 800a544:	f000 f8b8 	bl	800a6b8 <_lseek_r>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a552:	81a3      	strh	r3, [r4, #12]
 800a554:	4632      	mov	r2, r6
 800a556:	463b      	mov	r3, r7
 800a558:	4628      	mov	r0, r5
 800a55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	f000 b837 	b.w	800a5d0 <_write_r>

0800a562 <__sseek>:
 800a562:	b510      	push	{r4, lr}
 800a564:	460c      	mov	r4, r1
 800a566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56a:	f000 f8a5 	bl	800a6b8 <_lseek_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	bf15      	itete	ne
 800a574:	6560      	strne	r0, [r4, #84]	; 0x54
 800a576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a57a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a57e:	81a3      	strheq	r3, [r4, #12]
 800a580:	bf18      	it	ne
 800a582:	81a3      	strhne	r3, [r4, #12]
 800a584:	bd10      	pop	{r4, pc}

0800a586 <__sclose>:
 800a586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a58a:	f000 b851 	b.w	800a630 <_close_r>

0800a58e <strncmp>:
 800a58e:	b510      	push	{r4, lr}
 800a590:	b17a      	cbz	r2, 800a5b2 <strncmp+0x24>
 800a592:	4603      	mov	r3, r0
 800a594:	3901      	subs	r1, #1
 800a596:	1884      	adds	r4, r0, r2
 800a598:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a59c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a5a0:	4290      	cmp	r0, r2
 800a5a2:	d101      	bne.n	800a5a8 <strncmp+0x1a>
 800a5a4:	42a3      	cmp	r3, r4
 800a5a6:	d101      	bne.n	800a5ac <strncmp+0x1e>
 800a5a8:	1a80      	subs	r0, r0, r2
 800a5aa:	bd10      	pop	{r4, pc}
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d1f3      	bne.n	800a598 <strncmp+0xa>
 800a5b0:	e7fa      	b.n	800a5a8 <strncmp+0x1a>
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	e7f9      	b.n	800a5aa <strncmp+0x1c>

0800a5b6 <__ascii_wctomb>:
 800a5b6:	b149      	cbz	r1, 800a5cc <__ascii_wctomb+0x16>
 800a5b8:	2aff      	cmp	r2, #255	; 0xff
 800a5ba:	bf85      	ittet	hi
 800a5bc:	238a      	movhi	r3, #138	; 0x8a
 800a5be:	6003      	strhi	r3, [r0, #0]
 800a5c0:	700a      	strbls	r2, [r1, #0]
 800a5c2:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5c6:	bf98      	it	ls
 800a5c8:	2001      	movls	r0, #1
 800a5ca:	4770      	bx	lr
 800a5cc:	4608      	mov	r0, r1
 800a5ce:	4770      	bx	lr

0800a5d0 <_write_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d07      	ldr	r5, [pc, #28]	; (800a5f0 <_write_r+0x20>)
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	4608      	mov	r0, r1
 800a5d8:	4611      	mov	r1, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f7f7 fd09 	bl	8001ff6 <_write>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_write_r+0x1e>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_write_r+0x1e>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20000660 	.word	0x20000660

0800a5f4 <__assert_func>:
 800a5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4b09      	ldr	r3, [pc, #36]	; (800a620 <__assert_func+0x2c>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4605      	mov	r5, r0
 800a600:	68d8      	ldr	r0, [r3, #12]
 800a602:	b14c      	cbz	r4, 800a618 <__assert_func+0x24>
 800a604:	4b07      	ldr	r3, [pc, #28]	; (800a624 <__assert_func+0x30>)
 800a606:	9100      	str	r1, [sp, #0]
 800a608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a60c:	4906      	ldr	r1, [pc, #24]	; (800a628 <__assert_func+0x34>)
 800a60e:	462b      	mov	r3, r5
 800a610:	f000 f81e 	bl	800a650 <fiprintf>
 800a614:	f000 f8ca 	bl	800a7ac <abort>
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <__assert_func+0x38>)
 800a61a:	461c      	mov	r4, r3
 800a61c:	e7f3      	b.n	800a606 <__assert_func+0x12>
 800a61e:	bf00      	nop
 800a620:	20000294 	.word	0x20000294
 800a624:	0800baad 	.word	0x0800baad
 800a628:	0800baba 	.word	0x0800baba
 800a62c:	0800bae8 	.word	0x0800bae8

0800a630 <_close_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d06      	ldr	r5, [pc, #24]	; (800a64c <_close_r+0x1c>)
 800a634:	2300      	movs	r3, #0
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	602b      	str	r3, [r5, #0]
 800a63c:	f7f7 fcf7 	bl	800202e <_close>
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d102      	bne.n	800a64a <_close_r+0x1a>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	b103      	cbz	r3, 800a64a <_close_r+0x1a>
 800a648:	6023      	str	r3, [r4, #0]
 800a64a:	bd38      	pop	{r3, r4, r5, pc}
 800a64c:	20000660 	.word	0x20000660

0800a650 <fiprintf>:
 800a650:	b40e      	push	{r1, r2, r3}
 800a652:	b503      	push	{r0, r1, lr}
 800a654:	4601      	mov	r1, r0
 800a656:	ab03      	add	r3, sp, #12
 800a658:	4805      	ldr	r0, [pc, #20]	; (800a670 <fiprintf+0x20>)
 800a65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a65e:	6800      	ldr	r0, [r0, #0]
 800a660:	9301      	str	r3, [sp, #4]
 800a662:	f7ff fe07 	bl	800a274 <_vfiprintf_r>
 800a666:	b002      	add	sp, #8
 800a668:	f85d eb04 	ldr.w	lr, [sp], #4
 800a66c:	b003      	add	sp, #12
 800a66e:	4770      	bx	lr
 800a670:	20000294 	.word	0x20000294

0800a674 <_fstat_r>:
 800a674:	b538      	push	{r3, r4, r5, lr}
 800a676:	4d07      	ldr	r5, [pc, #28]	; (800a694 <_fstat_r+0x20>)
 800a678:	2300      	movs	r3, #0
 800a67a:	4604      	mov	r4, r0
 800a67c:	4608      	mov	r0, r1
 800a67e:	4611      	mov	r1, r2
 800a680:	602b      	str	r3, [r5, #0]
 800a682:	f7f7 fce0 	bl	8002046 <_fstat>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d102      	bne.n	800a690 <_fstat_r+0x1c>
 800a68a:	682b      	ldr	r3, [r5, #0]
 800a68c:	b103      	cbz	r3, 800a690 <_fstat_r+0x1c>
 800a68e:	6023      	str	r3, [r4, #0]
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20000660 	.word	0x20000660

0800a698 <_isatty_r>:
 800a698:	b538      	push	{r3, r4, r5, lr}
 800a69a:	4d06      	ldr	r5, [pc, #24]	; (800a6b4 <_isatty_r+0x1c>)
 800a69c:	2300      	movs	r3, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	4608      	mov	r0, r1
 800a6a2:	602b      	str	r3, [r5, #0]
 800a6a4:	f7f7 fcdf 	bl	8002066 <_isatty>
 800a6a8:	1c43      	adds	r3, r0, #1
 800a6aa:	d102      	bne.n	800a6b2 <_isatty_r+0x1a>
 800a6ac:	682b      	ldr	r3, [r5, #0]
 800a6ae:	b103      	cbz	r3, 800a6b2 <_isatty_r+0x1a>
 800a6b0:	6023      	str	r3, [r4, #0]
 800a6b2:	bd38      	pop	{r3, r4, r5, pc}
 800a6b4:	20000660 	.word	0x20000660

0800a6b8 <_lseek_r>:
 800a6b8:	b538      	push	{r3, r4, r5, lr}
 800a6ba:	4d07      	ldr	r5, [pc, #28]	; (800a6d8 <_lseek_r+0x20>)
 800a6bc:	4604      	mov	r4, r0
 800a6be:	4608      	mov	r0, r1
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	602a      	str	r2, [r5, #0]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f7f7 fcd8 	bl	800207c <_lseek>
 800a6cc:	1c43      	adds	r3, r0, #1
 800a6ce:	d102      	bne.n	800a6d6 <_lseek_r+0x1e>
 800a6d0:	682b      	ldr	r3, [r5, #0]
 800a6d2:	b103      	cbz	r3, 800a6d6 <_lseek_r+0x1e>
 800a6d4:	6023      	str	r3, [r4, #0]
 800a6d6:	bd38      	pop	{r3, r4, r5, pc}
 800a6d8:	20000660 	.word	0x20000660

0800a6dc <memmove>:
 800a6dc:	4288      	cmp	r0, r1
 800a6de:	b510      	push	{r4, lr}
 800a6e0:	eb01 0402 	add.w	r4, r1, r2
 800a6e4:	d902      	bls.n	800a6ec <memmove+0x10>
 800a6e6:	4284      	cmp	r4, r0
 800a6e8:	4623      	mov	r3, r4
 800a6ea:	d807      	bhi.n	800a6fc <memmove+0x20>
 800a6ec:	1e43      	subs	r3, r0, #1
 800a6ee:	42a1      	cmp	r1, r4
 800a6f0:	d008      	beq.n	800a704 <memmove+0x28>
 800a6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6fa:	e7f8      	b.n	800a6ee <memmove+0x12>
 800a6fc:	4402      	add	r2, r0
 800a6fe:	4601      	mov	r1, r0
 800a700:	428a      	cmp	r2, r1
 800a702:	d100      	bne.n	800a706 <memmove+0x2a>
 800a704:	bd10      	pop	{r4, pc}
 800a706:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a70a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70e:	e7f7      	b.n	800a700 <memmove+0x24>

0800a710 <__malloc_lock>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__malloc_lock+0x8>)
 800a712:	f7fe bde2 	b.w	80092da <__retarget_lock_acquire_recursive>
 800a716:	bf00      	nop
 800a718:	20000654 	.word	0x20000654

0800a71c <__malloc_unlock>:
 800a71c:	4801      	ldr	r0, [pc, #4]	; (800a724 <__malloc_unlock+0x8>)
 800a71e:	f7fe bddd 	b.w	80092dc <__retarget_lock_release_recursive>
 800a722:	bf00      	nop
 800a724:	20000654 	.word	0x20000654

0800a728 <_realloc_r>:
 800a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72c:	4680      	mov	r8, r0
 800a72e:	4614      	mov	r4, r2
 800a730:	460e      	mov	r6, r1
 800a732:	b921      	cbnz	r1, 800a73e <_realloc_r+0x16>
 800a734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a738:	4611      	mov	r1, r2
 800a73a:	f7ff bba1 	b.w	8009e80 <_malloc_r>
 800a73e:	b92a      	cbnz	r2, 800a74c <_realloc_r+0x24>
 800a740:	f7ff fb32 	bl	8009da8 <_free_r>
 800a744:	4625      	mov	r5, r4
 800a746:	4628      	mov	r0, r5
 800a748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a74c:	f000 f835 	bl	800a7ba <_malloc_usable_size_r>
 800a750:	4284      	cmp	r4, r0
 800a752:	4607      	mov	r7, r0
 800a754:	d802      	bhi.n	800a75c <_realloc_r+0x34>
 800a756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a75a:	d812      	bhi.n	800a782 <_realloc_r+0x5a>
 800a75c:	4621      	mov	r1, r4
 800a75e:	4640      	mov	r0, r8
 800a760:	f7ff fb8e 	bl	8009e80 <_malloc_r>
 800a764:	4605      	mov	r5, r0
 800a766:	2800      	cmp	r0, #0
 800a768:	d0ed      	beq.n	800a746 <_realloc_r+0x1e>
 800a76a:	42bc      	cmp	r4, r7
 800a76c:	4622      	mov	r2, r4
 800a76e:	4631      	mov	r1, r6
 800a770:	bf28      	it	cs
 800a772:	463a      	movcs	r2, r7
 800a774:	f7fe fe32 	bl	80093dc <memcpy>
 800a778:	4631      	mov	r1, r6
 800a77a:	4640      	mov	r0, r8
 800a77c:	f7ff fb14 	bl	8009da8 <_free_r>
 800a780:	e7e1      	b.n	800a746 <_realloc_r+0x1e>
 800a782:	4635      	mov	r5, r6
 800a784:	e7df      	b.n	800a746 <_realloc_r+0x1e>
	...

0800a788 <_read_r>:
 800a788:	b538      	push	{r3, r4, r5, lr}
 800a78a:	4d07      	ldr	r5, [pc, #28]	; (800a7a8 <_read_r+0x20>)
 800a78c:	4604      	mov	r4, r0
 800a78e:	4608      	mov	r0, r1
 800a790:	4611      	mov	r1, r2
 800a792:	2200      	movs	r2, #0
 800a794:	602a      	str	r2, [r5, #0]
 800a796:	461a      	mov	r2, r3
 800a798:	f7f7 fc10 	bl	8001fbc <_read>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_read_r+0x1e>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_read_r+0x1e>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	20000660 	.word	0x20000660

0800a7ac <abort>:
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	2006      	movs	r0, #6
 800a7b0:	f000 f834 	bl	800a81c <raise>
 800a7b4:	2001      	movs	r0, #1
 800a7b6:	f7f7 fbf7 	bl	8001fa8 <_exit>

0800a7ba <_malloc_usable_size_r>:
 800a7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7be:	1f18      	subs	r0, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	bfbc      	itt	lt
 800a7c4:	580b      	ldrlt	r3, [r1, r0]
 800a7c6:	18c0      	addlt	r0, r0, r3
 800a7c8:	4770      	bx	lr

0800a7ca <_raise_r>:
 800a7ca:	291f      	cmp	r1, #31
 800a7cc:	b538      	push	{r3, r4, r5, lr}
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	460d      	mov	r5, r1
 800a7d2:	d904      	bls.n	800a7de <_raise_r+0x14>
 800a7d4:	2316      	movs	r3, #22
 800a7d6:	6003      	str	r3, [r0, #0]
 800a7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7dc:	bd38      	pop	{r3, r4, r5, pc}
 800a7de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7e0:	b112      	cbz	r2, 800a7e8 <_raise_r+0x1e>
 800a7e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7e6:	b94b      	cbnz	r3, 800a7fc <_raise_r+0x32>
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 f831 	bl	800a850 <_getpid_r>
 800a7ee:	462a      	mov	r2, r5
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7f8:	f000 b818 	b.w	800a82c <_kill_r>
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d00a      	beq.n	800a816 <_raise_r+0x4c>
 800a800:	1c59      	adds	r1, r3, #1
 800a802:	d103      	bne.n	800a80c <_raise_r+0x42>
 800a804:	2316      	movs	r3, #22
 800a806:	6003      	str	r3, [r0, #0]
 800a808:	2001      	movs	r0, #1
 800a80a:	e7e7      	b.n	800a7dc <_raise_r+0x12>
 800a80c:	2400      	movs	r4, #0
 800a80e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a812:	4628      	mov	r0, r5
 800a814:	4798      	blx	r3
 800a816:	2000      	movs	r0, #0
 800a818:	e7e0      	b.n	800a7dc <_raise_r+0x12>
	...

0800a81c <raise>:
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <raise+0xc>)
 800a81e:	4601      	mov	r1, r0
 800a820:	6818      	ldr	r0, [r3, #0]
 800a822:	f7ff bfd2 	b.w	800a7ca <_raise_r>
 800a826:	bf00      	nop
 800a828:	20000294 	.word	0x20000294

0800a82c <_kill_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	; (800a84c <_kill_r+0x20>)
 800a830:	2300      	movs	r3, #0
 800a832:	4604      	mov	r4, r0
 800a834:	4608      	mov	r0, r1
 800a836:	4611      	mov	r1, r2
 800a838:	602b      	str	r3, [r5, #0]
 800a83a:	f7f7 fba5 	bl	8001f88 <_kill>
 800a83e:	1c43      	adds	r3, r0, #1
 800a840:	d102      	bne.n	800a848 <_kill_r+0x1c>
 800a842:	682b      	ldr	r3, [r5, #0]
 800a844:	b103      	cbz	r3, 800a848 <_kill_r+0x1c>
 800a846:	6023      	str	r3, [r4, #0]
 800a848:	bd38      	pop	{r3, r4, r5, pc}
 800a84a:	bf00      	nop
 800a84c:	20000660 	.word	0x20000660

0800a850 <_getpid_r>:
 800a850:	f7f7 bb92 	b.w	8001f78 <_getpid>

0800a854 <_init>:
 800a854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a856:	bf00      	nop
 800a858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85a:	bc08      	pop	{r3}
 800a85c:	469e      	mov	lr, r3
 800a85e:	4770      	bx	lr

0800a860 <_fini>:
 800a860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a862:	bf00      	nop
 800a864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a866:	bc08      	pop	{r3}
 800a868:	469e      	mov	lr, r3
 800a86a:	4770      	bx	lr
