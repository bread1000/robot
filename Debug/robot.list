
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b24c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001274  0800b3e0  0800b3e0  0001b3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c654  0800c654  00020468  2**0
                  CONTENTS
  4 .ARM          00000008  0800c654  0800c654  0001c654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c65c  0800c65c  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c660  0800c660  0001c660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  0800c664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000468  0800cacc  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  0800cacc  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160af  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003003  00000000  00000000  00036547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00039550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  0003a558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249be  00000000  00000000  0003b418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001456b  00000000  00000000  0005fdd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dac48  00000000  00000000  00074341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ef89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000578c  00000000  00000000  0014efdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3c4 	.word	0x0800b3c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0800b3c4 	.word	0x0800b3c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ff2:	463b      	mov	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ffe:	4b21      	ldr	r3, [pc, #132]	; (8001084 <MX_ADC3_Init+0x98>)
 8001000:	4a21      	ldr	r2, [pc, #132]	; (8001088 <MX_ADC3_Init+0x9c>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001004:	4b1f      	ldr	r3, [pc, #124]	; (8001084 <MX_ADC3_Init+0x98>)
 8001006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800100a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800100c:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_ADC3_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001012:	4b1c      	ldr	r3, [pc, #112]	; (8001084 <MX_ADC3_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001018:	4b1a      	ldr	r3, [pc, #104]	; (8001084 <MX_ADC3_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800101e:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_ADC3_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_ADC3_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800102c:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_ADC3_Init+0x98>)
 800102e:	4a17      	ldr	r2, [pc, #92]	; (800108c <MX_ADC3_Init+0xa0>)
 8001030:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <MX_ADC3_Init+0x98>)
 800103a:	2201      	movs	r2, #1
 800103c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <MX_ADC3_Init+0x98>)
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <MX_ADC3_Init+0x98>)
 8001048:	2201      	movs	r2, #1
 800104a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800104c:	480d      	ldr	r0, [pc, #52]	; (8001084 <MX_ADC3_Init+0x98>)
 800104e:	f001 fc0d 	bl	800286c <HAL_ADC_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001058:	f000 fdac 	bl	8001bb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800105c:	230b      	movs	r3, #11
 800105e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001064:	2307      	movs	r3, #7
 8001066:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001068:	463b      	mov	r3, r7
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_ADC3_Init+0x98>)
 800106e:	f001 fd6f 	bl	8002b50 <HAL_ADC_ConfigChannel>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001078:	f000 fd9c 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000524 	.word	0x20000524
 8001088:	40012200 	.word	0x40012200
 800108c:	0f000001 	.word	0x0f000001

08001090 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a2f      	ldr	r2, [pc, #188]	; (800116c <HAL_ADC_MspInit+0xdc>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d158      	bne.n	8001164 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	4b2e      	ldr	r3, [pc, #184]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a2d      	ldr	r2, [pc, #180]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b27      	ldr	r3, [pc, #156]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a26      	ldr	r2, [pc, #152]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010ea:	2302      	movs	r3, #2
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ee:	2303      	movs	r3, #3
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	481d      	ldr	r0, [pc, #116]	; (8001174 <HAL_ADC_MspInit+0xe4>)
 80010fe:	f002 fd71 	bl	8003be4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8001102:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001104:	4a1d      	ldr	r2, [pc, #116]	; (800117c <HAL_ADC_MspInit+0xec>)
 8001106:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001108:	4b1b      	ldr	r3, [pc, #108]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800110a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800110e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001110:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001116:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800111e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001122:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800112a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800112e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001132:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800113a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800113c:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800113e:	2200      	movs	r2, #0
 8001140:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001142:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001144:	2200      	movs	r2, #0
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800114a:	f002 f949 	bl	80033e0 <HAL_DMA_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001154:	f000 fd2e 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 800115c:	639a      	str	r2, [r3, #56]	; 0x38
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <HAL_ADC_MspInit+0xe8>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40012200 	.word	0x40012200
 8001170:	40023800 	.word	0x40023800
 8001174:	40020800 	.word	0x40020800
 8001178:	200004c4 	.word	0x200004c4
 800117c:	40026410 	.word	0x40026410

08001180 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001186:	463b      	mov	r3, r7
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_DAC_Init+0x4c>)
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <MX_DAC_Init+0x50>)
 8001192:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <MX_DAC_Init+0x4c>)
 8001196:	f002 f88c 	bl	80032b2 <HAL_DAC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011a0:	f000 fd08 	bl	8001bb4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_DAC_Init+0x4c>)
 80011b4:	f002 f8c4 	bl	8003340 <HAL_DAC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011be:	f000 fcf9 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000056c 	.word	0x2000056c
 80011d0:	40007400 	.word	0x40007400

080011d4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_DAC_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d127      	bne.n	8001246 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_DAC_MspInit+0x80>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_DAC_MspInit+0x80>)
 8001200:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_DAC_MspInit+0x80>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_DAC_MspInit+0x80>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_DAC_MspInit+0x84>)
 8001242:	f002 fccf 	bl	8003be4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40007400 	.word	0x40007400
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	607b      	str	r3, [r7, #4]
 8001266:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_DMA_Init+0x3c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <MX_DMA_Init+0x3c>)
 800126c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2038      	movs	r0, #56	; 0x38
 8001284:	f001 ffdf 	bl	8003246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001288:	2038      	movs	r0, #56	; 0x38
 800128a:	f001 fff8 	bl	800327e <HAL_NVIC_EnableIRQ>

}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800

0800129c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 0314 	add.w	r3, r7, #20
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b49      	ldr	r3, [pc, #292]	; (80013dc <MX_GPIO_Init+0x140>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a48      	ldr	r2, [pc, #288]	; (80013dc <MX_GPIO_Init+0x140>)
 80012bc:	f043 0310 	orr.w	r3, r3, #16
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b46      	ldr	r3, [pc, #280]	; (80013dc <MX_GPIO_Init+0x140>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <MX_GPIO_Init+0x140>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a41      	ldr	r2, [pc, #260]	; (80013dc <MX_GPIO_Init+0x140>)
 80012d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b3f      	ldr	r3, [pc, #252]	; (80013dc <MX_GPIO_Init+0x140>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MX_GPIO_Init+0x140>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <MX_GPIO_Init+0x140>)
 80012f4:	f043 0304 	orr.w	r3, r3, #4
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_GPIO_Init+0x140>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0304 	and.w	r3, r3, #4
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b34      	ldr	r3, [pc, #208]	; (80013dc <MX_GPIO_Init+0x140>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a33      	ldr	r2, [pc, #204]	; (80013dc <MX_GPIO_Init+0x140>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <MX_GPIO_Init+0x140>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <MX_GPIO_Init+0x140>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <MX_GPIO_Init+0x140>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b2a      	ldr	r3, [pc, #168]	; (80013dc <MX_GPIO_Init+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	f248 0181 	movw	r1, #32897	; 0x8081
 8001344:	4826      	ldr	r0, [pc, #152]	; (80013e0 <MX_GPIO_Init+0x144>)
 8001346:	f002 fe01 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800134a:	2200      	movs	r2, #0
 800134c:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001350:	4824      	ldr	r0, [pc, #144]	; (80013e4 <MX_GPIO_Init+0x148>)
 8001352:	f002 fdfb 	bl	8003f4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 7140 	mov.w	r1, #768	; 0x300
 800135c:	4822      	ldr	r0, [pc, #136]	; (80013e8 <MX_GPIO_Init+0x14c>)
 800135e:	f002 fdf5 	bl	8003f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = rec_right_Pin|rec_left_Pin;
 8001362:	2330      	movs	r3, #48	; 0x30
 8001364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	481d      	ldr	r0, [pc, #116]	; (80013ec <MX_GPIO_Init+0x150>)
 8001376:	f002 fc35 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 800137a:	f248 0381 	movw	r3, #32897	; 0x8081
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4813      	ldr	r0, [pc, #76]	; (80013e0 <MX_GPIO_Init+0x144>)
 8001394:	f002 fc26 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001398:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 800139c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_GPIO_Init+0x148>)
 80013b2:	f002 fc17 	bl	8003be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	; (80013e8 <MX_GPIO_Init+0x14c>)
 80013d0:	f002 fc08 	bl	8003be4 <HAL_GPIO_Init>

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	; 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020c00 	.word	0x40020c00
 80013e4:	40020800 	.word	0x40020800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40021000 	.word	0x40021000

080013f0 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b0a      	cmp	r3, #10
 80013fc:	d109      	bne.n	8001412 <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 80013fe:	230d      	movs	r3, #13
 8001400:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001402:	f107 010f 	add.w	r1, r7, #15
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	2201      	movs	r2, #1
 800140c:	4807      	ldr	r0, [pc, #28]	; (800142c <__io_putchar+0x3c>)
 800140e:	f004 fb70 	bl	8005af2 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001412:	1d39      	adds	r1, r7, #4
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
 8001418:	2201      	movs	r2, #1
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <__io_putchar+0x3c>)
 800141c:	f004 fb69 	bl	8005af2 <HAL_UART_Transmit>
    return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	2000061c 	.word	0x2000061c

08001430 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d110      	bne.n	8001462 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3305      	adds	r3, #5
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800144a:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 800144c:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	480c      	ldr	r0, [pc, #48]	; (8001484 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001454:	f006 f978 	bl	8007748 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001458:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145c:	480a      	ldr	r0, [pc, #40]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800145e:	f002 fd8e 	bl	8003f7e <HAL_GPIO_TogglePin>
	}

	/*przerwanie od od TIM 2 - dekodowanie IR*/
	if (htim == &htim2)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a09      	ldr	r2, [pc, #36]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d104      	bne.n	8001474 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		printf("TIM2 przerwanie\n");
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800146c:	f006 f9f2 	bl	8007854 <puts>
		RC5_ResetPacket();
 8001470:	f000 fd54 	bl	8001f1c <RC5_ResetPacket>
	}
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	2000058c 	.word	0x2000058c
 8001480:	20000498 	.word	0x20000498
 8001484:	0800b3e0 	.word	0x0800b3e0
 8001488:	40020c00 	.word	0x40020c00
 800148c:	200005d4 	.word	0x200005d4
 8001490:	0800b3f4 	.word	0x0800b3f4

08001494 <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	    ---------------------------------------------
	    It resets the InfraRed decoders packet.
	    - The Timer Overflow is set to 3.6 ms .*/

	    /* IC2 Interrupt*/
	    if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_1)
 800149c:	4819      	ldr	r0, [pc, #100]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x70>)
 800149e:	f003 ff23 	bl	80052e8 <HAL_TIM_GetActiveChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d113      	bne.n	80014d0 <HAL_TIM_IC_CaptureCallback+0x3c>
	    {
	    	printf("CH 1 przerwanie\n");
 80014a8:	4817      	ldr	r0, [pc, #92]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x74>)
 80014aa:	f006 f9d3 	bl	8007854 <puts>
	      ICValue2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80014ae:	2100      	movs	r1, #0
 80014b0:	4814      	ldr	r0, [pc, #80]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014b2:	f003 feb7 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <HAL_TIM_IC_CaptureCallback+0x78>)
 80014ba:	6013      	str	r3, [r2, #0]
	      /* RC5 */
	      RC5_DataSampling(ICValue2 - ICValue1 , 0);
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <HAL_TIM_IC_CaptureCallback+0x78>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd3d 	bl	8001f48 <RC5_DataSampling>
	    {
	    	printf("CH 1 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
}
 80014ce:	e015      	b.n	80014fc <HAL_TIM_IC_CaptureCallback+0x68>
	    else if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_2)
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014d2:	f003 ff09 	bl	80052e8 <HAL_TIM_GetActiveChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d10f      	bne.n	80014fc <HAL_TIM_IC_CaptureCallback+0x68>
	    	printf("CH 1 przerwanie\n");
 80014dc:	480a      	ldr	r0, [pc, #40]	; (8001508 <HAL_TIM_IC_CaptureCallback+0x74>)
 80014de:	f006 f9b9 	bl	8007854 <puts>
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80014e2:	2104      	movs	r1, #4
 80014e4:	4807      	ldr	r0, [pc, #28]	; (8001504 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014e6:	f003 fe9d 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014ee:	6013      	str	r3, [r2, #0]
	      RC5_DataSampling(ICValue1 , 1);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 fd26 	bl	8001f48 <RC5_DataSampling>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200005d4 	.word	0x200005d4
 8001508:	0800b404 	.word	0x0800b404
 800150c:	20000494 	.word	0x20000494
 8001510:	20000490 	.word	0x20000490

08001514 <STOP>:

void STOP(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	speed = 0;
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <STOP+0x34>)
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800151e:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <STOP+0x34>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	4809      	ldr	r0, [pc, #36]	; (800154c <STOP+0x38>)
 8001528:	f001 fee5 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001532:	4807      	ldr	r0, [pc, #28]	; (8001550 <STOP+0x3c>)
 8001534:	f002 fd0a 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800153e:	4804      	ldr	r0, [pc, #16]	; (8001550 <STOP+0x3c>)
 8001540:	f002 fd04 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000488 	.word	0x20000488
 800154c:	2000056c 	.word	0x2000056c
 8001550:	40020800 	.word	0x40020800

08001554 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	/*podejmwoanie dzialan na podstawie odebranych danych
	oraz wpisywanie informacji zwrotnej do bufora*/
	switch( atoi((char*)&received) )
 800155c:	4851      	ldr	r0, [pc, #324]	; (80016a4 <HAL_UART_RxCpltCallback+0x150>)
 800155e:	f005 fa43 	bl	80069e8 <atoi>
 8001562:	4603      	mov	r3, r0
 8001564:	2b09      	cmp	r3, #9
 8001566:	f200 8093 	bhi.w	8001690 <HAL_UART_RxCpltCallback+0x13c>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <HAL_UART_RxCpltCallback+0x1c>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001599 	.word	0x08001599
 8001574:	080015ab 	.word	0x080015ab
 8001578:	080015ed 	.word	0x080015ed
 800157c:	080015fb 	.word	0x080015fb
 8001580:	0800163d 	.word	0x0800163d
 8001584:	0800164b 	.word	0x0800164b
 8001588:	08001659 	.word	0x08001659
 800158c:	08001667 	.word	0x08001667
 8001590:	08001675 	.word	0x08001675
 8001594:	08001683 	.word	0x08001683
	{
	case 0:
		drive=0;
 8001598:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
		STOP();
 800159e:	f7ff ffb9 	bl	8001514 <STOP>
		printf("Odebrano: 0\n");
 80015a2:	4842      	ldr	r0, [pc, #264]	; (80016ac <HAL_UART_RxCpltCallback+0x158>)
 80015a4:	f006 f956 	bl	8007854 <puts>
		break;
 80015a8:	e073      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 1:
		drive = 1;
 80015aa:	4b3f      	ldr	r3, [pc, #252]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
		speed = speed + 10;
 80015b0:	4b3f      	ldr	r3, [pc, #252]	; (80016b0 <HAL_UART_RxCpltCallback+0x15c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	330a      	adds	r3, #10
 80015b6:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <HAL_UART_RxCpltCallback+0x15c>)
 80015b8:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c0:	483c      	ldr	r0, [pc, #240]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 80015c2:	f002 fcc3 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015cc:	4839      	ldr	r0, [pc, #228]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 80015ce:	f002 fcbd 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80015d2:	2064      	movs	r0, #100	; 0x64
 80015d4:	f001 f926 	bl	8002824 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015de:	4835      	ldr	r0, [pc, #212]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 80015e0:	f002 fcb4 	bl	8003f4c <HAL_GPIO_WritePin>
		printf("Odebrano: 1\n");
 80015e4:	4834      	ldr	r0, [pc, #208]	; (80016b8 <HAL_UART_RxCpltCallback+0x164>)
 80015e6:	f006 f935 	bl	8007854 <puts>
		break;
 80015ea:	e052      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 2:
		//STOP();
		drive = 2;
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 80015ee:	2202      	movs	r2, #2
 80015f0:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 2\n");
 80015f2:	4832      	ldr	r0, [pc, #200]	; (80016bc <HAL_UART_RxCpltCallback+0x168>)
 80015f4:	f006 f92e 	bl	8007854 <puts>
		break;
 80015f8:	e04b      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 3:
		speed = speed - 10;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_UART_RxCpltCallback+0x15c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	3b0a      	subs	r3, #10
 8001600:	4a2b      	ldr	r2, [pc, #172]	; (80016b0 <HAL_UART_RxCpltCallback+0x15c>)
 8001602:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160a:	482a      	ldr	r0, [pc, #168]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 800160c:	f002 fc9e 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	4827      	ldr	r0, [pc, #156]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 8001618:	f002 fc98 	bl	8003f4c <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800161c:	2064      	movs	r0, #100	; 0x64
 800161e:	f001 f901 	bl	8002824 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <HAL_UART_RxCpltCallback+0x160>)
 800162a:	f002 fc8f 	bl	8003f4c <HAL_GPIO_WritePin>
		drive = 3;
 800162e:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 8001630:	2203      	movs	r2, #3
 8001632:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 3\n");
 8001634:	4822      	ldr	r0, [pc, #136]	; (80016c0 <HAL_UART_RxCpltCallback+0x16c>)
 8001636:	f006 f90d 	bl	8007854 <puts>
		break;
 800163a:	e02a      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 4:
		//STOP();
		drive = 4;
 800163c:	4b1a      	ldr	r3, [pc, #104]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 800163e:	2204      	movs	r2, #4
 8001640:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 4\n");
 8001642:	4820      	ldr	r0, [pc, #128]	; (80016c4 <HAL_UART_RxCpltCallback+0x170>)
 8001644:	f006 f906 	bl	8007854 <puts>
		break;
 8001648:	e023      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 5:
		drive = 5;
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 800164c:	2205      	movs	r2, #5
 800164e:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 5\n");
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <HAL_UART_RxCpltCallback+0x174>)
 8001652:	f006 f8ff 	bl	8007854 <puts>
		break;
 8001656:	e01c      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 6:
		//STOP();
		drive = 6;
 8001658:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 800165a:	2206      	movs	r2, #6
 800165c:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 6\n");
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <HAL_UART_RxCpltCallback+0x178>)
 8001660:	f006 f8f8 	bl	8007854 <puts>
		break;
 8001664:	e015      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 7:
		//STOP();
		drive = 7;
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 7\n");
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <HAL_UART_RxCpltCallback+0x17c>)
 800166e:	f006 f8f1 	bl	8007854 <puts>
		break;
 8001672:	e00e      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 8:
		//STOP();
		drive = 8;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 8001676:	2208      	movs	r2, #8
 8001678:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 8\n");
 800167a:	4816      	ldr	r0, [pc, #88]	; (80016d4 <HAL_UART_RxCpltCallback+0x180>)
 800167c:	f006 f8ea 	bl	8007854 <puts>
		break;
 8001680:	e007      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	case 9:
		//STOP();
		drive = 9;
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <HAL_UART_RxCpltCallback+0x154>)
 8001684:	2209      	movs	r2, #9
 8001686:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 9\n");
 8001688:	4813      	ldr	r0, [pc, #76]	; (80016d8 <HAL_UART_RxCpltCallback+0x184>)
 800168a:	f006 f8e3 	bl	8007854 <puts>
		break;
 800168e:	e000      	b.n	8001692 <HAL_UART_RxCpltCallback+0x13e>
	default:
		break;
 8001690:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 8001692:	2201      	movs	r2, #1
 8001694:	4903      	ldr	r1, [pc, #12]	; (80016a4 <HAL_UART_RxCpltCallback+0x150>)
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <HAL_UART_RxCpltCallback+0x188>)
 8001698:	f004 fabd 	bl	8005c16 <HAL_UART_Receive_IT>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000004 	.word	0x20000004
 80016a8:	20000000 	.word	0x20000000
 80016ac:	0800b414 	.word	0x0800b414
 80016b0:	20000488 	.word	0x20000488
 80016b4:	40020800 	.word	0x40020800
 80016b8:	0800b420 	.word	0x0800b420
 80016bc:	0800b42c 	.word	0x0800b42c
 80016c0:	0800b438 	.word	0x0800b438
 80016c4:	0800b444 	.word	0x0800b444
 80016c8:	0800b450 	.word	0x0800b450
 80016cc:	0800b45c 	.word	0x0800b45c
 80016d0:	0800b468 	.word	0x0800b468
 80016d4:	0800b474 	.word	0x0800b474
 80016d8:	0800b480 	.word	0x0800b480
 80016dc:	2000061c 	.word	0x2000061c

080016e0 <PRZOD>:


void PRZOD(void){
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <PRZOD+0x44>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <PRZOD+0x48>)
 80016ee:	f001 fe02 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//1 przód
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f8:	480c      	ldr	r0, [pc, #48]	; (800172c <PRZOD+0x4c>)
 80016fa:	f002 fc27 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);	//2 przód
 80016fe:	2201      	movs	r2, #1
 8001700:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001704:	4809      	ldr	r0, [pc, #36]	; (800172c <PRZOD+0x4c>)
 8001706:	f002 fc21 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	//3 przód
 800170a:	2201      	movs	r2, #1
 800170c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <PRZOD+0x50>)
 8001712:	f002 fc1b 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);	//4 przód
 8001716:	2201      	movs	r2, #1
 8001718:	2180      	movs	r1, #128	; 0x80
 800171a:	4804      	ldr	r0, [pc, #16]	; (800172c <PRZOD+0x4c>)
 800171c:	f002 fc16 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000488 	.word	0x20000488
 8001728:	2000056c 	.word	0x2000056c
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <LEWA>:

void LEWA(void){
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <LEWA+0x44>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2200      	movs	r2, #0
 800173e:	2100      	movs	r1, #0
 8001740:	480e      	ldr	r0, [pc, #56]	; (800177c <LEWA+0x48>)
 8001742:	f001 fdd8 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 7180 	mov.w	r1, #256	; 0x100
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LEWA+0x4c>)
 800174e:	f002 fbfd 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001752:	2200      	movs	r2, #0
 8001754:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001758:	4809      	ldr	r0, [pc, #36]	; (8001780 <LEWA+0x4c>)
 800175a:	f002 fbf7 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800175e:	2201      	movs	r2, #1
 8001760:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001764:	4807      	ldr	r0, [pc, #28]	; (8001784 <LEWA+0x50>)
 8001766:	f002 fbf1 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800176a:	2200      	movs	r2, #0
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	4804      	ldr	r0, [pc, #16]	; (8001780 <LEWA+0x4c>)
 8001770:	f002 fbec 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000488 	.word	0x20000488
 800177c:	2000056c 	.word	0x2000056c
 8001780:	40020800 	.word	0x40020800
 8001784:	40020000 	.word	0x40020000

08001788 <PRAWA>:

void PRAWA(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <PRAWA+0x44>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	480e      	ldr	r0, [pc, #56]	; (80017d0 <PRAWA+0x48>)
 8001796:	f001 fdae 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 800179a:	2200      	movs	r2, #0
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	480c      	ldr	r0, [pc, #48]	; (80017d4 <PRAWA+0x4c>)
 80017a2:	f002 fbd3 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80017a6:	2201      	movs	r2, #1
 80017a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017ac:	4809      	ldr	r0, [pc, #36]	; (80017d4 <PRAWA+0x4c>)
 80017ae:	f002 fbcd 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80017b2:	2200      	movs	r2, #0
 80017b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b8:	4807      	ldr	r0, [pc, #28]	; (80017d8 <PRAWA+0x50>)
 80017ba:	f002 fbc7 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 80017be:	2201      	movs	r2, #1
 80017c0:	2180      	movs	r1, #128	; 0x80
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <PRAWA+0x4c>)
 80017c4:	f002 fbc2 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000488 	.word	0x20000488
 80017d0:	2000056c 	.word	0x2000056c
 80017d4:	40020800 	.word	0x40020800
 80017d8:	40020000 	.word	0x40020000

080017dc <OBROT_P>:

void OBROT_P(void){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <OBROT_P+0x44>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2200      	movs	r2, #0
 80017e6:	2100      	movs	r1, #0
 80017e8:	480e      	ldr	r0, [pc, #56]	; (8001824 <OBROT_P+0x48>)
 80017ea:	f001 fd84 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 80017ee:	2201      	movs	r2, #1
 80017f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <OBROT_P+0x4c>)
 80017f6:	f002 fba9 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 80017fa:	2200      	movs	r2, #0
 80017fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <OBROT_P+0x4c>)
 8001802:	f002 fba3 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800180c:	4807      	ldr	r0, [pc, #28]	; (800182c <OBROT_P+0x50>)
 800180e:	f002 fb9d 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 8001812:	2201      	movs	r2, #1
 8001814:	2180      	movs	r1, #128	; 0x80
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <OBROT_P+0x4c>)
 8001818:	f002 fb98 	bl	8003f4c <HAL_GPIO_WritePin>
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000488 	.word	0x20000488
 8001824:	2000056c 	.word	0x2000056c
 8001828:	40020800 	.word	0x40020800
 800182c:	40020000 	.word	0x40020000

08001830 <OBROT_L>:

void OBROT_L(void){
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <OBROT_L+0x44>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	2100      	movs	r1, #0
 800183c:	480e      	ldr	r0, [pc, #56]	; (8001878 <OBROT_L+0x48>)
 800183e:	f001 fd5a 	bl	80032f6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001842:	2200      	movs	r2, #0
 8001844:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <OBROT_L+0x4c>)
 800184a:	f002 fb7f 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001854:	4809      	ldr	r0, [pc, #36]	; (800187c <OBROT_L+0x4c>)
 8001856:	f002 fb79 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001860:	4807      	ldr	r0, [pc, #28]	; (8001880 <OBROT_L+0x50>)
 8001862:	f002 fb73 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 8001866:	2200      	movs	r2, #0
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	4804      	ldr	r0, [pc, #16]	; (800187c <OBROT_L+0x4c>)
 800186c:	f002 fb6e 	bl	8003f4c <HAL_GPIO_WritePin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000488 	.word	0x20000488
 8001878:	2000056c 	.word	0x2000056c
 800187c:	40020800 	.word	0x40020800
 8001880:	40020000 	.word	0x40020000

08001884 <TYL>:

void TYL(void){
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001888:	2200      	movs	r2, #0
 800188a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800188e:	480b      	ldr	r0, [pc, #44]	; (80018bc <TYL+0x38>)
 8001890:	f002 fb5c 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189a:	4808      	ldr	r0, [pc, #32]	; (80018bc <TYL+0x38>)
 800189c:	f002 fb56 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4806      	ldr	r0, [pc, #24]	; (80018c0 <TYL+0x3c>)
 80018a8:	f002 fb50 	bl	8003f4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80018ac:	2200      	movs	r2, #0
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <TYL+0x38>)
 80018b2:	f002 fb4b 	bl	8003f4c <HAL_GPIO_WritePin>
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40020000 	.word	0x40020000

080018c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018c8:	f000 ff3a 	bl	8002740 <HAL_Init>

  /* USER CODE BEGIN Init */

  RC5_Init();
 80018cc:	f000 f9a2 	bl	8001c14 <RC5_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018d0:	f000 f906 	bl	8001ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018d4:	f7ff fce2 	bl	800129c <MX_GPIO_Init>
  MX_DMA_Init();
 80018d8:	f7ff fcc0 	bl	800125c <MX_DMA_Init>
  MX_TIM10_Init();
 80018dc:	f000 fdfc 	bl	80024d8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80018e0:	f000 fe8a 	bl	80025f8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80018e4:	f7ff fc4c 	bl	8001180 <MX_DAC_Init>
  MX_ADC3_Init();
 80018e8:	f7ff fb80 	bl	8000fec <MX_ADC3_Init>
  MX_TIM2_Init();
 80018ec:	f000 fd58 	bl	80023a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 80018f0:	2201      	movs	r2, #1
 80018f2:	4963      	ldr	r1, [pc, #396]	; (8001a80 <main+0x1bc>)
 80018f4:	4863      	ldr	r0, [pc, #396]	; (8001a84 <main+0x1c0>)
 80018f6:	f000 fffd 	bl	80028f4 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10
 80018fa:	4863      	ldr	r0, [pc, #396]	; (8001a88 <main+0x1c4>)
 80018fc:	f002 fff2 	bl	80048e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001900:	4862      	ldr	r0, [pc, #392]	; (8001a8c <main+0x1c8>)
 8001902:	f002 ffef 	bl	80048e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001906:	2100      	movs	r1, #0
 8001908:	4860      	ldr	r0, [pc, #384]	; (8001a8c <main+0x1c8>)
 800190a:	f003 f8b5 	bl	8004a78 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800190e:	2104      	movs	r1, #4
 8001910:	485e      	ldr	r0, [pc, #376]	; (8001a8c <main+0x1c8>)
 8001912:	f003 f8b1 	bl	8004a78 <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 8001916:	2201      	movs	r2, #1
 8001918:	495d      	ldr	r1, [pc, #372]	; (8001a90 <main+0x1cc>)
 800191a:	485e      	ldr	r0, [pc, #376]	; (8001a94 <main+0x1d0>)
 800191c:	f004 f97b 	bl	8005c16 <HAL_UART_Receive_IT>

  //aktywacja Core2530 do pracy
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	485c      	ldr	r0, [pc, #368]	; (8001a98 <main+0x1d4>)
 8001926:	f002 fb11 	bl	8003f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	485a      	ldr	r0, [pc, #360]	; (8001a98 <main+0x1d4>)
 8001930:	f002 fb0c 	bl	8003f4c <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001934:	20c8      	movs	r0, #200	; 0xc8
 8001936:	f000 ff75 	bl	8002824 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800193a:	2201      	movs	r2, #1
 800193c:	2101      	movs	r1, #1
 800193e:	4856      	ldr	r0, [pc, #344]	; (8001a98 <main+0x1d4>)
 8001940:	f002 fb04 	bl	8003f4c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	4853      	ldr	r0, [pc, #332]	; (8001a98 <main+0x1d4>)
 800194a:	f002 faff 	bl	8003f4c <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  battery_voltage = 3.3f * battery_adc / 4096.0f;	//przeliczenie wartości napięcia zasilania
 800194e:	4b4c      	ldr	r3, [pc, #304]	; (8001a80 <main+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800195a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001a9c <main+0x1d8>
 800195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8001aa0 <main+0x1dc>
 8001966:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800196a:	4b4e      	ldr	r3, [pc, #312]	; (8001aa4 <main+0x1e0>)
 800196c:	edc3 7a00 	vstr	s15, [r3]
	  }
*/

	  /* sygnał przychodzący od odbiorników IR */
	  /*-------pilot-------*/
	  if (HAL_GPIO_ReadPin(rec_left_GPIO_Port, rec_left_Pin) == GPIO_PIN_RESET)
 8001970:	2120      	movs	r1, #32
 8001972:	484d      	ldr	r0, [pc, #308]	; (8001aa8 <main+0x1e4>)
 8001974:	f002 fad2 	bl	8003f1c <HAL_GPIO_ReadPin>
	  {
		  //printf("lewy\n");
	  }
	  if (HAL_GPIO_ReadPin(rec_right_GPIO_Port, rec_right_Pin) == GPIO_PIN_RESET)
 8001978:	2110      	movs	r1, #16
 800197a:	484b      	ldr	r0, [pc, #300]	; (8001aa8 <main+0x1e4>)
 800197c:	f002 face 	bl	8003f1c <HAL_GPIO_ReadPin>
	  {
		  //printf("prawy\n");
	  }
	  /*-------RC5-------*/
	  /* if data do not received */
	  if(0x00 == RC5FrameReceived)
 8001980:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <main+0x1e8>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <main+0xcc>
	  {
		  //printf("Ni ma\n");
	  }else{
		  /* decode the rc5 frame */
		  RC5_Decode(&RC5_FRAME);
 800198a:	4849      	ldr	r0, [pc, #292]	; (8001ab0 <main+0x1ec>)
 800198c:	f000 fa4e 	bl	8001e2c <RC5_Decode>
	  }

	  /* w switchu nastepuje wykonywanie instrukcji wedlug odebranych z komputera danych
	  wartosc zmiennej drive jest nadawana w przerwaniu UART po odebraniu komunikatu*/
	  switch(drive)
 8001990:	4b48      	ldr	r3, [pc, #288]	; (8001ab4 <main+0x1f0>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d871      	bhi.n	8001a7c <main+0x1b8>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <main+0xdc>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	080019db 	.word	0x080019db
 80019a8:	080019ef 	.word	0x080019ef
 80019ac:	08001a01 	.word	0x08001a01
 80019b0:	08001a15 	.word	0x08001a15
 80019b4:	08001a27 	.word	0x08001a27
 80019b8:	08001a35 	.word	0x08001a35
 80019bc:	08001a47 	.word	0x08001a47
 80019c0:	08001a59 	.word	0x08001a59
 80019c4:	08001a6b 	.word	0x08001a6b
	  {
	  case 0:
		  STOP();
 80019c8:	f7ff fda4 	bl	8001514 <STOP>
		  //nadawanie informacji przez UART
		  printf("STOP\n");
 80019cc:	483a      	ldr	r0, [pc, #232]	; (8001ab8 <main+0x1f4>)
 80019ce:	f005 ff41 	bl	8007854 <puts>
		  drive = 10;
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <main+0x1f0>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	601a      	str	r2, [r3, #0]
		  break;
 80019d8:	e051      	b.n	8001a7e <main+0x1ba>
	  case 1:
		  //Zmiana wartości wypełnienia (+10)
		  printf("Wypelnienie: %d\n", speed);
 80019da:	4b38      	ldr	r3, [pc, #224]	; (8001abc <main+0x1f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4837      	ldr	r0, [pc, #220]	; (8001ac0 <main+0x1fc>)
 80019e2:	f005 feb1 	bl	8007748 <iprintf>
		  drive = 10;
 80019e6:	4b33      	ldr	r3, [pc, #204]	; (8001ab4 <main+0x1f0>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	601a      	str	r2, [r3, #0]
		  break;
 80019ec:	e047      	b.n	8001a7e <main+0x1ba>
	  case 2:
		  PRZOD(); /*funkcja nadajaca keirunek jazdy robota do przodu*/
 80019ee:	f7ff fe77 	bl	80016e0 <PRZOD>
		  printf("Jazda do przodu\n");
 80019f2:	4834      	ldr	r0, [pc, #208]	; (8001ac4 <main+0x200>)
 80019f4:	f005 ff2e 	bl	8007854 <puts>
		  drive = 10;
 80019f8:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <main+0x1f0>)
 80019fa:	220a      	movs	r2, #10
 80019fc:	601a      	str	r2, [r3, #0]
		  break;
 80019fe:	e03e      	b.n	8001a7e <main+0x1ba>
	  case 3:
		  //Zmiana wartości wypełnienia (-10)
		  printf("Wypelnienie: %d\n", speed);
 8001a00:	4b2e      	ldr	r3, [pc, #184]	; (8001abc <main+0x1f8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	482e      	ldr	r0, [pc, #184]	; (8001ac0 <main+0x1fc>)
 8001a08:	f005 fe9e 	bl	8007748 <iprintf>
		  drive = 10;
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <main+0x1f0>)
 8001a0e:	220a      	movs	r2, #10
 8001a10:	601a      	str	r2, [r3, #0]
		  break;
 8001a12:	e034      	b.n	8001a7e <main+0x1ba>
	  case 4:
		  LEWA(); /*funkcja nadajaca keirunek jazdy robota w lewo*/
 8001a14:	f7ff fe8e 	bl	8001734 <LEWA>
		  printf("Jazda w lewo\n");
 8001a18:	482b      	ldr	r0, [pc, #172]	; (8001ac8 <main+0x204>)
 8001a1a:	f005 ff1b 	bl	8007854 <puts>
		  drive = 10;
 8001a1e:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <main+0x1f0>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	601a      	str	r2, [r3, #0]
		  break;
 8001a24:	e02b      	b.n	8001a7e <main+0x1ba>
	  case 5:
		  //speed=50; /*ustawienie wypelnienia na wartosc poczatkowa (50)*/
		  //printf("Wypelnienie: 50\n");
		  printf("NIC\n");
 8001a26:	4829      	ldr	r0, [pc, #164]	; (8001acc <main+0x208>)
 8001a28:	f005 ff14 	bl	8007854 <puts>
		  drive = 10;
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <main+0x1f0>)
 8001a2e:	220a      	movs	r2, #10
 8001a30:	601a      	str	r2, [r3, #0]
		  break;
 8001a32:	e024      	b.n	8001a7e <main+0x1ba>
	  case 6:
		  PRAWA(); /*funkcja nadajaca keirunek jazdy robota w prawo*/
 8001a34:	f7ff fea8 	bl	8001788 <PRAWA>
		  printf("Jazda w prawo\n");
 8001a38:	4825      	ldr	r0, [pc, #148]	; (8001ad0 <main+0x20c>)
 8001a3a:	f005 ff0b 	bl	8007854 <puts>
		  drive = 10;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <main+0x1f0>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	601a      	str	r2, [r3, #0]
		  break;
 8001a44:	e01b      	b.n	8001a7e <main+0x1ba>
	  case 7:
		  OBROT_L(); /*funkcja powodujaca rotacje robota w lewo*/
 8001a46:	f7ff fef3 	bl	8001830 <OBROT_L>
		  printf("Obrot w lewo\n");
 8001a4a:	4822      	ldr	r0, [pc, #136]	; (8001ad4 <main+0x210>)
 8001a4c:	f005 ff02 	bl	8007854 <puts>
		  drive = 10;
 8001a50:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <main+0x1f0>)
 8001a52:	220a      	movs	r2, #10
 8001a54:	601a      	str	r2, [r3, #0]
		  break;
 8001a56:	e012      	b.n	8001a7e <main+0x1ba>
	  case 8:
		  TYL(); /*funkcja nadajaca keirunek jazdy robota do tylu*/
 8001a58:	f7ff ff14 	bl	8001884 <TYL>
		  printf("Jazda do tylu\n");
 8001a5c:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <main+0x214>)
 8001a5e:	f005 fef9 	bl	8007854 <puts>
		  drive = 10;
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <main+0x1f0>)
 8001a64:	220a      	movs	r2, #10
 8001a66:	601a      	str	r2, [r3, #0]
		  break;
 8001a68:	e009      	b.n	8001a7e <main+0x1ba>
	  case 9:
		  OBROT_P(); /*funkcja powodujaca rotacje robota w prawo*/
 8001a6a:	f7ff feb7 	bl	80017dc <OBROT_P>
		  printf("Obrot w prawo\n");
 8001a6e:	481b      	ldr	r0, [pc, #108]	; (8001adc <main+0x218>)
 8001a70:	f005 fef0 	bl	8007854 <puts>
		  drive = 10;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <main+0x1f0>)
 8001a76:	220a      	movs	r2, #10
 8001a78:	601a      	str	r2, [r3, #0]
		  break;
 8001a7a:	e000      	b.n	8001a7e <main+0x1ba>
	  default:
		  break;
 8001a7c:	bf00      	nop
	  battery_voltage = 3.3f * battery_adc / 4096.0f;	//przeliczenie wartości napięcia zasilania
 8001a7e:	e766      	b.n	800194e <main+0x8a>
 8001a80:	20000484 	.word	0x20000484
 8001a84:	20000524 	.word	0x20000524
 8001a88:	2000058c 	.word	0x2000058c
 8001a8c:	200005d4 	.word	0x200005d4
 8001a90:	20000004 	.word	0x20000004
 8001a94:	2000061c 	.word	0x2000061c
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40533333 	.word	0x40533333
 8001aa0:	45800000 	.word	0x45800000
 8001aa4:	2000048c 	.word	0x2000048c
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	2000049a 	.word	0x2000049a
 8001ab0:	20000588 	.word	0x20000588
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	0800b48c 	.word	0x0800b48c
 8001abc:	20000488 	.word	0x20000488
 8001ac0:	0800b494 	.word	0x0800b494
 8001ac4:	0800b4a8 	.word	0x0800b4a8
 8001ac8:	0800b4b8 	.word	0x0800b4b8
 8001acc:	0800b4c8 	.word	0x0800b4c8
 8001ad0:	0800b4cc 	.word	0x0800b4cc
 8001ad4:	0800b4dc 	.word	0x0800b4dc
 8001ad8:	0800b4ec 	.word	0x0800b4ec
 8001adc:	0800b4fc 	.word	0x0800b4fc

08001ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b094      	sub	sp, #80	; 0x50
 8001ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	2230      	movs	r2, #48	; 0x30
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f004 ffa8 	bl	8006a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b04:	2300      	movs	r3, #0
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <SystemClock_Config+0xcc>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <SystemClock_Config+0xcc>)
 8001b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <SystemClock_Config+0xcc>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b20:	2300      	movs	r3, #0
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a21      	ldr	r2, [pc, #132]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b1f      	ldr	r3, [pc, #124]	; (8001bb0 <SystemClock_Config+0xd0>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b40:	2301      	movs	r3, #1
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b44:	2310      	movs	r3, #16
 8001b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b50:	2308      	movs	r3, #8
 8001b52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b54:	23a0      	movs	r3, #160	; 0xa0
 8001b56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b5c:	2304      	movs	r3, #4
 8001b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b60:	f107 0320 	add.w	r3, r7, #32
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 fa25 	bl	8003fb4 <HAL_RCC_OscConfig>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b70:	f000 f820 	bl	8001bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b74:	230f      	movs	r3, #15
 8001b76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2105      	movs	r1, #5
 8001b92:	4618      	mov	r0, r3
 8001b94:	f002 fc86 	bl	80044a4 <HAL_RCC_ClockConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b9e:	f000 f809 	bl	8001bb4 <Error_Handler>
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	3750      	adds	r7, #80	; 0x50
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <Error_Handler+0x8>
	...

08001bc0 <TIM_GetCounterCLKValue>:
//static void RC5_Decode(RC5_Frame_t *rc5_frame);

/* Private_Functions ---------------------------------------------------------*/

uint32_t TIM_GetCounterCLKValue(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
  uint32_t apbprescaler = 0, apbfrequency = 0;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  uint32_t timprescaler = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]

  /* Get the clock prescaler of APB1 */
  apbprescaler = ((RCC->CFGR >> 8) & 0x7);
 8001bd2:	4b0f      	ldr	r3, [pc, #60]	; (8001c10 <TIM_GetCounterCLKValue+0x50>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0a1b      	lsrs	r3, r3, #8
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	60fb      	str	r3, [r7, #12]
  apbfrequency = HAL_RCC_GetPCLK1Freq();
 8001bde:	f002 fe09 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 8001be2:	60b8      	str	r0, [r7, #8]
  timprescaler = TIM_PSC_PSC;
 8001be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be8:	607b      	str	r3, [r7, #4]

  /* If APBx clock div >= 4 */
  if (apbprescaler >= 4)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d906      	bls.n	8001bfe <TIM_GetCounterCLKValue+0x3e>
  {
    return ((apbfrequency * 2) / (timprescaler + 1));
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	005a      	lsls	r2, r3, #1
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	e004      	b.n	8001c08 <TIM_GetCounterCLKValue+0x48>
  }
  else
  {
    return (apbfrequency / (timprescaler + 1));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	3301      	adds	r3, #1
 8001c02:	68ba      	ldr	r2, [r7, #8]
 8001c04:	fbb2 f3f3 	udiv	r3, r2, r3
  }
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800

08001c14 <RC5_Init>:
  * @brief  Initialize the RC5 decoder module ( Time range)
  * @param  None
  * @retval None
  */
void RC5_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b092      	sub	sp, #72	; 0x48
 8001c18:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef tim_ic_init;
  TIM_SlaveConfigTypeDef tim_slave_conf;
  TIM_MasterConfigTypeDef tim_master_conf;

  /*  Clock Configuration for TIMER */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <RC5_Init+0x1f0>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a78      	ldr	r2, [pc, #480]	; (8001e04 <RC5_Init+0x1f0>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <RC5_Init+0x1f0>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]

  htim2.Instance = TIM2;
 8001c36:	4b74      	ldr	r3, [pc, #464]	; (8001e08 <RC5_Init+0x1f4>)
 8001c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c3c:	601a      	str	r2, [r3, #0]

  // Enable Button GPIO clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <RC5_Init+0x1f0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a6f      	ldr	r2, [pc, #444]	; (8001e04 <RC5_Init+0x1f0>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <RC5_Init+0x1f0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  //Pin configuration: input floating
  gpio_init_struct.Pin = GPIO_PIN_0;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_struct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_struct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c66:	2302      	movs	r3, #2
 8001c68:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_struct.Alternate = GPIO_AF1_TIM2;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c72:	4619      	mov	r1, r3
 8001c74:	4865      	ldr	r0, [pc, #404]	; (8001e0c <RC5_Init+0x1f8>)
 8001c76:	f001 ffb5 	bl	8003be4 <HAL_GPIO_Init>



  /* Enable the TIMx global Interrupt */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f001 fae1 	bl	8003246 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c84:	201c      	movs	r0, #28
 8001c86:	f001 fafa 	bl	800327e <HAL_NVIC_EnableIRQ>

  /* Timer Clock */
  TIMCLKValueKHz = TIM_GetCounterCLKValue() / 1000;
 8001c8a:	f7ff ff99 	bl	8001bc0 <TIM_GetCounterCLKValue>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4a5f      	ldr	r2, [pc, #380]	; (8001e10 <RC5_Init+0x1fc>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	099b      	lsrs	r3, r3, #6
 8001c98:	4a5e      	ldr	r2, [pc, #376]	; (8001e14 <RC5_Init+0x200>)
 8001c9a:	6013      	str	r3, [r2, #0]
  RC5TimeOut = TIMCLKValueKHz * RC5_TIME_OUT_US / 1000;
 8001c9c:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <RC5_Init+0x200>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	4a59      	ldr	r2, [pc, #356]	; (8001e10 <RC5_Init+0x1fc>)
 8001caa:	fba2 2303 	umull	r2, r3, r2, r3
 8001cae:	099b      	lsrs	r3, r3, #6
 8001cb0:	4a59      	ldr	r2, [pc, #356]	; (8001e18 <RC5_Init+0x204>)
 8001cb2:	6013      	str	r3, [r2, #0]

  htim2.Init.ClockDivision = 0;
 8001cb4:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <RC5_Init+0x1f4>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = 0;
 8001cba:	4b53      	ldr	r3, [pc, #332]	; (8001e08 <RC5_Init+0x1f4>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = RC5TimeOut;
 8001cc0:	4b55      	ldr	r3, [pc, #340]	; (8001e18 <RC5_Init+0x204>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a50      	ldr	r2, [pc, #320]	; (8001e08 <RC5_Init+0x1f4>)
 8001cc6:	60d3      	str	r3, [r2, #12]
  htim2.Init.Prescaler = 79;
 8001cc8:	4b4f      	ldr	r3, [pc, #316]	; (8001e08 <RC5_Init+0x1f4>)
 8001cca:	224f      	movs	r2, #79	; 0x4f
 8001ccc:	605a      	str	r2, [r3, #4]
  htim2.Init.RepetitionCounter = 0;
 8001cce:	4b4e      	ldr	r3, [pc, #312]	; (8001e08 <RC5_Init+0x1f4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	615a      	str	r2, [r3, #20]
  HAL_TIM_IC_Init(&htim2);
 8001cd4:	484c      	ldr	r0, [pc, #304]	; (8001e08 <RC5_Init+0x1f4>)
 8001cd6:	f002 fe75 	bl	80049c4 <HAL_TIM_IC_Init>

  /* TIM configuration */
  tim_ic_init.ICPolarity = TIM_ICPOLARITY_RISING;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  tim_ic_init.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  tim_ic_init.ICPrescaler = TIM_ICPSC_DIV1;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  tim_ic_init.ICFilter = 0x0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_TIM_IC_ConfigChannel(&htim2, &tim_ic_init, TIM_CHANNEL_2);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	2204      	movs	r2, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4845      	ldr	r0, [pc, #276]	; (8001e08 <RC5_Init+0x1f4>)
 8001cf4:	f003 f8f0 	bl	8004ed8 <HAL_TIM_IC_ConfigChannel>

  tim_ic_init.ICPolarity = TIM_ICPOLARITY_FALLING;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  tim_ic_init.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_TIM_IC_ConfigChannel(&htim2, &tim_ic_init, TIM_CHANNEL_1);
 8001d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d04:	2200      	movs	r2, #0
 8001d06:	4619      	mov	r1, r3
 8001d08:	483f      	ldr	r0, [pc, #252]	; (8001e08 <RC5_Init+0x1f4>)
 8001d0a:	f003 f8e5 	bl	8004ed8 <HAL_TIM_IC_ConfigChannel>

  tim_slave_conf.InputTrigger = TIM_TS_TI1F_ED;
 8001d0e:	2340      	movs	r3, #64	; 0x40
 8001d10:	617b      	str	r3, [r7, #20]
  tim_slave_conf.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d12:	2304      	movs	r3, #4
 8001d14:	613b      	str	r3, [r7, #16]
  tim_slave_conf.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
  tim_slave_conf.TriggerFilter = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	623b      	str	r3, [r7, #32]
  HAL_TIM_SlaveConfigSynchro(&htim2, &tim_slave_conf);
 8001d1e:	f107 0310 	add.w	r3, r7, #16
 8001d22:	4619      	mov	r1, r3
 8001d24:	4838      	ldr	r0, [pc, #224]	; (8001e08 <RC5_Init+0x1f4>)
 8001d26:	f003 fa3a 	bl	800519e <HAL_TIM_SlaveConfigSynchro>

  /* Enable the Master/Slave Mode */
  tim_master_conf.MasterSlaveMode = TIM_SMCR_MSM;
 8001d2a:	2380      	movs	r3, #128	; 0x80
 8001d2c:	60fb      	str	r3, [r7, #12]
  tim_master_conf.MasterOutputTrigger = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &tim_master_conf);
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	4619      	mov	r1, r3
 8001d38:	4833      	ldr	r0, [pc, #204]	; (8001e08 <RC5_Init+0x1f4>)
 8001d3a:	f003 fdfd 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>

  /* Configures the TIM Update Request Interrupt source: counter overflow */
  __HAL_TIM_URS_ENABLE(&htim2);
 8001d3e:	4b32      	ldr	r3, [pc, #200]	; (8001e08 <RC5_Init+0x1f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	4b30      	ldr	r3, [pc, #192]	; (8001e08 <RC5_Init+0x1f4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f042 0204 	orr.w	r2, r2, #4
 8001d4c:	601a      	str	r2, [r3, #0]

  /* Clear update flag */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001d4e:	4b2e      	ldr	r3, [pc, #184]	; (8001e08 <RC5_Init+0x1f4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f06f 0201 	mvn.w	r2, #1
 8001d56:	611a      	str	r2, [r3, #16]

  /* Enable TIM Update Event Interrupt Request */
  /* Enable the CC2/CC1 Interrupt Request */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_FLAG_UPDATE | TIM_IT_CC1 | TIM_IT_CC2);
 8001d58:	4b2b      	ldr	r3, [pc, #172]	; (8001e08 <RC5_Init+0x1f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <RC5_Init+0x1f4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0207 	orr.w	r2, r2, #7
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the timer */
  __HAL_TIM_ENABLE(&htim2);
 8001d68:	4b27      	ldr	r3, [pc, #156]	; (8001e08 <RC5_Init+0x1f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <RC5_Init+0x1f4>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4823      	ldr	r0, [pc, #140]	; (8001e08 <RC5_Init+0x1f4>)
 8001d7c:	f002 fe7c 	bl	8004a78 <HAL_TIM_IC_Start_IT>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d000      	beq.n	8001d88 <RC5_Init+0x174>
  {
    /* Starting Error */
    while (1)
 8001d86:	e7fe      	b.n	8001d86 <RC5_Init+0x172>
    {}
  }

  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8001d88:	2104      	movs	r1, #4
 8001d8a:	481f      	ldr	r0, [pc, #124]	; (8001e08 <RC5_Init+0x1f4>)
 8001d8c:	f002 fe74 	bl	8004a78 <HAL_TIM_IC_Start_IT>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d000      	beq.n	8001d98 <RC5_Init+0x184>
  {
    /* Starting Error */
    while (1)
 8001d96:	e7fe      	b.n	8001d96 <RC5_Init+0x182>
    {}
  }

  /* Bit time range */
  RC5MinT = (RC5_T_US - RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <RC5_Init+0x200>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <RC5_Init+0x1fc>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <RC5_Init+0x208>)
 8001dae:	6013      	str	r3, [r2, #0]
  RC5MaxT = (RC5_T_US + RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001db0:	4b18      	ldr	r3, [pc, #96]	; (8001e14 <RC5_Init+0x200>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001db8:	fb02 f303 	mul.w	r3, r2, r3
 8001dbc:	4a14      	ldr	r2, [pc, #80]	; (8001e10 <RC5_Init+0x1fc>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	4a16      	ldr	r2, [pc, #88]	; (8001e20 <RC5_Init+0x20c>)
 8001dc6:	6013      	str	r3, [r2, #0]
  RC5Min2T = (2 * RC5_T_US - RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <RC5_Init+0x200>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dd0:	fb02 f303 	mul.w	r3, r2, r3
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <RC5_Init+0x1fc>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	099b      	lsrs	r3, r3, #6
 8001ddc:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <RC5_Init+0x210>)
 8001dde:	6013      	str	r3, [r2, #0]
  RC5Max2T = (2 * RC5_T_US + RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	; (8001e14 <RC5_Init+0x200>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f640 0234 	movw	r2, #2100	; 0x834
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <RC5_Init+0x1fc>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	099b      	lsrs	r3, r3, #6
 8001df4:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <RC5_Init+0x214>)
 8001df6:	6013      	str	r3, [r2, #0]

  /* Default state */
  RC5_ResetPacket();
 8001df8:	f000 f890 	bl	8001f1c <RC5_ResetPacket>
}
 8001dfc:	bf00      	nop
 8001dfe:	3748      	adds	r7, #72	; 0x48
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40023800 	.word	0x40023800
 8001e08:	200005d4 	.word	0x200005d4
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	10624dd3 	.word	0x10624dd3
 8001e14:	200004ac 	.word	0x200004ac
 8001e18:	200004b0 	.word	0x200004b0
 8001e1c:	2000049c 	.word	0x2000049c
 8001e20:	200004a0 	.word	0x200004a0
 8001e24:	200004a4 	.word	0x200004a4
 8001e28:	200004a8 	.word	0x200004a8

08001e2c <RC5_Decode>:
  *         is a new IR frame already received.
  * @param  pIRFrame: pointer to RC5_Frame_t structure that contains the
  *         the IR protocol fields (Address, Command,...).
  */
void RC5_Decode(RC5_Frame_t *pIRFrame)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* If frame received */
  if (RC5FrameReceived != NO)
 8001e34:	4b32      	ldr	r3, [pc, #200]	; (8001f00 <RC5_Decode+0xd4>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d05b      	beq.n	8001ef6 <RC5_Decode+0xca>
  {
    RC5_Data = RC5TmpPacket.data ;
 8001e3e:	4b31      	ldr	r3, [pc, #196]	; (8001f04 <RC5_Decode+0xd8>)
 8001e40:	881b      	ldrh	r3, [r3, #0]
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <RC5_Decode+0xdc>)
 8001e48:	601a      	str	r2, [r3, #0]
    /* RC5 frame field decoding */
    pIRFrame->FieldBit = (RC5TmpPacket.data >> 12) & 0x1;
 8001e4a:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <RC5_Decode+0xd8>)
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	0b1b      	lsrs	r3, r3, #12
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	701a      	strb	r2, [r3, #0]
    pIRFrame->ToggleBit = (RC5TmpPacket.data >> 11) & 0x1;
 8001e60:	4b28      	ldr	r3, [pc, #160]	; (8001f04 <RC5_Decode+0xd8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	0adb      	lsrs	r3, r3, #11
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	705a      	strb	r2, [r3, #1]
    pIRFrame->Address = (RC5TmpPacket.data >> 6) & 0x1F;
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <RC5_Decode+0xd8>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f003 031f 	and.w	r3, r3, #31
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	709a      	strb	r2, [r3, #2]
    pIRFrame->Command = (uint8_t)((RC5TmpPacket.data) & (uint8_t) 0x3F);
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <RC5_Decode+0xd8>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	70da      	strb	r2, [r3, #3]

    /* Check if command ranges between 64 to 127:Upper Field */
    if (((RC5TmpPacket.data >> 12) & 0x1) != 0x01)
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <RC5_Decode+0xd8>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	0b1b      	lsrs	r3, r3, #12
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d007      	beq.n	8001ec0 <RC5_Decode+0x94>
    {
      pIRFrame->Command =  (1 << 6) | pIRFrame->Command;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	78db      	ldrb	r3, [r3, #3]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	70da      	strb	r2, [r3, #3]
    }
    /* Default state */
    RC5FrameReceived = NO;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <RC5_Decode+0xd4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]
    RC5_ResetPacket();
 8001ec6:	f000 f829 	bl	8001f1c <RC5_ResetPacket>
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAtLine(6, (uint8_t*)aRC5Commands[pIRFrame->Command]);
    BSP_LCD_DisplayStringAtLine(7, (uint8_t*)aRC5Devices[pIRFrame->Address]);
    BSP_LCD_SetFont(&Font24);
*/
    printf("Command: %p\n", (uint8_t*)aRC5Commands[pIRFrame->Command]);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	78db      	ldrb	r3, [r3, #3]
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <RC5_Decode+0xe0>)
 8001ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <RC5_Decode+0xe4>)
 8001edc:	f005 fc34 	bl	8007748 <iprintf>
    printf("Address: %p\n", (uint8_t*)aRC5Devices[pIRFrame->Address]);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	789b      	ldrb	r3, [r3, #2]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <RC5_Decode+0xe8>)
 8001eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4809      	ldr	r0, [pc, #36]	; (8001f18 <RC5_Decode+0xec>)
 8001ef2:	f005 fc29 	bl	8007748 <iprintf>
  }
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000049a 	.word	0x2000049a
 8001f04:	20000580 	.word	0x20000580
 8001f08:	200004b4 	.word	0x200004b4
 8001f0c:	20000088 	.word	0x20000088
 8001f10:	0800c154 	.word	0x0800c154
 8001f14:	20000008 	.word	0x20000008
 8001f18:	0800c164 	.word	0x0800c164

08001f1c <RC5_ResetPacket>:
  * @brief  Set the incoming packet structure to default state.
  * @param  None
  * @retval None
  */
void RC5_ResetPacket(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  RC5TmpPacket.data = 0;
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <RC5_ResetPacket+0x28>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	801a      	strh	r2, [r3, #0]
  RC5TmpPacket.bitCount = RC5_PACKET_BIT_COUNT - 1;
 8001f26:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <RC5_ResetPacket+0x28>)
 8001f28:	220c      	movs	r2, #12
 8001f2a:	711a      	strb	r2, [r3, #4]
  RC5TmpPacket.lastBit = RC5_ONE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <RC5_ResetPacket+0x28>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	70da      	strb	r2, [r3, #3]
  RC5TmpPacket.status = RC5_PACKET_STATUS_EMPTY;
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <RC5_ResetPacket+0x28>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	709a      	strb	r2, [r3, #2]
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	20000580 	.word	0x20000580

08001f48 <RC5_DataSampling>:
  * @param  rawPulseLength: low/high pulse duration
  * @param  edge: '1' for Rising  or '0' for falling edge
  * @retval None
  */
void RC5_DataSampling(uint32_t rawPulseLength, uint32_t edge)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint8_t pulse;
  RC5_lastBit_t tmp_bit;

  /* Decode the pulse length in protocol units */
  pulse = RC5_GetPulseLength(rawPulseLength);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 f84a 	bl	8001fec <RC5_GetPulseLength>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]

  /* On Rising Edge */
  if (edge == 1)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d115      	bne.n	8001f8e <RC5_DataSampling+0x46>
  {
    if (pulse <= RC5_2T_TIME)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d80f      	bhi.n	8001f88 <RC5_DataSampling+0x40>
    {
      /* Bit determination by the rising edge */
      tmp_bit = RC5_logicTableRisingEdge[RC5TmpPacket.lastBit][pulse];
 8001f68:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <RC5_DataSampling+0x98>)
 8001f6a:	78db      	ldrb	r3, [r3, #3]
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	461a      	mov	r2, r3
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	491c      	ldr	r1, [pc, #112]	; (8001fe4 <RC5_DataSampling+0x9c>)
 8001f74:	0052      	lsls	r2, r2, #1
 8001f76:	440a      	add	r2, r1
 8001f78:	4413      	add	r3, r2
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	73bb      	strb	r3, [r7, #14]
      RC5_modifyLastBit (tmp_bit);
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f85f 	bl	8002044 <RC5_modifyLastBit>
      {
        RC5_ResetPacket();
      }
    }
  }
}
 8001f86:	e027      	b.n	8001fd8 <RC5_DataSampling+0x90>
      RC5_ResetPacket();
 8001f88:	f7ff ffc8 	bl	8001f1c <RC5_ResetPacket>
}
 8001f8c:	e024      	b.n	8001fd8 <RC5_DataSampling+0x90>
    if (RC5TmpPacket.status & RC5_PACKET_STATUS_EMPTY)
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <RC5_DataSampling+0x98>)
 8001f90:	789b      	ldrb	r3, [r3, #2]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d008      	beq.n	8001fae <RC5_DataSampling+0x66>
      RC5TmpPacket.status &= (uint8_t)~RC5_PACKET_STATUS_EMPTY;
 8001f9c:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <RC5_DataSampling+0x98>)
 8001f9e:	789b      	ldrb	r3, [r3, #2]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <RC5_DataSampling+0x98>)
 8001faa:	709a      	strb	r2, [r3, #2]
}
 8001fac:	e014      	b.n	8001fd8 <RC5_DataSampling+0x90>
      if (pulse <= RC5_2T_TIME)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d80f      	bhi.n	8001fd4 <RC5_DataSampling+0x8c>
        tmp_bit = RC5_logicTableFallingEdge[RC5TmpPacket.lastBit][pulse];
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <RC5_DataSampling+0x98>)
 8001fb6:	78db      	ldrb	r3, [r3, #3]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	490a      	ldr	r1, [pc, #40]	; (8001fe8 <RC5_DataSampling+0xa0>)
 8001fc0:	0052      	lsls	r2, r2, #1
 8001fc2:	440a      	add	r2, r1
 8001fc4:	4413      	add	r3, r2
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	73bb      	strb	r3, [r7, #14]
        RC5_modifyLastBit (tmp_bit);
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f000 f839 	bl	8002044 <RC5_modifyLastBit>
}
 8001fd2:	e001      	b.n	8001fd8 <RC5_DataSampling+0x90>
        RC5_ResetPacket();
 8001fd4:	f7ff ffa2 	bl	8001f1c <RC5_ResetPacket>
}
 8001fd8:	bf00      	nop
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20000580 	.word	0x20000580
 8001fe4:	0800c174 	.word	0x0800c174
 8001fe8:	0800c178 	.word	0x0800c178

08001fec <RC5_GetPulseLength>:
  * @brief  Convert raw pulse length expressed in timer ticks to protocol bit times.
  * @param  pulseLength:pulse duration
  * @retval bit time value
  */
static uint8_t RC5_GetPulseLength (uint32_t pulseLength)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Valid bit time */
  if ((pulseLength > RC5MinT) && (pulseLength < RC5MaxT))
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <RC5_GetPulseLength+0x48>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d906      	bls.n	800200c <RC5_GetPulseLength+0x20>
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <RC5_GetPulseLength+0x4c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	429a      	cmp	r2, r3
 8002006:	d201      	bcs.n	800200c <RC5_GetPulseLength+0x20>
  {
    /* We've found the length */
    return (RC5_1T_TIME); /* Return the correct value */
 8002008:	2300      	movs	r3, #0
 800200a:	e00c      	b.n	8002026 <RC5_GetPulseLength+0x3a>
  }
  else if ((pulseLength > RC5Min2T) && (pulseLength < RC5Max2T))
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <RC5_GetPulseLength+0x50>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	d906      	bls.n	8002024 <RC5_GetPulseLength+0x38>
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <RC5_GetPulseLength+0x54>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	429a      	cmp	r2, r3
 800201e:	d201      	bcs.n	8002024 <RC5_GetPulseLength+0x38>
  {
    /* We've found the length */
    return (RC5_2T_TIME);/* Return the correct value */
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <RC5_GetPulseLength+0x3a>
  }
  return RC5_WRONG_TIME;/* Error */
 8002024:	23ff      	movs	r3, #255	; 0xff
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2000049c 	.word	0x2000049c
 8002038:	200004a0 	.word	0x200004a0
 800203c:	200004a4 	.word	0x200004a4
 8002040:	200004a8 	.word	0x200004a8

08002044 <RC5_modifyLastBit>:
  * @brief  perform checks if the last bit was not incorrect.
  * @param  bit: where bit can be  RC5_NAN or RC5_INV or RC5_ZER or RC5_ONE
  * @retval None
  */
static void RC5_modifyLastBit(RC5_lastBit_t bit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  if (bit != RC5_NAN)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d010      	beq.n	8002076 <RC5_modifyLastBit+0x32>
  {
    if (RC5TmpPacket.lastBit != RC5_INV)
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <RC5_modifyLastBit+0x3c>)
 8002056:	78db      	ldrb	r3, [r3, #3]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b03      	cmp	r3, #3
 800205c:	d009      	beq.n	8002072 <RC5_modifyLastBit+0x2e>
    {
      /* Restore the last bit */
      RC5TmpPacket.lastBit = bit;
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <RC5_modifyLastBit+0x3c>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	70d3      	strb	r3, [r2, #3]

      /* Insert one bit into the RC5 Packet */
      RC5_WriteBit(RC5TmpPacket.lastBit);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <RC5_modifyLastBit+0x3c>)
 8002066:	78db      	ldrb	r3, [r3, #3]
 8002068:	b2db      	uxtb	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f80a 	bl	8002084 <RC5_WriteBit>
    else
    {
      RC5_ResetPacket();
    }
  }
}
 8002070:	e001      	b.n	8002076 <RC5_modifyLastBit+0x32>
      RC5_ResetPacket();
 8002072:	f7ff ff53 	bl	8001f1c <RC5_ResetPacket>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000580 	.word	0x20000580

08002084 <RC5_WriteBit>:
  * @brief  Insert one bit into the final data word.
  * @param  bitVal: bit value 'RC5_ONE' or 'RC5_ZER'
  * @retval None
  */
static void RC5_WriteBit(uint8_t bitVal)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  /* First convert RC5 symbols to ones and zeros */
  if (bitVal == RC5_ONE)
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d102      	bne.n	800209a <RC5_WriteBit+0x16>
  {
    bitVal = 1;
 8002094:	2301      	movs	r3, #1
 8002096:	71fb      	strb	r3, [r7, #7]
 8002098:	e008      	b.n	80020ac <RC5_WriteBit+0x28>
  }
  else if (bitVal == RC5_ZER)
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d102      	bne.n	80020a6 <RC5_WriteBit+0x22>
  {
    bitVal = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	71fb      	strb	r3, [r7, #7]
 80020a4:	e002      	b.n	80020ac <RC5_WriteBit+0x28>
  }
  else
  {
    RC5_ResetPacket();
 80020a6:	f7ff ff39 	bl	8001f1c <RC5_ResetPacket>
    return;
 80020aa:	e01f      	b.n	80020ec <RC5_WriteBit+0x68>
  }

  /* Write this particular bit to data field */
  RC5TmpPacket.data |=  bitVal;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <RC5_WriteBit+0x70>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	79fb      	ldrb	r3, [r7, #7]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b29a      	uxth	r2, r3
 80020ba:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <RC5_WriteBit+0x70>)
 80020bc:	801a      	strh	r2, [r3, #0]

  /* Test the bit number determined */
  if (RC5TmpPacket.bitCount != 0)  /* If this is not the last bit */
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <RC5_WriteBit+0x70>)
 80020c0:	791b      	ldrb	r3, [r3, #4]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <RC5_WriteBit+0x62>
  {
    /* Shift the data field */
    RC5TmpPacket.data = RC5TmpPacket.data << 1;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <RC5_WriteBit+0x70>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <RC5_WriteBit+0x70>)
 80020d4:	801a      	strh	r2, [r3, #0]
    /* And decrement the bitCount */
    RC5TmpPacket.bitCount--;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <RC5_WriteBit+0x70>)
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <RC5_WriteBit+0x70>)
 80020e2:	711a      	strb	r2, [r3, #4]
 80020e4:	e002      	b.n	80020ec <RC5_WriteBit+0x68>
  }
  else
  {
    RC5FrameReceived = YES;
 80020e6:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <RC5_WriteBit+0x74>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
  }
}
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000580 	.word	0x20000580
 80020f8:	2000049a 	.word	0x2000049a

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_MspInit+0x4c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <HAL_MspInit+0x4c>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_MspInit+0x4c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_MspInit+0x4c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	40023800 	.word	0x40023800

0800214c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002150:	e7fe      	b.n	8002150 <NMI_Handler+0x4>

08002152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002156:	e7fe      	b.n	8002156 <HardFault_Handler+0x4>

08002158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800215c:	e7fe      	b.n	800215c <MemManage_Handler+0x4>

0800215e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215e:	b480      	push	{r7}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002162:	e7fe      	b.n	8002162 <BusFault_Handler+0x4>

08002164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002168:	e7fe      	b.n	8002168 <UsageFault_Handler+0x4>

0800216a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800216a:	b480      	push	{r7}
 800216c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002198:	f000 fb24 	bl	80027e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021a6:	f002 fd8f 	bl	8004cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	2000058c 	.word	0x2000058c

080021b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <TIM2_IRQHandler+0x10>)
 80021ba:	f002 fd85 	bl	8004cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200005d4 	.word	0x200005d4

080021c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <USART2_IRQHandler+0x10>)
 80021ce:	f003 fd53 	bl	8005c78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	2000061c 	.word	0x2000061c

080021dc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021e0:	4802      	ldr	r0, [pc, #8]	; (80021ec <DMA2_Stream0_IRQHandler+0x10>)
 80021e2:	f001 fa95 	bl	8003710 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200004c4 	.word	0x200004c4

080021f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
	return 1;
 80021f4:	2301      	movs	r3, #1
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <_kill>:

int _kill(int pid, int sig)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800220a:	f004 fbf1 	bl	80069f0 <__errno>
 800220e:	4603      	mov	r3, r0
 8002210:	2216      	movs	r2, #22
 8002212:	601a      	str	r2, [r3, #0]
	return -1;
 8002214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_exit>:

void _exit (int status)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002228:	f04f 31ff 	mov.w	r1, #4294967295
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ffe7 	bl	8002200 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002232:	e7fe      	b.n	8002232 <_exit+0x12>

08002234 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e00a      	b.n	800225c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002246:	f3af 8000 	nop.w
 800224a:	4601      	mov	r1, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	60ba      	str	r2, [r7, #8]
 8002252:	b2ca      	uxtb	r2, r1
 8002254:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	3301      	adds	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	dbf0      	blt.n	8002246 <_read+0x12>
	}

return len;
 8002264:	687b      	ldr	r3, [r7, #4]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3718      	adds	r7, #24
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b086      	sub	sp, #24
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e009      	b.n	8002294 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f8b1 	bl	80013f0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	3301      	adds	r3, #1
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	429a      	cmp	r2, r3
 800229a:	dbf1      	blt.n	8002280 <_write+0x12>
	}
	return len;
 800229c:	687b      	ldr	r3, [r7, #4]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <_close>:

int _close(int file)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
	return -1;
 80022ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ce:	605a      	str	r2, [r3, #4]
	return 0;
 80022d0:	2300      	movs	r3, #0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <_isatty>:

int _isatty(int file)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
	return 1;
 80022e6:	2301      	movs	r3, #1
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
	...

08002310 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002318:	4a14      	ldr	r2, [pc, #80]	; (800236c <_sbrk+0x5c>)
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <_sbrk+0x60>)
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <_sbrk+0x64>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <_sbrk+0x64>)
 800232e:	4a12      	ldr	r2, [pc, #72]	; (8002378 <_sbrk+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <_sbrk+0x64>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	429a      	cmp	r2, r3
 800233e:	d207      	bcs.n	8002350 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002340:	f004 fb56 	bl	80069f0 <__errno>
 8002344:	4603      	mov	r3, r0
 8002346:	220c      	movs	r2, #12
 8002348:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	e009      	b.n	8002364 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002350:	4b08      	ldr	r3, [pc, #32]	; (8002374 <_sbrk+0x64>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002356:	4b07      	ldr	r3, [pc, #28]	; (8002374 <_sbrk+0x64>)
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	4a05      	ldr	r2, [pc, #20]	; (8002374 <_sbrk+0x64>)
 8002360:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002362:	68fb      	ldr	r3, [r7, #12]
}
 8002364:	4618      	mov	r0, r3
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20020000 	.word	0x20020000
 8002370:	00000400 	.word	0x00000400
 8002374:	200004b8 	.word	0x200004b8
 8002378:	20000678 	.word	0x20000678

0800237c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <SystemInit+0x20>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	4a05      	ldr	r2, [pc, #20]	; (800239c <SystemInit+0x20>)
 8002388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800238c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b090      	sub	sp, #64	; 0x40
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023aa:	2200      	movs	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	605a      	str	r2, [r3, #4]
 80023b0:	609a      	str	r2, [r3, #8]
 80023b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ce:	1d3b      	adds	r3, r7, #4
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023da:	4b3d      	ldr	r3, [pc, #244]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80023e2:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023e4:	224f      	movs	r2, #79	; 0x4f
 80023e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = 0;
 80023e8:	4b39      	ldr	r3, [pc, #228]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = RC5TimeOut;
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <MX_TIM2_Init+0x134>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a37      	ldr	r2, [pc, #220]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023f4:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f6:	4b36      	ldr	r3, [pc, #216]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023fc:	4b34      	ldr	r3, [pc, #208]	; (80024d0 <MX_TIM2_Init+0x130>)
 80023fe:	2200      	movs	r2, #0
 8002400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002402:	4833      	ldr	r0, [pc, #204]	; (80024d0 <MX_TIM2_Init+0x130>)
 8002404:	f002 fa1e 	bl	8004844 <HAL_TIM_Base_Init>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800240e:	f7ff fbd1 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002412:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002418:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800241c:	4619      	mov	r1, r3
 800241e:	482c      	ldr	r0, [pc, #176]	; (80024d0 <MX_TIM2_Init+0x130>)
 8002420:	f002 fdf6 	bl	8005010 <HAL_TIM_ConfigClockSource>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800242a:	f7ff fbc3 	bl	8001bb4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800242e:	4828      	ldr	r0, [pc, #160]	; (80024d0 <MX_TIM2_Init+0x130>)
 8002430:	f002 fac8 	bl	80049c4 <HAL_TIM_IC_Init>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800243a:	f7ff fbbb 	bl	8001bb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800243e:	2304      	movs	r3, #4
 8002440:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8002442:	2340      	movs	r3, #64	; 0x40
 8002444:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8002446:	2302      	movs	r3, #2
 8002448:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 800244a:	2300      	movs	r3, #0
 800244c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	4619      	mov	r1, r3
 8002454:	481e      	ldr	r0, [pc, #120]	; (80024d0 <MX_TIM2_Init+0x130>)
 8002456:	f002 fea2 	bl	800519e <HAL_TIM_SlaveConfigSynchro>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_TIM2_Init+0xc4>
  {
    Error_Handler();
 8002460:	f7ff fba8 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_SMCR_MSM;;
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800246c:	f107 0314 	add.w	r3, r7, #20
 8002470:	4619      	mov	r1, r3
 8002472:	4817      	ldr	r0, [pc, #92]	; (80024d0 <MX_TIM2_Init+0x130>)
 8002474:	f003 fa60 	bl	8005938 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800247e:	f7ff fb99 	bl	8001bb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002482:	2302      	movs	r3, #2
 8002484:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002486:	2301      	movs	r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	480d      	ldr	r0, [pc, #52]	; (80024d0 <MX_TIM2_Init+0x130>)
 800249a:	f002 fd1d 	bl	8004ed8 <HAL_TIM_IC_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 80024a4:	f7ff fb86 	bl	8001bb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024a8:	2300      	movs	r3, #0
 80024aa:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024ac:	2302      	movs	r3, #2
 80024ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2204      	movs	r2, #4
 80024b4:	4619      	mov	r1, r3
 80024b6:	4806      	ldr	r0, [pc, #24]	; (80024d0 <MX_TIM2_Init+0x130>)
 80024b8:	f002 fd0e 	bl	8004ed8 <HAL_TIM_IC_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 80024c2:	f7ff fb77 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c6:	bf00      	nop
 80024c8:	3740      	adds	r7, #64	; 0x40
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	200005d4 	.word	0x200005d4
 80024d4:	200004b0 	.word	0x200004b0

080024d8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024dc:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_TIM10_Init+0x40>)
 80024de:	4a0f      	ldr	r2, [pc, #60]	; (800251c <MX_TIM10_Init+0x44>)
 80024e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 80024e2:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <MX_TIM10_Init+0x40>)
 80024e4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_TIM10_Init+0x40>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_TIM10_Init+0x40>)
 80024f2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80024f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <MX_TIM10_Init+0x40>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_TIM10_Init+0x40>)
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002504:	4804      	ldr	r0, [pc, #16]	; (8002518 <MX_TIM10_Init+0x40>)
 8002506:	f002 f99d 	bl	8004844 <HAL_TIM_Base_Init>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002510:	f7ff fb50 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000058c 	.word	0x2000058c
 800251c:	40014400 	.word	0x40014400

08002520 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b08a      	sub	sp, #40	; 0x28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002528:	f107 0314 	add.w	r3, r7, #20
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
 8002532:	609a      	str	r2, [r3, #8]
 8002534:	60da      	str	r2, [r3, #12]
 8002536:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002540:	d134      	bne.n	80025ac <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b29      	ldr	r3, [pc, #164]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a28      	ldr	r2, [pc, #160]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	6313      	str	r3, [r2, #48]	; 0x30
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257a:	2301      	movs	r3, #1
 800257c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800257e:	2312      	movs	r3, #18
 8002580:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800258e:	f107 0314 	add.w	r3, r7, #20
 8002592:	4619      	mov	r1, r3
 8002594:	4816      	ldr	r0, [pc, #88]	; (80025f0 <HAL_TIM_Base_MspInit+0xd0>)
 8002596:	f001 fb25 	bl	8003be4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 800259a:	2201      	movs	r2, #1
 800259c:	2100      	movs	r1, #0
 800259e:	201c      	movs	r0, #28
 80025a0:	f000 fe51 	bl	8003246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025a4:	201c      	movs	r0, #28
 80025a6:	f000 fe6a 	bl	800327e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80025aa:	e01a      	b.n	80025e2 <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM10)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_TIM_Base_MspInit+0xd4>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d115      	bne.n	80025e2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_TIM_Base_MspInit+0xcc>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2102      	movs	r1, #2
 80025d6:	2019      	movs	r0, #25
 80025d8:	f000 fe35 	bl	8003246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025dc:	2019      	movs	r0, #25
 80025de:	f000 fe4e 	bl	800327e <HAL_NVIC_EnableIRQ>
}
 80025e2:	bf00      	nop
 80025e4:	3728      	adds	r7, #40	; 0x28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40014400 	.word	0x40014400

080025f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 80025fe:	4a12      	ldr	r2, [pc, #72]	; (8002648 <MX_USART2_UART_Init+0x50>)
 8002600:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002602:	4b10      	ldr	r3, [pc, #64]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 8002604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002608:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800260a:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002610:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 8002612:	2200      	movs	r2, #0
 8002614:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 800261e:	220c      	movs	r2, #12
 8002620:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002622:	4b08      	ldr	r3, [pc, #32]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 8002624:	2200      	movs	r2, #0
 8002626:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 800262a:	2200      	movs	r2, #0
 800262c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262e:	4805      	ldr	r0, [pc, #20]	; (8002644 <MX_USART2_UART_Init+0x4c>)
 8002630:	f003 fa12 	bl	8005a58 <HAL_UART_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800263a:	f7ff fabb 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800263e:	bf00      	nop
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000061c 	.word	0x2000061c
 8002648:	40004400 	.word	0x40004400

0800264c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	605a      	str	r2, [r3, #4]
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	60da      	str	r2, [r3, #12]
 8002662:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a1d      	ldr	r2, [pc, #116]	; (80026e0 <HAL_UART_MspInit+0x94>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d133      	bne.n	80026d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_UART_MspInit+0x98>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a1b      	ldr	r2, [pc, #108]	; (80026e4 <HAL_UART_MspInit+0x98>)
 8002678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
 800267e:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_UART_MspInit+0x98>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002686:	613b      	str	r3, [r7, #16]
 8002688:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	60fb      	str	r3, [r7, #12]
 800268e:	4b15      	ldr	r3, [pc, #84]	; (80026e4 <HAL_UART_MspInit+0x98>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <HAL_UART_MspInit+0x98>)
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b12      	ldr	r3, [pc, #72]	; (80026e4 <HAL_UART_MspInit+0x98>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80026a6:	2360      	movs	r3, #96	; 0x60
 80026a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b2:	2303      	movs	r3, #3
 80026b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026b6:	2307      	movs	r3, #7
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4809      	ldr	r0, [pc, #36]	; (80026e8 <HAL_UART_MspInit+0x9c>)
 80026c2:	f001 fa8f 	bl	8003be4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	2103      	movs	r1, #3
 80026ca:	2026      	movs	r0, #38	; 0x26
 80026cc:	f000 fdbb 	bl	8003246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026d0:	2026      	movs	r0, #38	; 0x26
 80026d2:	f000 fdd4 	bl	800327e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026d6:	bf00      	nop
 80026d8:	3728      	adds	r7, #40	; 0x28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40004400 	.word	0x40004400
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020c00 	.word	0x40020c00

080026ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026f0:	480d      	ldr	r0, [pc, #52]	; (8002728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026f2:	490e      	ldr	r1, [pc, #56]	; (800272c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026f8:	e002      	b.n	8002700 <LoopCopyDataInit>

080026fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026fe:	3304      	adds	r3, #4

08002700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002704:	d3f9      	bcc.n	80026fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002706:	4a0b      	ldr	r2, [pc, #44]	; (8002734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002708:	4c0b      	ldr	r4, [pc, #44]	; (8002738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800270a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800270c:	e001      	b.n	8002712 <LoopFillZerobss>

0800270e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800270e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002710:	3204      	adds	r2, #4

08002712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002714:	d3fb      	bcc.n	800270e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002716:	f7ff fe31 	bl	800237c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800271a:	f004 f96f 	bl	80069fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800271e:	f7ff f8d1 	bl	80018c4 <main>
  bx  lr    
 8002722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800272c:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002730:	0800c664 	.word	0x0800c664
  ldr r2, =_sbss
 8002734:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 8002738:	20000674 	.word	0x20000674

0800273c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800273c:	e7fe      	b.n	800273c <ADC_IRQHandler>
	...

08002740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <HAL_Init+0x40>)
 800274a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800274e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <HAL_Init+0x40>)
 8002756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800275a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <HAL_Init+0x40>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a07      	ldr	r2, [pc, #28]	; (8002780 <HAL_Init+0x40>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002768:	2003      	movs	r0, #3
 800276a:	f000 fd61 	bl	8003230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800276e:	2000      	movs	r0, #0
 8002770:	f000 f808 	bl	8002784 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002774:	f7ff fcc2 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40023c00 	.word	0x40023c00

08002784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <HAL_InitTick+0x54>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <HAL_InitTick+0x58>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800279a:	fbb3 f3f1 	udiv	r3, r3, r1
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 fd79 	bl	800329a <HAL_SYSTICK_Config>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e00e      	b.n	80027d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b0f      	cmp	r3, #15
 80027b6:	d80a      	bhi.n	80027ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027b8:	2200      	movs	r2, #0
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	f04f 30ff 	mov.w	r0, #4294967295
 80027c0:	f000 fd41 	bl	8003246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <HAL_InitTick+0x5c>)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000288 	.word	0x20000288
 80027dc:	20000290 	.word	0x20000290
 80027e0:	2000028c 	.word	0x2000028c

080027e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_IncTick+0x20>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_IncTick+0x24>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a04      	ldr	r2, [pc, #16]	; (8002808 <HAL_IncTick+0x24>)
 80027f6:	6013      	str	r3, [r2, #0]
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	20000290 	.word	0x20000290
 8002808:	20000660 	.word	0x20000660

0800280c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return uwTick;
 8002810:	4b03      	ldr	r3, [pc, #12]	; (8002820 <HAL_GetTick+0x14>)
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	20000660 	.word	0x20000660

08002824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff ffee 	bl	800280c <HAL_GetTick>
 8002830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d005      	beq.n	800284a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800283e:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <HAL_Delay+0x44>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800284a:	bf00      	nop
 800284c:	f7ff ffde 	bl	800280c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	429a      	cmp	r2, r3
 800285a:	d8f7      	bhi.n	800284c <HAL_Delay+0x28>
  {
  }
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000290 	.word	0x20000290

0800286c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e033      	b.n	80028ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fc00 	bl	8001090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d118      	bne.n	80028dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028b2:	f023 0302 	bic.w	r3, r3, #2
 80028b6:	f043 0202 	orr.w	r2, r3, #2
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa68 	bl	8002d94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
 80028da:	e001      	b.n	80028e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
	...

080028f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800290a:	2b01      	cmp	r3, #1
 800290c:	d101      	bne.n	8002912 <HAL_ADC_Start_DMA+0x1e>
 800290e:	2302      	movs	r3, #2
 8002910:	e0e9      	b.n	8002ae6 <HAL_ADC_Start_DMA+0x1f2>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b01      	cmp	r3, #1
 8002926:	d018      	beq.n	800295a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002938:	4b6d      	ldr	r3, [pc, #436]	; (8002af0 <HAL_ADC_Start_DMA+0x1fc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a6d      	ldr	r2, [pc, #436]	; (8002af4 <HAL_ADC_Start_DMA+0x200>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	0c9a      	lsrs	r2, r3, #18
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800294c:	e002      	b.n	8002954 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	3b01      	subs	r3, #1
 8002952:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f9      	bne.n	800294e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002968:	d107      	bne.n	800297a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002978:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 80a1 	bne.w	8002acc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002992:	f023 0301 	bic.w	r3, r3, #1
 8002996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c8:	d106      	bne.n	80029d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f023 0206 	bic.w	r2, r3, #6
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	645a      	str	r2, [r3, #68]	; 0x44
 80029d6:	e002      	b.n	80029de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_ADC_Start_DMA+0x204>)
 80029e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	4a43      	ldr	r2, [pc, #268]	; (8002afc <HAL_ADC_Start_DMA+0x208>)
 80029f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	4a42      	ldr	r2, [pc, #264]	; (8002b00 <HAL_ADC_Start_DMA+0x20c>)
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	4a41      	ldr	r2, [pc, #260]	; (8002b04 <HAL_ADC_Start_DMA+0x210>)
 8002a00:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a1a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a2a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	334c      	adds	r3, #76	; 0x4c
 8002a36:	4619      	mov	r1, r3
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f000 fd7e 	bl	800353c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d12a      	bne.n	8002aa2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a2d      	ldr	r2, [pc, #180]	; (8002b08 <HAL_ADC_Start_DMA+0x214>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d015      	beq.n	8002a82 <HAL_ADC_Start_DMA+0x18e>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <HAL_ADC_Start_DMA+0x218>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_Start_DMA+0x178>
 8002a60:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_ADC_Start_DMA+0x204>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a27      	ldr	r2, [pc, #156]	; (8002b10 <HAL_ADC_Start_DMA+0x21c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d136      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
 8002a76:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_ADC_Start_DMA+0x204>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d130      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d129      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	e020      	b.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <HAL_ADC_Start_DMA+0x214>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11b      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d114      	bne.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ac8:	609a      	str	r2, [r3, #8]
 8002aca:	e00b      	b.n	8002ae4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	f043 0201 	orr.w	r2, r3, #1
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000288 	.word	0x20000288
 8002af4:	431bde83 	.word	0x431bde83
 8002af8:	40012300 	.word	0x40012300
 8002afc:	08002f8d 	.word	0x08002f8d
 8002b00:	08003047 	.word	0x08003047
 8002b04:	08003063 	.word	0x08003063
 8002b08:	40012000 	.word	0x40012000
 8002b0c:	40012100 	.word	0x40012100
 8002b10:	40012200 	.word	0x40012200

08002b14 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d101      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x1c>
 8002b68:	2302      	movs	r3, #2
 8002b6a:	e105      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x228>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d925      	bls.n	8002bc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	3b1e      	subs	r3, #30
 8002b92:	2207      	movs	r2, #7
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43da      	mvns	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	400a      	ands	r2, r1
 8002ba0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68d9      	ldr	r1, [r3, #12]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4403      	add	r3, r0
 8002bba:	3b1e      	subs	r3, #30
 8002bbc:	409a      	lsls	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	e022      	b.n	8002c0e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6919      	ldr	r1, [r3, #16]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	2207      	movs	r2, #7
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	400a      	ands	r2, r1
 8002bea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6919      	ldr	r1, [r3, #16]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	4603      	mov	r3, r0
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	4403      	add	r3, r0
 8002c04:	409a      	lsls	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	2b06      	cmp	r3, #6
 8002c14:	d824      	bhi.n	8002c60 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	3b05      	subs	r3, #5
 8002c28:	221f      	movs	r2, #31
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43da      	mvns	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	400a      	ands	r2, r1
 8002c36:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	3b05      	subs	r3, #5
 8002c52:	fa00 f203 	lsl.w	r2, r0, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002c5e:	e04c      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d824      	bhi.n	8002cb2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	3b23      	subs	r3, #35	; 0x23
 8002c7a:	221f      	movs	r2, #31
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43da      	mvns	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	400a      	ands	r2, r1
 8002c88:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b23      	subs	r3, #35	; 0x23
 8002ca4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	631a      	str	r2, [r3, #48]	; 0x30
 8002cb0:	e023      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3b41      	subs	r3, #65	; 0x41
 8002cc4:	221f      	movs	r2, #31
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685a      	ldr	r2, [r3, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	3b41      	subs	r3, #65	; 0x41
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_ADC_ConfigChannel+0x234>)
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <HAL_ADC_ConfigChannel+0x238>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d109      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1cc>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b12      	cmp	r3, #18
 8002d0e:	d105      	bne.n	8002d1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a19      	ldr	r2, [pc, #100]	; (8002d88 <HAL_ADC_ConfigChannel+0x238>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d123      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x21e>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d003      	beq.n	8002d36 <HAL_ADC_ConfigChannel+0x1e6>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b11      	cmp	r3, #17
 8002d34:	d11b      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d111      	bne.n	8002d6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <HAL_ADC_ConfigChannel+0x23c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a10      	ldr	r2, [pc, #64]	; (8002d90 <HAL_ADC_ConfigChannel+0x240>)
 8002d50:	fba2 2303 	umull	r2, r3, r2, r3
 8002d54:	0c9a      	lsrs	r2, r3, #18
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d60:	e002      	b.n	8002d68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	3b01      	subs	r3, #1
 8002d66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f9      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40012300 	.word	0x40012300
 8002d88:	40012000 	.word	0x40012000
 8002d8c:	20000288 	.word	0x20000288
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d9c:	4b79      	ldr	r3, [pc, #484]	; (8002f84 <ADC_Init+0x1f0>)
 8002d9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	021a      	lsls	r2, r3, #8
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6859      	ldr	r1, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	689a      	ldr	r2, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <ADC_Init+0x1f4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d022      	beq.n	8002e72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e00f      	b.n	8002e92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0202 	bic.w	r2, r2, #2
 8002ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6899      	ldr	r1, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	7e1b      	ldrb	r3, [r3, #24]
 8002eac:	005a      	lsls	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01b      	beq.n	8002ef8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	3b01      	subs	r3, #1
 8002eec:	035a      	lsls	r2, r3, #13
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	605a      	str	r2, [r3, #4]
 8002ef6:	e007      	b.n	8002f08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	051a      	lsls	r2, r3, #20
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f4a:	025a      	lsls	r2, r3, #9
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	029a      	lsls	r2, r3, #10
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	40012300 	.word	0x40012300
 8002f88:	0f000001 	.word	0x0f000001

08002f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13c      	bne.n	8003020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d12b      	bne.n	8003018 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d127      	bne.n	8003018 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d119      	bne.n	8003018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0220 	bic.w	r2, r2, #32
 8002ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f7ff fd7b 	bl	8002b14 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800301e:	e00e      	b.n	800303e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fd85 	bl	8002b3c <HAL_ADC_ErrorCallback>
}
 8003032:	e004      	b.n	800303e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	4798      	blx	r3
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b084      	sub	sp, #16
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f7ff fd67 	bl	8002b28 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2240      	movs	r2, #64	; 0x40
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f7ff fd5a 	bl	8002b3c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003088:	bf00      	nop
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f003 0307 	and.w	r3, r3, #7
 800309e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ac:	4013      	ands	r3, r2
 80030ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c2:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <__NVIC_SetPriorityGrouping+0x44>)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60d3      	str	r3, [r2, #12]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000ed00 	.word	0xe000ed00

080030d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030dc:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <__NVIC_GetPriorityGrouping+0x18>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	0a1b      	lsrs	r3, r3, #8
 80030e2:	f003 0307 	and.w	r3, r3, #7
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	db0b      	blt.n	800311e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	f003 021f 	and.w	r2, r3, #31
 800310c:	4907      	ldr	r1, [pc, #28]	; (800312c <__NVIC_EnableIRQ+0x38>)
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	2001      	movs	r0, #1
 8003116:	fa00 f202 	lsl.w	r2, r0, r2
 800311a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	e000e100 	.word	0xe000e100

08003130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	6039      	str	r1, [r7, #0]
 800313a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003140:	2b00      	cmp	r3, #0
 8003142:	db0a      	blt.n	800315a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	490c      	ldr	r1, [pc, #48]	; (800317c <__NVIC_SetPriority+0x4c>)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	440b      	add	r3, r1
 8003154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003158:	e00a      	b.n	8003170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	b2da      	uxtb	r2, r3
 800315e:	4908      	ldr	r1, [pc, #32]	; (8003180 <__NVIC_SetPriority+0x50>)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	3b04      	subs	r3, #4
 8003168:	0112      	lsls	r2, r2, #4
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	440b      	add	r3, r1
 800316e:	761a      	strb	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	e000e100 	.word	0xe000e100
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003184:	b480      	push	{r7}
 8003186:	b089      	sub	sp, #36	; 0x24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	f1c3 0307 	rsb	r3, r3, #7
 800319e:	2b04      	cmp	r3, #4
 80031a0:	bf28      	it	cs
 80031a2:	2304      	movcs	r3, #4
 80031a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3304      	adds	r3, #4
 80031aa:	2b06      	cmp	r3, #6
 80031ac:	d902      	bls.n	80031b4 <NVIC_EncodePriority+0x30>
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	3b03      	subs	r3, #3
 80031b2:	e000      	b.n	80031b6 <NVIC_EncodePriority+0x32>
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031b8:	f04f 32ff 	mov.w	r2, #4294967295
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43da      	mvns	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	401a      	ands	r2, r3
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031cc:	f04f 31ff 	mov.w	r1, #4294967295
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	fa01 f303 	lsl.w	r3, r1, r3
 80031d6:	43d9      	mvns	r1, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031dc:	4313      	orrs	r3, r2
         );
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3724      	adds	r7, #36	; 0x24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3b01      	subs	r3, #1
 80031f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031fc:	d301      	bcc.n	8003202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031fe:	2301      	movs	r3, #1
 8003200:	e00f      	b.n	8003222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003202:	4a0a      	ldr	r2, [pc, #40]	; (800322c <SysTick_Config+0x40>)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3b01      	subs	r3, #1
 8003208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800320a:	210f      	movs	r1, #15
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	f7ff ff8e 	bl	8003130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <SysTick_Config+0x40>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800321a:	4b04      	ldr	r3, [pc, #16]	; (800322c <SysTick_Config+0x40>)
 800321c:	2207      	movs	r2, #7
 800321e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	e000e010 	.word	0xe000e010

08003230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff29 	bl	8003090 <__NVIC_SetPriorityGrouping>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003246:	b580      	push	{r7, lr}
 8003248:	b086      	sub	sp, #24
 800324a:	af00      	add	r7, sp, #0
 800324c:	4603      	mov	r3, r0
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003254:	2300      	movs	r3, #0
 8003256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003258:	f7ff ff3e 	bl	80030d8 <__NVIC_GetPriorityGrouping>
 800325c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	68b9      	ldr	r1, [r7, #8]
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff8e 	bl	8003184 <NVIC_EncodePriority>
 8003268:	4602      	mov	r2, r0
 800326a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff ff5d 	bl	8003130 <__NVIC_SetPriority>
}
 8003276:	bf00      	nop
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b082      	sub	sp, #8
 8003282:	af00      	add	r7, sp, #0
 8003284:	4603      	mov	r3, r0
 8003286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff ff31 	bl	80030f4 <__NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff ffa2 	bl	80031ec <SysTick_Config>
 80032a8:	4603      	mov	r3, r0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b082      	sub	sp, #8
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e014      	b.n	80032ee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	791b      	ldrb	r3, [r3, #4]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d105      	bne.n	80032da <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fd ff7d 	bl	80011d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2202      	movs	r2, #2
 80032de:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	3308      	adds	r3, #8
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	e004      	b.n	800332a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	3314      	adds	r3, #20
 8003328:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003340:	b480      	push	{r7}
 8003342:	b087      	sub	sp, #28
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	795b      	ldrb	r3, [r3, #5]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_DAC_ConfigChannel+0x18>
 8003354:	2302      	movs	r3, #2
 8003356:	e03c      	b.n	80033d2 <HAL_DAC_ConfigChannel+0x92>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2202      	movs	r2, #2
 8003362:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	43db      	mvns	r3, r3
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4013      	ands	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	4313      	orrs	r3, r2
 800339e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6819      	ldr	r1, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	22c0      	movs	r2, #192	; 0xc0
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43da      	mvns	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	400a      	ands	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2201      	movs	r2, #1
 80033c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033ec:	f7ff fa0e 	bl	800280c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e099      	b.n	8003530 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341c:	e00f      	b.n	800343e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800341e:	f7ff f9f5 	bl	800280c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b05      	cmp	r3, #5
 800342a:	d908      	bls.n	800343e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2203      	movs	r2, #3
 8003436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e078      	b.n	8003530 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e8      	bne.n	800341e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	4b38      	ldr	r3, [pc, #224]	; (8003538 <HAL_DMA_Init+0x158>)
 8003458:	4013      	ands	r3, r2
 800345a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	4313      	orrs	r3, r2
 800348e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	4313      	orrs	r3, r2
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f023 0307 	bic.w	r3, r3, #7
 80034be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d117      	bne.n	8003502 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	4313      	orrs	r3, r2
 80034da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00e      	beq.n	8003502 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fb01 	bl	8003aec <DMA_CheckFifoParam>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2240      	movs	r2, #64	; 0x40
 80034f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034fe:	2301      	movs	r3, #1
 8003500:	e016      	b.n	8003530 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fab8 	bl	8003a80 <DMA_CalcBaseAndBitshift>
 8003510:	4603      	mov	r3, r0
 8003512:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003518:	223f      	movs	r2, #63	; 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	f010803f 	.word	0xf010803f

0800353c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003552:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355a:	2b01      	cmp	r3, #1
 800355c:	d101      	bne.n	8003562 <HAL_DMA_Start_IT+0x26>
 800355e:	2302      	movs	r3, #2
 8003560:	e040      	b.n	80035e4 <HAL_DMA_Start_IT+0xa8>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b01      	cmp	r3, #1
 8003574:	d12f      	bne.n	80035d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa4a 	bl	8003a24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	223f      	movs	r2, #63	; 0x3f
 8003596:	409a      	lsls	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0216 	orr.w	r2, r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0208 	orr.w	r2, r2, #8
 80035c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f042 0201 	orr.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e005      	b.n	80035e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035de:	2302      	movs	r3, #2
 80035e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035fa:	f7ff f907 	bl	800280c <HAL_GetTick>
 80035fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d008      	beq.n	800361e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2280      	movs	r2, #128	; 0x80
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e052      	b.n	80036c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0216 	bic.w	r2, r2, #22
 800362c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800363c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003642:	2b00      	cmp	r3, #0
 8003644:	d103      	bne.n	800364e <HAL_DMA_Abort+0x62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0208 	bic.w	r2, r2, #8
 800365c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800366e:	e013      	b.n	8003698 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003670:	f7ff f8cc 	bl	800280c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b05      	cmp	r3, #5
 800367c:	d90c      	bls.n	8003698 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2203      	movs	r2, #3
 8003688:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e015      	b.n	80036c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1e4      	bne.n	8003670 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	223f      	movs	r2, #63	; 0x3f
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d004      	beq.n	80036ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e00c      	b.n	8003704 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2205      	movs	r2, #5
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0201 	bic.w	r2, r2, #1
 8003700:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800371c:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_DMA_IRQHandler+0x258>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a92      	ldr	r2, [pc, #584]	; (800396c <HAL_DMA_IRQHandler+0x25c>)
 8003722:	fba2 2303 	umull	r2, r3, r2, r3
 8003726:	0a9b      	lsrs	r3, r3, #10
 8003728:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800372e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373a:	2208      	movs	r2, #8
 800373c:	409a      	lsls	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4013      	ands	r3, r2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01a      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d013      	beq.n	800377c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0204 	bic.w	r2, r2, #4
 8003762:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003768:	2208      	movs	r2, #8
 800376a:	409a      	lsls	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003774:	f043 0201 	orr.w	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2201      	movs	r2, #1
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d012      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	695b      	ldr	r3, [r3, #20]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00b      	beq.n	80037b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	2201      	movs	r2, #1
 80037a0:	409a      	lsls	r2, r3
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037aa:	f043 0202 	orr.w	r2, r3, #2
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	2204      	movs	r2, #4
 80037b8:	409a      	lsls	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d012      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00b      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d4:	2204      	movs	r2, #4
 80037d6:	409a      	lsls	r2, r3
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e0:	f043 0204 	orr.w	r2, r3, #4
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ec:	2210      	movs	r2, #16
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d043      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d03c      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	2210      	movs	r2, #16
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d018      	beq.n	8003852 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d108      	bne.n	8003840 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d024      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e01f      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01b      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e016      	b.n	8003880 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d107      	bne.n	8003870 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0208 	bic.w	r2, r2, #8
 800386e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003884:	2220      	movs	r2, #32
 8003886:	409a      	lsls	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 808e 	beq.w	80039ae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 8086 	beq.w	80039ae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a6:	2220      	movs	r2, #32
 80038a8:	409a      	lsls	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b05      	cmp	r3, #5
 80038b8:	d136      	bne.n	8003928 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0216 	bic.w	r2, r2, #22
 80038c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_DMA_IRQHandler+0x1da>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d007      	beq.n	80038fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0208 	bic.w	r2, r2, #8
 80038f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038fe:	223f      	movs	r2, #63	; 0x3f
 8003900:	409a      	lsls	r2, r3
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391a:	2b00      	cmp	r3, #0
 800391c:	d07d      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
        }
        return;
 8003926:	e078      	b.n	8003a1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d01c      	beq.n	8003970 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003948:	2b00      	cmp	r3, #0
 800394a:	d030      	beq.n	80039ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
 8003954:	e02b      	b.n	80039ae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d027      	beq.n	80039ae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4798      	blx	r3
 8003966:	e022      	b.n	80039ae <HAL_DMA_IRQHandler+0x29e>
 8003968:	20000288 	.word	0x20000288
 800396c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0210 	bic.w	r2, r2, #16
 800398c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d032      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d022      	beq.n	8003a08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2205      	movs	r2, #5
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d307      	bcc.n	80039f6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f2      	bne.n	80039da <HAL_DMA_IRQHandler+0x2ca>
 80039f4:	e000      	b.n	80039f8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039f6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e000      	b.n	8003a1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a1a:	bf00      	nop
    }
  }
}
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop

08003a24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
 8003a30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d108      	bne.n	8003a64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a62:	e007      	b.n	8003a74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	3b10      	subs	r3, #16
 8003a90:	4a14      	ldr	r2, [pc, #80]	; (8003ae4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a9a:	4a13      	ldr	r2, [pc, #76]	; (8003ae8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d909      	bls.n	8003ac2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ab6:	f023 0303 	bic.w	r3, r3, #3
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	659a      	str	r2, [r3, #88]	; 0x58
 8003ac0:	e007      	b.n	8003ad2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	aaaaaaab 	.word	0xaaaaaaab
 8003ae8:	0800c194 	.word	0x0800c194

08003aec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11f      	bne.n	8003b46 <DMA_CheckFifoParam+0x5a>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d856      	bhi.n	8003bba <DMA_CheckFifoParam+0xce>
 8003b0c:	a201      	add	r2, pc, #4	; (adr r2, 8003b14 <DMA_CheckFifoParam+0x28>)
 8003b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b12:	bf00      	nop
 8003b14:	08003b25 	.word	0x08003b25
 8003b18:	08003b37 	.word	0x08003b37
 8003b1c:	08003b25 	.word	0x08003b25
 8003b20:	08003bbb 	.word	0x08003bbb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d046      	beq.n	8003bbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b34:	e043      	b.n	8003bbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b3e:	d140      	bne.n	8003bc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b44:	e03d      	b.n	8003bc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4e:	d121      	bne.n	8003b94 <DMA_CheckFifoParam+0xa8>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d837      	bhi.n	8003bc6 <DMA_CheckFifoParam+0xda>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <DMA_CheckFifoParam+0x70>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003b6d 	.word	0x08003b6d
 8003b60:	08003b73 	.word	0x08003b73
 8003b64:	08003b6d 	.word	0x08003b6d
 8003b68:	08003b85 	.word	0x08003b85
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b70:	e030      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d025      	beq.n	8003bca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b82:	e022      	b.n	8003bca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b8c:	d11f      	bne.n	8003bce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b92:	e01c      	b.n	8003bce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d903      	bls.n	8003ba2 <DMA_CheckFifoParam+0xb6>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d003      	beq.n	8003ba8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ba0:	e018      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba6:	e015      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00e      	beq.n	8003bd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb8:	e00b      	b.n	8003bd2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e00a      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e008      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc2:	bf00      	nop
 8003bc4:	e006      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
 8003bc8:	e004      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e002      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bce:	bf00      	nop
 8003bd0:	e000      	b.n	8003bd4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bd2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop

08003be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e16b      	b.n	8003ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c00:	2201      	movs	r2, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4013      	ands	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	f040 815a 	bne.w	8003ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d005      	beq.n	8003c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d130      	bne.n	8003c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	2203      	movs	r2, #3
 8003c42:	fa02 f303 	lsl.w	r3, r2, r3
 8003c46:	43db      	mvns	r3, r3
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68da      	ldr	r2, [r3, #12]
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	43db      	mvns	r3, r3
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	f003 0201 	and.w	r2, r3, #1
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d017      	beq.n	8003cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	2203      	movs	r2, #3
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d123      	bne.n	8003d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	08da      	lsrs	r2, r3, #3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3208      	adds	r2, #8
 8003ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	220f      	movs	r2, #15
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	691a      	ldr	r2, [r3, #16]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	08da      	lsrs	r2, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3208      	adds	r2, #8
 8003d22:	69b9      	ldr	r1, [r7, #24]
 8003d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	2203      	movs	r2, #3
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 0203 	and.w	r2, r3, #3
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80b4 	beq.w	8003ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	4b60      	ldr	r3, [pc, #384]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	4a5f      	ldr	r2, [pc, #380]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d78:	6453      	str	r3, [r2, #68]	; 0x44
 8003d7a:	4b5d      	ldr	r3, [pc, #372]	; (8003ef0 <HAL_GPIO_Init+0x30c>)
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_GPIO_Init+0x310>)
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	3302      	adds	r3, #2
 8003d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	220f      	movs	r2, #15
 8003d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a52      	ldr	r2, [pc, #328]	; (8003ef8 <HAL_GPIO_Init+0x314>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d02b      	beq.n	8003e0a <HAL_GPIO_Init+0x226>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a51      	ldr	r2, [pc, #324]	; (8003efc <HAL_GPIO_Init+0x318>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d025      	beq.n	8003e06 <HAL_GPIO_Init+0x222>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a50      	ldr	r2, [pc, #320]	; (8003f00 <HAL_GPIO_Init+0x31c>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01f      	beq.n	8003e02 <HAL_GPIO_Init+0x21e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a4f      	ldr	r2, [pc, #316]	; (8003f04 <HAL_GPIO_Init+0x320>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d019      	beq.n	8003dfe <HAL_GPIO_Init+0x21a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a4e      	ldr	r2, [pc, #312]	; (8003f08 <HAL_GPIO_Init+0x324>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_GPIO_Init+0x216>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a4d      	ldr	r2, [pc, #308]	; (8003f0c <HAL_GPIO_Init+0x328>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00d      	beq.n	8003df6 <HAL_GPIO_Init+0x212>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a4c      	ldr	r2, [pc, #304]	; (8003f10 <HAL_GPIO_Init+0x32c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d007      	beq.n	8003df2 <HAL_GPIO_Init+0x20e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4b      	ldr	r2, [pc, #300]	; (8003f14 <HAL_GPIO_Init+0x330>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d101      	bne.n	8003dee <HAL_GPIO_Init+0x20a>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e00e      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dee:	2308      	movs	r3, #8
 8003df0:	e00c      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003df2:	2306      	movs	r3, #6
 8003df4:	e00a      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003df6:	2305      	movs	r3, #5
 8003df8:	e008      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	e006      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e004      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e002      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e06:	2301      	movs	r3, #1
 8003e08:	e000      	b.n	8003e0c <HAL_GPIO_Init+0x228>
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	f002 0203 	and.w	r2, r2, #3
 8003e12:	0092      	lsls	r2, r2, #2
 8003e14:	4093      	lsls	r3, r2
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e1c:	4935      	ldr	r1, [pc, #212]	; (8003ef4 <HAL_GPIO_Init+0x310>)
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	089b      	lsrs	r3, r3, #2
 8003e22:	3302      	adds	r3, #2
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e2a:	4b3b      	ldr	r3, [pc, #236]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4e:	4a32      	ldr	r2, [pc, #200]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e54:	4b30      	ldr	r3, [pc, #192]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4013      	ands	r3, r2
 8003e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e78:	4a27      	ldr	r2, [pc, #156]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ecc:	4a12      	ldr	r2, [pc, #72]	; (8003f18 <HAL_GPIO_Init+0x334>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b0f      	cmp	r3, #15
 8003edc:	f67f ae90 	bls.w	8003c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3724      	adds	r7, #36	; 0x24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40020000 	.word	0x40020000
 8003efc:	40020400 	.word	0x40020400
 8003f00:	40020800 	.word	0x40020800
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40021400 	.word	0x40021400
 8003f10:	40021800 	.word	0x40021800
 8003f14:	40021c00 	.word	0x40021c00
 8003f18:	40013c00 	.word	0x40013c00

08003f1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	460b      	mov	r3, r1
 8003f26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	887b      	ldrh	r3, [r7, #2]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f34:	2301      	movs	r3, #1
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e001      	b.n	8003f3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	807b      	strh	r3, [r7, #2]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f5c:	787b      	ldrb	r3, [r7, #1]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f68:	e003      	b.n	8003f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f6a:	887b      	ldrh	r3, [r7, #2]
 8003f6c:	041a      	lsls	r2, r3, #16
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b085      	sub	sp, #20
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f90:	887a      	ldrh	r2, [r7, #2]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4013      	ands	r3, r2
 8003f96:	041a      	lsls	r2, r3, #16
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	43d9      	mvns	r1, r3
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	400b      	ands	r3, r1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	619a      	str	r2, [r3, #24]
}
 8003fa6:	bf00      	nop
 8003fa8:	3714      	adds	r7, #20
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
	...

08003fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e264      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d075      	beq.n	80040be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fd2:	4ba3      	ldr	r3, [pc, #652]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
 8003fda:	2b04      	cmp	r3, #4
 8003fdc:	d00c      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fde:	4ba0      	ldr	r3, [pc, #640]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d112      	bne.n	8004010 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fea:	4b9d      	ldr	r3, [pc, #628]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ff6:	d10b      	bne.n	8004010 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff8:	4b99      	ldr	r3, [pc, #612]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d05b      	beq.n	80040bc <HAL_RCC_OscConfig+0x108>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d157      	bne.n	80040bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e23f      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d106      	bne.n	8004028 <HAL_RCC_OscConfig+0x74>
 800401a:	4b91      	ldr	r3, [pc, #580]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a90      	ldr	r2, [pc, #576]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e01d      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x98>
 8004032:	4b8b      	ldr	r3, [pc, #556]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a8a      	ldr	r2, [pc, #552]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	4b88      	ldr	r3, [pc, #544]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a87      	ldr	r2, [pc, #540]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e00b      	b.n	8004064 <HAL_RCC_OscConfig+0xb0>
 800404c:	4b84      	ldr	r3, [pc, #528]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a83      	ldr	r2, [pc, #524]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b81      	ldr	r3, [pc, #516]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a80      	ldr	r2, [pc, #512]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 800405e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d013      	beq.n	8004094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fbce 	bl	800280c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004074:	f7fe fbca 	bl	800280c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b64      	cmp	r3, #100	; 0x64
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e204      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004086:	4b76      	ldr	r3, [pc, #472]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d0f0      	beq.n	8004074 <HAL_RCC_OscConfig+0xc0>
 8004092:	e014      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fbba 	bl	800280c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800409c:	f7fe fbb6 	bl	800280c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b64      	cmp	r3, #100	; 0x64
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e1f0      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ae:	4b6c      	ldr	r3, [pc, #432]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0xe8>
 80040ba:	e000      	b.n	80040be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d063      	beq.n	8004192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ca:	4b65      	ldr	r3, [pc, #404]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b62      	ldr	r3, [pc, #392]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11c      	bne.n	800411c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e2:	4b5f      	ldr	r3, [pc, #380]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d116      	bne.n	800411c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ee:	4b5c      	ldr	r3, [pc, #368]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_RCC_OscConfig+0x152>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d001      	beq.n	8004106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e1c4      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004106:	4b56      	ldr	r3, [pc, #344]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	4952      	ldr	r1, [pc, #328]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411a:	e03a      	b.n	8004192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d020      	beq.n	8004166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004124:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <HAL_RCC_OscConfig+0x2b0>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412a:	f7fe fb6f 	bl	800280c <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004132:	f7fe fb6b 	bl	800280c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e1a5      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004144:	4b46      	ldr	r3, [pc, #280]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004150:	4b43      	ldr	r3, [pc, #268]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	4940      	ldr	r1, [pc, #256]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	4313      	orrs	r3, r2
 8004162:	600b      	str	r3, [r1, #0]
 8004164:	e015      	b.n	8004192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004166:	4b3f      	ldr	r3, [pc, #252]	; (8004264 <HAL_RCC_OscConfig+0x2b0>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fb4e 	bl	800280c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004174:	f7fe fb4a 	bl	800280c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e184      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d030      	beq.n	8004200 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d016      	beq.n	80041d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041a6:	4b30      	ldr	r3, [pc, #192]	; (8004268 <HAL_RCC_OscConfig+0x2b4>)
 80041a8:	2201      	movs	r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fe fb2e 	bl	800280c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b4:	f7fe fb2a 	bl	800280c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e164      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80041c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x200>
 80041d2:	e015      	b.n	8004200 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d4:	4b24      	ldr	r3, [pc, #144]	; (8004268 <HAL_RCC_OscConfig+0x2b4>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041da:	f7fe fb17 	bl	800280c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e2:	f7fe fb13 	bl	800280c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e14d      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 80041f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f0      	bne.n	80041e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80a0 	beq.w	800434e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420e:	2300      	movs	r3, #0
 8004210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10f      	bne.n	800423e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60bb      	str	r3, [r7, #8]
 8004222:	4b0f      	ldr	r3, [pc, #60]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a0e      	ldr	r2, [pc, #56]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800423a:	2301      	movs	r3, #1
 800423c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423e:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_RCC_OscConfig+0x2b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004246:	2b00      	cmp	r3, #0
 8004248:	d121      	bne.n	800428e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_RCC_OscConfig+0x2b8>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_RCC_OscConfig+0x2b8>)
 8004250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004256:	f7fe fad9 	bl	800280c <HAL_GetTick>
 800425a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	e011      	b.n	8004282 <HAL_RCC_OscConfig+0x2ce>
 800425e:	bf00      	nop
 8004260:	40023800 	.word	0x40023800
 8004264:	42470000 	.word	0x42470000
 8004268:	42470e80 	.word	0x42470e80
 800426c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004270:	f7fe facc 	bl	800280c <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e106      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b85      	ldr	r3, [pc, #532]	; (8004498 <HAL_RCC_OscConfig+0x4e4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2f0>
 8004296:	4b81      	ldr	r3, [pc, #516]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a80      	ldr	r2, [pc, #512]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
 80042a2:	e01c      	b.n	80042de <HAL_RCC_OscConfig+0x32a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b05      	cmp	r3, #5
 80042aa:	d10c      	bne.n	80042c6 <HAL_RCC_OscConfig+0x312>
 80042ac:	4b7b      	ldr	r3, [pc, #492]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a7a      	ldr	r2, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042b2:	f043 0304 	orr.w	r3, r3, #4
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	4b78      	ldr	r3, [pc, #480]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a77      	ldr	r2, [pc, #476]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
 80042c4:	e00b      	b.n	80042de <HAL_RCC_OscConfig+0x32a>
 80042c6:	4b75      	ldr	r3, [pc, #468]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a74      	ldr	r2, [pc, #464]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
 80042d2:	4b72      	ldr	r3, [pc, #456]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a71      	ldr	r2, [pc, #452]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80042d8:	f023 0304 	bic.w	r3, r3, #4
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d015      	beq.n	8004312 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e6:	f7fe fa91 	bl	800280c <HAL_GetTick>
 80042ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ec:	e00a      	b.n	8004304 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fe fa8d 	bl	800280c <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e0c5      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004304:	4b65      	ldr	r3, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0ee      	beq.n	80042ee <HAL_RCC_OscConfig+0x33a>
 8004310:	e014      	b.n	800433c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004312:	f7fe fa7b 	bl	800280c <HAL_GetTick>
 8004316:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004318:	e00a      	b.n	8004330 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800431a:	f7fe fa77 	bl	800280c <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	f241 3288 	movw	r2, #5000	; 0x1388
 8004328:	4293      	cmp	r3, r2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0af      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004330:	4b5a      	ldr	r3, [pc, #360]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ee      	bne.n	800431a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433c:	7dfb      	ldrb	r3, [r7, #23]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d105      	bne.n	800434e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004342:	4b56      	ldr	r3, [pc, #344]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a55      	ldr	r2, [pc, #340]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 809b 	beq.w	800448e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004358:	4b50      	ldr	r3, [pc, #320]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d05c      	beq.n	800441e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b02      	cmp	r3, #2
 800436a:	d141      	bne.n	80043f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436c:	4b4c      	ldr	r3, [pc, #304]	; (80044a0 <HAL_RCC_OscConfig+0x4ec>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004372:	f7fe fa4b 	bl	800280c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004378:	e008      	b.n	800438c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fa47 	bl	800280c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e081      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438c:	4b43      	ldr	r3, [pc, #268]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1f0      	bne.n	800437a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69da      	ldr	r2, [r3, #28]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	019b      	lsls	r3, r3, #6
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	085b      	lsrs	r3, r3, #1
 80043b0:	3b01      	subs	r3, #1
 80043b2:	041b      	lsls	r3, r3, #16
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	4937      	ldr	r1, [pc, #220]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c2:	4b37      	ldr	r3, [pc, #220]	; (80044a0 <HAL_RCC_OscConfig+0x4ec>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fe fa20 	bl	800280c <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d0:	f7fe fa1c 	bl	800280c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e056      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e2:	4b2e      	ldr	r3, [pc, #184]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0x41c>
 80043ee:	e04e      	b.n	800448e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <HAL_RCC_OscConfig+0x4ec>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f6:	f7fe fa09 	bl	800280c <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fe:	f7fe fa05 	bl	800280c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e03f      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004410:	4b22      	ldr	r3, [pc, #136]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x44a>
 800441c:	e037      	b.n	800448e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e032      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800442a:	4b1c      	ldr	r3, [pc, #112]	; (800449c <HAL_RCC_OscConfig+0x4e8>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d028      	beq.n	800448a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d121      	bne.n	800448a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d11a      	bne.n	800448a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800445a:	4013      	ands	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004460:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004462:	4293      	cmp	r3, r2
 8004464:	d111      	bne.n	800448a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	085b      	lsrs	r3, r3, #1
 8004472:	3b01      	subs	r3, #1
 8004474:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004476:	429a      	cmp	r2, r3
 8004478:	d107      	bne.n	800448a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d001      	beq.n	800448e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3718      	adds	r7, #24
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40007000 	.word	0x40007000
 800449c:	40023800 	.word	0x40023800
 80044a0:	42470060 	.word	0x42470060

080044a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0cc      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b68      	ldr	r3, [pc, #416]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d90c      	bls.n	80044e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b63      	ldr	r3, [pc, #396]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e0b8      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d020      	beq.n	800452e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f8:	4b59      	ldr	r3, [pc, #356]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a58      	ldr	r2, [pc, #352]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004502:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004510:	4b53      	ldr	r3, [pc, #332]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a52      	ldr	r2, [pc, #328]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800451a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800451c:	4b50      	ldr	r3, [pc, #320]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	494d      	ldr	r1, [pc, #308]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d044      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d107      	bne.n	8004552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004542:	4b47      	ldr	r3, [pc, #284]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d119      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e07f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d003      	beq.n	8004562 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800455e:	2b03      	cmp	r3, #3
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	4b3f      	ldr	r3, [pc, #252]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e06f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b3b      	ldr	r3, [pc, #236]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e067      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b37      	ldr	r3, [pc, #220]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4934      	ldr	r1, [pc, #208]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004594:	f7fe f93a 	bl	800280c <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fe f936 	bl	800280c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e04f      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	4b2b      	ldr	r3, [pc, #172]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 020c 	and.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1eb      	bne.n	800459c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b25      	ldr	r3, [pc, #148]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d20c      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b22      	ldr	r3, [pc, #136]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	b2d2      	uxtb	r2, r2
 80045d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045da:	4b20      	ldr	r3, [pc, #128]	; (800465c <HAL_RCC_ClockConfig+0x1b8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d001      	beq.n	80045ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e032      	b.n	8004652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045f8:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4916      	ldr	r1, [pc, #88]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	4313      	orrs	r3, r2
 8004608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004616:	4b12      	ldr	r3, [pc, #72]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	490e      	ldr	r1, [pc, #56]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	4313      	orrs	r3, r2
 8004628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800462a:	f000 f821 	bl	8004670 <HAL_RCC_GetSysClockFreq>
 800462e:	4602      	mov	r2, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	091b      	lsrs	r3, r3, #4
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	490a      	ldr	r1, [pc, #40]	; (8004664 <HAL_RCC_ClockConfig+0x1c0>)
 800463c:	5ccb      	ldrb	r3, [r1, r3]
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	4a09      	ldr	r2, [pc, #36]	; (8004668 <HAL_RCC_ClockConfig+0x1c4>)
 8004644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004646:	4b09      	ldr	r3, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe f89a 	bl	8002784 <HAL_InitTick>

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	40023c00 	.word	0x40023c00
 8004660:	40023800 	.word	0x40023800
 8004664:	0800c17c 	.word	0x0800c17c
 8004668:	20000288 	.word	0x20000288
 800466c:	2000028c 	.word	0x2000028c

08004670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004670:	b5b0      	push	{r4, r5, r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004676:	2100      	movs	r1, #0
 8004678:	6079      	str	r1, [r7, #4]
 800467a:	2100      	movs	r1, #0
 800467c:	60f9      	str	r1, [r7, #12]
 800467e:	2100      	movs	r1, #0
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004682:	2100      	movs	r1, #0
 8004684:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004686:	4952      	ldr	r1, [pc, #328]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004688:	6889      	ldr	r1, [r1, #8]
 800468a:	f001 010c 	and.w	r1, r1, #12
 800468e:	2908      	cmp	r1, #8
 8004690:	d00d      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x3e>
 8004692:	2908      	cmp	r1, #8
 8004694:	f200 8094 	bhi.w	80047c0 <HAL_RCC_GetSysClockFreq+0x150>
 8004698:	2900      	cmp	r1, #0
 800469a:	d002      	beq.n	80046a2 <HAL_RCC_GetSysClockFreq+0x32>
 800469c:	2904      	cmp	r1, #4
 800469e:	d003      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x38>
 80046a0:	e08e      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a2:	4b4c      	ldr	r3, [pc, #304]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80046a4:	60bb      	str	r3, [r7, #8]
       break;
 80046a6:	e08e      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046a8:	4b4b      	ldr	r3, [pc, #300]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80046aa:	60bb      	str	r3, [r7, #8]
      break;
 80046ac:	e08b      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046ae:	4948      	ldr	r1, [pc, #288]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046b0:	6849      	ldr	r1, [r1, #4]
 80046b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80046b6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046b8:	4945      	ldr	r1, [pc, #276]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046ba:	6849      	ldr	r1, [r1, #4]
 80046bc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80046c0:	2900      	cmp	r1, #0
 80046c2:	d024      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046c4:	4942      	ldr	r1, [pc, #264]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80046c6:	6849      	ldr	r1, [r1, #4]
 80046c8:	0989      	lsrs	r1, r1, #6
 80046ca:	4608      	mov	r0, r1
 80046cc:	f04f 0100 	mov.w	r1, #0
 80046d0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80046d4:	f04f 0500 	mov.w	r5, #0
 80046d8:	ea00 0204 	and.w	r2, r0, r4
 80046dc:	ea01 0305 	and.w	r3, r1, r5
 80046e0:	493d      	ldr	r1, [pc, #244]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80046e2:	fb01 f003 	mul.w	r0, r1, r3
 80046e6:	2100      	movs	r1, #0
 80046e8:	fb01 f102 	mul.w	r1, r1, r2
 80046ec:	1844      	adds	r4, r0, r1
 80046ee:	493a      	ldr	r1, [pc, #232]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x168>)
 80046f0:	fba2 0101 	umull	r0, r1, r2, r1
 80046f4:	1863      	adds	r3, r4, r1
 80046f6:	4619      	mov	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	461a      	mov	r2, r3
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	f7fc fac2 	bl	8000c88 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e04a      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b30      	ldr	r3, [pc, #192]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	461a      	mov	r2, r3
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800471e:	f04f 0100 	mov.w	r1, #0
 8004722:	ea02 0400 	and.w	r4, r2, r0
 8004726:	ea03 0501 	and.w	r5, r3, r1
 800472a:	4620      	mov	r0, r4
 800472c:	4629      	mov	r1, r5
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	014b      	lsls	r3, r1, #5
 8004738:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800473c:	0142      	lsls	r2, r0, #5
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	1b00      	subs	r0, r0, r4
 8004744:	eb61 0105 	sbc.w	r1, r1, r5
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	f04f 0300 	mov.w	r3, #0
 8004750:	018b      	lsls	r3, r1, #6
 8004752:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004756:	0182      	lsls	r2, r0, #6
 8004758:	1a12      	subs	r2, r2, r0
 800475a:	eb63 0301 	sbc.w	r3, r3, r1
 800475e:	f04f 0000 	mov.w	r0, #0
 8004762:	f04f 0100 	mov.w	r1, #0
 8004766:	00d9      	lsls	r1, r3, #3
 8004768:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800476c:	00d0      	lsls	r0, r2, #3
 800476e:	4602      	mov	r2, r0
 8004770:	460b      	mov	r3, r1
 8004772:	1912      	adds	r2, r2, r4
 8004774:	eb45 0303 	adc.w	r3, r5, r3
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0299      	lsls	r1, r3, #10
 8004782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004786:	0290      	lsls	r0, r2, #10
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	461a      	mov	r2, r3
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	f7fc fa76 	bl	8000c88 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b0a      	ldr	r3, [pc, #40]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b04      	ldr	r3, [pc, #16]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x164>)
 80047c2:	60bb      	str	r3, [r7, #8]
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	68bb      	ldr	r3, [r7, #8]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bdb0      	pop	{r4, r5, r7, pc}
 80047d0:	40023800 	.word	0x40023800
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	017d7840 	.word	0x017d7840

080047dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e0:	4b03      	ldr	r3, [pc, #12]	; (80047f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e2:	681b      	ldr	r3, [r3, #0]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	20000288 	.word	0x20000288

080047f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047f8:	f7ff fff0 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 80047fc:	4602      	mov	r2, r0
 80047fe:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	0a9b      	lsrs	r3, r3, #10
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	4903      	ldr	r1, [pc, #12]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x24>)
 800480a:	5ccb      	ldrb	r3, [r1, r3]
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004810:	4618      	mov	r0, r3
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40023800 	.word	0x40023800
 8004818:	0800c18c 	.word	0x0800c18c

0800481c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004820:	f7ff ffdc 	bl	80047dc <HAL_RCC_GetHCLKFreq>
 8004824:	4602      	mov	r2, r0
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0b5b      	lsrs	r3, r3, #13
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4903      	ldr	r1, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004832:	5ccb      	ldrb	r3, [r1, r3]
 8004834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	0800c18c 	.word	0x0800c18c

08004844 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e041      	b.n	80048da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd fe58 	bl	8002520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fd3c 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d001      	beq.n	80048fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e04e      	b.n	800499a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a23      	ldr	r2, [pc, #140]	; (80049a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d022      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004926:	d01d      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1f      	ldr	r2, [pc, #124]	; (80049ac <HAL_TIM_Base_Start_IT+0xc8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d018      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d013      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1c      	ldr	r2, [pc, #112]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00e      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a1b      	ldr	r2, [pc, #108]	; (80049b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d009      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_TIM_Base_Start_IT+0xd8>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d004      	beq.n	8004964 <HAL_TIM_Base_Start_IT+0x80>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a18      	ldr	r2, [pc, #96]	; (80049c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d111      	bne.n	8004988 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2b06      	cmp	r3, #6
 8004974:	d010      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0201 	orr.w	r2, r2, #1
 8004984:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004986:	e007      	b.n	8004998 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40001800 	.word	0x40001800

080049c4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e041      	b.n	8004a5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f839 	bl	8004a62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f000 fc7c 	bl	8005300 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
	...

08004a78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <HAL_TIM_IC_Start_IT+0x1e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	e013      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x46>
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d104      	bne.n	8004aa6 <HAL_TIM_IC_Start_IT+0x2e>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e00b      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x46>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d104      	bne.n	8004ab6 <HAL_TIM_IC_Start_IT+0x3e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	e003      	b.n	8004abe <HAL_TIM_IC_Start_IT+0x46>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d104      	bne.n	8004ad0 <HAL_TIM_IC_Start_IT+0x58>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	e013      	b.n	8004af8 <HAL_TIM_IC_Start_IT+0x80>
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d104      	bne.n	8004ae0 <HAL_TIM_IC_Start_IT+0x68>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e00b      	b.n	8004af8 <HAL_TIM_IC_Start_IT+0x80>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b08      	cmp	r3, #8
 8004ae4:	d104      	bne.n	8004af0 <HAL_TIM_IC_Start_IT+0x78>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e003      	b.n	8004af8 <HAL_TIM_IC_Start_IT+0x80>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004afa:	7bbb      	ldrb	r3, [r7, #14]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d102      	bne.n	8004b06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b00:	7b7b      	ldrb	r3, [r7, #13]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d001      	beq.n	8004b0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e0cc      	b.n	8004ca4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_TIM_IC_Start_IT+0xa2>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b18:	e013      	b.n	8004b42 <HAL_TIM_IC_Start_IT+0xca>
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b04      	cmp	r3, #4
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_IC_Start_IT+0xb2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b28:	e00b      	b.n	8004b42 <HAL_TIM_IC_Start_IT+0xca>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_IC_Start_IT+0xc2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b38:	e003      	b.n	8004b42 <HAL_TIM_IC_Start_IT+0xca>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_TIM_IC_Start_IT+0xda>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b50:	e013      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0x102>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d104      	bne.n	8004b62 <HAL_TIM_IC_Start_IT+0xea>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b60:	e00b      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0x102>
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b08      	cmp	r3, #8
 8004b66:	d104      	bne.n	8004b72 <HAL_TIM_IC_Start_IT+0xfa>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b70:	e003      	b.n	8004b7a <HAL_TIM_IC_Start_IT+0x102>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2202      	movs	r2, #2
 8004b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b0c      	cmp	r3, #12
 8004b7e:	d841      	bhi.n	8004c04 <HAL_TIM_IC_Start_IT+0x18c>
 8004b80:	a201      	add	r2, pc, #4	; (adr r2, 8004b88 <HAL_TIM_IC_Start_IT+0x110>)
 8004b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b86:	bf00      	nop
 8004b88:	08004bbd 	.word	0x08004bbd
 8004b8c:	08004c05 	.word	0x08004c05
 8004b90:	08004c05 	.word	0x08004c05
 8004b94:	08004c05 	.word	0x08004c05
 8004b98:	08004bcf 	.word	0x08004bcf
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004c05 	.word	0x08004c05
 8004ba4:	08004c05 	.word	0x08004c05
 8004ba8:	08004be1 	.word	0x08004be1
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004c05 	.word	0x08004c05
 8004bb8:	08004bf3 	.word	0x08004bf3
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0202 	orr.w	r2, r2, #2
 8004bca:	60da      	str	r2, [r3, #12]
      break;
 8004bcc:	e01d      	b.n	8004c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0204 	orr.w	r2, r2, #4
 8004bdc:	60da      	str	r2, [r3, #12]
      break;
 8004bde:	e014      	b.n	8004c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0208 	orr.w	r2, r2, #8
 8004bee:	60da      	str	r2, [r3, #12]
      break;
 8004bf0:	e00b      	b.n	8004c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f042 0210 	orr.w	r2, r2, #16
 8004c00:	60da      	str	r2, [r3, #12]
      break;
 8004c02:	e002      	b.n	8004c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8004c0a:	7bfb      	ldrb	r3, [r7, #15]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d148      	bne.n	8004ca2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2201      	movs	r2, #1
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f000 fe67 	bl	80058ec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a22      	ldr	r2, [pc, #136]	; (8004cac <HAL_TIM_IC_Start_IT+0x234>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d022      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d01d      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_IC_Start_IT+0x238>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d018      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <HAL_TIM_IC_Start_IT+0x23c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d013      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1b      	ldr	r2, [pc, #108]	; (8004cb8 <HAL_TIM_IC_Start_IT+0x240>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00e      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a19      	ldr	r2, [pc, #100]	; (8004cbc <HAL_TIM_IC_Start_IT+0x244>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d009      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <HAL_TIM_IC_Start_IT+0x248>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d004      	beq.n	8004c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a16      	ldr	r2, [pc, #88]	; (8004cc4 <HAL_TIM_IC_Start_IT+0x24c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d111      	bne.n	8004c92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0307 	and.w	r3, r3, #7
 8004c78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d010      	beq.n	8004ca2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c90:	e007      	b.n	8004ca2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0201 	orr.w	r2, r2, #1
 8004ca0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40000400 	.word	0x40000400
 8004cb4:	40000800 	.word	0x40000800
 8004cb8:	40000c00 	.word	0x40000c00
 8004cbc:	40010400 	.word	0x40010400
 8004cc0:	40014000 	.word	0x40014000
 8004cc4:	40001800 	.word	0x40001800

08004cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0202 	mvn.w	r2, #2
 8004cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fbc2 	bl	8001494 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 faca 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fad1 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0304 	and.w	r3, r3, #4
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0204 	mvn.w	r2, #4
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7fc fb98 	bl	8001494 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 faa0 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 faa7 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d122      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	d11b      	bne.n	8004dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0208 	mvn.w	r2, #8
 8004d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2204      	movs	r2, #4
 8004da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	69db      	ldr	r3, [r3, #28]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7fc fb6e 	bl	8001494 <HAL_TIM_IC_CaptureCallback>
 8004db8:	e005      	b.n	8004dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa76 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fa7d 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	f003 0310 	and.w	r3, r3, #16
 8004dd6:	2b10      	cmp	r3, #16
 8004dd8:	d122      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f06f 0210 	mvn.w	r2, #16
 8004df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2208      	movs	r2, #8
 8004df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f7fc fb44 	bl	8001494 <HAL_TIM_IC_CaptureCallback>
 8004e0c:	e005      	b.n	8004e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa4c 	bl	80052ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 fa53 	bl	80052c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d10e      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0201 	mvn.w	r2, #1
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc faf2 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e56:	2b80      	cmp	r3, #128	; 0x80
 8004e58:	d10e      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d107      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fde6 	bl	8005a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e82:	2b40      	cmp	r3, #64	; 0x40
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fa18 	bl	80052d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0320 	and.w	r3, r3, #32
 8004ebc:	2b20      	cmp	r3, #32
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0220 	mvn.w	r2, #32
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fdb0 	bl	8005a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d101      	bne.n	8004ef6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e088      	b.n	8005008 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d11b      	bne.n	8004f3c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6818      	ldr	r0, [r3, #0]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	685a      	ldr	r2, [r3, #4]
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	f000 fb26 	bl	8005564 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	699a      	ldr	r2, [r3, #24]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 020c 	bic.w	r2, r2, #12
 8004f26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6999      	ldr	r1, [r3, #24]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	689a      	ldr	r2, [r3, #8]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	430a      	orrs	r2, r1
 8004f38:	619a      	str	r2, [r3, #24]
 8004f3a:	e060      	b.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d11c      	bne.n	8004f7c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f000 fbaa 	bl	80056aa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	699a      	ldr	r2, [r3, #24]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6999      	ldr	r1, [r3, #24]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	021a      	lsls	r2, r3, #8
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	619a      	str	r2, [r3, #24]
 8004f7a:	e040      	b.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d11b      	bne.n	8004fba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f000 fbf7 	bl	8005784 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 020c 	bic.w	r2, r2, #12
 8004fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	61da      	str	r2, [r3, #28]
 8004fb8:	e021      	b.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d11c      	bne.n	8004ffa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	6819      	ldr	r1, [r3, #0]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f000 fc14 	bl	80057fc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fe2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	69d9      	ldr	r1, [r3, #28]
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	021a      	lsls	r2, r3, #8
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	61da      	str	r2, [r3, #28]
 8004ff8:	e001      	b.n	8004ffe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005006:	7dfb      	ldrb	r3, [r7, #23]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_TIM_ConfigClockSource+0x1c>
 8005028:	2302      	movs	r3, #2
 800502a:	e0b4      	b.n	8005196 <HAL_TIM_ConfigClockSource+0x186>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800504a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005052:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005064:	d03e      	beq.n	80050e4 <HAL_TIM_ConfigClockSource+0xd4>
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	f200 8087 	bhi.w	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800506e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005072:	f000 8086 	beq.w	8005182 <HAL_TIM_ConfigClockSource+0x172>
 8005076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800507a:	d87f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800507c:	2b70      	cmp	r3, #112	; 0x70
 800507e:	d01a      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0xa6>
 8005080:	2b70      	cmp	r3, #112	; 0x70
 8005082:	d87b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 8005084:	2b60      	cmp	r3, #96	; 0x60
 8005086:	d050      	beq.n	800512a <HAL_TIM_ConfigClockSource+0x11a>
 8005088:	2b60      	cmp	r3, #96	; 0x60
 800508a:	d877      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800508c:	2b50      	cmp	r3, #80	; 0x50
 800508e:	d03c      	beq.n	800510a <HAL_TIM_ConfigClockSource+0xfa>
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d873      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 8005094:	2b40      	cmp	r3, #64	; 0x40
 8005096:	d058      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x13a>
 8005098:	2b40      	cmp	r3, #64	; 0x40
 800509a:	d86f      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d064      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050a0:	2b30      	cmp	r3, #48	; 0x30
 80050a2:	d86b      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 80050a4:	2b20      	cmp	r3, #32
 80050a6:	d060      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d867      	bhi.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05c      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d05a      	beq.n	800516a <HAL_TIM_ConfigClockSource+0x15a>
 80050b4:	e062      	b.n	800517c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f000 fbf1 	bl	80058ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	609a      	str	r2, [r3, #8]
      break;
 80050e2:	e04f      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	6899      	ldr	r1, [r3, #8]
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f000 fbda 	bl	80058ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005106:	609a      	str	r2, [r3, #8]
      break;
 8005108:	e03c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6859      	ldr	r1, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	461a      	mov	r2, r3
 8005118:	f000 fa98 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2150      	movs	r1, #80	; 0x50
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fba7 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8005128:	e02c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6818      	ldr	r0, [r3, #0]
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6859      	ldr	r1, [r3, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	461a      	mov	r2, r3
 8005138:	f000 faf4 	bl	8005724 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2160      	movs	r1, #96	; 0x60
 8005142:	4618      	mov	r0, r3
 8005144:	f000 fb97 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8005148:	e01c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6859      	ldr	r1, [r3, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	461a      	mov	r2, r3
 8005158:	f000 fa78 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2140      	movs	r1, #64	; 0x40
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fb87 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 8005168:	e00c      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	4610      	mov	r0, r2
 8005176:	f000 fb7e 	bl	8005876 <TIM_ITRx_SetConfig>
      break;
 800517a:	e003      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
      break;
 8005180:	e000      	b.n	8005184 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005182:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
 80051a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80051b2:	2302      	movs	r3, #2
 80051b4:	e031      	b.n	800521a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2202      	movs	r2, #2
 80051c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f939 	bl	8005440 <TIM_SlaveTimer_SetConfig>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e018      	b.n	800521a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051f6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005206:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d831      	bhi.n	800529c <HAL_TIM_ReadCapturedValue+0x78>
 8005238:	a201      	add	r2, pc, #4	; (adr r2, 8005240 <HAL_TIM_ReadCapturedValue+0x1c>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005275 	.word	0x08005275
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800527f 	.word	0x0800527f
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	08005289 	.word	0x08005289
 8005264:	0800529d 	.word	0x0800529d
 8005268:	0800529d 	.word	0x0800529d
 800526c:	0800529d 	.word	0x0800529d
 8005270:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527a:	60fb      	str	r3, [r7, #12]

      break;
 800527c:	e00f      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005284:	60fb      	str	r3, [r7, #12]

      break;
 8005286:	e00a      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528e:	60fb      	str	r3, [r7, #12]

      break;
 8005290:	e005      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	60fb      	str	r3, [r7, #12]

      break;
 800529a:	e000      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800529c:	bf00      	nop
  }

  return tmpreg;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	7f1b      	ldrb	r3, [r3, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a40      	ldr	r2, [pc, #256]	; (8005414 <TIM_Base_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d013      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531e:	d00f      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a3d      	ldr	r2, [pc, #244]	; (8005418 <TIM_Base_SetConfig+0x118>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00b      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a3c      	ldr	r2, [pc, #240]	; (800541c <TIM_Base_SetConfig+0x11c>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d007      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a3b      	ldr	r2, [pc, #236]	; (8005420 <TIM_Base_SetConfig+0x120>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a3a      	ldr	r2, [pc, #232]	; (8005424 <TIM_Base_SetConfig+0x124>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d108      	bne.n	8005352 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005346:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2f      	ldr	r2, [pc, #188]	; (8005414 <TIM_Base_SetConfig+0x114>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d02b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005360:	d027      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a2c      	ldr	r2, [pc, #176]	; (8005418 <TIM_Base_SetConfig+0x118>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d023      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a2b      	ldr	r2, [pc, #172]	; (800541c <TIM_Base_SetConfig+0x11c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d01f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a2a      	ldr	r2, [pc, #168]	; (8005420 <TIM_Base_SetConfig+0x120>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d01b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a29      	ldr	r2, [pc, #164]	; (8005424 <TIM_Base_SetConfig+0x124>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d017      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a28      	ldr	r2, [pc, #160]	; (8005428 <TIM_Base_SetConfig+0x128>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d013      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a27      	ldr	r2, [pc, #156]	; (800542c <TIM_Base_SetConfig+0x12c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00f      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a26      	ldr	r2, [pc, #152]	; (8005430 <TIM_Base_SetConfig+0x130>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00b      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <TIM_Base_SetConfig+0x134>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a24      	ldr	r2, [pc, #144]	; (8005438 <TIM_Base_SetConfig+0x138>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d003      	beq.n	80053b2 <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a23      	ldr	r2, [pc, #140]	; (800543c <TIM_Base_SetConfig+0x13c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d108      	bne.n	80053c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <TIM_Base_SetConfig+0x114>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d003      	beq.n	80053f8 <TIM_Base_SetConfig+0xf8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a0c      	ldr	r2, [pc, #48]	; (8005424 <TIM_Base_SetConfig+0x124>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d103      	bne.n	8005400 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	615a      	str	r2, [r3, #20]
}
 8005406:	bf00      	nop
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40010000 	.word	0x40010000
 8005418:	40000400 	.word	0x40000400
 800541c:	40000800 	.word	0x40000800
 8005420:	40000c00 	.word	0x40000c00
 8005424:	40010400 	.word	0x40010400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40001800 	.word	0x40001800
 8005438:	40001c00 	.word	0x40001c00
 800543c:	40002000 	.word	0x40002000

08005440 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	4313      	orrs	r3, r2
 8005466:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 0307 	bic.w	r3, r3, #7
 800546e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	2b70      	cmp	r3, #112	; 0x70
 8005488:	d01a      	beq.n	80054c0 <TIM_SlaveTimer_SetConfig+0x80>
 800548a:	2b70      	cmp	r3, #112	; 0x70
 800548c:	d860      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 800548e:	2b60      	cmp	r3, #96	; 0x60
 8005490:	d054      	beq.n	800553c <TIM_SlaveTimer_SetConfig+0xfc>
 8005492:	2b60      	cmp	r3, #96	; 0x60
 8005494:	d85c      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 8005496:	2b50      	cmp	r3, #80	; 0x50
 8005498:	d046      	beq.n	8005528 <TIM_SlaveTimer_SetConfig+0xe8>
 800549a:	2b50      	cmp	r3, #80	; 0x50
 800549c:	d858      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d019      	beq.n	80054d6 <TIM_SlaveTimer_SetConfig+0x96>
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d854      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 80054a6:	2b30      	cmp	r3, #48	; 0x30
 80054a8:	d055      	beq.n	8005556 <TIM_SlaveTimer_SetConfig+0x116>
 80054aa:	2b30      	cmp	r3, #48	; 0x30
 80054ac:	d850      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d051      	beq.n	8005556 <TIM_SlaveTimer_SetConfig+0x116>
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d84c      	bhi.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d04d      	beq.n	8005556 <TIM_SlaveTimer_SetConfig+0x116>
 80054ba:	2b10      	cmp	r3, #16
 80054bc:	d04b      	beq.n	8005556 <TIM_SlaveTimer_SetConfig+0x116>
 80054be:	e047      	b.n	8005550 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6818      	ldr	r0, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	68d9      	ldr	r1, [r3, #12]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	f000 f9ec 	bl	80058ac <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80054d4:	e040      	b.n	8005558 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d101      	bne.n	80054e2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e03b      	b.n	800555a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6a1b      	ldr	r3, [r3, #32]
 80054e8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6a1a      	ldr	r2, [r3, #32]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005508:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4313      	orrs	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	621a      	str	r2, [r3, #32]
      break;
 8005526:	e017      	b.n	8005558 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	461a      	mov	r2, r3
 8005536:	f000 f889 	bl	800564c <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800553a:	e00d      	b.n	8005558 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6899      	ldr	r1, [r3, #8]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	461a      	mov	r2, r3
 800554a:	f000 f8eb 	bl	8005724 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800554e:	e003      	b.n	8005558 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	75fb      	strb	r3, [r7, #23]
      break;
 8005554:	e000      	b.n	8005558 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8005556:	bf00      	nop
  }

  return status;
 8005558:	7dfb      	ldrb	r3, [r7, #23]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f023 0201 	bic.w	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	4a28      	ldr	r2, [pc, #160]	; (8005630 <TIM_TI1_SetConfig+0xcc>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01b      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005598:	d017      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	4a25      	ldr	r2, [pc, #148]	; (8005634 <TIM_TI1_SetConfig+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <TIM_TI1_SetConfig+0xd4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4a23      	ldr	r2, [pc, #140]	; (800563c <TIM_TI1_SetConfig+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	4a22      	ldr	r2, [pc, #136]	; (8005640 <TIM_TI1_SetConfig+0xdc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <TIM_TI1_SetConfig+0xe0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_TI1_SetConfig+0x66>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4a20      	ldr	r2, [pc, #128]	; (8005648 <TIM_TI1_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <TIM_TI1_SetConfig+0x6a>
 80055ca:	2301      	movs	r3, #1
 80055cc:	e000      	b.n	80055d0 <TIM_TI1_SetConfig+0x6c>
 80055ce:	2300      	movs	r3, #0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0303 	bic.w	r3, r3, #3
 80055da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e003      	b.n	80055ee <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	011b      	lsls	r3, r3, #4
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	4313      	orrs	r3, r2
 8005600:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f023 030a 	bic.w	r3, r3, #10
 8005608:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	f003 030a 	and.w	r3, r3, #10
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	621a      	str	r2, [r3, #32]
}
 8005622:	bf00      	nop
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40010400 	.word	0x40010400
 8005644:	40014000 	.word	0x40014000
 8005648:	40001800 	.word	0x40001800

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	f023 0210 	bic.w	r2, r3, #16
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4313      	orrs	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	621a      	str	r2, [r3, #32]
}
 8005718:	bf00      	nop
 800571a:	371c      	adds	r7, #28
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f023 0210 	bic.w	r2, r3, #16
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6a1b      	ldr	r3, [r3, #32]
 8005746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800574e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	031b      	lsls	r3, r3, #12
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005760:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	011b      	lsls	r3, r3, #4
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	621a      	str	r2, [r3, #32]
}
 8005778:	bf00      	nop
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
 8005790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a1b      	ldr	r3, [r3, #32]
 8005796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f023 0303 	bic.w	r3, r3, #3
 80057b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	011b      	lsls	r3, r3, #4
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	021b      	lsls	r3, r3, #8
 80057da:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	621a      	str	r2, [r3, #32]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005828:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	4313      	orrs	r3, r2
 8005832:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800583a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	031b      	lsls	r3, r3, #12
 8005840:	b29b      	uxth	r3, r3
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800584e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	031b      	lsls	r3, r3, #12
 8005854:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	621a      	str	r2, [r3, #32]
}
 800586a:	bf00      	nop
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005876:	b480      	push	{r7}
 8005878:	b085      	sub	sp, #20
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
 800587e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	f043 0307 	orr.w	r3, r3, #7
 8005898:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	609a      	str	r2, [r3, #8]
}
 80058a0:	bf00      	nop
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
 80058b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	021a      	lsls	r2, r3, #8
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 031f 	and.w	r3, r3, #31
 80058fe:	2201      	movs	r2, #1
 8005900:	fa02 f303 	lsl.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1a      	ldr	r2, [r3, #32]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	43db      	mvns	r3, r3
 800590e:	401a      	ands	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6a1a      	ldr	r2, [r3, #32]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	fa01 f303 	lsl.w	r3, r1, r3
 8005924:	431a      	orrs	r2, r3
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
	...

08005938 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800594c:	2302      	movs	r3, #2
 800594e:	e05a      	b.n	8005a06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d022      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800599c:	d01d      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d018      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1b      	ldr	r2, [pc, #108]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d013      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1a      	ldr	r2, [pc, #104]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d00e      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a18      	ldr	r2, [pc, #96]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d009      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a17      	ldr	r2, [pc, #92]	; (8005a28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d004      	beq.n	80059da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a15      	ldr	r2, [pc, #84]	; (8005a2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d10c      	bne.n	80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40010000 	.word	0x40010000
 8005a18:	40000400 	.word	0x40000400
 8005a1c:	40000800 	.word	0x40000800
 8005a20:	40000c00 	.word	0x40000c00
 8005a24:	40010400 	.word	0x40010400
 8005a28:	40014000 	.word	0x40014000
 8005a2c:	40001800 	.word	0x40001800

08005a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a38:	bf00      	nop
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a4c:	bf00      	nop
 8005a4e:	370c      	adds	r7, #12
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b082      	sub	sp, #8
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e03f      	b.n	8005aea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d106      	bne.n	8005a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f7fc fde4 	bl	800264c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2224      	movs	r2, #36	; 0x24
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 fddb 	bl	8006658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2220      	movs	r2, #32
 8005adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2220      	movs	r2, #32
 8005ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b08a      	sub	sp, #40	; 0x28
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b02:	2300      	movs	r3, #0
 8005b04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b20      	cmp	r3, #32
 8005b10:	d17c      	bne.n	8005c0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d002      	beq.n	8005b1e <HAL_UART_Transmit+0x2c>
 8005b18:	88fb      	ldrh	r3, [r7, #6]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e075      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_UART_Transmit+0x3e>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e06e      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2221      	movs	r2, #33	; 0x21
 8005b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b46:	f7fc fe61 	bl	800280c <HAL_GetTick>
 8005b4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b60:	d108      	bne.n	8005b74 <HAL_UART_Transmit+0x82>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d104      	bne.n	8005b74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e003      	b.n	8005b7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b84:	e02a      	b.n	8005bdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2180      	movs	r1, #128	; 0x80
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 fb1f 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d001      	beq.n	8005ba0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	e036      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10b      	bne.n	8005bbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	881b      	ldrh	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	3302      	adds	r3, #2
 8005bba:	61bb      	str	r3, [r7, #24]
 8005bbc:	e007      	b.n	8005bce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	781a      	ldrb	r2, [r3, #0]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1cf      	bne.n	8005b86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2200      	movs	r2, #0
 8005bee:	2140      	movs	r1, #64	; 0x40
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 faef 	bl	80061d4 <UART_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e006      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e000      	b.n	8005c0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005c0c:	2302      	movs	r3, #2
  }
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3720      	adds	r7, #32
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b084      	sub	sp, #16
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	60b9      	str	r1, [r7, #8]
 8005c20:	4613      	mov	r3, r2
 8005c22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d11d      	bne.n	8005c6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UART_Receive_IT+0x26>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e016      	b.n	8005c6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_UART_Receive_IT+0x38>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e00f      	b.n	8005c6e <HAL_UART_Receive_IT+0x58>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fb24 	bl	80062b0 <UART_Start_Receive_IT>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	e000      	b.n	8005c6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
	...

08005c78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b0ba      	sub	sp, #232	; 0xe8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10f      	bne.n	8005cde <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <HAL_UART_IRQHandler+0x66>
 8005cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fc03 	bl	80064e2 <UART_Receive_IT>
      return;
 8005cdc:	e256      	b.n	800618c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80de 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x22c>
 8005ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80d1 	beq.w	8005ea4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <HAL_UART_IRQHandler+0xae>
 8005d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f043 0201 	orr.w	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <HAL_UART_IRQHandler+0xd2>
 8005d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d005      	beq.n	8005d4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f043 0202 	orr.w	r2, r3, #2
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <HAL_UART_IRQHandler+0xf6>
 8005d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d66:	f043 0204 	orr.w	r2, r3, #4
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0308 	and.w	r3, r3, #8
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d011      	beq.n	8005d9e <HAL_UART_IRQHandler+0x126>
 8005d7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d7e:	f003 0320 	and.w	r3, r3, #32
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d105      	bne.n	8005d92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d005      	beq.n	8005d9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f043 0208 	orr.w	r2, r3, #8
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 81ed 	beq.w	8006182 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d008      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x14e>
 8005db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db8:	f003 0320 	and.w	r3, r3, #32
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fb8e 	bl	80064e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	bf0c      	ite	eq
 8005dd4:	2301      	moveq	r3, #1
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	f003 0308 	and.w	r3, r3, #8
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d103      	bne.n	8005df2 <HAL_UART_IRQHandler+0x17a>
 8005dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d04f      	beq.n	8005e92 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fa96 	bl	8006324 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e02:	2b40      	cmp	r3, #64	; 0x40
 8005e04:	d141      	bne.n	8005e8a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	3314      	adds	r3, #20
 8005e0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e10:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e14:	e853 3f00 	ldrex	r3, [r3]
 8005e18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e32:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1d9      	bne.n	8005e06 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d013      	beq.n	8005e82 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	4a7d      	ldr	r2, [pc, #500]	; (8006054 <HAL_UART_IRQHandler+0x3dc>)
 8005e60:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fd fc30 	bl	80036cc <HAL_DMA_Abort_IT>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d016      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e7c:	4610      	mov	r0, r2
 8005e7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e80:	e00e      	b.n	8005ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f990 	bl	80061a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e88:	e00a      	b.n	8005ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 f98c 	bl	80061a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e90:	e006      	b.n	8005ea0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f988 	bl	80061a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e9e:	e170      	b.n	8006182 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ea0:	bf00      	nop
    return;
 8005ea2:	e16e      	b.n	8006182 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	f040 814a 	bne.w	8006142 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 8143 	beq.w	8006142 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	f000 813c 	beq.w	8006142 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60bb      	str	r3, [r7, #8]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	60bb      	str	r3, [r7, #8]
 8005ede:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	f040 80b4 	bne.w	8006058 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005efc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8140 	beq.w	8006186 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	f080 8139 	bcs.w	8006186 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f26:	f000 8088 	beq.w	800603a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	330c      	adds	r3, #12
 8005f30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1d9      	bne.n	8005f2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3314      	adds	r3, #20
 8005f96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005fa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e1      	bne.n	8005f76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fd6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fd8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fda:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fdc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fde:	e841 2300 	strex	r3, r2, [r1]
 8005fe2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fe4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1e3      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2220      	movs	r2, #32
 8005fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	330c      	adds	r3, #12
 8005ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006002:	e853 3f00 	ldrex	r3, [r3]
 8006006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800600a:	f023 0310 	bic.w	r3, r3, #16
 800600e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	330c      	adds	r3, #12
 8006018:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800601c:	65ba      	str	r2, [r7, #88]	; 0x58
 800601e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006020:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006022:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006024:	e841 2300 	strex	r3, r2, [r1]
 8006028:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800602a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1e3      	bne.n	8005ff8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	4618      	mov	r0, r3
 8006036:	f7fd fad9 	bl	80035ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f8b6 	bl	80061bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006050:	e099      	b.n	8006186 <HAL_UART_IRQHandler+0x50e>
 8006052:	bf00      	nop
 8006054:	080063eb 	.word	0x080063eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006060:	b29b      	uxth	r3, r3
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 808b 	beq.w	800618a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006074:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 8086 	beq.w	800618a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	330c      	adds	r3, #12
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006090:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	330c      	adds	r3, #12
 800609e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80060a2:	647a      	str	r2, [r7, #68]	; 0x44
 80060a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e3      	bne.n	800607e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	3314      	adds	r3, #20
 80060bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	e853 3f00 	ldrex	r3, [r3]
 80060c4:	623b      	str	r3, [r7, #32]
   return(result);
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	f023 0301 	bic.w	r3, r3, #1
 80060cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	3314      	adds	r3, #20
 80060d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060da:	633a      	str	r2, [r7, #48]	; 0x30
 80060dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	e841 2300 	strex	r3, r2, [r1]
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e3      	bne.n	80060b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2220      	movs	r2, #32
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	60fb      	str	r3, [r7, #12]
   return(result);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0310 	bic.w	r3, r3, #16
 8006112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	330c      	adds	r3, #12
 800611c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006120:	61fa      	str	r2, [r7, #28]
 8006122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	69b9      	ldr	r1, [r7, #24]
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	617b      	str	r3, [r7, #20]
   return(result);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e3      	bne.n	80060fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f83e 	bl	80061bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006140:	e023      	b.n	800618a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_UART_IRQHandler+0x4ea>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f959 	bl	8006412 <UART_Transmit_IT>
    return;
 8006160:	e014      	b.n	800618c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <HAL_UART_IRQHandler+0x514>
 800616e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b00      	cmp	r3, #0
 8006178:	d008      	beq.n	800618c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f999 	bl	80064b2 <UART_EndTransmit_IT>
    return;
 8006180:	e004      	b.n	800618c <HAL_UART_IRQHandler+0x514>
    return;
 8006182:	bf00      	nop
 8006184:	e002      	b.n	800618c <HAL_UART_IRQHandler+0x514>
      return;
 8006186:	bf00      	nop
 8006188:	e000      	b.n	800618c <HAL_UART_IRQHandler+0x514>
      return;
 800618a:	bf00      	nop
  }
}
 800618c:	37e8      	adds	r7, #232	; 0xe8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop

08006194 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b090      	sub	sp, #64	; 0x40
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	603b      	str	r3, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061e4:	e050      	b.n	8006288 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d04c      	beq.n	8006288 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d007      	beq.n	8006204 <UART_WaitOnFlagUntilTimeout+0x30>
 80061f4:	f7fc fb0a 	bl	800280c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006200:	429a      	cmp	r2, r3
 8006202:	d241      	bcs.n	8006288 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006216:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006224:	637a      	str	r2, [r7, #52]	; 0x34
 8006226:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800622a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	613b      	str	r3, [r7, #16]
   return(result);
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006258:	623a      	str	r2, [r7, #32]
 800625a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	69f9      	ldr	r1, [r7, #28]
 800625e:	6a3a      	ldr	r2, [r7, #32]
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	61bb      	str	r3, [r7, #24]
   return(result);
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e00f      	b.n	80062a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	4013      	ands	r3, r2
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	429a      	cmp	r2, r3
 8006296:	bf0c      	ite	eq
 8006298:	2301      	moveq	r3, #1
 800629a:	2300      	movne	r3, #0
 800629c:	b2db      	uxtb	r3, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	79fb      	ldrb	r3, [r7, #7]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d09f      	beq.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3740      	adds	r7, #64	; 0x40
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	4613      	mov	r3, r2
 80062bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	88fa      	ldrh	r2, [r7, #6]
 80062c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	88fa      	ldrh	r2, [r7, #6]
 80062ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2222      	movs	r2, #34	; 0x22
 80062da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	695a      	ldr	r2, [r3, #20]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f042 0220 	orr.w	r2, r2, #32
 8006314:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3714      	adds	r7, #20
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b095      	sub	sp, #84	; 0x54
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006336:	e853 3f00 	ldrex	r3, [r3]
 800633a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800633c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800634c:	643a      	str	r2, [r7, #64]	; 0x40
 800634e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006354:	e841 2300 	strex	r3, r2, [r1]
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e5      	bne.n	800632c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	e853 3f00 	ldrex	r3, [r3]
 800636e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e5      	bne.n	8006360 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006398:	2b01      	cmp	r3, #1
 800639a:	d119      	bne.n	80063d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	330c      	adds	r3, #12
 80063a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	e853 3f00 	ldrex	r3, [r3]
 80063aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f023 0310 	bic.w	r3, r3, #16
 80063b2:	647b      	str	r3, [r7, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	330c      	adds	r3, #12
 80063ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063bc:	61ba      	str	r2, [r7, #24]
 80063be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c0:	6979      	ldr	r1, [r7, #20]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	e841 2300 	strex	r3, r2, [r1]
 80063c8:	613b      	str	r3, [r7, #16]
   return(result);
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d1e5      	bne.n	800639c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063de:	bf00      	nop
 80063e0:	3754      	adds	r7, #84	; 0x54
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2200      	movs	r2, #0
 8006402:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f7ff fecf 	bl	80061a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006412:	b480      	push	{r7}
 8006414:	b085      	sub	sp, #20
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b21      	cmp	r3, #33	; 0x21
 8006424:	d13e      	bne.n	80064a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800642e:	d114      	bne.n	800645a <UART_Transmit_IT+0x48>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	881b      	ldrh	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800644c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	1c9a      	adds	r2, r3, #2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	621a      	str	r2, [r3, #32]
 8006458:	e008      	b.n	800646c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	1c59      	adds	r1, r3, #1
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6211      	str	r1, [r2, #32]
 8006464:	781a      	ldrb	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29b      	uxth	r3, r3
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4619      	mov	r1, r3
 800647a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10f      	bne.n	80064a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68da      	ldr	r2, [r3, #12]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800649e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	e000      	b.n	80064a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80064a4:	2302      	movs	r3, #2
  }
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b082      	sub	sp, #8
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68da      	ldr	r2, [r3, #12]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff fe5e 	bl	8006194 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b08c      	sub	sp, #48	; 0x30
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b22      	cmp	r3, #34	; 0x22
 80064f4:	f040 80ab 	bne.w	800664e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006500:	d117      	bne.n	8006532 <UART_Receive_IT+0x50>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d113      	bne.n	8006532 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	b29b      	uxth	r3, r3
 800651c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006520:	b29a      	uxth	r2, r3
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	1c9a      	adds	r2, r3, #2
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	; 0x28
 8006530:	e026      	b.n	8006580 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006536:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006544:	d007      	beq.n	8006556 <UART_Receive_IT+0x74>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <UART_Receive_IT+0x82>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006560:	701a      	strb	r2, [r3, #0]
 8006562:	e008      	b.n	8006576 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	b2db      	uxtb	r3, r3
 800656c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006570:	b2da      	uxtb	r2, r3
 8006572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006574:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657a:	1c5a      	adds	r2, r3, #1
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006584:	b29b      	uxth	r3, r3
 8006586:	3b01      	subs	r3, #1
 8006588:	b29b      	uxth	r3, r3
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	4619      	mov	r1, r3
 800658e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006590:	2b00      	cmp	r3, #0
 8006592:	d15a      	bne.n	800664a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0220 	bic.w	r2, r2, #32
 80065a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68da      	ldr	r2, [r3, #12]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d135      	bne.n	8006640 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	613b      	str	r3, [r7, #16]
   return(result);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fa:	623a      	str	r2, [r7, #32]
 80065fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69f9      	ldr	r1, [r7, #28]
 8006600:	6a3a      	ldr	r2, [r7, #32]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	61bb      	str	r3, [r7, #24]
   return(result);
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0310 	and.w	r3, r3, #16
 8006618:	2b10      	cmp	r3, #16
 800661a:	d10a      	bne.n	8006632 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	60fb      	str	r3, [r7, #12]
 8006630:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7ff fdbf 	bl	80061bc <HAL_UARTEx_RxEventCallback>
 800663e:	e002      	b.n	8006646 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f7fa ff87 	bl	8001554 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006646:	2300      	movs	r3, #0
 8006648:	e002      	b.n	8006650 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800664a:	2300      	movs	r3, #0
 800664c:	e000      	b.n	8006650 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800664e:	2302      	movs	r3, #2
  }
}
 8006650:	4618      	mov	r0, r3
 8006652:	3730      	adds	r7, #48	; 0x30
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b09f      	sub	sp, #124	; 0x7c
 800665e:	af00      	add	r7, sp, #0
 8006660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	68d9      	ldr	r1, [r3, #12]
 8006670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	ea40 0301 	orr.w	r3, r0, r1
 8006678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	689a      	ldr	r2, [r3, #8]
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	431a      	orrs	r2, r3
 8006684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	431a      	orrs	r2, r3
 800668a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	4313      	orrs	r3, r2
 8006690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800669c:	f021 010c 	bic.w	r1, r1, #12
 80066a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a6:	430b      	orrs	r3, r1
 80066a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b6:	6999      	ldr	r1, [r3, #24]
 80066b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	ea40 0301 	orr.w	r3, r0, r1
 80066c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4bc5      	ldr	r3, [pc, #788]	; (80069dc <UART_SetConfig+0x384>)
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d004      	beq.n	80066d6 <UART_SetConfig+0x7e>
 80066cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	4bc3      	ldr	r3, [pc, #780]	; (80069e0 <UART_SetConfig+0x388>)
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d103      	bne.n	80066de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066d6:	f7fe f8a1 	bl	800481c <HAL_RCC_GetPCLK2Freq>
 80066da:	6778      	str	r0, [r7, #116]	; 0x74
 80066dc:	e002      	b.n	80066e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066de:	f7fe f889 	bl	80047f4 <HAL_RCC_GetPCLK1Freq>
 80066e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ec:	f040 80b6 	bne.w	800685c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066f2:	461c      	mov	r4, r3
 80066f4:	f04f 0500 	mov.w	r5, #0
 80066f8:	4622      	mov	r2, r4
 80066fa:	462b      	mov	r3, r5
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	6439      	str	r1, [r7, #64]	; 0x40
 8006700:	415b      	adcs	r3, r3
 8006702:	647b      	str	r3, [r7, #68]	; 0x44
 8006704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006708:	1912      	adds	r2, r2, r4
 800670a:	eb45 0303 	adc.w	r3, r5, r3
 800670e:	f04f 0000 	mov.w	r0, #0
 8006712:	f04f 0100 	mov.w	r1, #0
 8006716:	00d9      	lsls	r1, r3, #3
 8006718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800671c:	00d0      	lsls	r0, r2, #3
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	1911      	adds	r1, r2, r4
 8006724:	6639      	str	r1, [r7, #96]	; 0x60
 8006726:	416b      	adcs	r3, r5
 8006728:	667b      	str	r3, [r7, #100]	; 0x64
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	461a      	mov	r2, r3
 8006730:	f04f 0300 	mov.w	r3, #0
 8006734:	1891      	adds	r1, r2, r2
 8006736:	63b9      	str	r1, [r7, #56]	; 0x38
 8006738:	415b      	adcs	r3, r3
 800673a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800673c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006744:	f7fa faa0 	bl	8000c88 <__aeabi_uldivmod>
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4ba5      	ldr	r3, [pc, #660]	; (80069e4 <UART_SetConfig+0x38c>)
 800674e:	fba3 2302 	umull	r2, r3, r3, r2
 8006752:	095b      	lsrs	r3, r3, #5
 8006754:	011e      	lsls	r6, r3, #4
 8006756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006758:	461c      	mov	r4, r3
 800675a:	f04f 0500 	mov.w	r5, #0
 800675e:	4622      	mov	r2, r4
 8006760:	462b      	mov	r3, r5
 8006762:	1891      	adds	r1, r2, r2
 8006764:	6339      	str	r1, [r7, #48]	; 0x30
 8006766:	415b      	adcs	r3, r3
 8006768:	637b      	str	r3, [r7, #52]	; 0x34
 800676a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800676e:	1912      	adds	r2, r2, r4
 8006770:	eb45 0303 	adc.w	r3, r5, r3
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f04f 0100 	mov.w	r1, #0
 800677c:	00d9      	lsls	r1, r3, #3
 800677e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006782:	00d0      	lsls	r0, r2, #3
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	1911      	adds	r1, r2, r4
 800678a:	65b9      	str	r1, [r7, #88]	; 0x58
 800678c:	416b      	adcs	r3, r5
 800678e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	461a      	mov	r2, r3
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	1891      	adds	r1, r2, r2
 800679c:	62b9      	str	r1, [r7, #40]	; 0x28
 800679e:	415b      	adcs	r3, r3
 80067a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80067aa:	f7fa fa6d 	bl	8000c88 <__aeabi_uldivmod>
 80067ae:	4602      	mov	r2, r0
 80067b0:	460b      	mov	r3, r1
 80067b2:	4b8c      	ldr	r3, [pc, #560]	; (80069e4 <UART_SetConfig+0x38c>)
 80067b4:	fba3 1302 	umull	r1, r3, r3, r2
 80067b8:	095b      	lsrs	r3, r3, #5
 80067ba:	2164      	movs	r1, #100	; 0x64
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	3332      	adds	r3, #50	; 0x32
 80067c6:	4a87      	ldr	r2, [pc, #540]	; (80069e4 <UART_SetConfig+0x38c>)
 80067c8:	fba2 2303 	umull	r2, r3, r2, r3
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	005b      	lsls	r3, r3, #1
 80067d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067d4:	441e      	add	r6, r3
 80067d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d8:	4618      	mov	r0, r3
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	1894      	adds	r4, r2, r2
 80067e4:	623c      	str	r4, [r7, #32]
 80067e6:	415b      	adcs	r3, r3
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80067ee:	1812      	adds	r2, r2, r0
 80067f0:	eb41 0303 	adc.w	r3, r1, r3
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	f04f 0500 	mov.w	r5, #0
 80067fc:	00dd      	lsls	r5, r3, #3
 80067fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006802:	00d4      	lsls	r4, r2, #3
 8006804:	4622      	mov	r2, r4
 8006806:	462b      	mov	r3, r5
 8006808:	1814      	adds	r4, r2, r0
 800680a:	653c      	str	r4, [r7, #80]	; 0x50
 800680c:	414b      	adcs	r3, r1
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
 8006810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	461a      	mov	r2, r3
 8006816:	f04f 0300 	mov.w	r3, #0
 800681a:	1891      	adds	r1, r2, r2
 800681c:	61b9      	str	r1, [r7, #24]
 800681e:	415b      	adcs	r3, r3
 8006820:	61fb      	str	r3, [r7, #28]
 8006822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800682a:	f7fa fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4b6c      	ldr	r3, [pc, #432]	; (80069e4 <UART_SetConfig+0x38c>)
 8006834:	fba3 1302 	umull	r1, r3, r3, r2
 8006838:	095b      	lsrs	r3, r3, #5
 800683a:	2164      	movs	r1, #100	; 0x64
 800683c:	fb01 f303 	mul.w	r3, r1, r3
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	00db      	lsls	r3, r3, #3
 8006844:	3332      	adds	r3, #50	; 0x32
 8006846:	4a67      	ldr	r2, [pc, #412]	; (80069e4 <UART_SetConfig+0x38c>)
 8006848:	fba2 2303 	umull	r2, r3, r2, r3
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	f003 0207 	and.w	r2, r3, #7
 8006852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4432      	add	r2, r6
 8006858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800685a:	e0b9      	b.n	80069d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800685c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800685e:	461c      	mov	r4, r3
 8006860:	f04f 0500 	mov.w	r5, #0
 8006864:	4622      	mov	r2, r4
 8006866:	462b      	mov	r3, r5
 8006868:	1891      	adds	r1, r2, r2
 800686a:	6139      	str	r1, [r7, #16]
 800686c:	415b      	adcs	r3, r3
 800686e:	617b      	str	r3, [r7, #20]
 8006870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006874:	1912      	adds	r2, r2, r4
 8006876:	eb45 0303 	adc.w	r3, r5, r3
 800687a:	f04f 0000 	mov.w	r0, #0
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	00d9      	lsls	r1, r3, #3
 8006884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006888:	00d0      	lsls	r0, r2, #3
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	eb12 0804 	adds.w	r8, r2, r4
 8006892:	eb43 0905 	adc.w	r9, r3, r5
 8006896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	4618      	mov	r0, r3
 800689c:	f04f 0100 	mov.w	r1, #0
 80068a0:	f04f 0200 	mov.w	r2, #0
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	008b      	lsls	r3, r1, #2
 80068aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80068ae:	0082      	lsls	r2, r0, #2
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7fa f9e8 	bl	8000c88 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4b49      	ldr	r3, [pc, #292]	; (80069e4 <UART_SetConfig+0x38c>)
 80068be:	fba3 2302 	umull	r2, r3, r3, r2
 80068c2:	095b      	lsrs	r3, r3, #5
 80068c4:	011e      	lsls	r6, r3, #4
 80068c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068c8:	4618      	mov	r0, r3
 80068ca:	f04f 0100 	mov.w	r1, #0
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	1894      	adds	r4, r2, r2
 80068d4:	60bc      	str	r4, [r7, #8]
 80068d6:	415b      	adcs	r3, r3
 80068d8:	60fb      	str	r3, [r7, #12]
 80068da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80068de:	1812      	adds	r2, r2, r0
 80068e0:	eb41 0303 	adc.w	r3, r1, r3
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	f04f 0500 	mov.w	r5, #0
 80068ec:	00dd      	lsls	r5, r3, #3
 80068ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80068f2:	00d4      	lsls	r4, r2, #3
 80068f4:	4622      	mov	r2, r4
 80068f6:	462b      	mov	r3, r5
 80068f8:	1814      	adds	r4, r2, r0
 80068fa:	64bc      	str	r4, [r7, #72]	; 0x48
 80068fc:	414b      	adcs	r3, r1
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	4618      	mov	r0, r3
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006918:	0082      	lsls	r2, r0, #2
 800691a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800691e:	f7fa f9b3 	bl	8000c88 <__aeabi_uldivmod>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
 8006926:	4b2f      	ldr	r3, [pc, #188]	; (80069e4 <UART_SetConfig+0x38c>)
 8006928:	fba3 1302 	umull	r1, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	2164      	movs	r1, #100	; 0x64
 8006930:	fb01 f303 	mul.w	r3, r1, r3
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	3332      	adds	r3, #50	; 0x32
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <UART_SetConfig+0x38c>)
 800693c:	fba2 2303 	umull	r2, r3, r2, r3
 8006940:	095b      	lsrs	r3, r3, #5
 8006942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006946:	441e      	add	r6, r3
 8006948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800694a:	4618      	mov	r0, r3
 800694c:	f04f 0100 	mov.w	r1, #0
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	1894      	adds	r4, r2, r2
 8006956:	603c      	str	r4, [r7, #0]
 8006958:	415b      	adcs	r3, r3
 800695a:	607b      	str	r3, [r7, #4]
 800695c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006960:	1812      	adds	r2, r2, r0
 8006962:	eb41 0303 	adc.w	r3, r1, r3
 8006966:	f04f 0400 	mov.w	r4, #0
 800696a:	f04f 0500 	mov.w	r5, #0
 800696e:	00dd      	lsls	r5, r3, #3
 8006970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006974:	00d4      	lsls	r4, r2, #3
 8006976:	4622      	mov	r2, r4
 8006978:	462b      	mov	r3, r5
 800697a:	eb12 0a00 	adds.w	sl, r2, r0
 800697e:	eb43 0b01 	adc.w	fp, r3, r1
 8006982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	4618      	mov	r0, r3
 8006988:	f04f 0100 	mov.w	r1, #0
 800698c:	f04f 0200 	mov.w	r2, #0
 8006990:	f04f 0300 	mov.w	r3, #0
 8006994:	008b      	lsls	r3, r1, #2
 8006996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800699a:	0082      	lsls	r2, r0, #2
 800699c:	4650      	mov	r0, sl
 800699e:	4659      	mov	r1, fp
 80069a0:	f7fa f972 	bl	8000c88 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <UART_SetConfig+0x38c>)
 80069aa:	fba3 1302 	umull	r1, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	2164      	movs	r1, #100	; 0x64
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	3332      	adds	r3, #50	; 0x32
 80069bc:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <UART_SetConfig+0x38c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	f003 020f 	and.w	r2, r3, #15
 80069c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4432      	add	r2, r6
 80069ce:	609a      	str	r2, [r3, #8]
}
 80069d0:	bf00      	nop
 80069d2:	377c      	adds	r7, #124	; 0x7c
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069da:	bf00      	nop
 80069dc:	40011000 	.word	0x40011000
 80069e0:	40011400 	.word	0x40011400
 80069e4:	51eb851f 	.word	0x51eb851f

080069e8 <atoi>:
 80069e8:	220a      	movs	r2, #10
 80069ea:	2100      	movs	r1, #0
 80069ec:	f001 be12 	b.w	8008614 <strtol>

080069f0 <__errno>:
 80069f0:	4b01      	ldr	r3, [pc, #4]	; (80069f8 <__errno+0x8>)
 80069f2:	6818      	ldr	r0, [r3, #0]
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	20000294 	.word	0x20000294

080069fc <__libc_init_array>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	4d0d      	ldr	r5, [pc, #52]	; (8006a34 <__libc_init_array+0x38>)
 8006a00:	4c0d      	ldr	r4, [pc, #52]	; (8006a38 <__libc_init_array+0x3c>)
 8006a02:	1b64      	subs	r4, r4, r5
 8006a04:	10a4      	asrs	r4, r4, #2
 8006a06:	2600      	movs	r6, #0
 8006a08:	42a6      	cmp	r6, r4
 8006a0a:	d109      	bne.n	8006a20 <__libc_init_array+0x24>
 8006a0c:	4d0b      	ldr	r5, [pc, #44]	; (8006a3c <__libc_init_array+0x40>)
 8006a0e:	4c0c      	ldr	r4, [pc, #48]	; (8006a40 <__libc_init_array+0x44>)
 8006a10:	f004 fcd8 	bl	800b3c4 <_init>
 8006a14:	1b64      	subs	r4, r4, r5
 8006a16:	10a4      	asrs	r4, r4, #2
 8006a18:	2600      	movs	r6, #0
 8006a1a:	42a6      	cmp	r6, r4
 8006a1c:	d105      	bne.n	8006a2a <__libc_init_array+0x2e>
 8006a1e:	bd70      	pop	{r4, r5, r6, pc}
 8006a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a24:	4798      	blx	r3
 8006a26:	3601      	adds	r6, #1
 8006a28:	e7ee      	b.n	8006a08 <__libc_init_array+0xc>
 8006a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2e:	4798      	blx	r3
 8006a30:	3601      	adds	r6, #1
 8006a32:	e7f2      	b.n	8006a1a <__libc_init_array+0x1e>
 8006a34:	0800c65c 	.word	0x0800c65c
 8006a38:	0800c65c 	.word	0x0800c65c
 8006a3c:	0800c65c 	.word	0x0800c65c
 8006a40:	0800c660 	.word	0x0800c660

08006a44 <memset>:
 8006a44:	4402      	add	r2, r0
 8006a46:	4603      	mov	r3, r0
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d100      	bne.n	8006a4e <memset+0xa>
 8006a4c:	4770      	bx	lr
 8006a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006a52:	e7f9      	b.n	8006a48 <memset+0x4>

08006a54 <__cvt>:
 8006a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	ec55 4b10 	vmov	r4, r5, d0
 8006a5c:	2d00      	cmp	r5, #0
 8006a5e:	460e      	mov	r6, r1
 8006a60:	4619      	mov	r1, r3
 8006a62:	462b      	mov	r3, r5
 8006a64:	bfbb      	ittet	lt
 8006a66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006a6a:	461d      	movlt	r5, r3
 8006a6c:	2300      	movge	r3, #0
 8006a6e:	232d      	movlt	r3, #45	; 0x2d
 8006a70:	700b      	strb	r3, [r1, #0]
 8006a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006a78:	4691      	mov	r9, r2
 8006a7a:	f023 0820 	bic.w	r8, r3, #32
 8006a7e:	bfbc      	itt	lt
 8006a80:	4622      	movlt	r2, r4
 8006a82:	4614      	movlt	r4, r2
 8006a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006a88:	d005      	beq.n	8006a96 <__cvt+0x42>
 8006a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006a8e:	d100      	bne.n	8006a92 <__cvt+0x3e>
 8006a90:	3601      	adds	r6, #1
 8006a92:	2102      	movs	r1, #2
 8006a94:	e000      	b.n	8006a98 <__cvt+0x44>
 8006a96:	2103      	movs	r1, #3
 8006a98:	ab03      	add	r3, sp, #12
 8006a9a:	9301      	str	r3, [sp, #4]
 8006a9c:	ab02      	add	r3, sp, #8
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	ec45 4b10 	vmov	d0, r4, r5
 8006aa4:	4653      	mov	r3, sl
 8006aa6:	4632      	mov	r2, r6
 8006aa8:	f001 ff0a 	bl	80088c0 <_dtoa_r>
 8006aac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	d102      	bne.n	8006aba <__cvt+0x66>
 8006ab4:	f019 0f01 	tst.w	r9, #1
 8006ab8:	d022      	beq.n	8006b00 <__cvt+0xac>
 8006aba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006abe:	eb07 0906 	add.w	r9, r7, r6
 8006ac2:	d110      	bne.n	8006ae6 <__cvt+0x92>
 8006ac4:	783b      	ldrb	r3, [r7, #0]
 8006ac6:	2b30      	cmp	r3, #48	; 0x30
 8006ac8:	d10a      	bne.n	8006ae0 <__cvt+0x8c>
 8006aca:	2200      	movs	r2, #0
 8006acc:	2300      	movs	r3, #0
 8006ace:	4620      	mov	r0, r4
 8006ad0:	4629      	mov	r1, r5
 8006ad2:	f7f9 fff9 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ad6:	b918      	cbnz	r0, 8006ae0 <__cvt+0x8c>
 8006ad8:	f1c6 0601 	rsb	r6, r6, #1
 8006adc:	f8ca 6000 	str.w	r6, [sl]
 8006ae0:	f8da 3000 	ldr.w	r3, [sl]
 8006ae4:	4499      	add	r9, r3
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4620      	mov	r0, r4
 8006aec:	4629      	mov	r1, r5
 8006aee:	f7f9 ffeb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006af2:	b108      	cbz	r0, 8006af8 <__cvt+0xa4>
 8006af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006af8:	2230      	movs	r2, #48	; 0x30
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	454b      	cmp	r3, r9
 8006afe:	d307      	bcc.n	8006b10 <__cvt+0xbc>
 8006b00:	9b03      	ldr	r3, [sp, #12]
 8006b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b04:	1bdb      	subs	r3, r3, r7
 8006b06:	4638      	mov	r0, r7
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	b004      	add	sp, #16
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	9103      	str	r1, [sp, #12]
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	e7f0      	b.n	8006afa <__cvt+0xa6>

08006b18 <__exponent>:
 8006b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2900      	cmp	r1, #0
 8006b1e:	bfb8      	it	lt
 8006b20:	4249      	neglt	r1, r1
 8006b22:	f803 2b02 	strb.w	r2, [r3], #2
 8006b26:	bfb4      	ite	lt
 8006b28:	222d      	movlt	r2, #45	; 0x2d
 8006b2a:	222b      	movge	r2, #43	; 0x2b
 8006b2c:	2909      	cmp	r1, #9
 8006b2e:	7042      	strb	r2, [r0, #1]
 8006b30:	dd2a      	ble.n	8006b88 <__exponent+0x70>
 8006b32:	f10d 0407 	add.w	r4, sp, #7
 8006b36:	46a4      	mov	ip, r4
 8006b38:	270a      	movs	r7, #10
 8006b3a:	46a6      	mov	lr, r4
 8006b3c:	460a      	mov	r2, r1
 8006b3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006b42:	fb07 1516 	mls	r5, r7, r6, r1
 8006b46:	3530      	adds	r5, #48	; 0x30
 8006b48:	2a63      	cmp	r2, #99	; 0x63
 8006b4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006b4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006b52:	4631      	mov	r1, r6
 8006b54:	dcf1      	bgt.n	8006b3a <__exponent+0x22>
 8006b56:	3130      	adds	r1, #48	; 0x30
 8006b58:	f1ae 0502 	sub.w	r5, lr, #2
 8006b5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006b60:	1c44      	adds	r4, r0, #1
 8006b62:	4629      	mov	r1, r5
 8006b64:	4561      	cmp	r1, ip
 8006b66:	d30a      	bcc.n	8006b7e <__exponent+0x66>
 8006b68:	f10d 0209 	add.w	r2, sp, #9
 8006b6c:	eba2 020e 	sub.w	r2, r2, lr
 8006b70:	4565      	cmp	r5, ip
 8006b72:	bf88      	it	hi
 8006b74:	2200      	movhi	r2, #0
 8006b76:	4413      	add	r3, r2
 8006b78:	1a18      	subs	r0, r3, r0
 8006b7a:	b003      	add	sp, #12
 8006b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006b86:	e7ed      	b.n	8006b64 <__exponent+0x4c>
 8006b88:	2330      	movs	r3, #48	; 0x30
 8006b8a:	3130      	adds	r1, #48	; 0x30
 8006b8c:	7083      	strb	r3, [r0, #2]
 8006b8e:	70c1      	strb	r1, [r0, #3]
 8006b90:	1d03      	adds	r3, r0, #4
 8006b92:	e7f1      	b.n	8006b78 <__exponent+0x60>

08006b94 <_printf_float>:
 8006b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b98:	ed2d 8b02 	vpush	{d8}
 8006b9c:	b08d      	sub	sp, #52	; 0x34
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	4605      	mov	r5, r0
 8006baa:	f003 f99b 	bl	8009ee4 <_localeconv_r>
 8006bae:	f8d0 a000 	ldr.w	sl, [r0]
 8006bb2:	4650      	mov	r0, sl
 8006bb4:	f7f9 fb0c 	bl	80001d0 <strlen>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	930a      	str	r3, [sp, #40]	; 0x28
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	9305      	str	r3, [sp, #20]
 8006bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006bc8:	3307      	adds	r3, #7
 8006bca:	f023 0307 	bic.w	r3, r3, #7
 8006bce:	f103 0208 	add.w	r2, r3, #8
 8006bd2:	f8c8 2000 	str.w	r2, [r8]
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006bde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006be6:	9307      	str	r3, [sp, #28]
 8006be8:	f8cd 8018 	str.w	r8, [sp, #24]
 8006bec:	ee08 0a10 	vmov	s16, r0
 8006bf0:	4b9f      	ldr	r3, [pc, #636]	; (8006e70 <_printf_float+0x2dc>)
 8006bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bfa:	f7f9 ff97 	bl	8000b2c <__aeabi_dcmpun>
 8006bfe:	bb88      	cbnz	r0, 8006c64 <_printf_float+0xd0>
 8006c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c04:	4b9a      	ldr	r3, [pc, #616]	; (8006e70 <_printf_float+0x2dc>)
 8006c06:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0a:	f7f9 ff71 	bl	8000af0 <__aeabi_dcmple>
 8006c0e:	bb48      	cbnz	r0, 8006c64 <_printf_float+0xd0>
 8006c10:	2200      	movs	r2, #0
 8006c12:	2300      	movs	r3, #0
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 ff60 	bl	8000adc <__aeabi_dcmplt>
 8006c1c:	b110      	cbz	r0, 8006c24 <_printf_float+0x90>
 8006c1e:	232d      	movs	r3, #45	; 0x2d
 8006c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c24:	4b93      	ldr	r3, [pc, #588]	; (8006e74 <_printf_float+0x2e0>)
 8006c26:	4894      	ldr	r0, [pc, #592]	; (8006e78 <_printf_float+0x2e4>)
 8006c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006c2c:	bf94      	ite	ls
 8006c2e:	4698      	movls	r8, r3
 8006c30:	4680      	movhi	r8, r0
 8006c32:	2303      	movs	r3, #3
 8006c34:	6123      	str	r3, [r4, #16]
 8006c36:	9b05      	ldr	r3, [sp, #20]
 8006c38:	f023 0204 	bic.w	r2, r3, #4
 8006c3c:	6022      	str	r2, [r4, #0]
 8006c3e:	f04f 0900 	mov.w	r9, #0
 8006c42:	9700      	str	r7, [sp, #0]
 8006c44:	4633      	mov	r3, r6
 8006c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8006c48:	4621      	mov	r1, r4
 8006c4a:	4628      	mov	r0, r5
 8006c4c:	f000 f9d8 	bl	8007000 <_printf_common>
 8006c50:	3001      	adds	r0, #1
 8006c52:	f040 8090 	bne.w	8006d76 <_printf_float+0x1e2>
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	b00d      	add	sp, #52	; 0x34
 8006c5c:	ecbd 8b02 	vpop	{d8}
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	4642      	mov	r2, r8
 8006c66:	464b      	mov	r3, r9
 8006c68:	4640      	mov	r0, r8
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	f7f9 ff5e 	bl	8000b2c <__aeabi_dcmpun>
 8006c70:	b140      	cbz	r0, 8006c84 <_printf_float+0xf0>
 8006c72:	464b      	mov	r3, r9
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfbc      	itt	lt
 8006c78:	232d      	movlt	r3, #45	; 0x2d
 8006c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006c7e:	487f      	ldr	r0, [pc, #508]	; (8006e7c <_printf_float+0x2e8>)
 8006c80:	4b7f      	ldr	r3, [pc, #508]	; (8006e80 <_printf_float+0x2ec>)
 8006c82:	e7d1      	b.n	8006c28 <_printf_float+0x94>
 8006c84:	6863      	ldr	r3, [r4, #4]
 8006c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006c8a:	9206      	str	r2, [sp, #24]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	d13f      	bne.n	8006d10 <_printf_float+0x17c>
 8006c90:	2306      	movs	r3, #6
 8006c92:	6063      	str	r3, [r4, #4]
 8006c94:	9b05      	ldr	r3, [sp, #20]
 8006c96:	6861      	ldr	r1, [r4, #4]
 8006c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9303      	str	r3, [sp, #12]
 8006ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ca6:	ab09      	add	r3, sp, #36	; 0x24
 8006ca8:	ec49 8b10 	vmov	d0, r8, r9
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	6022      	str	r2, [r4, #0]
 8006cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f7ff fecd 	bl	8006a54 <__cvt>
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cbe:	2b47      	cmp	r3, #71	; 0x47
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	d108      	bne.n	8006cd6 <_printf_float+0x142>
 8006cc4:	1cc8      	adds	r0, r1, #3
 8006cc6:	db02      	blt.n	8006cce <_printf_float+0x13a>
 8006cc8:	6863      	ldr	r3, [r4, #4]
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	dd41      	ble.n	8006d52 <_printf_float+0x1be>
 8006cce:	f1ab 0b02 	sub.w	fp, fp, #2
 8006cd2:	fa5f fb8b 	uxtb.w	fp, fp
 8006cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006cda:	d820      	bhi.n	8006d1e <_printf_float+0x18a>
 8006cdc:	3901      	subs	r1, #1
 8006cde:	465a      	mov	r2, fp
 8006ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8006ce6:	f7ff ff17 	bl	8006b18 <__exponent>
 8006cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cec:	1813      	adds	r3, r2, r0
 8006cee:	2a01      	cmp	r2, #1
 8006cf0:	4681      	mov	r9, r0
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	dc02      	bgt.n	8006cfc <_printf_float+0x168>
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	07d2      	lsls	r2, r2, #31
 8006cfa:	d501      	bpl.n	8006d00 <_printf_float+0x16c>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d09c      	beq.n	8006c42 <_printf_float+0xae>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	e798      	b.n	8006c42 <_printf_float+0xae>
 8006d10:	9a06      	ldr	r2, [sp, #24]
 8006d12:	2a47      	cmp	r2, #71	; 0x47
 8006d14:	d1be      	bne.n	8006c94 <_printf_float+0x100>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1bc      	bne.n	8006c94 <_printf_float+0x100>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	e7b9      	b.n	8006c92 <_printf_float+0xfe>
 8006d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006d22:	d118      	bne.n	8006d56 <_printf_float+0x1c2>
 8006d24:	2900      	cmp	r1, #0
 8006d26:	6863      	ldr	r3, [r4, #4]
 8006d28:	dd0b      	ble.n	8006d42 <_printf_float+0x1ae>
 8006d2a:	6121      	str	r1, [r4, #16]
 8006d2c:	b913      	cbnz	r3, 8006d34 <_printf_float+0x1a0>
 8006d2e:	6822      	ldr	r2, [r4, #0]
 8006d30:	07d0      	lsls	r0, r2, #31
 8006d32:	d502      	bpl.n	8006d3a <_printf_float+0x1a6>
 8006d34:	3301      	adds	r3, #1
 8006d36:	440b      	add	r3, r1
 8006d38:	6123      	str	r3, [r4, #16]
 8006d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006d3c:	f04f 0900 	mov.w	r9, #0
 8006d40:	e7de      	b.n	8006d00 <_printf_float+0x16c>
 8006d42:	b913      	cbnz	r3, 8006d4a <_printf_float+0x1b6>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	07d2      	lsls	r2, r2, #31
 8006d48:	d501      	bpl.n	8006d4e <_printf_float+0x1ba>
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	e7f4      	b.n	8006d38 <_printf_float+0x1a4>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e7f2      	b.n	8006d38 <_printf_float+0x1a4>
 8006d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d58:	4299      	cmp	r1, r3
 8006d5a:	db05      	blt.n	8006d68 <_printf_float+0x1d4>
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	6121      	str	r1, [r4, #16]
 8006d60:	07d8      	lsls	r0, r3, #31
 8006d62:	d5ea      	bpl.n	8006d3a <_printf_float+0x1a6>
 8006d64:	1c4b      	adds	r3, r1, #1
 8006d66:	e7e7      	b.n	8006d38 <_printf_float+0x1a4>
 8006d68:	2900      	cmp	r1, #0
 8006d6a:	bfd4      	ite	le
 8006d6c:	f1c1 0202 	rsble	r2, r1, #2
 8006d70:	2201      	movgt	r2, #1
 8006d72:	4413      	add	r3, r2
 8006d74:	e7e0      	b.n	8006d38 <_printf_float+0x1a4>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	055a      	lsls	r2, r3, #21
 8006d7a:	d407      	bmi.n	8006d8c <_printf_float+0x1f8>
 8006d7c:	6923      	ldr	r3, [r4, #16]
 8006d7e:	4642      	mov	r2, r8
 8006d80:	4631      	mov	r1, r6
 8006d82:	4628      	mov	r0, r5
 8006d84:	47b8      	blx	r7
 8006d86:	3001      	adds	r0, #1
 8006d88:	d12c      	bne.n	8006de4 <_printf_float+0x250>
 8006d8a:	e764      	b.n	8006c56 <_printf_float+0xc2>
 8006d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d90:	f240 80e0 	bls.w	8006f54 <_printf_float+0x3c0>
 8006d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d98:	2200      	movs	r2, #0
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f7f9 fe94 	bl	8000ac8 <__aeabi_dcmpeq>
 8006da0:	2800      	cmp	r0, #0
 8006da2:	d034      	beq.n	8006e0e <_printf_float+0x27a>
 8006da4:	4a37      	ldr	r2, [pc, #220]	; (8006e84 <_printf_float+0x2f0>)
 8006da6:	2301      	movs	r3, #1
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b8      	blx	r7
 8006dae:	3001      	adds	r0, #1
 8006db0:	f43f af51 	beq.w	8006c56 <_printf_float+0xc2>
 8006db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006db8:	429a      	cmp	r2, r3
 8006dba:	db02      	blt.n	8006dc2 <_printf_float+0x22e>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	07d8      	lsls	r0, r3, #31
 8006dc0:	d510      	bpl.n	8006de4 <_printf_float+0x250>
 8006dc2:	ee18 3a10 	vmov	r3, s16
 8006dc6:	4652      	mov	r2, sl
 8006dc8:	4631      	mov	r1, r6
 8006dca:	4628      	mov	r0, r5
 8006dcc:	47b8      	blx	r7
 8006dce:	3001      	adds	r0, #1
 8006dd0:	f43f af41 	beq.w	8006c56 <_printf_float+0xc2>
 8006dd4:	f04f 0800 	mov.w	r8, #0
 8006dd8:	f104 091a 	add.w	r9, r4, #26
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dde:	3b01      	subs	r3, #1
 8006de0:	4543      	cmp	r3, r8
 8006de2:	dc09      	bgt.n	8006df8 <_printf_float+0x264>
 8006de4:	6823      	ldr	r3, [r4, #0]
 8006de6:	079b      	lsls	r3, r3, #30
 8006de8:	f100 8105 	bmi.w	8006ff6 <_printf_float+0x462>
 8006dec:	68e0      	ldr	r0, [r4, #12]
 8006dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006df0:	4298      	cmp	r0, r3
 8006df2:	bfb8      	it	lt
 8006df4:	4618      	movlt	r0, r3
 8006df6:	e730      	b.n	8006c5a <_printf_float+0xc6>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	464a      	mov	r2, r9
 8006dfc:	4631      	mov	r1, r6
 8006dfe:	4628      	mov	r0, r5
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af27 	beq.w	8006c56 <_printf_float+0xc2>
 8006e08:	f108 0801 	add.w	r8, r8, #1
 8006e0c:	e7e6      	b.n	8006ddc <_printf_float+0x248>
 8006e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dc39      	bgt.n	8006e88 <_printf_float+0x2f4>
 8006e14:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <_printf_float+0x2f0>)
 8006e16:	2301      	movs	r3, #1
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af19 	beq.w	8006c56 <_printf_float+0xc2>
 8006e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	d102      	bne.n	8006e32 <_printf_float+0x29e>
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	07d9      	lsls	r1, r3, #31
 8006e30:	d5d8      	bpl.n	8006de4 <_printf_float+0x250>
 8006e32:	ee18 3a10 	vmov	r3, s16
 8006e36:	4652      	mov	r2, sl
 8006e38:	4631      	mov	r1, r6
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	47b8      	blx	r7
 8006e3e:	3001      	adds	r0, #1
 8006e40:	f43f af09 	beq.w	8006c56 <_printf_float+0xc2>
 8006e44:	f04f 0900 	mov.w	r9, #0
 8006e48:	f104 0a1a 	add.w	sl, r4, #26
 8006e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e4e:	425b      	negs	r3, r3
 8006e50:	454b      	cmp	r3, r9
 8006e52:	dc01      	bgt.n	8006e58 <_printf_float+0x2c4>
 8006e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e56:	e792      	b.n	8006d7e <_printf_float+0x1ea>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4652      	mov	r2, sl
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f aef7 	beq.w	8006c56 <_printf_float+0xc2>
 8006e68:	f109 0901 	add.w	r9, r9, #1
 8006e6c:	e7ee      	b.n	8006e4c <_printf_float+0x2b8>
 8006e6e:	bf00      	nop
 8006e70:	7fefffff 	.word	0x7fefffff
 8006e74:	0800c1a0 	.word	0x0800c1a0
 8006e78:	0800c1a4 	.word	0x0800c1a4
 8006e7c:	0800c1ac 	.word	0x0800c1ac
 8006e80:	0800c1a8 	.word	0x0800c1a8
 8006e84:	0800c1b0 	.word	0x0800c1b0
 8006e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	bfa8      	it	ge
 8006e90:	461a      	movge	r2, r3
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	4691      	mov	r9, r2
 8006e96:	dc37      	bgt.n	8006f08 <_printf_float+0x374>
 8006e98:	f04f 0b00 	mov.w	fp, #0
 8006e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ea0:	f104 021a 	add.w	r2, r4, #26
 8006ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	eba3 0309 	sub.w	r3, r3, r9
 8006eac:	455b      	cmp	r3, fp
 8006eae:	dc33      	bgt.n	8006f18 <_printf_float+0x384>
 8006eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	db3b      	blt.n	8006f30 <_printf_float+0x39c>
 8006eb8:	6823      	ldr	r3, [r4, #0]
 8006eba:	07da      	lsls	r2, r3, #31
 8006ebc:	d438      	bmi.n	8006f30 <_printf_float+0x39c>
 8006ebe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	eba2 0901 	sub.w	r9, r2, r1
 8006eca:	4599      	cmp	r9, r3
 8006ecc:	bfa8      	it	ge
 8006ece:	4699      	movge	r9, r3
 8006ed0:	f1b9 0f00 	cmp.w	r9, #0
 8006ed4:	dc35      	bgt.n	8006f42 <_printf_float+0x3ae>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ede:	f104 0a1a 	add.w	sl, r4, #26
 8006ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ee6:	1a9b      	subs	r3, r3, r2
 8006ee8:	eba3 0309 	sub.w	r3, r3, r9
 8006eec:	4543      	cmp	r3, r8
 8006eee:	f77f af79 	ble.w	8006de4 <_printf_float+0x250>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4652      	mov	r2, sl
 8006ef6:	4631      	mov	r1, r6
 8006ef8:	4628      	mov	r0, r5
 8006efa:	47b8      	blx	r7
 8006efc:	3001      	adds	r0, #1
 8006efe:	f43f aeaa 	beq.w	8006c56 <_printf_float+0xc2>
 8006f02:	f108 0801 	add.w	r8, r8, #1
 8006f06:	e7ec      	b.n	8006ee2 <_printf_float+0x34e>
 8006f08:	4613      	mov	r3, r2
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4642      	mov	r2, r8
 8006f0e:	4628      	mov	r0, r5
 8006f10:	47b8      	blx	r7
 8006f12:	3001      	adds	r0, #1
 8006f14:	d1c0      	bne.n	8006e98 <_printf_float+0x304>
 8006f16:	e69e      	b.n	8006c56 <_printf_float+0xc2>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	4628      	mov	r0, r5
 8006f1e:	9205      	str	r2, [sp, #20]
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f ae97 	beq.w	8006c56 <_printf_float+0xc2>
 8006f28:	9a05      	ldr	r2, [sp, #20]
 8006f2a:	f10b 0b01 	add.w	fp, fp, #1
 8006f2e:	e7b9      	b.n	8006ea4 <_printf_float+0x310>
 8006f30:	ee18 3a10 	vmov	r3, s16
 8006f34:	4652      	mov	r2, sl
 8006f36:	4631      	mov	r1, r6
 8006f38:	4628      	mov	r0, r5
 8006f3a:	47b8      	blx	r7
 8006f3c:	3001      	adds	r0, #1
 8006f3e:	d1be      	bne.n	8006ebe <_printf_float+0x32a>
 8006f40:	e689      	b.n	8006c56 <_printf_float+0xc2>
 8006f42:	9a05      	ldr	r2, [sp, #20]
 8006f44:	464b      	mov	r3, r9
 8006f46:	4442      	add	r2, r8
 8006f48:	4631      	mov	r1, r6
 8006f4a:	4628      	mov	r0, r5
 8006f4c:	47b8      	blx	r7
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d1c1      	bne.n	8006ed6 <_printf_float+0x342>
 8006f52:	e680      	b.n	8006c56 <_printf_float+0xc2>
 8006f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f56:	2a01      	cmp	r2, #1
 8006f58:	dc01      	bgt.n	8006f5e <_printf_float+0x3ca>
 8006f5a:	07db      	lsls	r3, r3, #31
 8006f5c:	d538      	bpl.n	8006fd0 <_printf_float+0x43c>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4642      	mov	r2, r8
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	f43f ae74 	beq.w	8006c56 <_printf_float+0xc2>
 8006f6e:	ee18 3a10 	vmov	r3, s16
 8006f72:	4652      	mov	r2, sl
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f ae6b 	beq.w	8006c56 <_printf_float+0xc2>
 8006f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006f84:	2200      	movs	r2, #0
 8006f86:	2300      	movs	r3, #0
 8006f88:	f7f9 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f8c:	b9d8      	cbnz	r0, 8006fc6 <_printf_float+0x432>
 8006f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f90:	f108 0201 	add.w	r2, r8, #1
 8006f94:	3b01      	subs	r3, #1
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	d10e      	bne.n	8006fbe <_printf_float+0x42a>
 8006fa0:	e659      	b.n	8006c56 <_printf_float+0xc2>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	4652      	mov	r2, sl
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	f43f ae52 	beq.w	8006c56 <_printf_float+0xc2>
 8006fb2:	f108 0801 	add.w	r8, r8, #1
 8006fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	4543      	cmp	r3, r8
 8006fbc:	dcf1      	bgt.n	8006fa2 <_printf_float+0x40e>
 8006fbe:	464b      	mov	r3, r9
 8006fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006fc4:	e6dc      	b.n	8006d80 <_printf_float+0x1ec>
 8006fc6:	f04f 0800 	mov.w	r8, #0
 8006fca:	f104 0a1a 	add.w	sl, r4, #26
 8006fce:	e7f2      	b.n	8006fb6 <_printf_float+0x422>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	4642      	mov	r2, r8
 8006fd4:	e7df      	b.n	8006f96 <_printf_float+0x402>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	464a      	mov	r2, r9
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f ae38 	beq.w	8006c56 <_printf_float+0xc2>
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	68e3      	ldr	r3, [r4, #12]
 8006fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006fee:	1a5b      	subs	r3, r3, r1
 8006ff0:	4543      	cmp	r3, r8
 8006ff2:	dcf0      	bgt.n	8006fd6 <_printf_float+0x442>
 8006ff4:	e6fa      	b.n	8006dec <_printf_float+0x258>
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	f104 0919 	add.w	r9, r4, #25
 8006ffe:	e7f4      	b.n	8006fea <_printf_float+0x456>

08007000 <_printf_common>:
 8007000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007004:	4616      	mov	r6, r2
 8007006:	4699      	mov	r9, r3
 8007008:	688a      	ldr	r2, [r1, #8]
 800700a:	690b      	ldr	r3, [r1, #16]
 800700c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007010:	4293      	cmp	r3, r2
 8007012:	bfb8      	it	lt
 8007014:	4613      	movlt	r3, r2
 8007016:	6033      	str	r3, [r6, #0]
 8007018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800701c:	4607      	mov	r7, r0
 800701e:	460c      	mov	r4, r1
 8007020:	b10a      	cbz	r2, 8007026 <_printf_common+0x26>
 8007022:	3301      	adds	r3, #1
 8007024:	6033      	str	r3, [r6, #0]
 8007026:	6823      	ldr	r3, [r4, #0]
 8007028:	0699      	lsls	r1, r3, #26
 800702a:	bf42      	ittt	mi
 800702c:	6833      	ldrmi	r3, [r6, #0]
 800702e:	3302      	addmi	r3, #2
 8007030:	6033      	strmi	r3, [r6, #0]
 8007032:	6825      	ldr	r5, [r4, #0]
 8007034:	f015 0506 	ands.w	r5, r5, #6
 8007038:	d106      	bne.n	8007048 <_printf_common+0x48>
 800703a:	f104 0a19 	add.w	sl, r4, #25
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	6832      	ldr	r2, [r6, #0]
 8007042:	1a9b      	subs	r3, r3, r2
 8007044:	42ab      	cmp	r3, r5
 8007046:	dc26      	bgt.n	8007096 <_printf_common+0x96>
 8007048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800704c:	1e13      	subs	r3, r2, #0
 800704e:	6822      	ldr	r2, [r4, #0]
 8007050:	bf18      	it	ne
 8007052:	2301      	movne	r3, #1
 8007054:	0692      	lsls	r2, r2, #26
 8007056:	d42b      	bmi.n	80070b0 <_printf_common+0xb0>
 8007058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800705c:	4649      	mov	r1, r9
 800705e:	4638      	mov	r0, r7
 8007060:	47c0      	blx	r8
 8007062:	3001      	adds	r0, #1
 8007064:	d01e      	beq.n	80070a4 <_printf_common+0xa4>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	68e5      	ldr	r5, [r4, #12]
 800706a:	6832      	ldr	r2, [r6, #0]
 800706c:	f003 0306 	and.w	r3, r3, #6
 8007070:	2b04      	cmp	r3, #4
 8007072:	bf08      	it	eq
 8007074:	1aad      	subeq	r5, r5, r2
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	6922      	ldr	r2, [r4, #16]
 800707a:	bf0c      	ite	eq
 800707c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007080:	2500      	movne	r5, #0
 8007082:	4293      	cmp	r3, r2
 8007084:	bfc4      	itt	gt
 8007086:	1a9b      	subgt	r3, r3, r2
 8007088:	18ed      	addgt	r5, r5, r3
 800708a:	2600      	movs	r6, #0
 800708c:	341a      	adds	r4, #26
 800708e:	42b5      	cmp	r5, r6
 8007090:	d11a      	bne.n	80070c8 <_printf_common+0xc8>
 8007092:	2000      	movs	r0, #0
 8007094:	e008      	b.n	80070a8 <_printf_common+0xa8>
 8007096:	2301      	movs	r3, #1
 8007098:	4652      	mov	r2, sl
 800709a:	4649      	mov	r1, r9
 800709c:	4638      	mov	r0, r7
 800709e:	47c0      	blx	r8
 80070a0:	3001      	adds	r0, #1
 80070a2:	d103      	bne.n	80070ac <_printf_common+0xac>
 80070a4:	f04f 30ff 	mov.w	r0, #4294967295
 80070a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ac:	3501      	adds	r5, #1
 80070ae:	e7c6      	b.n	800703e <_printf_common+0x3e>
 80070b0:	18e1      	adds	r1, r4, r3
 80070b2:	1c5a      	adds	r2, r3, #1
 80070b4:	2030      	movs	r0, #48	; 0x30
 80070b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80070ba:	4422      	add	r2, r4
 80070bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80070c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80070c4:	3302      	adds	r3, #2
 80070c6:	e7c7      	b.n	8007058 <_printf_common+0x58>
 80070c8:	2301      	movs	r3, #1
 80070ca:	4622      	mov	r2, r4
 80070cc:	4649      	mov	r1, r9
 80070ce:	4638      	mov	r0, r7
 80070d0:	47c0      	blx	r8
 80070d2:	3001      	adds	r0, #1
 80070d4:	d0e6      	beq.n	80070a4 <_printf_common+0xa4>
 80070d6:	3601      	adds	r6, #1
 80070d8:	e7d9      	b.n	800708e <_printf_common+0x8e>
	...

080070dc <_printf_i>:
 80070dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e0:	460c      	mov	r4, r1
 80070e2:	4691      	mov	r9, r2
 80070e4:	7e27      	ldrb	r7, [r4, #24]
 80070e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80070e8:	2f78      	cmp	r7, #120	; 0x78
 80070ea:	4680      	mov	r8, r0
 80070ec:	469a      	mov	sl, r3
 80070ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070f2:	d807      	bhi.n	8007104 <_printf_i+0x28>
 80070f4:	2f62      	cmp	r7, #98	; 0x62
 80070f6:	d80a      	bhi.n	800710e <_printf_i+0x32>
 80070f8:	2f00      	cmp	r7, #0
 80070fa:	f000 80d8 	beq.w	80072ae <_printf_i+0x1d2>
 80070fe:	2f58      	cmp	r7, #88	; 0x58
 8007100:	f000 80a3 	beq.w	800724a <_printf_i+0x16e>
 8007104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800710c:	e03a      	b.n	8007184 <_printf_i+0xa8>
 800710e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007112:	2b15      	cmp	r3, #21
 8007114:	d8f6      	bhi.n	8007104 <_printf_i+0x28>
 8007116:	a001      	add	r0, pc, #4	; (adr r0, 800711c <_printf_i+0x40>)
 8007118:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800711c:	08007175 	.word	0x08007175
 8007120:	08007189 	.word	0x08007189
 8007124:	08007105 	.word	0x08007105
 8007128:	08007105 	.word	0x08007105
 800712c:	08007105 	.word	0x08007105
 8007130:	08007105 	.word	0x08007105
 8007134:	08007189 	.word	0x08007189
 8007138:	08007105 	.word	0x08007105
 800713c:	08007105 	.word	0x08007105
 8007140:	08007105 	.word	0x08007105
 8007144:	08007105 	.word	0x08007105
 8007148:	08007295 	.word	0x08007295
 800714c:	080071b9 	.word	0x080071b9
 8007150:	08007277 	.word	0x08007277
 8007154:	08007105 	.word	0x08007105
 8007158:	08007105 	.word	0x08007105
 800715c:	080072b7 	.word	0x080072b7
 8007160:	08007105 	.word	0x08007105
 8007164:	080071b9 	.word	0x080071b9
 8007168:	08007105 	.word	0x08007105
 800716c:	08007105 	.word	0x08007105
 8007170:	0800727f 	.word	0x0800727f
 8007174:	680b      	ldr	r3, [r1, #0]
 8007176:	1d1a      	adds	r2, r3, #4
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	600a      	str	r2, [r1, #0]
 800717c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007184:	2301      	movs	r3, #1
 8007186:	e0a3      	b.n	80072d0 <_printf_i+0x1f4>
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	6808      	ldr	r0, [r1, #0]
 800718c:	062e      	lsls	r6, r5, #24
 800718e:	f100 0304 	add.w	r3, r0, #4
 8007192:	d50a      	bpl.n	80071aa <_printf_i+0xce>
 8007194:	6805      	ldr	r5, [r0, #0]
 8007196:	600b      	str	r3, [r1, #0]
 8007198:	2d00      	cmp	r5, #0
 800719a:	da03      	bge.n	80071a4 <_printf_i+0xc8>
 800719c:	232d      	movs	r3, #45	; 0x2d
 800719e:	426d      	negs	r5, r5
 80071a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071a4:	485e      	ldr	r0, [pc, #376]	; (8007320 <_printf_i+0x244>)
 80071a6:	230a      	movs	r3, #10
 80071a8:	e019      	b.n	80071de <_printf_i+0x102>
 80071aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80071ae:	6805      	ldr	r5, [r0, #0]
 80071b0:	600b      	str	r3, [r1, #0]
 80071b2:	bf18      	it	ne
 80071b4:	b22d      	sxthne	r5, r5
 80071b6:	e7ef      	b.n	8007198 <_printf_i+0xbc>
 80071b8:	680b      	ldr	r3, [r1, #0]
 80071ba:	6825      	ldr	r5, [r4, #0]
 80071bc:	1d18      	adds	r0, r3, #4
 80071be:	6008      	str	r0, [r1, #0]
 80071c0:	0628      	lsls	r0, r5, #24
 80071c2:	d501      	bpl.n	80071c8 <_printf_i+0xec>
 80071c4:	681d      	ldr	r5, [r3, #0]
 80071c6:	e002      	b.n	80071ce <_printf_i+0xf2>
 80071c8:	0669      	lsls	r1, r5, #25
 80071ca:	d5fb      	bpl.n	80071c4 <_printf_i+0xe8>
 80071cc:	881d      	ldrh	r5, [r3, #0]
 80071ce:	4854      	ldr	r0, [pc, #336]	; (8007320 <_printf_i+0x244>)
 80071d0:	2f6f      	cmp	r7, #111	; 0x6f
 80071d2:	bf0c      	ite	eq
 80071d4:	2308      	moveq	r3, #8
 80071d6:	230a      	movne	r3, #10
 80071d8:	2100      	movs	r1, #0
 80071da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80071de:	6866      	ldr	r6, [r4, #4]
 80071e0:	60a6      	str	r6, [r4, #8]
 80071e2:	2e00      	cmp	r6, #0
 80071e4:	bfa2      	ittt	ge
 80071e6:	6821      	ldrge	r1, [r4, #0]
 80071e8:	f021 0104 	bicge.w	r1, r1, #4
 80071ec:	6021      	strge	r1, [r4, #0]
 80071ee:	b90d      	cbnz	r5, 80071f4 <_printf_i+0x118>
 80071f0:	2e00      	cmp	r6, #0
 80071f2:	d04d      	beq.n	8007290 <_printf_i+0x1b4>
 80071f4:	4616      	mov	r6, r2
 80071f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80071fa:	fb03 5711 	mls	r7, r3, r1, r5
 80071fe:	5dc7      	ldrb	r7, [r0, r7]
 8007200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007204:	462f      	mov	r7, r5
 8007206:	42bb      	cmp	r3, r7
 8007208:	460d      	mov	r5, r1
 800720a:	d9f4      	bls.n	80071f6 <_printf_i+0x11a>
 800720c:	2b08      	cmp	r3, #8
 800720e:	d10b      	bne.n	8007228 <_printf_i+0x14c>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	07df      	lsls	r7, r3, #31
 8007214:	d508      	bpl.n	8007228 <_printf_i+0x14c>
 8007216:	6923      	ldr	r3, [r4, #16]
 8007218:	6861      	ldr	r1, [r4, #4]
 800721a:	4299      	cmp	r1, r3
 800721c:	bfde      	ittt	le
 800721e:	2330      	movle	r3, #48	; 0x30
 8007220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007228:	1b92      	subs	r2, r2, r6
 800722a:	6122      	str	r2, [r4, #16]
 800722c:	f8cd a000 	str.w	sl, [sp]
 8007230:	464b      	mov	r3, r9
 8007232:	aa03      	add	r2, sp, #12
 8007234:	4621      	mov	r1, r4
 8007236:	4640      	mov	r0, r8
 8007238:	f7ff fee2 	bl	8007000 <_printf_common>
 800723c:	3001      	adds	r0, #1
 800723e:	d14c      	bne.n	80072da <_printf_i+0x1fe>
 8007240:	f04f 30ff 	mov.w	r0, #4294967295
 8007244:	b004      	add	sp, #16
 8007246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800724a:	4835      	ldr	r0, [pc, #212]	; (8007320 <_printf_i+0x244>)
 800724c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007250:	6823      	ldr	r3, [r4, #0]
 8007252:	680e      	ldr	r6, [r1, #0]
 8007254:	061f      	lsls	r7, r3, #24
 8007256:	f856 5b04 	ldr.w	r5, [r6], #4
 800725a:	600e      	str	r6, [r1, #0]
 800725c:	d514      	bpl.n	8007288 <_printf_i+0x1ac>
 800725e:	07d9      	lsls	r1, r3, #31
 8007260:	bf44      	itt	mi
 8007262:	f043 0320 	orrmi.w	r3, r3, #32
 8007266:	6023      	strmi	r3, [r4, #0]
 8007268:	b91d      	cbnz	r5, 8007272 <_printf_i+0x196>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	f023 0320 	bic.w	r3, r3, #32
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	2310      	movs	r3, #16
 8007274:	e7b0      	b.n	80071d8 <_printf_i+0xfc>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	f043 0320 	orr.w	r3, r3, #32
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	2378      	movs	r3, #120	; 0x78
 8007280:	4828      	ldr	r0, [pc, #160]	; (8007324 <_printf_i+0x248>)
 8007282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007286:	e7e3      	b.n	8007250 <_printf_i+0x174>
 8007288:	065e      	lsls	r6, r3, #25
 800728a:	bf48      	it	mi
 800728c:	b2ad      	uxthmi	r5, r5
 800728e:	e7e6      	b.n	800725e <_printf_i+0x182>
 8007290:	4616      	mov	r6, r2
 8007292:	e7bb      	b.n	800720c <_printf_i+0x130>
 8007294:	680b      	ldr	r3, [r1, #0]
 8007296:	6826      	ldr	r6, [r4, #0]
 8007298:	6960      	ldr	r0, [r4, #20]
 800729a:	1d1d      	adds	r5, r3, #4
 800729c:	600d      	str	r5, [r1, #0]
 800729e:	0635      	lsls	r5, r6, #24
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	d501      	bpl.n	80072a8 <_printf_i+0x1cc>
 80072a4:	6018      	str	r0, [r3, #0]
 80072a6:	e002      	b.n	80072ae <_printf_i+0x1d2>
 80072a8:	0671      	lsls	r1, r6, #25
 80072aa:	d5fb      	bpl.n	80072a4 <_printf_i+0x1c8>
 80072ac:	8018      	strh	r0, [r3, #0]
 80072ae:	2300      	movs	r3, #0
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	4616      	mov	r6, r2
 80072b4:	e7ba      	b.n	800722c <_printf_i+0x150>
 80072b6:	680b      	ldr	r3, [r1, #0]
 80072b8:	1d1a      	adds	r2, r3, #4
 80072ba:	600a      	str	r2, [r1, #0]
 80072bc:	681e      	ldr	r6, [r3, #0]
 80072be:	6862      	ldr	r2, [r4, #4]
 80072c0:	2100      	movs	r1, #0
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7f8 ff8c 	bl	80001e0 <memchr>
 80072c8:	b108      	cbz	r0, 80072ce <_printf_i+0x1f2>
 80072ca:	1b80      	subs	r0, r0, r6
 80072cc:	6060      	str	r0, [r4, #4]
 80072ce:	6863      	ldr	r3, [r4, #4]
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	2300      	movs	r3, #0
 80072d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072d8:	e7a8      	b.n	800722c <_printf_i+0x150>
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	4632      	mov	r2, r6
 80072de:	4649      	mov	r1, r9
 80072e0:	4640      	mov	r0, r8
 80072e2:	47d0      	blx	sl
 80072e4:	3001      	adds	r0, #1
 80072e6:	d0ab      	beq.n	8007240 <_printf_i+0x164>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	079b      	lsls	r3, r3, #30
 80072ec:	d413      	bmi.n	8007316 <_printf_i+0x23a>
 80072ee:	68e0      	ldr	r0, [r4, #12]
 80072f0:	9b03      	ldr	r3, [sp, #12]
 80072f2:	4298      	cmp	r0, r3
 80072f4:	bfb8      	it	lt
 80072f6:	4618      	movlt	r0, r3
 80072f8:	e7a4      	b.n	8007244 <_printf_i+0x168>
 80072fa:	2301      	movs	r3, #1
 80072fc:	4632      	mov	r2, r6
 80072fe:	4649      	mov	r1, r9
 8007300:	4640      	mov	r0, r8
 8007302:	47d0      	blx	sl
 8007304:	3001      	adds	r0, #1
 8007306:	d09b      	beq.n	8007240 <_printf_i+0x164>
 8007308:	3501      	adds	r5, #1
 800730a:	68e3      	ldr	r3, [r4, #12]
 800730c:	9903      	ldr	r1, [sp, #12]
 800730e:	1a5b      	subs	r3, r3, r1
 8007310:	42ab      	cmp	r3, r5
 8007312:	dcf2      	bgt.n	80072fa <_printf_i+0x21e>
 8007314:	e7eb      	b.n	80072ee <_printf_i+0x212>
 8007316:	2500      	movs	r5, #0
 8007318:	f104 0619 	add.w	r6, r4, #25
 800731c:	e7f5      	b.n	800730a <_printf_i+0x22e>
 800731e:	bf00      	nop
 8007320:	0800c1b2 	.word	0x0800c1b2
 8007324:	0800c1c3 	.word	0x0800c1c3

08007328 <_scanf_float>:
 8007328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732c:	b087      	sub	sp, #28
 800732e:	4617      	mov	r7, r2
 8007330:	9303      	str	r3, [sp, #12]
 8007332:	688b      	ldr	r3, [r1, #8]
 8007334:	1e5a      	subs	r2, r3, #1
 8007336:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800733a:	bf83      	ittte	hi
 800733c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007340:	195b      	addhi	r3, r3, r5
 8007342:	9302      	strhi	r3, [sp, #8]
 8007344:	2300      	movls	r3, #0
 8007346:	bf86      	itte	hi
 8007348:	f240 135d 	movwhi	r3, #349	; 0x15d
 800734c:	608b      	strhi	r3, [r1, #8]
 800734e:	9302      	strls	r3, [sp, #8]
 8007350:	680b      	ldr	r3, [r1, #0]
 8007352:	468b      	mov	fp, r1
 8007354:	2500      	movs	r5, #0
 8007356:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800735a:	f84b 3b1c 	str.w	r3, [fp], #28
 800735e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007362:	4680      	mov	r8, r0
 8007364:	460c      	mov	r4, r1
 8007366:	465e      	mov	r6, fp
 8007368:	46aa      	mov	sl, r5
 800736a:	46a9      	mov	r9, r5
 800736c:	9501      	str	r5, [sp, #4]
 800736e:	68a2      	ldr	r2, [r4, #8]
 8007370:	b152      	cbz	r2, 8007388 <_scanf_float+0x60>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b4e      	cmp	r3, #78	; 0x4e
 8007378:	d864      	bhi.n	8007444 <_scanf_float+0x11c>
 800737a:	2b40      	cmp	r3, #64	; 0x40
 800737c:	d83c      	bhi.n	80073f8 <_scanf_float+0xd0>
 800737e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007382:	b2c8      	uxtb	r0, r1
 8007384:	280e      	cmp	r0, #14
 8007386:	d93a      	bls.n	80073fe <_scanf_float+0xd6>
 8007388:	f1b9 0f00 	cmp.w	r9, #0
 800738c:	d003      	beq.n	8007396 <_scanf_float+0x6e>
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007394:	6023      	str	r3, [r4, #0]
 8007396:	f10a 3aff 	add.w	sl, sl, #4294967295
 800739a:	f1ba 0f01 	cmp.w	sl, #1
 800739e:	f200 8113 	bhi.w	80075c8 <_scanf_float+0x2a0>
 80073a2:	455e      	cmp	r6, fp
 80073a4:	f200 8105 	bhi.w	80075b2 <_scanf_float+0x28a>
 80073a8:	2501      	movs	r5, #1
 80073aa:	4628      	mov	r0, r5
 80073ac:	b007      	add	sp, #28
 80073ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80073b6:	2a0d      	cmp	r2, #13
 80073b8:	d8e6      	bhi.n	8007388 <_scanf_float+0x60>
 80073ba:	a101      	add	r1, pc, #4	; (adr r1, 80073c0 <_scanf_float+0x98>)
 80073bc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80073c0:	080074ff 	.word	0x080074ff
 80073c4:	08007389 	.word	0x08007389
 80073c8:	08007389 	.word	0x08007389
 80073cc:	08007389 	.word	0x08007389
 80073d0:	0800755f 	.word	0x0800755f
 80073d4:	08007537 	.word	0x08007537
 80073d8:	08007389 	.word	0x08007389
 80073dc:	08007389 	.word	0x08007389
 80073e0:	0800750d 	.word	0x0800750d
 80073e4:	08007389 	.word	0x08007389
 80073e8:	08007389 	.word	0x08007389
 80073ec:	08007389 	.word	0x08007389
 80073f0:	08007389 	.word	0x08007389
 80073f4:	080074c5 	.word	0x080074c5
 80073f8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80073fc:	e7db      	b.n	80073b6 <_scanf_float+0x8e>
 80073fe:	290e      	cmp	r1, #14
 8007400:	d8c2      	bhi.n	8007388 <_scanf_float+0x60>
 8007402:	a001      	add	r0, pc, #4	; (adr r0, 8007408 <_scanf_float+0xe0>)
 8007404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007408:	080074b7 	.word	0x080074b7
 800740c:	08007389 	.word	0x08007389
 8007410:	080074b7 	.word	0x080074b7
 8007414:	0800754b 	.word	0x0800754b
 8007418:	08007389 	.word	0x08007389
 800741c:	08007465 	.word	0x08007465
 8007420:	080074a1 	.word	0x080074a1
 8007424:	080074a1 	.word	0x080074a1
 8007428:	080074a1 	.word	0x080074a1
 800742c:	080074a1 	.word	0x080074a1
 8007430:	080074a1 	.word	0x080074a1
 8007434:	080074a1 	.word	0x080074a1
 8007438:	080074a1 	.word	0x080074a1
 800743c:	080074a1 	.word	0x080074a1
 8007440:	080074a1 	.word	0x080074a1
 8007444:	2b6e      	cmp	r3, #110	; 0x6e
 8007446:	d809      	bhi.n	800745c <_scanf_float+0x134>
 8007448:	2b60      	cmp	r3, #96	; 0x60
 800744a:	d8b2      	bhi.n	80073b2 <_scanf_float+0x8a>
 800744c:	2b54      	cmp	r3, #84	; 0x54
 800744e:	d077      	beq.n	8007540 <_scanf_float+0x218>
 8007450:	2b59      	cmp	r3, #89	; 0x59
 8007452:	d199      	bne.n	8007388 <_scanf_float+0x60>
 8007454:	2d07      	cmp	r5, #7
 8007456:	d197      	bne.n	8007388 <_scanf_float+0x60>
 8007458:	2508      	movs	r5, #8
 800745a:	e029      	b.n	80074b0 <_scanf_float+0x188>
 800745c:	2b74      	cmp	r3, #116	; 0x74
 800745e:	d06f      	beq.n	8007540 <_scanf_float+0x218>
 8007460:	2b79      	cmp	r3, #121	; 0x79
 8007462:	e7f6      	b.n	8007452 <_scanf_float+0x12a>
 8007464:	6821      	ldr	r1, [r4, #0]
 8007466:	05c8      	lsls	r0, r1, #23
 8007468:	d51a      	bpl.n	80074a0 <_scanf_float+0x178>
 800746a:	9b02      	ldr	r3, [sp, #8]
 800746c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007470:	6021      	str	r1, [r4, #0]
 8007472:	f109 0901 	add.w	r9, r9, #1
 8007476:	b11b      	cbz	r3, 8007480 <_scanf_float+0x158>
 8007478:	3b01      	subs	r3, #1
 800747a:	3201      	adds	r2, #1
 800747c:	9302      	str	r3, [sp, #8]
 800747e:	60a2      	str	r2, [r4, #8]
 8007480:	68a3      	ldr	r3, [r4, #8]
 8007482:	3b01      	subs	r3, #1
 8007484:	60a3      	str	r3, [r4, #8]
 8007486:	6923      	ldr	r3, [r4, #16]
 8007488:	3301      	adds	r3, #1
 800748a:	6123      	str	r3, [r4, #16]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	3b01      	subs	r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	607b      	str	r3, [r7, #4]
 8007494:	f340 8084 	ble.w	80075a0 <_scanf_float+0x278>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	3301      	adds	r3, #1
 800749c:	603b      	str	r3, [r7, #0]
 800749e:	e766      	b.n	800736e <_scanf_float+0x46>
 80074a0:	eb1a 0f05 	cmn.w	sl, r5
 80074a4:	f47f af70 	bne.w	8007388 <_scanf_float+0x60>
 80074a8:	6822      	ldr	r2, [r4, #0]
 80074aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80074ae:	6022      	str	r2, [r4, #0]
 80074b0:	f806 3b01 	strb.w	r3, [r6], #1
 80074b4:	e7e4      	b.n	8007480 <_scanf_float+0x158>
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	0610      	lsls	r0, r2, #24
 80074ba:	f57f af65 	bpl.w	8007388 <_scanf_float+0x60>
 80074be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074c2:	e7f4      	b.n	80074ae <_scanf_float+0x186>
 80074c4:	f1ba 0f00 	cmp.w	sl, #0
 80074c8:	d10e      	bne.n	80074e8 <_scanf_float+0x1c0>
 80074ca:	f1b9 0f00 	cmp.w	r9, #0
 80074ce:	d10e      	bne.n	80074ee <_scanf_float+0x1c6>
 80074d0:	6822      	ldr	r2, [r4, #0]
 80074d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80074d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80074da:	d108      	bne.n	80074ee <_scanf_float+0x1c6>
 80074dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	f04f 0a01 	mov.w	sl, #1
 80074e6:	e7e3      	b.n	80074b0 <_scanf_float+0x188>
 80074e8:	f1ba 0f02 	cmp.w	sl, #2
 80074ec:	d055      	beq.n	800759a <_scanf_float+0x272>
 80074ee:	2d01      	cmp	r5, #1
 80074f0:	d002      	beq.n	80074f8 <_scanf_float+0x1d0>
 80074f2:	2d04      	cmp	r5, #4
 80074f4:	f47f af48 	bne.w	8007388 <_scanf_float+0x60>
 80074f8:	3501      	adds	r5, #1
 80074fa:	b2ed      	uxtb	r5, r5
 80074fc:	e7d8      	b.n	80074b0 <_scanf_float+0x188>
 80074fe:	f1ba 0f01 	cmp.w	sl, #1
 8007502:	f47f af41 	bne.w	8007388 <_scanf_float+0x60>
 8007506:	f04f 0a02 	mov.w	sl, #2
 800750a:	e7d1      	b.n	80074b0 <_scanf_float+0x188>
 800750c:	b97d      	cbnz	r5, 800752e <_scanf_float+0x206>
 800750e:	f1b9 0f00 	cmp.w	r9, #0
 8007512:	f47f af3c 	bne.w	800738e <_scanf_float+0x66>
 8007516:	6822      	ldr	r2, [r4, #0]
 8007518:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800751c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007520:	f47f af39 	bne.w	8007396 <_scanf_float+0x6e>
 8007524:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007528:	6022      	str	r2, [r4, #0]
 800752a:	2501      	movs	r5, #1
 800752c:	e7c0      	b.n	80074b0 <_scanf_float+0x188>
 800752e:	2d03      	cmp	r5, #3
 8007530:	d0e2      	beq.n	80074f8 <_scanf_float+0x1d0>
 8007532:	2d05      	cmp	r5, #5
 8007534:	e7de      	b.n	80074f4 <_scanf_float+0x1cc>
 8007536:	2d02      	cmp	r5, #2
 8007538:	f47f af26 	bne.w	8007388 <_scanf_float+0x60>
 800753c:	2503      	movs	r5, #3
 800753e:	e7b7      	b.n	80074b0 <_scanf_float+0x188>
 8007540:	2d06      	cmp	r5, #6
 8007542:	f47f af21 	bne.w	8007388 <_scanf_float+0x60>
 8007546:	2507      	movs	r5, #7
 8007548:	e7b2      	b.n	80074b0 <_scanf_float+0x188>
 800754a:	6822      	ldr	r2, [r4, #0]
 800754c:	0591      	lsls	r1, r2, #22
 800754e:	f57f af1b 	bpl.w	8007388 <_scanf_float+0x60>
 8007552:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007556:	6022      	str	r2, [r4, #0]
 8007558:	f8cd 9004 	str.w	r9, [sp, #4]
 800755c:	e7a8      	b.n	80074b0 <_scanf_float+0x188>
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007564:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007568:	d006      	beq.n	8007578 <_scanf_float+0x250>
 800756a:	0550      	lsls	r0, r2, #21
 800756c:	f57f af0c 	bpl.w	8007388 <_scanf_float+0x60>
 8007570:	f1b9 0f00 	cmp.w	r9, #0
 8007574:	f43f af0f 	beq.w	8007396 <_scanf_float+0x6e>
 8007578:	0591      	lsls	r1, r2, #22
 800757a:	bf58      	it	pl
 800757c:	9901      	ldrpl	r1, [sp, #4]
 800757e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007582:	bf58      	it	pl
 8007584:	eba9 0101 	subpl.w	r1, r9, r1
 8007588:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800758c:	bf58      	it	pl
 800758e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007592:	6022      	str	r2, [r4, #0]
 8007594:	f04f 0900 	mov.w	r9, #0
 8007598:	e78a      	b.n	80074b0 <_scanf_float+0x188>
 800759a:	f04f 0a03 	mov.w	sl, #3
 800759e:	e787      	b.n	80074b0 <_scanf_float+0x188>
 80075a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80075a4:	4639      	mov	r1, r7
 80075a6:	4640      	mov	r0, r8
 80075a8:	4798      	blx	r3
 80075aa:	2800      	cmp	r0, #0
 80075ac:	f43f aedf 	beq.w	800736e <_scanf_float+0x46>
 80075b0:	e6ea      	b.n	8007388 <_scanf_float+0x60>
 80075b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075ba:	463a      	mov	r2, r7
 80075bc:	4640      	mov	r0, r8
 80075be:	4798      	blx	r3
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	6123      	str	r3, [r4, #16]
 80075c6:	e6ec      	b.n	80073a2 <_scanf_float+0x7a>
 80075c8:	1e6b      	subs	r3, r5, #1
 80075ca:	2b06      	cmp	r3, #6
 80075cc:	d825      	bhi.n	800761a <_scanf_float+0x2f2>
 80075ce:	2d02      	cmp	r5, #2
 80075d0:	d836      	bhi.n	8007640 <_scanf_float+0x318>
 80075d2:	455e      	cmp	r6, fp
 80075d4:	f67f aee8 	bls.w	80073a8 <_scanf_float+0x80>
 80075d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80075e0:	463a      	mov	r2, r7
 80075e2:	4640      	mov	r0, r8
 80075e4:	4798      	blx	r3
 80075e6:	6923      	ldr	r3, [r4, #16]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	e7f1      	b.n	80075d2 <_scanf_float+0x2aa>
 80075ee:	9802      	ldr	r0, [sp, #8]
 80075f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80075f8:	9002      	str	r0, [sp, #8]
 80075fa:	463a      	mov	r2, r7
 80075fc:	4640      	mov	r0, r8
 80075fe:	4798      	blx	r3
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	3b01      	subs	r3, #1
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800760a:	fa5f fa8a 	uxtb.w	sl, sl
 800760e:	f1ba 0f02 	cmp.w	sl, #2
 8007612:	d1ec      	bne.n	80075ee <_scanf_float+0x2c6>
 8007614:	3d03      	subs	r5, #3
 8007616:	b2ed      	uxtb	r5, r5
 8007618:	1b76      	subs	r6, r6, r5
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	05da      	lsls	r2, r3, #23
 800761e:	d52f      	bpl.n	8007680 <_scanf_float+0x358>
 8007620:	055b      	lsls	r3, r3, #21
 8007622:	d510      	bpl.n	8007646 <_scanf_float+0x31e>
 8007624:	455e      	cmp	r6, fp
 8007626:	f67f aebf 	bls.w	80073a8 <_scanf_float+0x80>
 800762a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800762e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007632:	463a      	mov	r2, r7
 8007634:	4640      	mov	r0, r8
 8007636:	4798      	blx	r3
 8007638:	6923      	ldr	r3, [r4, #16]
 800763a:	3b01      	subs	r3, #1
 800763c:	6123      	str	r3, [r4, #16]
 800763e:	e7f1      	b.n	8007624 <_scanf_float+0x2fc>
 8007640:	46aa      	mov	sl, r5
 8007642:	9602      	str	r6, [sp, #8]
 8007644:	e7df      	b.n	8007606 <_scanf_float+0x2de>
 8007646:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800764a:	6923      	ldr	r3, [r4, #16]
 800764c:	2965      	cmp	r1, #101	; 0x65
 800764e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007652:	f106 35ff 	add.w	r5, r6, #4294967295
 8007656:	6123      	str	r3, [r4, #16]
 8007658:	d00c      	beq.n	8007674 <_scanf_float+0x34c>
 800765a:	2945      	cmp	r1, #69	; 0x45
 800765c:	d00a      	beq.n	8007674 <_scanf_float+0x34c>
 800765e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007662:	463a      	mov	r2, r7
 8007664:	4640      	mov	r0, r8
 8007666:	4798      	blx	r3
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800766e:	3b01      	subs	r3, #1
 8007670:	1eb5      	subs	r5, r6, #2
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007678:	463a      	mov	r2, r7
 800767a:	4640      	mov	r0, r8
 800767c:	4798      	blx	r3
 800767e:	462e      	mov	r6, r5
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	f015 0510 	ands.w	r5, r5, #16
 8007686:	d158      	bne.n	800773a <_scanf_float+0x412>
 8007688:	7035      	strb	r5, [r6, #0]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007694:	d11c      	bne.n	80076d0 <_scanf_float+0x3a8>
 8007696:	9b01      	ldr	r3, [sp, #4]
 8007698:	454b      	cmp	r3, r9
 800769a:	eba3 0209 	sub.w	r2, r3, r9
 800769e:	d124      	bne.n	80076ea <_scanf_float+0x3c2>
 80076a0:	2200      	movs	r2, #0
 80076a2:	4659      	mov	r1, fp
 80076a4:	4640      	mov	r0, r8
 80076a6:	f000 ff29 	bl	80084fc <_strtod_r>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	6821      	ldr	r1, [r4, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f011 0f02 	tst.w	r1, #2
 80076b4:	ec57 6b10 	vmov	r6, r7, d0
 80076b8:	f103 0204 	add.w	r2, r3, #4
 80076bc:	d020      	beq.n	8007700 <_scanf_float+0x3d8>
 80076be:	9903      	ldr	r1, [sp, #12]
 80076c0:	600a      	str	r2, [r1, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	e9c3 6700 	strd	r6, r7, [r3]
 80076c8:	68e3      	ldr	r3, [r4, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60e3      	str	r3, [r4, #12]
 80076ce:	e66c      	b.n	80073aa <_scanf_float+0x82>
 80076d0:	9b04      	ldr	r3, [sp, #16]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0e4      	beq.n	80076a0 <_scanf_float+0x378>
 80076d6:	9905      	ldr	r1, [sp, #20]
 80076d8:	230a      	movs	r3, #10
 80076da:	462a      	mov	r2, r5
 80076dc:	3101      	adds	r1, #1
 80076de:	4640      	mov	r0, r8
 80076e0:	f000 ff96 	bl	8008610 <_strtol_r>
 80076e4:	9b04      	ldr	r3, [sp, #16]
 80076e6:	9e05      	ldr	r6, [sp, #20]
 80076e8:	1ac2      	subs	r2, r0, r3
 80076ea:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80076ee:	429e      	cmp	r6, r3
 80076f0:	bf28      	it	cs
 80076f2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80076f6:	4912      	ldr	r1, [pc, #72]	; (8007740 <_scanf_float+0x418>)
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f8b9 	bl	8007870 <siprintf>
 80076fe:	e7cf      	b.n	80076a0 <_scanf_float+0x378>
 8007700:	f011 0f04 	tst.w	r1, #4
 8007704:	9903      	ldr	r1, [sp, #12]
 8007706:	600a      	str	r2, [r1, #0]
 8007708:	d1db      	bne.n	80076c2 <_scanf_float+0x39a>
 800770a:	f8d3 8000 	ldr.w	r8, [r3]
 800770e:	ee10 2a10 	vmov	r2, s0
 8007712:	ee10 0a10 	vmov	r0, s0
 8007716:	463b      	mov	r3, r7
 8007718:	4639      	mov	r1, r7
 800771a:	f7f9 fa07 	bl	8000b2c <__aeabi_dcmpun>
 800771e:	b128      	cbz	r0, 800772c <_scanf_float+0x404>
 8007720:	4808      	ldr	r0, [pc, #32]	; (8007744 <_scanf_float+0x41c>)
 8007722:	f000 f89f 	bl	8007864 <nanf>
 8007726:	ed88 0a00 	vstr	s0, [r8]
 800772a:	e7cd      	b.n	80076c8 <_scanf_float+0x3a0>
 800772c:	4630      	mov	r0, r6
 800772e:	4639      	mov	r1, r7
 8007730:	f7f9 fa5a 	bl	8000be8 <__aeabi_d2f>
 8007734:	f8c8 0000 	str.w	r0, [r8]
 8007738:	e7c6      	b.n	80076c8 <_scanf_float+0x3a0>
 800773a:	2500      	movs	r5, #0
 800773c:	e635      	b.n	80073aa <_scanf_float+0x82>
 800773e:	bf00      	nop
 8007740:	0800c1d4 	.word	0x0800c1d4
 8007744:	0800c650 	.word	0x0800c650

08007748 <iprintf>:
 8007748:	b40f      	push	{r0, r1, r2, r3}
 800774a:	4b0a      	ldr	r3, [pc, #40]	; (8007774 <iprintf+0x2c>)
 800774c:	b513      	push	{r0, r1, r4, lr}
 800774e:	681c      	ldr	r4, [r3, #0]
 8007750:	b124      	cbz	r4, 800775c <iprintf+0x14>
 8007752:	69a3      	ldr	r3, [r4, #24]
 8007754:	b913      	cbnz	r3, 800775c <iprintf+0x14>
 8007756:	4620      	mov	r0, r4
 8007758:	f001 ffb8 	bl	80096cc <__sinit>
 800775c:	ab05      	add	r3, sp, #20
 800775e:	9a04      	ldr	r2, [sp, #16]
 8007760:	68a1      	ldr	r1, [r4, #8]
 8007762:	9301      	str	r3, [sp, #4]
 8007764:	4620      	mov	r0, r4
 8007766:	f003 fb4b 	bl	800ae00 <_vfiprintf_r>
 800776a:	b002      	add	sp, #8
 800776c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007770:	b004      	add	sp, #16
 8007772:	4770      	bx	lr
 8007774:	20000294 	.word	0x20000294

08007778 <_puts_r>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	460e      	mov	r6, r1
 800777c:	4605      	mov	r5, r0
 800777e:	b118      	cbz	r0, 8007788 <_puts_r+0x10>
 8007780:	6983      	ldr	r3, [r0, #24]
 8007782:	b90b      	cbnz	r3, 8007788 <_puts_r+0x10>
 8007784:	f001 ffa2 	bl	80096cc <__sinit>
 8007788:	69ab      	ldr	r3, [r5, #24]
 800778a:	68ac      	ldr	r4, [r5, #8]
 800778c:	b913      	cbnz	r3, 8007794 <_puts_r+0x1c>
 800778e:	4628      	mov	r0, r5
 8007790:	f001 ff9c 	bl	80096cc <__sinit>
 8007794:	4b2c      	ldr	r3, [pc, #176]	; (8007848 <_puts_r+0xd0>)
 8007796:	429c      	cmp	r4, r3
 8007798:	d120      	bne.n	80077dc <_puts_r+0x64>
 800779a:	686c      	ldr	r4, [r5, #4]
 800779c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800779e:	07db      	lsls	r3, r3, #31
 80077a0:	d405      	bmi.n	80077ae <_puts_r+0x36>
 80077a2:	89a3      	ldrh	r3, [r4, #12]
 80077a4:	0598      	lsls	r0, r3, #22
 80077a6:	d402      	bmi.n	80077ae <_puts_r+0x36>
 80077a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077aa:	f002 fba0 	bl	8009eee <__retarget_lock_acquire_recursive>
 80077ae:	89a3      	ldrh	r3, [r4, #12]
 80077b0:	0719      	lsls	r1, r3, #28
 80077b2:	d51d      	bpl.n	80077f0 <_puts_r+0x78>
 80077b4:	6923      	ldr	r3, [r4, #16]
 80077b6:	b1db      	cbz	r3, 80077f0 <_puts_r+0x78>
 80077b8:	3e01      	subs	r6, #1
 80077ba:	68a3      	ldr	r3, [r4, #8]
 80077bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077c0:	3b01      	subs	r3, #1
 80077c2:	60a3      	str	r3, [r4, #8]
 80077c4:	bb39      	cbnz	r1, 8007816 <_puts_r+0x9e>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	da38      	bge.n	800783c <_puts_r+0xc4>
 80077ca:	4622      	mov	r2, r4
 80077cc:	210a      	movs	r1, #10
 80077ce:	4628      	mov	r0, r5
 80077d0:	f000 ff2a 	bl	8008628 <__swbuf_r>
 80077d4:	3001      	adds	r0, #1
 80077d6:	d011      	beq.n	80077fc <_puts_r+0x84>
 80077d8:	250a      	movs	r5, #10
 80077da:	e011      	b.n	8007800 <_puts_r+0x88>
 80077dc:	4b1b      	ldr	r3, [pc, #108]	; (800784c <_puts_r+0xd4>)
 80077de:	429c      	cmp	r4, r3
 80077e0:	d101      	bne.n	80077e6 <_puts_r+0x6e>
 80077e2:	68ac      	ldr	r4, [r5, #8]
 80077e4:	e7da      	b.n	800779c <_puts_r+0x24>
 80077e6:	4b1a      	ldr	r3, [pc, #104]	; (8007850 <_puts_r+0xd8>)
 80077e8:	429c      	cmp	r4, r3
 80077ea:	bf08      	it	eq
 80077ec:	68ec      	ldreq	r4, [r5, #12]
 80077ee:	e7d5      	b.n	800779c <_puts_r+0x24>
 80077f0:	4621      	mov	r1, r4
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 ff6a 	bl	80086cc <__swsetup_r>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d0dd      	beq.n	80077b8 <_puts_r+0x40>
 80077fc:	f04f 35ff 	mov.w	r5, #4294967295
 8007800:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007802:	07da      	lsls	r2, r3, #31
 8007804:	d405      	bmi.n	8007812 <_puts_r+0x9a>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	059b      	lsls	r3, r3, #22
 800780a:	d402      	bmi.n	8007812 <_puts_r+0x9a>
 800780c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780e:	f002 fb6f 	bl	8009ef0 <__retarget_lock_release_recursive>
 8007812:	4628      	mov	r0, r5
 8007814:	bd70      	pop	{r4, r5, r6, pc}
 8007816:	2b00      	cmp	r3, #0
 8007818:	da04      	bge.n	8007824 <_puts_r+0xac>
 800781a:	69a2      	ldr	r2, [r4, #24]
 800781c:	429a      	cmp	r2, r3
 800781e:	dc06      	bgt.n	800782e <_puts_r+0xb6>
 8007820:	290a      	cmp	r1, #10
 8007822:	d004      	beq.n	800782e <_puts_r+0xb6>
 8007824:	6823      	ldr	r3, [r4, #0]
 8007826:	1c5a      	adds	r2, r3, #1
 8007828:	6022      	str	r2, [r4, #0]
 800782a:	7019      	strb	r1, [r3, #0]
 800782c:	e7c5      	b.n	80077ba <_puts_r+0x42>
 800782e:	4622      	mov	r2, r4
 8007830:	4628      	mov	r0, r5
 8007832:	f000 fef9 	bl	8008628 <__swbuf_r>
 8007836:	3001      	adds	r0, #1
 8007838:	d1bf      	bne.n	80077ba <_puts_r+0x42>
 800783a:	e7df      	b.n	80077fc <_puts_r+0x84>
 800783c:	6823      	ldr	r3, [r4, #0]
 800783e:	250a      	movs	r5, #10
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	6022      	str	r2, [r4, #0]
 8007844:	701d      	strb	r5, [r3, #0]
 8007846:	e7db      	b.n	8007800 <_puts_r+0x88>
 8007848:	0800c3e8 	.word	0x0800c3e8
 800784c:	0800c408 	.word	0x0800c408
 8007850:	0800c3c8 	.word	0x0800c3c8

08007854 <puts>:
 8007854:	4b02      	ldr	r3, [pc, #8]	; (8007860 <puts+0xc>)
 8007856:	4601      	mov	r1, r0
 8007858:	6818      	ldr	r0, [r3, #0]
 800785a:	f7ff bf8d 	b.w	8007778 <_puts_r>
 800785e:	bf00      	nop
 8007860:	20000294 	.word	0x20000294

08007864 <nanf>:
 8007864:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800786c <nanf+0x8>
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	7fc00000 	.word	0x7fc00000

08007870 <siprintf>:
 8007870:	b40e      	push	{r1, r2, r3}
 8007872:	b500      	push	{lr}
 8007874:	b09c      	sub	sp, #112	; 0x70
 8007876:	ab1d      	add	r3, sp, #116	; 0x74
 8007878:	9002      	str	r0, [sp, #8]
 800787a:	9006      	str	r0, [sp, #24]
 800787c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007880:	4809      	ldr	r0, [pc, #36]	; (80078a8 <siprintf+0x38>)
 8007882:	9107      	str	r1, [sp, #28]
 8007884:	9104      	str	r1, [sp, #16]
 8007886:	4909      	ldr	r1, [pc, #36]	; (80078ac <siprintf+0x3c>)
 8007888:	f853 2b04 	ldr.w	r2, [r3], #4
 800788c:	9105      	str	r1, [sp, #20]
 800788e:	6800      	ldr	r0, [r0, #0]
 8007890:	9301      	str	r3, [sp, #4]
 8007892:	a902      	add	r1, sp, #8
 8007894:	f003 f98a 	bl	800abac <_svfiprintf_r>
 8007898:	9b02      	ldr	r3, [sp, #8]
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	b01c      	add	sp, #112	; 0x70
 80078a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a4:	b003      	add	sp, #12
 80078a6:	4770      	bx	lr
 80078a8:	20000294 	.word	0x20000294
 80078ac:	ffff0208 	.word	0xffff0208

080078b0 <sulp>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4604      	mov	r4, r0
 80078b4:	460d      	mov	r5, r1
 80078b6:	ec45 4b10 	vmov	d0, r4, r5
 80078ba:	4616      	mov	r6, r2
 80078bc:	f002 ff12 	bl	800a6e4 <__ulp>
 80078c0:	ec51 0b10 	vmov	r0, r1, d0
 80078c4:	b17e      	cbz	r6, 80078e6 <sulp+0x36>
 80078c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	dd09      	ble.n	80078e6 <sulp+0x36>
 80078d2:	051b      	lsls	r3, r3, #20
 80078d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80078d8:	2400      	movs	r4, #0
 80078da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80078de:	4622      	mov	r2, r4
 80078e0:	462b      	mov	r3, r5
 80078e2:	f7f8 fe89 	bl	80005f8 <__aeabi_dmul>
 80078e6:	bd70      	pop	{r4, r5, r6, pc}

080078e8 <_strtod_l>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	b0a3      	sub	sp, #140	; 0x8c
 80078ee:	461f      	mov	r7, r3
 80078f0:	2300      	movs	r3, #0
 80078f2:	931e      	str	r3, [sp, #120]	; 0x78
 80078f4:	4ba4      	ldr	r3, [pc, #656]	; (8007b88 <_strtod_l+0x2a0>)
 80078f6:	9219      	str	r2, [sp, #100]	; 0x64
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	9307      	str	r3, [sp, #28]
 80078fc:	4604      	mov	r4, r0
 80078fe:	4618      	mov	r0, r3
 8007900:	4688      	mov	r8, r1
 8007902:	f7f8 fc65 	bl	80001d0 <strlen>
 8007906:	f04f 0a00 	mov.w	sl, #0
 800790a:	4605      	mov	r5, r0
 800790c:	f04f 0b00 	mov.w	fp, #0
 8007910:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007914:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007916:	781a      	ldrb	r2, [r3, #0]
 8007918:	2a2b      	cmp	r2, #43	; 0x2b
 800791a:	d04c      	beq.n	80079b6 <_strtod_l+0xce>
 800791c:	d839      	bhi.n	8007992 <_strtod_l+0xaa>
 800791e:	2a0d      	cmp	r2, #13
 8007920:	d832      	bhi.n	8007988 <_strtod_l+0xa0>
 8007922:	2a08      	cmp	r2, #8
 8007924:	d832      	bhi.n	800798c <_strtod_l+0xa4>
 8007926:	2a00      	cmp	r2, #0
 8007928:	d03c      	beq.n	80079a4 <_strtod_l+0xbc>
 800792a:	2300      	movs	r3, #0
 800792c:	930e      	str	r3, [sp, #56]	; 0x38
 800792e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007930:	7833      	ldrb	r3, [r6, #0]
 8007932:	2b30      	cmp	r3, #48	; 0x30
 8007934:	f040 80b4 	bne.w	8007aa0 <_strtod_l+0x1b8>
 8007938:	7873      	ldrb	r3, [r6, #1]
 800793a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800793e:	2b58      	cmp	r3, #88	; 0x58
 8007940:	d16c      	bne.n	8007a1c <_strtod_l+0x134>
 8007942:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007944:	9301      	str	r3, [sp, #4]
 8007946:	ab1e      	add	r3, sp, #120	; 0x78
 8007948:	9702      	str	r7, [sp, #8]
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	4a8f      	ldr	r2, [pc, #572]	; (8007b8c <_strtod_l+0x2a4>)
 800794e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007950:	a91d      	add	r1, sp, #116	; 0x74
 8007952:	4620      	mov	r0, r4
 8007954:	f001 ffbe 	bl	80098d4 <__gethex>
 8007958:	f010 0707 	ands.w	r7, r0, #7
 800795c:	4605      	mov	r5, r0
 800795e:	d005      	beq.n	800796c <_strtod_l+0x84>
 8007960:	2f06      	cmp	r7, #6
 8007962:	d12a      	bne.n	80079ba <_strtod_l+0xd2>
 8007964:	3601      	adds	r6, #1
 8007966:	2300      	movs	r3, #0
 8007968:	961d      	str	r6, [sp, #116]	; 0x74
 800796a:	930e      	str	r3, [sp, #56]	; 0x38
 800796c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 8596 	bne.w	80084a0 <_strtod_l+0xbb8>
 8007974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007976:	b1db      	cbz	r3, 80079b0 <_strtod_l+0xc8>
 8007978:	4652      	mov	r2, sl
 800797a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800797e:	ec43 2b10 	vmov	d0, r2, r3
 8007982:	b023      	add	sp, #140	; 0x8c
 8007984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007988:	2a20      	cmp	r2, #32
 800798a:	d1ce      	bne.n	800792a <_strtod_l+0x42>
 800798c:	3301      	adds	r3, #1
 800798e:	931d      	str	r3, [sp, #116]	; 0x74
 8007990:	e7c0      	b.n	8007914 <_strtod_l+0x2c>
 8007992:	2a2d      	cmp	r2, #45	; 0x2d
 8007994:	d1c9      	bne.n	800792a <_strtod_l+0x42>
 8007996:	2201      	movs	r2, #1
 8007998:	920e      	str	r2, [sp, #56]	; 0x38
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	921d      	str	r2, [sp, #116]	; 0x74
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1c4      	bne.n	800792e <_strtod_l+0x46>
 80079a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80079a6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f040 8576 	bne.w	800849c <_strtod_l+0xbb4>
 80079b0:	4652      	mov	r2, sl
 80079b2:	465b      	mov	r3, fp
 80079b4:	e7e3      	b.n	800797e <_strtod_l+0x96>
 80079b6:	2200      	movs	r2, #0
 80079b8:	e7ee      	b.n	8007998 <_strtod_l+0xb0>
 80079ba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80079bc:	b13a      	cbz	r2, 80079ce <_strtod_l+0xe6>
 80079be:	2135      	movs	r1, #53	; 0x35
 80079c0:	a820      	add	r0, sp, #128	; 0x80
 80079c2:	f002 ff9a 	bl	800a8fa <__copybits>
 80079c6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80079c8:	4620      	mov	r0, r4
 80079ca:	f002 fb5f 	bl	800a08c <_Bfree>
 80079ce:	3f01      	subs	r7, #1
 80079d0:	2f05      	cmp	r7, #5
 80079d2:	d807      	bhi.n	80079e4 <_strtod_l+0xfc>
 80079d4:	e8df f007 	tbb	[pc, r7]
 80079d8:	1d180b0e 	.word	0x1d180b0e
 80079dc:	030e      	.short	0x030e
 80079de:	f04f 0b00 	mov.w	fp, #0
 80079e2:	46da      	mov	sl, fp
 80079e4:	0728      	lsls	r0, r5, #28
 80079e6:	d5c1      	bpl.n	800796c <_strtod_l+0x84>
 80079e8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80079ec:	e7be      	b.n	800796c <_strtod_l+0x84>
 80079ee:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80079f2:	e7f7      	b.n	80079e4 <_strtod_l+0xfc>
 80079f4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80079f8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80079fa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80079fe:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007a02:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007a06:	e7ed      	b.n	80079e4 <_strtod_l+0xfc>
 8007a08:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007b90 <_strtod_l+0x2a8>
 8007a0c:	f04f 0a00 	mov.w	sl, #0
 8007a10:	e7e8      	b.n	80079e4 <_strtod_l+0xfc>
 8007a12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007a16:	f04f 3aff 	mov.w	sl, #4294967295
 8007a1a:	e7e3      	b.n	80079e4 <_strtod_l+0xfc>
 8007a1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a1e:	1c5a      	adds	r2, r3, #1
 8007a20:	921d      	str	r2, [sp, #116]	; 0x74
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	2b30      	cmp	r3, #48	; 0x30
 8007a26:	d0f9      	beq.n	8007a1c <_strtod_l+0x134>
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d09f      	beq.n	800796c <_strtod_l+0x84>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	f04f 0900 	mov.w	r9, #0
 8007a32:	9304      	str	r3, [sp, #16]
 8007a34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007a36:	930a      	str	r3, [sp, #40]	; 0x28
 8007a38:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a3c:	464f      	mov	r7, r9
 8007a3e:	220a      	movs	r2, #10
 8007a40:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007a42:	7806      	ldrb	r6, [r0, #0]
 8007a44:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007a48:	b2d9      	uxtb	r1, r3
 8007a4a:	2909      	cmp	r1, #9
 8007a4c:	d92a      	bls.n	8007aa4 <_strtod_l+0x1bc>
 8007a4e:	9907      	ldr	r1, [sp, #28]
 8007a50:	462a      	mov	r2, r5
 8007a52:	f003 fb60 	bl	800b116 <strncmp>
 8007a56:	b398      	cbz	r0, 8007ac0 <_strtod_l+0x1d8>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	4633      	mov	r3, r6
 8007a5c:	463d      	mov	r5, r7
 8007a5e:	9007      	str	r0, [sp, #28]
 8007a60:	4602      	mov	r2, r0
 8007a62:	2b65      	cmp	r3, #101	; 0x65
 8007a64:	d001      	beq.n	8007a6a <_strtod_l+0x182>
 8007a66:	2b45      	cmp	r3, #69	; 0x45
 8007a68:	d118      	bne.n	8007a9c <_strtod_l+0x1b4>
 8007a6a:	b91d      	cbnz	r5, 8007a74 <_strtod_l+0x18c>
 8007a6c:	9b04      	ldr	r3, [sp, #16]
 8007a6e:	4303      	orrs	r3, r0
 8007a70:	d098      	beq.n	80079a4 <_strtod_l+0xbc>
 8007a72:	2500      	movs	r5, #0
 8007a74:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007a78:	f108 0301 	add.w	r3, r8, #1
 8007a7c:	931d      	str	r3, [sp, #116]	; 0x74
 8007a7e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007a82:	2b2b      	cmp	r3, #43	; 0x2b
 8007a84:	d075      	beq.n	8007b72 <_strtod_l+0x28a>
 8007a86:	2b2d      	cmp	r3, #45	; 0x2d
 8007a88:	d07b      	beq.n	8007b82 <_strtod_l+0x29a>
 8007a8a:	f04f 0c00 	mov.w	ip, #0
 8007a8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007a92:	2909      	cmp	r1, #9
 8007a94:	f240 8082 	bls.w	8007b9c <_strtod_l+0x2b4>
 8007a98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	e09d      	b.n	8007bdc <_strtod_l+0x2f4>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	e7c4      	b.n	8007a2e <_strtod_l+0x146>
 8007aa4:	2f08      	cmp	r7, #8
 8007aa6:	bfd8      	it	le
 8007aa8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007aaa:	f100 0001 	add.w	r0, r0, #1
 8007aae:	bfda      	itte	le
 8007ab0:	fb02 3301 	mlale	r3, r2, r1, r3
 8007ab4:	9309      	strle	r3, [sp, #36]	; 0x24
 8007ab6:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007aba:	3701      	adds	r7, #1
 8007abc:	901d      	str	r0, [sp, #116]	; 0x74
 8007abe:	e7bf      	b.n	8007a40 <_strtod_l+0x158>
 8007ac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ac2:	195a      	adds	r2, r3, r5
 8007ac4:	921d      	str	r2, [sp, #116]	; 0x74
 8007ac6:	5d5b      	ldrb	r3, [r3, r5]
 8007ac8:	2f00      	cmp	r7, #0
 8007aca:	d037      	beq.n	8007b3c <_strtod_l+0x254>
 8007acc:	9007      	str	r0, [sp, #28]
 8007ace:	463d      	mov	r5, r7
 8007ad0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007ad4:	2a09      	cmp	r2, #9
 8007ad6:	d912      	bls.n	8007afe <_strtod_l+0x216>
 8007ad8:	2201      	movs	r2, #1
 8007ada:	e7c2      	b.n	8007a62 <_strtod_l+0x17a>
 8007adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	921d      	str	r2, [sp, #116]	; 0x74
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	2b30      	cmp	r3, #48	; 0x30
 8007ae8:	d0f8      	beq.n	8007adc <_strtod_l+0x1f4>
 8007aea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007aee:	2a08      	cmp	r2, #8
 8007af0:	f200 84db 	bhi.w	80084aa <_strtod_l+0xbc2>
 8007af4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007af6:	9007      	str	r0, [sp, #28]
 8007af8:	2000      	movs	r0, #0
 8007afa:	920a      	str	r2, [sp, #40]	; 0x28
 8007afc:	4605      	mov	r5, r0
 8007afe:	3b30      	subs	r3, #48	; 0x30
 8007b00:	f100 0201 	add.w	r2, r0, #1
 8007b04:	d014      	beq.n	8007b30 <_strtod_l+0x248>
 8007b06:	9907      	ldr	r1, [sp, #28]
 8007b08:	4411      	add	r1, r2
 8007b0a:	9107      	str	r1, [sp, #28]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	eb00 0e05 	add.w	lr, r0, r5
 8007b12:	210a      	movs	r1, #10
 8007b14:	4572      	cmp	r2, lr
 8007b16:	d113      	bne.n	8007b40 <_strtod_l+0x258>
 8007b18:	182a      	adds	r2, r5, r0
 8007b1a:	2a08      	cmp	r2, #8
 8007b1c:	f105 0501 	add.w	r5, r5, #1
 8007b20:	4405      	add	r5, r0
 8007b22:	dc1c      	bgt.n	8007b5e <_strtod_l+0x276>
 8007b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b26:	220a      	movs	r2, #10
 8007b28:	fb02 3301 	mla	r3, r2, r1, r3
 8007b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b2e:	2200      	movs	r2, #0
 8007b30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b32:	1c59      	adds	r1, r3, #1
 8007b34:	911d      	str	r1, [sp, #116]	; 0x74
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	4610      	mov	r0, r2
 8007b3a:	e7c9      	b.n	8007ad0 <_strtod_l+0x1e8>
 8007b3c:	4638      	mov	r0, r7
 8007b3e:	e7d2      	b.n	8007ae6 <_strtod_l+0x1fe>
 8007b40:	2a08      	cmp	r2, #8
 8007b42:	dc04      	bgt.n	8007b4e <_strtod_l+0x266>
 8007b44:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007b46:	434e      	muls	r6, r1
 8007b48:	9609      	str	r6, [sp, #36]	; 0x24
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	e7e2      	b.n	8007b14 <_strtod_l+0x22c>
 8007b4e:	f102 0c01 	add.w	ip, r2, #1
 8007b52:	f1bc 0f10 	cmp.w	ip, #16
 8007b56:	bfd8      	it	le
 8007b58:	fb01 f909 	mulle.w	r9, r1, r9
 8007b5c:	e7f5      	b.n	8007b4a <_strtod_l+0x262>
 8007b5e:	2d10      	cmp	r5, #16
 8007b60:	bfdc      	itt	le
 8007b62:	220a      	movle	r2, #10
 8007b64:	fb02 3909 	mlale	r9, r2, r9, r3
 8007b68:	e7e1      	b.n	8007b2e <_strtod_l+0x246>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9307      	str	r3, [sp, #28]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	e77c      	b.n	8007a6c <_strtod_l+0x184>
 8007b72:	f04f 0c00 	mov.w	ip, #0
 8007b76:	f108 0302 	add.w	r3, r8, #2
 8007b7a:	931d      	str	r3, [sp, #116]	; 0x74
 8007b7c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007b80:	e785      	b.n	8007a8e <_strtod_l+0x1a6>
 8007b82:	f04f 0c01 	mov.w	ip, #1
 8007b86:	e7f6      	b.n	8007b76 <_strtod_l+0x28e>
 8007b88:	0800c494 	.word	0x0800c494
 8007b8c:	0800c1dc 	.word	0x0800c1dc
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007b96:	1c59      	adds	r1, r3, #1
 8007b98:	911d      	str	r1, [sp, #116]	; 0x74
 8007b9a:	785b      	ldrb	r3, [r3, #1]
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d0f9      	beq.n	8007b94 <_strtod_l+0x2ac>
 8007ba0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007ba4:	2908      	cmp	r1, #8
 8007ba6:	f63f af79 	bhi.w	8007a9c <_strtod_l+0x1b4>
 8007baa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007bae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bb0:	9308      	str	r3, [sp, #32]
 8007bb2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007bb4:	1c59      	adds	r1, r3, #1
 8007bb6:	911d      	str	r1, [sp, #116]	; 0x74
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8007bbe:	2e09      	cmp	r6, #9
 8007bc0:	d937      	bls.n	8007c32 <_strtod_l+0x34a>
 8007bc2:	9e08      	ldr	r6, [sp, #32]
 8007bc4:	1b89      	subs	r1, r1, r6
 8007bc6:	2908      	cmp	r1, #8
 8007bc8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007bcc:	dc02      	bgt.n	8007bd4 <_strtod_l+0x2ec>
 8007bce:	4576      	cmp	r6, lr
 8007bd0:	bfa8      	it	ge
 8007bd2:	4676      	movge	r6, lr
 8007bd4:	f1bc 0f00 	cmp.w	ip, #0
 8007bd8:	d000      	beq.n	8007bdc <_strtod_l+0x2f4>
 8007bda:	4276      	negs	r6, r6
 8007bdc:	2d00      	cmp	r5, #0
 8007bde:	d14f      	bne.n	8007c80 <_strtod_l+0x398>
 8007be0:	9904      	ldr	r1, [sp, #16]
 8007be2:	4301      	orrs	r1, r0
 8007be4:	f47f aec2 	bne.w	800796c <_strtod_l+0x84>
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	f47f aedb 	bne.w	80079a4 <_strtod_l+0xbc>
 8007bee:	2b69      	cmp	r3, #105	; 0x69
 8007bf0:	d027      	beq.n	8007c42 <_strtod_l+0x35a>
 8007bf2:	dc24      	bgt.n	8007c3e <_strtod_l+0x356>
 8007bf4:	2b49      	cmp	r3, #73	; 0x49
 8007bf6:	d024      	beq.n	8007c42 <_strtod_l+0x35a>
 8007bf8:	2b4e      	cmp	r3, #78	; 0x4e
 8007bfa:	f47f aed3 	bne.w	80079a4 <_strtod_l+0xbc>
 8007bfe:	499e      	ldr	r1, [pc, #632]	; (8007e78 <_strtod_l+0x590>)
 8007c00:	a81d      	add	r0, sp, #116	; 0x74
 8007c02:	f002 f8bf 	bl	8009d84 <__match>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	f43f aecc 	beq.w	80079a4 <_strtod_l+0xbc>
 8007c0c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b28      	cmp	r3, #40	; 0x28
 8007c12:	d12d      	bne.n	8007c70 <_strtod_l+0x388>
 8007c14:	4999      	ldr	r1, [pc, #612]	; (8007e7c <_strtod_l+0x594>)
 8007c16:	aa20      	add	r2, sp, #128	; 0x80
 8007c18:	a81d      	add	r0, sp, #116	; 0x74
 8007c1a:	f002 f8c7 	bl	8009dac <__hexnan>
 8007c1e:	2805      	cmp	r0, #5
 8007c20:	d126      	bne.n	8007c70 <_strtod_l+0x388>
 8007c22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c24:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007c28:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007c2c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007c30:	e69c      	b.n	800796c <_strtod_l+0x84>
 8007c32:	210a      	movs	r1, #10
 8007c34:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007c38:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007c3c:	e7b9      	b.n	8007bb2 <_strtod_l+0x2ca>
 8007c3e:	2b6e      	cmp	r3, #110	; 0x6e
 8007c40:	e7db      	b.n	8007bfa <_strtod_l+0x312>
 8007c42:	498f      	ldr	r1, [pc, #572]	; (8007e80 <_strtod_l+0x598>)
 8007c44:	a81d      	add	r0, sp, #116	; 0x74
 8007c46:	f002 f89d 	bl	8009d84 <__match>
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f43f aeaa 	beq.w	80079a4 <_strtod_l+0xbc>
 8007c50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c52:	498c      	ldr	r1, [pc, #560]	; (8007e84 <_strtod_l+0x59c>)
 8007c54:	3b01      	subs	r3, #1
 8007c56:	a81d      	add	r0, sp, #116	; 0x74
 8007c58:	931d      	str	r3, [sp, #116]	; 0x74
 8007c5a:	f002 f893 	bl	8009d84 <__match>
 8007c5e:	b910      	cbnz	r0, 8007c66 <_strtod_l+0x37e>
 8007c60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007c62:	3301      	adds	r3, #1
 8007c64:	931d      	str	r3, [sp, #116]	; 0x74
 8007c66:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007e94 <_strtod_l+0x5ac>
 8007c6a:	f04f 0a00 	mov.w	sl, #0
 8007c6e:	e67d      	b.n	800796c <_strtod_l+0x84>
 8007c70:	4885      	ldr	r0, [pc, #532]	; (8007e88 <_strtod_l+0x5a0>)
 8007c72:	f003 f9f5 	bl	800b060 <nan>
 8007c76:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007c7a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8007c7e:	e675      	b.n	800796c <_strtod_l+0x84>
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c84:	1af3      	subs	r3, r6, r3
 8007c86:	2f00      	cmp	r7, #0
 8007c88:	bf08      	it	eq
 8007c8a:	462f      	moveq	r7, r5
 8007c8c:	2d10      	cmp	r5, #16
 8007c8e:	9308      	str	r3, [sp, #32]
 8007c90:	46a8      	mov	r8, r5
 8007c92:	bfa8      	it	ge
 8007c94:	f04f 0810 	movge.w	r8, #16
 8007c98:	f7f8 fc34 	bl	8000504 <__aeabi_ui2d>
 8007c9c:	2d09      	cmp	r5, #9
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	468b      	mov	fp, r1
 8007ca2:	dd13      	ble.n	8007ccc <_strtod_l+0x3e4>
 8007ca4:	4b79      	ldr	r3, [pc, #484]	; (8007e8c <_strtod_l+0x5a4>)
 8007ca6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007caa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007cae:	f7f8 fca3 	bl	80005f8 <__aeabi_dmul>
 8007cb2:	4682      	mov	sl, r0
 8007cb4:	4648      	mov	r0, r9
 8007cb6:	468b      	mov	fp, r1
 8007cb8:	f7f8 fc24 	bl	8000504 <__aeabi_ui2d>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	460b      	mov	r3, r1
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	f7f8 fae2 	bl	800028c <__adddf3>
 8007cc8:	4682      	mov	sl, r0
 8007cca:	468b      	mov	fp, r1
 8007ccc:	2d0f      	cmp	r5, #15
 8007cce:	dc38      	bgt.n	8007d42 <_strtod_l+0x45a>
 8007cd0:	9b08      	ldr	r3, [sp, #32]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	f43f ae4a 	beq.w	800796c <_strtod_l+0x84>
 8007cd8:	dd24      	ble.n	8007d24 <_strtod_l+0x43c>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	dc0b      	bgt.n	8007cf6 <_strtod_l+0x40e>
 8007cde:	4d6b      	ldr	r5, [pc, #428]	; (8007e8c <_strtod_l+0x5a4>)
 8007ce0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8007ce4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007ce8:	4652      	mov	r2, sl
 8007cea:	465b      	mov	r3, fp
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	4682      	mov	sl, r0
 8007cf2:	468b      	mov	fp, r1
 8007cf4:	e63a      	b.n	800796c <_strtod_l+0x84>
 8007cf6:	9a08      	ldr	r2, [sp, #32]
 8007cf8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	db20      	blt.n	8007d42 <_strtod_l+0x45a>
 8007d00:	4c62      	ldr	r4, [pc, #392]	; (8007e8c <_strtod_l+0x5a4>)
 8007d02:	f1c5 050f 	rsb	r5, r5, #15
 8007d06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d12:	f7f8 fc71 	bl	80005f8 <__aeabi_dmul>
 8007d16:	9b08      	ldr	r3, [sp, #32]
 8007d18:	1b5d      	subs	r5, r3, r5
 8007d1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d22:	e7e3      	b.n	8007cec <_strtod_l+0x404>
 8007d24:	9b08      	ldr	r3, [sp, #32]
 8007d26:	3316      	adds	r3, #22
 8007d28:	db0b      	blt.n	8007d42 <_strtod_l+0x45a>
 8007d2a:	9b07      	ldr	r3, [sp, #28]
 8007d2c:	4a57      	ldr	r2, [pc, #348]	; (8007e8c <_strtod_l+0x5a4>)
 8007d2e:	1b9e      	subs	r6, r3, r6
 8007d30:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007d34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007d38:	4650      	mov	r0, sl
 8007d3a:	4659      	mov	r1, fp
 8007d3c:	f7f8 fd86 	bl	800084c <__aeabi_ddiv>
 8007d40:	e7d6      	b.n	8007cf0 <_strtod_l+0x408>
 8007d42:	9b08      	ldr	r3, [sp, #32]
 8007d44:	eba5 0808 	sub.w	r8, r5, r8
 8007d48:	4498      	add	r8, r3
 8007d4a:	f1b8 0f00 	cmp.w	r8, #0
 8007d4e:	dd71      	ble.n	8007e34 <_strtod_l+0x54c>
 8007d50:	f018 030f 	ands.w	r3, r8, #15
 8007d54:	d00a      	beq.n	8007d6c <_strtod_l+0x484>
 8007d56:	494d      	ldr	r1, [pc, #308]	; (8007e8c <_strtod_l+0x5a4>)
 8007d58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d5c:	4652      	mov	r2, sl
 8007d5e:	465b      	mov	r3, fp
 8007d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d64:	f7f8 fc48 	bl	80005f8 <__aeabi_dmul>
 8007d68:	4682      	mov	sl, r0
 8007d6a:	468b      	mov	fp, r1
 8007d6c:	f038 080f 	bics.w	r8, r8, #15
 8007d70:	d04d      	beq.n	8007e0e <_strtod_l+0x526>
 8007d72:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007d76:	dd22      	ble.n	8007dbe <_strtod_l+0x4d6>
 8007d78:	2500      	movs	r5, #0
 8007d7a:	462e      	mov	r6, r5
 8007d7c:	9509      	str	r5, [sp, #36]	; 0x24
 8007d7e:	9507      	str	r5, [sp, #28]
 8007d80:	2322      	movs	r3, #34	; 0x22
 8007d82:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007e94 <_strtod_l+0x5ac>
 8007d86:	6023      	str	r3, [r4, #0]
 8007d88:	f04f 0a00 	mov.w	sl, #0
 8007d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	f43f adec 	beq.w	800796c <_strtod_l+0x84>
 8007d94:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007d96:	4620      	mov	r0, r4
 8007d98:	f002 f978 	bl	800a08c <_Bfree>
 8007d9c:	9907      	ldr	r1, [sp, #28]
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f002 f974 	bl	800a08c <_Bfree>
 8007da4:	4631      	mov	r1, r6
 8007da6:	4620      	mov	r0, r4
 8007da8:	f002 f970 	bl	800a08c <_Bfree>
 8007dac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dae:	4620      	mov	r0, r4
 8007db0:	f002 f96c 	bl	800a08c <_Bfree>
 8007db4:	4629      	mov	r1, r5
 8007db6:	4620      	mov	r0, r4
 8007db8:	f002 f968 	bl	800a08c <_Bfree>
 8007dbc:	e5d6      	b.n	800796c <_strtod_l+0x84>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007dc4:	4650      	mov	r0, sl
 8007dc6:	4659      	mov	r1, fp
 8007dc8:	4699      	mov	r9, r3
 8007dca:	f1b8 0f01 	cmp.w	r8, #1
 8007dce:	dc21      	bgt.n	8007e14 <_strtod_l+0x52c>
 8007dd0:	b10b      	cbz	r3, 8007dd6 <_strtod_l+0x4ee>
 8007dd2:	4682      	mov	sl, r0
 8007dd4:	468b      	mov	fp, r1
 8007dd6:	4b2e      	ldr	r3, [pc, #184]	; (8007e90 <_strtod_l+0x5a8>)
 8007dd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007ddc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007de0:	4652      	mov	r2, sl
 8007de2:	465b      	mov	r3, fp
 8007de4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007de8:	f7f8 fc06 	bl	80005f8 <__aeabi_dmul>
 8007dec:	4b29      	ldr	r3, [pc, #164]	; (8007e94 <_strtod_l+0x5ac>)
 8007dee:	460a      	mov	r2, r1
 8007df0:	400b      	ands	r3, r1
 8007df2:	4929      	ldr	r1, [pc, #164]	; (8007e98 <_strtod_l+0x5b0>)
 8007df4:	428b      	cmp	r3, r1
 8007df6:	4682      	mov	sl, r0
 8007df8:	d8be      	bhi.n	8007d78 <_strtod_l+0x490>
 8007dfa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007dfe:	428b      	cmp	r3, r1
 8007e00:	bf86      	itte	hi
 8007e02:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007e9c <_strtod_l+0x5b4>
 8007e06:	f04f 3aff 	movhi.w	sl, #4294967295
 8007e0a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9304      	str	r3, [sp, #16]
 8007e12:	e081      	b.n	8007f18 <_strtod_l+0x630>
 8007e14:	f018 0f01 	tst.w	r8, #1
 8007e18:	d007      	beq.n	8007e2a <_strtod_l+0x542>
 8007e1a:	4b1d      	ldr	r3, [pc, #116]	; (8007e90 <_strtod_l+0x5a8>)
 8007e1c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f109 0901 	add.w	r9, r9, #1
 8007e2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e32:	e7ca      	b.n	8007dca <_strtod_l+0x4e2>
 8007e34:	d0eb      	beq.n	8007e0e <_strtod_l+0x526>
 8007e36:	f1c8 0800 	rsb	r8, r8, #0
 8007e3a:	f018 020f 	ands.w	r2, r8, #15
 8007e3e:	d00a      	beq.n	8007e56 <_strtod_l+0x56e>
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <_strtod_l+0x5a4>)
 8007e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e46:	4650      	mov	r0, sl
 8007e48:	4659      	mov	r1, fp
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	f7f8 fcfd 	bl	800084c <__aeabi_ddiv>
 8007e52:	4682      	mov	sl, r0
 8007e54:	468b      	mov	fp, r1
 8007e56:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007e5a:	d0d8      	beq.n	8007e0e <_strtod_l+0x526>
 8007e5c:	f1b8 0f1f 	cmp.w	r8, #31
 8007e60:	dd1e      	ble.n	8007ea0 <_strtod_l+0x5b8>
 8007e62:	2500      	movs	r5, #0
 8007e64:	462e      	mov	r6, r5
 8007e66:	9509      	str	r5, [sp, #36]	; 0x24
 8007e68:	9507      	str	r5, [sp, #28]
 8007e6a:	2322      	movs	r3, #34	; 0x22
 8007e6c:	f04f 0a00 	mov.w	sl, #0
 8007e70:	f04f 0b00 	mov.w	fp, #0
 8007e74:	6023      	str	r3, [r4, #0]
 8007e76:	e789      	b.n	8007d8c <_strtod_l+0x4a4>
 8007e78:	0800c1ad 	.word	0x0800c1ad
 8007e7c:	0800c1f0 	.word	0x0800c1f0
 8007e80:	0800c1a5 	.word	0x0800c1a5
 8007e84:	0800c334 	.word	0x0800c334
 8007e88:	0800c650 	.word	0x0800c650
 8007e8c:	0800c530 	.word	0x0800c530
 8007e90:	0800c508 	.word	0x0800c508
 8007e94:	7ff00000 	.word	0x7ff00000
 8007e98:	7ca00000 	.word	0x7ca00000
 8007e9c:	7fefffff 	.word	0x7fefffff
 8007ea0:	f018 0310 	ands.w	r3, r8, #16
 8007ea4:	bf18      	it	ne
 8007ea6:	236a      	movne	r3, #106	; 0x6a
 8007ea8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008260 <_strtod_l+0x978>
 8007eac:	9304      	str	r3, [sp, #16]
 8007eae:	4650      	mov	r0, sl
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f018 0f01 	tst.w	r8, #1
 8007eb8:	d004      	beq.n	8007ec4 <_strtod_l+0x5dc>
 8007eba:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ebe:	f7f8 fb9b 	bl	80005f8 <__aeabi_dmul>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007ec8:	f109 0908 	add.w	r9, r9, #8
 8007ecc:	d1f2      	bne.n	8007eb4 <_strtod_l+0x5cc>
 8007ece:	b10b      	cbz	r3, 8007ed4 <_strtod_l+0x5ec>
 8007ed0:	4682      	mov	sl, r0
 8007ed2:	468b      	mov	fp, r1
 8007ed4:	9b04      	ldr	r3, [sp, #16]
 8007ed6:	b1bb      	cbz	r3, 8007f08 <_strtod_l+0x620>
 8007ed8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007edc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	dd10      	ble.n	8007f08 <_strtod_l+0x620>
 8007ee6:	2b1f      	cmp	r3, #31
 8007ee8:	f340 8128 	ble.w	800813c <_strtod_l+0x854>
 8007eec:	2b34      	cmp	r3, #52	; 0x34
 8007eee:	bfde      	ittt	le
 8007ef0:	3b20      	suble	r3, #32
 8007ef2:	f04f 32ff 	movle.w	r2, #4294967295
 8007ef6:	fa02 f303 	lslle.w	r3, r2, r3
 8007efa:	f04f 0a00 	mov.w	sl, #0
 8007efe:	bfcc      	ite	gt
 8007f00:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007f04:	ea03 0b01 	andle.w	fp, r3, r1
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	4659      	mov	r1, fp
 8007f10:	f7f8 fdda 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d1a4      	bne.n	8007e62 <_strtod_l+0x57a>
 8007f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1a:	9300      	str	r3, [sp, #0]
 8007f1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007f1e:	462b      	mov	r3, r5
 8007f20:	463a      	mov	r2, r7
 8007f22:	4620      	mov	r0, r4
 8007f24:	f002 f91e 	bl	800a164 <__s2b>
 8007f28:	9009      	str	r0, [sp, #36]	; 0x24
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	f43f af24 	beq.w	8007d78 <_strtod_l+0x490>
 8007f30:	9b07      	ldr	r3, [sp, #28]
 8007f32:	1b9e      	subs	r6, r3, r6
 8007f34:	9b08      	ldr	r3, [sp, #32]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfb4      	ite	lt
 8007f3a:	4633      	movlt	r3, r6
 8007f3c:	2300      	movge	r3, #0
 8007f3e:	9310      	str	r3, [sp, #64]	; 0x40
 8007f40:	9b08      	ldr	r3, [sp, #32]
 8007f42:	2500      	movs	r5, #0
 8007f44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007f48:	9318      	str	r3, [sp, #96]	; 0x60
 8007f4a:	462e      	mov	r6, r5
 8007f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f4e:	4620      	mov	r0, r4
 8007f50:	6859      	ldr	r1, [r3, #4]
 8007f52:	f002 f85b 	bl	800a00c <_Balloc>
 8007f56:	9007      	str	r0, [sp, #28]
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	f43f af11 	beq.w	8007d80 <_strtod_l+0x498>
 8007f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	3202      	adds	r2, #2
 8007f64:	f103 010c 	add.w	r1, r3, #12
 8007f68:	0092      	lsls	r2, r2, #2
 8007f6a:	300c      	adds	r0, #12
 8007f6c:	f002 f840 	bl	8009ff0 <memcpy>
 8007f70:	ec4b ab10 	vmov	d0, sl, fp
 8007f74:	aa20      	add	r2, sp, #128	; 0x80
 8007f76:	a91f      	add	r1, sp, #124	; 0x7c
 8007f78:	4620      	mov	r0, r4
 8007f7a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8007f7e:	f002 fc2d 	bl	800a7dc <__d2b>
 8007f82:	901e      	str	r0, [sp, #120]	; 0x78
 8007f84:	2800      	cmp	r0, #0
 8007f86:	f43f aefb 	beq.w	8007d80 <_strtod_l+0x498>
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f002 f983 	bl	800a298 <__i2b>
 8007f92:	4606      	mov	r6, r0
 8007f94:	2800      	cmp	r0, #0
 8007f96:	f43f aef3 	beq.w	8007d80 <_strtod_l+0x498>
 8007f9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007f9c:	9904      	ldr	r1, [sp, #16]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	bfab      	itete	ge
 8007fa2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007fa4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007fa6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007fa8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8007fac:	bfac      	ite	ge
 8007fae:	eb03 0902 	addge.w	r9, r3, r2
 8007fb2:	1ad7      	sublt	r7, r2, r3
 8007fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fb6:	eba3 0801 	sub.w	r8, r3, r1
 8007fba:	4490      	add	r8, r2
 8007fbc:	4ba3      	ldr	r3, [pc, #652]	; (800824c <_strtod_l+0x964>)
 8007fbe:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fc2:	4598      	cmp	r8, r3
 8007fc4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007fc8:	f280 80cc 	bge.w	8008164 <_strtod_l+0x87c>
 8007fcc:	eba3 0308 	sub.w	r3, r3, r8
 8007fd0:	2b1f      	cmp	r3, #31
 8007fd2:	eba2 0203 	sub.w	r2, r2, r3
 8007fd6:	f04f 0101 	mov.w	r1, #1
 8007fda:	f300 80b6 	bgt.w	800814a <_strtod_l+0x862>
 8007fde:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe2:	9311      	str	r3, [sp, #68]	; 0x44
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fe8:	eb09 0802 	add.w	r8, r9, r2
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	45c1      	cmp	r9, r8
 8007ff0:	4417      	add	r7, r2
 8007ff2:	441f      	add	r7, r3
 8007ff4:	464b      	mov	r3, r9
 8007ff6:	bfa8      	it	ge
 8007ff8:	4643      	movge	r3, r8
 8007ffa:	42bb      	cmp	r3, r7
 8007ffc:	bfa8      	it	ge
 8007ffe:	463b      	movge	r3, r7
 8008000:	2b00      	cmp	r3, #0
 8008002:	bfc2      	ittt	gt
 8008004:	eba8 0803 	subgt.w	r8, r8, r3
 8008008:	1aff      	subgt	r7, r7, r3
 800800a:	eba9 0903 	subgt.w	r9, r9, r3
 800800e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008010:	2b00      	cmp	r3, #0
 8008012:	dd17      	ble.n	8008044 <_strtod_l+0x75c>
 8008014:	4631      	mov	r1, r6
 8008016:	461a      	mov	r2, r3
 8008018:	4620      	mov	r0, r4
 800801a:	f002 f9f9 	bl	800a410 <__pow5mult>
 800801e:	4606      	mov	r6, r0
 8008020:	2800      	cmp	r0, #0
 8008022:	f43f aead 	beq.w	8007d80 <_strtod_l+0x498>
 8008026:	4601      	mov	r1, r0
 8008028:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800802a:	4620      	mov	r0, r4
 800802c:	f002 f94a 	bl	800a2c4 <__multiply>
 8008030:	900f      	str	r0, [sp, #60]	; 0x3c
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f aea4 	beq.w	8007d80 <_strtod_l+0x498>
 8008038:	991e      	ldr	r1, [sp, #120]	; 0x78
 800803a:	4620      	mov	r0, r4
 800803c:	f002 f826 	bl	800a08c <_Bfree>
 8008040:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008042:	931e      	str	r3, [sp, #120]	; 0x78
 8008044:	f1b8 0f00 	cmp.w	r8, #0
 8008048:	f300 8091 	bgt.w	800816e <_strtod_l+0x886>
 800804c:	9b08      	ldr	r3, [sp, #32]
 800804e:	2b00      	cmp	r3, #0
 8008050:	dd08      	ble.n	8008064 <_strtod_l+0x77c>
 8008052:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008054:	9907      	ldr	r1, [sp, #28]
 8008056:	4620      	mov	r0, r4
 8008058:	f002 f9da 	bl	800a410 <__pow5mult>
 800805c:	9007      	str	r0, [sp, #28]
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f ae8e 	beq.w	8007d80 <_strtod_l+0x498>
 8008064:	2f00      	cmp	r7, #0
 8008066:	dd08      	ble.n	800807a <_strtod_l+0x792>
 8008068:	9907      	ldr	r1, [sp, #28]
 800806a:	463a      	mov	r2, r7
 800806c:	4620      	mov	r0, r4
 800806e:	f002 fa29 	bl	800a4c4 <__lshift>
 8008072:	9007      	str	r0, [sp, #28]
 8008074:	2800      	cmp	r0, #0
 8008076:	f43f ae83 	beq.w	8007d80 <_strtod_l+0x498>
 800807a:	f1b9 0f00 	cmp.w	r9, #0
 800807e:	dd08      	ble.n	8008092 <_strtod_l+0x7aa>
 8008080:	4631      	mov	r1, r6
 8008082:	464a      	mov	r2, r9
 8008084:	4620      	mov	r0, r4
 8008086:	f002 fa1d 	bl	800a4c4 <__lshift>
 800808a:	4606      	mov	r6, r0
 800808c:	2800      	cmp	r0, #0
 800808e:	f43f ae77 	beq.w	8007d80 <_strtod_l+0x498>
 8008092:	9a07      	ldr	r2, [sp, #28]
 8008094:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008096:	4620      	mov	r0, r4
 8008098:	f002 fa9c 	bl	800a5d4 <__mdiff>
 800809c:	4605      	mov	r5, r0
 800809e:	2800      	cmp	r0, #0
 80080a0:	f43f ae6e 	beq.w	8007d80 <_strtod_l+0x498>
 80080a4:	68c3      	ldr	r3, [r0, #12]
 80080a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80080a8:	2300      	movs	r3, #0
 80080aa:	60c3      	str	r3, [r0, #12]
 80080ac:	4631      	mov	r1, r6
 80080ae:	f002 fa75 	bl	800a59c <__mcmp>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	da65      	bge.n	8008182 <_strtod_l+0x89a>
 80080b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80080b8:	ea53 030a 	orrs.w	r3, r3, sl
 80080bc:	f040 8087 	bne.w	80081ce <_strtod_l+0x8e6>
 80080c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 8082 	bne.w	80081ce <_strtod_l+0x8e6>
 80080ca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	051b      	lsls	r3, r3, #20
 80080d2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80080d6:	d97a      	bls.n	80081ce <_strtod_l+0x8e6>
 80080d8:	696b      	ldr	r3, [r5, #20]
 80080da:	b913      	cbnz	r3, 80080e2 <_strtod_l+0x7fa>
 80080dc:	692b      	ldr	r3, [r5, #16]
 80080de:	2b01      	cmp	r3, #1
 80080e0:	dd75      	ble.n	80081ce <_strtod_l+0x8e6>
 80080e2:	4629      	mov	r1, r5
 80080e4:	2201      	movs	r2, #1
 80080e6:	4620      	mov	r0, r4
 80080e8:	f002 f9ec 	bl	800a4c4 <__lshift>
 80080ec:	4631      	mov	r1, r6
 80080ee:	4605      	mov	r5, r0
 80080f0:	f002 fa54 	bl	800a59c <__mcmp>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	dd6a      	ble.n	80081ce <_strtod_l+0x8e6>
 80080f8:	9904      	ldr	r1, [sp, #16]
 80080fa:	4a55      	ldr	r2, [pc, #340]	; (8008250 <_strtod_l+0x968>)
 80080fc:	465b      	mov	r3, fp
 80080fe:	2900      	cmp	r1, #0
 8008100:	f000 8085 	beq.w	800820e <_strtod_l+0x926>
 8008104:	ea02 010b 	and.w	r1, r2, fp
 8008108:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800810c:	dc7f      	bgt.n	800820e <_strtod_l+0x926>
 800810e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008112:	f77f aeaa 	ble.w	8007e6a <_strtod_l+0x582>
 8008116:	4a4f      	ldr	r2, [pc, #316]	; (8008254 <_strtod_l+0x96c>)
 8008118:	2300      	movs	r3, #0
 800811a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800811e:	4650      	mov	r0, sl
 8008120:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008124:	4659      	mov	r1, fp
 8008126:	f7f8 fa67 	bl	80005f8 <__aeabi_dmul>
 800812a:	460b      	mov	r3, r1
 800812c:	4303      	orrs	r3, r0
 800812e:	bf08      	it	eq
 8008130:	2322      	moveq	r3, #34	; 0x22
 8008132:	4682      	mov	sl, r0
 8008134:	468b      	mov	fp, r1
 8008136:	bf08      	it	eq
 8008138:	6023      	streq	r3, [r4, #0]
 800813a:	e62b      	b.n	8007d94 <_strtod_l+0x4ac>
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	fa02 f303 	lsl.w	r3, r2, r3
 8008144:	ea03 0a0a 	and.w	sl, r3, sl
 8008148:	e6de      	b.n	8007f08 <_strtod_l+0x620>
 800814a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800814e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008152:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008156:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800815a:	fa01 f308 	lsl.w	r3, r1, r8
 800815e:	930c      	str	r3, [sp, #48]	; 0x30
 8008160:	9111      	str	r1, [sp, #68]	; 0x44
 8008162:	e741      	b.n	8007fe8 <_strtod_l+0x700>
 8008164:	2300      	movs	r3, #0
 8008166:	930c      	str	r3, [sp, #48]	; 0x30
 8008168:	2301      	movs	r3, #1
 800816a:	9311      	str	r3, [sp, #68]	; 0x44
 800816c:	e73c      	b.n	8007fe8 <_strtod_l+0x700>
 800816e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008170:	4642      	mov	r2, r8
 8008172:	4620      	mov	r0, r4
 8008174:	f002 f9a6 	bl	800a4c4 <__lshift>
 8008178:	901e      	str	r0, [sp, #120]	; 0x78
 800817a:	2800      	cmp	r0, #0
 800817c:	f47f af66 	bne.w	800804c <_strtod_l+0x764>
 8008180:	e5fe      	b.n	8007d80 <_strtod_l+0x498>
 8008182:	465f      	mov	r7, fp
 8008184:	d16e      	bne.n	8008264 <_strtod_l+0x97c>
 8008186:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008188:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800818c:	b342      	cbz	r2, 80081e0 <_strtod_l+0x8f8>
 800818e:	4a32      	ldr	r2, [pc, #200]	; (8008258 <_strtod_l+0x970>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d128      	bne.n	80081e6 <_strtod_l+0x8fe>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	4650      	mov	r0, sl
 8008198:	b1eb      	cbz	r3, 80081d6 <_strtod_l+0x8ee>
 800819a:	4a2d      	ldr	r2, [pc, #180]	; (8008250 <_strtod_l+0x968>)
 800819c:	403a      	ands	r2, r7
 800819e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80081a2:	f04f 31ff 	mov.w	r1, #4294967295
 80081a6:	d819      	bhi.n	80081dc <_strtod_l+0x8f4>
 80081a8:	0d12      	lsrs	r2, r2, #20
 80081aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	4298      	cmp	r0, r3
 80081b4:	d117      	bne.n	80081e6 <_strtod_l+0x8fe>
 80081b6:	4b29      	ldr	r3, [pc, #164]	; (800825c <_strtod_l+0x974>)
 80081b8:	429f      	cmp	r7, r3
 80081ba:	d102      	bne.n	80081c2 <_strtod_l+0x8da>
 80081bc:	3001      	adds	r0, #1
 80081be:	f43f addf 	beq.w	8007d80 <_strtod_l+0x498>
 80081c2:	4b23      	ldr	r3, [pc, #140]	; (8008250 <_strtod_l+0x968>)
 80081c4:	403b      	ands	r3, r7
 80081c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80081ca:	f04f 0a00 	mov.w	sl, #0
 80081ce:	9b04      	ldr	r3, [sp, #16]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1a0      	bne.n	8008116 <_strtod_l+0x82e>
 80081d4:	e5de      	b.n	8007d94 <_strtod_l+0x4ac>
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295
 80081da:	e7ea      	b.n	80081b2 <_strtod_l+0x8ca>
 80081dc:	460b      	mov	r3, r1
 80081de:	e7e8      	b.n	80081b2 <_strtod_l+0x8ca>
 80081e0:	ea53 030a 	orrs.w	r3, r3, sl
 80081e4:	d088      	beq.n	80080f8 <_strtod_l+0x810>
 80081e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081e8:	b1db      	cbz	r3, 8008222 <_strtod_l+0x93a>
 80081ea:	423b      	tst	r3, r7
 80081ec:	d0ef      	beq.n	80081ce <_strtod_l+0x8e6>
 80081ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081f0:	9a04      	ldr	r2, [sp, #16]
 80081f2:	4650      	mov	r0, sl
 80081f4:	4659      	mov	r1, fp
 80081f6:	b1c3      	cbz	r3, 800822a <_strtod_l+0x942>
 80081f8:	f7ff fb5a 	bl	80078b0 <sulp>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008204:	f7f8 f842 	bl	800028c <__adddf3>
 8008208:	4682      	mov	sl, r0
 800820a:	468b      	mov	fp, r1
 800820c:	e7df      	b.n	80081ce <_strtod_l+0x8e6>
 800820e:	4013      	ands	r3, r2
 8008210:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008214:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008218:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800821c:	f04f 3aff 	mov.w	sl, #4294967295
 8008220:	e7d5      	b.n	80081ce <_strtod_l+0x8e6>
 8008222:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008224:	ea13 0f0a 	tst.w	r3, sl
 8008228:	e7e0      	b.n	80081ec <_strtod_l+0x904>
 800822a:	f7ff fb41 	bl	80078b0 <sulp>
 800822e:	4602      	mov	r2, r0
 8008230:	460b      	mov	r3, r1
 8008232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008236:	f7f8 f827 	bl	8000288 <__aeabi_dsub>
 800823a:	2200      	movs	r2, #0
 800823c:	2300      	movs	r3, #0
 800823e:	4682      	mov	sl, r0
 8008240:	468b      	mov	fp, r1
 8008242:	f7f8 fc41 	bl	8000ac8 <__aeabi_dcmpeq>
 8008246:	2800      	cmp	r0, #0
 8008248:	d0c1      	beq.n	80081ce <_strtod_l+0x8e6>
 800824a:	e60e      	b.n	8007e6a <_strtod_l+0x582>
 800824c:	fffffc02 	.word	0xfffffc02
 8008250:	7ff00000 	.word	0x7ff00000
 8008254:	39500000 	.word	0x39500000
 8008258:	000fffff 	.word	0x000fffff
 800825c:	7fefffff 	.word	0x7fefffff
 8008260:	0800c208 	.word	0x0800c208
 8008264:	4631      	mov	r1, r6
 8008266:	4628      	mov	r0, r5
 8008268:	f002 fb14 	bl	800a894 <__ratio>
 800826c:	ec59 8b10 	vmov	r8, r9, d0
 8008270:	ee10 0a10 	vmov	r0, s0
 8008274:	2200      	movs	r2, #0
 8008276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800827a:	4649      	mov	r1, r9
 800827c:	f7f8 fc38 	bl	8000af0 <__aeabi_dcmple>
 8008280:	2800      	cmp	r0, #0
 8008282:	d07c      	beq.n	800837e <_strtod_l+0xa96>
 8008284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008286:	2b00      	cmp	r3, #0
 8008288:	d04c      	beq.n	8008324 <_strtod_l+0xa3c>
 800828a:	4b95      	ldr	r3, [pc, #596]	; (80084e0 <_strtod_l+0xbf8>)
 800828c:	2200      	movs	r2, #0
 800828e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008292:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80084e0 <_strtod_l+0xbf8>
 8008296:	f04f 0800 	mov.w	r8, #0
 800829a:	4b92      	ldr	r3, [pc, #584]	; (80084e4 <_strtod_l+0xbfc>)
 800829c:	403b      	ands	r3, r7
 800829e:	9311      	str	r3, [sp, #68]	; 0x44
 80082a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80082a2:	4b91      	ldr	r3, [pc, #580]	; (80084e8 <_strtod_l+0xc00>)
 80082a4:	429a      	cmp	r2, r3
 80082a6:	f040 80b2 	bne.w	800840e <_strtod_l+0xb26>
 80082aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082b2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80082b6:	ec4b ab10 	vmov	d0, sl, fp
 80082ba:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80082be:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80082c2:	f002 fa0f 	bl	800a6e4 <__ulp>
 80082c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082ca:	ec53 2b10 	vmov	r2, r3, d0
 80082ce:	f7f8 f993 	bl	80005f8 <__aeabi_dmul>
 80082d2:	4652      	mov	r2, sl
 80082d4:	465b      	mov	r3, fp
 80082d6:	f7f7 ffd9 	bl	800028c <__adddf3>
 80082da:	460b      	mov	r3, r1
 80082dc:	4981      	ldr	r1, [pc, #516]	; (80084e4 <_strtod_l+0xbfc>)
 80082de:	4a83      	ldr	r2, [pc, #524]	; (80084ec <_strtod_l+0xc04>)
 80082e0:	4019      	ands	r1, r3
 80082e2:	4291      	cmp	r1, r2
 80082e4:	4682      	mov	sl, r0
 80082e6:	d95e      	bls.n	80083a6 <_strtod_l+0xabe>
 80082e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082ea:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d103      	bne.n	80082fa <_strtod_l+0xa12>
 80082f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082f4:	3301      	adds	r3, #1
 80082f6:	f43f ad43 	beq.w	8007d80 <_strtod_l+0x498>
 80082fa:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80084f8 <_strtod_l+0xc10>
 80082fe:	f04f 3aff 	mov.w	sl, #4294967295
 8008302:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008304:	4620      	mov	r0, r4
 8008306:	f001 fec1 	bl	800a08c <_Bfree>
 800830a:	9907      	ldr	r1, [sp, #28]
 800830c:	4620      	mov	r0, r4
 800830e:	f001 febd 	bl	800a08c <_Bfree>
 8008312:	4631      	mov	r1, r6
 8008314:	4620      	mov	r0, r4
 8008316:	f001 feb9 	bl	800a08c <_Bfree>
 800831a:	4629      	mov	r1, r5
 800831c:	4620      	mov	r0, r4
 800831e:	f001 feb5 	bl	800a08c <_Bfree>
 8008322:	e613      	b.n	8007f4c <_strtod_l+0x664>
 8008324:	f1ba 0f00 	cmp.w	sl, #0
 8008328:	d11b      	bne.n	8008362 <_strtod_l+0xa7a>
 800832a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800832e:	b9f3      	cbnz	r3, 800836e <_strtod_l+0xa86>
 8008330:	4b6b      	ldr	r3, [pc, #428]	; (80084e0 <_strtod_l+0xbf8>)
 8008332:	2200      	movs	r2, #0
 8008334:	4640      	mov	r0, r8
 8008336:	4649      	mov	r1, r9
 8008338:	f7f8 fbd0 	bl	8000adc <__aeabi_dcmplt>
 800833c:	b9d0      	cbnz	r0, 8008374 <_strtod_l+0xa8c>
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	4b6b      	ldr	r3, [pc, #428]	; (80084f0 <_strtod_l+0xc08>)
 8008344:	2200      	movs	r2, #0
 8008346:	f7f8 f957 	bl	80005f8 <__aeabi_dmul>
 800834a:	4680      	mov	r8, r0
 800834c:	4689      	mov	r9, r1
 800834e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008352:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008356:	931b      	str	r3, [sp, #108]	; 0x6c
 8008358:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800835c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008360:	e79b      	b.n	800829a <_strtod_l+0x9b2>
 8008362:	f1ba 0f01 	cmp.w	sl, #1
 8008366:	d102      	bne.n	800836e <_strtod_l+0xa86>
 8008368:	2f00      	cmp	r7, #0
 800836a:	f43f ad7e 	beq.w	8007e6a <_strtod_l+0x582>
 800836e:	4b61      	ldr	r3, [pc, #388]	; (80084f4 <_strtod_l+0xc0c>)
 8008370:	2200      	movs	r2, #0
 8008372:	e78c      	b.n	800828e <_strtod_l+0x9a6>
 8008374:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80084f0 <_strtod_l+0xc08>
 8008378:	f04f 0800 	mov.w	r8, #0
 800837c:	e7e7      	b.n	800834e <_strtod_l+0xa66>
 800837e:	4b5c      	ldr	r3, [pc, #368]	; (80084f0 <_strtod_l+0xc08>)
 8008380:	4640      	mov	r0, r8
 8008382:	4649      	mov	r1, r9
 8008384:	2200      	movs	r2, #0
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800838c:	4680      	mov	r8, r0
 800838e:	4689      	mov	r9, r1
 8008390:	b933      	cbnz	r3, 80083a0 <_strtod_l+0xab8>
 8008392:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008396:	9012      	str	r0, [sp, #72]	; 0x48
 8008398:	9313      	str	r3, [sp, #76]	; 0x4c
 800839a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800839e:	e7dd      	b.n	800835c <_strtod_l+0xa74>
 80083a0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80083a4:	e7f9      	b.n	800839a <_strtod_l+0xab2>
 80083a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d1a8      	bne.n	8008302 <_strtod_l+0xa1a>
 80083b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80083b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80083b6:	0d1b      	lsrs	r3, r3, #20
 80083b8:	051b      	lsls	r3, r3, #20
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d1a1      	bne.n	8008302 <_strtod_l+0xa1a>
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 fc79 	bl	8000cb8 <__aeabi_d2lz>
 80083c6:	f7f8 f8e9 	bl	800059c <__aeabi_l2d>
 80083ca:	4602      	mov	r2, r0
 80083cc:	460b      	mov	r3, r1
 80083ce:	4640      	mov	r0, r8
 80083d0:	4649      	mov	r1, r9
 80083d2:	f7f7 ff59 	bl	8000288 <__aeabi_dsub>
 80083d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80083d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083dc:	ea43 030a 	orr.w	r3, r3, sl
 80083e0:	4313      	orrs	r3, r2
 80083e2:	4680      	mov	r8, r0
 80083e4:	4689      	mov	r9, r1
 80083e6:	d053      	beq.n	8008490 <_strtod_l+0xba8>
 80083e8:	a335      	add	r3, pc, #212	; (adr r3, 80084c0 <_strtod_l+0xbd8>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f8 fb75 	bl	8000adc <__aeabi_dcmplt>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f47f acce 	bne.w	8007d94 <_strtod_l+0x4ac>
 80083f8:	a333      	add	r3, pc, #204	; (adr r3, 80084c8 <_strtod_l+0xbe0>)
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f8 fb89 	bl	8000b18 <__aeabi_dcmpgt>
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f af7b 	beq.w	8008302 <_strtod_l+0xa1a>
 800840c:	e4c2      	b.n	8007d94 <_strtod_l+0x4ac>
 800840e:	9b04      	ldr	r3, [sp, #16]
 8008410:	b333      	cbz	r3, 8008460 <_strtod_l+0xb78>
 8008412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008414:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008418:	d822      	bhi.n	8008460 <_strtod_l+0xb78>
 800841a:	a32d      	add	r3, pc, #180	; (adr r3, 80084d0 <_strtod_l+0xbe8>)
 800841c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008420:	4640      	mov	r0, r8
 8008422:	4649      	mov	r1, r9
 8008424:	f7f8 fb64 	bl	8000af0 <__aeabi_dcmple>
 8008428:	b1a0      	cbz	r0, 8008454 <_strtod_l+0xb6c>
 800842a:	4649      	mov	r1, r9
 800842c:	4640      	mov	r0, r8
 800842e:	f7f8 fbbb 	bl	8000ba8 <__aeabi_d2uiz>
 8008432:	2801      	cmp	r0, #1
 8008434:	bf38      	it	cc
 8008436:	2001      	movcc	r0, #1
 8008438:	f7f8 f864 	bl	8000504 <__aeabi_ui2d>
 800843c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800843e:	4680      	mov	r8, r0
 8008440:	4689      	mov	r9, r1
 8008442:	bb13      	cbnz	r3, 800848a <_strtod_l+0xba2>
 8008444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008448:	9014      	str	r0, [sp, #80]	; 0x50
 800844a:	9315      	str	r3, [sp, #84]	; 0x54
 800844c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008450:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008458:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800845c:	1a9b      	subs	r3, r3, r2
 800845e:	930d      	str	r3, [sp, #52]	; 0x34
 8008460:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008464:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800846c:	f002 f93a 	bl	800a6e4 <__ulp>
 8008470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008474:	ec53 2b10 	vmov	r2, r3, d0
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008480:	f7f7 ff04 	bl	800028c <__adddf3>
 8008484:	4682      	mov	sl, r0
 8008486:	468b      	mov	fp, r1
 8008488:	e78f      	b.n	80083aa <_strtod_l+0xac2>
 800848a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800848e:	e7dd      	b.n	800844c <_strtod_l+0xb64>
 8008490:	a311      	add	r3, pc, #68	; (adr r3, 80084d8 <_strtod_l+0xbf0>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 fb21 	bl	8000adc <__aeabi_dcmplt>
 800849a:	e7b4      	b.n	8008406 <_strtod_l+0xb1e>
 800849c:	2300      	movs	r3, #0
 800849e:	930e      	str	r3, [sp, #56]	; 0x38
 80084a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80084a4:	6013      	str	r3, [r2, #0]
 80084a6:	f7ff ba65 	b.w	8007974 <_strtod_l+0x8c>
 80084aa:	2b65      	cmp	r3, #101	; 0x65
 80084ac:	f43f ab5d 	beq.w	8007b6a <_strtod_l+0x282>
 80084b0:	2b45      	cmp	r3, #69	; 0x45
 80084b2:	f43f ab5a 	beq.w	8007b6a <_strtod_l+0x282>
 80084b6:	2201      	movs	r2, #1
 80084b8:	f7ff bb92 	b.w	8007be0 <_strtod_l+0x2f8>
 80084bc:	f3af 8000 	nop.w
 80084c0:	94a03595 	.word	0x94a03595
 80084c4:	3fdfffff 	.word	0x3fdfffff
 80084c8:	35afe535 	.word	0x35afe535
 80084cc:	3fe00000 	.word	0x3fe00000
 80084d0:	ffc00000 	.word	0xffc00000
 80084d4:	41dfffff 	.word	0x41dfffff
 80084d8:	94a03595 	.word	0x94a03595
 80084dc:	3fcfffff 	.word	0x3fcfffff
 80084e0:	3ff00000 	.word	0x3ff00000
 80084e4:	7ff00000 	.word	0x7ff00000
 80084e8:	7fe00000 	.word	0x7fe00000
 80084ec:	7c9fffff 	.word	0x7c9fffff
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	bff00000 	.word	0xbff00000
 80084f8:	7fefffff 	.word	0x7fefffff

080084fc <_strtod_r>:
 80084fc:	4b01      	ldr	r3, [pc, #4]	; (8008504 <_strtod_r+0x8>)
 80084fe:	f7ff b9f3 	b.w	80078e8 <_strtod_l>
 8008502:	bf00      	nop
 8008504:	200002fc 	.word	0x200002fc

08008508 <_strtol_l.isra.0>:
 8008508:	2b01      	cmp	r3, #1
 800850a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850e:	d001      	beq.n	8008514 <_strtol_l.isra.0+0xc>
 8008510:	2b24      	cmp	r3, #36	; 0x24
 8008512:	d906      	bls.n	8008522 <_strtol_l.isra.0+0x1a>
 8008514:	f7fe fa6c 	bl	80069f0 <__errno>
 8008518:	2316      	movs	r3, #22
 800851a:	6003      	str	r3, [r0, #0]
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	4f3a      	ldr	r7, [pc, #232]	; (800860c <_strtol_l.isra.0+0x104>)
 8008524:	468e      	mov	lr, r1
 8008526:	4676      	mov	r6, lr
 8008528:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800852c:	5de5      	ldrb	r5, [r4, r7]
 800852e:	f015 0508 	ands.w	r5, r5, #8
 8008532:	d1f8      	bne.n	8008526 <_strtol_l.isra.0+0x1e>
 8008534:	2c2d      	cmp	r4, #45	; 0x2d
 8008536:	d134      	bne.n	80085a2 <_strtol_l.isra.0+0x9a>
 8008538:	f89e 4000 	ldrb.w	r4, [lr]
 800853c:	f04f 0801 	mov.w	r8, #1
 8008540:	f106 0e02 	add.w	lr, r6, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	d05c      	beq.n	8008602 <_strtol_l.isra.0+0xfa>
 8008548:	2b10      	cmp	r3, #16
 800854a:	d10c      	bne.n	8008566 <_strtol_l.isra.0+0x5e>
 800854c:	2c30      	cmp	r4, #48	; 0x30
 800854e:	d10a      	bne.n	8008566 <_strtol_l.isra.0+0x5e>
 8008550:	f89e 4000 	ldrb.w	r4, [lr]
 8008554:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008558:	2c58      	cmp	r4, #88	; 0x58
 800855a:	d14d      	bne.n	80085f8 <_strtol_l.isra.0+0xf0>
 800855c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008560:	2310      	movs	r3, #16
 8008562:	f10e 0e02 	add.w	lr, lr, #2
 8008566:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800856a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800856e:	2600      	movs	r6, #0
 8008570:	fbbc f9f3 	udiv	r9, ip, r3
 8008574:	4635      	mov	r5, r6
 8008576:	fb03 ca19 	mls	sl, r3, r9, ip
 800857a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800857e:	2f09      	cmp	r7, #9
 8008580:	d818      	bhi.n	80085b4 <_strtol_l.isra.0+0xac>
 8008582:	463c      	mov	r4, r7
 8008584:	42a3      	cmp	r3, r4
 8008586:	dd24      	ble.n	80085d2 <_strtol_l.isra.0+0xca>
 8008588:	2e00      	cmp	r6, #0
 800858a:	db1f      	blt.n	80085cc <_strtol_l.isra.0+0xc4>
 800858c:	45a9      	cmp	r9, r5
 800858e:	d31d      	bcc.n	80085cc <_strtol_l.isra.0+0xc4>
 8008590:	d101      	bne.n	8008596 <_strtol_l.isra.0+0x8e>
 8008592:	45a2      	cmp	sl, r4
 8008594:	db1a      	blt.n	80085cc <_strtol_l.isra.0+0xc4>
 8008596:	fb05 4503 	mla	r5, r5, r3, r4
 800859a:	2601      	movs	r6, #1
 800859c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80085a0:	e7eb      	b.n	800857a <_strtol_l.isra.0+0x72>
 80085a2:	2c2b      	cmp	r4, #43	; 0x2b
 80085a4:	bf08      	it	eq
 80085a6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80085aa:	46a8      	mov	r8, r5
 80085ac:	bf08      	it	eq
 80085ae:	f106 0e02 	addeq.w	lr, r6, #2
 80085b2:	e7c7      	b.n	8008544 <_strtol_l.isra.0+0x3c>
 80085b4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80085b8:	2f19      	cmp	r7, #25
 80085ba:	d801      	bhi.n	80085c0 <_strtol_l.isra.0+0xb8>
 80085bc:	3c37      	subs	r4, #55	; 0x37
 80085be:	e7e1      	b.n	8008584 <_strtol_l.isra.0+0x7c>
 80085c0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80085c4:	2f19      	cmp	r7, #25
 80085c6:	d804      	bhi.n	80085d2 <_strtol_l.isra.0+0xca>
 80085c8:	3c57      	subs	r4, #87	; 0x57
 80085ca:	e7db      	b.n	8008584 <_strtol_l.isra.0+0x7c>
 80085cc:	f04f 36ff 	mov.w	r6, #4294967295
 80085d0:	e7e4      	b.n	800859c <_strtol_l.isra.0+0x94>
 80085d2:	2e00      	cmp	r6, #0
 80085d4:	da05      	bge.n	80085e2 <_strtol_l.isra.0+0xda>
 80085d6:	2322      	movs	r3, #34	; 0x22
 80085d8:	6003      	str	r3, [r0, #0]
 80085da:	4665      	mov	r5, ip
 80085dc:	b942      	cbnz	r2, 80085f0 <_strtol_l.isra.0+0xe8>
 80085de:	4628      	mov	r0, r5
 80085e0:	e79d      	b.n	800851e <_strtol_l.isra.0+0x16>
 80085e2:	f1b8 0f00 	cmp.w	r8, #0
 80085e6:	d000      	beq.n	80085ea <_strtol_l.isra.0+0xe2>
 80085e8:	426d      	negs	r5, r5
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d0f7      	beq.n	80085de <_strtol_l.isra.0+0xd6>
 80085ee:	b10e      	cbz	r6, 80085f4 <_strtol_l.isra.0+0xec>
 80085f0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80085f4:	6011      	str	r1, [r2, #0]
 80085f6:	e7f2      	b.n	80085de <_strtol_l.isra.0+0xd6>
 80085f8:	2430      	movs	r4, #48	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1b3      	bne.n	8008566 <_strtol_l.isra.0+0x5e>
 80085fe:	2308      	movs	r3, #8
 8008600:	e7b1      	b.n	8008566 <_strtol_l.isra.0+0x5e>
 8008602:	2c30      	cmp	r4, #48	; 0x30
 8008604:	d0a4      	beq.n	8008550 <_strtol_l.isra.0+0x48>
 8008606:	230a      	movs	r3, #10
 8008608:	e7ad      	b.n	8008566 <_strtol_l.isra.0+0x5e>
 800860a:	bf00      	nop
 800860c:	0800c231 	.word	0x0800c231

08008610 <_strtol_r>:
 8008610:	f7ff bf7a 	b.w	8008508 <_strtol_l.isra.0>

08008614 <strtol>:
 8008614:	4613      	mov	r3, r2
 8008616:	460a      	mov	r2, r1
 8008618:	4601      	mov	r1, r0
 800861a:	4802      	ldr	r0, [pc, #8]	; (8008624 <strtol+0x10>)
 800861c:	6800      	ldr	r0, [r0, #0]
 800861e:	f7ff bf73 	b.w	8008508 <_strtol_l.isra.0>
 8008622:	bf00      	nop
 8008624:	20000294 	.word	0x20000294

08008628 <__swbuf_r>:
 8008628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800862a:	460e      	mov	r6, r1
 800862c:	4614      	mov	r4, r2
 800862e:	4605      	mov	r5, r0
 8008630:	b118      	cbz	r0, 800863a <__swbuf_r+0x12>
 8008632:	6983      	ldr	r3, [r0, #24]
 8008634:	b90b      	cbnz	r3, 800863a <__swbuf_r+0x12>
 8008636:	f001 f849 	bl	80096cc <__sinit>
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <__swbuf_r+0x98>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d12b      	bne.n	8008698 <__swbuf_r+0x70>
 8008640:	686c      	ldr	r4, [r5, #4]
 8008642:	69a3      	ldr	r3, [r4, #24]
 8008644:	60a3      	str	r3, [r4, #8]
 8008646:	89a3      	ldrh	r3, [r4, #12]
 8008648:	071a      	lsls	r2, r3, #28
 800864a:	d52f      	bpl.n	80086ac <__swbuf_r+0x84>
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	b36b      	cbz	r3, 80086ac <__swbuf_r+0x84>
 8008650:	6923      	ldr	r3, [r4, #16]
 8008652:	6820      	ldr	r0, [r4, #0]
 8008654:	1ac0      	subs	r0, r0, r3
 8008656:	6963      	ldr	r3, [r4, #20]
 8008658:	b2f6      	uxtb	r6, r6
 800865a:	4283      	cmp	r3, r0
 800865c:	4637      	mov	r7, r6
 800865e:	dc04      	bgt.n	800866a <__swbuf_r+0x42>
 8008660:	4621      	mov	r1, r4
 8008662:	4628      	mov	r0, r5
 8008664:	f000 ff9e 	bl	80095a4 <_fflush_r>
 8008668:	bb30      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	1c5a      	adds	r2, r3, #1
 8008674:	6022      	str	r2, [r4, #0]
 8008676:	701e      	strb	r6, [r3, #0]
 8008678:	6963      	ldr	r3, [r4, #20]
 800867a:	3001      	adds	r0, #1
 800867c:	4283      	cmp	r3, r0
 800867e:	d004      	beq.n	800868a <__swbuf_r+0x62>
 8008680:	89a3      	ldrh	r3, [r4, #12]
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d506      	bpl.n	8008694 <__swbuf_r+0x6c>
 8008686:	2e0a      	cmp	r6, #10
 8008688:	d104      	bne.n	8008694 <__swbuf_r+0x6c>
 800868a:	4621      	mov	r1, r4
 800868c:	4628      	mov	r0, r5
 800868e:	f000 ff89 	bl	80095a4 <_fflush_r>
 8008692:	b988      	cbnz	r0, 80086b8 <__swbuf_r+0x90>
 8008694:	4638      	mov	r0, r7
 8008696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008698:	4b0a      	ldr	r3, [pc, #40]	; (80086c4 <__swbuf_r+0x9c>)
 800869a:	429c      	cmp	r4, r3
 800869c:	d101      	bne.n	80086a2 <__swbuf_r+0x7a>
 800869e:	68ac      	ldr	r4, [r5, #8]
 80086a0:	e7cf      	b.n	8008642 <__swbuf_r+0x1a>
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <__swbuf_r+0xa0>)
 80086a4:	429c      	cmp	r4, r3
 80086a6:	bf08      	it	eq
 80086a8:	68ec      	ldreq	r4, [r5, #12]
 80086aa:	e7ca      	b.n	8008642 <__swbuf_r+0x1a>
 80086ac:	4621      	mov	r1, r4
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 f80c 	bl	80086cc <__swsetup_r>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d0cb      	beq.n	8008650 <__swbuf_r+0x28>
 80086b8:	f04f 37ff 	mov.w	r7, #4294967295
 80086bc:	e7ea      	b.n	8008694 <__swbuf_r+0x6c>
 80086be:	bf00      	nop
 80086c0:	0800c3e8 	.word	0x0800c3e8
 80086c4:	0800c408 	.word	0x0800c408
 80086c8:	0800c3c8 	.word	0x0800c3c8

080086cc <__swsetup_r>:
 80086cc:	4b32      	ldr	r3, [pc, #200]	; (8008798 <__swsetup_r+0xcc>)
 80086ce:	b570      	push	{r4, r5, r6, lr}
 80086d0:	681d      	ldr	r5, [r3, #0]
 80086d2:	4606      	mov	r6, r0
 80086d4:	460c      	mov	r4, r1
 80086d6:	b125      	cbz	r5, 80086e2 <__swsetup_r+0x16>
 80086d8:	69ab      	ldr	r3, [r5, #24]
 80086da:	b913      	cbnz	r3, 80086e2 <__swsetup_r+0x16>
 80086dc:	4628      	mov	r0, r5
 80086de:	f000 fff5 	bl	80096cc <__sinit>
 80086e2:	4b2e      	ldr	r3, [pc, #184]	; (800879c <__swsetup_r+0xd0>)
 80086e4:	429c      	cmp	r4, r3
 80086e6:	d10f      	bne.n	8008708 <__swsetup_r+0x3c>
 80086e8:	686c      	ldr	r4, [r5, #4]
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80086f0:	0719      	lsls	r1, r3, #28
 80086f2:	d42c      	bmi.n	800874e <__swsetup_r+0x82>
 80086f4:	06dd      	lsls	r5, r3, #27
 80086f6:	d411      	bmi.n	800871c <__swsetup_r+0x50>
 80086f8:	2309      	movs	r3, #9
 80086fa:	6033      	str	r3, [r6, #0]
 80086fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008700:	81a3      	strh	r3, [r4, #12]
 8008702:	f04f 30ff 	mov.w	r0, #4294967295
 8008706:	e03e      	b.n	8008786 <__swsetup_r+0xba>
 8008708:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <__swsetup_r+0xd4>)
 800870a:	429c      	cmp	r4, r3
 800870c:	d101      	bne.n	8008712 <__swsetup_r+0x46>
 800870e:	68ac      	ldr	r4, [r5, #8]
 8008710:	e7eb      	b.n	80086ea <__swsetup_r+0x1e>
 8008712:	4b24      	ldr	r3, [pc, #144]	; (80087a4 <__swsetup_r+0xd8>)
 8008714:	429c      	cmp	r4, r3
 8008716:	bf08      	it	eq
 8008718:	68ec      	ldreq	r4, [r5, #12]
 800871a:	e7e6      	b.n	80086ea <__swsetup_r+0x1e>
 800871c:	0758      	lsls	r0, r3, #29
 800871e:	d512      	bpl.n	8008746 <__swsetup_r+0x7a>
 8008720:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008722:	b141      	cbz	r1, 8008736 <__swsetup_r+0x6a>
 8008724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008728:	4299      	cmp	r1, r3
 800872a:	d002      	beq.n	8008732 <__swsetup_r+0x66>
 800872c:	4630      	mov	r0, r6
 800872e:	f002 f937 	bl	800a9a0 <_free_r>
 8008732:	2300      	movs	r3, #0
 8008734:	6363      	str	r3, [r4, #52]	; 0x34
 8008736:	89a3      	ldrh	r3, [r4, #12]
 8008738:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800873c:	81a3      	strh	r3, [r4, #12]
 800873e:	2300      	movs	r3, #0
 8008740:	6063      	str	r3, [r4, #4]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	6023      	str	r3, [r4, #0]
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f043 0308 	orr.w	r3, r3, #8
 800874c:	81a3      	strh	r3, [r4, #12]
 800874e:	6923      	ldr	r3, [r4, #16]
 8008750:	b94b      	cbnz	r3, 8008766 <__swsetup_r+0x9a>
 8008752:	89a3      	ldrh	r3, [r4, #12]
 8008754:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800875c:	d003      	beq.n	8008766 <__swsetup_r+0x9a>
 800875e:	4621      	mov	r1, r4
 8008760:	4630      	mov	r0, r6
 8008762:	f001 fbeb 	bl	8009f3c <__smakebuf_r>
 8008766:	89a0      	ldrh	r0, [r4, #12]
 8008768:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800876c:	f010 0301 	ands.w	r3, r0, #1
 8008770:	d00a      	beq.n	8008788 <__swsetup_r+0xbc>
 8008772:	2300      	movs	r3, #0
 8008774:	60a3      	str	r3, [r4, #8]
 8008776:	6963      	ldr	r3, [r4, #20]
 8008778:	425b      	negs	r3, r3
 800877a:	61a3      	str	r3, [r4, #24]
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	b943      	cbnz	r3, 8008792 <__swsetup_r+0xc6>
 8008780:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008784:	d1ba      	bne.n	80086fc <__swsetup_r+0x30>
 8008786:	bd70      	pop	{r4, r5, r6, pc}
 8008788:	0781      	lsls	r1, r0, #30
 800878a:	bf58      	it	pl
 800878c:	6963      	ldrpl	r3, [r4, #20]
 800878e:	60a3      	str	r3, [r4, #8]
 8008790:	e7f4      	b.n	800877c <__swsetup_r+0xb0>
 8008792:	2000      	movs	r0, #0
 8008794:	e7f7      	b.n	8008786 <__swsetup_r+0xba>
 8008796:	bf00      	nop
 8008798:	20000294 	.word	0x20000294
 800879c:	0800c3e8 	.word	0x0800c3e8
 80087a0:	0800c408 	.word	0x0800c408
 80087a4:	0800c3c8 	.word	0x0800c3c8

080087a8 <quorem>:
 80087a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ac:	6903      	ldr	r3, [r0, #16]
 80087ae:	690c      	ldr	r4, [r1, #16]
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	4607      	mov	r7, r0
 80087b4:	f2c0 8081 	blt.w	80088ba <quorem+0x112>
 80087b8:	3c01      	subs	r4, #1
 80087ba:	f101 0814 	add.w	r8, r1, #20
 80087be:	f100 0514 	add.w	r5, r0, #20
 80087c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80087cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087d0:	3301      	adds	r3, #1
 80087d2:	429a      	cmp	r2, r3
 80087d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80087d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80087dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80087e0:	d331      	bcc.n	8008846 <quorem+0x9e>
 80087e2:	f04f 0e00 	mov.w	lr, #0
 80087e6:	4640      	mov	r0, r8
 80087e8:	46ac      	mov	ip, r5
 80087ea:	46f2      	mov	sl, lr
 80087ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80087f0:	b293      	uxth	r3, r2
 80087f2:	fb06 e303 	mla	r3, r6, r3, lr
 80087f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008800:	0c12      	lsrs	r2, r2, #16
 8008802:	f8dc a000 	ldr.w	sl, [ip]
 8008806:	fb06 e202 	mla	r2, r6, r2, lr
 800880a:	fa13 f38a 	uxtah	r3, r3, sl
 800880e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008812:	fa1f fa82 	uxth.w	sl, r2
 8008816:	f8dc 2000 	ldr.w	r2, [ip]
 800881a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800881e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008822:	b29b      	uxth	r3, r3
 8008824:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008828:	4581      	cmp	r9, r0
 800882a:	f84c 3b04 	str.w	r3, [ip], #4
 800882e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008832:	d2db      	bcs.n	80087ec <quorem+0x44>
 8008834:	f855 300b 	ldr.w	r3, [r5, fp]
 8008838:	b92b      	cbnz	r3, 8008846 <quorem+0x9e>
 800883a:	9b01      	ldr	r3, [sp, #4]
 800883c:	3b04      	subs	r3, #4
 800883e:	429d      	cmp	r5, r3
 8008840:	461a      	mov	r2, r3
 8008842:	d32e      	bcc.n	80088a2 <quorem+0xfa>
 8008844:	613c      	str	r4, [r7, #16]
 8008846:	4638      	mov	r0, r7
 8008848:	f001 fea8 	bl	800a59c <__mcmp>
 800884c:	2800      	cmp	r0, #0
 800884e:	db24      	blt.n	800889a <quorem+0xf2>
 8008850:	3601      	adds	r6, #1
 8008852:	4628      	mov	r0, r5
 8008854:	f04f 0c00 	mov.w	ip, #0
 8008858:	f858 2b04 	ldr.w	r2, [r8], #4
 800885c:	f8d0 e000 	ldr.w	lr, [r0]
 8008860:	b293      	uxth	r3, r2
 8008862:	ebac 0303 	sub.w	r3, ip, r3
 8008866:	0c12      	lsrs	r2, r2, #16
 8008868:	fa13 f38e 	uxtah	r3, r3, lr
 800886c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008870:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008874:	b29b      	uxth	r3, r3
 8008876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800887a:	45c1      	cmp	r9, r8
 800887c:	f840 3b04 	str.w	r3, [r0], #4
 8008880:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008884:	d2e8      	bcs.n	8008858 <quorem+0xb0>
 8008886:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800888a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800888e:	b922      	cbnz	r2, 800889a <quorem+0xf2>
 8008890:	3b04      	subs	r3, #4
 8008892:	429d      	cmp	r5, r3
 8008894:	461a      	mov	r2, r3
 8008896:	d30a      	bcc.n	80088ae <quorem+0x106>
 8008898:	613c      	str	r4, [r7, #16]
 800889a:	4630      	mov	r0, r6
 800889c:	b003      	add	sp, #12
 800889e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a2:	6812      	ldr	r2, [r2, #0]
 80088a4:	3b04      	subs	r3, #4
 80088a6:	2a00      	cmp	r2, #0
 80088a8:	d1cc      	bne.n	8008844 <quorem+0x9c>
 80088aa:	3c01      	subs	r4, #1
 80088ac:	e7c7      	b.n	800883e <quorem+0x96>
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	3b04      	subs	r3, #4
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	d1f0      	bne.n	8008898 <quorem+0xf0>
 80088b6:	3c01      	subs	r4, #1
 80088b8:	e7eb      	b.n	8008892 <quorem+0xea>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e7ee      	b.n	800889c <quorem+0xf4>
	...

080088c0 <_dtoa_r>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	ed2d 8b02 	vpush	{d8}
 80088c8:	ec57 6b10 	vmov	r6, r7, d0
 80088cc:	b095      	sub	sp, #84	; 0x54
 80088ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80088d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80088d4:	9105      	str	r1, [sp, #20]
 80088d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80088da:	4604      	mov	r4, r0
 80088dc:	9209      	str	r2, [sp, #36]	; 0x24
 80088de:	930f      	str	r3, [sp, #60]	; 0x3c
 80088e0:	b975      	cbnz	r5, 8008900 <_dtoa_r+0x40>
 80088e2:	2010      	movs	r0, #16
 80088e4:	f001 fb6a 	bl	8009fbc <malloc>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6260      	str	r0, [r4, #36]	; 0x24
 80088ec:	b920      	cbnz	r0, 80088f8 <_dtoa_r+0x38>
 80088ee:	4bb2      	ldr	r3, [pc, #712]	; (8008bb8 <_dtoa_r+0x2f8>)
 80088f0:	21ea      	movs	r1, #234	; 0xea
 80088f2:	48b2      	ldr	r0, [pc, #712]	; (8008bbc <_dtoa_r+0x2fc>)
 80088f4:	f002 fc40 	bl	800b178 <__assert_func>
 80088f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80088fc:	6005      	str	r5, [r0, #0]
 80088fe:	60c5      	str	r5, [r0, #12]
 8008900:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	b151      	cbz	r1, 800891c <_dtoa_r+0x5c>
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	604a      	str	r2, [r1, #4]
 800890a:	2301      	movs	r3, #1
 800890c:	4093      	lsls	r3, r2
 800890e:	608b      	str	r3, [r1, #8]
 8008910:	4620      	mov	r0, r4
 8008912:	f001 fbbb 	bl	800a08c <_Bfree>
 8008916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008918:	2200      	movs	r2, #0
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	1e3b      	subs	r3, r7, #0
 800891e:	bfb9      	ittee	lt
 8008920:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008924:	9303      	strlt	r3, [sp, #12]
 8008926:	2300      	movge	r3, #0
 8008928:	f8c8 3000 	strge.w	r3, [r8]
 800892c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008930:	4ba3      	ldr	r3, [pc, #652]	; (8008bc0 <_dtoa_r+0x300>)
 8008932:	bfbc      	itt	lt
 8008934:	2201      	movlt	r2, #1
 8008936:	f8c8 2000 	strlt.w	r2, [r8]
 800893a:	ea33 0309 	bics.w	r3, r3, r9
 800893e:	d11b      	bne.n	8008978 <_dtoa_r+0xb8>
 8008940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008942:	f242 730f 	movw	r3, #9999	; 0x270f
 8008946:	6013      	str	r3, [r2, #0]
 8008948:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800894c:	4333      	orrs	r3, r6
 800894e:	f000 857a 	beq.w	8009446 <_dtoa_r+0xb86>
 8008952:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008954:	b963      	cbnz	r3, 8008970 <_dtoa_r+0xb0>
 8008956:	4b9b      	ldr	r3, [pc, #620]	; (8008bc4 <_dtoa_r+0x304>)
 8008958:	e024      	b.n	80089a4 <_dtoa_r+0xe4>
 800895a:	4b9b      	ldr	r3, [pc, #620]	; (8008bc8 <_dtoa_r+0x308>)
 800895c:	9300      	str	r3, [sp, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008962:	6013      	str	r3, [r2, #0]
 8008964:	9800      	ldr	r0, [sp, #0]
 8008966:	b015      	add	sp, #84	; 0x54
 8008968:	ecbd 8b02 	vpop	{d8}
 800896c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008970:	4b94      	ldr	r3, [pc, #592]	; (8008bc4 <_dtoa_r+0x304>)
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	3303      	adds	r3, #3
 8008976:	e7f3      	b.n	8008960 <_dtoa_r+0xa0>
 8008978:	ed9d 7b02 	vldr	d7, [sp, #8]
 800897c:	2200      	movs	r2, #0
 800897e:	ec51 0b17 	vmov	r0, r1, d7
 8008982:	2300      	movs	r3, #0
 8008984:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008988:	f7f8 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800898c:	4680      	mov	r8, r0
 800898e:	b158      	cbz	r0, 80089a8 <_dtoa_r+0xe8>
 8008990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008992:	2301      	movs	r3, #1
 8008994:	6013      	str	r3, [r2, #0]
 8008996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8551 	beq.w	8009440 <_dtoa_r+0xb80>
 800899e:	488b      	ldr	r0, [pc, #556]	; (8008bcc <_dtoa_r+0x30c>)
 80089a0:	6018      	str	r0, [r3, #0]
 80089a2:	1e43      	subs	r3, r0, #1
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	e7dd      	b.n	8008964 <_dtoa_r+0xa4>
 80089a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80089ac:	aa12      	add	r2, sp, #72	; 0x48
 80089ae:	a913      	add	r1, sp, #76	; 0x4c
 80089b0:	4620      	mov	r0, r4
 80089b2:	f001 ff13 	bl	800a7dc <__d2b>
 80089b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80089ba:	4683      	mov	fp, r0
 80089bc:	2d00      	cmp	r5, #0
 80089be:	d07c      	beq.n	8008aba <_dtoa_r+0x1fa>
 80089c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80089c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80089ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80089d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80089d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80089da:	4b7d      	ldr	r3, [pc, #500]	; (8008bd0 <_dtoa_r+0x310>)
 80089dc:	2200      	movs	r2, #0
 80089de:	4630      	mov	r0, r6
 80089e0:	4639      	mov	r1, r7
 80089e2:	f7f7 fc51 	bl	8000288 <__aeabi_dsub>
 80089e6:	a36e      	add	r3, pc, #440	; (adr r3, 8008ba0 <_dtoa_r+0x2e0>)
 80089e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ec:	f7f7 fe04 	bl	80005f8 <__aeabi_dmul>
 80089f0:	a36d      	add	r3, pc, #436	; (adr r3, 8008ba8 <_dtoa_r+0x2e8>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fc49 	bl	800028c <__adddf3>
 80089fa:	4606      	mov	r6, r0
 80089fc:	4628      	mov	r0, r5
 80089fe:	460f      	mov	r7, r1
 8008a00:	f7f7 fd90 	bl	8000524 <__aeabi_i2d>
 8008a04:	a36a      	add	r3, pc, #424	; (adr r3, 8008bb0 <_dtoa_r+0x2f0>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fdf5 	bl	80005f8 <__aeabi_dmul>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	f7f7 fc39 	bl	800028c <__adddf3>
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	460f      	mov	r7, r1
 8008a1e:	f7f8 f89b 	bl	8000b58 <__aeabi_d2iz>
 8008a22:	2200      	movs	r2, #0
 8008a24:	4682      	mov	sl, r0
 8008a26:	2300      	movs	r3, #0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	4639      	mov	r1, r7
 8008a2c:	f7f8 f856 	bl	8000adc <__aeabi_dcmplt>
 8008a30:	b148      	cbz	r0, 8008a46 <_dtoa_r+0x186>
 8008a32:	4650      	mov	r0, sl
 8008a34:	f7f7 fd76 	bl	8000524 <__aeabi_i2d>
 8008a38:	4632      	mov	r2, r6
 8008a3a:	463b      	mov	r3, r7
 8008a3c:	f7f8 f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a40:	b908      	cbnz	r0, 8008a46 <_dtoa_r+0x186>
 8008a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a46:	f1ba 0f16 	cmp.w	sl, #22
 8008a4a:	d854      	bhi.n	8008af6 <_dtoa_r+0x236>
 8008a4c:	4b61      	ldr	r3, [pc, #388]	; (8008bd4 <_dtoa_r+0x314>)
 8008a4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008a5a:	f7f8 f83f 	bl	8000adc <__aeabi_dcmplt>
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	d04b      	beq.n	8008afa <_dtoa_r+0x23a>
 8008a62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a66:	2300      	movs	r3, #0
 8008a68:	930e      	str	r3, [sp, #56]	; 0x38
 8008a6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a6c:	1b5d      	subs	r5, r3, r5
 8008a6e:	1e6b      	subs	r3, r5, #1
 8008a70:	9304      	str	r3, [sp, #16]
 8008a72:	bf43      	ittte	mi
 8008a74:	2300      	movmi	r3, #0
 8008a76:	f1c5 0801 	rsbmi	r8, r5, #1
 8008a7a:	9304      	strmi	r3, [sp, #16]
 8008a7c:	f04f 0800 	movpl.w	r8, #0
 8008a80:	f1ba 0f00 	cmp.w	sl, #0
 8008a84:	db3b      	blt.n	8008afe <_dtoa_r+0x23e>
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008a8c:	4453      	add	r3, sl
 8008a8e:	9304      	str	r3, [sp, #16]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9306      	str	r3, [sp, #24]
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d869      	bhi.n	8008b6e <_dtoa_r+0x2ae>
 8008a9a:	2b05      	cmp	r3, #5
 8008a9c:	bfc4      	itt	gt
 8008a9e:	3b04      	subgt	r3, #4
 8008aa0:	9305      	strgt	r3, [sp, #20]
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	f1a3 0302 	sub.w	r3, r3, #2
 8008aa8:	bfcc      	ite	gt
 8008aaa:	2500      	movgt	r5, #0
 8008aac:	2501      	movle	r5, #1
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d869      	bhi.n	8008b86 <_dtoa_r+0x2c6>
 8008ab2:	e8df f003 	tbb	[pc, r3]
 8008ab6:	4e2c      	.short	0x4e2c
 8008ab8:	5a4c      	.short	0x5a4c
 8008aba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008abe:	441d      	add	r5, r3
 8008ac0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ac4:	2b20      	cmp	r3, #32
 8008ac6:	bfc1      	itttt	gt
 8008ac8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008acc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ad0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008ad4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008ad8:	bfda      	itte	le
 8008ada:	f1c3 0320 	rsble	r3, r3, #32
 8008ade:	fa06 f003 	lslle.w	r0, r6, r3
 8008ae2:	4318      	orrgt	r0, r3
 8008ae4:	f7f7 fd0e 	bl	8000504 <__aeabi_ui2d>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	4606      	mov	r6, r0
 8008aec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008af0:	3d01      	subs	r5, #1
 8008af2:	9310      	str	r3, [sp, #64]	; 0x40
 8008af4:	e771      	b.n	80089da <_dtoa_r+0x11a>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e7b6      	b.n	8008a68 <_dtoa_r+0x1a8>
 8008afa:	900e      	str	r0, [sp, #56]	; 0x38
 8008afc:	e7b5      	b.n	8008a6a <_dtoa_r+0x1aa>
 8008afe:	f1ca 0300 	rsb	r3, sl, #0
 8008b02:	9306      	str	r3, [sp, #24]
 8008b04:	2300      	movs	r3, #0
 8008b06:	eba8 080a 	sub.w	r8, r8, sl
 8008b0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008b0c:	e7c2      	b.n	8008a94 <_dtoa_r+0x1d4>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9308      	str	r3, [sp, #32]
 8008b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	dc39      	bgt.n	8008b8c <_dtoa_r+0x2cc>
 8008b18:	f04f 0901 	mov.w	r9, #1
 8008b1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b20:	464b      	mov	r3, r9
 8008b22:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008b26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008b28:	2200      	movs	r2, #0
 8008b2a:	6042      	str	r2, [r0, #4]
 8008b2c:	2204      	movs	r2, #4
 8008b2e:	f102 0614 	add.w	r6, r2, #20
 8008b32:	429e      	cmp	r6, r3
 8008b34:	6841      	ldr	r1, [r0, #4]
 8008b36:	d92f      	bls.n	8008b98 <_dtoa_r+0x2d8>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f001 fa67 	bl	800a00c <_Balloc>
 8008b3e:	9000      	str	r0, [sp, #0]
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d14b      	bne.n	8008bdc <_dtoa_r+0x31c>
 8008b44:	4b24      	ldr	r3, [pc, #144]	; (8008bd8 <_dtoa_r+0x318>)
 8008b46:	4602      	mov	r2, r0
 8008b48:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008b4c:	e6d1      	b.n	80088f2 <_dtoa_r+0x32>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	e7de      	b.n	8008b10 <_dtoa_r+0x250>
 8008b52:	2300      	movs	r3, #0
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b58:	eb0a 0903 	add.w	r9, sl, r3
 8008b5c:	f109 0301 	add.w	r3, r9, #1
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	bfb8      	it	lt
 8008b66:	2301      	movlt	r3, #1
 8008b68:	e7dd      	b.n	8008b26 <_dtoa_r+0x266>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e7f2      	b.n	8008b54 <_dtoa_r+0x294>
 8008b6e:	2501      	movs	r5, #1
 8008b70:	2300      	movs	r3, #0
 8008b72:	9305      	str	r3, [sp, #20]
 8008b74:	9508      	str	r5, [sp, #32]
 8008b76:	f04f 39ff 	mov.w	r9, #4294967295
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b80:	2312      	movs	r3, #18
 8008b82:	9209      	str	r2, [sp, #36]	; 0x24
 8008b84:	e7cf      	b.n	8008b26 <_dtoa_r+0x266>
 8008b86:	2301      	movs	r3, #1
 8008b88:	9308      	str	r3, [sp, #32]
 8008b8a:	e7f4      	b.n	8008b76 <_dtoa_r+0x2b6>
 8008b8c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008b90:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b94:	464b      	mov	r3, r9
 8008b96:	e7c6      	b.n	8008b26 <_dtoa_r+0x266>
 8008b98:	3101      	adds	r1, #1
 8008b9a:	6041      	str	r1, [r0, #4]
 8008b9c:	0052      	lsls	r2, r2, #1
 8008b9e:	e7c6      	b.n	8008b2e <_dtoa_r+0x26e>
 8008ba0:	636f4361 	.word	0x636f4361
 8008ba4:	3fd287a7 	.word	0x3fd287a7
 8008ba8:	8b60c8b3 	.word	0x8b60c8b3
 8008bac:	3fc68a28 	.word	0x3fc68a28
 8008bb0:	509f79fb 	.word	0x509f79fb
 8008bb4:	3fd34413 	.word	0x3fd34413
 8008bb8:	0800c33e 	.word	0x0800c33e
 8008bbc:	0800c355 	.word	0x0800c355
 8008bc0:	7ff00000 	.word	0x7ff00000
 8008bc4:	0800c33a 	.word	0x0800c33a
 8008bc8:	0800c331 	.word	0x0800c331
 8008bcc:	0800c1b1 	.word	0x0800c1b1
 8008bd0:	3ff80000 	.word	0x3ff80000
 8008bd4:	0800c530 	.word	0x0800c530
 8008bd8:	0800c3b4 	.word	0x0800c3b4
 8008bdc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bde:	9a00      	ldr	r2, [sp, #0]
 8008be0:	601a      	str	r2, [r3, #0]
 8008be2:	9b01      	ldr	r3, [sp, #4]
 8008be4:	2b0e      	cmp	r3, #14
 8008be6:	f200 80ad 	bhi.w	8008d44 <_dtoa_r+0x484>
 8008bea:	2d00      	cmp	r5, #0
 8008bec:	f000 80aa 	beq.w	8008d44 <_dtoa_r+0x484>
 8008bf0:	f1ba 0f00 	cmp.w	sl, #0
 8008bf4:	dd36      	ble.n	8008c64 <_dtoa_r+0x3a4>
 8008bf6:	4ac3      	ldr	r2, [pc, #780]	; (8008f04 <_dtoa_r+0x644>)
 8008bf8:	f00a 030f 	and.w	r3, sl, #15
 8008bfc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c00:	ed93 7b00 	vldr	d7, [r3]
 8008c04:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c08:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008c0c:	eeb0 8a47 	vmov.f32	s16, s14
 8008c10:	eef0 8a67 	vmov.f32	s17, s15
 8008c14:	d016      	beq.n	8008c44 <_dtoa_r+0x384>
 8008c16:	4bbc      	ldr	r3, [pc, #752]	; (8008f08 <_dtoa_r+0x648>)
 8008c18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c20:	f7f7 fe14 	bl	800084c <__aeabi_ddiv>
 8008c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c28:	f007 070f 	and.w	r7, r7, #15
 8008c2c:	2503      	movs	r5, #3
 8008c2e:	4eb6      	ldr	r6, [pc, #728]	; (8008f08 <_dtoa_r+0x648>)
 8008c30:	b957      	cbnz	r7, 8008c48 <_dtoa_r+0x388>
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	ec53 2b18 	vmov	r2, r3, d8
 8008c3a:	f7f7 fe07 	bl	800084c <__aeabi_ddiv>
 8008c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c42:	e029      	b.n	8008c98 <_dtoa_r+0x3d8>
 8008c44:	2502      	movs	r5, #2
 8008c46:	e7f2      	b.n	8008c2e <_dtoa_r+0x36e>
 8008c48:	07f9      	lsls	r1, r7, #31
 8008c4a:	d508      	bpl.n	8008c5e <_dtoa_r+0x39e>
 8008c4c:	ec51 0b18 	vmov	r0, r1, d8
 8008c50:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	ec41 0b18 	vmov	d8, r0, r1
 8008c5c:	3501      	adds	r5, #1
 8008c5e:	107f      	asrs	r7, r7, #1
 8008c60:	3608      	adds	r6, #8
 8008c62:	e7e5      	b.n	8008c30 <_dtoa_r+0x370>
 8008c64:	f000 80a6 	beq.w	8008db4 <_dtoa_r+0x4f4>
 8008c68:	f1ca 0600 	rsb	r6, sl, #0
 8008c6c:	4ba5      	ldr	r3, [pc, #660]	; (8008f04 <_dtoa_r+0x644>)
 8008c6e:	4fa6      	ldr	r7, [pc, #664]	; (8008f08 <_dtoa_r+0x648>)
 8008c70:	f006 020f 	and.w	r2, r6, #15
 8008c74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008c80:	f7f7 fcba 	bl	80005f8 <__aeabi_dmul>
 8008c84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c88:	1136      	asrs	r6, r6, #4
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	2502      	movs	r5, #2
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	f040 8085 	bne.w	8008d9e <_dtoa_r+0x4de>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1d2      	bne.n	8008c3e <_dtoa_r+0x37e>
 8008c98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	f000 808c 	beq.w	8008db8 <_dtoa_r+0x4f8>
 8008ca0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ca4:	4b99      	ldr	r3, [pc, #612]	; (8008f0c <_dtoa_r+0x64c>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	4630      	mov	r0, r6
 8008caa:	4639      	mov	r1, r7
 8008cac:	f7f7 ff16 	bl	8000adc <__aeabi_dcmplt>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	f000 8081 	beq.w	8008db8 <_dtoa_r+0x4f8>
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d07d      	beq.n	8008db8 <_dtoa_r+0x4f8>
 8008cbc:	f1b9 0f00 	cmp.w	r9, #0
 8008cc0:	dd3c      	ble.n	8008d3c <_dtoa_r+0x47c>
 8008cc2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008cc6:	9307      	str	r3, [sp, #28]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	4b91      	ldr	r3, [pc, #580]	; (8008f10 <_dtoa_r+0x650>)
 8008ccc:	4630      	mov	r0, r6
 8008cce:	4639      	mov	r1, r7
 8008cd0:	f7f7 fc92 	bl	80005f8 <__aeabi_dmul>
 8008cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cd8:	3501      	adds	r5, #1
 8008cda:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8008cde:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f7f7 fc1e 	bl	8000524 <__aeabi_i2d>
 8008ce8:	4632      	mov	r2, r6
 8008cea:	463b      	mov	r3, r7
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	4b88      	ldr	r3, [pc, #544]	; (8008f14 <_dtoa_r+0x654>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f7f7 faca 	bl	800028c <__adddf3>
 8008cf8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d15c      	bne.n	8008dc2 <_dtoa_r+0x502>
 8008d08:	4b83      	ldr	r3, [pc, #524]	; (8008f18 <_dtoa_r+0x658>)
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 faba 	bl	8000288 <__aeabi_dsub>
 8008d14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d18:	4606      	mov	r6, r0
 8008d1a:	460f      	mov	r7, r1
 8008d1c:	f7f7 fefc 	bl	8000b18 <__aeabi_dcmpgt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	f040 8296 	bne.w	8009252 <_dtoa_r+0x992>
 8008d26:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008d2a:	4630      	mov	r0, r6
 8008d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d30:	4639      	mov	r1, r7
 8008d32:	f7f7 fed3 	bl	8000adc <__aeabi_dcmplt>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	f040 8288 	bne.w	800924c <_dtoa_r+0x98c>
 8008d3c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008d40:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f2c0 8158 	blt.w	8008ffc <_dtoa_r+0x73c>
 8008d4c:	f1ba 0f0e 	cmp.w	sl, #14
 8008d50:	f300 8154 	bgt.w	8008ffc <_dtoa_r+0x73c>
 8008d54:	4b6b      	ldr	r3, [pc, #428]	; (8008f04 <_dtoa_r+0x644>)
 8008d56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f280 80e3 	bge.w	8008f2c <_dtoa_r+0x66c>
 8008d66:	9b01      	ldr	r3, [sp, #4]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f300 80df 	bgt.w	8008f2c <_dtoa_r+0x66c>
 8008d6e:	f040 826d 	bne.w	800924c <_dtoa_r+0x98c>
 8008d72:	4b69      	ldr	r3, [pc, #420]	; (8008f18 <_dtoa_r+0x658>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	4640      	mov	r0, r8
 8008d78:	4649      	mov	r1, r9
 8008d7a:	f7f7 fc3d 	bl	80005f8 <__aeabi_dmul>
 8008d7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d82:	f7f7 febf 	bl	8000b04 <__aeabi_dcmpge>
 8008d86:	9e01      	ldr	r6, [sp, #4]
 8008d88:	4637      	mov	r7, r6
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	f040 8243 	bne.w	8009216 <_dtoa_r+0x956>
 8008d90:	9d00      	ldr	r5, [sp, #0]
 8008d92:	2331      	movs	r3, #49	; 0x31
 8008d94:	f805 3b01 	strb.w	r3, [r5], #1
 8008d98:	f10a 0a01 	add.w	sl, sl, #1
 8008d9c:	e23f      	b.n	800921e <_dtoa_r+0x95e>
 8008d9e:	07f2      	lsls	r2, r6, #31
 8008da0:	d505      	bpl.n	8008dae <_dtoa_r+0x4ee>
 8008da2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008da6:	f7f7 fc27 	bl	80005f8 <__aeabi_dmul>
 8008daa:	3501      	adds	r5, #1
 8008dac:	2301      	movs	r3, #1
 8008dae:	1076      	asrs	r6, r6, #1
 8008db0:	3708      	adds	r7, #8
 8008db2:	e76c      	b.n	8008c8e <_dtoa_r+0x3ce>
 8008db4:	2502      	movs	r5, #2
 8008db6:	e76f      	b.n	8008c98 <_dtoa_r+0x3d8>
 8008db8:	9b01      	ldr	r3, [sp, #4]
 8008dba:	f8cd a01c 	str.w	sl, [sp, #28]
 8008dbe:	930c      	str	r3, [sp, #48]	; 0x30
 8008dc0:	e78d      	b.n	8008cde <_dtoa_r+0x41e>
 8008dc2:	9900      	ldr	r1, [sp, #0]
 8008dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc8:	4b4e      	ldr	r3, [pc, #312]	; (8008f04 <_dtoa_r+0x644>)
 8008dca:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008dce:	4401      	add	r1, r0
 8008dd0:	9102      	str	r1, [sp, #8]
 8008dd2:	9908      	ldr	r1, [sp, #32]
 8008dd4:	eeb0 8a47 	vmov.f32	s16, s14
 8008dd8:	eef0 8a67 	vmov.f32	s17, s15
 8008ddc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008de4:	2900      	cmp	r1, #0
 8008de6:	d045      	beq.n	8008e74 <_dtoa_r+0x5b4>
 8008de8:	494c      	ldr	r1, [pc, #304]	; (8008f1c <_dtoa_r+0x65c>)
 8008dea:	2000      	movs	r0, #0
 8008dec:	f7f7 fd2e 	bl	800084c <__aeabi_ddiv>
 8008df0:	ec53 2b18 	vmov	r2, r3, d8
 8008df4:	f7f7 fa48 	bl	8000288 <__aeabi_dsub>
 8008df8:	9d00      	ldr	r5, [sp, #0]
 8008dfa:	ec41 0b18 	vmov	d8, r0, r1
 8008dfe:	4639      	mov	r1, r7
 8008e00:	4630      	mov	r0, r6
 8008e02:	f7f7 fea9 	bl	8000b58 <__aeabi_d2iz>
 8008e06:	900c      	str	r0, [sp, #48]	; 0x30
 8008e08:	f7f7 fb8c 	bl	8000524 <__aeabi_i2d>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 fa38 	bl	8000288 <__aeabi_dsub>
 8008e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e1a:	3330      	adds	r3, #48	; 0x30
 8008e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8008e20:	ec53 2b18 	vmov	r2, r3, d8
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 fe58 	bl	8000adc <__aeabi_dcmplt>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d165      	bne.n	8008efc <_dtoa_r+0x63c>
 8008e30:	4632      	mov	r2, r6
 8008e32:	463b      	mov	r3, r7
 8008e34:	4935      	ldr	r1, [pc, #212]	; (8008f0c <_dtoa_r+0x64c>)
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7f7 fa26 	bl	8000288 <__aeabi_dsub>
 8008e3c:	ec53 2b18 	vmov	r2, r3, d8
 8008e40:	f7f7 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 80b9 	bne.w	8008fbc <_dtoa_r+0x6fc>
 8008e4a:	9b02      	ldr	r3, [sp, #8]
 8008e4c:	429d      	cmp	r5, r3
 8008e4e:	f43f af75 	beq.w	8008d3c <_dtoa_r+0x47c>
 8008e52:	4b2f      	ldr	r3, [pc, #188]	; (8008f10 <_dtoa_r+0x650>)
 8008e54:	ec51 0b18 	vmov	r0, r1, d8
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f7f7 fbcd 	bl	80005f8 <__aeabi_dmul>
 8008e5e:	4b2c      	ldr	r3, [pc, #176]	; (8008f10 <_dtoa_r+0x650>)
 8008e60:	ec41 0b18 	vmov	d8, r0, r1
 8008e64:	2200      	movs	r2, #0
 8008e66:	4630      	mov	r0, r6
 8008e68:	4639      	mov	r1, r7
 8008e6a:	f7f7 fbc5 	bl	80005f8 <__aeabi_dmul>
 8008e6e:	4606      	mov	r6, r0
 8008e70:	460f      	mov	r7, r1
 8008e72:	e7c4      	b.n	8008dfe <_dtoa_r+0x53e>
 8008e74:	ec51 0b17 	vmov	r0, r1, d7
 8008e78:	f7f7 fbbe 	bl	80005f8 <__aeabi_dmul>
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	9d00      	ldr	r5, [sp, #0]
 8008e80:	930c      	str	r3, [sp, #48]	; 0x30
 8008e82:	ec41 0b18 	vmov	d8, r0, r1
 8008e86:	4639      	mov	r1, r7
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7f7 fe65 	bl	8000b58 <__aeabi_d2iz>
 8008e8e:	9011      	str	r0, [sp, #68]	; 0x44
 8008e90:	f7f7 fb48 	bl	8000524 <__aeabi_i2d>
 8008e94:	4602      	mov	r2, r0
 8008e96:	460b      	mov	r3, r1
 8008e98:	4630      	mov	r0, r6
 8008e9a:	4639      	mov	r1, r7
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ea2:	3330      	adds	r3, #48	; 0x30
 8008ea4:	f805 3b01 	strb.w	r3, [r5], #1
 8008ea8:	9b02      	ldr	r3, [sp, #8]
 8008eaa:	429d      	cmp	r5, r3
 8008eac:	4606      	mov	r6, r0
 8008eae:	460f      	mov	r7, r1
 8008eb0:	f04f 0200 	mov.w	r2, #0
 8008eb4:	d134      	bne.n	8008f20 <_dtoa_r+0x660>
 8008eb6:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <_dtoa_r+0x65c>)
 8008eb8:	ec51 0b18 	vmov	r0, r1, d8
 8008ebc:	f7f7 f9e6 	bl	800028c <__adddf3>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	4639      	mov	r1, r7
 8008ec8:	f7f7 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	d175      	bne.n	8008fbc <_dtoa_r+0x6fc>
 8008ed0:	ec53 2b18 	vmov	r2, r3, d8
 8008ed4:	4911      	ldr	r1, [pc, #68]	; (8008f1c <_dtoa_r+0x65c>)
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	f7f7 f9d6 	bl	8000288 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	4639      	mov	r1, r7
 8008ee4:	f7f7 fdfa 	bl	8000adc <__aeabi_dcmplt>
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f43f af27 	beq.w	8008d3c <_dtoa_r+0x47c>
 8008eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ef0:	1e6b      	subs	r3, r5, #1
 8008ef2:	930c      	str	r3, [sp, #48]	; 0x30
 8008ef4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ef8:	2b30      	cmp	r3, #48	; 0x30
 8008efa:	d0f8      	beq.n	8008eee <_dtoa_r+0x62e>
 8008efc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008f00:	e04a      	b.n	8008f98 <_dtoa_r+0x6d8>
 8008f02:	bf00      	nop
 8008f04:	0800c530 	.word	0x0800c530
 8008f08:	0800c508 	.word	0x0800c508
 8008f0c:	3ff00000 	.word	0x3ff00000
 8008f10:	40240000 	.word	0x40240000
 8008f14:	401c0000 	.word	0x401c0000
 8008f18:	40140000 	.word	0x40140000
 8008f1c:	3fe00000 	.word	0x3fe00000
 8008f20:	4baf      	ldr	r3, [pc, #700]	; (80091e0 <_dtoa_r+0x920>)
 8008f22:	f7f7 fb69 	bl	80005f8 <__aeabi_dmul>
 8008f26:	4606      	mov	r6, r0
 8008f28:	460f      	mov	r7, r1
 8008f2a:	e7ac      	b.n	8008e86 <_dtoa_r+0x5c6>
 8008f2c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008f30:	9d00      	ldr	r5, [sp, #0]
 8008f32:	4642      	mov	r2, r8
 8008f34:	464b      	mov	r3, r9
 8008f36:	4630      	mov	r0, r6
 8008f38:	4639      	mov	r1, r7
 8008f3a:	f7f7 fc87 	bl	800084c <__aeabi_ddiv>
 8008f3e:	f7f7 fe0b 	bl	8000b58 <__aeabi_d2iz>
 8008f42:	9002      	str	r0, [sp, #8]
 8008f44:	f7f7 faee 	bl	8000524 <__aeabi_i2d>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	f7f7 fb54 	bl	80005f8 <__aeabi_dmul>
 8008f50:	4602      	mov	r2, r0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4630      	mov	r0, r6
 8008f56:	4639      	mov	r1, r7
 8008f58:	f7f7 f996 	bl	8000288 <__aeabi_dsub>
 8008f5c:	9e02      	ldr	r6, [sp, #8]
 8008f5e:	9f01      	ldr	r7, [sp, #4]
 8008f60:	3630      	adds	r6, #48	; 0x30
 8008f62:	f805 6b01 	strb.w	r6, [r5], #1
 8008f66:	9e00      	ldr	r6, [sp, #0]
 8008f68:	1bae      	subs	r6, r5, r6
 8008f6a:	42b7      	cmp	r7, r6
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	460b      	mov	r3, r1
 8008f70:	d137      	bne.n	8008fe2 <_dtoa_r+0x722>
 8008f72:	f7f7 f98b 	bl	800028c <__adddf3>
 8008f76:	4642      	mov	r2, r8
 8008f78:	464b      	mov	r3, r9
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	f7f7 fdcb 	bl	8000b18 <__aeabi_dcmpgt>
 8008f82:	b9c8      	cbnz	r0, 8008fb8 <_dtoa_r+0x6f8>
 8008f84:	4642      	mov	r2, r8
 8008f86:	464b      	mov	r3, r9
 8008f88:	4630      	mov	r0, r6
 8008f8a:	4639      	mov	r1, r7
 8008f8c:	f7f7 fd9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f90:	b110      	cbz	r0, 8008f98 <_dtoa_r+0x6d8>
 8008f92:	9b02      	ldr	r3, [sp, #8]
 8008f94:	07d9      	lsls	r1, r3, #31
 8008f96:	d40f      	bmi.n	8008fb8 <_dtoa_r+0x6f8>
 8008f98:	4620      	mov	r0, r4
 8008f9a:	4659      	mov	r1, fp
 8008f9c:	f001 f876 	bl	800a08c <_Bfree>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	702b      	strb	r3, [r5, #0]
 8008fa4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fa6:	f10a 0001 	add.w	r0, sl, #1
 8008faa:	6018      	str	r0, [r3, #0]
 8008fac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	f43f acd8 	beq.w	8008964 <_dtoa_r+0xa4>
 8008fb4:	601d      	str	r5, [r3, #0]
 8008fb6:	e4d5      	b.n	8008964 <_dtoa_r+0xa4>
 8008fb8:	f8cd a01c 	str.w	sl, [sp, #28]
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fc4:	2a39      	cmp	r2, #57	; 0x39
 8008fc6:	d108      	bne.n	8008fda <_dtoa_r+0x71a>
 8008fc8:	9a00      	ldr	r2, [sp, #0]
 8008fca:	429a      	cmp	r2, r3
 8008fcc:	d1f7      	bne.n	8008fbe <_dtoa_r+0x6fe>
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	9900      	ldr	r1, [sp, #0]
 8008fd2:	3201      	adds	r2, #1
 8008fd4:	9207      	str	r2, [sp, #28]
 8008fd6:	2230      	movs	r2, #48	; 0x30
 8008fd8:	700a      	strb	r2, [r1, #0]
 8008fda:	781a      	ldrb	r2, [r3, #0]
 8008fdc:	3201      	adds	r2, #1
 8008fde:	701a      	strb	r2, [r3, #0]
 8008fe0:	e78c      	b.n	8008efc <_dtoa_r+0x63c>
 8008fe2:	4b7f      	ldr	r3, [pc, #508]	; (80091e0 <_dtoa_r+0x920>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f7f7 fb07 	bl	80005f8 <__aeabi_dmul>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460f      	mov	r7, r1
 8008ff2:	f7f7 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d09b      	beq.n	8008f32 <_dtoa_r+0x672>
 8008ffa:	e7cd      	b.n	8008f98 <_dtoa_r+0x6d8>
 8008ffc:	9a08      	ldr	r2, [sp, #32]
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	f000 80c4 	beq.w	800918c <_dtoa_r+0x8cc>
 8009004:	9a05      	ldr	r2, [sp, #20]
 8009006:	2a01      	cmp	r2, #1
 8009008:	f300 80a8 	bgt.w	800915c <_dtoa_r+0x89c>
 800900c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800900e:	2a00      	cmp	r2, #0
 8009010:	f000 80a0 	beq.w	8009154 <_dtoa_r+0x894>
 8009014:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009018:	9e06      	ldr	r6, [sp, #24]
 800901a:	4645      	mov	r5, r8
 800901c:	9a04      	ldr	r2, [sp, #16]
 800901e:	2101      	movs	r1, #1
 8009020:	441a      	add	r2, r3
 8009022:	4620      	mov	r0, r4
 8009024:	4498      	add	r8, r3
 8009026:	9204      	str	r2, [sp, #16]
 8009028:	f001 f936 	bl	800a298 <__i2b>
 800902c:	4607      	mov	r7, r0
 800902e:	2d00      	cmp	r5, #0
 8009030:	dd0b      	ble.n	800904a <_dtoa_r+0x78a>
 8009032:	9b04      	ldr	r3, [sp, #16]
 8009034:	2b00      	cmp	r3, #0
 8009036:	dd08      	ble.n	800904a <_dtoa_r+0x78a>
 8009038:	42ab      	cmp	r3, r5
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	bfa8      	it	ge
 800903e:	462b      	movge	r3, r5
 8009040:	eba8 0803 	sub.w	r8, r8, r3
 8009044:	1aed      	subs	r5, r5, r3
 8009046:	1ad3      	subs	r3, r2, r3
 8009048:	9304      	str	r3, [sp, #16]
 800904a:	9b06      	ldr	r3, [sp, #24]
 800904c:	b1fb      	cbz	r3, 800908e <_dtoa_r+0x7ce>
 800904e:	9b08      	ldr	r3, [sp, #32]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 809f 	beq.w	8009194 <_dtoa_r+0x8d4>
 8009056:	2e00      	cmp	r6, #0
 8009058:	dd11      	ble.n	800907e <_dtoa_r+0x7be>
 800905a:	4639      	mov	r1, r7
 800905c:	4632      	mov	r2, r6
 800905e:	4620      	mov	r0, r4
 8009060:	f001 f9d6 	bl	800a410 <__pow5mult>
 8009064:	465a      	mov	r2, fp
 8009066:	4601      	mov	r1, r0
 8009068:	4607      	mov	r7, r0
 800906a:	4620      	mov	r0, r4
 800906c:	f001 f92a 	bl	800a2c4 <__multiply>
 8009070:	4659      	mov	r1, fp
 8009072:	9007      	str	r0, [sp, #28]
 8009074:	4620      	mov	r0, r4
 8009076:	f001 f809 	bl	800a08c <_Bfree>
 800907a:	9b07      	ldr	r3, [sp, #28]
 800907c:	469b      	mov	fp, r3
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	1b9a      	subs	r2, r3, r6
 8009082:	d004      	beq.n	800908e <_dtoa_r+0x7ce>
 8009084:	4659      	mov	r1, fp
 8009086:	4620      	mov	r0, r4
 8009088:	f001 f9c2 	bl	800a410 <__pow5mult>
 800908c:	4683      	mov	fp, r0
 800908e:	2101      	movs	r1, #1
 8009090:	4620      	mov	r0, r4
 8009092:	f001 f901 	bl	800a298 <__i2b>
 8009096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009098:	2b00      	cmp	r3, #0
 800909a:	4606      	mov	r6, r0
 800909c:	dd7c      	ble.n	8009198 <_dtoa_r+0x8d8>
 800909e:	461a      	mov	r2, r3
 80090a0:	4601      	mov	r1, r0
 80090a2:	4620      	mov	r0, r4
 80090a4:	f001 f9b4 	bl	800a410 <__pow5mult>
 80090a8:	9b05      	ldr	r3, [sp, #20]
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	4606      	mov	r6, r0
 80090ae:	dd76      	ble.n	800919e <_dtoa_r+0x8de>
 80090b0:	2300      	movs	r3, #0
 80090b2:	9306      	str	r3, [sp, #24]
 80090b4:	6933      	ldr	r3, [r6, #16]
 80090b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80090ba:	6918      	ldr	r0, [r3, #16]
 80090bc:	f001 f89c 	bl	800a1f8 <__hi0bits>
 80090c0:	f1c0 0020 	rsb	r0, r0, #32
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	4418      	add	r0, r3
 80090c8:	f010 001f 	ands.w	r0, r0, #31
 80090cc:	f000 8086 	beq.w	80091dc <_dtoa_r+0x91c>
 80090d0:	f1c0 0320 	rsb	r3, r0, #32
 80090d4:	2b04      	cmp	r3, #4
 80090d6:	dd7f      	ble.n	80091d8 <_dtoa_r+0x918>
 80090d8:	f1c0 001c 	rsb	r0, r0, #28
 80090dc:	9b04      	ldr	r3, [sp, #16]
 80090de:	4403      	add	r3, r0
 80090e0:	4480      	add	r8, r0
 80090e2:	4405      	add	r5, r0
 80090e4:	9304      	str	r3, [sp, #16]
 80090e6:	f1b8 0f00 	cmp.w	r8, #0
 80090ea:	dd05      	ble.n	80090f8 <_dtoa_r+0x838>
 80090ec:	4659      	mov	r1, fp
 80090ee:	4642      	mov	r2, r8
 80090f0:	4620      	mov	r0, r4
 80090f2:	f001 f9e7 	bl	800a4c4 <__lshift>
 80090f6:	4683      	mov	fp, r0
 80090f8:	9b04      	ldr	r3, [sp, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	dd05      	ble.n	800910a <_dtoa_r+0x84a>
 80090fe:	4631      	mov	r1, r6
 8009100:	461a      	mov	r2, r3
 8009102:	4620      	mov	r0, r4
 8009104:	f001 f9de 	bl	800a4c4 <__lshift>
 8009108:	4606      	mov	r6, r0
 800910a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800910c:	2b00      	cmp	r3, #0
 800910e:	d069      	beq.n	80091e4 <_dtoa_r+0x924>
 8009110:	4631      	mov	r1, r6
 8009112:	4658      	mov	r0, fp
 8009114:	f001 fa42 	bl	800a59c <__mcmp>
 8009118:	2800      	cmp	r0, #0
 800911a:	da63      	bge.n	80091e4 <_dtoa_r+0x924>
 800911c:	2300      	movs	r3, #0
 800911e:	4659      	mov	r1, fp
 8009120:	220a      	movs	r2, #10
 8009122:	4620      	mov	r0, r4
 8009124:	f000 ffd4 	bl	800a0d0 <__multadd>
 8009128:	9b08      	ldr	r3, [sp, #32]
 800912a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800912e:	4683      	mov	fp, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	f000 818f 	beq.w	8009454 <_dtoa_r+0xb94>
 8009136:	4639      	mov	r1, r7
 8009138:	2300      	movs	r3, #0
 800913a:	220a      	movs	r2, #10
 800913c:	4620      	mov	r0, r4
 800913e:	f000 ffc7 	bl	800a0d0 <__multadd>
 8009142:	f1b9 0f00 	cmp.w	r9, #0
 8009146:	4607      	mov	r7, r0
 8009148:	f300 808e 	bgt.w	8009268 <_dtoa_r+0x9a8>
 800914c:	9b05      	ldr	r3, [sp, #20]
 800914e:	2b02      	cmp	r3, #2
 8009150:	dc50      	bgt.n	80091f4 <_dtoa_r+0x934>
 8009152:	e089      	b.n	8009268 <_dtoa_r+0x9a8>
 8009154:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800915a:	e75d      	b.n	8009018 <_dtoa_r+0x758>
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	1e5e      	subs	r6, r3, #1
 8009160:	9b06      	ldr	r3, [sp, #24]
 8009162:	42b3      	cmp	r3, r6
 8009164:	bfbf      	itttt	lt
 8009166:	9b06      	ldrlt	r3, [sp, #24]
 8009168:	9606      	strlt	r6, [sp, #24]
 800916a:	1af2      	sublt	r2, r6, r3
 800916c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800916e:	bfb6      	itet	lt
 8009170:	189b      	addlt	r3, r3, r2
 8009172:	1b9e      	subge	r6, r3, r6
 8009174:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009176:	9b01      	ldr	r3, [sp, #4]
 8009178:	bfb8      	it	lt
 800917a:	2600      	movlt	r6, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfb5      	itete	lt
 8009180:	eba8 0503 	sublt.w	r5, r8, r3
 8009184:	9b01      	ldrge	r3, [sp, #4]
 8009186:	2300      	movlt	r3, #0
 8009188:	4645      	movge	r5, r8
 800918a:	e747      	b.n	800901c <_dtoa_r+0x75c>
 800918c:	9e06      	ldr	r6, [sp, #24]
 800918e:	9f08      	ldr	r7, [sp, #32]
 8009190:	4645      	mov	r5, r8
 8009192:	e74c      	b.n	800902e <_dtoa_r+0x76e>
 8009194:	9a06      	ldr	r2, [sp, #24]
 8009196:	e775      	b.n	8009084 <_dtoa_r+0x7c4>
 8009198:	9b05      	ldr	r3, [sp, #20]
 800919a:	2b01      	cmp	r3, #1
 800919c:	dc18      	bgt.n	80091d0 <_dtoa_r+0x910>
 800919e:	9b02      	ldr	r3, [sp, #8]
 80091a0:	b9b3      	cbnz	r3, 80091d0 <_dtoa_r+0x910>
 80091a2:	9b03      	ldr	r3, [sp, #12]
 80091a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091a8:	b9a3      	cbnz	r3, 80091d4 <_dtoa_r+0x914>
 80091aa:	9b03      	ldr	r3, [sp, #12]
 80091ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091b0:	0d1b      	lsrs	r3, r3, #20
 80091b2:	051b      	lsls	r3, r3, #20
 80091b4:	b12b      	cbz	r3, 80091c2 <_dtoa_r+0x902>
 80091b6:	9b04      	ldr	r3, [sp, #16]
 80091b8:	3301      	adds	r3, #1
 80091ba:	9304      	str	r3, [sp, #16]
 80091bc:	f108 0801 	add.w	r8, r8, #1
 80091c0:	2301      	movs	r3, #1
 80091c2:	9306      	str	r3, [sp, #24]
 80091c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f47f af74 	bne.w	80090b4 <_dtoa_r+0x7f4>
 80091cc:	2001      	movs	r0, #1
 80091ce:	e779      	b.n	80090c4 <_dtoa_r+0x804>
 80091d0:	2300      	movs	r3, #0
 80091d2:	e7f6      	b.n	80091c2 <_dtoa_r+0x902>
 80091d4:	9b02      	ldr	r3, [sp, #8]
 80091d6:	e7f4      	b.n	80091c2 <_dtoa_r+0x902>
 80091d8:	d085      	beq.n	80090e6 <_dtoa_r+0x826>
 80091da:	4618      	mov	r0, r3
 80091dc:	301c      	adds	r0, #28
 80091de:	e77d      	b.n	80090dc <_dtoa_r+0x81c>
 80091e0:	40240000 	.word	0x40240000
 80091e4:	9b01      	ldr	r3, [sp, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dc38      	bgt.n	800925c <_dtoa_r+0x99c>
 80091ea:	9b05      	ldr	r3, [sp, #20]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	dd35      	ble.n	800925c <_dtoa_r+0x99c>
 80091f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80091f4:	f1b9 0f00 	cmp.w	r9, #0
 80091f8:	d10d      	bne.n	8009216 <_dtoa_r+0x956>
 80091fa:	4631      	mov	r1, r6
 80091fc:	464b      	mov	r3, r9
 80091fe:	2205      	movs	r2, #5
 8009200:	4620      	mov	r0, r4
 8009202:	f000 ff65 	bl	800a0d0 <__multadd>
 8009206:	4601      	mov	r1, r0
 8009208:	4606      	mov	r6, r0
 800920a:	4658      	mov	r0, fp
 800920c:	f001 f9c6 	bl	800a59c <__mcmp>
 8009210:	2800      	cmp	r0, #0
 8009212:	f73f adbd 	bgt.w	8008d90 <_dtoa_r+0x4d0>
 8009216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009218:	9d00      	ldr	r5, [sp, #0]
 800921a:	ea6f 0a03 	mvn.w	sl, r3
 800921e:	f04f 0800 	mov.w	r8, #0
 8009222:	4631      	mov	r1, r6
 8009224:	4620      	mov	r0, r4
 8009226:	f000 ff31 	bl	800a08c <_Bfree>
 800922a:	2f00      	cmp	r7, #0
 800922c:	f43f aeb4 	beq.w	8008f98 <_dtoa_r+0x6d8>
 8009230:	f1b8 0f00 	cmp.w	r8, #0
 8009234:	d005      	beq.n	8009242 <_dtoa_r+0x982>
 8009236:	45b8      	cmp	r8, r7
 8009238:	d003      	beq.n	8009242 <_dtoa_r+0x982>
 800923a:	4641      	mov	r1, r8
 800923c:	4620      	mov	r0, r4
 800923e:	f000 ff25 	bl	800a08c <_Bfree>
 8009242:	4639      	mov	r1, r7
 8009244:	4620      	mov	r0, r4
 8009246:	f000 ff21 	bl	800a08c <_Bfree>
 800924a:	e6a5      	b.n	8008f98 <_dtoa_r+0x6d8>
 800924c:	2600      	movs	r6, #0
 800924e:	4637      	mov	r7, r6
 8009250:	e7e1      	b.n	8009216 <_dtoa_r+0x956>
 8009252:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009254:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009258:	4637      	mov	r7, r6
 800925a:	e599      	b.n	8008d90 <_dtoa_r+0x4d0>
 800925c:	9b08      	ldr	r3, [sp, #32]
 800925e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 80fd 	beq.w	8009462 <_dtoa_r+0xba2>
 8009268:	2d00      	cmp	r5, #0
 800926a:	dd05      	ble.n	8009278 <_dtoa_r+0x9b8>
 800926c:	4639      	mov	r1, r7
 800926e:	462a      	mov	r2, r5
 8009270:	4620      	mov	r0, r4
 8009272:	f001 f927 	bl	800a4c4 <__lshift>
 8009276:	4607      	mov	r7, r0
 8009278:	9b06      	ldr	r3, [sp, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d05c      	beq.n	8009338 <_dtoa_r+0xa78>
 800927e:	6879      	ldr	r1, [r7, #4]
 8009280:	4620      	mov	r0, r4
 8009282:	f000 fec3 	bl	800a00c <_Balloc>
 8009286:	4605      	mov	r5, r0
 8009288:	b928      	cbnz	r0, 8009296 <_dtoa_r+0x9d6>
 800928a:	4b80      	ldr	r3, [pc, #512]	; (800948c <_dtoa_r+0xbcc>)
 800928c:	4602      	mov	r2, r0
 800928e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009292:	f7ff bb2e 	b.w	80088f2 <_dtoa_r+0x32>
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	3202      	adds	r2, #2
 800929a:	0092      	lsls	r2, r2, #2
 800929c:	f107 010c 	add.w	r1, r7, #12
 80092a0:	300c      	adds	r0, #12
 80092a2:	f000 fea5 	bl	8009ff0 <memcpy>
 80092a6:	2201      	movs	r2, #1
 80092a8:	4629      	mov	r1, r5
 80092aa:	4620      	mov	r0, r4
 80092ac:	f001 f90a 	bl	800a4c4 <__lshift>
 80092b0:	9b00      	ldr	r3, [sp, #0]
 80092b2:	3301      	adds	r3, #1
 80092b4:	9301      	str	r3, [sp, #4]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	444b      	add	r3, r9
 80092ba:	9307      	str	r3, [sp, #28]
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	f003 0301 	and.w	r3, r3, #1
 80092c2:	46b8      	mov	r8, r7
 80092c4:	9306      	str	r3, [sp, #24]
 80092c6:	4607      	mov	r7, r0
 80092c8:	9b01      	ldr	r3, [sp, #4]
 80092ca:	4631      	mov	r1, r6
 80092cc:	3b01      	subs	r3, #1
 80092ce:	4658      	mov	r0, fp
 80092d0:	9302      	str	r3, [sp, #8]
 80092d2:	f7ff fa69 	bl	80087a8 <quorem>
 80092d6:	4603      	mov	r3, r0
 80092d8:	3330      	adds	r3, #48	; 0x30
 80092da:	9004      	str	r0, [sp, #16]
 80092dc:	4641      	mov	r1, r8
 80092de:	4658      	mov	r0, fp
 80092e0:	9308      	str	r3, [sp, #32]
 80092e2:	f001 f95b 	bl	800a59c <__mcmp>
 80092e6:	463a      	mov	r2, r7
 80092e8:	4681      	mov	r9, r0
 80092ea:	4631      	mov	r1, r6
 80092ec:	4620      	mov	r0, r4
 80092ee:	f001 f971 	bl	800a5d4 <__mdiff>
 80092f2:	68c2      	ldr	r2, [r0, #12]
 80092f4:	9b08      	ldr	r3, [sp, #32]
 80092f6:	4605      	mov	r5, r0
 80092f8:	bb02      	cbnz	r2, 800933c <_dtoa_r+0xa7c>
 80092fa:	4601      	mov	r1, r0
 80092fc:	4658      	mov	r0, fp
 80092fe:	f001 f94d 	bl	800a59c <__mcmp>
 8009302:	9b08      	ldr	r3, [sp, #32]
 8009304:	4602      	mov	r2, r0
 8009306:	4629      	mov	r1, r5
 8009308:	4620      	mov	r0, r4
 800930a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800930e:	f000 febd 	bl	800a08c <_Bfree>
 8009312:	9b05      	ldr	r3, [sp, #20]
 8009314:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009316:	9d01      	ldr	r5, [sp, #4]
 8009318:	ea43 0102 	orr.w	r1, r3, r2
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	430b      	orrs	r3, r1
 8009320:	9b08      	ldr	r3, [sp, #32]
 8009322:	d10d      	bne.n	8009340 <_dtoa_r+0xa80>
 8009324:	2b39      	cmp	r3, #57	; 0x39
 8009326:	d029      	beq.n	800937c <_dtoa_r+0xabc>
 8009328:	f1b9 0f00 	cmp.w	r9, #0
 800932c:	dd01      	ble.n	8009332 <_dtoa_r+0xa72>
 800932e:	9b04      	ldr	r3, [sp, #16]
 8009330:	3331      	adds	r3, #49	; 0x31
 8009332:	9a02      	ldr	r2, [sp, #8]
 8009334:	7013      	strb	r3, [r2, #0]
 8009336:	e774      	b.n	8009222 <_dtoa_r+0x962>
 8009338:	4638      	mov	r0, r7
 800933a:	e7b9      	b.n	80092b0 <_dtoa_r+0x9f0>
 800933c:	2201      	movs	r2, #1
 800933e:	e7e2      	b.n	8009306 <_dtoa_r+0xa46>
 8009340:	f1b9 0f00 	cmp.w	r9, #0
 8009344:	db06      	blt.n	8009354 <_dtoa_r+0xa94>
 8009346:	9905      	ldr	r1, [sp, #20]
 8009348:	ea41 0909 	orr.w	r9, r1, r9
 800934c:	9906      	ldr	r1, [sp, #24]
 800934e:	ea59 0101 	orrs.w	r1, r9, r1
 8009352:	d120      	bne.n	8009396 <_dtoa_r+0xad6>
 8009354:	2a00      	cmp	r2, #0
 8009356:	ddec      	ble.n	8009332 <_dtoa_r+0xa72>
 8009358:	4659      	mov	r1, fp
 800935a:	2201      	movs	r2, #1
 800935c:	4620      	mov	r0, r4
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	f001 f8b0 	bl	800a4c4 <__lshift>
 8009364:	4631      	mov	r1, r6
 8009366:	4683      	mov	fp, r0
 8009368:	f001 f918 	bl	800a59c <__mcmp>
 800936c:	2800      	cmp	r0, #0
 800936e:	9b01      	ldr	r3, [sp, #4]
 8009370:	dc02      	bgt.n	8009378 <_dtoa_r+0xab8>
 8009372:	d1de      	bne.n	8009332 <_dtoa_r+0xa72>
 8009374:	07da      	lsls	r2, r3, #31
 8009376:	d5dc      	bpl.n	8009332 <_dtoa_r+0xa72>
 8009378:	2b39      	cmp	r3, #57	; 0x39
 800937a:	d1d8      	bne.n	800932e <_dtoa_r+0xa6e>
 800937c:	9a02      	ldr	r2, [sp, #8]
 800937e:	2339      	movs	r3, #57	; 0x39
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	462b      	mov	r3, r5
 8009384:	461d      	mov	r5, r3
 8009386:	3b01      	subs	r3, #1
 8009388:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800938c:	2a39      	cmp	r2, #57	; 0x39
 800938e:	d050      	beq.n	8009432 <_dtoa_r+0xb72>
 8009390:	3201      	adds	r2, #1
 8009392:	701a      	strb	r2, [r3, #0]
 8009394:	e745      	b.n	8009222 <_dtoa_r+0x962>
 8009396:	2a00      	cmp	r2, #0
 8009398:	dd03      	ble.n	80093a2 <_dtoa_r+0xae2>
 800939a:	2b39      	cmp	r3, #57	; 0x39
 800939c:	d0ee      	beq.n	800937c <_dtoa_r+0xabc>
 800939e:	3301      	adds	r3, #1
 80093a0:	e7c7      	b.n	8009332 <_dtoa_r+0xa72>
 80093a2:	9a01      	ldr	r2, [sp, #4]
 80093a4:	9907      	ldr	r1, [sp, #28]
 80093a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093aa:	428a      	cmp	r2, r1
 80093ac:	d02a      	beq.n	8009404 <_dtoa_r+0xb44>
 80093ae:	4659      	mov	r1, fp
 80093b0:	2300      	movs	r3, #0
 80093b2:	220a      	movs	r2, #10
 80093b4:	4620      	mov	r0, r4
 80093b6:	f000 fe8b 	bl	800a0d0 <__multadd>
 80093ba:	45b8      	cmp	r8, r7
 80093bc:	4683      	mov	fp, r0
 80093be:	f04f 0300 	mov.w	r3, #0
 80093c2:	f04f 020a 	mov.w	r2, #10
 80093c6:	4641      	mov	r1, r8
 80093c8:	4620      	mov	r0, r4
 80093ca:	d107      	bne.n	80093dc <_dtoa_r+0xb1c>
 80093cc:	f000 fe80 	bl	800a0d0 <__multadd>
 80093d0:	4680      	mov	r8, r0
 80093d2:	4607      	mov	r7, r0
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	3301      	adds	r3, #1
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	e775      	b.n	80092c8 <_dtoa_r+0xa08>
 80093dc:	f000 fe78 	bl	800a0d0 <__multadd>
 80093e0:	4639      	mov	r1, r7
 80093e2:	4680      	mov	r8, r0
 80093e4:	2300      	movs	r3, #0
 80093e6:	220a      	movs	r2, #10
 80093e8:	4620      	mov	r0, r4
 80093ea:	f000 fe71 	bl	800a0d0 <__multadd>
 80093ee:	4607      	mov	r7, r0
 80093f0:	e7f0      	b.n	80093d4 <_dtoa_r+0xb14>
 80093f2:	f1b9 0f00 	cmp.w	r9, #0
 80093f6:	9a00      	ldr	r2, [sp, #0]
 80093f8:	bfcc      	ite	gt
 80093fa:	464d      	movgt	r5, r9
 80093fc:	2501      	movle	r5, #1
 80093fe:	4415      	add	r5, r2
 8009400:	f04f 0800 	mov.w	r8, #0
 8009404:	4659      	mov	r1, fp
 8009406:	2201      	movs	r2, #1
 8009408:	4620      	mov	r0, r4
 800940a:	9301      	str	r3, [sp, #4]
 800940c:	f001 f85a 	bl	800a4c4 <__lshift>
 8009410:	4631      	mov	r1, r6
 8009412:	4683      	mov	fp, r0
 8009414:	f001 f8c2 	bl	800a59c <__mcmp>
 8009418:	2800      	cmp	r0, #0
 800941a:	dcb2      	bgt.n	8009382 <_dtoa_r+0xac2>
 800941c:	d102      	bne.n	8009424 <_dtoa_r+0xb64>
 800941e:	9b01      	ldr	r3, [sp, #4]
 8009420:	07db      	lsls	r3, r3, #31
 8009422:	d4ae      	bmi.n	8009382 <_dtoa_r+0xac2>
 8009424:	462b      	mov	r3, r5
 8009426:	461d      	mov	r5, r3
 8009428:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800942c:	2a30      	cmp	r2, #48	; 0x30
 800942e:	d0fa      	beq.n	8009426 <_dtoa_r+0xb66>
 8009430:	e6f7      	b.n	8009222 <_dtoa_r+0x962>
 8009432:	9a00      	ldr	r2, [sp, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d1a5      	bne.n	8009384 <_dtoa_r+0xac4>
 8009438:	f10a 0a01 	add.w	sl, sl, #1
 800943c:	2331      	movs	r3, #49	; 0x31
 800943e:	e779      	b.n	8009334 <_dtoa_r+0xa74>
 8009440:	4b13      	ldr	r3, [pc, #76]	; (8009490 <_dtoa_r+0xbd0>)
 8009442:	f7ff baaf 	b.w	80089a4 <_dtoa_r+0xe4>
 8009446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009448:	2b00      	cmp	r3, #0
 800944a:	f47f aa86 	bne.w	800895a <_dtoa_r+0x9a>
 800944e:	4b11      	ldr	r3, [pc, #68]	; (8009494 <_dtoa_r+0xbd4>)
 8009450:	f7ff baa8 	b.w	80089a4 <_dtoa_r+0xe4>
 8009454:	f1b9 0f00 	cmp.w	r9, #0
 8009458:	dc03      	bgt.n	8009462 <_dtoa_r+0xba2>
 800945a:	9b05      	ldr	r3, [sp, #20]
 800945c:	2b02      	cmp	r3, #2
 800945e:	f73f aec9 	bgt.w	80091f4 <_dtoa_r+0x934>
 8009462:	9d00      	ldr	r5, [sp, #0]
 8009464:	4631      	mov	r1, r6
 8009466:	4658      	mov	r0, fp
 8009468:	f7ff f99e 	bl	80087a8 <quorem>
 800946c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009470:	f805 3b01 	strb.w	r3, [r5], #1
 8009474:	9a00      	ldr	r2, [sp, #0]
 8009476:	1aaa      	subs	r2, r5, r2
 8009478:	4591      	cmp	r9, r2
 800947a:	ddba      	ble.n	80093f2 <_dtoa_r+0xb32>
 800947c:	4659      	mov	r1, fp
 800947e:	2300      	movs	r3, #0
 8009480:	220a      	movs	r2, #10
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fe24 	bl	800a0d0 <__multadd>
 8009488:	4683      	mov	fp, r0
 800948a:	e7eb      	b.n	8009464 <_dtoa_r+0xba4>
 800948c:	0800c3b4 	.word	0x0800c3b4
 8009490:	0800c1b0 	.word	0x0800c1b0
 8009494:	0800c331 	.word	0x0800c331

08009498 <__sflush_r>:
 8009498:	898a      	ldrh	r2, [r1, #12]
 800949a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800949e:	4605      	mov	r5, r0
 80094a0:	0710      	lsls	r0, r2, #28
 80094a2:	460c      	mov	r4, r1
 80094a4:	d458      	bmi.n	8009558 <__sflush_r+0xc0>
 80094a6:	684b      	ldr	r3, [r1, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	dc05      	bgt.n	80094b8 <__sflush_r+0x20>
 80094ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dc02      	bgt.n	80094b8 <__sflush_r+0x20>
 80094b2:	2000      	movs	r0, #0
 80094b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ba:	2e00      	cmp	r6, #0
 80094bc:	d0f9      	beq.n	80094b2 <__sflush_r+0x1a>
 80094be:	2300      	movs	r3, #0
 80094c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094c4:	682f      	ldr	r7, [r5, #0]
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	d032      	beq.n	8009530 <__sflush_r+0x98>
 80094ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	075a      	lsls	r2, r3, #29
 80094d0:	d505      	bpl.n	80094de <__sflush_r+0x46>
 80094d2:	6863      	ldr	r3, [r4, #4]
 80094d4:	1ac0      	subs	r0, r0, r3
 80094d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094d8:	b10b      	cbz	r3, 80094de <__sflush_r+0x46>
 80094da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094dc:	1ac0      	subs	r0, r0, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	4602      	mov	r2, r0
 80094e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094e4:	6a21      	ldr	r1, [r4, #32]
 80094e6:	4628      	mov	r0, r5
 80094e8:	47b0      	blx	r6
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	d106      	bne.n	80094fe <__sflush_r+0x66>
 80094f0:	6829      	ldr	r1, [r5, #0]
 80094f2:	291d      	cmp	r1, #29
 80094f4:	d82c      	bhi.n	8009550 <__sflush_r+0xb8>
 80094f6:	4a2a      	ldr	r2, [pc, #168]	; (80095a0 <__sflush_r+0x108>)
 80094f8:	40ca      	lsrs	r2, r1
 80094fa:	07d6      	lsls	r6, r2, #31
 80094fc:	d528      	bpl.n	8009550 <__sflush_r+0xb8>
 80094fe:	2200      	movs	r2, #0
 8009500:	6062      	str	r2, [r4, #4]
 8009502:	04d9      	lsls	r1, r3, #19
 8009504:	6922      	ldr	r2, [r4, #16]
 8009506:	6022      	str	r2, [r4, #0]
 8009508:	d504      	bpl.n	8009514 <__sflush_r+0x7c>
 800950a:	1c42      	adds	r2, r0, #1
 800950c:	d101      	bne.n	8009512 <__sflush_r+0x7a>
 800950e:	682b      	ldr	r3, [r5, #0]
 8009510:	b903      	cbnz	r3, 8009514 <__sflush_r+0x7c>
 8009512:	6560      	str	r0, [r4, #84]	; 0x54
 8009514:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009516:	602f      	str	r7, [r5, #0]
 8009518:	2900      	cmp	r1, #0
 800951a:	d0ca      	beq.n	80094b2 <__sflush_r+0x1a>
 800951c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009520:	4299      	cmp	r1, r3
 8009522:	d002      	beq.n	800952a <__sflush_r+0x92>
 8009524:	4628      	mov	r0, r5
 8009526:	f001 fa3b 	bl	800a9a0 <_free_r>
 800952a:	2000      	movs	r0, #0
 800952c:	6360      	str	r0, [r4, #52]	; 0x34
 800952e:	e7c1      	b.n	80094b4 <__sflush_r+0x1c>
 8009530:	6a21      	ldr	r1, [r4, #32]
 8009532:	2301      	movs	r3, #1
 8009534:	4628      	mov	r0, r5
 8009536:	47b0      	blx	r6
 8009538:	1c41      	adds	r1, r0, #1
 800953a:	d1c7      	bne.n	80094cc <__sflush_r+0x34>
 800953c:	682b      	ldr	r3, [r5, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d0c4      	beq.n	80094cc <__sflush_r+0x34>
 8009542:	2b1d      	cmp	r3, #29
 8009544:	d001      	beq.n	800954a <__sflush_r+0xb2>
 8009546:	2b16      	cmp	r3, #22
 8009548:	d101      	bne.n	800954e <__sflush_r+0xb6>
 800954a:	602f      	str	r7, [r5, #0]
 800954c:	e7b1      	b.n	80094b2 <__sflush_r+0x1a>
 800954e:	89a3      	ldrh	r3, [r4, #12]
 8009550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009554:	81a3      	strh	r3, [r4, #12]
 8009556:	e7ad      	b.n	80094b4 <__sflush_r+0x1c>
 8009558:	690f      	ldr	r7, [r1, #16]
 800955a:	2f00      	cmp	r7, #0
 800955c:	d0a9      	beq.n	80094b2 <__sflush_r+0x1a>
 800955e:	0793      	lsls	r3, r2, #30
 8009560:	680e      	ldr	r6, [r1, #0]
 8009562:	bf08      	it	eq
 8009564:	694b      	ldreq	r3, [r1, #20]
 8009566:	600f      	str	r7, [r1, #0]
 8009568:	bf18      	it	ne
 800956a:	2300      	movne	r3, #0
 800956c:	eba6 0807 	sub.w	r8, r6, r7
 8009570:	608b      	str	r3, [r1, #8]
 8009572:	f1b8 0f00 	cmp.w	r8, #0
 8009576:	dd9c      	ble.n	80094b2 <__sflush_r+0x1a>
 8009578:	6a21      	ldr	r1, [r4, #32]
 800957a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800957c:	4643      	mov	r3, r8
 800957e:	463a      	mov	r2, r7
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	2800      	cmp	r0, #0
 8009586:	dc06      	bgt.n	8009596 <__sflush_r+0xfe>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	f04f 30ff 	mov.w	r0, #4294967295
 8009594:	e78e      	b.n	80094b4 <__sflush_r+0x1c>
 8009596:	4407      	add	r7, r0
 8009598:	eba8 0800 	sub.w	r8, r8, r0
 800959c:	e7e9      	b.n	8009572 <__sflush_r+0xda>
 800959e:	bf00      	nop
 80095a0:	20400001 	.word	0x20400001

080095a4 <_fflush_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	690b      	ldr	r3, [r1, #16]
 80095a8:	4605      	mov	r5, r0
 80095aa:	460c      	mov	r4, r1
 80095ac:	b913      	cbnz	r3, 80095b4 <_fflush_r+0x10>
 80095ae:	2500      	movs	r5, #0
 80095b0:	4628      	mov	r0, r5
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	b118      	cbz	r0, 80095be <_fflush_r+0x1a>
 80095b6:	6983      	ldr	r3, [r0, #24]
 80095b8:	b90b      	cbnz	r3, 80095be <_fflush_r+0x1a>
 80095ba:	f000 f887 	bl	80096cc <__sinit>
 80095be:	4b14      	ldr	r3, [pc, #80]	; (8009610 <_fflush_r+0x6c>)
 80095c0:	429c      	cmp	r4, r3
 80095c2:	d11b      	bne.n	80095fc <_fflush_r+0x58>
 80095c4:	686c      	ldr	r4, [r5, #4]
 80095c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0ef      	beq.n	80095ae <_fflush_r+0xa>
 80095ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095d0:	07d0      	lsls	r0, r2, #31
 80095d2:	d404      	bmi.n	80095de <_fflush_r+0x3a>
 80095d4:	0599      	lsls	r1, r3, #22
 80095d6:	d402      	bmi.n	80095de <_fflush_r+0x3a>
 80095d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095da:	f000 fc88 	bl	8009eee <__retarget_lock_acquire_recursive>
 80095de:	4628      	mov	r0, r5
 80095e0:	4621      	mov	r1, r4
 80095e2:	f7ff ff59 	bl	8009498 <__sflush_r>
 80095e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095e8:	07da      	lsls	r2, r3, #31
 80095ea:	4605      	mov	r5, r0
 80095ec:	d4e0      	bmi.n	80095b0 <_fflush_r+0xc>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	059b      	lsls	r3, r3, #22
 80095f2:	d4dd      	bmi.n	80095b0 <_fflush_r+0xc>
 80095f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095f6:	f000 fc7b 	bl	8009ef0 <__retarget_lock_release_recursive>
 80095fa:	e7d9      	b.n	80095b0 <_fflush_r+0xc>
 80095fc:	4b05      	ldr	r3, [pc, #20]	; (8009614 <_fflush_r+0x70>)
 80095fe:	429c      	cmp	r4, r3
 8009600:	d101      	bne.n	8009606 <_fflush_r+0x62>
 8009602:	68ac      	ldr	r4, [r5, #8]
 8009604:	e7df      	b.n	80095c6 <_fflush_r+0x22>
 8009606:	4b04      	ldr	r3, [pc, #16]	; (8009618 <_fflush_r+0x74>)
 8009608:	429c      	cmp	r4, r3
 800960a:	bf08      	it	eq
 800960c:	68ec      	ldreq	r4, [r5, #12]
 800960e:	e7da      	b.n	80095c6 <_fflush_r+0x22>
 8009610:	0800c3e8 	.word	0x0800c3e8
 8009614:	0800c408 	.word	0x0800c408
 8009618:	0800c3c8 	.word	0x0800c3c8

0800961c <std>:
 800961c:	2300      	movs	r3, #0
 800961e:	b510      	push	{r4, lr}
 8009620:	4604      	mov	r4, r0
 8009622:	e9c0 3300 	strd	r3, r3, [r0]
 8009626:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800962a:	6083      	str	r3, [r0, #8]
 800962c:	8181      	strh	r1, [r0, #12]
 800962e:	6643      	str	r3, [r0, #100]	; 0x64
 8009630:	81c2      	strh	r2, [r0, #14]
 8009632:	6183      	str	r3, [r0, #24]
 8009634:	4619      	mov	r1, r3
 8009636:	2208      	movs	r2, #8
 8009638:	305c      	adds	r0, #92	; 0x5c
 800963a:	f7fd fa03 	bl	8006a44 <memset>
 800963e:	4b05      	ldr	r3, [pc, #20]	; (8009654 <std+0x38>)
 8009640:	6263      	str	r3, [r4, #36]	; 0x24
 8009642:	4b05      	ldr	r3, [pc, #20]	; (8009658 <std+0x3c>)
 8009644:	62a3      	str	r3, [r4, #40]	; 0x28
 8009646:	4b05      	ldr	r3, [pc, #20]	; (800965c <std+0x40>)
 8009648:	62e3      	str	r3, [r4, #44]	; 0x2c
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <std+0x44>)
 800964c:	6224      	str	r4, [r4, #32]
 800964e:	6323      	str	r3, [r4, #48]	; 0x30
 8009650:	bd10      	pop	{r4, pc}
 8009652:	bf00      	nop
 8009654:	0800b091 	.word	0x0800b091
 8009658:	0800b0b3 	.word	0x0800b0b3
 800965c:	0800b0eb 	.word	0x0800b0eb
 8009660:	0800b10f 	.word	0x0800b10f

08009664 <_cleanup_r>:
 8009664:	4901      	ldr	r1, [pc, #4]	; (800966c <_cleanup_r+0x8>)
 8009666:	f000 b8af 	b.w	80097c8 <_fwalk_reent>
 800966a:	bf00      	nop
 800966c:	080095a5 	.word	0x080095a5

08009670 <__sfmoreglue>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	1e4a      	subs	r2, r1, #1
 8009674:	2568      	movs	r5, #104	; 0x68
 8009676:	4355      	muls	r5, r2
 8009678:	460e      	mov	r6, r1
 800967a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800967e:	f001 f9df 	bl	800aa40 <_malloc_r>
 8009682:	4604      	mov	r4, r0
 8009684:	b140      	cbz	r0, 8009698 <__sfmoreglue+0x28>
 8009686:	2100      	movs	r1, #0
 8009688:	e9c0 1600 	strd	r1, r6, [r0]
 800968c:	300c      	adds	r0, #12
 800968e:	60a0      	str	r0, [r4, #8]
 8009690:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009694:	f7fd f9d6 	bl	8006a44 <memset>
 8009698:	4620      	mov	r0, r4
 800969a:	bd70      	pop	{r4, r5, r6, pc}

0800969c <__sfp_lock_acquire>:
 800969c:	4801      	ldr	r0, [pc, #4]	; (80096a4 <__sfp_lock_acquire+0x8>)
 800969e:	f000 bc26 	b.w	8009eee <__retarget_lock_acquire_recursive>
 80096a2:	bf00      	nop
 80096a4:	2000066c 	.word	0x2000066c

080096a8 <__sfp_lock_release>:
 80096a8:	4801      	ldr	r0, [pc, #4]	; (80096b0 <__sfp_lock_release+0x8>)
 80096aa:	f000 bc21 	b.w	8009ef0 <__retarget_lock_release_recursive>
 80096ae:	bf00      	nop
 80096b0:	2000066c 	.word	0x2000066c

080096b4 <__sinit_lock_acquire>:
 80096b4:	4801      	ldr	r0, [pc, #4]	; (80096bc <__sinit_lock_acquire+0x8>)
 80096b6:	f000 bc1a 	b.w	8009eee <__retarget_lock_acquire_recursive>
 80096ba:	bf00      	nop
 80096bc:	20000667 	.word	0x20000667

080096c0 <__sinit_lock_release>:
 80096c0:	4801      	ldr	r0, [pc, #4]	; (80096c8 <__sinit_lock_release+0x8>)
 80096c2:	f000 bc15 	b.w	8009ef0 <__retarget_lock_release_recursive>
 80096c6:	bf00      	nop
 80096c8:	20000667 	.word	0x20000667

080096cc <__sinit>:
 80096cc:	b510      	push	{r4, lr}
 80096ce:	4604      	mov	r4, r0
 80096d0:	f7ff fff0 	bl	80096b4 <__sinit_lock_acquire>
 80096d4:	69a3      	ldr	r3, [r4, #24]
 80096d6:	b11b      	cbz	r3, 80096e0 <__sinit+0x14>
 80096d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096dc:	f7ff bff0 	b.w	80096c0 <__sinit_lock_release>
 80096e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096e4:	6523      	str	r3, [r4, #80]	; 0x50
 80096e6:	4b13      	ldr	r3, [pc, #76]	; (8009734 <__sinit+0x68>)
 80096e8:	4a13      	ldr	r2, [pc, #76]	; (8009738 <__sinit+0x6c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80096ee:	42a3      	cmp	r3, r4
 80096f0:	bf04      	itt	eq
 80096f2:	2301      	moveq	r3, #1
 80096f4:	61a3      	streq	r3, [r4, #24]
 80096f6:	4620      	mov	r0, r4
 80096f8:	f000 f820 	bl	800973c <__sfp>
 80096fc:	6060      	str	r0, [r4, #4]
 80096fe:	4620      	mov	r0, r4
 8009700:	f000 f81c 	bl	800973c <__sfp>
 8009704:	60a0      	str	r0, [r4, #8]
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f818 	bl	800973c <__sfp>
 800970c:	2200      	movs	r2, #0
 800970e:	60e0      	str	r0, [r4, #12]
 8009710:	2104      	movs	r1, #4
 8009712:	6860      	ldr	r0, [r4, #4]
 8009714:	f7ff ff82 	bl	800961c <std>
 8009718:	68a0      	ldr	r0, [r4, #8]
 800971a:	2201      	movs	r2, #1
 800971c:	2109      	movs	r1, #9
 800971e:	f7ff ff7d 	bl	800961c <std>
 8009722:	68e0      	ldr	r0, [r4, #12]
 8009724:	2202      	movs	r2, #2
 8009726:	2112      	movs	r1, #18
 8009728:	f7ff ff78 	bl	800961c <std>
 800972c:	2301      	movs	r3, #1
 800972e:	61a3      	str	r3, [r4, #24]
 8009730:	e7d2      	b.n	80096d8 <__sinit+0xc>
 8009732:	bf00      	nop
 8009734:	0800c19c 	.word	0x0800c19c
 8009738:	08009665 	.word	0x08009665

0800973c <__sfp>:
 800973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973e:	4607      	mov	r7, r0
 8009740:	f7ff ffac 	bl	800969c <__sfp_lock_acquire>
 8009744:	4b1e      	ldr	r3, [pc, #120]	; (80097c0 <__sfp+0x84>)
 8009746:	681e      	ldr	r6, [r3, #0]
 8009748:	69b3      	ldr	r3, [r6, #24]
 800974a:	b913      	cbnz	r3, 8009752 <__sfp+0x16>
 800974c:	4630      	mov	r0, r6
 800974e:	f7ff ffbd 	bl	80096cc <__sinit>
 8009752:	3648      	adds	r6, #72	; 0x48
 8009754:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009758:	3b01      	subs	r3, #1
 800975a:	d503      	bpl.n	8009764 <__sfp+0x28>
 800975c:	6833      	ldr	r3, [r6, #0]
 800975e:	b30b      	cbz	r3, 80097a4 <__sfp+0x68>
 8009760:	6836      	ldr	r6, [r6, #0]
 8009762:	e7f7      	b.n	8009754 <__sfp+0x18>
 8009764:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009768:	b9d5      	cbnz	r5, 80097a0 <__sfp+0x64>
 800976a:	4b16      	ldr	r3, [pc, #88]	; (80097c4 <__sfp+0x88>)
 800976c:	60e3      	str	r3, [r4, #12]
 800976e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009772:	6665      	str	r5, [r4, #100]	; 0x64
 8009774:	f000 fbba 	bl	8009eec <__retarget_lock_init_recursive>
 8009778:	f7ff ff96 	bl	80096a8 <__sfp_lock_release>
 800977c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009780:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009784:	6025      	str	r5, [r4, #0]
 8009786:	61a5      	str	r5, [r4, #24]
 8009788:	2208      	movs	r2, #8
 800978a:	4629      	mov	r1, r5
 800978c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009790:	f7fd f958 	bl	8006a44 <memset>
 8009794:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009798:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800979c:	4620      	mov	r0, r4
 800979e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097a0:	3468      	adds	r4, #104	; 0x68
 80097a2:	e7d9      	b.n	8009758 <__sfp+0x1c>
 80097a4:	2104      	movs	r1, #4
 80097a6:	4638      	mov	r0, r7
 80097a8:	f7ff ff62 	bl	8009670 <__sfmoreglue>
 80097ac:	4604      	mov	r4, r0
 80097ae:	6030      	str	r0, [r6, #0]
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d1d5      	bne.n	8009760 <__sfp+0x24>
 80097b4:	f7ff ff78 	bl	80096a8 <__sfp_lock_release>
 80097b8:	230c      	movs	r3, #12
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	e7ee      	b.n	800979c <__sfp+0x60>
 80097be:	bf00      	nop
 80097c0:	0800c19c 	.word	0x0800c19c
 80097c4:	ffff0001 	.word	0xffff0001

080097c8 <_fwalk_reent>:
 80097c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097cc:	4606      	mov	r6, r0
 80097ce:	4688      	mov	r8, r1
 80097d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097d4:	2700      	movs	r7, #0
 80097d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097da:	f1b9 0901 	subs.w	r9, r9, #1
 80097de:	d505      	bpl.n	80097ec <_fwalk_reent+0x24>
 80097e0:	6824      	ldr	r4, [r4, #0]
 80097e2:	2c00      	cmp	r4, #0
 80097e4:	d1f7      	bne.n	80097d6 <_fwalk_reent+0xe>
 80097e6:	4638      	mov	r0, r7
 80097e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ec:	89ab      	ldrh	r3, [r5, #12]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d907      	bls.n	8009802 <_fwalk_reent+0x3a>
 80097f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097f6:	3301      	adds	r3, #1
 80097f8:	d003      	beq.n	8009802 <_fwalk_reent+0x3a>
 80097fa:	4629      	mov	r1, r5
 80097fc:	4630      	mov	r0, r6
 80097fe:	47c0      	blx	r8
 8009800:	4307      	orrs	r7, r0
 8009802:	3568      	adds	r5, #104	; 0x68
 8009804:	e7e9      	b.n	80097da <_fwalk_reent+0x12>

08009806 <rshift>:
 8009806:	6903      	ldr	r3, [r0, #16]
 8009808:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800980c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009810:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009814:	f100 0414 	add.w	r4, r0, #20
 8009818:	dd45      	ble.n	80098a6 <rshift+0xa0>
 800981a:	f011 011f 	ands.w	r1, r1, #31
 800981e:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009822:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009826:	d10c      	bne.n	8009842 <rshift+0x3c>
 8009828:	f100 0710 	add.w	r7, r0, #16
 800982c:	4629      	mov	r1, r5
 800982e:	42b1      	cmp	r1, r6
 8009830:	d334      	bcc.n	800989c <rshift+0x96>
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	1eea      	subs	r2, r5, #3
 8009838:	4296      	cmp	r6, r2
 800983a:	bf38      	it	cc
 800983c:	2300      	movcc	r3, #0
 800983e:	4423      	add	r3, r4
 8009840:	e015      	b.n	800986e <rshift+0x68>
 8009842:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009846:	f1c1 0820 	rsb	r8, r1, #32
 800984a:	40cf      	lsrs	r7, r1
 800984c:	f105 0e04 	add.w	lr, r5, #4
 8009850:	46a1      	mov	r9, r4
 8009852:	4576      	cmp	r6, lr
 8009854:	46f4      	mov	ip, lr
 8009856:	d815      	bhi.n	8009884 <rshift+0x7e>
 8009858:	1a9b      	subs	r3, r3, r2
 800985a:	009a      	lsls	r2, r3, #2
 800985c:	3a04      	subs	r2, #4
 800985e:	3501      	adds	r5, #1
 8009860:	42ae      	cmp	r6, r5
 8009862:	bf38      	it	cc
 8009864:	2200      	movcc	r2, #0
 8009866:	18a3      	adds	r3, r4, r2
 8009868:	50a7      	str	r7, [r4, r2]
 800986a:	b107      	cbz	r7, 800986e <rshift+0x68>
 800986c:	3304      	adds	r3, #4
 800986e:	1b1a      	subs	r2, r3, r4
 8009870:	42a3      	cmp	r3, r4
 8009872:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009876:	bf08      	it	eq
 8009878:	2300      	moveq	r3, #0
 800987a:	6102      	str	r2, [r0, #16]
 800987c:	bf08      	it	eq
 800987e:	6143      	streq	r3, [r0, #20]
 8009880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009884:	f8dc c000 	ldr.w	ip, [ip]
 8009888:	fa0c fc08 	lsl.w	ip, ip, r8
 800988c:	ea4c 0707 	orr.w	r7, ip, r7
 8009890:	f849 7b04 	str.w	r7, [r9], #4
 8009894:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009898:	40cf      	lsrs	r7, r1
 800989a:	e7da      	b.n	8009852 <rshift+0x4c>
 800989c:	f851 cb04 	ldr.w	ip, [r1], #4
 80098a0:	f847 cf04 	str.w	ip, [r7, #4]!
 80098a4:	e7c3      	b.n	800982e <rshift+0x28>
 80098a6:	4623      	mov	r3, r4
 80098a8:	e7e1      	b.n	800986e <rshift+0x68>

080098aa <__hexdig_fun>:
 80098aa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80098ae:	2b09      	cmp	r3, #9
 80098b0:	d802      	bhi.n	80098b8 <__hexdig_fun+0xe>
 80098b2:	3820      	subs	r0, #32
 80098b4:	b2c0      	uxtb	r0, r0
 80098b6:	4770      	bx	lr
 80098b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098bc:	2b05      	cmp	r3, #5
 80098be:	d801      	bhi.n	80098c4 <__hexdig_fun+0x1a>
 80098c0:	3847      	subs	r0, #71	; 0x47
 80098c2:	e7f7      	b.n	80098b4 <__hexdig_fun+0xa>
 80098c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098c8:	2b05      	cmp	r3, #5
 80098ca:	d801      	bhi.n	80098d0 <__hexdig_fun+0x26>
 80098cc:	3827      	subs	r0, #39	; 0x27
 80098ce:	e7f1      	b.n	80098b4 <__hexdig_fun+0xa>
 80098d0:	2000      	movs	r0, #0
 80098d2:	4770      	bx	lr

080098d4 <__gethex>:
 80098d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d8:	ed2d 8b02 	vpush	{d8}
 80098dc:	b089      	sub	sp, #36	; 0x24
 80098de:	ee08 0a10 	vmov	s16, r0
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	4bbc      	ldr	r3, [pc, #752]	; (8009bd8 <__gethex+0x304>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	4618      	mov	r0, r3
 80098ec:	468b      	mov	fp, r1
 80098ee:	4690      	mov	r8, r2
 80098f0:	f7f6 fc6e 	bl	80001d0 <strlen>
 80098f4:	9b01      	ldr	r3, [sp, #4]
 80098f6:	f8db 2000 	ldr.w	r2, [fp]
 80098fa:	4403      	add	r3, r0
 80098fc:	4682      	mov	sl, r0
 80098fe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009902:	9305      	str	r3, [sp, #20]
 8009904:	1c93      	adds	r3, r2, #2
 8009906:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800990a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800990e:	32fe      	adds	r2, #254	; 0xfe
 8009910:	18d1      	adds	r1, r2, r3
 8009912:	461f      	mov	r7, r3
 8009914:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009918:	9100      	str	r1, [sp, #0]
 800991a:	2830      	cmp	r0, #48	; 0x30
 800991c:	d0f8      	beq.n	8009910 <__gethex+0x3c>
 800991e:	f7ff ffc4 	bl	80098aa <__hexdig_fun>
 8009922:	4604      	mov	r4, r0
 8009924:	2800      	cmp	r0, #0
 8009926:	d13a      	bne.n	800999e <__gethex+0xca>
 8009928:	9901      	ldr	r1, [sp, #4]
 800992a:	4652      	mov	r2, sl
 800992c:	4638      	mov	r0, r7
 800992e:	f001 fbf2 	bl	800b116 <strncmp>
 8009932:	4605      	mov	r5, r0
 8009934:	2800      	cmp	r0, #0
 8009936:	d168      	bne.n	8009a0a <__gethex+0x136>
 8009938:	f817 000a 	ldrb.w	r0, [r7, sl]
 800993c:	eb07 060a 	add.w	r6, r7, sl
 8009940:	f7ff ffb3 	bl	80098aa <__hexdig_fun>
 8009944:	2800      	cmp	r0, #0
 8009946:	d062      	beq.n	8009a0e <__gethex+0x13a>
 8009948:	4633      	mov	r3, r6
 800994a:	7818      	ldrb	r0, [r3, #0]
 800994c:	2830      	cmp	r0, #48	; 0x30
 800994e:	461f      	mov	r7, r3
 8009950:	f103 0301 	add.w	r3, r3, #1
 8009954:	d0f9      	beq.n	800994a <__gethex+0x76>
 8009956:	f7ff ffa8 	bl	80098aa <__hexdig_fun>
 800995a:	2301      	movs	r3, #1
 800995c:	fab0 f480 	clz	r4, r0
 8009960:	0964      	lsrs	r4, r4, #5
 8009962:	4635      	mov	r5, r6
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	463a      	mov	r2, r7
 8009968:	4616      	mov	r6, r2
 800996a:	3201      	adds	r2, #1
 800996c:	7830      	ldrb	r0, [r6, #0]
 800996e:	f7ff ff9c 	bl	80098aa <__hexdig_fun>
 8009972:	2800      	cmp	r0, #0
 8009974:	d1f8      	bne.n	8009968 <__gethex+0x94>
 8009976:	9901      	ldr	r1, [sp, #4]
 8009978:	4652      	mov	r2, sl
 800997a:	4630      	mov	r0, r6
 800997c:	f001 fbcb 	bl	800b116 <strncmp>
 8009980:	b980      	cbnz	r0, 80099a4 <__gethex+0xd0>
 8009982:	b94d      	cbnz	r5, 8009998 <__gethex+0xc4>
 8009984:	eb06 050a 	add.w	r5, r6, sl
 8009988:	462a      	mov	r2, r5
 800998a:	4616      	mov	r6, r2
 800998c:	3201      	adds	r2, #1
 800998e:	7830      	ldrb	r0, [r6, #0]
 8009990:	f7ff ff8b 	bl	80098aa <__hexdig_fun>
 8009994:	2800      	cmp	r0, #0
 8009996:	d1f8      	bne.n	800998a <__gethex+0xb6>
 8009998:	1bad      	subs	r5, r5, r6
 800999a:	00ad      	lsls	r5, r5, #2
 800999c:	e004      	b.n	80099a8 <__gethex+0xd4>
 800999e:	2400      	movs	r4, #0
 80099a0:	4625      	mov	r5, r4
 80099a2:	e7e0      	b.n	8009966 <__gethex+0x92>
 80099a4:	2d00      	cmp	r5, #0
 80099a6:	d1f7      	bne.n	8009998 <__gethex+0xc4>
 80099a8:	7833      	ldrb	r3, [r6, #0]
 80099aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80099ae:	2b50      	cmp	r3, #80	; 0x50
 80099b0:	d13b      	bne.n	8009a2a <__gethex+0x156>
 80099b2:	7873      	ldrb	r3, [r6, #1]
 80099b4:	2b2b      	cmp	r3, #43	; 0x2b
 80099b6:	d02c      	beq.n	8009a12 <__gethex+0x13e>
 80099b8:	2b2d      	cmp	r3, #45	; 0x2d
 80099ba:	d02e      	beq.n	8009a1a <__gethex+0x146>
 80099bc:	1c71      	adds	r1, r6, #1
 80099be:	f04f 0900 	mov.w	r9, #0
 80099c2:	7808      	ldrb	r0, [r1, #0]
 80099c4:	f7ff ff71 	bl	80098aa <__hexdig_fun>
 80099c8:	1e43      	subs	r3, r0, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b18      	cmp	r3, #24
 80099ce:	d82c      	bhi.n	8009a2a <__gethex+0x156>
 80099d0:	f1a0 0210 	sub.w	r2, r0, #16
 80099d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099d8:	f7ff ff67 	bl	80098aa <__hexdig_fun>
 80099dc:	1e43      	subs	r3, r0, #1
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b18      	cmp	r3, #24
 80099e2:	d91d      	bls.n	8009a20 <__gethex+0x14c>
 80099e4:	f1b9 0f00 	cmp.w	r9, #0
 80099e8:	d000      	beq.n	80099ec <__gethex+0x118>
 80099ea:	4252      	negs	r2, r2
 80099ec:	4415      	add	r5, r2
 80099ee:	f8cb 1000 	str.w	r1, [fp]
 80099f2:	b1e4      	cbz	r4, 8009a2e <__gethex+0x15a>
 80099f4:	9b00      	ldr	r3, [sp, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bf14      	ite	ne
 80099fa:	2700      	movne	r7, #0
 80099fc:	2706      	moveq	r7, #6
 80099fe:	4638      	mov	r0, r7
 8009a00:	b009      	add	sp, #36	; 0x24
 8009a02:	ecbd 8b02 	vpop	{d8}
 8009a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0a:	463e      	mov	r6, r7
 8009a0c:	4625      	mov	r5, r4
 8009a0e:	2401      	movs	r4, #1
 8009a10:	e7ca      	b.n	80099a8 <__gethex+0xd4>
 8009a12:	f04f 0900 	mov.w	r9, #0
 8009a16:	1cb1      	adds	r1, r6, #2
 8009a18:	e7d3      	b.n	80099c2 <__gethex+0xee>
 8009a1a:	f04f 0901 	mov.w	r9, #1
 8009a1e:	e7fa      	b.n	8009a16 <__gethex+0x142>
 8009a20:	230a      	movs	r3, #10
 8009a22:	fb03 0202 	mla	r2, r3, r2, r0
 8009a26:	3a10      	subs	r2, #16
 8009a28:	e7d4      	b.n	80099d4 <__gethex+0x100>
 8009a2a:	4631      	mov	r1, r6
 8009a2c:	e7df      	b.n	80099ee <__gethex+0x11a>
 8009a2e:	1bf3      	subs	r3, r6, r7
 8009a30:	3b01      	subs	r3, #1
 8009a32:	4621      	mov	r1, r4
 8009a34:	2b07      	cmp	r3, #7
 8009a36:	dc0b      	bgt.n	8009a50 <__gethex+0x17c>
 8009a38:	ee18 0a10 	vmov	r0, s16
 8009a3c:	f000 fae6 	bl	800a00c <_Balloc>
 8009a40:	4604      	mov	r4, r0
 8009a42:	b940      	cbnz	r0, 8009a56 <__gethex+0x182>
 8009a44:	4b65      	ldr	r3, [pc, #404]	; (8009bdc <__gethex+0x308>)
 8009a46:	4602      	mov	r2, r0
 8009a48:	21de      	movs	r1, #222	; 0xde
 8009a4a:	4865      	ldr	r0, [pc, #404]	; (8009be0 <__gethex+0x30c>)
 8009a4c:	f001 fb94 	bl	800b178 <__assert_func>
 8009a50:	3101      	adds	r1, #1
 8009a52:	105b      	asrs	r3, r3, #1
 8009a54:	e7ee      	b.n	8009a34 <__gethex+0x160>
 8009a56:	f100 0914 	add.w	r9, r0, #20
 8009a5a:	f04f 0b00 	mov.w	fp, #0
 8009a5e:	f1ca 0301 	rsb	r3, sl, #1
 8009a62:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a66:	f8cd b000 	str.w	fp, [sp]
 8009a6a:	9306      	str	r3, [sp, #24]
 8009a6c:	42b7      	cmp	r7, r6
 8009a6e:	d340      	bcc.n	8009af2 <__gethex+0x21e>
 8009a70:	9802      	ldr	r0, [sp, #8]
 8009a72:	9b00      	ldr	r3, [sp, #0]
 8009a74:	f840 3b04 	str.w	r3, [r0], #4
 8009a78:	eba0 0009 	sub.w	r0, r0, r9
 8009a7c:	1080      	asrs	r0, r0, #2
 8009a7e:	0146      	lsls	r6, r0, #5
 8009a80:	6120      	str	r0, [r4, #16]
 8009a82:	4618      	mov	r0, r3
 8009a84:	f000 fbb8 	bl	800a1f8 <__hi0bits>
 8009a88:	1a30      	subs	r0, r6, r0
 8009a8a:	f8d8 6000 	ldr.w	r6, [r8]
 8009a8e:	42b0      	cmp	r0, r6
 8009a90:	dd63      	ble.n	8009b5a <__gethex+0x286>
 8009a92:	1b87      	subs	r7, r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	4620      	mov	r0, r4
 8009a98:	f000 ff52 	bl	800a940 <__any_on>
 8009a9c:	4682      	mov	sl, r0
 8009a9e:	b1a8      	cbz	r0, 8009acc <__gethex+0x1f8>
 8009aa0:	1e7b      	subs	r3, r7, #1
 8009aa2:	1159      	asrs	r1, r3, #5
 8009aa4:	f003 021f 	and.w	r2, r3, #31
 8009aa8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009aac:	f04f 0a01 	mov.w	sl, #1
 8009ab0:	fa0a f202 	lsl.w	r2, sl, r2
 8009ab4:	420a      	tst	r2, r1
 8009ab6:	d009      	beq.n	8009acc <__gethex+0x1f8>
 8009ab8:	4553      	cmp	r3, sl
 8009aba:	dd05      	ble.n	8009ac8 <__gethex+0x1f4>
 8009abc:	1eb9      	subs	r1, r7, #2
 8009abe:	4620      	mov	r0, r4
 8009ac0:	f000 ff3e 	bl	800a940 <__any_on>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d145      	bne.n	8009b54 <__gethex+0x280>
 8009ac8:	f04f 0a02 	mov.w	sl, #2
 8009acc:	4639      	mov	r1, r7
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f7ff fe99 	bl	8009806 <rshift>
 8009ad4:	443d      	add	r5, r7
 8009ad6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ada:	42ab      	cmp	r3, r5
 8009adc:	da4c      	bge.n	8009b78 <__gethex+0x2a4>
 8009ade:	ee18 0a10 	vmov	r0, s16
 8009ae2:	4621      	mov	r1, r4
 8009ae4:	f000 fad2 	bl	800a08c <_Bfree>
 8009ae8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009aea:	2300      	movs	r3, #0
 8009aec:	6013      	str	r3, [r2, #0]
 8009aee:	27a3      	movs	r7, #163	; 0xa3
 8009af0:	e785      	b.n	80099fe <__gethex+0x12a>
 8009af2:	1e73      	subs	r3, r6, #1
 8009af4:	9a05      	ldr	r2, [sp, #20]
 8009af6:	9303      	str	r3, [sp, #12]
 8009af8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d019      	beq.n	8009b34 <__gethex+0x260>
 8009b00:	f1bb 0f20 	cmp.w	fp, #32
 8009b04:	d107      	bne.n	8009b16 <__gethex+0x242>
 8009b06:	9b02      	ldr	r3, [sp, #8]
 8009b08:	9a00      	ldr	r2, [sp, #0]
 8009b0a:	f843 2b04 	str.w	r2, [r3], #4
 8009b0e:	9302      	str	r3, [sp, #8]
 8009b10:	2300      	movs	r3, #0
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	469b      	mov	fp, r3
 8009b16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b1a:	f7ff fec6 	bl	80098aa <__hexdig_fun>
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	f000 000f 	and.w	r0, r0, #15
 8009b24:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b28:	4303      	orrs	r3, r0
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	f10b 0b04 	add.w	fp, fp, #4
 8009b30:	9b03      	ldr	r3, [sp, #12]
 8009b32:	e00d      	b.n	8009b50 <__gethex+0x27c>
 8009b34:	9b03      	ldr	r3, [sp, #12]
 8009b36:	9a06      	ldr	r2, [sp, #24]
 8009b38:	4413      	add	r3, r2
 8009b3a:	42bb      	cmp	r3, r7
 8009b3c:	d3e0      	bcc.n	8009b00 <__gethex+0x22c>
 8009b3e:	4618      	mov	r0, r3
 8009b40:	9901      	ldr	r1, [sp, #4]
 8009b42:	9307      	str	r3, [sp, #28]
 8009b44:	4652      	mov	r2, sl
 8009b46:	f001 fae6 	bl	800b116 <strncmp>
 8009b4a:	9b07      	ldr	r3, [sp, #28]
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1d7      	bne.n	8009b00 <__gethex+0x22c>
 8009b50:	461e      	mov	r6, r3
 8009b52:	e78b      	b.n	8009a6c <__gethex+0x198>
 8009b54:	f04f 0a03 	mov.w	sl, #3
 8009b58:	e7b8      	b.n	8009acc <__gethex+0x1f8>
 8009b5a:	da0a      	bge.n	8009b72 <__gethex+0x29e>
 8009b5c:	1a37      	subs	r7, r6, r0
 8009b5e:	4621      	mov	r1, r4
 8009b60:	ee18 0a10 	vmov	r0, s16
 8009b64:	463a      	mov	r2, r7
 8009b66:	f000 fcad 	bl	800a4c4 <__lshift>
 8009b6a:	1bed      	subs	r5, r5, r7
 8009b6c:	4604      	mov	r4, r0
 8009b6e:	f100 0914 	add.w	r9, r0, #20
 8009b72:	f04f 0a00 	mov.w	sl, #0
 8009b76:	e7ae      	b.n	8009ad6 <__gethex+0x202>
 8009b78:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b7c:	42a8      	cmp	r0, r5
 8009b7e:	dd72      	ble.n	8009c66 <__gethex+0x392>
 8009b80:	1b45      	subs	r5, r0, r5
 8009b82:	42ae      	cmp	r6, r5
 8009b84:	dc36      	bgt.n	8009bf4 <__gethex+0x320>
 8009b86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d02a      	beq.n	8009be4 <__gethex+0x310>
 8009b8e:	2b03      	cmp	r3, #3
 8009b90:	d02c      	beq.n	8009bec <__gethex+0x318>
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d115      	bne.n	8009bc2 <__gethex+0x2ee>
 8009b96:	42ae      	cmp	r6, r5
 8009b98:	d113      	bne.n	8009bc2 <__gethex+0x2ee>
 8009b9a:	2e01      	cmp	r6, #1
 8009b9c:	d10b      	bne.n	8009bb6 <__gethex+0x2e2>
 8009b9e:	9a04      	ldr	r2, [sp, #16]
 8009ba0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ba4:	6013      	str	r3, [r2, #0]
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	6123      	str	r3, [r4, #16]
 8009baa:	f8c9 3000 	str.w	r3, [r9]
 8009bae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009bb0:	2762      	movs	r7, #98	; 0x62
 8009bb2:	601c      	str	r4, [r3, #0]
 8009bb4:	e723      	b.n	80099fe <__gethex+0x12a>
 8009bb6:	1e71      	subs	r1, r6, #1
 8009bb8:	4620      	mov	r0, r4
 8009bba:	f000 fec1 	bl	800a940 <__any_on>
 8009bbe:	2800      	cmp	r0, #0
 8009bc0:	d1ed      	bne.n	8009b9e <__gethex+0x2ca>
 8009bc2:	ee18 0a10 	vmov	r0, s16
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	f000 fa60 	bl	800a08c <_Bfree>
 8009bcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bce:	2300      	movs	r3, #0
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	2750      	movs	r7, #80	; 0x50
 8009bd4:	e713      	b.n	80099fe <__gethex+0x12a>
 8009bd6:	bf00      	nop
 8009bd8:	0800c494 	.word	0x0800c494
 8009bdc:	0800c3b4 	.word	0x0800c3b4
 8009be0:	0800c428 	.word	0x0800c428
 8009be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1eb      	bne.n	8009bc2 <__gethex+0x2ee>
 8009bea:	e7d8      	b.n	8009b9e <__gethex+0x2ca>
 8009bec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d1d5      	bne.n	8009b9e <__gethex+0x2ca>
 8009bf2:	e7e6      	b.n	8009bc2 <__gethex+0x2ee>
 8009bf4:	1e6f      	subs	r7, r5, #1
 8009bf6:	f1ba 0f00 	cmp.w	sl, #0
 8009bfa:	d131      	bne.n	8009c60 <__gethex+0x38c>
 8009bfc:	b127      	cbz	r7, 8009c08 <__gethex+0x334>
 8009bfe:	4639      	mov	r1, r7
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 fe9d 	bl	800a940 <__any_on>
 8009c06:	4682      	mov	sl, r0
 8009c08:	117b      	asrs	r3, r7, #5
 8009c0a:	2101      	movs	r1, #1
 8009c0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c10:	f007 071f 	and.w	r7, r7, #31
 8009c14:	fa01 f707 	lsl.w	r7, r1, r7
 8009c18:	421f      	tst	r7, r3
 8009c1a:	4629      	mov	r1, r5
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	bf18      	it	ne
 8009c20:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c24:	1b76      	subs	r6, r6, r5
 8009c26:	f7ff fdee 	bl	8009806 <rshift>
 8009c2a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c2e:	2702      	movs	r7, #2
 8009c30:	f1ba 0f00 	cmp.w	sl, #0
 8009c34:	d048      	beq.n	8009cc8 <__gethex+0x3f4>
 8009c36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d015      	beq.n	8009c6a <__gethex+0x396>
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d017      	beq.n	8009c72 <__gethex+0x39e>
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d109      	bne.n	8009c5a <__gethex+0x386>
 8009c46:	f01a 0f02 	tst.w	sl, #2
 8009c4a:	d006      	beq.n	8009c5a <__gethex+0x386>
 8009c4c:	f8d9 0000 	ldr.w	r0, [r9]
 8009c50:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c54:	f01a 0f01 	tst.w	sl, #1
 8009c58:	d10e      	bne.n	8009c78 <__gethex+0x3a4>
 8009c5a:	f047 0710 	orr.w	r7, r7, #16
 8009c5e:	e033      	b.n	8009cc8 <__gethex+0x3f4>
 8009c60:	f04f 0a01 	mov.w	sl, #1
 8009c64:	e7d0      	b.n	8009c08 <__gethex+0x334>
 8009c66:	2701      	movs	r7, #1
 8009c68:	e7e2      	b.n	8009c30 <__gethex+0x35c>
 8009c6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c6c:	f1c3 0301 	rsb	r3, r3, #1
 8009c70:	9315      	str	r3, [sp, #84]	; 0x54
 8009c72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d0f0      	beq.n	8009c5a <__gethex+0x386>
 8009c78:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c7c:	f104 0314 	add.w	r3, r4, #20
 8009c80:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c84:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c88:	f04f 0c00 	mov.w	ip, #0
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c92:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c96:	d01c      	beq.n	8009cd2 <__gethex+0x3fe>
 8009c98:	3201      	adds	r2, #1
 8009c9a:	6002      	str	r2, [r0, #0]
 8009c9c:	2f02      	cmp	r7, #2
 8009c9e:	f104 0314 	add.w	r3, r4, #20
 8009ca2:	d13f      	bne.n	8009d24 <__gethex+0x450>
 8009ca4:	f8d8 2000 	ldr.w	r2, [r8]
 8009ca8:	3a01      	subs	r2, #1
 8009caa:	42b2      	cmp	r2, r6
 8009cac:	d10a      	bne.n	8009cc4 <__gethex+0x3f0>
 8009cae:	1171      	asrs	r1, r6, #5
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009cb6:	f006 061f 	and.w	r6, r6, #31
 8009cba:	fa02 f606 	lsl.w	r6, r2, r6
 8009cbe:	421e      	tst	r6, r3
 8009cc0:	bf18      	it	ne
 8009cc2:	4617      	movne	r7, r2
 8009cc4:	f047 0720 	orr.w	r7, r7, #32
 8009cc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cca:	601c      	str	r4, [r3, #0]
 8009ccc:	9b04      	ldr	r3, [sp, #16]
 8009cce:	601d      	str	r5, [r3, #0]
 8009cd0:	e695      	b.n	80099fe <__gethex+0x12a>
 8009cd2:	4299      	cmp	r1, r3
 8009cd4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cd8:	d8d8      	bhi.n	8009c8c <__gethex+0x3b8>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	459b      	cmp	fp, r3
 8009cde:	db19      	blt.n	8009d14 <__gethex+0x440>
 8009ce0:	6861      	ldr	r1, [r4, #4]
 8009ce2:	ee18 0a10 	vmov	r0, s16
 8009ce6:	3101      	adds	r1, #1
 8009ce8:	f000 f990 	bl	800a00c <_Balloc>
 8009cec:	4681      	mov	r9, r0
 8009cee:	b918      	cbnz	r0, 8009cf8 <__gethex+0x424>
 8009cf0:	4b1a      	ldr	r3, [pc, #104]	; (8009d5c <__gethex+0x488>)
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	2184      	movs	r1, #132	; 0x84
 8009cf6:	e6a8      	b.n	8009a4a <__gethex+0x176>
 8009cf8:	6922      	ldr	r2, [r4, #16]
 8009cfa:	3202      	adds	r2, #2
 8009cfc:	f104 010c 	add.w	r1, r4, #12
 8009d00:	0092      	lsls	r2, r2, #2
 8009d02:	300c      	adds	r0, #12
 8009d04:	f000 f974 	bl	8009ff0 <memcpy>
 8009d08:	4621      	mov	r1, r4
 8009d0a:	ee18 0a10 	vmov	r0, s16
 8009d0e:	f000 f9bd 	bl	800a08c <_Bfree>
 8009d12:	464c      	mov	r4, r9
 8009d14:	6923      	ldr	r3, [r4, #16]
 8009d16:	1c5a      	adds	r2, r3, #1
 8009d18:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d1c:	6122      	str	r2, [r4, #16]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	615a      	str	r2, [r3, #20]
 8009d22:	e7bb      	b.n	8009c9c <__gethex+0x3c8>
 8009d24:	6922      	ldr	r2, [r4, #16]
 8009d26:	455a      	cmp	r2, fp
 8009d28:	dd0b      	ble.n	8009d42 <__gethex+0x46e>
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f7ff fd6a 	bl	8009806 <rshift>
 8009d32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d36:	3501      	adds	r5, #1
 8009d38:	42ab      	cmp	r3, r5
 8009d3a:	f6ff aed0 	blt.w	8009ade <__gethex+0x20a>
 8009d3e:	2701      	movs	r7, #1
 8009d40:	e7c0      	b.n	8009cc4 <__gethex+0x3f0>
 8009d42:	f016 061f 	ands.w	r6, r6, #31
 8009d46:	d0fa      	beq.n	8009d3e <__gethex+0x46a>
 8009d48:	449a      	add	sl, r3
 8009d4a:	f1c6 0620 	rsb	r6, r6, #32
 8009d4e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009d52:	f000 fa51 	bl	800a1f8 <__hi0bits>
 8009d56:	42b0      	cmp	r0, r6
 8009d58:	dbe7      	blt.n	8009d2a <__gethex+0x456>
 8009d5a:	e7f0      	b.n	8009d3e <__gethex+0x46a>
 8009d5c:	0800c3b4 	.word	0x0800c3b4

08009d60 <L_shift>:
 8009d60:	f1c2 0208 	rsb	r2, r2, #8
 8009d64:	0092      	lsls	r2, r2, #2
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	f1c2 0620 	rsb	r6, r2, #32
 8009d6c:	6843      	ldr	r3, [r0, #4]
 8009d6e:	6804      	ldr	r4, [r0, #0]
 8009d70:	fa03 f506 	lsl.w	r5, r3, r6
 8009d74:	432c      	orrs	r4, r5
 8009d76:	40d3      	lsrs	r3, r2
 8009d78:	6004      	str	r4, [r0, #0]
 8009d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d7e:	4288      	cmp	r0, r1
 8009d80:	d3f4      	bcc.n	8009d6c <L_shift+0xc>
 8009d82:	bd70      	pop	{r4, r5, r6, pc}

08009d84 <__match>:
 8009d84:	b530      	push	{r4, r5, lr}
 8009d86:	6803      	ldr	r3, [r0, #0]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8e:	b914      	cbnz	r4, 8009d96 <__match+0x12>
 8009d90:	6003      	str	r3, [r0, #0]
 8009d92:	2001      	movs	r0, #1
 8009d94:	bd30      	pop	{r4, r5, pc}
 8009d96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d9e:	2d19      	cmp	r5, #25
 8009da0:	bf98      	it	ls
 8009da2:	3220      	addls	r2, #32
 8009da4:	42a2      	cmp	r2, r4
 8009da6:	d0f0      	beq.n	8009d8a <__match+0x6>
 8009da8:	2000      	movs	r0, #0
 8009daa:	e7f3      	b.n	8009d94 <__match+0x10>

08009dac <__hexnan>:
 8009dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db0:	680b      	ldr	r3, [r1, #0]
 8009db2:	6801      	ldr	r1, [r0, #0]
 8009db4:	115e      	asrs	r6, r3, #5
 8009db6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009dba:	f013 031f 	ands.w	r3, r3, #31
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	bf18      	it	ne
 8009dc2:	3604      	addne	r6, #4
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	1f37      	subs	r7, r6, #4
 8009dc8:	4682      	mov	sl, r0
 8009dca:	4690      	mov	r8, r2
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dd2:	46b9      	mov	r9, r7
 8009dd4:	463c      	mov	r4, r7
 8009dd6:	9502      	str	r5, [sp, #8]
 8009dd8:	46ab      	mov	fp, r5
 8009dda:	784a      	ldrb	r2, [r1, #1]
 8009ddc:	1c4b      	adds	r3, r1, #1
 8009dde:	9303      	str	r3, [sp, #12]
 8009de0:	b342      	cbz	r2, 8009e34 <__hexnan+0x88>
 8009de2:	4610      	mov	r0, r2
 8009de4:	9105      	str	r1, [sp, #20]
 8009de6:	9204      	str	r2, [sp, #16]
 8009de8:	f7ff fd5f 	bl	80098aa <__hexdig_fun>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d14f      	bne.n	8009e90 <__hexnan+0xe4>
 8009df0:	9a04      	ldr	r2, [sp, #16]
 8009df2:	9905      	ldr	r1, [sp, #20]
 8009df4:	2a20      	cmp	r2, #32
 8009df6:	d818      	bhi.n	8009e2a <__hexnan+0x7e>
 8009df8:	9b02      	ldr	r3, [sp, #8]
 8009dfa:	459b      	cmp	fp, r3
 8009dfc:	dd13      	ble.n	8009e26 <__hexnan+0x7a>
 8009dfe:	454c      	cmp	r4, r9
 8009e00:	d206      	bcs.n	8009e10 <__hexnan+0x64>
 8009e02:	2d07      	cmp	r5, #7
 8009e04:	dc04      	bgt.n	8009e10 <__hexnan+0x64>
 8009e06:	462a      	mov	r2, r5
 8009e08:	4649      	mov	r1, r9
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff ffa8 	bl	8009d60 <L_shift>
 8009e10:	4544      	cmp	r4, r8
 8009e12:	d950      	bls.n	8009eb6 <__hexnan+0x10a>
 8009e14:	2300      	movs	r3, #0
 8009e16:	f1a4 0904 	sub.w	r9, r4, #4
 8009e1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e1e:	f8cd b008 	str.w	fp, [sp, #8]
 8009e22:	464c      	mov	r4, r9
 8009e24:	461d      	mov	r5, r3
 8009e26:	9903      	ldr	r1, [sp, #12]
 8009e28:	e7d7      	b.n	8009dda <__hexnan+0x2e>
 8009e2a:	2a29      	cmp	r2, #41	; 0x29
 8009e2c:	d156      	bne.n	8009edc <__hexnan+0x130>
 8009e2e:	3102      	adds	r1, #2
 8009e30:	f8ca 1000 	str.w	r1, [sl]
 8009e34:	f1bb 0f00 	cmp.w	fp, #0
 8009e38:	d050      	beq.n	8009edc <__hexnan+0x130>
 8009e3a:	454c      	cmp	r4, r9
 8009e3c:	d206      	bcs.n	8009e4c <__hexnan+0xa0>
 8009e3e:	2d07      	cmp	r5, #7
 8009e40:	dc04      	bgt.n	8009e4c <__hexnan+0xa0>
 8009e42:	462a      	mov	r2, r5
 8009e44:	4649      	mov	r1, r9
 8009e46:	4620      	mov	r0, r4
 8009e48:	f7ff ff8a 	bl	8009d60 <L_shift>
 8009e4c:	4544      	cmp	r4, r8
 8009e4e:	d934      	bls.n	8009eba <__hexnan+0x10e>
 8009e50:	f1a8 0204 	sub.w	r2, r8, #4
 8009e54:	4623      	mov	r3, r4
 8009e56:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e5a:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e5e:	429f      	cmp	r7, r3
 8009e60:	d2f9      	bcs.n	8009e56 <__hexnan+0xaa>
 8009e62:	1b3b      	subs	r3, r7, r4
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	3304      	adds	r3, #4
 8009e6a:	3401      	adds	r4, #1
 8009e6c:	3e03      	subs	r6, #3
 8009e6e:	42b4      	cmp	r4, r6
 8009e70:	bf88      	it	hi
 8009e72:	2304      	movhi	r3, #4
 8009e74:	4443      	add	r3, r8
 8009e76:	2200      	movs	r2, #0
 8009e78:	f843 2b04 	str.w	r2, [r3], #4
 8009e7c:	429f      	cmp	r7, r3
 8009e7e:	d2fb      	bcs.n	8009e78 <__hexnan+0xcc>
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	b91b      	cbnz	r3, 8009e8c <__hexnan+0xe0>
 8009e84:	4547      	cmp	r7, r8
 8009e86:	d127      	bne.n	8009ed8 <__hexnan+0x12c>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	603b      	str	r3, [r7, #0]
 8009e8c:	2005      	movs	r0, #5
 8009e8e:	e026      	b.n	8009ede <__hexnan+0x132>
 8009e90:	3501      	adds	r5, #1
 8009e92:	2d08      	cmp	r5, #8
 8009e94:	f10b 0b01 	add.w	fp, fp, #1
 8009e98:	dd06      	ble.n	8009ea8 <__hexnan+0xfc>
 8009e9a:	4544      	cmp	r4, r8
 8009e9c:	d9c3      	bls.n	8009e26 <__hexnan+0x7a>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ea4:	2501      	movs	r5, #1
 8009ea6:	3c04      	subs	r4, #4
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	f000 000f 	and.w	r0, r0, #15
 8009eae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009eb2:	6022      	str	r2, [r4, #0]
 8009eb4:	e7b7      	b.n	8009e26 <__hexnan+0x7a>
 8009eb6:	2508      	movs	r5, #8
 8009eb8:	e7b5      	b.n	8009e26 <__hexnan+0x7a>
 8009eba:	9b01      	ldr	r3, [sp, #4]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d0df      	beq.n	8009e80 <__hexnan+0xd4>
 8009ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ec4:	f1c3 0320 	rsb	r3, r3, #32
 8009ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8009ecc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ed0:	401a      	ands	r2, r3
 8009ed2:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ed6:	e7d3      	b.n	8009e80 <__hexnan+0xd4>
 8009ed8:	3f04      	subs	r7, #4
 8009eda:	e7d1      	b.n	8009e80 <__hexnan+0xd4>
 8009edc:	2004      	movs	r0, #4
 8009ede:	b007      	add	sp, #28
 8009ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ee4 <_localeconv_r>:
 8009ee4:	4800      	ldr	r0, [pc, #0]	; (8009ee8 <_localeconv_r+0x4>)
 8009ee6:	4770      	bx	lr
 8009ee8:	200003ec 	.word	0x200003ec

08009eec <__retarget_lock_init_recursive>:
 8009eec:	4770      	bx	lr

08009eee <__retarget_lock_acquire_recursive>:
 8009eee:	4770      	bx	lr

08009ef0 <__retarget_lock_release_recursive>:
 8009ef0:	4770      	bx	lr

08009ef2 <__swhatbuf_r>:
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efa:	2900      	cmp	r1, #0
 8009efc:	b096      	sub	sp, #88	; 0x58
 8009efe:	4614      	mov	r4, r2
 8009f00:	461d      	mov	r5, r3
 8009f02:	da07      	bge.n	8009f14 <__swhatbuf_r+0x22>
 8009f04:	2300      	movs	r3, #0
 8009f06:	602b      	str	r3, [r5, #0]
 8009f08:	89b3      	ldrh	r3, [r6, #12]
 8009f0a:	061a      	lsls	r2, r3, #24
 8009f0c:	d410      	bmi.n	8009f30 <__swhatbuf_r+0x3e>
 8009f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f12:	e00e      	b.n	8009f32 <__swhatbuf_r+0x40>
 8009f14:	466a      	mov	r2, sp
 8009f16:	f001 f96f 	bl	800b1f8 <_fstat_r>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	dbf2      	blt.n	8009f04 <__swhatbuf_r+0x12>
 8009f1e:	9a01      	ldr	r2, [sp, #4]
 8009f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009f28:	425a      	negs	r2, r3
 8009f2a:	415a      	adcs	r2, r3
 8009f2c:	602a      	str	r2, [r5, #0]
 8009f2e:	e7ee      	b.n	8009f0e <__swhatbuf_r+0x1c>
 8009f30:	2340      	movs	r3, #64	; 0x40
 8009f32:	2000      	movs	r0, #0
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	b016      	add	sp, #88	; 0x58
 8009f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f3c <__smakebuf_r>:
 8009f3c:	898b      	ldrh	r3, [r1, #12]
 8009f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f40:	079d      	lsls	r5, r3, #30
 8009f42:	4606      	mov	r6, r0
 8009f44:	460c      	mov	r4, r1
 8009f46:	d507      	bpl.n	8009f58 <__smakebuf_r+0x1c>
 8009f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f4c:	6023      	str	r3, [r4, #0]
 8009f4e:	6123      	str	r3, [r4, #16]
 8009f50:	2301      	movs	r3, #1
 8009f52:	6163      	str	r3, [r4, #20]
 8009f54:	b002      	add	sp, #8
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	ab01      	add	r3, sp, #4
 8009f5a:	466a      	mov	r2, sp
 8009f5c:	f7ff ffc9 	bl	8009ef2 <__swhatbuf_r>
 8009f60:	9900      	ldr	r1, [sp, #0]
 8009f62:	4605      	mov	r5, r0
 8009f64:	4630      	mov	r0, r6
 8009f66:	f000 fd6b 	bl	800aa40 <_malloc_r>
 8009f6a:	b948      	cbnz	r0, 8009f80 <__smakebuf_r+0x44>
 8009f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f70:	059a      	lsls	r2, r3, #22
 8009f72:	d4ef      	bmi.n	8009f54 <__smakebuf_r+0x18>
 8009f74:	f023 0303 	bic.w	r3, r3, #3
 8009f78:	f043 0302 	orr.w	r3, r3, #2
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	e7e3      	b.n	8009f48 <__smakebuf_r+0xc>
 8009f80:	4b0d      	ldr	r3, [pc, #52]	; (8009fb8 <__smakebuf_r+0x7c>)
 8009f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f84:	89a3      	ldrh	r3, [r4, #12]
 8009f86:	6020      	str	r0, [r4, #0]
 8009f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	9b00      	ldr	r3, [sp, #0]
 8009f90:	6163      	str	r3, [r4, #20]
 8009f92:	9b01      	ldr	r3, [sp, #4]
 8009f94:	6120      	str	r0, [r4, #16]
 8009f96:	b15b      	cbz	r3, 8009fb0 <__smakebuf_r+0x74>
 8009f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f9c:	4630      	mov	r0, r6
 8009f9e:	f001 f93d 	bl	800b21c <_isatty_r>
 8009fa2:	b128      	cbz	r0, 8009fb0 <__smakebuf_r+0x74>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	f023 0303 	bic.w	r3, r3, #3
 8009faa:	f043 0301 	orr.w	r3, r3, #1
 8009fae:	81a3      	strh	r3, [r4, #12]
 8009fb0:	89a0      	ldrh	r0, [r4, #12]
 8009fb2:	4305      	orrs	r5, r0
 8009fb4:	81a5      	strh	r5, [r4, #12]
 8009fb6:	e7cd      	b.n	8009f54 <__smakebuf_r+0x18>
 8009fb8:	08009665 	.word	0x08009665

08009fbc <malloc>:
 8009fbc:	4b02      	ldr	r3, [pc, #8]	; (8009fc8 <malloc+0xc>)
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	6818      	ldr	r0, [r3, #0]
 8009fc2:	f000 bd3d 	b.w	800aa40 <_malloc_r>
 8009fc6:	bf00      	nop
 8009fc8:	20000294 	.word	0x20000294

08009fcc <__ascii_mbtowc>:
 8009fcc:	b082      	sub	sp, #8
 8009fce:	b901      	cbnz	r1, 8009fd2 <__ascii_mbtowc+0x6>
 8009fd0:	a901      	add	r1, sp, #4
 8009fd2:	b142      	cbz	r2, 8009fe6 <__ascii_mbtowc+0x1a>
 8009fd4:	b14b      	cbz	r3, 8009fea <__ascii_mbtowc+0x1e>
 8009fd6:	7813      	ldrb	r3, [r2, #0]
 8009fd8:	600b      	str	r3, [r1, #0]
 8009fda:	7812      	ldrb	r2, [r2, #0]
 8009fdc:	1e10      	subs	r0, r2, #0
 8009fde:	bf18      	it	ne
 8009fe0:	2001      	movne	r0, #1
 8009fe2:	b002      	add	sp, #8
 8009fe4:	4770      	bx	lr
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	e7fb      	b.n	8009fe2 <__ascii_mbtowc+0x16>
 8009fea:	f06f 0001 	mvn.w	r0, #1
 8009fee:	e7f8      	b.n	8009fe2 <__ascii_mbtowc+0x16>

08009ff0 <memcpy>:
 8009ff0:	440a      	add	r2, r1
 8009ff2:	4291      	cmp	r1, r2
 8009ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff8:	d100      	bne.n	8009ffc <memcpy+0xc>
 8009ffa:	4770      	bx	lr
 8009ffc:	b510      	push	{r4, lr}
 8009ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a002:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a006:	4291      	cmp	r1, r2
 800a008:	d1f9      	bne.n	8009ffe <memcpy+0xe>
 800a00a:	bd10      	pop	{r4, pc}

0800a00c <_Balloc>:
 800a00c:	b570      	push	{r4, r5, r6, lr}
 800a00e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a010:	4604      	mov	r4, r0
 800a012:	460d      	mov	r5, r1
 800a014:	b976      	cbnz	r6, 800a034 <_Balloc+0x28>
 800a016:	2010      	movs	r0, #16
 800a018:	f7ff ffd0 	bl	8009fbc <malloc>
 800a01c:	4602      	mov	r2, r0
 800a01e:	6260      	str	r0, [r4, #36]	; 0x24
 800a020:	b920      	cbnz	r0, 800a02c <_Balloc+0x20>
 800a022:	4b18      	ldr	r3, [pc, #96]	; (800a084 <_Balloc+0x78>)
 800a024:	4818      	ldr	r0, [pc, #96]	; (800a088 <_Balloc+0x7c>)
 800a026:	2166      	movs	r1, #102	; 0x66
 800a028:	f001 f8a6 	bl	800b178 <__assert_func>
 800a02c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a030:	6006      	str	r6, [r0, #0]
 800a032:	60c6      	str	r6, [r0, #12]
 800a034:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a036:	68f3      	ldr	r3, [r6, #12]
 800a038:	b183      	cbz	r3, 800a05c <_Balloc+0x50>
 800a03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a042:	b9b8      	cbnz	r0, 800a074 <_Balloc+0x68>
 800a044:	2101      	movs	r1, #1
 800a046:	fa01 f605 	lsl.w	r6, r1, r5
 800a04a:	1d72      	adds	r2, r6, #5
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	4620      	mov	r0, r4
 800a050:	f000 fc97 	bl	800a982 <_calloc_r>
 800a054:	b160      	cbz	r0, 800a070 <_Balloc+0x64>
 800a056:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a05a:	e00e      	b.n	800a07a <_Balloc+0x6e>
 800a05c:	2221      	movs	r2, #33	; 0x21
 800a05e:	2104      	movs	r1, #4
 800a060:	4620      	mov	r0, r4
 800a062:	f000 fc8e 	bl	800a982 <_calloc_r>
 800a066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a068:	60f0      	str	r0, [r6, #12]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e4      	bne.n	800a03a <_Balloc+0x2e>
 800a070:	2000      	movs	r0, #0
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	6802      	ldr	r2, [r0, #0]
 800a076:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a07a:	2300      	movs	r3, #0
 800a07c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a080:	e7f7      	b.n	800a072 <_Balloc+0x66>
 800a082:	bf00      	nop
 800a084:	0800c33e 	.word	0x0800c33e
 800a088:	0800c4a8 	.word	0x0800c4a8

0800a08c <_Bfree>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a090:	4605      	mov	r5, r0
 800a092:	460c      	mov	r4, r1
 800a094:	b976      	cbnz	r6, 800a0b4 <_Bfree+0x28>
 800a096:	2010      	movs	r0, #16
 800a098:	f7ff ff90 	bl	8009fbc <malloc>
 800a09c:	4602      	mov	r2, r0
 800a09e:	6268      	str	r0, [r5, #36]	; 0x24
 800a0a0:	b920      	cbnz	r0, 800a0ac <_Bfree+0x20>
 800a0a2:	4b09      	ldr	r3, [pc, #36]	; (800a0c8 <_Bfree+0x3c>)
 800a0a4:	4809      	ldr	r0, [pc, #36]	; (800a0cc <_Bfree+0x40>)
 800a0a6:	218a      	movs	r1, #138	; 0x8a
 800a0a8:	f001 f866 	bl	800b178 <__assert_func>
 800a0ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0b0:	6006      	str	r6, [r0, #0]
 800a0b2:	60c6      	str	r6, [r0, #12]
 800a0b4:	b13c      	cbz	r4, 800a0c6 <_Bfree+0x3a>
 800a0b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a0b8:	6862      	ldr	r2, [r4, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0c0:	6021      	str	r1, [r4, #0]
 800a0c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a0c6:	bd70      	pop	{r4, r5, r6, pc}
 800a0c8:	0800c33e 	.word	0x0800c33e
 800a0cc:	0800c4a8 	.word	0x0800c4a8

0800a0d0 <__multadd>:
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	690e      	ldr	r6, [r1, #16]
 800a0d6:	4607      	mov	r7, r0
 800a0d8:	4698      	mov	r8, r3
 800a0da:	460c      	mov	r4, r1
 800a0dc:	f101 0014 	add.w	r0, r1, #20
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6805      	ldr	r5, [r0, #0]
 800a0e4:	b2a9      	uxth	r1, r5
 800a0e6:	fb02 8101 	mla	r1, r2, r1, r8
 800a0ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a0ee:	0c2d      	lsrs	r5, r5, #16
 800a0f0:	fb02 c505 	mla	r5, r2, r5, ip
 800a0f4:	b289      	uxth	r1, r1
 800a0f6:	3301      	adds	r3, #1
 800a0f8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	f840 1b04 	str.w	r1, [r0], #4
 800a102:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a106:	dcec      	bgt.n	800a0e2 <__multadd+0x12>
 800a108:	f1b8 0f00 	cmp.w	r8, #0
 800a10c:	d022      	beq.n	800a154 <__multadd+0x84>
 800a10e:	68a3      	ldr	r3, [r4, #8]
 800a110:	42b3      	cmp	r3, r6
 800a112:	dc19      	bgt.n	800a148 <__multadd+0x78>
 800a114:	6861      	ldr	r1, [r4, #4]
 800a116:	4638      	mov	r0, r7
 800a118:	3101      	adds	r1, #1
 800a11a:	f7ff ff77 	bl	800a00c <_Balloc>
 800a11e:	4605      	mov	r5, r0
 800a120:	b928      	cbnz	r0, 800a12e <__multadd+0x5e>
 800a122:	4602      	mov	r2, r0
 800a124:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <__multadd+0x8c>)
 800a126:	480e      	ldr	r0, [pc, #56]	; (800a160 <__multadd+0x90>)
 800a128:	21b5      	movs	r1, #181	; 0xb5
 800a12a:	f001 f825 	bl	800b178 <__assert_func>
 800a12e:	6922      	ldr	r2, [r4, #16]
 800a130:	3202      	adds	r2, #2
 800a132:	f104 010c 	add.w	r1, r4, #12
 800a136:	0092      	lsls	r2, r2, #2
 800a138:	300c      	adds	r0, #12
 800a13a:	f7ff ff59 	bl	8009ff0 <memcpy>
 800a13e:	4621      	mov	r1, r4
 800a140:	4638      	mov	r0, r7
 800a142:	f7ff ffa3 	bl	800a08c <_Bfree>
 800a146:	462c      	mov	r4, r5
 800a148:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a14c:	3601      	adds	r6, #1
 800a14e:	f8c3 8014 	str.w	r8, [r3, #20]
 800a152:	6126      	str	r6, [r4, #16]
 800a154:	4620      	mov	r0, r4
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15a:	bf00      	nop
 800a15c:	0800c3b4 	.word	0x0800c3b4
 800a160:	0800c4a8 	.word	0x0800c4a8

0800a164 <__s2b>:
 800a164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a168:	460c      	mov	r4, r1
 800a16a:	4615      	mov	r5, r2
 800a16c:	461f      	mov	r7, r3
 800a16e:	2209      	movs	r2, #9
 800a170:	3308      	adds	r3, #8
 800a172:	4606      	mov	r6, r0
 800a174:	fb93 f3f2 	sdiv	r3, r3, r2
 800a178:	2100      	movs	r1, #0
 800a17a:	2201      	movs	r2, #1
 800a17c:	429a      	cmp	r2, r3
 800a17e:	db09      	blt.n	800a194 <__s2b+0x30>
 800a180:	4630      	mov	r0, r6
 800a182:	f7ff ff43 	bl	800a00c <_Balloc>
 800a186:	b940      	cbnz	r0, 800a19a <__s2b+0x36>
 800a188:	4602      	mov	r2, r0
 800a18a:	4b19      	ldr	r3, [pc, #100]	; (800a1f0 <__s2b+0x8c>)
 800a18c:	4819      	ldr	r0, [pc, #100]	; (800a1f4 <__s2b+0x90>)
 800a18e:	21ce      	movs	r1, #206	; 0xce
 800a190:	f000 fff2 	bl	800b178 <__assert_func>
 800a194:	0052      	lsls	r2, r2, #1
 800a196:	3101      	adds	r1, #1
 800a198:	e7f0      	b.n	800a17c <__s2b+0x18>
 800a19a:	9b08      	ldr	r3, [sp, #32]
 800a19c:	6143      	str	r3, [r0, #20]
 800a19e:	2d09      	cmp	r5, #9
 800a1a0:	f04f 0301 	mov.w	r3, #1
 800a1a4:	6103      	str	r3, [r0, #16]
 800a1a6:	dd16      	ble.n	800a1d6 <__s2b+0x72>
 800a1a8:	f104 0909 	add.w	r9, r4, #9
 800a1ac:	46c8      	mov	r8, r9
 800a1ae:	442c      	add	r4, r5
 800a1b0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a1b4:	4601      	mov	r1, r0
 800a1b6:	3b30      	subs	r3, #48	; 0x30
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7ff ff88 	bl	800a0d0 <__multadd>
 800a1c0:	45a0      	cmp	r8, r4
 800a1c2:	d1f5      	bne.n	800a1b0 <__s2b+0x4c>
 800a1c4:	f1a5 0408 	sub.w	r4, r5, #8
 800a1c8:	444c      	add	r4, r9
 800a1ca:	1b2d      	subs	r5, r5, r4
 800a1cc:	1963      	adds	r3, r4, r5
 800a1ce:	42bb      	cmp	r3, r7
 800a1d0:	db04      	blt.n	800a1dc <__s2b+0x78>
 800a1d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1d6:	340a      	adds	r4, #10
 800a1d8:	2509      	movs	r5, #9
 800a1da:	e7f6      	b.n	800a1ca <__s2b+0x66>
 800a1dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	3b30      	subs	r3, #48	; 0x30
 800a1e4:	220a      	movs	r2, #10
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f7ff ff72 	bl	800a0d0 <__multadd>
 800a1ec:	e7ee      	b.n	800a1cc <__s2b+0x68>
 800a1ee:	bf00      	nop
 800a1f0:	0800c3b4 	.word	0x0800c3b4
 800a1f4:	0800c4a8 	.word	0x0800c4a8

0800a1f8 <__hi0bits>:
 800a1f8:	0c03      	lsrs	r3, r0, #16
 800a1fa:	041b      	lsls	r3, r3, #16
 800a1fc:	b9d3      	cbnz	r3, 800a234 <__hi0bits+0x3c>
 800a1fe:	0400      	lsls	r0, r0, #16
 800a200:	2310      	movs	r3, #16
 800a202:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a206:	bf04      	itt	eq
 800a208:	0200      	lsleq	r0, r0, #8
 800a20a:	3308      	addeq	r3, #8
 800a20c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a210:	bf04      	itt	eq
 800a212:	0100      	lsleq	r0, r0, #4
 800a214:	3304      	addeq	r3, #4
 800a216:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a21a:	bf04      	itt	eq
 800a21c:	0080      	lsleq	r0, r0, #2
 800a21e:	3302      	addeq	r3, #2
 800a220:	2800      	cmp	r0, #0
 800a222:	db05      	blt.n	800a230 <__hi0bits+0x38>
 800a224:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a228:	f103 0301 	add.w	r3, r3, #1
 800a22c:	bf08      	it	eq
 800a22e:	2320      	moveq	r3, #32
 800a230:	4618      	mov	r0, r3
 800a232:	4770      	bx	lr
 800a234:	2300      	movs	r3, #0
 800a236:	e7e4      	b.n	800a202 <__hi0bits+0xa>

0800a238 <__lo0bits>:
 800a238:	6803      	ldr	r3, [r0, #0]
 800a23a:	f013 0207 	ands.w	r2, r3, #7
 800a23e:	4601      	mov	r1, r0
 800a240:	d00b      	beq.n	800a25a <__lo0bits+0x22>
 800a242:	07da      	lsls	r2, r3, #31
 800a244:	d424      	bmi.n	800a290 <__lo0bits+0x58>
 800a246:	0798      	lsls	r0, r3, #30
 800a248:	bf49      	itett	mi
 800a24a:	085b      	lsrmi	r3, r3, #1
 800a24c:	089b      	lsrpl	r3, r3, #2
 800a24e:	2001      	movmi	r0, #1
 800a250:	600b      	strmi	r3, [r1, #0]
 800a252:	bf5c      	itt	pl
 800a254:	600b      	strpl	r3, [r1, #0]
 800a256:	2002      	movpl	r0, #2
 800a258:	4770      	bx	lr
 800a25a:	b298      	uxth	r0, r3
 800a25c:	b9b0      	cbnz	r0, 800a28c <__lo0bits+0x54>
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	2010      	movs	r0, #16
 800a262:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a266:	bf04      	itt	eq
 800a268:	0a1b      	lsreq	r3, r3, #8
 800a26a:	3008      	addeq	r0, #8
 800a26c:	071a      	lsls	r2, r3, #28
 800a26e:	bf04      	itt	eq
 800a270:	091b      	lsreq	r3, r3, #4
 800a272:	3004      	addeq	r0, #4
 800a274:	079a      	lsls	r2, r3, #30
 800a276:	bf04      	itt	eq
 800a278:	089b      	lsreq	r3, r3, #2
 800a27a:	3002      	addeq	r0, #2
 800a27c:	07da      	lsls	r2, r3, #31
 800a27e:	d403      	bmi.n	800a288 <__lo0bits+0x50>
 800a280:	085b      	lsrs	r3, r3, #1
 800a282:	f100 0001 	add.w	r0, r0, #1
 800a286:	d005      	beq.n	800a294 <__lo0bits+0x5c>
 800a288:	600b      	str	r3, [r1, #0]
 800a28a:	4770      	bx	lr
 800a28c:	4610      	mov	r0, r2
 800a28e:	e7e8      	b.n	800a262 <__lo0bits+0x2a>
 800a290:	2000      	movs	r0, #0
 800a292:	4770      	bx	lr
 800a294:	2020      	movs	r0, #32
 800a296:	4770      	bx	lr

0800a298 <__i2b>:
 800a298:	b510      	push	{r4, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	2101      	movs	r1, #1
 800a29e:	f7ff feb5 	bl	800a00c <_Balloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <__i2b+0x1a>
 800a2a6:	4b05      	ldr	r3, [pc, #20]	; (800a2bc <__i2b+0x24>)
 800a2a8:	4805      	ldr	r0, [pc, #20]	; (800a2c0 <__i2b+0x28>)
 800a2aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a2ae:	f000 ff63 	bl	800b178 <__assert_func>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	6144      	str	r4, [r0, #20]
 800a2b6:	6103      	str	r3, [r0, #16]
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	bf00      	nop
 800a2bc:	0800c3b4 	.word	0x0800c3b4
 800a2c0:	0800c4a8 	.word	0x0800c4a8

0800a2c4 <__multiply>:
 800a2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	4614      	mov	r4, r2
 800a2ca:	690a      	ldr	r2, [r1, #16]
 800a2cc:	6923      	ldr	r3, [r4, #16]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	bfb8      	it	lt
 800a2d2:	460b      	movlt	r3, r1
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	bfbc      	itt	lt
 800a2d8:	4625      	movlt	r5, r4
 800a2da:	461c      	movlt	r4, r3
 800a2dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a2e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a2e4:	68ab      	ldr	r3, [r5, #8]
 800a2e6:	6869      	ldr	r1, [r5, #4]
 800a2e8:	eb0a 0709 	add.w	r7, sl, r9
 800a2ec:	42bb      	cmp	r3, r7
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	bfb8      	it	lt
 800a2f2:	3101      	addlt	r1, #1
 800a2f4:	f7ff fe8a 	bl	800a00c <_Balloc>
 800a2f8:	b930      	cbnz	r0, 800a308 <__multiply+0x44>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4b42      	ldr	r3, [pc, #264]	; (800a408 <__multiply+0x144>)
 800a2fe:	4843      	ldr	r0, [pc, #268]	; (800a40c <__multiply+0x148>)
 800a300:	f240 115d 	movw	r1, #349	; 0x15d
 800a304:	f000 ff38 	bl	800b178 <__assert_func>
 800a308:	f100 0614 	add.w	r6, r0, #20
 800a30c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a310:	4633      	mov	r3, r6
 800a312:	2200      	movs	r2, #0
 800a314:	4543      	cmp	r3, r8
 800a316:	d31e      	bcc.n	800a356 <__multiply+0x92>
 800a318:	f105 0c14 	add.w	ip, r5, #20
 800a31c:	f104 0314 	add.w	r3, r4, #20
 800a320:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a324:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a328:	9202      	str	r2, [sp, #8]
 800a32a:	ebac 0205 	sub.w	r2, ip, r5
 800a32e:	3a15      	subs	r2, #21
 800a330:	f022 0203 	bic.w	r2, r2, #3
 800a334:	3204      	adds	r2, #4
 800a336:	f105 0115 	add.w	r1, r5, #21
 800a33a:	458c      	cmp	ip, r1
 800a33c:	bf38      	it	cc
 800a33e:	2204      	movcc	r2, #4
 800a340:	9201      	str	r2, [sp, #4]
 800a342:	9a02      	ldr	r2, [sp, #8]
 800a344:	9303      	str	r3, [sp, #12]
 800a346:	429a      	cmp	r2, r3
 800a348:	d808      	bhi.n	800a35c <__multiply+0x98>
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	dc55      	bgt.n	800a3fa <__multiply+0x136>
 800a34e:	6107      	str	r7, [r0, #16]
 800a350:	b005      	add	sp, #20
 800a352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a356:	f843 2b04 	str.w	r2, [r3], #4
 800a35a:	e7db      	b.n	800a314 <__multiply+0x50>
 800a35c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a360:	f1ba 0f00 	cmp.w	sl, #0
 800a364:	d020      	beq.n	800a3a8 <__multiply+0xe4>
 800a366:	f105 0e14 	add.w	lr, r5, #20
 800a36a:	46b1      	mov	r9, r6
 800a36c:	2200      	movs	r2, #0
 800a36e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a372:	f8d9 b000 	ldr.w	fp, [r9]
 800a376:	b2a1      	uxth	r1, r4
 800a378:	fa1f fb8b 	uxth.w	fp, fp
 800a37c:	fb0a b101 	mla	r1, sl, r1, fp
 800a380:	4411      	add	r1, r2
 800a382:	f8d9 2000 	ldr.w	r2, [r9]
 800a386:	0c24      	lsrs	r4, r4, #16
 800a388:	0c12      	lsrs	r2, r2, #16
 800a38a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a38e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a392:	b289      	uxth	r1, r1
 800a394:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a398:	45f4      	cmp	ip, lr
 800a39a:	f849 1b04 	str.w	r1, [r9], #4
 800a39e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a3a2:	d8e4      	bhi.n	800a36e <__multiply+0xaa>
 800a3a4:	9901      	ldr	r1, [sp, #4]
 800a3a6:	5072      	str	r2, [r6, r1]
 800a3a8:	9a03      	ldr	r2, [sp, #12]
 800a3aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	f1b9 0f00 	cmp.w	r9, #0
 800a3b4:	d01f      	beq.n	800a3f6 <__multiply+0x132>
 800a3b6:	6834      	ldr	r4, [r6, #0]
 800a3b8:	f105 0114 	add.w	r1, r5, #20
 800a3bc:	46b6      	mov	lr, r6
 800a3be:	f04f 0a00 	mov.w	sl, #0
 800a3c2:	880a      	ldrh	r2, [r1, #0]
 800a3c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a3c8:	fb09 b202 	mla	r2, r9, r2, fp
 800a3cc:	4492      	add	sl, r2
 800a3ce:	b2a4      	uxth	r4, r4
 800a3d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a3d4:	f84e 4b04 	str.w	r4, [lr], #4
 800a3d8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a3dc:	f8be 2000 	ldrh.w	r2, [lr]
 800a3e0:	0c24      	lsrs	r4, r4, #16
 800a3e2:	fb09 2404 	mla	r4, r9, r4, r2
 800a3e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a3ea:	458c      	cmp	ip, r1
 800a3ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a3f0:	d8e7      	bhi.n	800a3c2 <__multiply+0xfe>
 800a3f2:	9a01      	ldr	r2, [sp, #4]
 800a3f4:	50b4      	str	r4, [r6, r2]
 800a3f6:	3604      	adds	r6, #4
 800a3f8:	e7a3      	b.n	800a342 <__multiply+0x7e>
 800a3fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d1a5      	bne.n	800a34e <__multiply+0x8a>
 800a402:	3f01      	subs	r7, #1
 800a404:	e7a1      	b.n	800a34a <__multiply+0x86>
 800a406:	bf00      	nop
 800a408:	0800c3b4 	.word	0x0800c3b4
 800a40c:	0800c4a8 	.word	0x0800c4a8

0800a410 <__pow5mult>:
 800a410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a414:	4615      	mov	r5, r2
 800a416:	f012 0203 	ands.w	r2, r2, #3
 800a41a:	4606      	mov	r6, r0
 800a41c:	460f      	mov	r7, r1
 800a41e:	d007      	beq.n	800a430 <__pow5mult+0x20>
 800a420:	4c25      	ldr	r4, [pc, #148]	; (800a4b8 <__pow5mult+0xa8>)
 800a422:	3a01      	subs	r2, #1
 800a424:	2300      	movs	r3, #0
 800a426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a42a:	f7ff fe51 	bl	800a0d0 <__multadd>
 800a42e:	4607      	mov	r7, r0
 800a430:	10ad      	asrs	r5, r5, #2
 800a432:	d03d      	beq.n	800a4b0 <__pow5mult+0xa0>
 800a434:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a436:	b97c      	cbnz	r4, 800a458 <__pow5mult+0x48>
 800a438:	2010      	movs	r0, #16
 800a43a:	f7ff fdbf 	bl	8009fbc <malloc>
 800a43e:	4602      	mov	r2, r0
 800a440:	6270      	str	r0, [r6, #36]	; 0x24
 800a442:	b928      	cbnz	r0, 800a450 <__pow5mult+0x40>
 800a444:	4b1d      	ldr	r3, [pc, #116]	; (800a4bc <__pow5mult+0xac>)
 800a446:	481e      	ldr	r0, [pc, #120]	; (800a4c0 <__pow5mult+0xb0>)
 800a448:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a44c:	f000 fe94 	bl	800b178 <__assert_func>
 800a450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a454:	6004      	str	r4, [r0, #0]
 800a456:	60c4      	str	r4, [r0, #12]
 800a458:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a45c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a460:	b94c      	cbnz	r4, 800a476 <__pow5mult+0x66>
 800a462:	f240 2171 	movw	r1, #625	; 0x271
 800a466:	4630      	mov	r0, r6
 800a468:	f7ff ff16 	bl	800a298 <__i2b>
 800a46c:	2300      	movs	r3, #0
 800a46e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a472:	4604      	mov	r4, r0
 800a474:	6003      	str	r3, [r0, #0]
 800a476:	f04f 0900 	mov.w	r9, #0
 800a47a:	07eb      	lsls	r3, r5, #31
 800a47c:	d50a      	bpl.n	800a494 <__pow5mult+0x84>
 800a47e:	4639      	mov	r1, r7
 800a480:	4622      	mov	r2, r4
 800a482:	4630      	mov	r0, r6
 800a484:	f7ff ff1e 	bl	800a2c4 <__multiply>
 800a488:	4639      	mov	r1, r7
 800a48a:	4680      	mov	r8, r0
 800a48c:	4630      	mov	r0, r6
 800a48e:	f7ff fdfd 	bl	800a08c <_Bfree>
 800a492:	4647      	mov	r7, r8
 800a494:	106d      	asrs	r5, r5, #1
 800a496:	d00b      	beq.n	800a4b0 <__pow5mult+0xa0>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	b938      	cbnz	r0, 800a4ac <__pow5mult+0x9c>
 800a49c:	4622      	mov	r2, r4
 800a49e:	4621      	mov	r1, r4
 800a4a0:	4630      	mov	r0, r6
 800a4a2:	f7ff ff0f 	bl	800a2c4 <__multiply>
 800a4a6:	6020      	str	r0, [r4, #0]
 800a4a8:	f8c0 9000 	str.w	r9, [r0]
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	e7e4      	b.n	800a47a <__pow5mult+0x6a>
 800a4b0:	4638      	mov	r0, r7
 800a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0800c5f8 	.word	0x0800c5f8
 800a4bc:	0800c33e 	.word	0x0800c33e
 800a4c0:	0800c4a8 	.word	0x0800c4a8

0800a4c4 <__lshift>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	460c      	mov	r4, r1
 800a4ca:	6849      	ldr	r1, [r1, #4]
 800a4cc:	6923      	ldr	r3, [r4, #16]
 800a4ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	4691      	mov	r9, r2
 800a4d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a4dc:	f108 0601 	add.w	r6, r8, #1
 800a4e0:	42b3      	cmp	r3, r6
 800a4e2:	db0b      	blt.n	800a4fc <__lshift+0x38>
 800a4e4:	4638      	mov	r0, r7
 800a4e6:	f7ff fd91 	bl	800a00c <_Balloc>
 800a4ea:	4605      	mov	r5, r0
 800a4ec:	b948      	cbnz	r0, 800a502 <__lshift+0x3e>
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <__lshift+0xd0>)
 800a4f2:	4829      	ldr	r0, [pc, #164]	; (800a598 <__lshift+0xd4>)
 800a4f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a4f8:	f000 fe3e 	bl	800b178 <__assert_func>
 800a4fc:	3101      	adds	r1, #1
 800a4fe:	005b      	lsls	r3, r3, #1
 800a500:	e7ee      	b.n	800a4e0 <__lshift+0x1c>
 800a502:	2300      	movs	r3, #0
 800a504:	f100 0114 	add.w	r1, r0, #20
 800a508:	f100 0210 	add.w	r2, r0, #16
 800a50c:	4618      	mov	r0, r3
 800a50e:	4553      	cmp	r3, sl
 800a510:	db33      	blt.n	800a57a <__lshift+0xb6>
 800a512:	6920      	ldr	r0, [r4, #16]
 800a514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a518:	f104 0314 	add.w	r3, r4, #20
 800a51c:	f019 091f 	ands.w	r9, r9, #31
 800a520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a528:	d02b      	beq.n	800a582 <__lshift+0xbe>
 800a52a:	f1c9 0e20 	rsb	lr, r9, #32
 800a52e:	468a      	mov	sl, r1
 800a530:	2200      	movs	r2, #0
 800a532:	6818      	ldr	r0, [r3, #0]
 800a534:	fa00 f009 	lsl.w	r0, r0, r9
 800a538:	4302      	orrs	r2, r0
 800a53a:	f84a 2b04 	str.w	r2, [sl], #4
 800a53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a542:	459c      	cmp	ip, r3
 800a544:	fa22 f20e 	lsr.w	r2, r2, lr
 800a548:	d8f3      	bhi.n	800a532 <__lshift+0x6e>
 800a54a:	ebac 0304 	sub.w	r3, ip, r4
 800a54e:	3b15      	subs	r3, #21
 800a550:	f023 0303 	bic.w	r3, r3, #3
 800a554:	3304      	adds	r3, #4
 800a556:	f104 0015 	add.w	r0, r4, #21
 800a55a:	4584      	cmp	ip, r0
 800a55c:	bf38      	it	cc
 800a55e:	2304      	movcc	r3, #4
 800a560:	50ca      	str	r2, [r1, r3]
 800a562:	b10a      	cbz	r2, 800a568 <__lshift+0xa4>
 800a564:	f108 0602 	add.w	r6, r8, #2
 800a568:	3e01      	subs	r6, #1
 800a56a:	4638      	mov	r0, r7
 800a56c:	612e      	str	r6, [r5, #16]
 800a56e:	4621      	mov	r1, r4
 800a570:	f7ff fd8c 	bl	800a08c <_Bfree>
 800a574:	4628      	mov	r0, r5
 800a576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a57a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a57e:	3301      	adds	r3, #1
 800a580:	e7c5      	b.n	800a50e <__lshift+0x4a>
 800a582:	3904      	subs	r1, #4
 800a584:	f853 2b04 	ldr.w	r2, [r3], #4
 800a588:	f841 2f04 	str.w	r2, [r1, #4]!
 800a58c:	459c      	cmp	ip, r3
 800a58e:	d8f9      	bhi.n	800a584 <__lshift+0xc0>
 800a590:	e7ea      	b.n	800a568 <__lshift+0xa4>
 800a592:	bf00      	nop
 800a594:	0800c3b4 	.word	0x0800c3b4
 800a598:	0800c4a8 	.word	0x0800c4a8

0800a59c <__mcmp>:
 800a59c:	b530      	push	{r4, r5, lr}
 800a59e:	6902      	ldr	r2, [r0, #16]
 800a5a0:	690c      	ldr	r4, [r1, #16]
 800a5a2:	1b12      	subs	r2, r2, r4
 800a5a4:	d10e      	bne.n	800a5c4 <__mcmp+0x28>
 800a5a6:	f100 0314 	add.w	r3, r0, #20
 800a5aa:	3114      	adds	r1, #20
 800a5ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a5b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a5b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a5b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a5bc:	42a5      	cmp	r5, r4
 800a5be:	d003      	beq.n	800a5c8 <__mcmp+0x2c>
 800a5c0:	d305      	bcc.n	800a5ce <__mcmp+0x32>
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	4610      	mov	r0, r2
 800a5c6:	bd30      	pop	{r4, r5, pc}
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	d3f3      	bcc.n	800a5b4 <__mcmp+0x18>
 800a5cc:	e7fa      	b.n	800a5c4 <__mcmp+0x28>
 800a5ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d2:	e7f7      	b.n	800a5c4 <__mcmp+0x28>

0800a5d4 <__mdiff>:
 800a5d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d8:	460c      	mov	r4, r1
 800a5da:	4606      	mov	r6, r0
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4620      	mov	r0, r4
 800a5e0:	4617      	mov	r7, r2
 800a5e2:	f7ff ffdb 	bl	800a59c <__mcmp>
 800a5e6:	1e05      	subs	r5, r0, #0
 800a5e8:	d110      	bne.n	800a60c <__mdiff+0x38>
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	f7ff fd0d 	bl	800a00c <_Balloc>
 800a5f2:	b930      	cbnz	r0, 800a602 <__mdiff+0x2e>
 800a5f4:	4b39      	ldr	r3, [pc, #228]	; (800a6dc <__mdiff+0x108>)
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	f240 2132 	movw	r1, #562	; 0x232
 800a5fc:	4838      	ldr	r0, [pc, #224]	; (800a6e0 <__mdiff+0x10c>)
 800a5fe:	f000 fdbb 	bl	800b178 <__assert_func>
 800a602:	2301      	movs	r3, #1
 800a604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a608:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a60c:	bfa4      	itt	ge
 800a60e:	463b      	movge	r3, r7
 800a610:	4627      	movge	r7, r4
 800a612:	4630      	mov	r0, r6
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	bfa6      	itte	ge
 800a618:	461c      	movge	r4, r3
 800a61a:	2500      	movge	r5, #0
 800a61c:	2501      	movlt	r5, #1
 800a61e:	f7ff fcf5 	bl	800a00c <_Balloc>
 800a622:	b920      	cbnz	r0, 800a62e <__mdiff+0x5a>
 800a624:	4b2d      	ldr	r3, [pc, #180]	; (800a6dc <__mdiff+0x108>)
 800a626:	4602      	mov	r2, r0
 800a628:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a62c:	e7e6      	b.n	800a5fc <__mdiff+0x28>
 800a62e:	693e      	ldr	r6, [r7, #16]
 800a630:	60c5      	str	r5, [r0, #12]
 800a632:	6925      	ldr	r5, [r4, #16]
 800a634:	f107 0114 	add.w	r1, r7, #20
 800a638:	f104 0914 	add.w	r9, r4, #20
 800a63c:	f100 0e14 	add.w	lr, r0, #20
 800a640:	f107 0210 	add.w	r2, r7, #16
 800a644:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a648:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a64c:	46f2      	mov	sl, lr
 800a64e:	2700      	movs	r7, #0
 800a650:	f859 3b04 	ldr.w	r3, [r9], #4
 800a654:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a658:	fa1f f883 	uxth.w	r8, r3
 800a65c:	fa17 f78b 	uxtah	r7, r7, fp
 800a660:	0c1b      	lsrs	r3, r3, #16
 800a662:	eba7 0808 	sub.w	r8, r7, r8
 800a666:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a66a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a66e:	fa1f f888 	uxth.w	r8, r8
 800a672:	141f      	asrs	r7, r3, #16
 800a674:	454d      	cmp	r5, r9
 800a676:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a67a:	f84a 3b04 	str.w	r3, [sl], #4
 800a67e:	d8e7      	bhi.n	800a650 <__mdiff+0x7c>
 800a680:	1b2b      	subs	r3, r5, r4
 800a682:	3b15      	subs	r3, #21
 800a684:	f023 0303 	bic.w	r3, r3, #3
 800a688:	3304      	adds	r3, #4
 800a68a:	3415      	adds	r4, #21
 800a68c:	42a5      	cmp	r5, r4
 800a68e:	bf38      	it	cc
 800a690:	2304      	movcc	r3, #4
 800a692:	4419      	add	r1, r3
 800a694:	4473      	add	r3, lr
 800a696:	469e      	mov	lr, r3
 800a698:	460d      	mov	r5, r1
 800a69a:	4565      	cmp	r5, ip
 800a69c:	d30e      	bcc.n	800a6bc <__mdiff+0xe8>
 800a69e:	f10c 0203 	add.w	r2, ip, #3
 800a6a2:	1a52      	subs	r2, r2, r1
 800a6a4:	f022 0203 	bic.w	r2, r2, #3
 800a6a8:	3903      	subs	r1, #3
 800a6aa:	458c      	cmp	ip, r1
 800a6ac:	bf38      	it	cc
 800a6ae:	2200      	movcc	r2, #0
 800a6b0:	441a      	add	r2, r3
 800a6b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a6b6:	b17b      	cbz	r3, 800a6d8 <__mdiff+0x104>
 800a6b8:	6106      	str	r6, [r0, #16]
 800a6ba:	e7a5      	b.n	800a608 <__mdiff+0x34>
 800a6bc:	f855 8b04 	ldr.w	r8, [r5], #4
 800a6c0:	fa17 f488 	uxtah	r4, r7, r8
 800a6c4:	1422      	asrs	r2, r4, #16
 800a6c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a6ca:	b2a4      	uxth	r4, r4
 800a6cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a6d0:	f84e 4b04 	str.w	r4, [lr], #4
 800a6d4:	1417      	asrs	r7, r2, #16
 800a6d6:	e7e0      	b.n	800a69a <__mdiff+0xc6>
 800a6d8:	3e01      	subs	r6, #1
 800a6da:	e7ea      	b.n	800a6b2 <__mdiff+0xde>
 800a6dc:	0800c3b4 	.word	0x0800c3b4
 800a6e0:	0800c4a8 	.word	0x0800c4a8

0800a6e4 <__ulp>:
 800a6e4:	b082      	sub	sp, #8
 800a6e6:	ed8d 0b00 	vstr	d0, [sp]
 800a6ea:	9b01      	ldr	r3, [sp, #4]
 800a6ec:	4912      	ldr	r1, [pc, #72]	; (800a738 <__ulp+0x54>)
 800a6ee:	4019      	ands	r1, r3
 800a6f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a6f4:	2900      	cmp	r1, #0
 800a6f6:	dd05      	ble.n	800a704 <__ulp+0x20>
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	ec43 2b10 	vmov	d0, r2, r3
 800a700:	b002      	add	sp, #8
 800a702:	4770      	bx	lr
 800a704:	4249      	negs	r1, r1
 800a706:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a70a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a70e:	f04f 0200 	mov.w	r2, #0
 800a712:	f04f 0300 	mov.w	r3, #0
 800a716:	da04      	bge.n	800a722 <__ulp+0x3e>
 800a718:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a71c:	fa41 f300 	asr.w	r3, r1, r0
 800a720:	e7ec      	b.n	800a6fc <__ulp+0x18>
 800a722:	f1a0 0114 	sub.w	r1, r0, #20
 800a726:	291e      	cmp	r1, #30
 800a728:	bfda      	itte	le
 800a72a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a72e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a732:	2101      	movgt	r1, #1
 800a734:	460a      	mov	r2, r1
 800a736:	e7e1      	b.n	800a6fc <__ulp+0x18>
 800a738:	7ff00000 	.word	0x7ff00000

0800a73c <__b2d>:
 800a73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a73e:	6905      	ldr	r5, [r0, #16]
 800a740:	f100 0714 	add.w	r7, r0, #20
 800a744:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a748:	1f2e      	subs	r6, r5, #4
 800a74a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a74e:	4620      	mov	r0, r4
 800a750:	f7ff fd52 	bl	800a1f8 <__hi0bits>
 800a754:	f1c0 0320 	rsb	r3, r0, #32
 800a758:	280a      	cmp	r0, #10
 800a75a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a7d8 <__b2d+0x9c>
 800a75e:	600b      	str	r3, [r1, #0]
 800a760:	dc14      	bgt.n	800a78c <__b2d+0x50>
 800a762:	f1c0 0e0b 	rsb	lr, r0, #11
 800a766:	fa24 f10e 	lsr.w	r1, r4, lr
 800a76a:	42b7      	cmp	r7, r6
 800a76c:	ea41 030c 	orr.w	r3, r1, ip
 800a770:	bf34      	ite	cc
 800a772:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a776:	2100      	movcs	r1, #0
 800a778:	3015      	adds	r0, #21
 800a77a:	fa04 f000 	lsl.w	r0, r4, r0
 800a77e:	fa21 f10e 	lsr.w	r1, r1, lr
 800a782:	ea40 0201 	orr.w	r2, r0, r1
 800a786:	ec43 2b10 	vmov	d0, r2, r3
 800a78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a78c:	42b7      	cmp	r7, r6
 800a78e:	bf3a      	itte	cc
 800a790:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a794:	f1a5 0608 	subcc.w	r6, r5, #8
 800a798:	2100      	movcs	r1, #0
 800a79a:	380b      	subs	r0, #11
 800a79c:	d017      	beq.n	800a7ce <__b2d+0x92>
 800a79e:	f1c0 0c20 	rsb	ip, r0, #32
 800a7a2:	fa04 f500 	lsl.w	r5, r4, r0
 800a7a6:	42be      	cmp	r6, r7
 800a7a8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a7ac:	ea45 0504 	orr.w	r5, r5, r4
 800a7b0:	bf8c      	ite	hi
 800a7b2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a7b6:	2400      	movls	r4, #0
 800a7b8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a7bc:	fa01 f000 	lsl.w	r0, r1, r0
 800a7c0:	fa24 f40c 	lsr.w	r4, r4, ip
 800a7c4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a7c8:	ea40 0204 	orr.w	r2, r0, r4
 800a7cc:	e7db      	b.n	800a786 <__b2d+0x4a>
 800a7ce:	ea44 030c 	orr.w	r3, r4, ip
 800a7d2:	460a      	mov	r2, r1
 800a7d4:	e7d7      	b.n	800a786 <__b2d+0x4a>
 800a7d6:	bf00      	nop
 800a7d8:	3ff00000 	.word	0x3ff00000

0800a7dc <__d2b>:
 800a7dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a7e0:	4689      	mov	r9, r1
 800a7e2:	2101      	movs	r1, #1
 800a7e4:	ec57 6b10 	vmov	r6, r7, d0
 800a7e8:	4690      	mov	r8, r2
 800a7ea:	f7ff fc0f 	bl	800a00c <_Balloc>
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	b930      	cbnz	r0, 800a800 <__d2b+0x24>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	4b25      	ldr	r3, [pc, #148]	; (800a88c <__d2b+0xb0>)
 800a7f6:	4826      	ldr	r0, [pc, #152]	; (800a890 <__d2b+0xb4>)
 800a7f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a7fc:	f000 fcbc 	bl	800b178 <__assert_func>
 800a800:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a804:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a808:	bb35      	cbnz	r5, 800a858 <__d2b+0x7c>
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	9301      	str	r3, [sp, #4]
 800a80e:	d028      	beq.n	800a862 <__d2b+0x86>
 800a810:	4668      	mov	r0, sp
 800a812:	9600      	str	r6, [sp, #0]
 800a814:	f7ff fd10 	bl	800a238 <__lo0bits>
 800a818:	9900      	ldr	r1, [sp, #0]
 800a81a:	b300      	cbz	r0, 800a85e <__d2b+0x82>
 800a81c:	9a01      	ldr	r2, [sp, #4]
 800a81e:	f1c0 0320 	rsb	r3, r0, #32
 800a822:	fa02 f303 	lsl.w	r3, r2, r3
 800a826:	430b      	orrs	r3, r1
 800a828:	40c2      	lsrs	r2, r0
 800a82a:	6163      	str	r3, [r4, #20]
 800a82c:	9201      	str	r2, [sp, #4]
 800a82e:	9b01      	ldr	r3, [sp, #4]
 800a830:	61a3      	str	r3, [r4, #24]
 800a832:	2b00      	cmp	r3, #0
 800a834:	bf14      	ite	ne
 800a836:	2202      	movne	r2, #2
 800a838:	2201      	moveq	r2, #1
 800a83a:	6122      	str	r2, [r4, #16]
 800a83c:	b1d5      	cbz	r5, 800a874 <__d2b+0x98>
 800a83e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a842:	4405      	add	r5, r0
 800a844:	f8c9 5000 	str.w	r5, [r9]
 800a848:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a84c:	f8c8 0000 	str.w	r0, [r8]
 800a850:	4620      	mov	r0, r4
 800a852:	b003      	add	sp, #12
 800a854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a858:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a85c:	e7d5      	b.n	800a80a <__d2b+0x2e>
 800a85e:	6161      	str	r1, [r4, #20]
 800a860:	e7e5      	b.n	800a82e <__d2b+0x52>
 800a862:	a801      	add	r0, sp, #4
 800a864:	f7ff fce8 	bl	800a238 <__lo0bits>
 800a868:	9b01      	ldr	r3, [sp, #4]
 800a86a:	6163      	str	r3, [r4, #20]
 800a86c:	2201      	movs	r2, #1
 800a86e:	6122      	str	r2, [r4, #16]
 800a870:	3020      	adds	r0, #32
 800a872:	e7e3      	b.n	800a83c <__d2b+0x60>
 800a874:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a878:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a87c:	f8c9 0000 	str.w	r0, [r9]
 800a880:	6918      	ldr	r0, [r3, #16]
 800a882:	f7ff fcb9 	bl	800a1f8 <__hi0bits>
 800a886:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a88a:	e7df      	b.n	800a84c <__d2b+0x70>
 800a88c:	0800c3b4 	.word	0x0800c3b4
 800a890:	0800c4a8 	.word	0x0800c4a8

0800a894 <__ratio>:
 800a894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	4688      	mov	r8, r1
 800a89a:	4669      	mov	r1, sp
 800a89c:	4681      	mov	r9, r0
 800a89e:	f7ff ff4d 	bl	800a73c <__b2d>
 800a8a2:	a901      	add	r1, sp, #4
 800a8a4:	4640      	mov	r0, r8
 800a8a6:	ec55 4b10 	vmov	r4, r5, d0
 800a8aa:	f7ff ff47 	bl	800a73c <__b2d>
 800a8ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a8b2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a8b6:	eba3 0c02 	sub.w	ip, r3, r2
 800a8ba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a8c4:	ec51 0b10 	vmov	r0, r1, d0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bfd6      	itet	le
 800a8cc:	460a      	movle	r2, r1
 800a8ce:	462a      	movgt	r2, r5
 800a8d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a8d4:	468b      	mov	fp, r1
 800a8d6:	462f      	mov	r7, r5
 800a8d8:	bfd4      	ite	le
 800a8da:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a8de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	ee10 2a10 	vmov	r2, s0
 800a8e8:	465b      	mov	r3, fp
 800a8ea:	4639      	mov	r1, r7
 800a8ec:	f7f5 ffae 	bl	800084c <__aeabi_ddiv>
 800a8f0:	ec41 0b10 	vmov	d0, r0, r1
 800a8f4:	b003      	add	sp, #12
 800a8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a8fa <__copybits>:
 800a8fa:	3901      	subs	r1, #1
 800a8fc:	b570      	push	{r4, r5, r6, lr}
 800a8fe:	1149      	asrs	r1, r1, #5
 800a900:	6914      	ldr	r4, [r2, #16]
 800a902:	3101      	adds	r1, #1
 800a904:	f102 0314 	add.w	r3, r2, #20
 800a908:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a90c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a910:	1f05      	subs	r5, r0, #4
 800a912:	42a3      	cmp	r3, r4
 800a914:	d30c      	bcc.n	800a930 <__copybits+0x36>
 800a916:	1aa3      	subs	r3, r4, r2
 800a918:	3b11      	subs	r3, #17
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	3211      	adds	r2, #17
 800a920:	42a2      	cmp	r2, r4
 800a922:	bf88      	it	hi
 800a924:	2300      	movhi	r3, #0
 800a926:	4418      	add	r0, r3
 800a928:	2300      	movs	r3, #0
 800a92a:	4288      	cmp	r0, r1
 800a92c:	d305      	bcc.n	800a93a <__copybits+0x40>
 800a92e:	bd70      	pop	{r4, r5, r6, pc}
 800a930:	f853 6b04 	ldr.w	r6, [r3], #4
 800a934:	f845 6f04 	str.w	r6, [r5, #4]!
 800a938:	e7eb      	b.n	800a912 <__copybits+0x18>
 800a93a:	f840 3b04 	str.w	r3, [r0], #4
 800a93e:	e7f4      	b.n	800a92a <__copybits+0x30>

0800a940 <__any_on>:
 800a940:	f100 0214 	add.w	r2, r0, #20
 800a944:	6900      	ldr	r0, [r0, #16]
 800a946:	114b      	asrs	r3, r1, #5
 800a948:	4298      	cmp	r0, r3
 800a94a:	b510      	push	{r4, lr}
 800a94c:	db11      	blt.n	800a972 <__any_on+0x32>
 800a94e:	dd0a      	ble.n	800a966 <__any_on+0x26>
 800a950:	f011 011f 	ands.w	r1, r1, #31
 800a954:	d007      	beq.n	800a966 <__any_on+0x26>
 800a956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a95a:	fa24 f001 	lsr.w	r0, r4, r1
 800a95e:	fa00 f101 	lsl.w	r1, r0, r1
 800a962:	428c      	cmp	r4, r1
 800a964:	d10b      	bne.n	800a97e <__any_on+0x3e>
 800a966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d803      	bhi.n	800a976 <__any_on+0x36>
 800a96e:	2000      	movs	r0, #0
 800a970:	bd10      	pop	{r4, pc}
 800a972:	4603      	mov	r3, r0
 800a974:	e7f7      	b.n	800a966 <__any_on+0x26>
 800a976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a97a:	2900      	cmp	r1, #0
 800a97c:	d0f5      	beq.n	800a96a <__any_on+0x2a>
 800a97e:	2001      	movs	r0, #1
 800a980:	e7f6      	b.n	800a970 <__any_on+0x30>

0800a982 <_calloc_r>:
 800a982:	b513      	push	{r0, r1, r4, lr}
 800a984:	434a      	muls	r2, r1
 800a986:	4611      	mov	r1, r2
 800a988:	9201      	str	r2, [sp, #4]
 800a98a:	f000 f859 	bl	800aa40 <_malloc_r>
 800a98e:	4604      	mov	r4, r0
 800a990:	b118      	cbz	r0, 800a99a <_calloc_r+0x18>
 800a992:	9a01      	ldr	r2, [sp, #4]
 800a994:	2100      	movs	r1, #0
 800a996:	f7fc f855 	bl	8006a44 <memset>
 800a99a:	4620      	mov	r0, r4
 800a99c:	b002      	add	sp, #8
 800a99e:	bd10      	pop	{r4, pc}

0800a9a0 <_free_r>:
 800a9a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a9a2:	2900      	cmp	r1, #0
 800a9a4:	d048      	beq.n	800aa38 <_free_r+0x98>
 800a9a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9aa:	9001      	str	r0, [sp, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f1a1 0404 	sub.w	r4, r1, #4
 800a9b2:	bfb8      	it	lt
 800a9b4:	18e4      	addlt	r4, r4, r3
 800a9b6:	f000 fc6d 	bl	800b294 <__malloc_lock>
 800a9ba:	4a20      	ldr	r2, [pc, #128]	; (800aa3c <_free_r+0x9c>)
 800a9bc:	9801      	ldr	r0, [sp, #4]
 800a9be:	6813      	ldr	r3, [r2, #0]
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	b933      	cbnz	r3, 800a9d2 <_free_r+0x32>
 800a9c4:	6063      	str	r3, [r4, #4]
 800a9c6:	6014      	str	r4, [r2, #0]
 800a9c8:	b003      	add	sp, #12
 800a9ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9ce:	f000 bc67 	b.w	800b2a0 <__malloc_unlock>
 800a9d2:	42a3      	cmp	r3, r4
 800a9d4:	d90b      	bls.n	800a9ee <_free_r+0x4e>
 800a9d6:	6821      	ldr	r1, [r4, #0]
 800a9d8:	1862      	adds	r2, r4, r1
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	bf04      	itt	eq
 800a9de:	681a      	ldreq	r2, [r3, #0]
 800a9e0:	685b      	ldreq	r3, [r3, #4]
 800a9e2:	6063      	str	r3, [r4, #4]
 800a9e4:	bf04      	itt	eq
 800a9e6:	1852      	addeq	r2, r2, r1
 800a9e8:	6022      	streq	r2, [r4, #0]
 800a9ea:	602c      	str	r4, [r5, #0]
 800a9ec:	e7ec      	b.n	800a9c8 <_free_r+0x28>
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	b10b      	cbz	r3, 800a9f8 <_free_r+0x58>
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	d9fa      	bls.n	800a9ee <_free_r+0x4e>
 800a9f8:	6811      	ldr	r1, [r2, #0]
 800a9fa:	1855      	adds	r5, r2, r1
 800a9fc:	42a5      	cmp	r5, r4
 800a9fe:	d10b      	bne.n	800aa18 <_free_r+0x78>
 800aa00:	6824      	ldr	r4, [r4, #0]
 800aa02:	4421      	add	r1, r4
 800aa04:	1854      	adds	r4, r2, r1
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	6011      	str	r1, [r2, #0]
 800aa0a:	d1dd      	bne.n	800a9c8 <_free_r+0x28>
 800aa0c:	681c      	ldr	r4, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	6053      	str	r3, [r2, #4]
 800aa12:	4421      	add	r1, r4
 800aa14:	6011      	str	r1, [r2, #0]
 800aa16:	e7d7      	b.n	800a9c8 <_free_r+0x28>
 800aa18:	d902      	bls.n	800aa20 <_free_r+0x80>
 800aa1a:	230c      	movs	r3, #12
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	e7d3      	b.n	800a9c8 <_free_r+0x28>
 800aa20:	6825      	ldr	r5, [r4, #0]
 800aa22:	1961      	adds	r1, r4, r5
 800aa24:	428b      	cmp	r3, r1
 800aa26:	bf04      	itt	eq
 800aa28:	6819      	ldreq	r1, [r3, #0]
 800aa2a:	685b      	ldreq	r3, [r3, #4]
 800aa2c:	6063      	str	r3, [r4, #4]
 800aa2e:	bf04      	itt	eq
 800aa30:	1949      	addeq	r1, r1, r5
 800aa32:	6021      	streq	r1, [r4, #0]
 800aa34:	6054      	str	r4, [r2, #4]
 800aa36:	e7c7      	b.n	800a9c8 <_free_r+0x28>
 800aa38:	b003      	add	sp, #12
 800aa3a:	bd30      	pop	{r4, r5, pc}
 800aa3c:	200004bc 	.word	0x200004bc

0800aa40 <_malloc_r>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	1ccd      	adds	r5, r1, #3
 800aa44:	f025 0503 	bic.w	r5, r5, #3
 800aa48:	3508      	adds	r5, #8
 800aa4a:	2d0c      	cmp	r5, #12
 800aa4c:	bf38      	it	cc
 800aa4e:	250c      	movcc	r5, #12
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	4606      	mov	r6, r0
 800aa54:	db01      	blt.n	800aa5a <_malloc_r+0x1a>
 800aa56:	42a9      	cmp	r1, r5
 800aa58:	d903      	bls.n	800aa62 <_malloc_r+0x22>
 800aa5a:	230c      	movs	r3, #12
 800aa5c:	6033      	str	r3, [r6, #0]
 800aa5e:	2000      	movs	r0, #0
 800aa60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa62:	f000 fc17 	bl	800b294 <__malloc_lock>
 800aa66:	4921      	ldr	r1, [pc, #132]	; (800aaec <_malloc_r+0xac>)
 800aa68:	680a      	ldr	r2, [r1, #0]
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	b99c      	cbnz	r4, 800aa96 <_malloc_r+0x56>
 800aa6e:	4f20      	ldr	r7, [pc, #128]	; (800aaf0 <_malloc_r+0xb0>)
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	b923      	cbnz	r3, 800aa7e <_malloc_r+0x3e>
 800aa74:	4621      	mov	r1, r4
 800aa76:	4630      	mov	r0, r6
 800aa78:	f000 fafa 	bl	800b070 <_sbrk_r>
 800aa7c:	6038      	str	r0, [r7, #0]
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4630      	mov	r0, r6
 800aa82:	f000 faf5 	bl	800b070 <_sbrk_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	d123      	bne.n	800aad2 <_malloc_r+0x92>
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	6033      	str	r3, [r6, #0]
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f000 fc06 	bl	800b2a0 <__malloc_unlock>
 800aa94:	e7e3      	b.n	800aa5e <_malloc_r+0x1e>
 800aa96:	6823      	ldr	r3, [r4, #0]
 800aa98:	1b5b      	subs	r3, r3, r5
 800aa9a:	d417      	bmi.n	800aacc <_malloc_r+0x8c>
 800aa9c:	2b0b      	cmp	r3, #11
 800aa9e:	d903      	bls.n	800aaa8 <_malloc_r+0x68>
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	441c      	add	r4, r3
 800aaa4:	6025      	str	r5, [r4, #0]
 800aaa6:	e004      	b.n	800aab2 <_malloc_r+0x72>
 800aaa8:	6863      	ldr	r3, [r4, #4]
 800aaaa:	42a2      	cmp	r2, r4
 800aaac:	bf0c      	ite	eq
 800aaae:	600b      	streq	r3, [r1, #0]
 800aab0:	6053      	strne	r3, [r2, #4]
 800aab2:	4630      	mov	r0, r6
 800aab4:	f000 fbf4 	bl	800b2a0 <__malloc_unlock>
 800aab8:	f104 000b 	add.w	r0, r4, #11
 800aabc:	1d23      	adds	r3, r4, #4
 800aabe:	f020 0007 	bic.w	r0, r0, #7
 800aac2:	1ac2      	subs	r2, r0, r3
 800aac4:	d0cc      	beq.n	800aa60 <_malloc_r+0x20>
 800aac6:	1a1b      	subs	r3, r3, r0
 800aac8:	50a3      	str	r3, [r4, r2]
 800aaca:	e7c9      	b.n	800aa60 <_malloc_r+0x20>
 800aacc:	4622      	mov	r2, r4
 800aace:	6864      	ldr	r4, [r4, #4]
 800aad0:	e7cc      	b.n	800aa6c <_malloc_r+0x2c>
 800aad2:	1cc4      	adds	r4, r0, #3
 800aad4:	f024 0403 	bic.w	r4, r4, #3
 800aad8:	42a0      	cmp	r0, r4
 800aada:	d0e3      	beq.n	800aaa4 <_malloc_r+0x64>
 800aadc:	1a21      	subs	r1, r4, r0
 800aade:	4630      	mov	r0, r6
 800aae0:	f000 fac6 	bl	800b070 <_sbrk_r>
 800aae4:	3001      	adds	r0, #1
 800aae6:	d1dd      	bne.n	800aaa4 <_malloc_r+0x64>
 800aae8:	e7cf      	b.n	800aa8a <_malloc_r+0x4a>
 800aaea:	bf00      	nop
 800aaec:	200004bc 	.word	0x200004bc
 800aaf0:	200004c0 	.word	0x200004c0

0800aaf4 <__ssputs_r>:
 800aaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaf8:	688e      	ldr	r6, [r1, #8]
 800aafa:	429e      	cmp	r6, r3
 800aafc:	4682      	mov	sl, r0
 800aafe:	460c      	mov	r4, r1
 800ab00:	4690      	mov	r8, r2
 800ab02:	461f      	mov	r7, r3
 800ab04:	d838      	bhi.n	800ab78 <__ssputs_r+0x84>
 800ab06:	898a      	ldrh	r2, [r1, #12]
 800ab08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab0c:	d032      	beq.n	800ab74 <__ssputs_r+0x80>
 800ab0e:	6825      	ldr	r5, [r4, #0]
 800ab10:	6909      	ldr	r1, [r1, #16]
 800ab12:	eba5 0901 	sub.w	r9, r5, r1
 800ab16:	6965      	ldr	r5, [r4, #20]
 800ab18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab20:	3301      	adds	r3, #1
 800ab22:	444b      	add	r3, r9
 800ab24:	106d      	asrs	r5, r5, #1
 800ab26:	429d      	cmp	r5, r3
 800ab28:	bf38      	it	cc
 800ab2a:	461d      	movcc	r5, r3
 800ab2c:	0553      	lsls	r3, r2, #21
 800ab2e:	d531      	bpl.n	800ab94 <__ssputs_r+0xa0>
 800ab30:	4629      	mov	r1, r5
 800ab32:	f7ff ff85 	bl	800aa40 <_malloc_r>
 800ab36:	4606      	mov	r6, r0
 800ab38:	b950      	cbnz	r0, 800ab50 <__ssputs_r+0x5c>
 800ab3a:	230c      	movs	r3, #12
 800ab3c:	f8ca 3000 	str.w	r3, [sl]
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab50:	6921      	ldr	r1, [r4, #16]
 800ab52:	464a      	mov	r2, r9
 800ab54:	f7ff fa4c 	bl	8009ff0 <memcpy>
 800ab58:	89a3      	ldrh	r3, [r4, #12]
 800ab5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ab5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab62:	81a3      	strh	r3, [r4, #12]
 800ab64:	6126      	str	r6, [r4, #16]
 800ab66:	6165      	str	r5, [r4, #20]
 800ab68:	444e      	add	r6, r9
 800ab6a:	eba5 0509 	sub.w	r5, r5, r9
 800ab6e:	6026      	str	r6, [r4, #0]
 800ab70:	60a5      	str	r5, [r4, #8]
 800ab72:	463e      	mov	r6, r7
 800ab74:	42be      	cmp	r6, r7
 800ab76:	d900      	bls.n	800ab7a <__ssputs_r+0x86>
 800ab78:	463e      	mov	r6, r7
 800ab7a:	4632      	mov	r2, r6
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	4641      	mov	r1, r8
 800ab80:	f000 fb6e 	bl	800b260 <memmove>
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	6822      	ldr	r2, [r4, #0]
 800ab88:	1b9b      	subs	r3, r3, r6
 800ab8a:	4432      	add	r2, r6
 800ab8c:	60a3      	str	r3, [r4, #8]
 800ab8e:	6022      	str	r2, [r4, #0]
 800ab90:	2000      	movs	r0, #0
 800ab92:	e7db      	b.n	800ab4c <__ssputs_r+0x58>
 800ab94:	462a      	mov	r2, r5
 800ab96:	f000 fb89 	bl	800b2ac <_realloc_r>
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	d1e1      	bne.n	800ab64 <__ssputs_r+0x70>
 800aba0:	6921      	ldr	r1, [r4, #16]
 800aba2:	4650      	mov	r0, sl
 800aba4:	f7ff fefc 	bl	800a9a0 <_free_r>
 800aba8:	e7c7      	b.n	800ab3a <__ssputs_r+0x46>
	...

0800abac <_svfiprintf_r>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	4698      	mov	r8, r3
 800abb2:	898b      	ldrh	r3, [r1, #12]
 800abb4:	061b      	lsls	r3, r3, #24
 800abb6:	b09d      	sub	sp, #116	; 0x74
 800abb8:	4607      	mov	r7, r0
 800abba:	460d      	mov	r5, r1
 800abbc:	4614      	mov	r4, r2
 800abbe:	d50e      	bpl.n	800abde <_svfiprintf_r+0x32>
 800abc0:	690b      	ldr	r3, [r1, #16]
 800abc2:	b963      	cbnz	r3, 800abde <_svfiprintf_r+0x32>
 800abc4:	2140      	movs	r1, #64	; 0x40
 800abc6:	f7ff ff3b 	bl	800aa40 <_malloc_r>
 800abca:	6028      	str	r0, [r5, #0]
 800abcc:	6128      	str	r0, [r5, #16]
 800abce:	b920      	cbnz	r0, 800abda <_svfiprintf_r+0x2e>
 800abd0:	230c      	movs	r3, #12
 800abd2:	603b      	str	r3, [r7, #0]
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	e0d1      	b.n	800ad7e <_svfiprintf_r+0x1d2>
 800abda:	2340      	movs	r3, #64	; 0x40
 800abdc:	616b      	str	r3, [r5, #20]
 800abde:	2300      	movs	r3, #0
 800abe0:	9309      	str	r3, [sp, #36]	; 0x24
 800abe2:	2320      	movs	r3, #32
 800abe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800abe8:	f8cd 800c 	str.w	r8, [sp, #12]
 800abec:	2330      	movs	r3, #48	; 0x30
 800abee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ad98 <_svfiprintf_r+0x1ec>
 800abf2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800abf6:	f04f 0901 	mov.w	r9, #1
 800abfa:	4623      	mov	r3, r4
 800abfc:	469a      	mov	sl, r3
 800abfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac02:	b10a      	cbz	r2, 800ac08 <_svfiprintf_r+0x5c>
 800ac04:	2a25      	cmp	r2, #37	; 0x25
 800ac06:	d1f9      	bne.n	800abfc <_svfiprintf_r+0x50>
 800ac08:	ebba 0b04 	subs.w	fp, sl, r4
 800ac0c:	d00b      	beq.n	800ac26 <_svfiprintf_r+0x7a>
 800ac0e:	465b      	mov	r3, fp
 800ac10:	4622      	mov	r2, r4
 800ac12:	4629      	mov	r1, r5
 800ac14:	4638      	mov	r0, r7
 800ac16:	f7ff ff6d 	bl	800aaf4 <__ssputs_r>
 800ac1a:	3001      	adds	r0, #1
 800ac1c:	f000 80aa 	beq.w	800ad74 <_svfiprintf_r+0x1c8>
 800ac20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac22:	445a      	add	r2, fp
 800ac24:	9209      	str	r2, [sp, #36]	; 0x24
 800ac26:	f89a 3000 	ldrb.w	r3, [sl]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f000 80a2 	beq.w	800ad74 <_svfiprintf_r+0x1c8>
 800ac30:	2300      	movs	r3, #0
 800ac32:	f04f 32ff 	mov.w	r2, #4294967295
 800ac36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac3a:	f10a 0a01 	add.w	sl, sl, #1
 800ac3e:	9304      	str	r3, [sp, #16]
 800ac40:	9307      	str	r3, [sp, #28]
 800ac42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac46:	931a      	str	r3, [sp, #104]	; 0x68
 800ac48:	4654      	mov	r4, sl
 800ac4a:	2205      	movs	r2, #5
 800ac4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac50:	4851      	ldr	r0, [pc, #324]	; (800ad98 <_svfiprintf_r+0x1ec>)
 800ac52:	f7f5 fac5 	bl	80001e0 <memchr>
 800ac56:	9a04      	ldr	r2, [sp, #16]
 800ac58:	b9d8      	cbnz	r0, 800ac92 <_svfiprintf_r+0xe6>
 800ac5a:	06d0      	lsls	r0, r2, #27
 800ac5c:	bf44      	itt	mi
 800ac5e:	2320      	movmi	r3, #32
 800ac60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac64:	0711      	lsls	r1, r2, #28
 800ac66:	bf44      	itt	mi
 800ac68:	232b      	movmi	r3, #43	; 0x2b
 800ac6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac6e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac72:	2b2a      	cmp	r3, #42	; 0x2a
 800ac74:	d015      	beq.n	800aca2 <_svfiprintf_r+0xf6>
 800ac76:	9a07      	ldr	r2, [sp, #28]
 800ac78:	4654      	mov	r4, sl
 800ac7a:	2000      	movs	r0, #0
 800ac7c:	f04f 0c0a 	mov.w	ip, #10
 800ac80:	4621      	mov	r1, r4
 800ac82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac86:	3b30      	subs	r3, #48	; 0x30
 800ac88:	2b09      	cmp	r3, #9
 800ac8a:	d94e      	bls.n	800ad2a <_svfiprintf_r+0x17e>
 800ac8c:	b1b0      	cbz	r0, 800acbc <_svfiprintf_r+0x110>
 800ac8e:	9207      	str	r2, [sp, #28]
 800ac90:	e014      	b.n	800acbc <_svfiprintf_r+0x110>
 800ac92:	eba0 0308 	sub.w	r3, r0, r8
 800ac96:	fa09 f303 	lsl.w	r3, r9, r3
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	9304      	str	r3, [sp, #16]
 800ac9e:	46a2      	mov	sl, r4
 800aca0:	e7d2      	b.n	800ac48 <_svfiprintf_r+0x9c>
 800aca2:	9b03      	ldr	r3, [sp, #12]
 800aca4:	1d19      	adds	r1, r3, #4
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	9103      	str	r1, [sp, #12]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bfbb      	ittet	lt
 800acae:	425b      	neglt	r3, r3
 800acb0:	f042 0202 	orrlt.w	r2, r2, #2
 800acb4:	9307      	strge	r3, [sp, #28]
 800acb6:	9307      	strlt	r3, [sp, #28]
 800acb8:	bfb8      	it	lt
 800acba:	9204      	strlt	r2, [sp, #16]
 800acbc:	7823      	ldrb	r3, [r4, #0]
 800acbe:	2b2e      	cmp	r3, #46	; 0x2e
 800acc0:	d10c      	bne.n	800acdc <_svfiprintf_r+0x130>
 800acc2:	7863      	ldrb	r3, [r4, #1]
 800acc4:	2b2a      	cmp	r3, #42	; 0x2a
 800acc6:	d135      	bne.n	800ad34 <_svfiprintf_r+0x188>
 800acc8:	9b03      	ldr	r3, [sp, #12]
 800acca:	1d1a      	adds	r2, r3, #4
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	9203      	str	r2, [sp, #12]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	bfb8      	it	lt
 800acd4:	f04f 33ff 	movlt.w	r3, #4294967295
 800acd8:	3402      	adds	r4, #2
 800acda:	9305      	str	r3, [sp, #20]
 800acdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ada8 <_svfiprintf_r+0x1fc>
 800ace0:	7821      	ldrb	r1, [r4, #0]
 800ace2:	2203      	movs	r2, #3
 800ace4:	4650      	mov	r0, sl
 800ace6:	f7f5 fa7b 	bl	80001e0 <memchr>
 800acea:	b140      	cbz	r0, 800acfe <_svfiprintf_r+0x152>
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	eba0 000a 	sub.w	r0, r0, sl
 800acf2:	fa03 f000 	lsl.w	r0, r3, r0
 800acf6:	9b04      	ldr	r3, [sp, #16]
 800acf8:	4303      	orrs	r3, r0
 800acfa:	3401      	adds	r4, #1
 800acfc:	9304      	str	r3, [sp, #16]
 800acfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad02:	4826      	ldr	r0, [pc, #152]	; (800ad9c <_svfiprintf_r+0x1f0>)
 800ad04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad08:	2206      	movs	r2, #6
 800ad0a:	f7f5 fa69 	bl	80001e0 <memchr>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d038      	beq.n	800ad84 <_svfiprintf_r+0x1d8>
 800ad12:	4b23      	ldr	r3, [pc, #140]	; (800ada0 <_svfiprintf_r+0x1f4>)
 800ad14:	bb1b      	cbnz	r3, 800ad5e <_svfiprintf_r+0x1b2>
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	3307      	adds	r3, #7
 800ad1a:	f023 0307 	bic.w	r3, r3, #7
 800ad1e:	3308      	adds	r3, #8
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	4433      	add	r3, r6
 800ad26:	9309      	str	r3, [sp, #36]	; 0x24
 800ad28:	e767      	b.n	800abfa <_svfiprintf_r+0x4e>
 800ad2a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad2e:	460c      	mov	r4, r1
 800ad30:	2001      	movs	r0, #1
 800ad32:	e7a5      	b.n	800ac80 <_svfiprintf_r+0xd4>
 800ad34:	2300      	movs	r3, #0
 800ad36:	3401      	adds	r4, #1
 800ad38:	9305      	str	r3, [sp, #20]
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	f04f 0c0a 	mov.w	ip, #10
 800ad40:	4620      	mov	r0, r4
 800ad42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad46:	3a30      	subs	r2, #48	; 0x30
 800ad48:	2a09      	cmp	r2, #9
 800ad4a:	d903      	bls.n	800ad54 <_svfiprintf_r+0x1a8>
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d0c5      	beq.n	800acdc <_svfiprintf_r+0x130>
 800ad50:	9105      	str	r1, [sp, #20]
 800ad52:	e7c3      	b.n	800acdc <_svfiprintf_r+0x130>
 800ad54:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad58:	4604      	mov	r4, r0
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e7f0      	b.n	800ad40 <_svfiprintf_r+0x194>
 800ad5e:	ab03      	add	r3, sp, #12
 800ad60:	9300      	str	r3, [sp, #0]
 800ad62:	462a      	mov	r2, r5
 800ad64:	4b0f      	ldr	r3, [pc, #60]	; (800ada4 <_svfiprintf_r+0x1f8>)
 800ad66:	a904      	add	r1, sp, #16
 800ad68:	4638      	mov	r0, r7
 800ad6a:	f7fb ff13 	bl	8006b94 <_printf_float>
 800ad6e:	1c42      	adds	r2, r0, #1
 800ad70:	4606      	mov	r6, r0
 800ad72:	d1d6      	bne.n	800ad22 <_svfiprintf_r+0x176>
 800ad74:	89ab      	ldrh	r3, [r5, #12]
 800ad76:	065b      	lsls	r3, r3, #25
 800ad78:	f53f af2c 	bmi.w	800abd4 <_svfiprintf_r+0x28>
 800ad7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad7e:	b01d      	add	sp, #116	; 0x74
 800ad80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad84:	ab03      	add	r3, sp, #12
 800ad86:	9300      	str	r3, [sp, #0]
 800ad88:	462a      	mov	r2, r5
 800ad8a:	4b06      	ldr	r3, [pc, #24]	; (800ada4 <_svfiprintf_r+0x1f8>)
 800ad8c:	a904      	add	r1, sp, #16
 800ad8e:	4638      	mov	r0, r7
 800ad90:	f7fc f9a4 	bl	80070dc <_printf_i>
 800ad94:	e7eb      	b.n	800ad6e <_svfiprintf_r+0x1c2>
 800ad96:	bf00      	nop
 800ad98:	0800c604 	.word	0x0800c604
 800ad9c:	0800c60e 	.word	0x0800c60e
 800ada0:	08006b95 	.word	0x08006b95
 800ada4:	0800aaf5 	.word	0x0800aaf5
 800ada8:	0800c60a 	.word	0x0800c60a

0800adac <__sfputc_r>:
 800adac:	6893      	ldr	r3, [r2, #8]
 800adae:	3b01      	subs	r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	b410      	push	{r4}
 800adb4:	6093      	str	r3, [r2, #8]
 800adb6:	da08      	bge.n	800adca <__sfputc_r+0x1e>
 800adb8:	6994      	ldr	r4, [r2, #24]
 800adba:	42a3      	cmp	r3, r4
 800adbc:	db01      	blt.n	800adc2 <__sfputc_r+0x16>
 800adbe:	290a      	cmp	r1, #10
 800adc0:	d103      	bne.n	800adca <__sfputc_r+0x1e>
 800adc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adc6:	f7fd bc2f 	b.w	8008628 <__swbuf_r>
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	1c58      	adds	r0, r3, #1
 800adce:	6010      	str	r0, [r2, #0]
 800add0:	7019      	strb	r1, [r3, #0]
 800add2:	4608      	mov	r0, r1
 800add4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800add8:	4770      	bx	lr

0800adda <__sfputs_r>:
 800adda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800addc:	4606      	mov	r6, r0
 800adde:	460f      	mov	r7, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	18d5      	adds	r5, r2, r3
 800ade4:	42ac      	cmp	r4, r5
 800ade6:	d101      	bne.n	800adec <__sfputs_r+0x12>
 800ade8:	2000      	movs	r0, #0
 800adea:	e007      	b.n	800adfc <__sfputs_r+0x22>
 800adec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf0:	463a      	mov	r2, r7
 800adf2:	4630      	mov	r0, r6
 800adf4:	f7ff ffda 	bl	800adac <__sfputc_r>
 800adf8:	1c43      	adds	r3, r0, #1
 800adfa:	d1f3      	bne.n	800ade4 <__sfputs_r+0xa>
 800adfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae00 <_vfiprintf_r>:
 800ae00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae04:	460d      	mov	r5, r1
 800ae06:	b09d      	sub	sp, #116	; 0x74
 800ae08:	4614      	mov	r4, r2
 800ae0a:	4698      	mov	r8, r3
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	b118      	cbz	r0, 800ae18 <_vfiprintf_r+0x18>
 800ae10:	6983      	ldr	r3, [r0, #24]
 800ae12:	b90b      	cbnz	r3, 800ae18 <_vfiprintf_r+0x18>
 800ae14:	f7fe fc5a 	bl	80096cc <__sinit>
 800ae18:	4b89      	ldr	r3, [pc, #548]	; (800b040 <_vfiprintf_r+0x240>)
 800ae1a:	429d      	cmp	r5, r3
 800ae1c:	d11b      	bne.n	800ae56 <_vfiprintf_r+0x56>
 800ae1e:	6875      	ldr	r5, [r6, #4]
 800ae20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae22:	07d9      	lsls	r1, r3, #31
 800ae24:	d405      	bmi.n	800ae32 <_vfiprintf_r+0x32>
 800ae26:	89ab      	ldrh	r3, [r5, #12]
 800ae28:	059a      	lsls	r2, r3, #22
 800ae2a:	d402      	bmi.n	800ae32 <_vfiprintf_r+0x32>
 800ae2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae2e:	f7ff f85e 	bl	8009eee <__retarget_lock_acquire_recursive>
 800ae32:	89ab      	ldrh	r3, [r5, #12]
 800ae34:	071b      	lsls	r3, r3, #28
 800ae36:	d501      	bpl.n	800ae3c <_vfiprintf_r+0x3c>
 800ae38:	692b      	ldr	r3, [r5, #16]
 800ae3a:	b9eb      	cbnz	r3, 800ae78 <_vfiprintf_r+0x78>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	4630      	mov	r0, r6
 800ae40:	f7fd fc44 	bl	80086cc <__swsetup_r>
 800ae44:	b1c0      	cbz	r0, 800ae78 <_vfiprintf_r+0x78>
 800ae46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae48:	07dc      	lsls	r4, r3, #31
 800ae4a:	d50e      	bpl.n	800ae6a <_vfiprintf_r+0x6a>
 800ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae50:	b01d      	add	sp, #116	; 0x74
 800ae52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae56:	4b7b      	ldr	r3, [pc, #492]	; (800b044 <_vfiprintf_r+0x244>)
 800ae58:	429d      	cmp	r5, r3
 800ae5a:	d101      	bne.n	800ae60 <_vfiprintf_r+0x60>
 800ae5c:	68b5      	ldr	r5, [r6, #8]
 800ae5e:	e7df      	b.n	800ae20 <_vfiprintf_r+0x20>
 800ae60:	4b79      	ldr	r3, [pc, #484]	; (800b048 <_vfiprintf_r+0x248>)
 800ae62:	429d      	cmp	r5, r3
 800ae64:	bf08      	it	eq
 800ae66:	68f5      	ldreq	r5, [r6, #12]
 800ae68:	e7da      	b.n	800ae20 <_vfiprintf_r+0x20>
 800ae6a:	89ab      	ldrh	r3, [r5, #12]
 800ae6c:	0598      	lsls	r0, r3, #22
 800ae6e:	d4ed      	bmi.n	800ae4c <_vfiprintf_r+0x4c>
 800ae70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae72:	f7ff f83d 	bl	8009ef0 <__retarget_lock_release_recursive>
 800ae76:	e7e9      	b.n	800ae4c <_vfiprintf_r+0x4c>
 800ae78:	2300      	movs	r3, #0
 800ae7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae7c:	2320      	movs	r3, #32
 800ae7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ae82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae86:	2330      	movs	r3, #48	; 0x30
 800ae88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b04c <_vfiprintf_r+0x24c>
 800ae8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae90:	f04f 0901 	mov.w	r9, #1
 800ae94:	4623      	mov	r3, r4
 800ae96:	469a      	mov	sl, r3
 800ae98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae9c:	b10a      	cbz	r2, 800aea2 <_vfiprintf_r+0xa2>
 800ae9e:	2a25      	cmp	r2, #37	; 0x25
 800aea0:	d1f9      	bne.n	800ae96 <_vfiprintf_r+0x96>
 800aea2:	ebba 0b04 	subs.w	fp, sl, r4
 800aea6:	d00b      	beq.n	800aec0 <_vfiprintf_r+0xc0>
 800aea8:	465b      	mov	r3, fp
 800aeaa:	4622      	mov	r2, r4
 800aeac:	4629      	mov	r1, r5
 800aeae:	4630      	mov	r0, r6
 800aeb0:	f7ff ff93 	bl	800adda <__sfputs_r>
 800aeb4:	3001      	adds	r0, #1
 800aeb6:	f000 80aa 	beq.w	800b00e <_vfiprintf_r+0x20e>
 800aeba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aebc:	445a      	add	r2, fp
 800aebe:	9209      	str	r2, [sp, #36]	; 0x24
 800aec0:	f89a 3000 	ldrb.w	r3, [sl]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f000 80a2 	beq.w	800b00e <_vfiprintf_r+0x20e>
 800aeca:	2300      	movs	r3, #0
 800aecc:	f04f 32ff 	mov.w	r2, #4294967295
 800aed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aed4:	f10a 0a01 	add.w	sl, sl, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	9307      	str	r3, [sp, #28]
 800aedc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aee0:	931a      	str	r3, [sp, #104]	; 0x68
 800aee2:	4654      	mov	r4, sl
 800aee4:	2205      	movs	r2, #5
 800aee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeea:	4858      	ldr	r0, [pc, #352]	; (800b04c <_vfiprintf_r+0x24c>)
 800aeec:	f7f5 f978 	bl	80001e0 <memchr>
 800aef0:	9a04      	ldr	r2, [sp, #16]
 800aef2:	b9d8      	cbnz	r0, 800af2c <_vfiprintf_r+0x12c>
 800aef4:	06d1      	lsls	r1, r2, #27
 800aef6:	bf44      	itt	mi
 800aef8:	2320      	movmi	r3, #32
 800aefa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aefe:	0713      	lsls	r3, r2, #28
 800af00:	bf44      	itt	mi
 800af02:	232b      	movmi	r3, #43	; 0x2b
 800af04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af08:	f89a 3000 	ldrb.w	r3, [sl]
 800af0c:	2b2a      	cmp	r3, #42	; 0x2a
 800af0e:	d015      	beq.n	800af3c <_vfiprintf_r+0x13c>
 800af10:	9a07      	ldr	r2, [sp, #28]
 800af12:	4654      	mov	r4, sl
 800af14:	2000      	movs	r0, #0
 800af16:	f04f 0c0a 	mov.w	ip, #10
 800af1a:	4621      	mov	r1, r4
 800af1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af20:	3b30      	subs	r3, #48	; 0x30
 800af22:	2b09      	cmp	r3, #9
 800af24:	d94e      	bls.n	800afc4 <_vfiprintf_r+0x1c4>
 800af26:	b1b0      	cbz	r0, 800af56 <_vfiprintf_r+0x156>
 800af28:	9207      	str	r2, [sp, #28]
 800af2a:	e014      	b.n	800af56 <_vfiprintf_r+0x156>
 800af2c:	eba0 0308 	sub.w	r3, r0, r8
 800af30:	fa09 f303 	lsl.w	r3, r9, r3
 800af34:	4313      	orrs	r3, r2
 800af36:	9304      	str	r3, [sp, #16]
 800af38:	46a2      	mov	sl, r4
 800af3a:	e7d2      	b.n	800aee2 <_vfiprintf_r+0xe2>
 800af3c:	9b03      	ldr	r3, [sp, #12]
 800af3e:	1d19      	adds	r1, r3, #4
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	9103      	str	r1, [sp, #12]
 800af44:	2b00      	cmp	r3, #0
 800af46:	bfbb      	ittet	lt
 800af48:	425b      	neglt	r3, r3
 800af4a:	f042 0202 	orrlt.w	r2, r2, #2
 800af4e:	9307      	strge	r3, [sp, #28]
 800af50:	9307      	strlt	r3, [sp, #28]
 800af52:	bfb8      	it	lt
 800af54:	9204      	strlt	r2, [sp, #16]
 800af56:	7823      	ldrb	r3, [r4, #0]
 800af58:	2b2e      	cmp	r3, #46	; 0x2e
 800af5a:	d10c      	bne.n	800af76 <_vfiprintf_r+0x176>
 800af5c:	7863      	ldrb	r3, [r4, #1]
 800af5e:	2b2a      	cmp	r3, #42	; 0x2a
 800af60:	d135      	bne.n	800afce <_vfiprintf_r+0x1ce>
 800af62:	9b03      	ldr	r3, [sp, #12]
 800af64:	1d1a      	adds	r2, r3, #4
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	9203      	str	r2, [sp, #12]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	bfb8      	it	lt
 800af6e:	f04f 33ff 	movlt.w	r3, #4294967295
 800af72:	3402      	adds	r4, #2
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b05c <_vfiprintf_r+0x25c>
 800af7a:	7821      	ldrb	r1, [r4, #0]
 800af7c:	2203      	movs	r2, #3
 800af7e:	4650      	mov	r0, sl
 800af80:	f7f5 f92e 	bl	80001e0 <memchr>
 800af84:	b140      	cbz	r0, 800af98 <_vfiprintf_r+0x198>
 800af86:	2340      	movs	r3, #64	; 0x40
 800af88:	eba0 000a 	sub.w	r0, r0, sl
 800af8c:	fa03 f000 	lsl.w	r0, r3, r0
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	4303      	orrs	r3, r0
 800af94:	3401      	adds	r4, #1
 800af96:	9304      	str	r3, [sp, #16]
 800af98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af9c:	482c      	ldr	r0, [pc, #176]	; (800b050 <_vfiprintf_r+0x250>)
 800af9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afa2:	2206      	movs	r2, #6
 800afa4:	f7f5 f91c 	bl	80001e0 <memchr>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d03f      	beq.n	800b02c <_vfiprintf_r+0x22c>
 800afac:	4b29      	ldr	r3, [pc, #164]	; (800b054 <_vfiprintf_r+0x254>)
 800afae:	bb1b      	cbnz	r3, 800aff8 <_vfiprintf_r+0x1f8>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	3307      	adds	r3, #7
 800afb4:	f023 0307 	bic.w	r3, r3, #7
 800afb8:	3308      	adds	r3, #8
 800afba:	9303      	str	r3, [sp, #12]
 800afbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afbe:	443b      	add	r3, r7
 800afc0:	9309      	str	r3, [sp, #36]	; 0x24
 800afc2:	e767      	b.n	800ae94 <_vfiprintf_r+0x94>
 800afc4:	fb0c 3202 	mla	r2, ip, r2, r3
 800afc8:	460c      	mov	r4, r1
 800afca:	2001      	movs	r0, #1
 800afcc:	e7a5      	b.n	800af1a <_vfiprintf_r+0x11a>
 800afce:	2300      	movs	r3, #0
 800afd0:	3401      	adds	r4, #1
 800afd2:	9305      	str	r3, [sp, #20]
 800afd4:	4619      	mov	r1, r3
 800afd6:	f04f 0c0a 	mov.w	ip, #10
 800afda:	4620      	mov	r0, r4
 800afdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afe0:	3a30      	subs	r2, #48	; 0x30
 800afe2:	2a09      	cmp	r2, #9
 800afe4:	d903      	bls.n	800afee <_vfiprintf_r+0x1ee>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0c5      	beq.n	800af76 <_vfiprintf_r+0x176>
 800afea:	9105      	str	r1, [sp, #20]
 800afec:	e7c3      	b.n	800af76 <_vfiprintf_r+0x176>
 800afee:	fb0c 2101 	mla	r1, ip, r1, r2
 800aff2:	4604      	mov	r4, r0
 800aff4:	2301      	movs	r3, #1
 800aff6:	e7f0      	b.n	800afda <_vfiprintf_r+0x1da>
 800aff8:	ab03      	add	r3, sp, #12
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	462a      	mov	r2, r5
 800affe:	4b16      	ldr	r3, [pc, #88]	; (800b058 <_vfiprintf_r+0x258>)
 800b000:	a904      	add	r1, sp, #16
 800b002:	4630      	mov	r0, r6
 800b004:	f7fb fdc6 	bl	8006b94 <_printf_float>
 800b008:	4607      	mov	r7, r0
 800b00a:	1c78      	adds	r0, r7, #1
 800b00c:	d1d6      	bne.n	800afbc <_vfiprintf_r+0x1bc>
 800b00e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b010:	07d9      	lsls	r1, r3, #31
 800b012:	d405      	bmi.n	800b020 <_vfiprintf_r+0x220>
 800b014:	89ab      	ldrh	r3, [r5, #12]
 800b016:	059a      	lsls	r2, r3, #22
 800b018:	d402      	bmi.n	800b020 <_vfiprintf_r+0x220>
 800b01a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b01c:	f7fe ff68 	bl	8009ef0 <__retarget_lock_release_recursive>
 800b020:	89ab      	ldrh	r3, [r5, #12]
 800b022:	065b      	lsls	r3, r3, #25
 800b024:	f53f af12 	bmi.w	800ae4c <_vfiprintf_r+0x4c>
 800b028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b02a:	e711      	b.n	800ae50 <_vfiprintf_r+0x50>
 800b02c:	ab03      	add	r3, sp, #12
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	462a      	mov	r2, r5
 800b032:	4b09      	ldr	r3, [pc, #36]	; (800b058 <_vfiprintf_r+0x258>)
 800b034:	a904      	add	r1, sp, #16
 800b036:	4630      	mov	r0, r6
 800b038:	f7fc f850 	bl	80070dc <_printf_i>
 800b03c:	e7e4      	b.n	800b008 <_vfiprintf_r+0x208>
 800b03e:	bf00      	nop
 800b040:	0800c3e8 	.word	0x0800c3e8
 800b044:	0800c408 	.word	0x0800c408
 800b048:	0800c3c8 	.word	0x0800c3c8
 800b04c:	0800c604 	.word	0x0800c604
 800b050:	0800c60e 	.word	0x0800c60e
 800b054:	08006b95 	.word	0x08006b95
 800b058:	0800addb 	.word	0x0800addb
 800b05c:	0800c60a 	.word	0x0800c60a

0800b060 <nan>:
 800b060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b068 <nan+0x8>
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	00000000 	.word	0x00000000
 800b06c:	7ff80000 	.word	0x7ff80000

0800b070 <_sbrk_r>:
 800b070:	b538      	push	{r3, r4, r5, lr}
 800b072:	4d06      	ldr	r5, [pc, #24]	; (800b08c <_sbrk_r+0x1c>)
 800b074:	2300      	movs	r3, #0
 800b076:	4604      	mov	r4, r0
 800b078:	4608      	mov	r0, r1
 800b07a:	602b      	str	r3, [r5, #0]
 800b07c:	f7f7 f948 	bl	8002310 <_sbrk>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_sbrk_r+0x1a>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_sbrk_r+0x1a>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20000670 	.word	0x20000670

0800b090 <__sread>:
 800b090:	b510      	push	{r4, lr}
 800b092:	460c      	mov	r4, r1
 800b094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b098:	f000 f92e 	bl	800b2f8 <_read_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	bfab      	itete	ge
 800b0a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b0a2:	89a3      	ldrhlt	r3, [r4, #12]
 800b0a4:	181b      	addge	r3, r3, r0
 800b0a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b0aa:	bfac      	ite	ge
 800b0ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800b0ae:	81a3      	strhlt	r3, [r4, #12]
 800b0b0:	bd10      	pop	{r4, pc}

0800b0b2 <__swrite>:
 800b0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0b6:	461f      	mov	r7, r3
 800b0b8:	898b      	ldrh	r3, [r1, #12]
 800b0ba:	05db      	lsls	r3, r3, #23
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	4616      	mov	r6, r2
 800b0c2:	d505      	bpl.n	800b0d0 <__swrite+0x1e>
 800b0c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0c8:	2302      	movs	r3, #2
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f000 f8b6 	bl	800b23c <_lseek_r>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0da:	81a3      	strh	r3, [r4, #12]
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4628      	mov	r0, r5
 800b0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0e6:	f000 b835 	b.w	800b154 <_write_r>

0800b0ea <__sseek>:
 800b0ea:	b510      	push	{r4, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0f2:	f000 f8a3 	bl	800b23c <_lseek_r>
 800b0f6:	1c43      	adds	r3, r0, #1
 800b0f8:	89a3      	ldrh	r3, [r4, #12]
 800b0fa:	bf15      	itete	ne
 800b0fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b0fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b102:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b106:	81a3      	strheq	r3, [r4, #12]
 800b108:	bf18      	it	ne
 800b10a:	81a3      	strhne	r3, [r4, #12]
 800b10c:	bd10      	pop	{r4, pc}

0800b10e <__sclose>:
 800b10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b112:	f000 b84f 	b.w	800b1b4 <_close_r>

0800b116 <strncmp>:
 800b116:	b510      	push	{r4, lr}
 800b118:	b16a      	cbz	r2, 800b136 <strncmp+0x20>
 800b11a:	3901      	subs	r1, #1
 800b11c:	1884      	adds	r4, r0, r2
 800b11e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b122:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b126:	4293      	cmp	r3, r2
 800b128:	d103      	bne.n	800b132 <strncmp+0x1c>
 800b12a:	42a0      	cmp	r0, r4
 800b12c:	d001      	beq.n	800b132 <strncmp+0x1c>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1f5      	bne.n	800b11e <strncmp+0x8>
 800b132:	1a98      	subs	r0, r3, r2
 800b134:	bd10      	pop	{r4, pc}
 800b136:	4610      	mov	r0, r2
 800b138:	e7fc      	b.n	800b134 <strncmp+0x1e>

0800b13a <__ascii_wctomb>:
 800b13a:	b149      	cbz	r1, 800b150 <__ascii_wctomb+0x16>
 800b13c:	2aff      	cmp	r2, #255	; 0xff
 800b13e:	bf85      	ittet	hi
 800b140:	238a      	movhi	r3, #138	; 0x8a
 800b142:	6003      	strhi	r3, [r0, #0]
 800b144:	700a      	strbls	r2, [r1, #0]
 800b146:	f04f 30ff 	movhi.w	r0, #4294967295
 800b14a:	bf98      	it	ls
 800b14c:	2001      	movls	r0, #1
 800b14e:	4770      	bx	lr
 800b150:	4608      	mov	r0, r1
 800b152:	4770      	bx	lr

0800b154 <_write_r>:
 800b154:	b538      	push	{r3, r4, r5, lr}
 800b156:	4d07      	ldr	r5, [pc, #28]	; (800b174 <_write_r+0x20>)
 800b158:	4604      	mov	r4, r0
 800b15a:	4608      	mov	r0, r1
 800b15c:	4611      	mov	r1, r2
 800b15e:	2200      	movs	r2, #0
 800b160:	602a      	str	r2, [r5, #0]
 800b162:	461a      	mov	r2, r3
 800b164:	f7f7 f883 	bl	800226e <_write>
 800b168:	1c43      	adds	r3, r0, #1
 800b16a:	d102      	bne.n	800b172 <_write_r+0x1e>
 800b16c:	682b      	ldr	r3, [r5, #0]
 800b16e:	b103      	cbz	r3, 800b172 <_write_r+0x1e>
 800b170:	6023      	str	r3, [r4, #0]
 800b172:	bd38      	pop	{r3, r4, r5, pc}
 800b174:	20000670 	.word	0x20000670

0800b178 <__assert_func>:
 800b178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b17a:	4614      	mov	r4, r2
 800b17c:	461a      	mov	r2, r3
 800b17e:	4b09      	ldr	r3, [pc, #36]	; (800b1a4 <__assert_func+0x2c>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4605      	mov	r5, r0
 800b184:	68d8      	ldr	r0, [r3, #12]
 800b186:	b14c      	cbz	r4, 800b19c <__assert_func+0x24>
 800b188:	4b07      	ldr	r3, [pc, #28]	; (800b1a8 <__assert_func+0x30>)
 800b18a:	9100      	str	r1, [sp, #0]
 800b18c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b190:	4906      	ldr	r1, [pc, #24]	; (800b1ac <__assert_func+0x34>)
 800b192:	462b      	mov	r3, r5
 800b194:	f000 f81e 	bl	800b1d4 <fiprintf>
 800b198:	f000 f8c0 	bl	800b31c <abort>
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <__assert_func+0x38>)
 800b19e:	461c      	mov	r4, r3
 800b1a0:	e7f3      	b.n	800b18a <__assert_func+0x12>
 800b1a2:	bf00      	nop
 800b1a4:	20000294 	.word	0x20000294
 800b1a8:	0800c615 	.word	0x0800c615
 800b1ac:	0800c622 	.word	0x0800c622
 800b1b0:	0800c650 	.word	0x0800c650

0800b1b4 <_close_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	; (800b1d0 <_close_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f7 f871 	bl	80022a6 <_close>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_close_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_close_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000670 	.word	0x20000670

0800b1d4 <fiprintf>:
 800b1d4:	b40e      	push	{r1, r2, r3}
 800b1d6:	b503      	push	{r0, r1, lr}
 800b1d8:	4601      	mov	r1, r0
 800b1da:	ab03      	add	r3, sp, #12
 800b1dc:	4805      	ldr	r0, [pc, #20]	; (800b1f4 <fiprintf+0x20>)
 800b1de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e2:	6800      	ldr	r0, [r0, #0]
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	f7ff fe0b 	bl	800ae00 <_vfiprintf_r>
 800b1ea:	b002      	add	sp, #8
 800b1ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f0:	b003      	add	sp, #12
 800b1f2:	4770      	bx	lr
 800b1f4:	20000294 	.word	0x20000294

0800b1f8 <_fstat_r>:
 800b1f8:	b538      	push	{r3, r4, r5, lr}
 800b1fa:	4d07      	ldr	r5, [pc, #28]	; (800b218 <_fstat_r+0x20>)
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	4604      	mov	r4, r0
 800b200:	4608      	mov	r0, r1
 800b202:	4611      	mov	r1, r2
 800b204:	602b      	str	r3, [r5, #0]
 800b206:	f7f7 f85a 	bl	80022be <_fstat>
 800b20a:	1c43      	adds	r3, r0, #1
 800b20c:	d102      	bne.n	800b214 <_fstat_r+0x1c>
 800b20e:	682b      	ldr	r3, [r5, #0]
 800b210:	b103      	cbz	r3, 800b214 <_fstat_r+0x1c>
 800b212:	6023      	str	r3, [r4, #0]
 800b214:	bd38      	pop	{r3, r4, r5, pc}
 800b216:	bf00      	nop
 800b218:	20000670 	.word	0x20000670

0800b21c <_isatty_r>:
 800b21c:	b538      	push	{r3, r4, r5, lr}
 800b21e:	4d06      	ldr	r5, [pc, #24]	; (800b238 <_isatty_r+0x1c>)
 800b220:	2300      	movs	r3, #0
 800b222:	4604      	mov	r4, r0
 800b224:	4608      	mov	r0, r1
 800b226:	602b      	str	r3, [r5, #0]
 800b228:	f7f7 f859 	bl	80022de <_isatty>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_isatty_r+0x1a>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_isatty_r+0x1a>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	20000670 	.word	0x20000670

0800b23c <_lseek_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	; (800b25c <_lseek_r+0x20>)
 800b240:	4604      	mov	r4, r0
 800b242:	4608      	mov	r0, r1
 800b244:	4611      	mov	r1, r2
 800b246:	2200      	movs	r2, #0
 800b248:	602a      	str	r2, [r5, #0]
 800b24a:	461a      	mov	r2, r3
 800b24c:	f7f7 f852 	bl	80022f4 <_lseek>
 800b250:	1c43      	adds	r3, r0, #1
 800b252:	d102      	bne.n	800b25a <_lseek_r+0x1e>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b103      	cbz	r3, 800b25a <_lseek_r+0x1e>
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	bd38      	pop	{r3, r4, r5, pc}
 800b25c:	20000670 	.word	0x20000670

0800b260 <memmove>:
 800b260:	4288      	cmp	r0, r1
 800b262:	b510      	push	{r4, lr}
 800b264:	eb01 0402 	add.w	r4, r1, r2
 800b268:	d902      	bls.n	800b270 <memmove+0x10>
 800b26a:	4284      	cmp	r4, r0
 800b26c:	4623      	mov	r3, r4
 800b26e:	d807      	bhi.n	800b280 <memmove+0x20>
 800b270:	1e43      	subs	r3, r0, #1
 800b272:	42a1      	cmp	r1, r4
 800b274:	d008      	beq.n	800b288 <memmove+0x28>
 800b276:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b27a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b27e:	e7f8      	b.n	800b272 <memmove+0x12>
 800b280:	4402      	add	r2, r0
 800b282:	4601      	mov	r1, r0
 800b284:	428a      	cmp	r2, r1
 800b286:	d100      	bne.n	800b28a <memmove+0x2a>
 800b288:	bd10      	pop	{r4, pc}
 800b28a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b28e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b292:	e7f7      	b.n	800b284 <memmove+0x24>

0800b294 <__malloc_lock>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__malloc_lock+0x8>)
 800b296:	f7fe be2a 	b.w	8009eee <__retarget_lock_acquire_recursive>
 800b29a:	bf00      	nop
 800b29c:	20000668 	.word	0x20000668

0800b2a0 <__malloc_unlock>:
 800b2a0:	4801      	ldr	r0, [pc, #4]	; (800b2a8 <__malloc_unlock+0x8>)
 800b2a2:	f7fe be25 	b.w	8009ef0 <__retarget_lock_release_recursive>
 800b2a6:	bf00      	nop
 800b2a8:	20000668 	.word	0x20000668

0800b2ac <_realloc_r>:
 800b2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ae:	4607      	mov	r7, r0
 800b2b0:	4614      	mov	r4, r2
 800b2b2:	460e      	mov	r6, r1
 800b2b4:	b921      	cbnz	r1, 800b2c0 <_realloc_r+0x14>
 800b2b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	f7ff bbc0 	b.w	800aa40 <_malloc_r>
 800b2c0:	b922      	cbnz	r2, 800b2cc <_realloc_r+0x20>
 800b2c2:	f7ff fb6d 	bl	800a9a0 <_free_r>
 800b2c6:	4625      	mov	r5, r4
 800b2c8:	4628      	mov	r0, r5
 800b2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2cc:	f000 f82d 	bl	800b32a <_malloc_usable_size_r>
 800b2d0:	42a0      	cmp	r0, r4
 800b2d2:	d20f      	bcs.n	800b2f4 <_realloc_r+0x48>
 800b2d4:	4621      	mov	r1, r4
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	f7ff fbb2 	bl	800aa40 <_malloc_r>
 800b2dc:	4605      	mov	r5, r0
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	d0f2      	beq.n	800b2c8 <_realloc_r+0x1c>
 800b2e2:	4631      	mov	r1, r6
 800b2e4:	4622      	mov	r2, r4
 800b2e6:	f7fe fe83 	bl	8009ff0 <memcpy>
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	f7ff fb57 	bl	800a9a0 <_free_r>
 800b2f2:	e7e9      	b.n	800b2c8 <_realloc_r+0x1c>
 800b2f4:	4635      	mov	r5, r6
 800b2f6:	e7e7      	b.n	800b2c8 <_realloc_r+0x1c>

0800b2f8 <_read_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d07      	ldr	r5, [pc, #28]	; (800b318 <_read_r+0x20>)
 800b2fc:	4604      	mov	r4, r0
 800b2fe:	4608      	mov	r0, r1
 800b300:	4611      	mov	r1, r2
 800b302:	2200      	movs	r2, #0
 800b304:	602a      	str	r2, [r5, #0]
 800b306:	461a      	mov	r2, r3
 800b308:	f7f6 ff94 	bl	8002234 <_read>
 800b30c:	1c43      	adds	r3, r0, #1
 800b30e:	d102      	bne.n	800b316 <_read_r+0x1e>
 800b310:	682b      	ldr	r3, [r5, #0]
 800b312:	b103      	cbz	r3, 800b316 <_read_r+0x1e>
 800b314:	6023      	str	r3, [r4, #0]
 800b316:	bd38      	pop	{r3, r4, r5, pc}
 800b318:	20000670 	.word	0x20000670

0800b31c <abort>:
 800b31c:	b508      	push	{r3, lr}
 800b31e:	2006      	movs	r0, #6
 800b320:	f000 f834 	bl	800b38c <raise>
 800b324:	2001      	movs	r0, #1
 800b326:	f7f6 ff7b 	bl	8002220 <_exit>

0800b32a <_malloc_usable_size_r>:
 800b32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32e:	1f18      	subs	r0, r3, #4
 800b330:	2b00      	cmp	r3, #0
 800b332:	bfbc      	itt	lt
 800b334:	580b      	ldrlt	r3, [r1, r0]
 800b336:	18c0      	addlt	r0, r0, r3
 800b338:	4770      	bx	lr

0800b33a <_raise_r>:
 800b33a:	291f      	cmp	r1, #31
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4604      	mov	r4, r0
 800b340:	460d      	mov	r5, r1
 800b342:	d904      	bls.n	800b34e <_raise_r+0x14>
 800b344:	2316      	movs	r3, #22
 800b346:	6003      	str	r3, [r0, #0]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295
 800b34c:	bd38      	pop	{r3, r4, r5, pc}
 800b34e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b350:	b112      	cbz	r2, 800b358 <_raise_r+0x1e>
 800b352:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b356:	b94b      	cbnz	r3, 800b36c <_raise_r+0x32>
 800b358:	4620      	mov	r0, r4
 800b35a:	f000 f831 	bl	800b3c0 <_getpid_r>
 800b35e:	462a      	mov	r2, r5
 800b360:	4601      	mov	r1, r0
 800b362:	4620      	mov	r0, r4
 800b364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b368:	f000 b818 	b.w	800b39c <_kill_r>
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d00a      	beq.n	800b386 <_raise_r+0x4c>
 800b370:	1c59      	adds	r1, r3, #1
 800b372:	d103      	bne.n	800b37c <_raise_r+0x42>
 800b374:	2316      	movs	r3, #22
 800b376:	6003      	str	r3, [r0, #0]
 800b378:	2001      	movs	r0, #1
 800b37a:	e7e7      	b.n	800b34c <_raise_r+0x12>
 800b37c:	2400      	movs	r4, #0
 800b37e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b382:	4628      	mov	r0, r5
 800b384:	4798      	blx	r3
 800b386:	2000      	movs	r0, #0
 800b388:	e7e0      	b.n	800b34c <_raise_r+0x12>
	...

0800b38c <raise>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	; (800b398 <raise+0xc>)
 800b38e:	4601      	mov	r1, r0
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	f7ff bfd2 	b.w	800b33a <_raise_r>
 800b396:	bf00      	nop
 800b398:	20000294 	.word	0x20000294

0800b39c <_kill_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d07      	ldr	r5, [pc, #28]	; (800b3bc <_kill_r+0x20>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	f7f6 ff29 	bl	8002200 <_kill>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d102      	bne.n	800b3b8 <_kill_r+0x1c>
 800b3b2:	682b      	ldr	r3, [r5, #0]
 800b3b4:	b103      	cbz	r3, 800b3b8 <_kill_r+0x1c>
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20000670 	.word	0x20000670

0800b3c0 <_getpid_r>:
 800b3c0:	f7f6 bf16 	b.w	80021f0 <_getpid>

0800b3c4 <_init>:
 800b3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3c6:	bf00      	nop
 800b3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3ca:	bc08      	pop	{r3}
 800b3cc:	469e      	mov	lr, r3
 800b3ce:	4770      	bx	lr

0800b3d0 <_fini>:
 800b3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d2:	bf00      	nop
 800b3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d6:	bc08      	pop	{r3}
 800b3d8:	469e      	mov	lr, r3
 800b3da:	4770      	bx	lr
