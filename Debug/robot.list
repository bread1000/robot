
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b79c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800b930  0800b930  0001b930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bedc  0800bedc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bedc  0800bedc  0001bedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee4  0800bee4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee4  0800bee4  0001bee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bee8  0800bee8  0001bee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800beec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e4  0800c0d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800c0d0  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012737  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b55  00000000  00000000  0003294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ee  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001397d  00000000  00000000  0005b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da7e8  00000000  00000000  0006ef13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001496fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005674  00000000  00000000  0014974c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b914 	.word	0x0800b914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b914 	.word	0x0800b914

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fb37 	bl	80026cc <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 ff42 	bl	8001eec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f001 fc99 	bl	80029b0 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 ff32 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000200 	.word	0x20000200
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f002 fc9b 	bl	8003a44 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f002 f873 	bl	8003240 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f000 fec4 	bl	8001eec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	20000248 	.word	0x20000248
 8001188:	40026428 	.word	0x40026428

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f001 ffb6 	bl	8003112 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 fe9e 	bl	8001eec <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f001 ffee 	bl	80031a0 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 fe8f 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 fbf9 	bl	8003a44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2039      	movs	r0, #57	; 0x39
 8001290:	f001 ff09 	bl	80030a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f001 ff22 	bl	80030de <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <MX_GPIO_Init+0x174>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a55      	ldr	r2, [pc, #340]	; (800141c <MX_GPIO_Init+0x174>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x174>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <MX_GPIO_Init+0x174>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <MX_GPIO_Init+0x174>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <MX_GPIO_Init+0x174>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <MX_GPIO_Init+0x174>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <MX_GPIO_Init+0x174>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x174>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_GPIO_Init+0x174>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a40      	ldr	r2, [pc, #256]	; (800141c <MX_GPIO_Init+0x174>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x174>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_GPIO_Init+0x174>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <MX_GPIO_Init+0x174>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_GPIO_Init+0x174>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_GPIO_Init+0x174>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_GPIO_Init+0x174>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x174>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f248 0181 	movw	r1, #32897	; 0x8081
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <MX_GPIO_Init+0x178>)
 800136e:	f002 fd1d 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <MX_GPIO_Init+0x17c>)
 800137a:	f002 fd17 	bl	8003dac <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <MX_GPIO_Init+0x180>)
 8001386:	f002 fd11 	bl	8003dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x184>)
 800139e:	f002 fb51 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = rec_left_Pin|rec_right_Pin;
 80013a2:	2306      	movs	r3, #6
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x180>)
 80013b6:	f002 fb45 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 80013ba:	f248 0381 	movw	r3, #32897	; 0x8081
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_GPIO_Init+0x178>)
 80013d4:	f002 fb36 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d8:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x17c>)
 80013f2:	f002 fb27 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x180>)
 8001410:	f002 fb18 	bl	8003a44 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40021000 	.word	0x40021000

08001430 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if (ch == '\n')
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d109      	bne.n	8001452 <__io_putchar+0x22>
    {
        uint8_t ch2 = '\r';
 800143e:	230d      	movs	r3, #13
 8001440:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001442:	f107 010f 	add.w	r1, r7, #15
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	2201      	movs	r2, #1
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <__io_putchar+0x3c>)
 800144e:	f004 fcf8 	bl	8005e42 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001452:	1d39      	adds	r1, r7, #4
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <__io_putchar+0x3c>)
 800145c:	f004 fcf1 	bl	8005e42 <HAL_UART_Transmit>
    return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000378 	.word	0x20000378

08001470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d110      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3305      	adds	r3, #5
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148a:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001494:	f006 fbb0 	bl	8007bf8 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800149e:	f002 fc9e 	bl	8003dde <HAL_GPIO_TogglePin>
	{
		printf("TIM2 przerwanie\n");
		RC5_ResetPacket();
	}
*/
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000330 	.word	0x20000330
 80014b0:	200002e2 	.word	0x200002e2
 80014b4:	0800b930 	.word	0x0800b930
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	    	printf("CH 2 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
*/
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <STOP>:

void STOP(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	speed = 0;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <STOP+0x34>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <STOP+0x34>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <STOP+0x38>)
 80014e4:	f001 fe37 	bl	8003156 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <STOP+0x3c>)
 80014f0:	f002 fc5c 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <STOP+0x3c>)
 80014fc:	f002 fc56 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200002c8 	.word	0x200002c8
 8001508:	200002a8 	.word	0x200002a8
 800150c:	40020800 	.word	0x40020800

08001510 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	drive = atoi((char*)&RX_BUFFER[0]);
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 800151a:	f005 fcbd 	bl	8006e98 <atoi>
 800151e:	4603      	mov	r3, r0
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001522:	6013      	str	r3, [r2, #0]

	switch(drive)
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d821      	bhi.n	8001570 <HAL_UART_RxCpltCallback+0x60>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_UART_RxCpltCallback+0x24>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001559 	.word	0x08001559
 800153c:	08001561 	.word	0x08001561
 8001540:	08001571 	.word	0x08001571
 8001544:	08001571 	.word	0x08001571
 8001548:	08001569 	.word	0x08001569
		{
		case 0:
			STOP();
 800154c:	f7ff ffc0 	bl	80014d0 <STOP>
			printf("Odebrano: 0\n");
 8001550:	480e      	ldr	r0, [pc, #56]	; (800158c <HAL_UART_RxCpltCallback+0x7c>)
 8001552:	f006 fbd7 	bl	8007d04 <puts>
			break;
 8001556:	e00c      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 1:
			printf("Odebrano: 1\n");
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_UART_RxCpltCallback+0x80>)
 800155a:	f006 fbd3 	bl	8007d04 <puts>
			break;
 800155e:	e008      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 2:
			printf("Odebrano: 2\n");
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_UART_RxCpltCallback+0x84>)
 8001562:	f006 fbcf 	bl	8007d04 <puts>
			break;
 8001566:	e004      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 5:
			printf("Odebrano: 5\n");
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_UART_RxCpltCallback+0x88>)
 800156a:	f006 fbcb 	bl	8007d04 <puts>
			break;
 800156e:	e000      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		default:
			break;
 8001570:	bf00      	nop
		break;
	}
*/

	//wlaczenie nasluchiwania na kanale UART
	HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 8001572:	2201      	movs	r2, #1
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_RxCpltCallback+0x8c>)
 8001578:	f004 fcf5 	bl	8005f66 <HAL_UART_Receive_IT>

}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002c4 	.word	0x200002c4
 8001588:	20000000 	.word	0x20000000
 800158c:	0800b944 	.word	0x0800b944
 8001590:	0800b950 	.word	0x0800b950
 8001594:	0800b95c 	.word	0x0800b95c
 8001598:	0800b968 	.word	0x0800b968
 800159c:	20000378 	.word	0x20000378

080015a0 <PRZOD>:

void PRZOD(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <PRZOD+0x44>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <PRZOD+0x48>)
 80015ae:	f001 fdd2 	bl	8003156 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 przód
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <PRZOD+0x4c>)
 80015ba:	f002 fbf7 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 przód
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <PRZOD+0x4c>)
 80015c6:	f002 fbf1 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 przód
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <PRZOD+0x50>)
 80015d2:	f002 fbeb 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 przód
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4804      	ldr	r0, [pc, #16]	; (80015ec <PRZOD+0x4c>)
 80015dc:	f002 fbe6 	bl	8003dac <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002c8 	.word	0x200002c8
 80015e8:	200002a8 	.word	0x200002a8
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020000 	.word	0x40020000

080015f4 <LEWA>:

void LEWA(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <LEWA+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <LEWA+0x48>)
 8001602:	f001 fda8 	bl	8003156 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LEWA+0x4c>)
 800160e:	f002 fbcd 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <LEWA+0x4c>)
 800161a:	f002 fbc7 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <LEWA+0x50>)
 8001626:	f002 fbc1 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800162a:	2200      	movs	r2, #0
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <LEWA+0x4c>)
 8001630:	f002 fbbc 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002c8 	.word	0x200002c8
 800163c:	200002a8 	.word	0x200002a8
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000

08001648 <OBROT_P>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
}

void OBROT_P(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <OBROT_P+0x44>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <OBROT_P+0x48>)
 8001656:	f001 fd7e 	bl	8003156 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 800165a:	2201      	movs	r2, #1
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <OBROT_P+0x4c>)
 8001662:	f002 fba3 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <OBROT_P+0x4c>)
 800166e:	f002 fb9d 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <OBROT_P+0x50>)
 800167a:	f002 fb97 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 800167e:	2201      	movs	r2, #1
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <OBROT_P+0x4c>)
 8001684:	f002 fb92 	bl	8003dac <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002c8 	.word	0x200002c8
 8001690:	200002a8 	.word	0x200002a8
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000

0800169c <OBROT_L>:

void OBROT_L(void){
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <OBROT_L+0x44>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	480e      	ldr	r0, [pc, #56]	; (80016e4 <OBROT_L+0x48>)
 80016aa:	f001 fd54 	bl	8003156 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 80016ae:	2200      	movs	r2, #0
 80016b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <OBROT_L+0x4c>)
 80016b6:	f002 fb79 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016c0:	4809      	ldr	r0, [pc, #36]	; (80016e8 <OBROT_L+0x4c>)
 80016c2:	f002 fb73 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 80016c6:	2201      	movs	r2, #1
 80016c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <OBROT_L+0x50>)
 80016ce:	f002 fb6d 	bl	8003dac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80016d2:	2200      	movs	r2, #0
 80016d4:	2180      	movs	r1, #128	; 0x80
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <OBROT_L+0x4c>)
 80016d8:	f002 fb68 	bl	8003dac <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200002c8 	.word	0x200002c8
 80016e4:	200002a8 	.word	0x200002a8
 80016e8:	40020800 	.word	0x40020800
 80016ec:	40020000 	.word	0x40020000

080016f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f6:	f000 ff53 	bl	80025a0 <HAL_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fa:	f000 fb8d 	bl	8001e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016fe:	f7ff fdd3 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001702:	f7ff fdb1 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 8001706:	f000 fde7 	bl	80022d8 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 800170a:	f000 fea5 	bl	8002458 <MX_USART2_UART_Init>
  MX_DAC_Init();
 800170e:	f7ff fd3d 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 8001712:	f7ff fc71 	bl	8000ff8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001716:	f000 fd37 	bl	8002188 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //RC5_Init();

//  volatile static uint16_t reciver[2];
  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 800171a:	2201      	movs	r2, #1
 800171c:	499c      	ldr	r1, [pc, #624]	; (8001990 <main+0x2a0>)
 800171e:	489d      	ldr	r0, [pc, #628]	; (8001994 <main+0x2a4>)
 8001720:	f001 f818 	bl	8002754 <HAL_ADC_Start_DMA>
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)reciver, 2); //uruchomienie konwersji ADC z DMA

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10 - licznik czasu
 8001724:	489c      	ldr	r0, [pc, #624]	; (8001998 <main+0x2a8>)
 8001726:	f003 f81d 	bl	8004764 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1); //timer 2 - pomiar czujnika odleglosci
 800172a:	2100      	movs	r1, #0
 800172c:	489b      	ldr	r0, [pc, #620]	; (800199c <main+0x2ac>)
 800172e:	f003 fa05 	bl	8004b3c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8001732:	2104      	movs	r1, #4
 8001734:	4899      	ldr	r0, [pc, #612]	; (800199c <main+0x2ac>)
 8001736:	f003 fa01 	bl	8004b3c <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800173a:	2108      	movs	r1, #8
 800173c:	4897      	ldr	r0, [pc, #604]	; (800199c <main+0x2ac>)
 800173e:	f003 f8db 	bl	80048f8 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8001742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001746:	f000 ff9d 	bl	8002684 <HAL_Delay>
/*  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
*/

  HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 800174a:	2201      	movs	r2, #1
 800174c:	4994      	ldr	r1, [pc, #592]	; (80019a0 <main+0x2b0>)
 800174e:	4895      	ldr	r0, [pc, #596]	; (80019a4 <main+0x2b4>)
 8001750:	f004 fc09 	bl	8005f66 <HAL_UART_Receive_IT>
*/
	  //printf("ADC = %lu (%.3f V)\n", battery_adc, battery_voltage);
	  //HAL_Delay(300);

	  /*-----------Odczyt stanu baterii---------------*/
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001754:	4b8e      	ldr	r3, [pc, #568]	; (8001990 <main+0x2a0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001760:	ed9f 7a91 	vldr	s14, [pc, #580]	; 80019a8 <main+0x2b8>
 8001764:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001768:	eddf 6a90 	vldr	s13, [pc, #576]	; 80019ac <main+0x2bc>
 800176c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001770:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <main+0x2c0>)
 8001772:	edc3 7a00 	vstr	s15, [r3]

	  //float voltage = 3.3f * rec_left / 4096.0f;
	  //printf("ADC = %lu (%.3f V)\n", value, voltage);

	  /*--------------CZUJNIK ODLEGLOSCI----------------*/
	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001776:	2100      	movs	r1, #0
 8001778:	4888      	ldr	r0, [pc, #544]	; (800199c <main+0x2ac>)
 800177a:	f003 fde9 	bl	8005350 <HAL_TIM_ReadCapturedValue>
 800177e:	6078      	str	r0, [r7, #4]
	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8001780:	2104      	movs	r1, #4
 8001782:	4886      	ldr	r0, [pc, #536]	; (800199c <main+0x2ac>)
 8001784:	f003 fde4 	bl	8005350 <HAL_TIM_ReadCapturedValue>
 8001788:	6038      	str	r0, [r7, #0]

	  distance = (stop - start) / 58;
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	4a88      	ldr	r2, [pc, #544]	; (80019b4 <main+0x2c4>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	4a87      	ldr	r2, [pc, #540]	; (80019b8 <main+0x2c8>)
 800179a:	6013      	str	r3, [r2, #0]
	  printf("--------------%lu cm\n", distance);
 800179c:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <main+0x2c8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	4886      	ldr	r0, [pc, #536]	; (80019bc <main+0x2cc>)
 80017a4:	f006 fa28 	bl	8007bf8 <iprintf>
	  HAL_Delay(100);
 80017a8:	2064      	movs	r0, #100	; 0x64
 80017aa:	f000 ff6b 	bl	8002684 <HAL_Delay>

	  /* sygnał przychodzący od odbiorników -------------------------------------------IR */
	  /*-------sprawdzenie czy sygnal przychodzi-------*/
	  if (HAL_GPIO_ReadPin(rec_left_GPIO_Port, rec_left_Pin) == GPIO_PIN_RESET)
 80017ae:	2102      	movs	r1, #2
 80017b0:	4883      	ldr	r0, [pc, #524]	; (80019c0 <main+0x2d0>)
 80017b2:	f002 fae3 	bl	8003d7c <HAL_GPIO_ReadPin>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d109      	bne.n	80017d0 <main+0xe0>
	  {
		  rec_left = true;
 80017bc:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <main+0x2d4>)
 80017be:	2201      	movs	r2, #1
 80017c0:	701a      	strb	r2, [r3, #0]
		  printf("lewy\n");
 80017c2:	4881      	ldr	r0, [pc, #516]	; (80019c8 <main+0x2d8>)
 80017c4:	f006 fa9e 	bl	8007d04 <puts>
		  HAL_Delay(100);
 80017c8:	2064      	movs	r0, #100	; 0x64
 80017ca:	f000 ff5b 	bl	8002684 <HAL_Delay>
 80017ce:	e002      	b.n	80017d6 <main+0xe6>
	  }else
		  rec_left = false;
 80017d0:	4b7c      	ldr	r3, [pc, #496]	; (80019c4 <main+0x2d4>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(rec_right_GPIO_Port, rec_right_Pin) == GPIO_PIN_RESET)
 80017d6:	2104      	movs	r1, #4
 80017d8:	4879      	ldr	r0, [pc, #484]	; (80019c0 <main+0x2d0>)
 80017da:	f002 facf 	bl	8003d7c <HAL_GPIO_ReadPin>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d109      	bne.n	80017f8 <main+0x108>
	  {
		  rec_right = true;
 80017e4:	4b79      	ldr	r3, [pc, #484]	; (80019cc <main+0x2dc>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
		  printf("prawy\n");
 80017ea:	4879      	ldr	r0, [pc, #484]	; (80019d0 <main+0x2e0>)
 80017ec:	f006 fa8a 	bl	8007d04 <puts>
		  HAL_Delay(100);
 80017f0:	2064      	movs	r0, #100	; 0x64
 80017f2:	f000 ff47 	bl	8002684 <HAL_Delay>
 80017f6:	e002      	b.n	80017fe <main+0x10e>
	  }else
		  rec_right = false;
 80017f8:	4b74      	ldr	r3, [pc, #464]	; (80019cc <main+0x2dc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]

	  /*-----SWITCH DLA DANYCH ZE STACJI-------*/
	  switch(drive)
 80017fe:	4b75      	ldr	r3, [pc, #468]	; (80019d4 <main+0x2e4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b05      	cmp	r3, #5
 8001804:	d85e      	bhi.n	80018c4 <main+0x1d4>
 8001806:	a201      	add	r2, pc, #4	; (adr r2, 800180c <main+0x11c>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001825 	.word	0x08001825
 8001810:	08001837 	.word	0x08001837
 8001814:	0800184b 	.word	0x0800184b
 8001818:	080018c5 	.word	0x080018c5
 800181c:	080018c5 	.word	0x080018c5
 8001820:	0800185f 	.word	0x0800185f
	  {
	  	  case 0:
	  		  STOP();
 8001824:	f7ff fe54 	bl	80014d0 <STOP>
	  		  //nadawanie informacji przez UART
	  		  printf("STOP\n");
 8001828:	486b      	ldr	r0, [pc, #428]	; (80019d8 <main+0x2e8>)
 800182a:	f006 fa6b 	bl	8007d04 <puts>
	  		  drive = 10;
 800182e:	4b69      	ldr	r3, [pc, #420]	; (80019d4 <main+0x2e4>)
 8001830:	220a      	movs	r2, #10
 8001832:	601a      	str	r2, [r3, #0]
	  		  break;
 8001834:	e047      	b.n	80018c6 <main+0x1d6>
	  	  case 1:
	  		  //info, ze stacja wykryla przed soba robota
	  		  printf("--- UWAGA STACJA WYKRYLA ROBOTA PRZED SOBA\n");
 8001836:	4869      	ldr	r0, [pc, #420]	; (80019dc <main+0x2ec>)
 8001838:	f006 fa64 	bl	8007d04 <puts>
	  		  STATION = true;
 800183c:	4b68      	ldr	r3, [pc, #416]	; (80019e0 <main+0x2f0>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
	  		  drive = 10;
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <main+0x2e4>)
 8001844:	220a      	movs	r2, #10
 8001846:	601a      	str	r2, [r3, #0]
	  		  break;
 8001848:	e03d      	b.n	80018c6 <main+0x1d6>
	  	  case 2:
	  		//info, ze stacja wykryla przed soba robota
			  printf("--- ROBOT SIE ODDALIL\n");
 800184a:	4866      	ldr	r0, [pc, #408]	; (80019e4 <main+0x2f4>)
 800184c:	f006 fa5a 	bl	8007d04 <puts>
			  STATION = false;
 8001850:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <main+0x2f0>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
			  drive = 10;
 8001856:	4b5f      	ldr	r3, [pc, #380]	; (80019d4 <main+0x2e4>)
 8001858:	220a      	movs	r2, #10
 800185a:	601a      	str	r2, [r3, #0]
			  break;
 800185c:	e033      	b.n	80018c6 <main+0x1d6>
	  	  case 5:
	  		  //TRYB AUTOMATYCZNY DOKOWANIA
			  STOP();
 800185e:	f7ff fe37 	bl	80014d0 <STOP>
			  if (automat == false){
 8001862:	4b61      	ldr	r3, [pc, #388]	; (80019e8 <main+0x2f8>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f083 0301 	eor.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b00      	cmp	r3, #0
 800186e:	d008      	beq.n	8001882 <main+0x192>
				  STOP();
 8001870:	f7ff fe2e 	bl	80014d0 <STOP>
				  automat = true;
 8001874:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <main+0x2f8>)
 8001876:	2201      	movs	r2, #1
 8001878:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> ON\n");
 800187a:	485c      	ldr	r0, [pc, #368]	; (80019ec <main+0x2fc>)
 800187c:	f006 fa42 	bl	8007d04 <puts>
 8001880:	e01c      	b.n	80018bc <main+0x1cc>
			  }else{
				  STOP();
 8001882:	f7ff fe25 	bl	80014d0 <STOP>
				  spin_right = false;
 8001886:	4b5a      	ldr	r3, [pc, #360]	; (80019f0 <main+0x300>)
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 800188c:	4b59      	ldr	r3, [pc, #356]	; (80019f4 <main+0x304>)
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
				  automat = false;
 8001892:	4b55      	ldr	r3, [pc, #340]	; (80019e8 <main+0x2f8>)
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
				  left = false;
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <main+0x308>)
 800189a:	2200      	movs	r2, #0
 800189c:	701a      	strb	r2, [r3, #0]
				  left_center = false;
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <main+0x30c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
				  center = false;
 80018a4:	4b56      	ldr	r3, [pc, #344]	; (8001a00 <main+0x310>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
				  right_center = false;
 80018aa:	4b56      	ldr	r3, [pc, #344]	; (8001a04 <main+0x314>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
				  right = false;
 80018b0:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <main+0x318>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> OFF\n");
 80018b6:	4855      	ldr	r0, [pc, #340]	; (8001a0c <main+0x31c>)
 80018b8:	f006 fa24 	bl	8007d04 <puts>
			  }
			  drive = 10;
 80018bc:	4b45      	ldr	r3, [pc, #276]	; (80019d4 <main+0x2e4>)
 80018be:	220a      	movs	r2, #10
 80018c0:	601a      	str	r2, [r3, #0]
			  break;
 80018c2:	e000      	b.n	80018c6 <main+0x1d6>
		  default:
			  break;
 80018c4:	bf00      	nop
	  default:
		  break;
	  }
*/

	  if (automat == true)
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <main+0x2f8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f43f af42 	beq.w	8001754 <main+0x64>
		  printf("REC_______RIGHT = %lu\n\n", rec_right);
		  HAL_Delay(300);
*/

		  //lewy NIE
		  if (rec_left == false && spin_right == false)
 80018d0:	4b3c      	ldr	r3, [pc, #240]	; (80019c4 <main+0x2d4>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	f083 0301 	eor.w	r3, r3, #1
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d010      	beq.n	8001900 <main+0x210>
 80018de:	4b44      	ldr	r3, [pc, #272]	; (80019f0 <main+0x300>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	f083 0301 	eor.w	r3, r3, #1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <main+0x210>
		  {
			  spin_left = false;
 80018ec:	4b41      	ldr	r3, [pc, #260]	; (80019f4 <main+0x304>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
			  spin_right = true;
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <main+0x300>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
			  center = false;
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <main+0x310>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
 80018fe:	e0ac      	b.n	8001a5a <main+0x36a>
		  }
		  //lewy TAK; prawy NIE
		  else if (rec_left == true && rec_right == false && spin_left == false && STATION == false)
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <main+0x2d4>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d024      	beq.n	8001952 <main+0x262>
 8001908:	4b30      	ldr	r3, [pc, #192]	; (80019cc <main+0x2dc>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f083 0301 	eor.w	r3, r3, #1
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d01d      	beq.n	8001952 <main+0x262>
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <main+0x304>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	f083 0301 	eor.w	r3, r3, #1
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d016      	beq.n	8001952 <main+0x262>
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <main+0x2f0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f083 0301 	eor.w	r3, r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00f      	beq.n	8001952 <main+0x262>
		  {
			  left = false;
 8001932:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <main+0x308>)
 8001934:	2200      	movs	r2, #0
 8001936:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001938:	4b33      	ldr	r3, [pc, #204]	; (8001a08 <main+0x318>)
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
			  spin_left = true;
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <main+0x304>)
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <main+0x300>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
			  center = false;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <main+0x310>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e083      	b.n	8001a5a <main+0x36a>
		  }
		  //lewy TAK; prawy TAK
		  else if (rec_left == true && rec_right == true && center == false)
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <main+0x2d4>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d05a      	beq.n	8001a10 <main+0x320>
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <main+0x2dc>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d056      	beq.n	8001a10 <main+0x320>
 8001962:	4b27      	ldr	r3, [pc, #156]	; (8001a00 <main+0x310>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	f083 0301 	eor.w	r3, r3, #1
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d04f      	beq.n	8001a10 <main+0x320>
		  {
			  left = false;
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <main+0x308>)
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <main+0x318>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 800197c:	4b1d      	ldr	r3, [pc, #116]	; (80019f4 <main+0x304>)
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001982:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <main+0x300>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
			  center = true;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <main+0x310>)
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
 800198e:	e064      	b.n	8001a5a <main+0x36a>
 8001990:	200002bc 	.word	0x200002bc
 8001994:	20000200 	.word	0x20000200
 8001998:	20000330 	.word	0x20000330
 800199c:	200002e8 	.word	0x200002e8
 80019a0:	200002c4 	.word	0x200002c4
 80019a4:	20000378 	.word	0x20000378
 80019a8:	40533333 	.word	0x40533333
 80019ac:	457ff000 	.word	0x457ff000
 80019b0:	200002cc 	.word	0x200002cc
 80019b4:	8d3dcb09 	.word	0x8d3dcb09
 80019b8:	200002dc 	.word	0x200002dc
 80019bc:	0800b974 	.word	0x0800b974
 80019c0:	40020000 	.word	0x40020000
 80019c4:	200002d0 	.word	0x200002d0
 80019c8:	0800b98c 	.word	0x0800b98c
 80019cc:	200002d1 	.word	0x200002d1
 80019d0:	0800b994 	.word	0x0800b994
 80019d4:	20000000 	.word	0x20000000
 80019d8:	0800b99c 	.word	0x0800b99c
 80019dc:	0800b9a4 	.word	0x0800b9a4
 80019e0:	200002e0 	.word	0x200002e0
 80019e4:	0800b9d0 	.word	0x0800b9d0
 80019e8:	200002c0 	.word	0x200002c0
 80019ec:	0800b9e8 	.word	0x0800b9e8
 80019f0:	200002d2 	.word	0x200002d2
 80019f4:	200002d3 	.word	0x200002d3
 80019f8:	200002d6 	.word	0x200002d6
 80019fc:	200002d8 	.word	0x200002d8
 8001a00:	200002d4 	.word	0x200002d4
 8001a04:	200002d7 	.word	0x200002d7
 8001a08:	200002d5 	.word	0x200002d5
 8001a0c:	0800b9f8 	.word	0x0800b9f8
			  spin_left = false;
			  spin_right = false;
			  center = false;
		  }*/
		  //lewy TAK; prawy nie + jest przy samej stacji
		  else if (rec_left == true && rec_right == false && STATION == true && left == false)
 8001a10:	4bbc      	ldr	r3, [pc, #752]	; (8001d04 <main+0x614>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <main+0x36a>
 8001a18:	4bbb      	ldr	r3, [pc, #748]	; (8001d08 <main+0x618>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d019      	beq.n	8001a5a <main+0x36a>
 8001a26:	4bb9      	ldr	r3, [pc, #740]	; (8001d0c <main+0x61c>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <main+0x36a>
 8001a2e:	4bb8      	ldr	r3, [pc, #736]	; (8001d10 <main+0x620>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	f083 0301 	eor.w	r3, r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00e      	beq.n	8001a5a <main+0x36a>
		  {
			  left = true;
 8001a3c:	4bb4      	ldr	r3, [pc, #720]	; (8001d10 <main+0x620>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
			  right = false;
 8001a42:	4bb4      	ldr	r3, [pc, #720]	; (8001d14 <main+0x624>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
			  spin_left = false;
 8001a48:	4bb3      	ldr	r3, [pc, #716]	; (8001d18 <main+0x628>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001a4e:	4bb3      	ldr	r3, [pc, #716]	; (8001d1c <main+0x62c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
			  center = false;
 8001a54:	4bb2      	ldr	r3, [pc, #712]	; (8001d20 <main+0x630>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
		  }

		  if (STATION == true && center == true)
 8001a5a:	4bac      	ldr	r3, [pc, #688]	; (8001d0c <main+0x61c>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d006      	beq.n	8001a70 <main+0x380>
 8001a62:	4baf      	ldr	r3, [pc, #700]	; (8001d20 <main+0x630>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <main+0x380>
		  {
			  STOP();
 8001a6a:	f7ff fd31 	bl	80014d0 <STOP>
 8001a6e:	e1cb      	b.n	8001e08 <main+0x718>
		  }
		  else if (spin_left == true)
 8001a70:	4ba9      	ldr	r3, [pc, #676]	; (8001d18 <main+0x628>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d069      	beq.n	8001b4c <main+0x45c>
		  {
			  if (speed != 40)
 8001a78:	4baa      	ldr	r3, [pc, #680]	; (8001d24 <main+0x634>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b28      	cmp	r3, #40	; 0x28
 8001a7e:	f43f ae69 	beq.w	8001754 <main+0x64>
			  {
				  STOP();
 8001a82:	f7ff fd25 	bl	80014d0 <STOP>
				  OBROT_L();
 8001a86:	f7ff fe09 	bl	800169c <OBROT_L>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001a8a:	4ba6      	ldr	r3, [pc, #664]	; (8001d24 <main+0x634>)
 8001a8c:	2228      	movs	r2, #40	; 0x28
 8001a8e:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a96:	48a4      	ldr	r0, [pc, #656]	; (8001d28 <main+0x638>)
 8001a98:	f002 f988 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aa2:	48a1      	ldr	r0, [pc, #644]	; (8001d28 <main+0x638>)
 8001aa4:	f002 f982 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001aa8:	2064      	movs	r0, #100	; 0x64
 8001aaa:	f000 fdeb 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab4:	489c      	ldr	r0, [pc, #624]	; (8001d28 <main+0x638>)
 8001ab6:	f002 f979 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001aba:	2032      	movs	r0, #50	; 0x32
 8001abc:	f000 fde2 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac6:	4898      	ldr	r0, [pc, #608]	; (8001d28 <main+0x638>)
 8001ac8:	f002 f970 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001acc:	2200      	movs	r2, #0
 8001ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ad2:	4895      	ldr	r0, [pc, #596]	; (8001d28 <main+0x638>)
 8001ad4:	f002 f96a 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001ad8:	2064      	movs	r0, #100	; 0x64
 8001ada:	f000 fdd3 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae4:	4890      	ldr	r0, [pc, #576]	; (8001d28 <main+0x638>)
 8001ae6:	f002 f961 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001aea:	2032      	movs	r0, #50	; 0x32
 8001aec:	f000 fdca 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001af6:	488c      	ldr	r0, [pc, #560]	; (8001d28 <main+0x638>)
 8001af8:	f002 f958 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001afc:	2200      	movs	r2, #0
 8001afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b02:	4889      	ldr	r0, [pc, #548]	; (8001d28 <main+0x638>)
 8001b04:	f002 f952 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001b08:	2064      	movs	r0, #100	; 0x64
 8001b0a:	f000 fdbb 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b14:	4884      	ldr	r0, [pc, #528]	; (8001d28 <main+0x638>)
 8001b16:	f002 f949 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001b1a:	2032      	movs	r0, #50	; 0x32
 8001b1c:	f000 fdb2 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b26:	4880      	ldr	r0, [pc, #512]	; (8001d28 <main+0x638>)
 8001b28:	f002 f940 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b32:	487d      	ldr	r0, [pc, #500]	; (8001d28 <main+0x638>)
 8001b34:	f002 f93a 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001b38:	2064      	movs	r0, #100	; 0x64
 8001b3a:	f000 fda3 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b44:	4878      	ldr	r0, [pc, #480]	; (8001d28 <main+0x638>)
 8001b46:	f002 f931 	bl	8003dac <HAL_GPIO_WritePin>
 8001b4a:	e603      	b.n	8001754 <main+0x64>
			  }
		  }
		  else if (spin_right == true)
 8001b4c:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <main+0x62c>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d069      	beq.n	8001c28 <main+0x538>
	  	  {
			  if (speed != 40)
 8001b54:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <main+0x634>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b28      	cmp	r3, #40	; 0x28
 8001b5a:	f43f adfb 	beq.w	8001754 <main+0x64>
			  {
				  STOP();
 8001b5e:	f7ff fcb7 	bl	80014d0 <STOP>
				  OBROT_P();
 8001b62:	f7ff fd71 	bl	8001648 <OBROT_P>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001b66:	4b6f      	ldr	r3, [pc, #444]	; (8001d24 <main+0x634>)
 8001b68:	2228      	movs	r2, #40	; 0x28
 8001b6a:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b72:	486d      	ldr	r0, [pc, #436]	; (8001d28 <main+0x638>)
 8001b74:	f002 f91a 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b7e:	486a      	ldr	r0, [pc, #424]	; (8001d28 <main+0x638>)
 8001b80:	f002 f914 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001b84:	2064      	movs	r0, #100	; 0x64
 8001b86:	f000 fd7d 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b90:	4865      	ldr	r0, [pc, #404]	; (8001d28 <main+0x638>)
 8001b92:	f002 f90b 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001b96:	2032      	movs	r0, #50	; 0x32
 8001b98:	f000 fd74 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ba2:	4861      	ldr	r0, [pc, #388]	; (8001d28 <main+0x638>)
 8001ba4:	f002 f902 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bae:	485e      	ldr	r0, [pc, #376]	; (8001d28 <main+0x638>)
 8001bb0:	f002 f8fc 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001bb4:	2064      	movs	r0, #100	; 0x64
 8001bb6:	f000 fd65 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc0:	4859      	ldr	r0, [pc, #356]	; (8001d28 <main+0x638>)
 8001bc2:	f002 f8f3 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001bc6:	2032      	movs	r0, #50	; 0x32
 8001bc8:	f000 fd5c 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd2:	4855      	ldr	r0, [pc, #340]	; (8001d28 <main+0x638>)
 8001bd4:	f002 f8ea 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bde:	4852      	ldr	r0, [pc, #328]	; (8001d28 <main+0x638>)
 8001be0:	f002 f8e4 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001be4:	2064      	movs	r0, #100	; 0x64
 8001be6:	f000 fd4d 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bea:	2200      	movs	r2, #0
 8001bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf0:	484d      	ldr	r0, [pc, #308]	; (8001d28 <main+0x638>)
 8001bf2:	f002 f8db 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001bf6:	2032      	movs	r0, #50	; 0x32
 8001bf8:	f000 fd44 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c02:	4849      	ldr	r0, [pc, #292]	; (8001d28 <main+0x638>)
 8001c04:	f002 f8d2 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c0e:	4846      	ldr	r0, [pc, #280]	; (8001d28 <main+0x638>)
 8001c10:	f002 f8cc 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c14:	2064      	movs	r0, #100	; 0x64
 8001c16:	f000 fd35 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c20:	4841      	ldr	r0, [pc, #260]	; (8001d28 <main+0x638>)
 8001c22:	f002 f8c3 	bl	8003dac <HAL_GPIO_WritePin>
 8001c26:	e595      	b.n	8001754 <main+0x64>
			  }
	  	  }
		  else if (left == true)
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <main+0x620>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d07d      	beq.n	8001d2c <main+0x63c>
		  {
			  if (speed != 40)
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <main+0x634>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b28      	cmp	r3, #40	; 0x28
 8001c36:	f43f ad8d 	beq.w	8001754 <main+0x64>
			  {
				  STOP();
 8001c3a:	f7ff fc49 	bl	80014d0 <STOP>
				  LEWA();
 8001c3e:	f7ff fcd9 	bl	80015f4 <LEWA>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <main+0x634>)
 8001c44:	2228      	movs	r2, #40	; 0x28
 8001c46:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4e:	4836      	ldr	r0, [pc, #216]	; (8001d28 <main+0x638>)
 8001c50:	f002 f8ac 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c54:	2200      	movs	r2, #0
 8001c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c5a:	4833      	ldr	r0, [pc, #204]	; (8001d28 <main+0x638>)
 8001c5c:	f002 f8a6 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c60:	2064      	movs	r0, #100	; 0x64
 8001c62:	f000 fd0f 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c66:	2200      	movs	r2, #0
 8001c68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c6c:	482e      	ldr	r0, [pc, #184]	; (8001d28 <main+0x638>)
 8001c6e:	f002 f89d 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001c72:	2032      	movs	r0, #50	; 0x32
 8001c74:	f000 fd06 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7e:	482a      	ldr	r0, [pc, #168]	; (8001d28 <main+0x638>)
 8001c80:	f002 f894 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c8a:	4827      	ldr	r0, [pc, #156]	; (8001d28 <main+0x638>)
 8001c8c:	f002 f88e 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c90:	2064      	movs	r0, #100	; 0x64
 8001c92:	f000 fcf7 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9c:	4822      	ldr	r0, [pc, #136]	; (8001d28 <main+0x638>)
 8001c9e:	f002 f885 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001ca2:	2032      	movs	r0, #50	; 0x32
 8001ca4:	f000 fcee 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cae:	481e      	ldr	r0, [pc, #120]	; (8001d28 <main+0x638>)
 8001cb0:	f002 f87c 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cba:	481b      	ldr	r0, [pc, #108]	; (8001d28 <main+0x638>)
 8001cbc:	f002 f876 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001cc0:	2064      	movs	r0, #100	; 0x64
 8001cc2:	f000 fcdf 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ccc:	4816      	ldr	r0, [pc, #88]	; (8001d28 <main+0x638>)
 8001cce:	f002 f86d 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001cd2:	2032      	movs	r0, #50	; 0x32
 8001cd4:	f000 fcd6 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <main+0x638>)
 8001ce0:	f002 f864 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <main+0x638>)
 8001cec:	f002 f85e 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001cf0:	2064      	movs	r0, #100	; 0x64
 8001cf2:	f000 fcc7 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cfc:	480a      	ldr	r0, [pc, #40]	; (8001d28 <main+0x638>)
 8001cfe:	f002 f855 	bl	8003dac <HAL_GPIO_WritePin>
 8001d02:	e527      	b.n	8001754 <main+0x64>
 8001d04:	200002d0 	.word	0x200002d0
 8001d08:	200002d1 	.word	0x200002d1
 8001d0c:	200002e0 	.word	0x200002e0
 8001d10:	200002d6 	.word	0x200002d6
 8001d14:	200002d5 	.word	0x200002d5
 8001d18:	200002d3 	.word	0x200002d3
 8001d1c:	200002d2 	.word	0x200002d2
 8001d20:	200002d4 	.word	0x200002d4
 8001d24:	200002c8 	.word	0x200002c8
 8001d28:	40020800 	.word	0x40020800
			  }
		  }
	  	  else if (center == true)
 8001d2c:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <main+0x71c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f43f ad0f 	beq.w	8001754 <main+0x64>
		  {
			  if (speed != 40)
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <main+0x720>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b28      	cmp	r3, #40	; 0x28
 8001d3c:	f43f ad0a 	beq.w	8001754 <main+0x64>
			  {
				  STOP();
 8001d40:	f7ff fbc6 	bl	80014d0 <STOP>
				  PRZOD();
 8001d44:	f7ff fc2c 	bl	80015a0 <PRZOD>
				  //zwiekszenie predkosci x3
				  speed = 40;
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <main+0x720>)
 8001d4a:	2228      	movs	r2, #40	; 0x28
 8001d4c:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d54:	482f      	ldr	r0, [pc, #188]	; (8001e14 <main+0x724>)
 8001d56:	f002 f829 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d60:	482c      	ldr	r0, [pc, #176]	; (8001e14 <main+0x724>)
 8001d62:	f002 f823 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001d66:	2064      	movs	r0, #100	; 0x64
 8001d68:	f000 fc8c 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d72:	4828      	ldr	r0, [pc, #160]	; (8001e14 <main+0x724>)
 8001d74:	f002 f81a 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001d78:	2032      	movs	r0, #50	; 0x32
 8001d7a:	f000 fc83 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d84:	4823      	ldr	r0, [pc, #140]	; (8001e14 <main+0x724>)
 8001d86:	f002 f811 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d90:	4820      	ldr	r0, [pc, #128]	; (8001e14 <main+0x724>)
 8001d92:	f002 f80b 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001d96:	2064      	movs	r0, #100	; 0x64
 8001d98:	f000 fc74 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <main+0x724>)
 8001da4:	f002 f802 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001da8:	2032      	movs	r0, #50	; 0x32
 8001daa:	f000 fc6b 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001db4:	4817      	ldr	r0, [pc, #92]	; (8001e14 <main+0x724>)
 8001db6:	f001 fff9 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dc0:	4814      	ldr	r0, [pc, #80]	; (8001e14 <main+0x724>)
 8001dc2:	f001 fff3 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001dc6:	2064      	movs	r0, #100	; 0x64
 8001dc8:	f000 fc5c 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd2:	4810      	ldr	r0, [pc, #64]	; (8001e14 <main+0x724>)
 8001dd4:	f001 ffea 	bl	8003dac <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001dd8:	2032      	movs	r0, #50	; 0x32
 8001dda:	f000 fc53 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <main+0x724>)
 8001de6:	f001 ffe1 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001dea:	2200      	movs	r2, #0
 8001dec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001df0:	4808      	ldr	r0, [pc, #32]	; (8001e14 <main+0x724>)
 8001df2:	f001 ffdb 	bl	8003dac <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001df6:	2064      	movs	r0, #100	; 0x64
 8001df8:	f000 fc44 	bl	8002684 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e02:	4804      	ldr	r0, [pc, #16]	; (8001e14 <main+0x724>)
 8001e04:	f001 ffd2 	bl	8003dac <HAL_GPIO_WritePin>
  {
 8001e08:	e4a4      	b.n	8001754 <main+0x64>
 8001e0a:	bf00      	nop
 8001e0c:	200002d4 	.word	0x200002d4
 8001e10:	200002c8 	.word	0x200002c8
 8001e14:	40020800 	.word	0x40020800

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b094      	sub	sp, #80	; 0x50
 8001e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1e:	f107 0320 	add.w	r3, r7, #32
 8001e22:	2230      	movs	r2, #48	; 0x30
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f005 f864 	bl	8006ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e2c:	f107 030c 	add.w	r3, r7, #12
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <SystemClock_Config+0xcc>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	607b      	str	r3, [r7, #4]
 8001e5c:	4b22      	ldr	r3, [pc, #136]	; (8001ee8 <SystemClock_Config+0xd0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <SystemClock_Config+0xd0>)
 8001e62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <SystemClock_Config+0xd0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e74:	2302      	movs	r3, #2
 8001e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e7c:	2310      	movs	r3, #16
 8001e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e84:	2300      	movs	r3, #0
 8001e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e88:	2308      	movs	r3, #8
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001e8c:	23a0      	movs	r3, #160	; 0xa0
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e94:	2304      	movs	r3, #4
 8001e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 ffb9 	bl	8003e14 <HAL_RCC_OscConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ea8:	f000 f820 	bl	8001eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eac:	230f      	movs	r3, #15
 8001eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001eb8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ebe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2105      	movs	r1, #5
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f002 fa1a 	bl	8004304 <HAL_RCC_ClockConfig>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ed6:	f000 f809 	bl	8001eec <Error_Handler>
  }
}
 8001eda:	bf00      	nop
 8001edc:	3750      	adds	r7, #80	; 0x50
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40007000 	.word	0x40007000

08001eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef0:	b672      	cpsid	i
}
 8001ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <Error_Handler+0x8>
	...

08001ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efe:	2300      	movs	r3, #0
 8001f00:	607b      	str	r3, [r7, #4]
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	4a08      	ldr	r2, [pc, #32]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2a:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <NMI_Handler+0x4>

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 fb56 	bl	8002644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fa2:	f002 fea7 	bl	8004cf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000330 	.word	0x20000330

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f004 f807 	bl	8005fc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000378 	.word	0x20000378

08001fc4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA2_Stream1_IRQHandler+0x10>)
 8001fca:	f001 fad1 	bl	8003570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000248 	.word	0x20000248

08001fd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
	return 1;
 8001fdc:	2301      	movs	r3, #1
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <_kill>:

int _kill(int pid, int sig)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ff2:	f004 ff55 	bl	8006ea0 <__errno>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2216      	movs	r2, #22
 8001ffa:	601a      	str	r2, [r3, #0]
	return -1;
 8001ffc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_exit>:

void _exit (int status)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002010:	f04f 31ff 	mov.w	r1, #4294967295
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff ffe7 	bl	8001fe8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800201a:	e7fe      	b.n	800201a <_exit+0x12>

0800201c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	e00a      	b.n	8002044 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800202e:	f3af 8000 	nop.w
 8002032:	4601      	mov	r1, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	b2ca      	uxtb	r2, r1
 800203c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	3301      	adds	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	dbf0      	blt.n	800202e <_read+0x12>
	}

return len;
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b086      	sub	sp, #24
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
 8002066:	e009      	b.n	800207c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	60ba      	str	r2, [r7, #8]
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9dd 	bl	8001430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	3301      	adds	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	dbf1      	blt.n	8002068 <_write+0x12>
	}
	return len;
 8002084:	687b      	ldr	r3, [r7, #4]
}
 8002086:	4618      	mov	r0, r3
 8002088:	3718      	adds	r7, #24
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <_close>:

int _close(int file)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
	return -1;
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020b6:	605a      	str	r2, [r3, #4]
	return 0;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <_isatty>:

int _isatty(int file)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
	return 1;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
	return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002100:	4a14      	ldr	r2, [pc, #80]	; (8002154 <_sbrk+0x5c>)
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <_sbrk+0x60>)
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800210c:	4b13      	ldr	r3, [pc, #76]	; (800215c <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <_sbrk+0x64>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <_sbrk+0x68>)
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	429a      	cmp	r2, r3
 8002126:	d207      	bcs.n	8002138 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002128:	f004 feba 	bl	8006ea0 <__errno>
 800212c:	4603      	mov	r3, r0
 800212e:	220c      	movs	r2, #12
 8002130:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
 8002136:	e009      	b.n	800214c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <_sbrk+0x64>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <_sbrk+0x64>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4413      	add	r3, r2
 8002146:	4a05      	ldr	r2, [pc, #20]	; (800215c <_sbrk+0x64>)
 8002148:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800214a:	68fb      	ldr	r3, [r7, #12]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20020000 	.word	0x20020000
 8002158:	00000400 	.word	0x00000400
 800215c:	200002e4 	.word	0x200002e4
 8002160:	200003d0 	.word	0x200003d0

08002164 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SystemInit+0x20>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <SystemInit+0x20>)
 8002170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b092      	sub	sp, #72	; 0x48
 800218c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800218e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800219c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	609a      	str	r2, [r3, #8]
 80021b2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b4:	1d3b      	adds	r3, r7, #4
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	60da      	str	r2, [r3, #12]
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	615a      	str	r2, [r3, #20]
 80021c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021d0:	224f      	movs	r2, #79	; 0x4f
 80021d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80021da:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80021e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e2:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e8:	4b3a      	ldr	r3, [pc, #232]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ee:	4839      	ldr	r0, [pc, #228]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80021f0:	f002 fa68 	bl	80046c4 <HAL_TIM_Base_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80021fa:	f7ff fe77 	bl	8001eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002208:	4619      	mov	r1, r3
 800220a:	4832      	ldr	r0, [pc, #200]	; (80022d4 <MX_TIM2_Init+0x14c>)
 800220c:	f002 ffd8 	bl	80051c0 <HAL_TIM_ConfigClockSource>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002216:	f7ff fe69 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800221a:	482e      	ldr	r0, [pc, #184]	; (80022d4 <MX_TIM2_Init+0x14c>)
 800221c:	f002 fc34 	bl	8004a88 <HAL_TIM_IC_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8002226:	f7ff fe61 	bl	8001eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800222a:	482a      	ldr	r0, [pc, #168]	; (80022d4 <MX_TIM2_Init+0x14c>)
 800222c:	f002 fb0a 	bl	8004844 <HAL_TIM_PWM_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002236:	f7ff fe59 	bl	8001eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002242:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002246:	4619      	mov	r1, r3
 8002248:	4822      	ldr	r0, [pc, #136]	; (80022d4 <MX_TIM2_Init+0x14c>)
 800224a:	f003 fd1d 	bl	8005c88 <HAL_TIMEx_MasterConfigSynchronization>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8002254:	f7ff fe4a 	bl	8001eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800225c:	2301      	movs	r3, #1
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002260:	2300      	movs	r3, #0
 8002262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002268:	f107 0320 	add.w	r3, r7, #32
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	4818      	ldr	r0, [pc, #96]	; (80022d4 <MX_TIM2_Init+0x14c>)
 8002272:	f002 fe47 	bl	8004f04 <HAL_TIM_IC_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 800227c:	f7ff fe36 	bl	8001eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002284:	2302      	movs	r3, #2
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002288:	f107 0320 	add.w	r3, r7, #32
 800228c:	2204      	movs	r2, #4
 800228e:	4619      	mov	r1, r3
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <MX_TIM2_Init+0x14c>)
 8002292:	f002 fe37 	bl	8004f04 <HAL_TIM_IC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800229c:	f7ff fe26 	bl	8001eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022a0:	2360      	movs	r3, #96	; 0x60
 80022a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80022a4:	230a      	movs	r3, #10
 80022a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2208      	movs	r2, #8
 80022b4:	4619      	mov	r1, r3
 80022b6:	4807      	ldr	r0, [pc, #28]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80022b8:	f002 fec0 	bl	800503c <HAL_TIM_PWM_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 80022c2:	f7ff fe13 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <MX_TIM2_Init+0x14c>)
 80022c8:	f000 f88e 	bl	80023e8 <HAL_TIM_MspPostInit>

}
 80022cc:	bf00      	nop
 80022ce:	3748      	adds	r7, #72	; 0x48
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200002e8 	.word	0x200002e8

080022d8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_TIM10_Init+0x40>)
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <MX_TIM10_Init+0x44>)
 80022e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 80022e2:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <MX_TIM10_Init+0x40>)
 80022e4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80022e8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_TIM10_Init+0x40>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_TIM10_Init+0x40>)
 80022f2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80022f6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <MX_TIM10_Init+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_TIM10_Init+0x40>)
 8002300:	2200      	movs	r2, #0
 8002302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002304:	4804      	ldr	r0, [pc, #16]	; (8002318 <MX_TIM10_Init+0x40>)
 8002306:	f002 f9dd 	bl	80046c4 <HAL_TIM_Base_Init>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002310:	f7ff fdec 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	bd80      	pop	{r7, pc}
 8002318:	20000330 	.word	0x20000330
 800231c:	40014400 	.word	0x40014400

08002320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002340:	d12c      	bne.n	800239c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	4a24      	ldr	r2, [pc, #144]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6413      	str	r3, [r2, #64]	; 0x40
 8002352:	4b22      	ldr	r3, [pc, #136]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800237a:	2301      	movs	r3, #1
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800238a:	2301      	movs	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4812      	ldr	r0, [pc, #72]	; (80023e0 <HAL_TIM_Base_MspInit+0xc0>)
 8002396:	f001 fb55 	bl	8003a44 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800239a:	e01a      	b.n	80023d2 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM10)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_TIM_Base_MspInit+0xc4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d115      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	60bb      	str	r3, [r7, #8]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	6453      	str	r3, [r2, #68]	; 0x44
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_TIM_Base_MspInit+0xbc>)
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	60bb      	str	r3, [r7, #8]
 80023c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2102      	movs	r1, #2
 80023c6:	2019      	movs	r0, #25
 80023c8:	f000 fe6d 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023cc:	2019      	movs	r0, #25
 80023ce:	f000 fe86 	bl	80030de <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40023800 	.word	0x40023800
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40014400 	.word	0x40014400

080023e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d11e      	bne.n	8002448 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60bb      	str	r3, [r7, #8]
 800240e:	4b10      	ldr	r3, [pc, #64]	; (8002450 <HAL_TIM_MspPostInit+0x68>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4a0f      	ldr	r2, [pc, #60]	; (8002450 <HAL_TIM_MspPostInit+0x68>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	6313      	str	r3, [r2, #48]	; 0x30
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_TIM_MspPostInit+0x68>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800242c:	2302      	movs	r3, #2
 800242e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	2300      	movs	r3, #0
 8002436:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002438:	2301      	movs	r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 030c 	add.w	r3, r7, #12
 8002440:	4619      	mov	r1, r3
 8002442:	4804      	ldr	r0, [pc, #16]	; (8002454 <HAL_TIM_MspPostInit+0x6c>)
 8002444:	f001 fafe 	bl	8003a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800
 8002454:	40020400 	.word	0x40020400

08002458 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_USART2_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART2_UART_Init+0x4c>)
 8002490:	f003 fc8a 	bl	8005da8 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f7ff fd27 	bl	8001eec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000378 	.word	0x20000378
 80024a8:	40004400 	.word	0x40004400

080024ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	; 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
 80024bc:	605a      	str	r2, [r3, #4]
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a1d      	ldr	r2, [pc, #116]	; (8002540 <HAL_UART_MspInit+0x94>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d133      	bne.n	8002536 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	4b15      	ldr	r3, [pc, #84]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	4a14      	ldr	r2, [pc, #80]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024f4:	f043 0308 	orr.w	r3, r3, #8
 80024f8:	6313      	str	r3, [r2, #48]	; 0x30
 80024fa:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_UART_MspInit+0x98>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002506:	2360      	movs	r3, #96	; 0x60
 8002508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250a:	2302      	movs	r3, #2
 800250c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002512:	2303      	movs	r3, #3
 8002514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002516:	2307      	movs	r3, #7
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	4619      	mov	r1, r3
 8002520:	4809      	ldr	r0, [pc, #36]	; (8002548 <HAL_UART_MspInit+0x9c>)
 8002522:	f001 fa8f 	bl	8003a44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2103      	movs	r1, #3
 800252a:	2026      	movs	r0, #38	; 0x26
 800252c:	f000 fdbb 	bl	80030a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002530:	2026      	movs	r0, #38	; 0x26
 8002532:	f000 fdd4 	bl	80030de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002536:	bf00      	nop
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40004400 	.word	0x40004400
 8002544:	40023800 	.word	0x40023800
 8002548:	40020c00 	.word	0x40020c00

0800254c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800254c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002550:	480d      	ldr	r0, [pc, #52]	; (8002588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002552:	490e      	ldr	r1, [pc, #56]	; (800258c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002554:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002558:	e002      	b.n	8002560 <LoopCopyDataInit>

0800255a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800255a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800255c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800255e:	3304      	adds	r3, #4

08002560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002564:	d3f9      	bcc.n	800255a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002566:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002568:	4c0b      	ldr	r4, [pc, #44]	; (8002598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800256a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800256c:	e001      	b.n	8002572 <LoopFillZerobss>

0800256e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800256e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002570:	3204      	adds	r2, #4

08002572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002574:	d3fb      	bcc.n	800256e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002576:	f7ff fdf5 	bl	8002164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800257a:	f004 fc97 	bl	8006eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800257e:	f7ff f8b7 	bl	80016f0 <main>
  bx  lr    
 8002582:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002584:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800258c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002590:	0800beec 	.word	0x0800beec
  ldr r2, =_sbss
 8002594:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002598:	200003d0 	.word	0x200003d0

0800259c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800259c:	e7fe      	b.n	800259c <ADC_IRQHandler>
	...

080025a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0d      	ldr	r2, [pc, #52]	; (80025e0 <HAL_Init+0x40>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <HAL_Init+0x40>)
 80025b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_Init+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_Init+0x40>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c8:	2003      	movs	r0, #3
 80025ca:	f000 fd61 	bl	8003090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f000 f808 	bl	80025e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025d4:	f7ff fc90 	bl	8001ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00

080025e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_InitTick+0x54>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_InitTick+0x58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fd79 	bl	80030fa <HAL_SYSTICK_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e00e      	b.n	8002630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b0f      	cmp	r3, #15
 8002616:	d80a      	bhi.n	800262e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002618:	2200      	movs	r2, #0
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	f04f 30ff 	mov.w	r0, #4294967295
 8002620:	f000 fd41 	bl	80030a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002624:	4a06      	ldr	r2, [pc, #24]	; (8002640 <HAL_InitTick+0x5c>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	e000      	b.n	8002630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	20000004 	.word	0x20000004
 800263c:	2000000c 	.word	0x2000000c
 8002640:	20000008 	.word	0x20000008

08002644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_IncTick+0x20>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	461a      	mov	r2, r3
 800264e:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_IncTick+0x24>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4413      	add	r3, r2
 8002654:	4a04      	ldr	r2, [pc, #16]	; (8002668 <HAL_IncTick+0x24>)
 8002656:	6013      	str	r3, [r2, #0]
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	2000000c 	.word	0x2000000c
 8002668:	200003bc 	.word	0x200003bc

0800266c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return uwTick;
 8002670:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_GetTick+0x14>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	200003bc 	.word	0x200003bc

08002684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800268c:	f7ff ffee 	bl	800266c <HAL_GetTick>
 8002690:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d005      	beq.n	80026aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_Delay+0x44>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026aa:	bf00      	nop
 80026ac:	f7ff ffde 	bl	800266c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d8f7      	bhi.n	80026ac <HAL_Delay+0x28>
  {
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000000c 	.word	0x2000000c

080026cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e033      	b.n	800274a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d109      	bne.n	80026fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7fe fcd6 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002712:	f023 0302 	bic.w	r3, r3, #2
 8002716:	f043 0202 	orr.w	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fa68 	bl	8002bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	f043 0201 	orr.w	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	641a      	str	r2, [r3, #64]	; 0x40
 800273a:	e001      	b.n	8002740 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Start_DMA+0x1e>
 800276e:	2302      	movs	r3, #2
 8002770:	e0e9      	b.n	8002946 <HAL_ADC_Start_DMA+0x1f2>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	2b01      	cmp	r3, #1
 8002786:	d018      	beq.n	80027ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f042 0201 	orr.w	r2, r2, #1
 8002796:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002798:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_ADC_Start_DMA+0x1fc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a6d      	ldr	r2, [pc, #436]	; (8002954 <HAL_ADC_Start_DMA+0x200>)
 800279e:	fba2 2303 	umull	r2, r3, r2, r3
 80027a2:	0c9a      	lsrs	r2, r3, #18
 80027a4:	4613      	mov	r3, r2
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	4413      	add	r3, r2
 80027aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027ac:	e002      	b.n	80027b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f9      	bne.n	80027ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c8:	d107      	bne.n	80027da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	f040 80a1 	bne.w	800292c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d007      	beq.n	800281c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002814:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002828:	d106      	bne.n	8002838 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f023 0206 	bic.w	r2, r3, #6
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	645a      	str	r2, [r3, #68]	; 0x44
 8002836:	e002      	b.n	800283e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002846:	4b44      	ldr	r3, [pc, #272]	; (8002958 <HAL_ADC_Start_DMA+0x204>)
 8002848:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	4a43      	ldr	r2, [pc, #268]	; (800295c <HAL_ADC_Start_DMA+0x208>)
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	4a42      	ldr	r2, [pc, #264]	; (8002960 <HAL_ADC_Start_DMA+0x20c>)
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285e:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_ADC_Start_DMA+0x210>)
 8002860:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800286a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800287a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800288a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	334c      	adds	r3, #76	; 0x4c
 8002896:	4619      	mov	r1, r3
 8002898:	68ba      	ldr	r2, [r7, #8]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f000 fd7e 	bl	800339c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 031f 	and.w	r3, r3, #31
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d12a      	bne.n	8002902 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_ADC_Start_DMA+0x214>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d015      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x18e>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2c      	ldr	r2, [pc, #176]	; (800296c <HAL_ADC_Start_DMA+0x218>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d105      	bne.n	80028cc <HAL_ADC_Start_DMA+0x178>
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_ADC_Start_DMA+0x204>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <HAL_ADC_Start_DMA+0x21c>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d136      	bne.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_ADC_Start_DMA+0x204>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 0310 	and.w	r3, r3, #16
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d130      	bne.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d129      	bne.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80028fe:	609a      	str	r2, [r3, #8]
 8002900:	e020      	b.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a18      	ldr	r2, [pc, #96]	; (8002968 <HAL_ADC_Start_DMA+0x214>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d11b      	bne.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d114      	bne.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	e00b      	b.n	8002944 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f043 0210 	orr.w	r2, r3, #16
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000004 	.word	0x20000004
 8002954:	431bde83 	.word	0x431bde83
 8002958:	40012300 	.word	0x40012300
 800295c:	08002ded 	.word	0x08002ded
 8002960:	08002ea7 	.word	0x08002ea7
 8002964:	08002ec3 	.word	0x08002ec3
 8002968:	40012000 	.word	0x40012000
 800296c:	40012100 	.word	0x40012100
 8002970:	40012200 	.word	0x40012200

08002974 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d101      	bne.n	80029cc <HAL_ADC_ConfigChannel+0x1c>
 80029c8:	2302      	movs	r3, #2
 80029ca:	e105      	b.n	8002bd8 <HAL_ADC_ConfigChannel+0x228>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d925      	bls.n	8002a28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4613      	mov	r3, r2
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	4413      	add	r3, r2
 80029f0:	3b1e      	subs	r3, #30
 80029f2:	2207      	movs	r2, #7
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43da      	mvns	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	400a      	ands	r2, r1
 8002a00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68d9      	ldr	r1, [r3, #12]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	4603      	mov	r3, r0
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4403      	add	r3, r0
 8002a1a:	3b1e      	subs	r3, #30
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	e022      	b.n	8002a6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6919      	ldr	r1, [r3, #16]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	461a      	mov	r2, r3
 8002a36:	4613      	mov	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	2207      	movs	r2, #7
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	400a      	ands	r2, r1
 8002a4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689a      	ldr	r2, [r3, #8]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	4603      	mov	r3, r0
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4403      	add	r3, r0
 8002a64:	409a      	lsls	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d824      	bhi.n	8002ac0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	3b05      	subs	r3, #5
 8002a88:	221f      	movs	r2, #31
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	400a      	ands	r2, r1
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	4413      	add	r3, r2
 8002ab0:	3b05      	subs	r3, #5
 8002ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	430a      	orrs	r2, r1
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34
 8002abe:	e04c      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d824      	bhi.n	8002b12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685a      	ldr	r2, [r3, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3b23      	subs	r3, #35	; 0x23
 8002ada:	221f      	movs	r2, #31
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	3b23      	subs	r3, #35	; 0x23
 8002b04:	fa00 f203 	lsl.w	r2, r0, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b10:	e023      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	3b41      	subs	r3, #65	; 0x41
 8002b24:	221f      	movs	r2, #31
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	400a      	ands	r2, r1
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b41      	subs	r3, #65	; 0x41
 8002b4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_ADC_ConfigChannel+0x234>)
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a21      	ldr	r2, [pc, #132]	; (8002be8 <HAL_ADC_ConfigChannel+0x238>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d109      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1cc>
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b12      	cmp	r3, #18
 8002b6e:	d105      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	; (8002be8 <HAL_ADC_ConfigChannel+0x238>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d123      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x21e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d003      	beq.n	8002b96 <HAL_ADC_ConfigChannel+0x1e6>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b11      	cmp	r3, #17
 8002b94:	d11b      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b10      	cmp	r3, #16
 8002ba8:	d111      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <HAL_ADC_ConfigChannel+0x23c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <HAL_ADC_ConfigChannel+0x240>)
 8002bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb4:	0c9a      	lsrs	r2, r3, #18
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bc0:	e002      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f9      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	40012300 	.word	0x40012300
 8002be8:	40012000 	.word	0x40012000
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bfc:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <ADC_Init+0x1f0>)
 8002bfe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6859      	ldr	r1, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	021a      	lsls	r2, r3, #8
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6899      	ldr	r1, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	4a58      	ldr	r2, [pc, #352]	; (8002de8 <ADC_Init+0x1f4>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d022      	beq.n	8002cd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6899      	ldr	r1, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	e00f      	b.n	8002cf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0202 	bic.w	r2, r2, #2
 8002d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	7e1b      	ldrb	r3, [r3, #24]
 8002d0c:	005a      	lsls	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01b      	beq.n	8002d58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6859      	ldr	r1, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	035a      	lsls	r2, r3, #13
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	e007      	b.n	8002d68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	3b01      	subs	r3, #1
 8002d84:	051a      	lsls	r2, r3, #20
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002daa:	025a      	lsls	r2, r3, #9
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	430a      	orrs	r2, r1
 8002db2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6899      	ldr	r1, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	029a      	lsls	r2, r3, #10
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	40012300 	.word	0x40012300
 8002de8:	0f000001 	.word	0x0f000001

08002dec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d13c      	bne.n	8002e80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d12b      	bne.n	8002e78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d127      	bne.n	8002e78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d119      	bne.n	8002e78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0220 	bic.w	r2, r2, #32
 8002e52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d105      	bne.n	8002e78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0201 	orr.w	r2, r3, #1
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f7ff fd7b 	bl	8002974 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e7e:	e00e      	b.n	8002e9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f7ff fd85 	bl	800299c <HAL_ADC_ErrorCallback>
}
 8002e92:	e004      	b.n	8002e9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
}
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b084      	sub	sp, #16
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7ff fd67 	bl	8002988 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eba:	bf00      	nop
 8002ebc:	3710      	adds	r7, #16
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ece:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2240      	movs	r2, #64	; 0x40
 8002ed4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f043 0204 	orr.w	r2, r3, #4
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff fd5a 	bl	800299c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f22:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <__NVIC_SetPriorityGrouping+0x44>)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	60d3      	str	r3, [r2, #12]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	e000ed00 	.word	0xe000ed00

08002f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <__NVIC_GetPriorityGrouping+0x18>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	f003 0307 	and.w	r3, r3, #7
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000ed00 	.word	0xe000ed00

08002f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	db0b      	blt.n	8002f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f66:	79fb      	ldrb	r3, [r7, #7]
 8002f68:	f003 021f 	and.w	r2, r3, #31
 8002f6c:	4907      	ldr	r1, [pc, #28]	; (8002f8c <__NVIC_EnableIRQ+0x38>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2001      	movs	r0, #1
 8002f76:	fa00 f202 	lsl.w	r2, r0, r2
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	e000e100 	.word	0xe000e100

08002f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	6039      	str	r1, [r7, #0]
 8002f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	db0a      	blt.n	8002fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	490c      	ldr	r1, [pc, #48]	; (8002fdc <__NVIC_SetPriority+0x4c>)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	0112      	lsls	r2, r2, #4
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb8:	e00a      	b.n	8002fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	4908      	ldr	r1, [pc, #32]	; (8002fe0 <__NVIC_SetPriority+0x50>)
 8002fc0:	79fb      	ldrb	r3, [r7, #7]
 8002fc2:	f003 030f 	and.w	r3, r3, #15
 8002fc6:	3b04      	subs	r3, #4
 8002fc8:	0112      	lsls	r2, r2, #4
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	440b      	add	r3, r1
 8002fce:	761a      	strb	r2, [r3, #24]
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	e000e100 	.word	0xe000e100
 8002fe0:	e000ed00 	.word	0xe000ed00

08002fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b089      	sub	sp, #36	; 0x24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f1c3 0307 	rsb	r3, r3, #7
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	bf28      	it	cs
 8003002:	2304      	movcs	r3, #4
 8003004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	3304      	adds	r3, #4
 800300a:	2b06      	cmp	r3, #6
 800300c:	d902      	bls.n	8003014 <NVIC_EncodePriority+0x30>
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	3b03      	subs	r3, #3
 8003012:	e000      	b.n	8003016 <NVIC_EncodePriority+0x32>
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003018:	f04f 32ff 	mov.w	r2, #4294967295
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	fa02 f303 	lsl.w	r3, r2, r3
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	401a      	ands	r2, r3
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	fa01 f303 	lsl.w	r3, r1, r3
 8003036:	43d9      	mvns	r1, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800303c:	4313      	orrs	r3, r2
         );
}
 800303e:	4618      	mov	r0, r3
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
	...

0800304c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3b01      	subs	r3, #1
 8003058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800305c:	d301      	bcc.n	8003062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305e:	2301      	movs	r3, #1
 8003060:	e00f      	b.n	8003082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003062:	4a0a      	ldr	r2, [pc, #40]	; (800308c <SysTick_Config+0x40>)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3b01      	subs	r3, #1
 8003068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800306a:	210f      	movs	r1, #15
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f7ff ff8e 	bl	8002f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <SysTick_Config+0x40>)
 8003076:	2200      	movs	r2, #0
 8003078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <SysTick_Config+0x40>)
 800307c:	2207      	movs	r2, #7
 800307e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	e000e010 	.word	0xe000e010

08003090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003098:	6878      	ldr	r0, [r7, #4]
 800309a:	f7ff ff29 	bl	8002ef0 <__NVIC_SetPriorityGrouping>
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b086      	sub	sp, #24
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	4603      	mov	r3, r0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b8:	f7ff ff3e 	bl	8002f38 <__NVIC_GetPriorityGrouping>
 80030bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	6978      	ldr	r0, [r7, #20]
 80030c4:	f7ff ff8e 	bl	8002fe4 <NVIC_EncodePriority>
 80030c8:	4602      	mov	r2, r0
 80030ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff ff5d 	bl	8002f90 <__NVIC_SetPriority>
}
 80030d6:	bf00      	nop
 80030d8:	3718      	adds	r7, #24
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff ff31 	bl	8002f54 <__NVIC_EnableIRQ>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ffa2 	bl	800304c <SysTick_Config>
 8003108:	4603      	mov	r3, r0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b082      	sub	sp, #8
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e014      	b.n	800314e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	791b      	ldrb	r3, [r3, #4]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d105      	bne.n	800313a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f7fe f853 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2202      	movs	r2, #2
 800313e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4413      	add	r3, r2
 800317a:	3308      	adds	r3, #8
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e004      	b.n	800318a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3314      	adds	r3, #20
 8003188:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	461a      	mov	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b087      	sub	sp, #28
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	795b      	ldrb	r3, [r3, #5]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_DAC_ConfigChannel+0x18>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e03c      	b.n	8003232 <HAL_DAC_ConfigChannel+0x92>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2201      	movs	r2, #1
 80031bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0310 	and.w	r3, r3, #16
 80031d2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4013      	ands	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f003 0310 	and.w	r3, r3, #16
 8003214:	22c0      	movs	r2, #192	; 0xc0
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	371c      	adds	r7, #28
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
	...

08003240 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800324c:	f7ff fa0e 	bl	800266c <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e099      	b.n	8003390 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327c:	e00f      	b.n	800329e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800327e:	f7ff f9f5 	bl	800266c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b05      	cmp	r3, #5
 800328a:	d908      	bls.n	800329e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2203      	movs	r2, #3
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e078      	b.n	8003390 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1e8      	bne.n	800327e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	4b38      	ldr	r3, [pc, #224]	; (8003398 <HAL_DMA_Init+0x158>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f4:	2b04      	cmp	r3, #4
 80032f6:	d107      	bne.n	8003308 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4313      	orrs	r3, r2
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0307 	bic.w	r3, r3, #7
 800331e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b04      	cmp	r3, #4
 8003330:	d117      	bne.n	8003362 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00e      	beq.n	8003362 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb01 	bl	800394c <DMA_CheckFifoParam>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d008      	beq.n	8003362 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800335e:	2301      	movs	r3, #1
 8003360:	e016      	b.n	8003390 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fab8 	bl	80038e0 <DMA_CalcBaseAndBitshift>
 8003370:	4603      	mov	r3, r0
 8003372:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	223f      	movs	r2, #63	; 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3718      	adds	r7, #24
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	f010803f 	.word	0xf010803f

0800339c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_Start_IT+0x26>
 80033be:	2302      	movs	r3, #2
 80033c0:	e040      	b.n	8003444 <HAL_DMA_Start_IT+0xa8>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d12f      	bne.n	8003436 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2202      	movs	r2, #2
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fa4a 	bl	8003884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033f4:	223f      	movs	r2, #63	; 0x3f
 80033f6:	409a      	lsls	r2, r3
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0216 	orr.w	r2, r2, #22
 800340a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f042 0208 	orr.w	r2, r2, #8
 8003422:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e005      	b.n	8003442 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003442:	7dfb      	ldrb	r3, [r7, #23]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003458:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800345a:	f7ff f907 	bl	800266c <HAL_GetTick>
 800345e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b02      	cmp	r3, #2
 800346a:	d008      	beq.n	800347e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	; 0x80
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e052      	b.n	8003524 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0216 	bic.w	r2, r2, #22
 800348c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800349c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d103      	bne.n	80034ae <HAL_DMA_Abort+0x62>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d007      	beq.n	80034be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0208 	bic.w	r2, r2, #8
 80034bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0201 	bic.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ce:	e013      	b.n	80034f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d0:	f7ff f8cc 	bl	800266c <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	1ad3      	subs	r3, r2, r3
 80034da:	2b05      	cmp	r3, #5
 80034dc:	d90c      	bls.n	80034f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2203      	movs	r2, #3
 80034e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e015      	b.n	8003524 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e4      	bne.n	80034d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	223f      	movs	r2, #63	; 0x3f
 800350c:	409a      	lsls	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d004      	beq.n	800354a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2280      	movs	r2, #128	; 0x80
 8003544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e00c      	b.n	8003564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2205      	movs	r2, #5
 800354e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 0201 	bic.w	r2, r2, #1
 8003560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800357c:	4b8e      	ldr	r3, [pc, #568]	; (80037b8 <HAL_DMA_IRQHandler+0x248>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a8e      	ldr	r2, [pc, #568]	; (80037bc <HAL_DMA_IRQHandler+0x24c>)
 8003582:	fba2 2303 	umull	r2, r3, r2, r3
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359a:	2208      	movs	r2, #8
 800359c:	409a      	lsls	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4013      	ands	r3, r2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d01a      	beq.n	80035dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0304 	and.w	r3, r3, #4
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0204 	bic.w	r2, r2, #4
 80035c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c8:	2208      	movs	r2, #8
 80035ca:	409a      	lsls	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	2201      	movs	r2, #1
 80035e2:	409a      	lsls	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d012      	beq.n	8003612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00b      	beq.n	8003612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	2201      	movs	r2, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800360a:	f043 0202 	orr.w	r2, r3, #2
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	2204      	movs	r2, #4
 8003618:	409a      	lsls	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4013      	ands	r3, r2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d012      	beq.n	8003648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003634:	2204      	movs	r2, #4
 8003636:	409a      	lsls	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003640:	f043 0204 	orr.w	r2, r3, #4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	2210      	movs	r2, #16
 800364e:	409a      	lsls	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d043      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d03c      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800366a:	2210      	movs	r2, #16
 800366c:	409a      	lsls	r2, r3
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d108      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	2b00      	cmp	r3, #0
 8003694:	d024      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	4798      	blx	r3
 800369e:	e01f      	b.n	80036e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
 80036b0:	e016      	b.n	80036e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0208 	bic.w	r2, r2, #8
 80036ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e4:	2220      	movs	r2, #32
 80036e6:	409a      	lsls	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 808f 	beq.w	8003810 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	f000 8087 	beq.w	8003810 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2220      	movs	r2, #32
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b05      	cmp	r3, #5
 8003718:	d136      	bne.n	8003788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0216 	bic.w	r2, r2, #22
 8003728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d103      	bne.n	800374a <HAL_DMA_IRQHandler+0x1da>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0208 	bic.w	r2, r2, #8
 8003758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375e:	223f      	movs	r2, #63	; 0x3f
 8003760:	409a      	lsls	r2, r3
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377a:	2b00      	cmp	r3, #0
 800377c:	d07e      	beq.n	800387c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	4798      	blx	r3
        }
        return;
 8003786:	e079      	b.n	800387c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01d      	beq.n	80037d2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d031      	beq.n	8003810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	4798      	blx	r3
 80037b4:	e02c      	b.n	8003810 <HAL_DMA_IRQHandler+0x2a0>
 80037b6:	bf00      	nop
 80037b8:	20000004 	.word	0x20000004
 80037bc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d023      	beq.n	8003810 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
 80037d0:	e01e      	b.n	8003810 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10f      	bne.n	8003800 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0210 	bic.w	r2, r2, #16
 80037ee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	2b00      	cmp	r3, #0
 8003806:	d003      	beq.n	8003810 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003814:	2b00      	cmp	r3, #0
 8003816:	d032      	beq.n	800387e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	d022      	beq.n	800386a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2205      	movs	r2, #5
 8003828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	3301      	adds	r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	429a      	cmp	r2, r3
 8003846:	d307      	bcc.n	8003858 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f2      	bne.n	800383c <HAL_DMA_IRQHandler+0x2cc>
 8003856:	e000      	b.n	800385a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003858:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	4798      	blx	r3
 800387a:	e000      	b.n	800387e <HAL_DMA_IRQHandler+0x30e>
        return;
 800387c:	bf00      	nop
    }
  }
}
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d108      	bne.n	80038c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80038c2:	e007      	b.n	80038d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]
}
 80038d4:	bf00      	nop
 80038d6:	3714      	adds	r7, #20
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	3b10      	subs	r3, #16
 80038f0:	4a14      	ldr	r2, [pc, #80]	; (8003944 <DMA_CalcBaseAndBitshift+0x64>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038fa:	4a13      	ldr	r2, [pc, #76]	; (8003948 <DMA_CalcBaseAndBitshift+0x68>)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d909      	bls.n	8003922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003916:	f023 0303 	bic.w	r3, r3, #3
 800391a:	1d1a      	adds	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	659a      	str	r2, [r3, #88]	; 0x58
 8003920:	e007      	b.n	8003932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800392a:	f023 0303 	bic.w	r3, r3, #3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	aaaaaaab 	.word	0xaaaaaaab
 8003948:	0800ba24 	.word	0x0800ba24

0800394c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b085      	sub	sp, #20
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11f      	bne.n	80039a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2b03      	cmp	r3, #3
 800396a:	d856      	bhi.n	8003a1a <DMA_CheckFifoParam+0xce>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <DMA_CheckFifoParam+0x28>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003985 	.word	0x08003985
 8003978:	08003997 	.word	0x08003997
 800397c:	08003985 	.word	0x08003985
 8003980:	08003a1b 	.word	0x08003a1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d046      	beq.n	8003a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003994:	e043      	b.n	8003a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800399e:	d140      	bne.n	8003a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a4:	e03d      	b.n	8003a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ae:	d121      	bne.n	80039f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d837      	bhi.n	8003a26 <DMA_CheckFifoParam+0xda>
 80039b6:	a201      	add	r2, pc, #4	; (adr r2, 80039bc <DMA_CheckFifoParam+0x70>)
 80039b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039bc:	080039cd 	.word	0x080039cd
 80039c0:	080039d3 	.word	0x080039d3
 80039c4:	080039cd 	.word	0x080039cd
 80039c8:	080039e5 	.word	0x080039e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	73fb      	strb	r3, [r7, #15]
      break;
 80039d0:	e030      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d025      	beq.n	8003a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e2:	e022      	b.n	8003a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039ec:	d11f      	bne.n	8003a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80039f2:	e01c      	b.n	8003a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d903      	bls.n	8003a02 <DMA_CheckFifoParam+0xb6>
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d003      	beq.n	8003a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a00:	e018      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	73fb      	strb	r3, [r7, #15]
      break;
 8003a06:	e015      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	73fb      	strb	r3, [r7, #15]
      break;
 8003a18:	e00b      	b.n	8003a32 <DMA_CheckFifoParam+0xe6>
      break;
 8003a1a:	bf00      	nop
 8003a1c:	e00a      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;
 8003a1e:	bf00      	nop
 8003a20:	e008      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;
 8003a22:	bf00      	nop
 8003a24:	e006      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;
 8003a26:	bf00      	nop
 8003a28:	e004      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;
 8003a2a:	bf00      	nop
 8003a2c:	e002      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a2e:	bf00      	nop
 8003a30:	e000      	b.n	8003a34 <DMA_CheckFifoParam+0xe8>
      break;
 8003a32:	bf00      	nop
    }
  } 
  
  return status; 
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3714      	adds	r7, #20
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e16b      	b.n	8003d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	f040 815a 	bne.w	8003d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d005      	beq.n	8003a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d130      	bne.n	8003af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 0201 	and.w	r2, r3, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d017      	beq.n	8003b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d123      	bne.n	8003b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80b4 	beq.w	8003d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b60      	ldr	r3, [pc, #384]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	4a5f      	ldr	r2, [pc, #380]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003bda:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <HAL_GPIO_Init+0x30c>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be6:	4a5b      	ldr	r2, [pc, #364]	; (8003d54 <HAL_GPIO_Init+0x310>)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a52      	ldr	r2, [pc, #328]	; (8003d58 <HAL_GPIO_Init+0x314>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02b      	beq.n	8003c6a <HAL_GPIO_Init+0x226>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a51      	ldr	r2, [pc, #324]	; (8003d5c <HAL_GPIO_Init+0x318>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d025      	beq.n	8003c66 <HAL_GPIO_Init+0x222>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a50      	ldr	r2, [pc, #320]	; (8003d60 <HAL_GPIO_Init+0x31c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01f      	beq.n	8003c62 <HAL_GPIO_Init+0x21e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a4f      	ldr	r2, [pc, #316]	; (8003d64 <HAL_GPIO_Init+0x320>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d019      	beq.n	8003c5e <HAL_GPIO_Init+0x21a>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4e      	ldr	r2, [pc, #312]	; (8003d68 <HAL_GPIO_Init+0x324>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <HAL_GPIO_Init+0x216>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4d      	ldr	r2, [pc, #308]	; (8003d6c <HAL_GPIO_Init+0x328>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00d      	beq.n	8003c56 <HAL_GPIO_Init+0x212>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_GPIO_Init+0x32c>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d007      	beq.n	8003c52 <HAL_GPIO_Init+0x20e>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_GPIO_Init+0x330>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <HAL_GPIO_Init+0x20a>
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c4e:	2308      	movs	r3, #8
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_Init+0x228>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	69fa      	ldr	r2, [r7, #28]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c7c:	4935      	ldr	r1, [pc, #212]	; (8003d54 <HAL_GPIO_Init+0x310>)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	089b      	lsrs	r3, r3, #2
 8003c82:	3302      	adds	r3, #2
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	4013      	ands	r3, r2
 8003c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cae:	4a32      	ldr	r2, [pc, #200]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cb4:	4b30      	ldr	r3, [pc, #192]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cd8:	4a27      	ldr	r2, [pc, #156]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cde:	4b26      	ldr	r3, [pc, #152]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d02:	4a1d      	ldr	r2, [pc, #116]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d08:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d2c:	4a12      	ldr	r2, [pc, #72]	; (8003d78 <HAL_GPIO_Init+0x334>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	3301      	adds	r3, #1
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	2b0f      	cmp	r3, #15
 8003d3c:	f67f ae90 	bls.w	8003a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
 8003d44:	3724      	adds	r7, #36	; 0x24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40020400 	.word	0x40020400
 8003d60:	40020800 	.word	0x40020800
 8003d64:	40020c00 	.word	0x40020c00
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40021400 	.word	0x40021400
 8003d70:	40021800 	.word	0x40021800
 8003d74:	40021c00 	.word	0x40021c00
 8003d78:	40013c00 	.word	0x40013c00

08003d7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	460b      	mov	r3, r1
 8003d86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	887b      	ldrh	r3, [r7, #2]
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d002      	beq.n	8003d9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
 8003d98:	e001      	b.n	8003d9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	460b      	mov	r3, r1
 8003db6:	807b      	strh	r3, [r7, #2]
 8003db8:	4613      	mov	r3, r2
 8003dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dbc:	787b      	ldrb	r3, [r7, #1]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc2:	887a      	ldrh	r2, [r7, #2]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dc8:	e003      	b.n	8003dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dca:	887b      	ldrh	r3, [r7, #2]
 8003dcc:	041a      	lsls	r2, r3, #16
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003df0:	887a      	ldrh	r2, [r7, #2]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4013      	ands	r3, r2
 8003df6:	041a      	lsls	r2, r3, #16
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	43d9      	mvns	r1, r3
 8003dfc:	887b      	ldrh	r3, [r7, #2]
 8003dfe:	400b      	ands	r3, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	619a      	str	r2, [r3, #24]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e267      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d075      	beq.n	8003f1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e32:	4b88      	ldr	r3, [pc, #544]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d00c      	beq.n	8003e58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e3e:	4b85      	ldr	r3, [pc, #532]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d112      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e4a:	4b82      	ldr	r3, [pc, #520]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e56:	d10b      	bne.n	8003e70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e58:	4b7e      	ldr	r3, [pc, #504]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d05b      	beq.n	8003f1c <HAL_RCC_OscConfig+0x108>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d157      	bne.n	8003f1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e242      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCC_OscConfig+0x74>
 8003e7a:	4b76      	ldr	r3, [pc, #472]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a75      	ldr	r2, [pc, #468]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	e01d      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCC_OscConfig+0x98>
 8003e92:	4b70      	ldr	r3, [pc, #448]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a6f      	ldr	r2, [pc, #444]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4b6d      	ldr	r3, [pc, #436]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a6c      	ldr	r2, [pc, #432]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	e00b      	b.n	8003ec4 <HAL_RCC_OscConfig+0xb0>
 8003eac:	4b69      	ldr	r3, [pc, #420]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a68      	ldr	r2, [pc, #416]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	6013      	str	r3, [r2, #0]
 8003eb8:	4b66      	ldr	r3, [pc, #408]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a65      	ldr	r2, [pc, #404]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d013      	beq.n	8003ef4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe fbce 	bl	800266c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fe fbca 	bl	800266c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e207      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	4b5b      	ldr	r3, [pc, #364]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0xc0>
 8003ef2:	e014      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7fe fbba 	bl	800266c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003efc:	f7fe fbb6 	bl	800266c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b64      	cmp	r3, #100	; 0x64
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e1f3      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	4b51      	ldr	r3, [pc, #324]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0xe8>
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d063      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f2a:	4b4a      	ldr	r3, [pc, #296]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f36:	4b47      	ldr	r3, [pc, #284]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d11c      	bne.n	8003f7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f42:	4b44      	ldr	r3, [pc, #272]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d116      	bne.n	8003f7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f4e:	4b41      	ldr	r3, [pc, #260]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_RCC_OscConfig+0x152>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d001      	beq.n	8003f66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e1c7      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f66:	4b3b      	ldr	r3, [pc, #236]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	00db      	lsls	r3, r3, #3
 8003f74:	4937      	ldr	r1, [pc, #220]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f7a:	e03a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d020      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f84:	4b34      	ldr	r3, [pc, #208]	; (8004058 <HAL_RCC_OscConfig+0x244>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8a:	f7fe fb6f 	bl	800266c <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f92:	f7fe fb6b 	bl	800266c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e1a8      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	4b2b      	ldr	r3, [pc, #172]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fb0:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4925      	ldr	r1, [pc, #148]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	600b      	str	r3, [r1, #0]
 8003fc4:	e015      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x244>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fb4e 	bl	800266c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd4:	f7fe fb4a 	bl	800266c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e187      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe6:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d036      	beq.n	800406c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004006:	4b15      	ldr	r3, [pc, #84]	; (800405c <HAL_RCC_OscConfig+0x248>)
 8004008:	2201      	movs	r2, #1
 800400a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fe fb2e 	bl	800266c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004014:	f7fe fb2a 	bl	800266c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e167      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <HAL_RCC_OscConfig+0x240>)
 8004028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x200>
 8004032:	e01b      	b.n	800406c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCC_OscConfig+0x248>)
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800403a:	f7fe fb17 	bl	800266c <HAL_GetTick>
 800403e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004040:	e00e      	b.n	8004060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004042:	f7fe fb13 	bl	800266c <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d907      	bls.n	8004060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e150      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
 8004054:	40023800 	.word	0x40023800
 8004058:	42470000 	.word	0x42470000
 800405c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004060:	4b88      	ldr	r3, [pc, #544]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ea      	bne.n	8004042 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 8097 	beq.w	80041a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800407a:	2300      	movs	r3, #0
 800407c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800407e:	4b81      	ldr	r3, [pc, #516]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10f      	bne.n	80040aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	4b7d      	ldr	r3, [pc, #500]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	4a7c      	ldr	r2, [pc, #496]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004098:	6413      	str	r3, [r2, #64]	; 0x40
 800409a:	4b7a      	ldr	r3, [pc, #488]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a2:	60bb      	str	r3, [r7, #8]
 80040a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040a6:	2301      	movs	r3, #1
 80040a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	4b77      	ldr	r3, [pc, #476]	; (8004288 <HAL_RCC_OscConfig+0x474>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d118      	bne.n	80040e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040b6:	4b74      	ldr	r3, [pc, #464]	; (8004288 <HAL_RCC_OscConfig+0x474>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a73      	ldr	r2, [pc, #460]	; (8004288 <HAL_RCC_OscConfig+0x474>)
 80040bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c2:	f7fe fad3 	bl	800266c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ca:	f7fe facf 	bl	800266c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e10c      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040dc:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCC_OscConfig+0x474>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d106      	bne.n	80040fe <HAL_RCC_OscConfig+0x2ea>
 80040f0:	4b64      	ldr	r3, [pc, #400]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 80040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f4:	4a63      	ldr	r2, [pc, #396]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 80040f6:	f043 0301 	orr.w	r3, r3, #1
 80040fa:	6713      	str	r3, [r2, #112]	; 0x70
 80040fc:	e01c      	b.n	8004138 <HAL_RCC_OscConfig+0x324>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d10c      	bne.n	8004120 <HAL_RCC_OscConfig+0x30c>
 8004106:	4b5f      	ldr	r3, [pc, #380]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410a:	4a5e      	ldr	r2, [pc, #376]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800410c:	f043 0304 	orr.w	r3, r3, #4
 8004110:	6713      	str	r3, [r2, #112]	; 0x70
 8004112:	4b5c      	ldr	r3, [pc, #368]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004116:	4a5b      	ldr	r2, [pc, #364]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004118:	f043 0301 	orr.w	r3, r3, #1
 800411c:	6713      	str	r3, [r2, #112]	; 0x70
 800411e:	e00b      	b.n	8004138 <HAL_RCC_OscConfig+0x324>
 8004120:	4b58      	ldr	r3, [pc, #352]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a57      	ldr	r2, [pc, #348]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
 800412c:	4b55      	ldr	r3, [pc, #340]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a54      	ldr	r2, [pc, #336]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004132:	f023 0304 	bic.w	r3, r3, #4
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d015      	beq.n	800416c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe fa94 	bl	800266c <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fe fa90 	bl	800266c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	; 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e0cb      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800415e:	4b49      	ldr	r3, [pc, #292]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ee      	beq.n	8004148 <HAL_RCC_OscConfig+0x334>
 800416a:	e014      	b.n	8004196 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416c:	f7fe fa7e 	bl	800266c <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004172:	e00a      	b.n	800418a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004174:	f7fe fa7a 	bl	800266c <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e0b5      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418a:	4b3e      	ldr	r3, [pc, #248]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ee      	bne.n	8004174 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004196:	7dfb      	ldrb	r3, [r7, #23]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b39      	ldr	r3, [pc, #228]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	4a38      	ldr	r2, [pc, #224]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80a1 	beq.w	80042f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d05c      	beq.n	8004278 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d141      	bne.n	800424a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c6:	4b31      	ldr	r3, [pc, #196]	; (800428c <HAL_RCC_OscConfig+0x478>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041cc:	f7fe fa4e 	bl	800266c <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fe fa4a 	bl	800266c <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e087      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e6:	4b27      	ldr	r3, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	3b01      	subs	r3, #1
 800420c:	041b      	lsls	r3, r3, #16
 800420e:	431a      	orrs	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	491b      	ldr	r1, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <HAL_RCC_OscConfig+0x478>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fe fa23 	bl	800266c <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800422a:	f7fe fa1f 	bl	800266c <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e05c      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x416>
 8004248:	e054      	b.n	80042f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <HAL_RCC_OscConfig+0x478>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fe fa0c 	bl	800266c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe fa08 	bl	800266c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e045      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCC_OscConfig+0x470>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x444>
 8004276:	e03d      	b.n	80042f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d107      	bne.n	8004290 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e038      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
 8004284:	40023800 	.word	0x40023800
 8004288:	40007000 	.word	0x40007000
 800428c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004290:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <HAL_RCC_OscConfig+0x4ec>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d028      	beq.n	80042f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d121      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d11a      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042c0:	4013      	ands	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d111      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	085b      	lsrs	r3, r3, #1
 80042d8:	3b01      	subs	r3, #1
 80042da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d107      	bne.n	80042f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d001      	beq.n	80042f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40023800 	.word	0x40023800

08004304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0cc      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004318:	4b68      	ldr	r3, [pc, #416]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d90c      	bls.n	8004340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004326:	4b65      	ldr	r3, [pc, #404]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	b2d2      	uxtb	r2, r2
 800432c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800432e:	4b63      	ldr	r3, [pc, #396]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0b8      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d020      	beq.n	800438e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004358:	4b59      	ldr	r3, [pc, #356]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4a58      	ldr	r2, [pc, #352]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 800435e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004370:	4b53      	ldr	r3, [pc, #332]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a52      	ldr	r2, [pc, #328]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800437a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800437c:	4b50      	ldr	r3, [pc, #320]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	494d      	ldr	r1, [pc, #308]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d044      	beq.n	8004424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d107      	bne.n	80043b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043a2:	4b47      	ldr	r3, [pc, #284]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d119      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e07f      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d003      	beq.n	80043c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d107      	bne.n	80043d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	4b3f      	ldr	r3, [pc, #252]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d109      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e06f      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d2:	4b3b      	ldr	r3, [pc, #236]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e067      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043e2:	4b37      	ldr	r3, [pc, #220]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f023 0203 	bic.w	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4934      	ldr	r1, [pc, #208]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043f4:	f7fe f93a 	bl	800266c <HAL_GetTick>
 80043f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	e00a      	b.n	8004412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043fc:	f7fe f936 	bl	800266c <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	f241 3288 	movw	r2, #5000	; 0x1388
 800440a:	4293      	cmp	r3, r2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e04f      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004412:	4b2b      	ldr	r3, [pc, #172]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f003 020c 	and.w	r2, r3, #12
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	429a      	cmp	r2, r3
 8004422:	d1eb      	bne.n	80043fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d20c      	bcs.n	800444c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b22      	ldr	r3, [pc, #136]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800443a:	4b20      	ldr	r3, [pc, #128]	; (80044bc <HAL_RCC_ClockConfig+0x1b8>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d001      	beq.n	800444c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e032      	b.n	80044b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0304 	and.w	r3, r3, #4
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004458:	4b19      	ldr	r3, [pc, #100]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4916      	ldr	r1, [pc, #88]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0308 	and.w	r3, r3, #8
 8004472:	2b00      	cmp	r3, #0
 8004474:	d009      	beq.n	800448a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004476:	4b12      	ldr	r3, [pc, #72]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	490e      	ldr	r1, [pc, #56]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004486:	4313      	orrs	r3, r2
 8004488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800448a:	f000 f821 	bl	80044d0 <HAL_RCC_GetSysClockFreq>
 800448e:	4602      	mov	r2, r0
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	091b      	lsrs	r3, r3, #4
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	490a      	ldr	r1, [pc, #40]	; (80044c4 <HAL_RCC_ClockConfig+0x1c0>)
 800449c:	5ccb      	ldrb	r3, [r1, r3]
 800449e:	fa22 f303 	lsr.w	r3, r2, r3
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_RCC_ClockConfig+0x1c4>)
 80044a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x1c8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7fe f89a 	bl	80025e4 <HAL_InitTick>

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023c00 	.word	0x40023c00
 80044c0:	40023800 	.word	0x40023800
 80044c4:	0800ba0c 	.word	0x0800ba0c
 80044c8:	20000004 	.word	0x20000004
 80044cc:	20000008 	.word	0x20000008

080044d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044d4:	b090      	sub	sp, #64	; 0x40
 80044d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	637b      	str	r3, [r7, #52]	; 0x34
 80044dc:	2300      	movs	r3, #0
 80044de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044e0:	2300      	movs	r3, #0
 80044e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e8:	4b59      	ldr	r3, [pc, #356]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 030c 	and.w	r3, r3, #12
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d00d      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x40>
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	f200 80a1 	bhi.w	800463c <HAL_RCC_GetSysClockFreq+0x16c>
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <HAL_RCC_GetSysClockFreq+0x34>
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d003      	beq.n	800450a <HAL_RCC_GetSysClockFreq+0x3a>
 8004502:	e09b      	b.n	800463c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004504:	4b53      	ldr	r3, [pc, #332]	; (8004654 <HAL_RCC_GetSysClockFreq+0x184>)
 8004506:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004508:	e09b      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800450a:	4b53      	ldr	r3, [pc, #332]	; (8004658 <HAL_RCC_GetSysClockFreq+0x188>)
 800450c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800450e:	e098      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004510:	4b4f      	ldr	r3, [pc, #316]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800451a:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d028      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004526:	4b4a      	ldr	r3, [pc, #296]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	2200      	movs	r2, #0
 800452e:	623b      	str	r3, [r7, #32]
 8004530:	627a      	str	r2, [r7, #36]	; 0x24
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004538:	2100      	movs	r1, #0
 800453a:	4b47      	ldr	r3, [pc, #284]	; (8004658 <HAL_RCC_GetSysClockFreq+0x188>)
 800453c:	fb03 f201 	mul.w	r2, r3, r1
 8004540:	2300      	movs	r3, #0
 8004542:	fb00 f303 	mul.w	r3, r0, r3
 8004546:	4413      	add	r3, r2
 8004548:	4a43      	ldr	r2, [pc, #268]	; (8004658 <HAL_RCC_GetSysClockFreq+0x188>)
 800454a:	fba0 1202 	umull	r1, r2, r0, r2
 800454e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004550:	460a      	mov	r2, r1
 8004552:	62ba      	str	r2, [r7, #40]	; 0x28
 8004554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004556:	4413      	add	r3, r2
 8004558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800455a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455c:	2200      	movs	r2, #0
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	61fa      	str	r2, [r7, #28]
 8004562:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004566:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800456a:	f7fc fb8d 	bl	8000c88 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4613      	mov	r3, r2
 8004574:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004576:	e053      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004578:	4b35      	ldr	r3, [pc, #212]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	099b      	lsrs	r3, r3, #6
 800457e:	2200      	movs	r2, #0
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	617a      	str	r2, [r7, #20]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800458a:	f04f 0b00 	mov.w	fp, #0
 800458e:	4652      	mov	r2, sl
 8004590:	465b      	mov	r3, fp
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f04f 0100 	mov.w	r1, #0
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a0:	0150      	lsls	r0, r2, #5
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	ebb2 080a 	subs.w	r8, r2, sl
 80045aa:	eb63 090b 	sbc.w	r9, r3, fp
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80045ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80045be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80045c2:	ebb2 0408 	subs.w	r4, r2, r8
 80045c6:	eb63 0509 	sbc.w	r5, r3, r9
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	00eb      	lsls	r3, r5, #3
 80045d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045d8:	00e2      	lsls	r2, r4, #3
 80045da:	4614      	mov	r4, r2
 80045dc:	461d      	mov	r5, r3
 80045de:	eb14 030a 	adds.w	r3, r4, sl
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	eb45 030b 	adc.w	r3, r5, fp
 80045e8:	607b      	str	r3, [r7, #4]
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	f04f 0300 	mov.w	r3, #0
 80045f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045f6:	4629      	mov	r1, r5
 80045f8:	028b      	lsls	r3, r1, #10
 80045fa:	4621      	mov	r1, r4
 80045fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004600:	4621      	mov	r1, r4
 8004602:	028a      	lsls	r2, r1, #10
 8004604:	4610      	mov	r0, r2
 8004606:	4619      	mov	r1, r3
 8004608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800460a:	2200      	movs	r2, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	60fa      	str	r2, [r7, #12]
 8004610:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004614:	f7fc fb38 	bl	8000c88 <__aeabi_uldivmod>
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4613      	mov	r3, r2
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_GetSysClockFreq+0x180>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	0c1b      	lsrs	r3, r3, #16
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	3301      	adds	r3, #1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	fbb2 f3f3 	udiv	r3, r2, r3
 8004638:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800463a:	e002      	b.n	8004642 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800463c:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetSysClockFreq+0x184>)
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004640:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004644:	4618      	mov	r0, r3
 8004646:	3740      	adds	r7, #64	; 0x40
 8004648:	46bd      	mov	sp, r7
 800464a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800464e:	bf00      	nop
 8004650:	40023800 	.word	0x40023800
 8004654:	00f42400 	.word	0x00f42400
 8004658:	017d7840 	.word	0x017d7840

0800465c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004660:	4b03      	ldr	r3, [pc, #12]	; (8004670 <HAL_RCC_GetHCLKFreq+0x14>)
 8004662:	681b      	ldr	r3, [r3, #0]
}
 8004664:	4618      	mov	r0, r3
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	20000004 	.word	0x20000004

08004674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004678:	f7ff fff0 	bl	800465c <HAL_RCC_GetHCLKFreq>
 800467c:	4602      	mov	r2, r0
 800467e:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	0a9b      	lsrs	r3, r3, #10
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	4903      	ldr	r1, [pc, #12]	; (8004698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800468a:	5ccb      	ldrb	r3, [r1, r3]
 800468c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004690:	4618      	mov	r0, r3
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40023800 	.word	0x40023800
 8004698:	0800ba1c 	.word	0x0800ba1c

0800469c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046a0:	f7ff ffdc 	bl	800465c <HAL_RCC_GetHCLKFreq>
 80046a4:	4602      	mov	r2, r0
 80046a6:	4b05      	ldr	r3, [pc, #20]	; (80046bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	0b5b      	lsrs	r3, r3, #13
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	4903      	ldr	r1, [pc, #12]	; (80046c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046b2:	5ccb      	ldrb	r3, [r1, r3]
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	0800ba1c 	.word	0x0800ba1c

080046c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e041      	b.n	800475a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd fe18 	bl	8002320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2202      	movs	r2, #2
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	4619      	mov	r1, r3
 8004702:	4610      	mov	r0, r2
 8004704:	f000 fe86 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
	...

08004764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d001      	beq.n	800477c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e04e      	b.n	800481a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0201 	orr.w	r2, r2, #1
 8004792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a23      	ldr	r2, [pc, #140]	; (8004828 <HAL_TIM_Base_Start_IT+0xc4>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d022      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a6:	d01d      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1f      	ldr	r2, [pc, #124]	; (800482c <HAL_TIM_Base_Start_IT+0xc8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d018      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIM_Base_Start_IT+0xcc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d013      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1c      	ldr	r2, [pc, #112]	; (8004834 <HAL_TIM_Base_Start_IT+0xd0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00e      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIM_Base_Start_IT+0xd4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIM_Base_Start_IT+0xd8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d004      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIM_Base_Start_IT+0xdc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d111      	bne.n	8004808 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b06      	cmp	r3, #6
 80047f4:	d010      	beq.n	8004818 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f042 0201 	orr.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	e007      	b.n	8004818 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f042 0201 	orr.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800

08004844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d101      	bne.n	8004856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e041      	b.n	80048da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f839 	bl	80048e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	4619      	mov	r1, r3
 8004882:	4610      	mov	r0, r2
 8004884:	f000 fdc6 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b083      	sub	sp, #12
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
	...

080048f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d109      	bne.n	800491c <HAL_TIM_PWM_Start+0x24>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b01      	cmp	r3, #1
 8004912:	bf14      	ite	ne
 8004914:	2301      	movne	r3, #1
 8004916:	2300      	moveq	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	e022      	b.n	8004962 <HAL_TIM_PWM_Start+0x6a>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b04      	cmp	r3, #4
 8004920:	d109      	bne.n	8004936 <HAL_TIM_PWM_Start+0x3e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	bf14      	ite	ne
 800492e:	2301      	movne	r3, #1
 8004930:	2300      	moveq	r3, #0
 8004932:	b2db      	uxtb	r3, r3
 8004934:	e015      	b.n	8004962 <HAL_TIM_PWM_Start+0x6a>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d109      	bne.n	8004950 <HAL_TIM_PWM_Start+0x58>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	e008      	b.n	8004962 <HAL_TIM_PWM_Start+0x6a>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004956:	b2db      	uxtb	r3, r3
 8004958:	2b01      	cmp	r3, #1
 800495a:	bf14      	ite	ne
 800495c:	2301      	movne	r3, #1
 800495e:	2300      	moveq	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d001      	beq.n	800496a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e07c      	b.n	8004a64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <HAL_TIM_PWM_Start+0x82>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004978:	e013      	b.n	80049a2 <HAL_TIM_PWM_Start+0xaa>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d104      	bne.n	800498a <HAL_TIM_PWM_Start+0x92>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2202      	movs	r2, #2
 8004984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004988:	e00b      	b.n	80049a2 <HAL_TIM_PWM_Start+0xaa>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d104      	bne.n	800499a <HAL_TIM_PWM_Start+0xa2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004998:	e003      	b.n	80049a2 <HAL_TIM_PWM_Start+0xaa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f946 	bl	8005c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2d      	ldr	r2, [pc, #180]	; (8004a6c <HAL_TIM_PWM_Start+0x174>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d004      	beq.n	80049c4 <HAL_TIM_PWM_Start+0xcc>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <HAL_TIM_PWM_Start+0x178>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_TIM_PWM_Start+0xd0>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <HAL_TIM_PWM_Start+0xd2>
 80049c8:	2300      	movs	r3, #0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a22      	ldr	r2, [pc, #136]	; (8004a6c <HAL_TIM_PWM_Start+0x174>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d022      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049f0:	d01d      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_TIM_PWM_Start+0x17c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d018      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1d      	ldr	r2, [pc, #116]	; (8004a78 <HAL_TIM_PWM_Start+0x180>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d013      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <HAL_TIM_PWM_Start+0x184>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00e      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a16      	ldr	r2, [pc, #88]	; (8004a70 <HAL_TIM_PWM_Start+0x178>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d009      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a18      	ldr	r2, [pc, #96]	; (8004a80 <HAL_TIM_PWM_Start+0x188>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d004      	beq.n	8004a2e <HAL_TIM_PWM_Start+0x136>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <HAL_TIM_PWM_Start+0x18c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d111      	bne.n	8004a52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b06      	cmp	r3, #6
 8004a3e:	d010      	beq.n	8004a62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0201 	orr.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a50:	e007      	b.n	8004a62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f042 0201 	orr.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400
 8004a74:	40000400 	.word	0x40000400
 8004a78:	40000800 	.word	0x40000800
 8004a7c:	40000c00 	.word	0x40000c00
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40001800 	.word	0x40001800

08004a88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f839 	bl	8004b26 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 fca4 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
	...

08004b3c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_IC_Start+0x1a>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	e013      	b.n	8004b7e <HAL_TIM_IC_Start+0x42>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d104      	bne.n	8004b66 <HAL_TIM_IC_Start+0x2a>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	e00b      	b.n	8004b7e <HAL_TIM_IC_Start+0x42>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	2b08      	cmp	r3, #8
 8004b6a:	d104      	bne.n	8004b76 <HAL_TIM_IC_Start+0x3a>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e003      	b.n	8004b7e <HAL_TIM_IC_Start+0x42>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_TIM_IC_Start+0x54>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	e013      	b.n	8004bb8 <HAL_TIM_IC_Start+0x7c>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d104      	bne.n	8004ba0 <HAL_TIM_IC_Start+0x64>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e00b      	b.n	8004bb8 <HAL_TIM_IC_Start+0x7c>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d104      	bne.n	8004bb0 <HAL_TIM_IC_Start+0x74>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e003      	b.n	8004bb8 <HAL_TIM_IC_Start+0x7c>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d102      	bne.n	8004bc6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004bc0:	7bbb      	ldrb	r3, [r7, #14]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e081      	b.n	8004cce <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_IC_Start+0x9e>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd8:	e013      	b.n	8004c02 <HAL_TIM_IC_Start+0xc6>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_IC_Start+0xae>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004be8:	e00b      	b.n	8004c02 <HAL_TIM_IC_Start+0xc6>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_IC_Start+0xbe>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bf8:	e003      	b.n	8004c02 <HAL_TIM_IC_Start+0xc6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_IC_Start+0xd6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c10:	e013      	b.n	8004c3a <HAL_TIM_IC_Start+0xfe>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_IC_Start+0xe6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c20:	e00b      	b.n	8004c3a <HAL_TIM_IC_Start+0xfe>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_IC_Start+0xf6>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2202      	movs	r2, #2
 8004c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c30:	e003      	b.n	8004c3a <HAL_TIM_IC_Start+0xfe>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2202      	movs	r2, #2
 8004c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fffa 	bl	8005c3c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_TIM_IC_Start+0x19c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d022      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5a:	d01d      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <HAL_TIM_IC_Start+0x1a0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d018      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a1d      	ldr	r2, [pc, #116]	; (8004ce0 <HAL_TIM_IC_Start+0x1a4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d013      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1b      	ldr	r2, [pc, #108]	; (8004ce4 <HAL_TIM_IC_Start+0x1a8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d00e      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ce8 <HAL_TIM_IC_Start+0x1ac>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d009      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_TIM_IC_Start+0x1b0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d004      	beq.n	8004c98 <HAL_TIM_IC_Start+0x15c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <HAL_TIM_IC_Start+0x1b4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d111      	bne.n	8004cbc <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d010      	beq.n	8004ccc <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cba:	e007      	b.n	8004ccc <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0201 	orr.w	r2, r2, #1
 8004cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d122      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	f003 0302 	and.w	r3, r3, #2
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d11b      	bne.n	8004d50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f06f 0202 	mvn.w	r2, #2
 8004d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f003 0303 	and.w	r3, r3, #3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d003      	beq.n	8004d3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fbc0 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004d3c:	e005      	b.n	8004d4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fb4a 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fb51 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f003 0304 	and.w	r3, r3, #4
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d122      	bne.n	8004da4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d11b      	bne.n	8004da4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f06f 0204 	mvn.w	r2, #4
 8004d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2202      	movs	r2, #2
 8004d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc fb96 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004d90:	e005      	b.n	8004d9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 fb20 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb27 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d122      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0308 	and.w	r3, r3, #8
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d11b      	bne.n	8004df8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0208 	mvn.w	r2, #8
 8004dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2204      	movs	r2, #4
 8004dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc fb6c 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004de4:	e005      	b.n	8004df2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 faf6 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fafd 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f003 0310 	and.w	r3, r3, #16
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d122      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b10      	cmp	r3, #16
 8004e12:	d11b      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0210 	mvn.w	r2, #16
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2208      	movs	r2, #8
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fc fb42 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 facc 	bl	80053d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fad3 	bl	80053ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d10e      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d107      	bne.n	8004e78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f06f 0201 	mvn.w	r2, #1
 8004e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f7fc fafc 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e82:	2b80      	cmp	r3, #128	; 0x80
 8004e84:	d10e      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e90:	2b80      	cmp	r3, #128	; 0x80
 8004e92:	d107      	bne.n	8004ea4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 ff78 	bl	8005d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eae:	2b40      	cmp	r3, #64	; 0x40
 8004eb0:	d10e      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ebc:	2b40      	cmp	r3, #64	; 0x40
 8004ebe:	d107      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fa98 	bl	8005400 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	f003 0320 	and.w	r3, r3, #32
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d107      	bne.n	8004efc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f06f 0220 	mvn.w	r2, #32
 8004ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 ff42 	bl	8005d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f10:	2300      	movs	r3, #0
 8004f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e088      	b.n	8005034 <HAL_TIM_IC_ConfigChannel+0x130>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d11b      	bne.n	8004f68 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6818      	ldr	r0, [r3, #0]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	6819      	ldr	r1, [r3, #0]
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f000 fcb8 	bl	80058b4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 020c 	bic.w	r2, r2, #12
 8004f52:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6999      	ldr	r1, [r3, #24]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	689a      	ldr	r2, [r3, #8]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	619a      	str	r2, [r3, #24]
 8004f66:	e060      	b.n	800502a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d11c      	bne.n	8004fa8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6819      	ldr	r1, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	f000 fd3c 	bl	80059fa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699a      	ldr	r2, [r3, #24]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f90:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	6999      	ldr	r1, [r3, #24]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	619a      	str	r2, [r3, #24]
 8004fa6:	e040      	b.n	800502a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11b      	bne.n	8004fe6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f000 fd89 	bl	8005ad4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 020c 	bic.w	r2, r2, #12
 8004fd0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	61da      	str	r2, [r3, #28]
 8004fe4:	e021      	b.n	800502a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2b0c      	cmp	r3, #12
 8004fea:	d11c      	bne.n	8005026 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	6819      	ldr	r1, [r3, #0]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 fda6 	bl	8005b4c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	69da      	ldr	r2, [r3, #28]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800500e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69d9      	ldr	r1, [r3, #28]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	61da      	str	r2, [r3, #28]
 8005024:	e001      	b.n	800502a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005032:	7dfb      	ldrb	r3, [r7, #23]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b086      	sub	sp, #24
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005048:	2300      	movs	r3, #0
 800504a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d101      	bne.n	800505a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005056:	2302      	movs	r3, #2
 8005058:	e0ae      	b.n	80051b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b0c      	cmp	r3, #12
 8005066:	f200 809f 	bhi.w	80051a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800506a:	a201      	add	r2, pc, #4	; (adr r2, 8005070 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800506c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005070:	080050a5 	.word	0x080050a5
 8005074:	080051a9 	.word	0x080051a9
 8005078:	080051a9 	.word	0x080051a9
 800507c:	080051a9 	.word	0x080051a9
 8005080:	080050e5 	.word	0x080050e5
 8005084:	080051a9 	.word	0x080051a9
 8005088:	080051a9 	.word	0x080051a9
 800508c:	080051a9 	.word	0x080051a9
 8005090:	08005127 	.word	0x08005127
 8005094:	080051a9 	.word	0x080051a9
 8005098:	080051a9 	.word	0x080051a9
 800509c:	080051a9 	.word	0x080051a9
 80050a0:	08005167 	.word	0x08005167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fa52 	bl	8005554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
      break;
 80050e2:	e064      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 faa2 	bl	8005634 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	619a      	str	r2, [r3, #24]
      break;
 8005124:	e043      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 faf7 	bl	8005720 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0204 	bic.w	r2, r2, #4
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      break;
 8005164:	e023      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fb4b 	bl	8005808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	021a      	lsls	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e002      	b.n	80051ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
      break;
 80051ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3718      	adds	r7, #24
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d101      	bne.n	80051dc <HAL_TIM_ConfigClockSource+0x1c>
 80051d8:	2302      	movs	r3, #2
 80051da:	e0b4      	b.n	8005346 <HAL_TIM_ConfigClockSource+0x186>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005202:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005214:	d03e      	beq.n	8005294 <HAL_TIM_ConfigClockSource+0xd4>
 8005216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521a:	f200 8087 	bhi.w	800532c <HAL_TIM_ConfigClockSource+0x16c>
 800521e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005222:	f000 8086 	beq.w	8005332 <HAL_TIM_ConfigClockSource+0x172>
 8005226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800522a:	d87f      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 800522c:	2b70      	cmp	r3, #112	; 0x70
 800522e:	d01a      	beq.n	8005266 <HAL_TIM_ConfigClockSource+0xa6>
 8005230:	2b70      	cmp	r3, #112	; 0x70
 8005232:	d87b      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 8005234:	2b60      	cmp	r3, #96	; 0x60
 8005236:	d050      	beq.n	80052da <HAL_TIM_ConfigClockSource+0x11a>
 8005238:	2b60      	cmp	r3, #96	; 0x60
 800523a:	d877      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 800523c:	2b50      	cmp	r3, #80	; 0x50
 800523e:	d03c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0xfa>
 8005240:	2b50      	cmp	r3, #80	; 0x50
 8005242:	d873      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 8005244:	2b40      	cmp	r3, #64	; 0x40
 8005246:	d058      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x13a>
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d86f      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 800524c:	2b30      	cmp	r3, #48	; 0x30
 800524e:	d064      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x15a>
 8005250:	2b30      	cmp	r3, #48	; 0x30
 8005252:	d86b      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b20      	cmp	r3, #32
 8005256:	d060      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x15a>
 8005258:	2b20      	cmp	r3, #32
 800525a:	d867      	bhi.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d05c      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x15a>
 8005260:	2b10      	cmp	r3, #16
 8005262:	d05a      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x15a>
 8005264:	e062      	b.n	800532c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	6899      	ldr	r1, [r3, #8]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f000 fcc1 	bl	8005bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005288:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	609a      	str	r2, [r3, #8]
      break;
 8005292:	e04f      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6899      	ldr	r1, [r3, #8]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f000 fcaa 	bl	8005bfc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689a      	ldr	r2, [r3, #8]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052b6:	609a      	str	r2, [r3, #8]
      break;
 80052b8:	e03c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	6859      	ldr	r1, [r3, #4]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	461a      	mov	r2, r3
 80052c8:	f000 fb68 	bl	800599c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2150      	movs	r1, #80	; 0x50
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fc77 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 80052d8:	e02c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 fbc4 	bl	8005a74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2160      	movs	r1, #96	; 0x60
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 fc67 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 80052f8:	e01c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	461a      	mov	r2, r3
 8005308:	f000 fb48 	bl	800599c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2140      	movs	r1, #64	; 0x40
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fc57 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 8005318:	e00c      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4619      	mov	r1, r3
 8005324:	4610      	mov	r0, r2
 8005326:	f000 fc4e 	bl	8005bc6 <TIM_ITRx_SetConfig>
      break;
 800532a:	e003      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	73fb      	strb	r3, [r7, #15]
      break;
 8005330:	e000      	b.n	8005334 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005332:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005350:	b480      	push	{r7}
 8005352:	b085      	sub	sp, #20
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b0c      	cmp	r3, #12
 8005362:	d831      	bhi.n	80053c8 <HAL_TIM_ReadCapturedValue+0x78>
 8005364:	a201      	add	r2, pc, #4	; (adr r2, 800536c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536a:	bf00      	nop
 800536c:	080053a1 	.word	0x080053a1
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053c9 	.word	0x080053c9
 8005378:	080053c9 	.word	0x080053c9
 800537c:	080053ab 	.word	0x080053ab
 8005380:	080053c9 	.word	0x080053c9
 8005384:	080053c9 	.word	0x080053c9
 8005388:	080053c9 	.word	0x080053c9
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053c9 	.word	0x080053c9
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053c9 	.word	0x080053c9
 800539c:	080053bf 	.word	0x080053bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	60fb      	str	r3, [r7, #12]

      break;
 80053a8:	e00f      	b.n	80053ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	60fb      	str	r3, [r7, #12]

      break;
 80053b2:	e00a      	b.n	80053ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ba:	60fb      	str	r3, [r7, #12]

      break;
 80053bc:	e005      	b.n	80053ca <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	60fb      	str	r3, [r7, #12]

      break;
 80053c6:	e000      	b.n	80053ca <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80053c8:	bf00      	nop
  }

  return tmpreg;
 80053ca:	68fb      	ldr	r3, [r7, #12]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f4:	bf00      	nop
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a40      	ldr	r2, [pc, #256]	; (8005528 <TIM_Base_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d00f      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3d      	ldr	r2, [pc, #244]	; (800552c <TIM_Base_SetConfig+0x118>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3c      	ldr	r2, [pc, #240]	; (8005530 <TIM_Base_SetConfig+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3b      	ldr	r2, [pc, #236]	; (8005534 <TIM_Base_SetConfig+0x120>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d108      	bne.n	8005466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <TIM_Base_SetConfig+0x114>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d027      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2c      	ldr	r2, [pc, #176]	; (800552c <TIM_Base_SetConfig+0x118>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d023      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <TIM_Base_SetConfig+0x11c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <TIM_Base_SetConfig+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a29      	ldr	r2, [pc, #164]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a28      	ldr	r2, [pc, #160]	; (800553c <TIM_Base_SetConfig+0x128>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a27      	ldr	r2, [pc, #156]	; (8005540 <TIM_Base_SetConfig+0x12c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <TIM_Base_SetConfig+0x130>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <TIM_Base_SetConfig+0x134>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <TIM_Base_SetConfig+0x138>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a23      	ldr	r2, [pc, #140]	; (8005550 <TIM_Base_SetConfig+0x13c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0xf8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d103      	bne.n	8005514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	615a      	str	r2, [r3, #20]
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800
 8005548:	40001800 	.word	0x40001800
 800554c:	40001c00 	.word	0x40001c00
 8005550:	40002000 	.word	0x40002000

08005554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	f023 0201 	bic.w	r2, r3, #1
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0303 	bic.w	r3, r3, #3
 800558a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f023 0302 	bic.w	r3, r3, #2
 800559c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a20      	ldr	r2, [pc, #128]	; (800562c <TIM_OC1_SetConfig+0xd8>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_OC1_SetConfig+0x64>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <TIM_OC1_SetConfig+0xdc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d10c      	bne.n	80055d2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0308 	bic.w	r3, r3, #8
 80055be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f023 0304 	bic.w	r3, r3, #4
 80055d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <TIM_OC1_SetConfig+0xd8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d003      	beq.n	80055e2 <TIM_OC1_SetConfig+0x8e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a14      	ldr	r2, [pc, #80]	; (8005630 <TIM_OC1_SetConfig+0xdc>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d111      	bne.n	8005606 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	693a      	ldr	r2, [r7, #16]
 80055f8:	4313      	orrs	r3, r2
 80055fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	699b      	ldr	r3, [r3, #24]
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	621a      	str	r2, [r3, #32]
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	40010000 	.word	0x40010000
 8005630:	40010400 	.word	0x40010400

08005634 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0210 	bic.w	r2, r3, #16
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005662:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800566a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	021b      	lsls	r3, r3, #8
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4313      	orrs	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 0320 	bic.w	r3, r3, #32
 800567e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	011b      	lsls	r3, r3, #4
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a22      	ldr	r2, [pc, #136]	; (8005718 <TIM_OC2_SetConfig+0xe4>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d003      	beq.n	800569c <TIM_OC2_SetConfig+0x68>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a21      	ldr	r2, [pc, #132]	; (800571c <TIM_OC2_SetConfig+0xe8>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10d      	bne.n	80056b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <TIM_OC2_SetConfig+0xe4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d003      	beq.n	80056c8 <TIM_OC2_SetConfig+0x94>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <TIM_OC2_SetConfig+0xe8>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d113      	bne.n	80056f0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	621a      	str	r2, [r3, #32]
}
 800570a:	bf00      	nop
 800570c:	371c      	adds	r7, #28
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40010400 	.word	0x40010400

08005720 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0303 	bic.w	r3, r3, #3
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	4313      	orrs	r3, r2
 8005774:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a21      	ldr	r2, [pc, #132]	; (8005800 <TIM_OC3_SetConfig+0xe0>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d003      	beq.n	8005786 <TIM_OC3_SetConfig+0x66>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a20      	ldr	r2, [pc, #128]	; (8005804 <TIM_OC3_SetConfig+0xe4>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d10d      	bne.n	80057a2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800578c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	021b      	lsls	r3, r3, #8
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	4313      	orrs	r3, r2
 8005798:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a16      	ldr	r2, [pc, #88]	; (8005800 <TIM_OC3_SetConfig+0xe0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d003      	beq.n	80057b2 <TIM_OC3_SetConfig+0x92>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a15      	ldr	r2, [pc, #84]	; (8005804 <TIM_OC3_SetConfig+0xe4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d113      	bne.n	80057da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	011b      	lsls	r3, r3, #4
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	621a      	str	r2, [r3, #32]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	40010000 	.word	0x40010000
 8005804:	40010400 	.word	0x40010400

08005808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	021b      	lsls	r3, r3, #8
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4313      	orrs	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	031b      	lsls	r3, r3, #12
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <TIM_OC4_SetConfig+0xa4>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_OC4_SetConfig+0x68>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a11      	ldr	r2, [pc, #68]	; (80058b0 <TIM_OC4_SetConfig+0xa8>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d109      	bne.n	8005884 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005876:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	019b      	lsls	r3, r3, #6
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	621a      	str	r2, [r3, #32]
}
 800589e:	bf00      	nop
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	40010000 	.word	0x40010000
 80058b0:	40010400 	.word	0x40010400

080058b4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	f023 0201 	bic.w	r2, r3, #1
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a28      	ldr	r2, [pc, #160]	; (8005980 <TIM_TI1_SetConfig+0xcc>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01b      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e8:	d017      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4a25      	ldr	r2, [pc, #148]	; (8005984 <TIM_TI1_SetConfig+0xd0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d013      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	4a24      	ldr	r2, [pc, #144]	; (8005988 <TIM_TI1_SetConfig+0xd4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00f      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	4a23      	ldr	r2, [pc, #140]	; (800598c <TIM_TI1_SetConfig+0xd8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00b      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a22      	ldr	r2, [pc, #136]	; (8005990 <TIM_TI1_SetConfig+0xdc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a21      	ldr	r2, [pc, #132]	; (8005994 <TIM_TI1_SetConfig+0xe0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d003      	beq.n	800591a <TIM_TI1_SetConfig+0x66>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4a20      	ldr	r2, [pc, #128]	; (8005998 <TIM_TI1_SetConfig+0xe4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d101      	bne.n	800591e <TIM_TI1_SetConfig+0x6a>
 800591a:	2301      	movs	r3, #1
 800591c:	e000      	b.n	8005920 <TIM_TI1_SetConfig+0x6c>
 800591e:	2300      	movs	r3, #0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f023 0303 	bic.w	r3, r3, #3
 800592a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]
 8005934:	e003      	b.n	800593e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005944:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	011b      	lsls	r3, r3, #4
 800594a:	b2db      	uxtb	r3, r3
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f023 030a 	bic.w	r3, r3, #10
 8005958:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f003 030a 	and.w	r3, r3, #10
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	621a      	str	r2, [r3, #32]
}
 8005972:	bf00      	nop
 8005974:	371c      	adds	r7, #28
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	40010000 	.word	0x40010000
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800
 800598c:	40000c00 	.word	0x40000c00
 8005990:	40010400 	.word	0x40010400
 8005994:	40014000 	.word	0x40014000
 8005998:	40001800 	.word	0x40001800

0800599c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 030a 	bic.w	r3, r3, #10
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f8:	4770      	bx	lr

080059fa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b087      	sub	sp, #28
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	60f8      	str	r0, [r7, #12]
 8005a02:	60b9      	str	r1, [r7, #8]
 8005a04:	607a      	str	r2, [r7, #4]
 8005a06:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f023 0210 	bic.w	r2, r3, #16
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	031b      	lsls	r3, r3, #12
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a4c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	621a      	str	r2, [r3, #32]
}
 8005a68:	bf00      	nop
 8005a6a:	371c      	adds	r7, #28
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a1b      	ldr	r3, [r3, #32]
 8005a84:	f023 0210 	bic.w	r2, r3, #16
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	031b      	lsls	r3, r3, #12
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ab0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	621a      	str	r2, [r3, #32]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	f023 0303 	bic.w	r3, r3, #3
 8005b00:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b10:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	011b      	lsls	r3, r3, #4
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005b24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	021b      	lsls	r3, r3, #8
 8005b2a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005b2e:	693a      	ldr	r2, [r7, #16]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	621a      	str	r2, [r3, #32]
}
 8005b40:	bf00      	nop
 8005b42:	371c      	adds	r7, #28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6a1b      	ldr	r3, [r3, #32]
 8005b70:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	021b      	lsls	r3, r3, #8
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b8a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	031b      	lsls	r3, r3, #12
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005b9e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	031b      	lsls	r3, r3, #12
 8005ba4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	621a      	str	r2, [r3, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	371c      	adds	r7, #28
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f043 0307 	orr.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	609a      	str	r2, [r3, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	3714      	adds	r7, #20
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
 8005c08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	021a      	lsls	r2, r3, #8
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	609a      	str	r2, [r3, #8]
}
 8005c30:	bf00      	nop
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2201      	movs	r2, #1
 8005c50:	fa02 f303 	lsl.w	r3, r2, r3
 8005c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1a      	ldr	r2, [r3, #32]
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	401a      	ands	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6a1a      	ldr	r2, [r3, #32]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 031f 	and.w	r3, r3, #31
 8005c6e:	6879      	ldr	r1, [r7, #4]
 8005c70:	fa01 f303 	lsl.w	r3, r1, r3
 8005c74:	431a      	orrs	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	621a      	str	r2, [r3, #32]
}
 8005c7a:	bf00      	nop
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
	...

08005c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e05a      	b.n	8005d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d022      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d01d      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a1d      	ldr	r2, [pc, #116]	; (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d018      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1b      	ldr	r2, [pc, #108]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1a      	ldr	r2, [pc, #104]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00e      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a18      	ldr	r2, [pc, #96]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a17      	ldr	r2, [pc, #92]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a15      	ldr	r2, [pc, #84]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d10c      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40001800 	.word	0x40001800

08005d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e03f      	b.n	8005e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d106      	bne.n	8005dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f7fc fb6c 	bl	80024ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2224      	movs	r2, #36	; 0x24
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68da      	ldr	r2, [r3, #12]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fddf 	bl	80069b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695a      	ldr	r2, [r3, #20]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b08a      	sub	sp, #40	; 0x28
 8005e46:	af02      	add	r7, sp, #8
 8005e48:	60f8      	str	r0, [r7, #12]
 8005e4a:	60b9      	str	r1, [r7, #8]
 8005e4c:	603b      	str	r3, [r7, #0]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b20      	cmp	r3, #32
 8005e60:	d17c      	bne.n	8005f5c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <HAL_UART_Transmit+0x2c>
 8005e68:	88fb      	ldrh	r3, [r7, #6]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e075      	b.n	8005f5e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_UART_Transmit+0x3e>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e06e      	b.n	8005f5e <HAL_UART_Transmit+0x11c>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2221      	movs	r2, #33	; 0x21
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e96:	f7fc fbe9 	bl	800266c <HAL_GetTick>
 8005e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	88fa      	ldrh	r2, [r7, #6]
 8005ea6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eb0:	d108      	bne.n	8005ec4 <HAL_UART_Transmit+0x82>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d104      	bne.n	8005ec4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	e003      	b.n	8005ecc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005ed4:	e02a      	b.n	8005f2c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2200      	movs	r2, #0
 8005ede:	2180      	movs	r1, #128	; 0x80
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fb1f 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e036      	b.n	8005f5e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	461a      	mov	r2, r3
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	3302      	adds	r3, #2
 8005f0a:	61bb      	str	r3, [r7, #24]
 8005f0c:	e007      	b.n	8005f1e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	781a      	ldrb	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1cf      	bne.n	8005ed6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2140      	movs	r1, #64	; 0x40
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 faef 	bl	8006524 <UART_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	e006      	b.n	8005f5e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e000      	b.n	8005f5e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3720      	adds	r7, #32
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b084      	sub	sp, #16
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	4613      	mov	r3, r2
 8005f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b20      	cmp	r3, #32
 8005f7e:	d11d      	bne.n	8005fbc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_UART_Receive_IT+0x26>
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e016      	b.n	8005fbe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_UART_Receive_IT+0x38>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e00f      	b.n	8005fbe <HAL_UART_Receive_IT+0x58>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005fac:	88fb      	ldrh	r3, [r7, #6]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	68b9      	ldr	r1, [r7, #8]
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f000 fb24 	bl	8006600 <UART_Start_Receive_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	e000      	b.n	8005fbe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
  }
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b0ba      	sub	sp, #232	; 0xe8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10f      	bne.n	800602e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0320 	and.w	r3, r3, #32
 8006016:	2b00      	cmp	r3, #0
 8006018:	d009      	beq.n	800602e <HAL_UART_IRQHandler+0x66>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 fc07 	bl	800683a <UART_Receive_IT>
      return;
 800602c:	e256      	b.n	80064dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800602e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80de 	beq.w	80061f4 <HAL_UART_IRQHandler+0x22c>
 8006038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d106      	bne.n	8006052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 80d1 	beq.w	80061f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <HAL_UART_IRQHandler+0xae>
 800605e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006066:	2b00      	cmp	r3, #0
 8006068:	d005      	beq.n	8006076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606e:	f043 0201 	orr.w	r2, r3, #1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <HAL_UART_IRQHandler+0xd2>
 8006082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006086:	f003 0301 	and.w	r3, r3, #1
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	f043 0202 	orr.w	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800609a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609e:	f003 0302 	and.w	r3, r3, #2
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00b      	beq.n	80060be <HAL_UART_IRQHandler+0xf6>
 80060a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	f043 0204 	orr.w	r2, r3, #4
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c2:	f003 0308 	and.w	r3, r3, #8
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d011      	beq.n	80060ee <HAL_UART_IRQHandler+0x126>
 80060ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d005      	beq.n	80060ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e6:	f043 0208 	orr.w	r2, r3, #8
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	f000 81ed 	beq.w	80064d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_UART_IRQHandler+0x14e>
 8006104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fb92 	bl	800683a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b40      	cmp	r3, #64	; 0x40
 8006122:	bf0c      	ite	eq
 8006124:	2301      	moveq	r3, #1
 8006126:	2300      	movne	r3, #0
 8006128:	b2db      	uxtb	r3, r3
 800612a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	2b00      	cmp	r3, #0
 8006138:	d103      	bne.n	8006142 <HAL_UART_IRQHandler+0x17a>
 800613a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d04f      	beq.n	80061e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa9a 	bl	800667c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b40      	cmp	r3, #64	; 0x40
 8006154:	d141      	bne.n	80061da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3314      	adds	r3, #20
 800615c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006164:	e853 3f00 	ldrex	r3, [r3]
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800618e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006192:	e841 2300 	strex	r3, r2, [r1]
 8006196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800619a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1d9      	bne.n	8006156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d013      	beq.n	80061d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	4a7d      	ldr	r2, [pc, #500]	; (80063a4 <HAL_UART_IRQHandler+0x3dc>)
 80061b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fd f9b8 	bl	800352c <HAL_DMA_Abort_IT>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d016      	beq.n	80061f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	e00e      	b.n	80061f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f990 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	e00a      	b.n	80061f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f98c 	bl	80064f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e0:	e006      	b.n	80061f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f988 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061ee:	e170      	b.n	80064d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f0:	bf00      	nop
    return;
 80061f2:	e16e      	b.n	80064d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 814a 	bne.w	8006492 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0310 	and.w	r3, r3, #16
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8143 	beq.w	8006492 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800620c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 813c 	beq.w	8006492 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800621a:	2300      	movs	r3, #0
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60bb      	str	r3, [r7, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800623a:	2b40      	cmp	r3, #64	; 0x40
 800623c:	f040 80b4 	bne.w	80063a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800624c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 8140 	beq.w	80064d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800625a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800625e:	429a      	cmp	r2, r3
 8006260:	f080 8139 	bcs.w	80064d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800626a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006276:	f000 8088 	beq.w	800638a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	330c      	adds	r3, #12
 8006280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006284:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006290:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006294:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006298:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80062a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80062aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80062b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80062b6:	e841 2300 	strex	r3, r2, [r1]
 80062ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1d9      	bne.n	800627a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3314      	adds	r3, #20
 80062e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e1      	bne.n	80062c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3314      	adds	r3, #20
 8006308:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	3314      	adds	r3, #20
 8006322:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006326:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006328:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800632c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e3      	bne.n	8006302 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	330c      	adds	r3, #12
 800634e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800635a:	f023 0310 	bic.w	r3, r3, #16
 800635e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	330c      	adds	r3, #12
 8006368:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800636c:	65ba      	str	r2, [r7, #88]	; 0x58
 800636e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006372:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e3      	bne.n	8006348 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	4618      	mov	r0, r3
 8006386:	f7fd f861 	bl	800344c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006392:	b29b      	uxth	r3, r3
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	b29b      	uxth	r3, r3
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f8b6 	bl	800650c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a0:	e099      	b.n	80064d6 <HAL_UART_IRQHandler+0x50e>
 80063a2:	bf00      	nop
 80063a4:	08006743 	.word	0x08006743
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 808b 	beq.w	80064da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8086 	beq.w	80064da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063f2:	647a      	str	r2, [r7, #68]	; 0x44
 80063f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e3      	bne.n	80063ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	623b      	str	r3, [r7, #32]
   return(result);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800642a:	633a      	str	r2, [r7, #48]	; 0x30
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	60fb      	str	r3, [r7, #12]
   return(result);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0310 	bic.w	r3, r3, #16
 8006462:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	617b      	str	r3, [r7, #20]
   return(result);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e3      	bne.n	800644c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006484:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f83e 	bl	800650c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006490:	e023      	b.n	80064da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800649a:	2b00      	cmp	r3, #0
 800649c:	d009      	beq.n	80064b2 <HAL_UART_IRQHandler+0x4ea>
 800649e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f95d 	bl	800676a <UART_Transmit_IT>
    return;
 80064b0:	e014      	b.n	80064dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00e      	beq.n	80064dc <HAL_UART_IRQHandler+0x514>
 80064be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f99d 	bl	800680a <UART_EndTransmit_IT>
    return;
 80064d0:	e004      	b.n	80064dc <HAL_UART_IRQHandler+0x514>
    return;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <HAL_UART_IRQHandler+0x514>
      return;
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <HAL_UART_IRQHandler+0x514>
      return;
 80064da:	bf00      	nop
  }
}
 80064dc:	37e8      	adds	r7, #232	; 0xe8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop

080064e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b090      	sub	sp, #64	; 0x40
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	4613      	mov	r3, r2
 8006532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	e050      	b.n	80065d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800653c:	d04c      	beq.n	80065d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <UART_WaitOnFlagUntilTimeout+0x30>
 8006544:	f7fc f892 	bl	800266c <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006550:	429a      	cmp	r2, r3
 8006552:	d241      	bcs.n	80065d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	330c      	adds	r3, #12
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	e853 3f00 	ldrex	r3, [r3]
 8006562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	330c      	adds	r3, #12
 8006572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006574:	637a      	str	r2, [r7, #52]	; 0x34
 8006576:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800657a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800657c:	e841 2300 	strex	r3, r2, [r1]
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1e5      	bne.n	8006554 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3314      	adds	r3, #20
 800658e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	613b      	str	r3, [r7, #16]
   return(result);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f023 0301 	bic.w	r3, r3, #1
 800659e:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a8:	623a      	str	r2, [r7, #32]
 80065aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	6a3a      	ldr	r2, [r7, #32]
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e5      	bne.n	8006588 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2220      	movs	r2, #32
 80065c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2220      	movs	r2, #32
 80065c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e00f      	b.n	80065f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4013      	ands	r3, r2
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	79fb      	ldrb	r3, [r7, #7]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d09f      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3740      	adds	r7, #64	; 0x40
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	4613      	mov	r3, r2
 800660c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	88fa      	ldrh	r2, [r7, #6]
 8006618:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2222      	movs	r2, #34	; 0x22
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0201 	orr.w	r2, r2, #1
 800665c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68da      	ldr	r2, [r3, #12]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0220 	orr.w	r2, r2, #32
 800666c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800667c:	b480      	push	{r7}
 800667e:	b095      	sub	sp, #84	; 0x54
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	330c      	adds	r3, #12
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	e853 3f00 	ldrex	r3, [r3]
 8006692:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800669a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066a4:	643a      	str	r2, [r7, #64]	; 0x40
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ac:	e841 2300 	strex	r3, r2, [r1]
 80066b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1e5      	bne.n	8006684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3314      	adds	r3, #20
 80066be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	e853 3f00 	ldrex	r3, [r3]
 80066c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	f023 0301 	bic.w	r3, r3, #1
 80066ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	3314      	adds	r3, #20
 80066d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066e0:	e841 2300 	strex	r3, r2, [r1]
 80066e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1e5      	bne.n	80066b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d119      	bne.n	8006728 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	330c      	adds	r3, #12
 80066fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	e853 3f00 	ldrex	r3, [r3]
 8006702:	60bb      	str	r3, [r7, #8]
   return(result);
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f023 0310 	bic.w	r3, r3, #16
 800670a:	647b      	str	r3, [r7, #68]	; 0x44
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	330c      	adds	r3, #12
 8006712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006714:	61ba      	str	r2, [r7, #24]
 8006716:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006718:	6979      	ldr	r1, [r7, #20]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	e841 2300 	strex	r3, r2, [r1]
 8006720:	613b      	str	r3, [r7, #16]
   return(result);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e5      	bne.n	80066f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2220      	movs	r2, #32
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006736:	bf00      	nop
 8006738:	3754      	adds	r7, #84	; 0x54
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b084      	sub	sp, #16
 8006746:	af00      	add	r7, sp, #0
 8006748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff fecb 	bl	80064f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800676a:	b480      	push	{r7}
 800676c:	b085      	sub	sp, #20
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b21      	cmp	r3, #33	; 0x21
 800677c:	d13e      	bne.n	80067fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006786:	d114      	bne.n	80067b2 <UART_Transmit_IT+0x48>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d110      	bne.n	80067b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a1b      	ldr	r3, [r3, #32]
 80067aa:	1c9a      	adds	r2, r3, #2
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	621a      	str	r2, [r3, #32]
 80067b0:	e008      	b.n	80067c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	1c59      	adds	r1, r3, #1
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6211      	str	r1, [r2, #32]
 80067bc:	781a      	ldrb	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	3b01      	subs	r3, #1
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4619      	mov	r1, r3
 80067d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d10f      	bne.n	80067f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b082      	sub	sp, #8
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006820:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fe5a 	bl	80064e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b08c      	sub	sp, #48	; 0x30
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b22      	cmp	r3, #34	; 0x22
 800684c:	f040 80ab 	bne.w	80069a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006858:	d117      	bne.n	800688a <UART_Receive_IT+0x50>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d113      	bne.n	800688a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006862:	2300      	movs	r3, #0
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	b29b      	uxth	r3, r3
 8006874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006878:	b29a      	uxth	r2, r3
 800687a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	1c9a      	adds	r2, r3, #2
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
 8006888:	e026      	b.n	80068d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006890:	2300      	movs	r3, #0
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689c:	d007      	beq.n	80068ae <UART_Receive_IT+0x74>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <UART_Receive_IT+0x82>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e008      	b.n	80068ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068dc:	b29b      	uxth	r3, r3
 80068de:	3b01      	subs	r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	4619      	mov	r1, r3
 80068e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d15a      	bne.n	80069a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0220 	bic.w	r2, r2, #32
 80068fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	695a      	ldr	r2, [r3, #20]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0201 	bic.w	r2, r2, #1
 800691a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006928:	2b01      	cmp	r3, #1
 800692a:	d135      	bne.n	8006998 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	330c      	adds	r3, #12
 8006938:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	e853 3f00 	ldrex	r3, [r3]
 8006940:	613b      	str	r3, [r7, #16]
   return(result);
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f023 0310 	bic.w	r3, r3, #16
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	330c      	adds	r3, #12
 8006950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006952:	623a      	str	r2, [r7, #32]
 8006954:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	69f9      	ldr	r1, [r7, #28]
 8006958:	6a3a      	ldr	r2, [r7, #32]
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e5      	bne.n	8006932 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0310 	and.w	r3, r3, #16
 8006970:	2b10      	cmp	r3, #16
 8006972:	d10a      	bne.n	800698a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	60fb      	str	r3, [r7, #12]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fdbb 	bl	800650c <HAL_UARTEx_RxEventCallback>
 8006996:	e002      	b.n	800699e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f7fa fdb9 	bl	8001510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	e002      	b.n	80069a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069a2:	2300      	movs	r3, #0
 80069a4:	e000      	b.n	80069a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069a6:	2302      	movs	r3, #2
  }
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3730      	adds	r7, #48	; 0x30
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b0c0      	sub	sp, #256	; 0x100
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069cc:	68d9      	ldr	r1, [r3, #12]
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	ea40 0301 	orr.w	r3, r0, r1
 80069d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a08:	f021 010c 	bic.w	r1, r1, #12
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a16:	430b      	orrs	r3, r1
 8006a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	6999      	ldr	r1, [r3, #24]
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	ea40 0301 	orr.w	r3, r0, r1
 8006a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b8f      	ldr	r3, [pc, #572]	; (8006c7c <UART_SetConfig+0x2cc>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d005      	beq.n	8006a50 <UART_SetConfig+0xa0>
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	; (8006c80 <UART_SetConfig+0x2d0>)
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d104      	bne.n	8006a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a50:	f7fd fe24 	bl	800469c <HAL_RCC_GetPCLK2Freq>
 8006a54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a58:	e003      	b.n	8006a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fd fe0b 	bl	8004674 <HAL_RCC_GetPCLK1Freq>
 8006a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6c:	f040 810c 	bne.w	8006c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a82:	4622      	mov	r2, r4
 8006a84:	462b      	mov	r3, r5
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a92:	4621      	mov	r1, r4
 8006a94:	eb12 0801 	adds.w	r8, r2, r1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	eb43 0901 	adc.w	r9, r3, r1
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab2:	4690      	mov	r8, r2
 8006ab4:	4699      	mov	r9, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	eb18 0303 	adds.w	r3, r8, r3
 8006abc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	eb49 0303 	adc.w	r3, r9, r3
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ade:	460b      	mov	r3, r1
 8006ae0:	18db      	adds	r3, r3, r3
 8006ae2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	eb42 0303 	adc.w	r3, r2, r3
 8006aea:	657b      	str	r3, [r7, #84]	; 0x54
 8006aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006af4:	f7fa f8c8 	bl	8000c88 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <UART_SetConfig+0x2d4>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011c      	lsls	r4, r3, #4
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b20:	415b      	adcs	r3, r3
 8006b22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b28:	4641      	mov	r1, r8
 8006b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2e:	4649      	mov	r1, r9
 8006b30:	eb43 0b01 	adc.w	fp, r3, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b48:	4692      	mov	sl, r2
 8006b4a:	469b      	mov	fp, r3
 8006b4c:	4643      	mov	r3, r8
 8006b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b56:	464b      	mov	r3, r9
 8006b58:	eb4b 0303 	adc.w	r3, fp, r3
 8006b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b74:	460b      	mov	r3, r1
 8006b76:	18db      	adds	r3, r3, r3
 8006b78:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	eb42 0303 	adc.w	r3, r2, r3
 8006b80:	647b      	str	r3, [r7, #68]	; 0x44
 8006b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b8a:	f7fa f87d 	bl	8000c88 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	4b3b      	ldr	r3, [pc, #236]	; (8006c84 <UART_SetConfig+0x2d4>)
 8006b96:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	2264      	movs	r2, #100	; 0x64
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	1acb      	subs	r3, r1, r3
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006baa:	4b36      	ldr	r3, [pc, #216]	; (8006c84 <UART_SetConfig+0x2d4>)
 8006bac:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006bb8:	441c      	add	r4, r3
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6339      	str	r1, [r7, #48]	; 0x30
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	637b      	str	r3, [r7, #52]	; 0x34
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c30:	460b      	mov	r3, r1
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c36:	4613      	mov	r3, r2
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c46:	f7fa f81f 	bl	8000c88 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	; (8006c84 <UART_SetConfig+0x2d4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	; 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	3332      	adds	r3, #50	; 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	; (8006c84 <UART_SetConfig+0x2d4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 0207 	and.w	r2, r3, #7
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c78:	e105      	b.n	8006e86 <UART_SetConfig+0x4d6>
 8006c7a:	bf00      	nop
 8006c7c:	40011000 	.word	0x40011000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	6239      	str	r1, [r7, #32]
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006caa:	4641      	mov	r1, r8
 8006cac:	1854      	adds	r4, r2, r1
 8006cae:	4649      	mov	r1, r9
 8006cb0:	eb43 0501 	adc.w	r5, r3, r1
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	00eb      	lsls	r3, r5, #3
 8006cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cc2:	00e2      	lsls	r2, r4, #3
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	4643      	mov	r3, r8
 8006cca:	18e3      	adds	r3, r4, r3
 8006ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	eb45 0303 	adc.w	r3, r5, r3
 8006cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ce6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d00:	4621      	mov	r1, r4
 8006d02:	008a      	lsls	r2, r1, #2
 8006d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d08:	f7f9 ffbe 	bl	8000c88 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4b60      	ldr	r3, [pc, #384]	; (8006e94 <UART_SetConfig+0x4e4>)
 8006d12:	fba3 2302 	umull	r2, r3, r3, r2
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	011c      	lsls	r4, r3, #4
 8006d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	61b9      	str	r1, [r7, #24]
 8006d34:	415b      	adcs	r3, r3
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6139      	str	r1, [r7, #16]
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d70:	464b      	mov	r3, r9
 8006d72:	460a      	mov	r2, r1
 8006d74:	eb42 0303 	adc.w	r3, r2, r3
 8006d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d94:	4649      	mov	r1, r9
 8006d96:	008b      	lsls	r3, r1, #2
 8006d98:	4641      	mov	r1, r8
 8006d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9e:	4641      	mov	r1, r8
 8006da0:	008a      	lsls	r2, r1, #2
 8006da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006da6:	f7f9 ff6f 	bl	8000c88 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4b39      	ldr	r3, [pc, #228]	; (8006e94 <UART_SetConfig+0x4e4>)
 8006db0:	fba3 1302 	umull	r1, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	2164      	movs	r1, #100	; 0x64
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	011b      	lsls	r3, r3, #4
 8006dc0:	3332      	adds	r3, #50	; 0x32
 8006dc2:	4a34      	ldr	r2, [pc, #208]	; (8006e94 <UART_SetConfig+0x4e4>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006dce:	441c      	add	r4, r3
 8006dd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	673b      	str	r3, [r7, #112]	; 0x70
 8006dd8:	677a      	str	r2, [r7, #116]	; 0x74
 8006dda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006dde:	4642      	mov	r2, r8
 8006de0:	464b      	mov	r3, r9
 8006de2:	1891      	adds	r1, r2, r2
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	415b      	adcs	r3, r3
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dee:	4641      	mov	r1, r8
 8006df0:	1851      	adds	r1, r2, r1
 8006df2:	6039      	str	r1, [r7, #0]
 8006df4:	4649      	mov	r1, r9
 8006df6:	414b      	adcs	r3, r1
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	f04f 0200 	mov.w	r2, #0
 8006dfe:	f04f 0300 	mov.w	r3, #0
 8006e02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e06:	4659      	mov	r1, fp
 8006e08:	00cb      	lsls	r3, r1, #3
 8006e0a:	4651      	mov	r1, sl
 8006e0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e10:	4651      	mov	r1, sl
 8006e12:	00ca      	lsls	r2, r1, #3
 8006e14:	4610      	mov	r0, r2
 8006e16:	4619      	mov	r1, r3
 8006e18:	4603      	mov	r3, r0
 8006e1a:	4642      	mov	r2, r8
 8006e1c:	189b      	adds	r3, r3, r2
 8006e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e20:	464b      	mov	r3, r9
 8006e22:	460a      	mov	r2, r1
 8006e24:	eb42 0303 	adc.w	r3, r2, r3
 8006e28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	663b      	str	r3, [r7, #96]	; 0x60
 8006e34:	667a      	str	r2, [r7, #100]	; 0x64
 8006e36:	f04f 0200 	mov.w	r2, #0
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e42:	4649      	mov	r1, r9
 8006e44:	008b      	lsls	r3, r1, #2
 8006e46:	4641      	mov	r1, r8
 8006e48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4c:	4641      	mov	r1, r8
 8006e4e:	008a      	lsls	r2, r1, #2
 8006e50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e54:	f7f9 ff18 	bl	8000c88 <__aeabi_uldivmod>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4b0d      	ldr	r3, [pc, #52]	; (8006e94 <UART_SetConfig+0x4e4>)
 8006e5e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e62:	095b      	lsrs	r3, r3, #5
 8006e64:	2164      	movs	r1, #100	; 0x64
 8006e66:	fb01 f303 	mul.w	r3, r1, r3
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	3332      	adds	r3, #50	; 0x32
 8006e70:	4a08      	ldr	r2, [pc, #32]	; (8006e94 <UART_SetConfig+0x4e4>)
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	f003 020f 	and.w	r2, r3, #15
 8006e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4422      	add	r2, r4
 8006e84:	609a      	str	r2, [r3, #8]
}
 8006e86:	bf00      	nop
 8006e88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e92:	bf00      	nop
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <atoi>:
 8006e98:	220a      	movs	r2, #10
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	f001 be0c 	b.w	8008ab8 <strtol>

08006ea0 <__errno>:
 8006ea0:	4b01      	ldr	r3, [pc, #4]	; (8006ea8 <__errno+0x8>)
 8006ea2:	6818      	ldr	r0, [r3, #0]
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	20000010 	.word	0x20000010

08006eac <__libc_init_array>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	4d0d      	ldr	r5, [pc, #52]	; (8006ee4 <__libc_init_array+0x38>)
 8006eb0:	4c0d      	ldr	r4, [pc, #52]	; (8006ee8 <__libc_init_array+0x3c>)
 8006eb2:	1b64      	subs	r4, r4, r5
 8006eb4:	10a4      	asrs	r4, r4, #2
 8006eb6:	2600      	movs	r6, #0
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	d109      	bne.n	8006ed0 <__libc_init_array+0x24>
 8006ebc:	4d0b      	ldr	r5, [pc, #44]	; (8006eec <__libc_init_array+0x40>)
 8006ebe:	4c0c      	ldr	r4, [pc, #48]	; (8006ef0 <__libc_init_array+0x44>)
 8006ec0:	f004 fd28 	bl	800b914 <_init>
 8006ec4:	1b64      	subs	r4, r4, r5
 8006ec6:	10a4      	asrs	r4, r4, #2
 8006ec8:	2600      	movs	r6, #0
 8006eca:	42a6      	cmp	r6, r4
 8006ecc:	d105      	bne.n	8006eda <__libc_init_array+0x2e>
 8006ece:	bd70      	pop	{r4, r5, r6, pc}
 8006ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ed4:	4798      	blx	r3
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	e7ee      	b.n	8006eb8 <__libc_init_array+0xc>
 8006eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ede:	4798      	blx	r3
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	e7f2      	b.n	8006eca <__libc_init_array+0x1e>
 8006ee4:	0800bee4 	.word	0x0800bee4
 8006ee8:	0800bee4 	.word	0x0800bee4
 8006eec:	0800bee4 	.word	0x0800bee4
 8006ef0:	0800bee8 	.word	0x0800bee8

08006ef4 <memset>:
 8006ef4:	4402      	add	r2, r0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d100      	bne.n	8006efe <memset+0xa>
 8006efc:	4770      	bx	lr
 8006efe:	f803 1b01 	strb.w	r1, [r3], #1
 8006f02:	e7f9      	b.n	8006ef8 <memset+0x4>

08006f04 <__cvt>:
 8006f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	ec55 4b10 	vmov	r4, r5, d0
 8006f0c:	2d00      	cmp	r5, #0
 8006f0e:	460e      	mov	r6, r1
 8006f10:	4619      	mov	r1, r3
 8006f12:	462b      	mov	r3, r5
 8006f14:	bfbb      	ittet	lt
 8006f16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f1a:	461d      	movlt	r5, r3
 8006f1c:	2300      	movge	r3, #0
 8006f1e:	232d      	movlt	r3, #45	; 0x2d
 8006f20:	700b      	strb	r3, [r1, #0]
 8006f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f28:	4691      	mov	r9, r2
 8006f2a:	f023 0820 	bic.w	r8, r3, #32
 8006f2e:	bfbc      	itt	lt
 8006f30:	4622      	movlt	r2, r4
 8006f32:	4614      	movlt	r4, r2
 8006f34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f38:	d005      	beq.n	8006f46 <__cvt+0x42>
 8006f3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f3e:	d100      	bne.n	8006f42 <__cvt+0x3e>
 8006f40:	3601      	adds	r6, #1
 8006f42:	2102      	movs	r1, #2
 8006f44:	e000      	b.n	8006f48 <__cvt+0x44>
 8006f46:	2103      	movs	r1, #3
 8006f48:	ab03      	add	r3, sp, #12
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	ab02      	add	r3, sp, #8
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	ec45 4b10 	vmov	d0, r4, r5
 8006f54:	4653      	mov	r3, sl
 8006f56:	4632      	mov	r2, r6
 8006f58:	f001 ff06 	bl	8008d68 <_dtoa_r>
 8006f5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f60:	4607      	mov	r7, r0
 8006f62:	d102      	bne.n	8006f6a <__cvt+0x66>
 8006f64:	f019 0f01 	tst.w	r9, #1
 8006f68:	d022      	beq.n	8006fb0 <__cvt+0xac>
 8006f6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f6e:	eb07 0906 	add.w	r9, r7, r6
 8006f72:	d110      	bne.n	8006f96 <__cvt+0x92>
 8006f74:	783b      	ldrb	r3, [r7, #0]
 8006f76:	2b30      	cmp	r3, #48	; 0x30
 8006f78:	d10a      	bne.n	8006f90 <__cvt+0x8c>
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4620      	mov	r0, r4
 8006f80:	4629      	mov	r1, r5
 8006f82:	f7f9 fda1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f86:	b918      	cbnz	r0, 8006f90 <__cvt+0x8c>
 8006f88:	f1c6 0601 	rsb	r6, r6, #1
 8006f8c:	f8ca 6000 	str.w	r6, [sl]
 8006f90:	f8da 3000 	ldr.w	r3, [sl]
 8006f94:	4499      	add	r9, r3
 8006f96:	2200      	movs	r2, #0
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4620      	mov	r0, r4
 8006f9c:	4629      	mov	r1, r5
 8006f9e:	f7f9 fd93 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fa2:	b108      	cbz	r0, 8006fa8 <__cvt+0xa4>
 8006fa4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa8:	2230      	movs	r2, #48	; 0x30
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	454b      	cmp	r3, r9
 8006fae:	d307      	bcc.n	8006fc0 <__cvt+0xbc>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fb4:	1bdb      	subs	r3, r3, r7
 8006fb6:	4638      	mov	r0, r7
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	b004      	add	sp, #16
 8006fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc0:	1c59      	adds	r1, r3, #1
 8006fc2:	9103      	str	r1, [sp, #12]
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e7f0      	b.n	8006faa <__cvt+0xa6>

08006fc8 <__exponent>:
 8006fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2900      	cmp	r1, #0
 8006fce:	bfb8      	it	lt
 8006fd0:	4249      	neglt	r1, r1
 8006fd2:	f803 2b02 	strb.w	r2, [r3], #2
 8006fd6:	bfb4      	ite	lt
 8006fd8:	222d      	movlt	r2, #45	; 0x2d
 8006fda:	222b      	movge	r2, #43	; 0x2b
 8006fdc:	2909      	cmp	r1, #9
 8006fde:	7042      	strb	r2, [r0, #1]
 8006fe0:	dd2a      	ble.n	8007038 <__exponent+0x70>
 8006fe2:	f10d 0407 	add.w	r4, sp, #7
 8006fe6:	46a4      	mov	ip, r4
 8006fe8:	270a      	movs	r7, #10
 8006fea:	46a6      	mov	lr, r4
 8006fec:	460a      	mov	r2, r1
 8006fee:	fb91 f6f7 	sdiv	r6, r1, r7
 8006ff2:	fb07 1516 	mls	r5, r7, r6, r1
 8006ff6:	3530      	adds	r5, #48	; 0x30
 8006ff8:	2a63      	cmp	r2, #99	; 0x63
 8006ffa:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ffe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007002:	4631      	mov	r1, r6
 8007004:	dcf1      	bgt.n	8006fea <__exponent+0x22>
 8007006:	3130      	adds	r1, #48	; 0x30
 8007008:	f1ae 0502 	sub.w	r5, lr, #2
 800700c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007010:	1c44      	adds	r4, r0, #1
 8007012:	4629      	mov	r1, r5
 8007014:	4561      	cmp	r1, ip
 8007016:	d30a      	bcc.n	800702e <__exponent+0x66>
 8007018:	f10d 0209 	add.w	r2, sp, #9
 800701c:	eba2 020e 	sub.w	r2, r2, lr
 8007020:	4565      	cmp	r5, ip
 8007022:	bf88      	it	hi
 8007024:	2200      	movhi	r2, #0
 8007026:	4413      	add	r3, r2
 8007028:	1a18      	subs	r0, r3, r0
 800702a:	b003      	add	sp, #12
 800702c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007032:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007036:	e7ed      	b.n	8007014 <__exponent+0x4c>
 8007038:	2330      	movs	r3, #48	; 0x30
 800703a:	3130      	adds	r1, #48	; 0x30
 800703c:	7083      	strb	r3, [r0, #2]
 800703e:	70c1      	strb	r1, [r0, #3]
 8007040:	1d03      	adds	r3, r0, #4
 8007042:	e7f1      	b.n	8007028 <__exponent+0x60>

08007044 <_printf_float>:
 8007044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007048:	ed2d 8b02 	vpush	{d8}
 800704c:	b08d      	sub	sp, #52	; 0x34
 800704e:	460c      	mov	r4, r1
 8007050:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007054:	4616      	mov	r6, r2
 8007056:	461f      	mov	r7, r3
 8007058:	4605      	mov	r5, r0
 800705a:	f003 f999 	bl	800a390 <_localeconv_r>
 800705e:	f8d0 a000 	ldr.w	sl, [r0]
 8007062:	4650      	mov	r0, sl
 8007064:	f7f9 f8b4 	bl	80001d0 <strlen>
 8007068:	2300      	movs	r3, #0
 800706a:	930a      	str	r3, [sp, #40]	; 0x28
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	f8d8 3000 	ldr.w	r3, [r8]
 8007074:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007078:	3307      	adds	r3, #7
 800707a:	f023 0307 	bic.w	r3, r3, #7
 800707e:	f103 0208 	add.w	r2, r3, #8
 8007082:	f8c8 2000 	str.w	r2, [r8]
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800708e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007092:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007096:	9307      	str	r3, [sp, #28]
 8007098:	f8cd 8018 	str.w	r8, [sp, #24]
 800709c:	ee08 0a10 	vmov	s16, r0
 80070a0:	4b9f      	ldr	r3, [pc, #636]	; (8007320 <_printf_float+0x2dc>)
 80070a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070a6:	f04f 32ff 	mov.w	r2, #4294967295
 80070aa:	f7f9 fd3f 	bl	8000b2c <__aeabi_dcmpun>
 80070ae:	bb88      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070b4:	4b9a      	ldr	r3, [pc, #616]	; (8007320 <_printf_float+0x2dc>)
 80070b6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ba:	f7f9 fd19 	bl	8000af0 <__aeabi_dcmple>
 80070be:	bb48      	cbnz	r0, 8007114 <_printf_float+0xd0>
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	4640      	mov	r0, r8
 80070c6:	4649      	mov	r1, r9
 80070c8:	f7f9 fd08 	bl	8000adc <__aeabi_dcmplt>
 80070cc:	b110      	cbz	r0, 80070d4 <_printf_float+0x90>
 80070ce:	232d      	movs	r3, #45	; 0x2d
 80070d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070d4:	4b93      	ldr	r3, [pc, #588]	; (8007324 <_printf_float+0x2e0>)
 80070d6:	4894      	ldr	r0, [pc, #592]	; (8007328 <_printf_float+0x2e4>)
 80070d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80070dc:	bf94      	ite	ls
 80070de:	4698      	movls	r8, r3
 80070e0:	4680      	movhi	r8, r0
 80070e2:	2303      	movs	r3, #3
 80070e4:	6123      	str	r3, [r4, #16]
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	f023 0204 	bic.w	r2, r3, #4
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	f04f 0900 	mov.w	r9, #0
 80070f2:	9700      	str	r7, [sp, #0]
 80070f4:	4633      	mov	r3, r6
 80070f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80070f8:	4621      	mov	r1, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 f9d8 	bl	80074b0 <_printf_common>
 8007100:	3001      	adds	r0, #1
 8007102:	f040 8090 	bne.w	8007226 <_printf_float+0x1e2>
 8007106:	f04f 30ff 	mov.w	r0, #4294967295
 800710a:	b00d      	add	sp, #52	; 0x34
 800710c:	ecbd 8b02 	vpop	{d8}
 8007110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007114:	4642      	mov	r2, r8
 8007116:	464b      	mov	r3, r9
 8007118:	4640      	mov	r0, r8
 800711a:	4649      	mov	r1, r9
 800711c:	f7f9 fd06 	bl	8000b2c <__aeabi_dcmpun>
 8007120:	b140      	cbz	r0, 8007134 <_printf_float+0xf0>
 8007122:	464b      	mov	r3, r9
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbc      	itt	lt
 8007128:	232d      	movlt	r3, #45	; 0x2d
 800712a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800712e:	487f      	ldr	r0, [pc, #508]	; (800732c <_printf_float+0x2e8>)
 8007130:	4b7f      	ldr	r3, [pc, #508]	; (8007330 <_printf_float+0x2ec>)
 8007132:	e7d1      	b.n	80070d8 <_printf_float+0x94>
 8007134:	6863      	ldr	r3, [r4, #4]
 8007136:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800713a:	9206      	str	r2, [sp, #24]
 800713c:	1c5a      	adds	r2, r3, #1
 800713e:	d13f      	bne.n	80071c0 <_printf_float+0x17c>
 8007140:	2306      	movs	r3, #6
 8007142:	6063      	str	r3, [r4, #4]
 8007144:	9b05      	ldr	r3, [sp, #20]
 8007146:	6861      	ldr	r1, [r4, #4]
 8007148:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800714c:	2300      	movs	r3, #0
 800714e:	9303      	str	r3, [sp, #12]
 8007150:	ab0a      	add	r3, sp, #40	; 0x28
 8007152:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007156:	ab09      	add	r3, sp, #36	; 0x24
 8007158:	ec49 8b10 	vmov	d0, r8, r9
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	6022      	str	r2, [r4, #0]
 8007160:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007164:	4628      	mov	r0, r5
 8007166:	f7ff fecd 	bl	8006f04 <__cvt>
 800716a:	9b06      	ldr	r3, [sp, #24]
 800716c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800716e:	2b47      	cmp	r3, #71	; 0x47
 8007170:	4680      	mov	r8, r0
 8007172:	d108      	bne.n	8007186 <_printf_float+0x142>
 8007174:	1cc8      	adds	r0, r1, #3
 8007176:	db02      	blt.n	800717e <_printf_float+0x13a>
 8007178:	6863      	ldr	r3, [r4, #4]
 800717a:	4299      	cmp	r1, r3
 800717c:	dd41      	ble.n	8007202 <_printf_float+0x1be>
 800717e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007182:	fa5f fb8b 	uxtb.w	fp, fp
 8007186:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800718a:	d820      	bhi.n	80071ce <_printf_float+0x18a>
 800718c:	3901      	subs	r1, #1
 800718e:	465a      	mov	r2, fp
 8007190:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007194:	9109      	str	r1, [sp, #36]	; 0x24
 8007196:	f7ff ff17 	bl	8006fc8 <__exponent>
 800719a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800719c:	1813      	adds	r3, r2, r0
 800719e:	2a01      	cmp	r2, #1
 80071a0:	4681      	mov	r9, r0
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	dc02      	bgt.n	80071ac <_printf_float+0x168>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	07d2      	lsls	r2, r2, #31
 80071aa:	d501      	bpl.n	80071b0 <_printf_float+0x16c>
 80071ac:	3301      	adds	r3, #1
 80071ae:	6123      	str	r3, [r4, #16]
 80071b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d09c      	beq.n	80070f2 <_printf_float+0xae>
 80071b8:	232d      	movs	r3, #45	; 0x2d
 80071ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071be:	e798      	b.n	80070f2 <_printf_float+0xae>
 80071c0:	9a06      	ldr	r2, [sp, #24]
 80071c2:	2a47      	cmp	r2, #71	; 0x47
 80071c4:	d1be      	bne.n	8007144 <_printf_float+0x100>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1bc      	bne.n	8007144 <_printf_float+0x100>
 80071ca:	2301      	movs	r3, #1
 80071cc:	e7b9      	b.n	8007142 <_printf_float+0xfe>
 80071ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80071d2:	d118      	bne.n	8007206 <_printf_float+0x1c2>
 80071d4:	2900      	cmp	r1, #0
 80071d6:	6863      	ldr	r3, [r4, #4]
 80071d8:	dd0b      	ble.n	80071f2 <_printf_float+0x1ae>
 80071da:	6121      	str	r1, [r4, #16]
 80071dc:	b913      	cbnz	r3, 80071e4 <_printf_float+0x1a0>
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	07d0      	lsls	r0, r2, #31
 80071e2:	d502      	bpl.n	80071ea <_printf_float+0x1a6>
 80071e4:	3301      	adds	r3, #1
 80071e6:	440b      	add	r3, r1
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80071ec:	f04f 0900 	mov.w	r9, #0
 80071f0:	e7de      	b.n	80071b0 <_printf_float+0x16c>
 80071f2:	b913      	cbnz	r3, 80071fa <_printf_float+0x1b6>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	07d2      	lsls	r2, r2, #31
 80071f8:	d501      	bpl.n	80071fe <_printf_float+0x1ba>
 80071fa:	3302      	adds	r3, #2
 80071fc:	e7f4      	b.n	80071e8 <_printf_float+0x1a4>
 80071fe:	2301      	movs	r3, #1
 8007200:	e7f2      	b.n	80071e8 <_printf_float+0x1a4>
 8007202:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	4299      	cmp	r1, r3
 800720a:	db05      	blt.n	8007218 <_printf_float+0x1d4>
 800720c:	6823      	ldr	r3, [r4, #0]
 800720e:	6121      	str	r1, [r4, #16]
 8007210:	07d8      	lsls	r0, r3, #31
 8007212:	d5ea      	bpl.n	80071ea <_printf_float+0x1a6>
 8007214:	1c4b      	adds	r3, r1, #1
 8007216:	e7e7      	b.n	80071e8 <_printf_float+0x1a4>
 8007218:	2900      	cmp	r1, #0
 800721a:	bfd4      	ite	le
 800721c:	f1c1 0202 	rsble	r2, r1, #2
 8007220:	2201      	movgt	r2, #1
 8007222:	4413      	add	r3, r2
 8007224:	e7e0      	b.n	80071e8 <_printf_float+0x1a4>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	055a      	lsls	r2, r3, #21
 800722a:	d407      	bmi.n	800723c <_printf_float+0x1f8>
 800722c:	6923      	ldr	r3, [r4, #16]
 800722e:	4642      	mov	r2, r8
 8007230:	4631      	mov	r1, r6
 8007232:	4628      	mov	r0, r5
 8007234:	47b8      	blx	r7
 8007236:	3001      	adds	r0, #1
 8007238:	d12c      	bne.n	8007294 <_printf_float+0x250>
 800723a:	e764      	b.n	8007106 <_printf_float+0xc2>
 800723c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007240:	f240 80e0 	bls.w	8007404 <_printf_float+0x3c0>
 8007244:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007248:	2200      	movs	r2, #0
 800724a:	2300      	movs	r3, #0
 800724c:	f7f9 fc3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007250:	2800      	cmp	r0, #0
 8007252:	d034      	beq.n	80072be <_printf_float+0x27a>
 8007254:	4a37      	ldr	r2, [pc, #220]	; (8007334 <_printf_float+0x2f0>)
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	47b8      	blx	r7
 800725e:	3001      	adds	r0, #1
 8007260:	f43f af51 	beq.w	8007106 <_printf_float+0xc2>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	429a      	cmp	r2, r3
 800726a:	db02      	blt.n	8007272 <_printf_float+0x22e>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07d8      	lsls	r0, r3, #31
 8007270:	d510      	bpl.n	8007294 <_printf_float+0x250>
 8007272:	ee18 3a10 	vmov	r3, s16
 8007276:	4652      	mov	r2, sl
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	f43f af41 	beq.w	8007106 <_printf_float+0xc2>
 8007284:	f04f 0800 	mov.w	r8, #0
 8007288:	f104 091a 	add.w	r9, r4, #26
 800728c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800728e:	3b01      	subs	r3, #1
 8007290:	4543      	cmp	r3, r8
 8007292:	dc09      	bgt.n	80072a8 <_printf_float+0x264>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	079b      	lsls	r3, r3, #30
 8007298:	f100 8105 	bmi.w	80074a6 <_printf_float+0x462>
 800729c:	68e0      	ldr	r0, [r4, #12]
 800729e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072a0:	4298      	cmp	r0, r3
 80072a2:	bfb8      	it	lt
 80072a4:	4618      	movlt	r0, r3
 80072a6:	e730      	b.n	800710a <_printf_float+0xc6>
 80072a8:	2301      	movs	r3, #1
 80072aa:	464a      	mov	r2, r9
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af27 	beq.w	8007106 <_printf_float+0xc2>
 80072b8:	f108 0801 	add.w	r8, r8, #1
 80072bc:	e7e6      	b.n	800728c <_printf_float+0x248>
 80072be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	dc39      	bgt.n	8007338 <_printf_float+0x2f4>
 80072c4:	4a1b      	ldr	r2, [pc, #108]	; (8007334 <_printf_float+0x2f0>)
 80072c6:	2301      	movs	r3, #1
 80072c8:	4631      	mov	r1, r6
 80072ca:	4628      	mov	r0, r5
 80072cc:	47b8      	blx	r7
 80072ce:	3001      	adds	r0, #1
 80072d0:	f43f af19 	beq.w	8007106 <_printf_float+0xc2>
 80072d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072d8:	4313      	orrs	r3, r2
 80072da:	d102      	bne.n	80072e2 <_printf_float+0x29e>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	07d9      	lsls	r1, r3, #31
 80072e0:	d5d8      	bpl.n	8007294 <_printf_float+0x250>
 80072e2:	ee18 3a10 	vmov	r3, s16
 80072e6:	4652      	mov	r2, sl
 80072e8:	4631      	mov	r1, r6
 80072ea:	4628      	mov	r0, r5
 80072ec:	47b8      	blx	r7
 80072ee:	3001      	adds	r0, #1
 80072f0:	f43f af09 	beq.w	8007106 <_printf_float+0xc2>
 80072f4:	f04f 0900 	mov.w	r9, #0
 80072f8:	f104 0a1a 	add.w	sl, r4, #26
 80072fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fe:	425b      	negs	r3, r3
 8007300:	454b      	cmp	r3, r9
 8007302:	dc01      	bgt.n	8007308 <_printf_float+0x2c4>
 8007304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007306:	e792      	b.n	800722e <_printf_float+0x1ea>
 8007308:	2301      	movs	r3, #1
 800730a:	4652      	mov	r2, sl
 800730c:	4631      	mov	r1, r6
 800730e:	4628      	mov	r0, r5
 8007310:	47b8      	blx	r7
 8007312:	3001      	adds	r0, #1
 8007314:	f43f aef7 	beq.w	8007106 <_printf_float+0xc2>
 8007318:	f109 0901 	add.w	r9, r9, #1
 800731c:	e7ee      	b.n	80072fc <_printf_float+0x2b8>
 800731e:	bf00      	nop
 8007320:	7fefffff 	.word	0x7fefffff
 8007324:	0800ba30 	.word	0x0800ba30
 8007328:	0800ba34 	.word	0x0800ba34
 800732c:	0800ba3c 	.word	0x0800ba3c
 8007330:	0800ba38 	.word	0x0800ba38
 8007334:	0800ba40 	.word	0x0800ba40
 8007338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800733c:	429a      	cmp	r2, r3
 800733e:	bfa8      	it	ge
 8007340:	461a      	movge	r2, r3
 8007342:	2a00      	cmp	r2, #0
 8007344:	4691      	mov	r9, r2
 8007346:	dc37      	bgt.n	80073b8 <_printf_float+0x374>
 8007348:	f04f 0b00 	mov.w	fp, #0
 800734c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007350:	f104 021a 	add.w	r2, r4, #26
 8007354:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007356:	9305      	str	r3, [sp, #20]
 8007358:	eba3 0309 	sub.w	r3, r3, r9
 800735c:	455b      	cmp	r3, fp
 800735e:	dc33      	bgt.n	80073c8 <_printf_float+0x384>
 8007360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007364:	429a      	cmp	r2, r3
 8007366:	db3b      	blt.n	80073e0 <_printf_float+0x39c>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d438      	bmi.n	80073e0 <_printf_float+0x39c>
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	9a05      	ldr	r2, [sp, #20]
 8007372:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007374:	1a9a      	subs	r2, r3, r2
 8007376:	eba3 0901 	sub.w	r9, r3, r1
 800737a:	4591      	cmp	r9, r2
 800737c:	bfa8      	it	ge
 800737e:	4691      	movge	r9, r2
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	dc35      	bgt.n	80073f2 <_printf_float+0x3ae>
 8007386:	f04f 0800 	mov.w	r8, #0
 800738a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800738e:	f104 0a1a 	add.w	sl, r4, #26
 8007392:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007396:	1a9b      	subs	r3, r3, r2
 8007398:	eba3 0309 	sub.w	r3, r3, r9
 800739c:	4543      	cmp	r3, r8
 800739e:	f77f af79 	ble.w	8007294 <_printf_float+0x250>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4652      	mov	r2, sl
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f aeaa 	beq.w	8007106 <_printf_float+0xc2>
 80073b2:	f108 0801 	add.w	r8, r8, #1
 80073b6:	e7ec      	b.n	8007392 <_printf_float+0x34e>
 80073b8:	4613      	mov	r3, r2
 80073ba:	4631      	mov	r1, r6
 80073bc:	4642      	mov	r2, r8
 80073be:	4628      	mov	r0, r5
 80073c0:	47b8      	blx	r7
 80073c2:	3001      	adds	r0, #1
 80073c4:	d1c0      	bne.n	8007348 <_printf_float+0x304>
 80073c6:	e69e      	b.n	8007106 <_printf_float+0xc2>
 80073c8:	2301      	movs	r3, #1
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	9205      	str	r2, [sp, #20]
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f ae97 	beq.w	8007106 <_printf_float+0xc2>
 80073d8:	9a05      	ldr	r2, [sp, #20]
 80073da:	f10b 0b01 	add.w	fp, fp, #1
 80073de:	e7b9      	b.n	8007354 <_printf_float+0x310>
 80073e0:	ee18 3a10 	vmov	r3, s16
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	d1be      	bne.n	800736e <_printf_float+0x32a>
 80073f0:	e689      	b.n	8007106 <_printf_float+0xc2>
 80073f2:	9a05      	ldr	r2, [sp, #20]
 80073f4:	464b      	mov	r3, r9
 80073f6:	4442      	add	r2, r8
 80073f8:	4631      	mov	r1, r6
 80073fa:	4628      	mov	r0, r5
 80073fc:	47b8      	blx	r7
 80073fe:	3001      	adds	r0, #1
 8007400:	d1c1      	bne.n	8007386 <_printf_float+0x342>
 8007402:	e680      	b.n	8007106 <_printf_float+0xc2>
 8007404:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007406:	2a01      	cmp	r2, #1
 8007408:	dc01      	bgt.n	800740e <_printf_float+0x3ca>
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d538      	bpl.n	8007480 <_printf_float+0x43c>
 800740e:	2301      	movs	r3, #1
 8007410:	4642      	mov	r2, r8
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	47b8      	blx	r7
 8007418:	3001      	adds	r0, #1
 800741a:	f43f ae74 	beq.w	8007106 <_printf_float+0xc2>
 800741e:	ee18 3a10 	vmov	r3, s16
 8007422:	4652      	mov	r2, sl
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f ae6b 	beq.w	8007106 <_printf_float+0xc2>
 8007430:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007434:	2200      	movs	r2, #0
 8007436:	2300      	movs	r3, #0
 8007438:	f7f9 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800743c:	b9d8      	cbnz	r0, 8007476 <_printf_float+0x432>
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	f108 0201 	add.w	r2, r8, #1
 8007444:	3b01      	subs	r3, #1
 8007446:	4631      	mov	r1, r6
 8007448:	4628      	mov	r0, r5
 800744a:	47b8      	blx	r7
 800744c:	3001      	adds	r0, #1
 800744e:	d10e      	bne.n	800746e <_printf_float+0x42a>
 8007450:	e659      	b.n	8007106 <_printf_float+0xc2>
 8007452:	2301      	movs	r3, #1
 8007454:	4652      	mov	r2, sl
 8007456:	4631      	mov	r1, r6
 8007458:	4628      	mov	r0, r5
 800745a:	47b8      	blx	r7
 800745c:	3001      	adds	r0, #1
 800745e:	f43f ae52 	beq.w	8007106 <_printf_float+0xc2>
 8007462:	f108 0801 	add.w	r8, r8, #1
 8007466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007468:	3b01      	subs	r3, #1
 800746a:	4543      	cmp	r3, r8
 800746c:	dcf1      	bgt.n	8007452 <_printf_float+0x40e>
 800746e:	464b      	mov	r3, r9
 8007470:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007474:	e6dc      	b.n	8007230 <_printf_float+0x1ec>
 8007476:	f04f 0800 	mov.w	r8, #0
 800747a:	f104 0a1a 	add.w	sl, r4, #26
 800747e:	e7f2      	b.n	8007466 <_printf_float+0x422>
 8007480:	2301      	movs	r3, #1
 8007482:	4642      	mov	r2, r8
 8007484:	e7df      	b.n	8007446 <_printf_float+0x402>
 8007486:	2301      	movs	r3, #1
 8007488:	464a      	mov	r2, r9
 800748a:	4631      	mov	r1, r6
 800748c:	4628      	mov	r0, r5
 800748e:	47b8      	blx	r7
 8007490:	3001      	adds	r0, #1
 8007492:	f43f ae38 	beq.w	8007106 <_printf_float+0xc2>
 8007496:	f108 0801 	add.w	r8, r8, #1
 800749a:	68e3      	ldr	r3, [r4, #12]
 800749c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800749e:	1a5b      	subs	r3, r3, r1
 80074a0:	4543      	cmp	r3, r8
 80074a2:	dcf0      	bgt.n	8007486 <_printf_float+0x442>
 80074a4:	e6fa      	b.n	800729c <_printf_float+0x258>
 80074a6:	f04f 0800 	mov.w	r8, #0
 80074aa:	f104 0919 	add.w	r9, r4, #25
 80074ae:	e7f4      	b.n	800749a <_printf_float+0x456>

080074b0 <_printf_common>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	4616      	mov	r6, r2
 80074b6:	4699      	mov	r9, r3
 80074b8:	688a      	ldr	r2, [r1, #8]
 80074ba:	690b      	ldr	r3, [r1, #16]
 80074bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074c0:	4293      	cmp	r3, r2
 80074c2:	bfb8      	it	lt
 80074c4:	4613      	movlt	r3, r2
 80074c6:	6033      	str	r3, [r6, #0]
 80074c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074cc:	4607      	mov	r7, r0
 80074ce:	460c      	mov	r4, r1
 80074d0:	b10a      	cbz	r2, 80074d6 <_printf_common+0x26>
 80074d2:	3301      	adds	r3, #1
 80074d4:	6033      	str	r3, [r6, #0]
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	0699      	lsls	r1, r3, #26
 80074da:	bf42      	ittt	mi
 80074dc:	6833      	ldrmi	r3, [r6, #0]
 80074de:	3302      	addmi	r3, #2
 80074e0:	6033      	strmi	r3, [r6, #0]
 80074e2:	6825      	ldr	r5, [r4, #0]
 80074e4:	f015 0506 	ands.w	r5, r5, #6
 80074e8:	d106      	bne.n	80074f8 <_printf_common+0x48>
 80074ea:	f104 0a19 	add.w	sl, r4, #25
 80074ee:	68e3      	ldr	r3, [r4, #12]
 80074f0:	6832      	ldr	r2, [r6, #0]
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	42ab      	cmp	r3, r5
 80074f6:	dc26      	bgt.n	8007546 <_printf_common+0x96>
 80074f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074fc:	1e13      	subs	r3, r2, #0
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	2301      	movne	r3, #1
 8007504:	0692      	lsls	r2, r2, #26
 8007506:	d42b      	bmi.n	8007560 <_printf_common+0xb0>
 8007508:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800750c:	4649      	mov	r1, r9
 800750e:	4638      	mov	r0, r7
 8007510:	47c0      	blx	r8
 8007512:	3001      	adds	r0, #1
 8007514:	d01e      	beq.n	8007554 <_printf_common+0xa4>
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	68e5      	ldr	r5, [r4, #12]
 800751a:	6832      	ldr	r2, [r6, #0]
 800751c:	f003 0306 	and.w	r3, r3, #6
 8007520:	2b04      	cmp	r3, #4
 8007522:	bf08      	it	eq
 8007524:	1aad      	subeq	r5, r5, r2
 8007526:	68a3      	ldr	r3, [r4, #8]
 8007528:	6922      	ldr	r2, [r4, #16]
 800752a:	bf0c      	ite	eq
 800752c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007530:	2500      	movne	r5, #0
 8007532:	4293      	cmp	r3, r2
 8007534:	bfc4      	itt	gt
 8007536:	1a9b      	subgt	r3, r3, r2
 8007538:	18ed      	addgt	r5, r5, r3
 800753a:	2600      	movs	r6, #0
 800753c:	341a      	adds	r4, #26
 800753e:	42b5      	cmp	r5, r6
 8007540:	d11a      	bne.n	8007578 <_printf_common+0xc8>
 8007542:	2000      	movs	r0, #0
 8007544:	e008      	b.n	8007558 <_printf_common+0xa8>
 8007546:	2301      	movs	r3, #1
 8007548:	4652      	mov	r2, sl
 800754a:	4649      	mov	r1, r9
 800754c:	4638      	mov	r0, r7
 800754e:	47c0      	blx	r8
 8007550:	3001      	adds	r0, #1
 8007552:	d103      	bne.n	800755c <_printf_common+0xac>
 8007554:	f04f 30ff 	mov.w	r0, #4294967295
 8007558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755c:	3501      	adds	r5, #1
 800755e:	e7c6      	b.n	80074ee <_printf_common+0x3e>
 8007560:	18e1      	adds	r1, r4, r3
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	2030      	movs	r0, #48	; 0x30
 8007566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800756a:	4422      	add	r2, r4
 800756c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007574:	3302      	adds	r3, #2
 8007576:	e7c7      	b.n	8007508 <_printf_common+0x58>
 8007578:	2301      	movs	r3, #1
 800757a:	4622      	mov	r2, r4
 800757c:	4649      	mov	r1, r9
 800757e:	4638      	mov	r0, r7
 8007580:	47c0      	blx	r8
 8007582:	3001      	adds	r0, #1
 8007584:	d0e6      	beq.n	8007554 <_printf_common+0xa4>
 8007586:	3601      	adds	r6, #1
 8007588:	e7d9      	b.n	800753e <_printf_common+0x8e>
	...

0800758c <_printf_i>:
 800758c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007590:	7e0f      	ldrb	r7, [r1, #24]
 8007592:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007594:	2f78      	cmp	r7, #120	; 0x78
 8007596:	4691      	mov	r9, r2
 8007598:	4680      	mov	r8, r0
 800759a:	460c      	mov	r4, r1
 800759c:	469a      	mov	sl, r3
 800759e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075a2:	d807      	bhi.n	80075b4 <_printf_i+0x28>
 80075a4:	2f62      	cmp	r7, #98	; 0x62
 80075a6:	d80a      	bhi.n	80075be <_printf_i+0x32>
 80075a8:	2f00      	cmp	r7, #0
 80075aa:	f000 80d8 	beq.w	800775e <_printf_i+0x1d2>
 80075ae:	2f58      	cmp	r7, #88	; 0x58
 80075b0:	f000 80a3 	beq.w	80076fa <_printf_i+0x16e>
 80075b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075bc:	e03a      	b.n	8007634 <_printf_i+0xa8>
 80075be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075c2:	2b15      	cmp	r3, #21
 80075c4:	d8f6      	bhi.n	80075b4 <_printf_i+0x28>
 80075c6:	a101      	add	r1, pc, #4	; (adr r1, 80075cc <_printf_i+0x40>)
 80075c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075cc:	08007625 	.word	0x08007625
 80075d0:	08007639 	.word	0x08007639
 80075d4:	080075b5 	.word	0x080075b5
 80075d8:	080075b5 	.word	0x080075b5
 80075dc:	080075b5 	.word	0x080075b5
 80075e0:	080075b5 	.word	0x080075b5
 80075e4:	08007639 	.word	0x08007639
 80075e8:	080075b5 	.word	0x080075b5
 80075ec:	080075b5 	.word	0x080075b5
 80075f0:	080075b5 	.word	0x080075b5
 80075f4:	080075b5 	.word	0x080075b5
 80075f8:	08007745 	.word	0x08007745
 80075fc:	08007669 	.word	0x08007669
 8007600:	08007727 	.word	0x08007727
 8007604:	080075b5 	.word	0x080075b5
 8007608:	080075b5 	.word	0x080075b5
 800760c:	08007767 	.word	0x08007767
 8007610:	080075b5 	.word	0x080075b5
 8007614:	08007669 	.word	0x08007669
 8007618:	080075b5 	.word	0x080075b5
 800761c:	080075b5 	.word	0x080075b5
 8007620:	0800772f 	.word	0x0800772f
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	602a      	str	r2, [r5, #0]
 800762c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007630:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007634:	2301      	movs	r3, #1
 8007636:	e0a3      	b.n	8007780 <_printf_i+0x1f4>
 8007638:	6820      	ldr	r0, [r4, #0]
 800763a:	6829      	ldr	r1, [r5, #0]
 800763c:	0606      	lsls	r6, r0, #24
 800763e:	f101 0304 	add.w	r3, r1, #4
 8007642:	d50a      	bpl.n	800765a <_printf_i+0xce>
 8007644:	680e      	ldr	r6, [r1, #0]
 8007646:	602b      	str	r3, [r5, #0]
 8007648:	2e00      	cmp	r6, #0
 800764a:	da03      	bge.n	8007654 <_printf_i+0xc8>
 800764c:	232d      	movs	r3, #45	; 0x2d
 800764e:	4276      	negs	r6, r6
 8007650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007654:	485e      	ldr	r0, [pc, #376]	; (80077d0 <_printf_i+0x244>)
 8007656:	230a      	movs	r3, #10
 8007658:	e019      	b.n	800768e <_printf_i+0x102>
 800765a:	680e      	ldr	r6, [r1, #0]
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007662:	bf18      	it	ne
 8007664:	b236      	sxthne	r6, r6
 8007666:	e7ef      	b.n	8007648 <_printf_i+0xbc>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	1d19      	adds	r1, r3, #4
 800766e:	6029      	str	r1, [r5, #0]
 8007670:	0601      	lsls	r1, r0, #24
 8007672:	d501      	bpl.n	8007678 <_printf_i+0xec>
 8007674:	681e      	ldr	r6, [r3, #0]
 8007676:	e002      	b.n	800767e <_printf_i+0xf2>
 8007678:	0646      	lsls	r6, r0, #25
 800767a:	d5fb      	bpl.n	8007674 <_printf_i+0xe8>
 800767c:	881e      	ldrh	r6, [r3, #0]
 800767e:	4854      	ldr	r0, [pc, #336]	; (80077d0 <_printf_i+0x244>)
 8007680:	2f6f      	cmp	r7, #111	; 0x6f
 8007682:	bf0c      	ite	eq
 8007684:	2308      	moveq	r3, #8
 8007686:	230a      	movne	r3, #10
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800768e:	6865      	ldr	r5, [r4, #4]
 8007690:	60a5      	str	r5, [r4, #8]
 8007692:	2d00      	cmp	r5, #0
 8007694:	bfa2      	ittt	ge
 8007696:	6821      	ldrge	r1, [r4, #0]
 8007698:	f021 0104 	bicge.w	r1, r1, #4
 800769c:	6021      	strge	r1, [r4, #0]
 800769e:	b90e      	cbnz	r6, 80076a4 <_printf_i+0x118>
 80076a0:	2d00      	cmp	r5, #0
 80076a2:	d04d      	beq.n	8007740 <_printf_i+0x1b4>
 80076a4:	4615      	mov	r5, r2
 80076a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076aa:	fb03 6711 	mls	r7, r3, r1, r6
 80076ae:	5dc7      	ldrb	r7, [r0, r7]
 80076b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076b4:	4637      	mov	r7, r6
 80076b6:	42bb      	cmp	r3, r7
 80076b8:	460e      	mov	r6, r1
 80076ba:	d9f4      	bls.n	80076a6 <_printf_i+0x11a>
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d10b      	bne.n	80076d8 <_printf_i+0x14c>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	07de      	lsls	r6, r3, #31
 80076c4:	d508      	bpl.n	80076d8 <_printf_i+0x14c>
 80076c6:	6923      	ldr	r3, [r4, #16]
 80076c8:	6861      	ldr	r1, [r4, #4]
 80076ca:	4299      	cmp	r1, r3
 80076cc:	bfde      	ittt	le
 80076ce:	2330      	movle	r3, #48	; 0x30
 80076d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076d8:	1b52      	subs	r2, r2, r5
 80076da:	6122      	str	r2, [r4, #16]
 80076dc:	f8cd a000 	str.w	sl, [sp]
 80076e0:	464b      	mov	r3, r9
 80076e2:	aa03      	add	r2, sp, #12
 80076e4:	4621      	mov	r1, r4
 80076e6:	4640      	mov	r0, r8
 80076e8:	f7ff fee2 	bl	80074b0 <_printf_common>
 80076ec:	3001      	adds	r0, #1
 80076ee:	d14c      	bne.n	800778a <_printf_i+0x1fe>
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295
 80076f4:	b004      	add	sp, #16
 80076f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076fa:	4835      	ldr	r0, [pc, #212]	; (80077d0 <_printf_i+0x244>)
 80076fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007700:	6829      	ldr	r1, [r5, #0]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	f851 6b04 	ldr.w	r6, [r1], #4
 8007708:	6029      	str	r1, [r5, #0]
 800770a:	061d      	lsls	r5, r3, #24
 800770c:	d514      	bpl.n	8007738 <_printf_i+0x1ac>
 800770e:	07df      	lsls	r7, r3, #31
 8007710:	bf44      	itt	mi
 8007712:	f043 0320 	orrmi.w	r3, r3, #32
 8007716:	6023      	strmi	r3, [r4, #0]
 8007718:	b91e      	cbnz	r6, 8007722 <_printf_i+0x196>
 800771a:	6823      	ldr	r3, [r4, #0]
 800771c:	f023 0320 	bic.w	r3, r3, #32
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	2310      	movs	r3, #16
 8007724:	e7b0      	b.n	8007688 <_printf_i+0xfc>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f043 0320 	orr.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	2378      	movs	r3, #120	; 0x78
 8007730:	4828      	ldr	r0, [pc, #160]	; (80077d4 <_printf_i+0x248>)
 8007732:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007736:	e7e3      	b.n	8007700 <_printf_i+0x174>
 8007738:	0659      	lsls	r1, r3, #25
 800773a:	bf48      	it	mi
 800773c:	b2b6      	uxthmi	r6, r6
 800773e:	e7e6      	b.n	800770e <_printf_i+0x182>
 8007740:	4615      	mov	r5, r2
 8007742:	e7bb      	b.n	80076bc <_printf_i+0x130>
 8007744:	682b      	ldr	r3, [r5, #0]
 8007746:	6826      	ldr	r6, [r4, #0]
 8007748:	6961      	ldr	r1, [r4, #20]
 800774a:	1d18      	adds	r0, r3, #4
 800774c:	6028      	str	r0, [r5, #0]
 800774e:	0635      	lsls	r5, r6, #24
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	d501      	bpl.n	8007758 <_printf_i+0x1cc>
 8007754:	6019      	str	r1, [r3, #0]
 8007756:	e002      	b.n	800775e <_printf_i+0x1d2>
 8007758:	0670      	lsls	r0, r6, #25
 800775a:	d5fb      	bpl.n	8007754 <_printf_i+0x1c8>
 800775c:	8019      	strh	r1, [r3, #0]
 800775e:	2300      	movs	r3, #0
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	4615      	mov	r5, r2
 8007764:	e7ba      	b.n	80076dc <_printf_i+0x150>
 8007766:	682b      	ldr	r3, [r5, #0]
 8007768:	1d1a      	adds	r2, r3, #4
 800776a:	602a      	str	r2, [r5, #0]
 800776c:	681d      	ldr	r5, [r3, #0]
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	2100      	movs	r1, #0
 8007772:	4628      	mov	r0, r5
 8007774:	f7f8 fd34 	bl	80001e0 <memchr>
 8007778:	b108      	cbz	r0, 800777e <_printf_i+0x1f2>
 800777a:	1b40      	subs	r0, r0, r5
 800777c:	6060      	str	r0, [r4, #4]
 800777e:	6863      	ldr	r3, [r4, #4]
 8007780:	6123      	str	r3, [r4, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007788:	e7a8      	b.n	80076dc <_printf_i+0x150>
 800778a:	6923      	ldr	r3, [r4, #16]
 800778c:	462a      	mov	r2, r5
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d0ab      	beq.n	80076f0 <_printf_i+0x164>
 8007798:	6823      	ldr	r3, [r4, #0]
 800779a:	079b      	lsls	r3, r3, #30
 800779c:	d413      	bmi.n	80077c6 <_printf_i+0x23a>
 800779e:	68e0      	ldr	r0, [r4, #12]
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	4298      	cmp	r0, r3
 80077a4:	bfb8      	it	lt
 80077a6:	4618      	movlt	r0, r3
 80077a8:	e7a4      	b.n	80076f4 <_printf_i+0x168>
 80077aa:	2301      	movs	r3, #1
 80077ac:	4632      	mov	r2, r6
 80077ae:	4649      	mov	r1, r9
 80077b0:	4640      	mov	r0, r8
 80077b2:	47d0      	blx	sl
 80077b4:	3001      	adds	r0, #1
 80077b6:	d09b      	beq.n	80076f0 <_printf_i+0x164>
 80077b8:	3501      	adds	r5, #1
 80077ba:	68e3      	ldr	r3, [r4, #12]
 80077bc:	9903      	ldr	r1, [sp, #12]
 80077be:	1a5b      	subs	r3, r3, r1
 80077c0:	42ab      	cmp	r3, r5
 80077c2:	dcf2      	bgt.n	80077aa <_printf_i+0x21e>
 80077c4:	e7eb      	b.n	800779e <_printf_i+0x212>
 80077c6:	2500      	movs	r5, #0
 80077c8:	f104 0619 	add.w	r6, r4, #25
 80077cc:	e7f5      	b.n	80077ba <_printf_i+0x22e>
 80077ce:	bf00      	nop
 80077d0:	0800ba42 	.word	0x0800ba42
 80077d4:	0800ba53 	.word	0x0800ba53

080077d8 <_scanf_float>:
 80077d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	b087      	sub	sp, #28
 80077de:	4617      	mov	r7, r2
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	688b      	ldr	r3, [r1, #8]
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80077ea:	bf83      	ittte	hi
 80077ec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80077f0:	195b      	addhi	r3, r3, r5
 80077f2:	9302      	strhi	r3, [sp, #8]
 80077f4:	2300      	movls	r3, #0
 80077f6:	bf86      	itte	hi
 80077f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80077fc:	608b      	strhi	r3, [r1, #8]
 80077fe:	9302      	strls	r3, [sp, #8]
 8007800:	680b      	ldr	r3, [r1, #0]
 8007802:	468b      	mov	fp, r1
 8007804:	2500      	movs	r5, #0
 8007806:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800780a:	f84b 3b1c 	str.w	r3, [fp], #28
 800780e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007812:	4680      	mov	r8, r0
 8007814:	460c      	mov	r4, r1
 8007816:	465e      	mov	r6, fp
 8007818:	46aa      	mov	sl, r5
 800781a:	46a9      	mov	r9, r5
 800781c:	9501      	str	r5, [sp, #4]
 800781e:	68a2      	ldr	r2, [r4, #8]
 8007820:	b152      	cbz	r2, 8007838 <_scanf_float+0x60>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b4e      	cmp	r3, #78	; 0x4e
 8007828:	d864      	bhi.n	80078f4 <_scanf_float+0x11c>
 800782a:	2b40      	cmp	r3, #64	; 0x40
 800782c:	d83c      	bhi.n	80078a8 <_scanf_float+0xd0>
 800782e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007832:	b2c8      	uxtb	r0, r1
 8007834:	280e      	cmp	r0, #14
 8007836:	d93a      	bls.n	80078ae <_scanf_float+0xd6>
 8007838:	f1b9 0f00 	cmp.w	r9, #0
 800783c:	d003      	beq.n	8007846 <_scanf_float+0x6e>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800784a:	f1ba 0f01 	cmp.w	sl, #1
 800784e:	f200 8113 	bhi.w	8007a78 <_scanf_float+0x2a0>
 8007852:	455e      	cmp	r6, fp
 8007854:	f200 8105 	bhi.w	8007a62 <_scanf_float+0x28a>
 8007858:	2501      	movs	r5, #1
 800785a:	4628      	mov	r0, r5
 800785c:	b007      	add	sp, #28
 800785e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007862:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007866:	2a0d      	cmp	r2, #13
 8007868:	d8e6      	bhi.n	8007838 <_scanf_float+0x60>
 800786a:	a101      	add	r1, pc, #4	; (adr r1, 8007870 <_scanf_float+0x98>)
 800786c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007870:	080079af 	.word	0x080079af
 8007874:	08007839 	.word	0x08007839
 8007878:	08007839 	.word	0x08007839
 800787c:	08007839 	.word	0x08007839
 8007880:	08007a0f 	.word	0x08007a0f
 8007884:	080079e7 	.word	0x080079e7
 8007888:	08007839 	.word	0x08007839
 800788c:	08007839 	.word	0x08007839
 8007890:	080079bd 	.word	0x080079bd
 8007894:	08007839 	.word	0x08007839
 8007898:	08007839 	.word	0x08007839
 800789c:	08007839 	.word	0x08007839
 80078a0:	08007839 	.word	0x08007839
 80078a4:	08007975 	.word	0x08007975
 80078a8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80078ac:	e7db      	b.n	8007866 <_scanf_float+0x8e>
 80078ae:	290e      	cmp	r1, #14
 80078b0:	d8c2      	bhi.n	8007838 <_scanf_float+0x60>
 80078b2:	a001      	add	r0, pc, #4	; (adr r0, 80078b8 <_scanf_float+0xe0>)
 80078b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078b8:	08007967 	.word	0x08007967
 80078bc:	08007839 	.word	0x08007839
 80078c0:	08007967 	.word	0x08007967
 80078c4:	080079fb 	.word	0x080079fb
 80078c8:	08007839 	.word	0x08007839
 80078cc:	08007915 	.word	0x08007915
 80078d0:	08007951 	.word	0x08007951
 80078d4:	08007951 	.word	0x08007951
 80078d8:	08007951 	.word	0x08007951
 80078dc:	08007951 	.word	0x08007951
 80078e0:	08007951 	.word	0x08007951
 80078e4:	08007951 	.word	0x08007951
 80078e8:	08007951 	.word	0x08007951
 80078ec:	08007951 	.word	0x08007951
 80078f0:	08007951 	.word	0x08007951
 80078f4:	2b6e      	cmp	r3, #110	; 0x6e
 80078f6:	d809      	bhi.n	800790c <_scanf_float+0x134>
 80078f8:	2b60      	cmp	r3, #96	; 0x60
 80078fa:	d8b2      	bhi.n	8007862 <_scanf_float+0x8a>
 80078fc:	2b54      	cmp	r3, #84	; 0x54
 80078fe:	d077      	beq.n	80079f0 <_scanf_float+0x218>
 8007900:	2b59      	cmp	r3, #89	; 0x59
 8007902:	d199      	bne.n	8007838 <_scanf_float+0x60>
 8007904:	2d07      	cmp	r5, #7
 8007906:	d197      	bne.n	8007838 <_scanf_float+0x60>
 8007908:	2508      	movs	r5, #8
 800790a:	e029      	b.n	8007960 <_scanf_float+0x188>
 800790c:	2b74      	cmp	r3, #116	; 0x74
 800790e:	d06f      	beq.n	80079f0 <_scanf_float+0x218>
 8007910:	2b79      	cmp	r3, #121	; 0x79
 8007912:	e7f6      	b.n	8007902 <_scanf_float+0x12a>
 8007914:	6821      	ldr	r1, [r4, #0]
 8007916:	05c8      	lsls	r0, r1, #23
 8007918:	d51a      	bpl.n	8007950 <_scanf_float+0x178>
 800791a:	9b02      	ldr	r3, [sp, #8]
 800791c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007920:	6021      	str	r1, [r4, #0]
 8007922:	f109 0901 	add.w	r9, r9, #1
 8007926:	b11b      	cbz	r3, 8007930 <_scanf_float+0x158>
 8007928:	3b01      	subs	r3, #1
 800792a:	3201      	adds	r2, #1
 800792c:	9302      	str	r3, [sp, #8]
 800792e:	60a2      	str	r2, [r4, #8]
 8007930:	68a3      	ldr	r3, [r4, #8]
 8007932:	3b01      	subs	r3, #1
 8007934:	60a3      	str	r3, [r4, #8]
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	3301      	adds	r3, #1
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3b01      	subs	r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	f340 8084 	ble.w	8007a50 <_scanf_float+0x278>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	603b      	str	r3, [r7, #0]
 800794e:	e766      	b.n	800781e <_scanf_float+0x46>
 8007950:	eb1a 0f05 	cmn.w	sl, r5
 8007954:	f47f af70 	bne.w	8007838 <_scanf_float+0x60>
 8007958:	6822      	ldr	r2, [r4, #0]
 800795a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800795e:	6022      	str	r2, [r4, #0]
 8007960:	f806 3b01 	strb.w	r3, [r6], #1
 8007964:	e7e4      	b.n	8007930 <_scanf_float+0x158>
 8007966:	6822      	ldr	r2, [r4, #0]
 8007968:	0610      	lsls	r0, r2, #24
 800796a:	f57f af65 	bpl.w	8007838 <_scanf_float+0x60>
 800796e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007972:	e7f4      	b.n	800795e <_scanf_float+0x186>
 8007974:	f1ba 0f00 	cmp.w	sl, #0
 8007978:	d10e      	bne.n	8007998 <_scanf_float+0x1c0>
 800797a:	f1b9 0f00 	cmp.w	r9, #0
 800797e:	d10e      	bne.n	800799e <_scanf_float+0x1c6>
 8007980:	6822      	ldr	r2, [r4, #0]
 8007982:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007986:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800798a:	d108      	bne.n	800799e <_scanf_float+0x1c6>
 800798c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007990:	6022      	str	r2, [r4, #0]
 8007992:	f04f 0a01 	mov.w	sl, #1
 8007996:	e7e3      	b.n	8007960 <_scanf_float+0x188>
 8007998:	f1ba 0f02 	cmp.w	sl, #2
 800799c:	d055      	beq.n	8007a4a <_scanf_float+0x272>
 800799e:	2d01      	cmp	r5, #1
 80079a0:	d002      	beq.n	80079a8 <_scanf_float+0x1d0>
 80079a2:	2d04      	cmp	r5, #4
 80079a4:	f47f af48 	bne.w	8007838 <_scanf_float+0x60>
 80079a8:	3501      	adds	r5, #1
 80079aa:	b2ed      	uxtb	r5, r5
 80079ac:	e7d8      	b.n	8007960 <_scanf_float+0x188>
 80079ae:	f1ba 0f01 	cmp.w	sl, #1
 80079b2:	f47f af41 	bne.w	8007838 <_scanf_float+0x60>
 80079b6:	f04f 0a02 	mov.w	sl, #2
 80079ba:	e7d1      	b.n	8007960 <_scanf_float+0x188>
 80079bc:	b97d      	cbnz	r5, 80079de <_scanf_float+0x206>
 80079be:	f1b9 0f00 	cmp.w	r9, #0
 80079c2:	f47f af3c 	bne.w	800783e <_scanf_float+0x66>
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80079cc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80079d0:	f47f af39 	bne.w	8007846 <_scanf_float+0x6e>
 80079d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80079d8:	6022      	str	r2, [r4, #0]
 80079da:	2501      	movs	r5, #1
 80079dc:	e7c0      	b.n	8007960 <_scanf_float+0x188>
 80079de:	2d03      	cmp	r5, #3
 80079e0:	d0e2      	beq.n	80079a8 <_scanf_float+0x1d0>
 80079e2:	2d05      	cmp	r5, #5
 80079e4:	e7de      	b.n	80079a4 <_scanf_float+0x1cc>
 80079e6:	2d02      	cmp	r5, #2
 80079e8:	f47f af26 	bne.w	8007838 <_scanf_float+0x60>
 80079ec:	2503      	movs	r5, #3
 80079ee:	e7b7      	b.n	8007960 <_scanf_float+0x188>
 80079f0:	2d06      	cmp	r5, #6
 80079f2:	f47f af21 	bne.w	8007838 <_scanf_float+0x60>
 80079f6:	2507      	movs	r5, #7
 80079f8:	e7b2      	b.n	8007960 <_scanf_float+0x188>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	0591      	lsls	r1, r2, #22
 80079fe:	f57f af1b 	bpl.w	8007838 <_scanf_float+0x60>
 8007a02:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007a06:	6022      	str	r2, [r4, #0]
 8007a08:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a0c:	e7a8      	b.n	8007960 <_scanf_float+0x188>
 8007a0e:	6822      	ldr	r2, [r4, #0]
 8007a10:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007a14:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007a18:	d006      	beq.n	8007a28 <_scanf_float+0x250>
 8007a1a:	0550      	lsls	r0, r2, #21
 8007a1c:	f57f af0c 	bpl.w	8007838 <_scanf_float+0x60>
 8007a20:	f1b9 0f00 	cmp.w	r9, #0
 8007a24:	f43f af0f 	beq.w	8007846 <_scanf_float+0x6e>
 8007a28:	0591      	lsls	r1, r2, #22
 8007a2a:	bf58      	it	pl
 8007a2c:	9901      	ldrpl	r1, [sp, #4]
 8007a2e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007a32:	bf58      	it	pl
 8007a34:	eba9 0101 	subpl.w	r1, r9, r1
 8007a38:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007a3c:	bf58      	it	pl
 8007a3e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	e78a      	b.n	8007960 <_scanf_float+0x188>
 8007a4a:	f04f 0a03 	mov.w	sl, #3
 8007a4e:	e787      	b.n	8007960 <_scanf_float+0x188>
 8007a50:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007a54:	4639      	mov	r1, r7
 8007a56:	4640      	mov	r0, r8
 8007a58:	4798      	blx	r3
 8007a5a:	2800      	cmp	r0, #0
 8007a5c:	f43f aedf 	beq.w	800781e <_scanf_float+0x46>
 8007a60:	e6ea      	b.n	8007838 <_scanf_float+0x60>
 8007a62:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a6a:	463a      	mov	r2, r7
 8007a6c:	4640      	mov	r0, r8
 8007a6e:	4798      	blx	r3
 8007a70:	6923      	ldr	r3, [r4, #16]
 8007a72:	3b01      	subs	r3, #1
 8007a74:	6123      	str	r3, [r4, #16]
 8007a76:	e6ec      	b.n	8007852 <_scanf_float+0x7a>
 8007a78:	1e6b      	subs	r3, r5, #1
 8007a7a:	2b06      	cmp	r3, #6
 8007a7c:	d825      	bhi.n	8007aca <_scanf_float+0x2f2>
 8007a7e:	2d02      	cmp	r5, #2
 8007a80:	d836      	bhi.n	8007af0 <_scanf_float+0x318>
 8007a82:	455e      	cmp	r6, fp
 8007a84:	f67f aee8 	bls.w	8007858 <_scanf_float+0x80>
 8007a88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a8c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a90:	463a      	mov	r2, r7
 8007a92:	4640      	mov	r0, r8
 8007a94:	4798      	blx	r3
 8007a96:	6923      	ldr	r3, [r4, #16]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	6123      	str	r3, [r4, #16]
 8007a9c:	e7f1      	b.n	8007a82 <_scanf_float+0x2aa>
 8007a9e:	9802      	ldr	r0, [sp, #8]
 8007aa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007aa4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007aa8:	9002      	str	r0, [sp, #8]
 8007aaa:	463a      	mov	r2, r7
 8007aac:	4640      	mov	r0, r8
 8007aae:	4798      	blx	r3
 8007ab0:	6923      	ldr	r3, [r4, #16]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	6123      	str	r3, [r4, #16]
 8007ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007aba:	fa5f fa8a 	uxtb.w	sl, sl
 8007abe:	f1ba 0f02 	cmp.w	sl, #2
 8007ac2:	d1ec      	bne.n	8007a9e <_scanf_float+0x2c6>
 8007ac4:	3d03      	subs	r5, #3
 8007ac6:	b2ed      	uxtb	r5, r5
 8007ac8:	1b76      	subs	r6, r6, r5
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	05da      	lsls	r2, r3, #23
 8007ace:	d52f      	bpl.n	8007b30 <_scanf_float+0x358>
 8007ad0:	055b      	lsls	r3, r3, #21
 8007ad2:	d510      	bpl.n	8007af6 <_scanf_float+0x31e>
 8007ad4:	455e      	cmp	r6, fp
 8007ad6:	f67f aebf 	bls.w	8007858 <_scanf_float+0x80>
 8007ada:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ade:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ae2:	463a      	mov	r2, r7
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4798      	blx	r3
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	6123      	str	r3, [r4, #16]
 8007aee:	e7f1      	b.n	8007ad4 <_scanf_float+0x2fc>
 8007af0:	46aa      	mov	sl, r5
 8007af2:	9602      	str	r6, [sp, #8]
 8007af4:	e7df      	b.n	8007ab6 <_scanf_float+0x2de>
 8007af6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007afa:	6923      	ldr	r3, [r4, #16]
 8007afc:	2965      	cmp	r1, #101	; 0x65
 8007afe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b02:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b06:	6123      	str	r3, [r4, #16]
 8007b08:	d00c      	beq.n	8007b24 <_scanf_float+0x34c>
 8007b0a:	2945      	cmp	r1, #69	; 0x45
 8007b0c:	d00a      	beq.n	8007b24 <_scanf_float+0x34c>
 8007b0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b12:	463a      	mov	r2, r7
 8007b14:	4640      	mov	r0, r8
 8007b16:	4798      	blx	r3
 8007b18:	6923      	ldr	r3, [r4, #16]
 8007b1a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b1e:	3b01      	subs	r3, #1
 8007b20:	1eb5      	subs	r5, r6, #2
 8007b22:	6123      	str	r3, [r4, #16]
 8007b24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007b28:	463a      	mov	r2, r7
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4798      	blx	r3
 8007b2e:	462e      	mov	r6, r5
 8007b30:	6825      	ldr	r5, [r4, #0]
 8007b32:	f015 0510 	ands.w	r5, r5, #16
 8007b36:	d159      	bne.n	8007bec <_scanf_float+0x414>
 8007b38:	7035      	strb	r5, [r6, #0]
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b44:	d11b      	bne.n	8007b7e <_scanf_float+0x3a6>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	454b      	cmp	r3, r9
 8007b4a:	eba3 0209 	sub.w	r2, r3, r9
 8007b4e:	d123      	bne.n	8007b98 <_scanf_float+0x3c0>
 8007b50:	2200      	movs	r2, #0
 8007b52:	4659      	mov	r1, fp
 8007b54:	4640      	mov	r0, r8
 8007b56:	f000 ff25 	bl	80089a4 <_strtod_r>
 8007b5a:	6822      	ldr	r2, [r4, #0]
 8007b5c:	9b03      	ldr	r3, [sp, #12]
 8007b5e:	f012 0f02 	tst.w	r2, #2
 8007b62:	ec57 6b10 	vmov	r6, r7, d0
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	d021      	beq.n	8007bae <_scanf_float+0x3d6>
 8007b6a:	9903      	ldr	r1, [sp, #12]
 8007b6c:	1d1a      	adds	r2, r3, #4
 8007b6e:	600a      	str	r2, [r1, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	e9c3 6700 	strd	r6, r7, [r3]
 8007b76:	68e3      	ldr	r3, [r4, #12]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	60e3      	str	r3, [r4, #12]
 8007b7c:	e66d      	b.n	800785a <_scanf_float+0x82>
 8007b7e:	9b04      	ldr	r3, [sp, #16]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0e5      	beq.n	8007b50 <_scanf_float+0x378>
 8007b84:	9905      	ldr	r1, [sp, #20]
 8007b86:	230a      	movs	r3, #10
 8007b88:	462a      	mov	r2, r5
 8007b8a:	3101      	adds	r1, #1
 8007b8c:	4640      	mov	r0, r8
 8007b8e:	f000 ff91 	bl	8008ab4 <_strtol_r>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	9e05      	ldr	r6, [sp, #20]
 8007b96:	1ac2      	subs	r2, r0, r3
 8007b98:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007b9c:	429e      	cmp	r6, r3
 8007b9e:	bf28      	it	cs
 8007ba0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ba4:	4912      	ldr	r1, [pc, #72]	; (8007bf0 <_scanf_float+0x418>)
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f8ba 	bl	8007d20 <siprintf>
 8007bac:	e7d0      	b.n	8007b50 <_scanf_float+0x378>
 8007bae:	9903      	ldr	r1, [sp, #12]
 8007bb0:	f012 0f04 	tst.w	r2, #4
 8007bb4:	f103 0204 	add.w	r2, r3, #4
 8007bb8:	600a      	str	r2, [r1, #0]
 8007bba:	d1d9      	bne.n	8007b70 <_scanf_float+0x398>
 8007bbc:	f8d3 8000 	ldr.w	r8, [r3]
 8007bc0:	ee10 2a10 	vmov	r2, s0
 8007bc4:	ee10 0a10 	vmov	r0, s0
 8007bc8:	463b      	mov	r3, r7
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 ffae 	bl	8000b2c <__aeabi_dcmpun>
 8007bd0:	b128      	cbz	r0, 8007bde <_scanf_float+0x406>
 8007bd2:	4808      	ldr	r0, [pc, #32]	; (8007bf4 <_scanf_float+0x41c>)
 8007bd4:	f000 f89e 	bl	8007d14 <nanf>
 8007bd8:	ed88 0a00 	vstr	s0, [r8]
 8007bdc:	e7cb      	b.n	8007b76 <_scanf_float+0x39e>
 8007bde:	4630      	mov	r0, r6
 8007be0:	4639      	mov	r1, r7
 8007be2:	f7f9 f801 	bl	8000be8 <__aeabi_d2f>
 8007be6:	f8c8 0000 	str.w	r0, [r8]
 8007bea:	e7c4      	b.n	8007b76 <_scanf_float+0x39e>
 8007bec:	2500      	movs	r5, #0
 8007bee:	e634      	b.n	800785a <_scanf_float+0x82>
 8007bf0:	0800ba64 	.word	0x0800ba64
 8007bf4:	0800bed8 	.word	0x0800bed8

08007bf8 <iprintf>:
 8007bf8:	b40f      	push	{r0, r1, r2, r3}
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <iprintf+0x2c>)
 8007bfc:	b513      	push	{r0, r1, r4, lr}
 8007bfe:	681c      	ldr	r4, [r3, #0]
 8007c00:	b124      	cbz	r4, 8007c0c <iprintf+0x14>
 8007c02:	69a3      	ldr	r3, [r4, #24]
 8007c04:	b913      	cbnz	r3, 8007c0c <iprintf+0x14>
 8007c06:	4620      	mov	r0, r4
 8007c08:	f001 ffb6 	bl	8009b78 <__sinit>
 8007c0c:	ab05      	add	r3, sp, #20
 8007c0e:	9a04      	ldr	r2, [sp, #16]
 8007c10:	68a1      	ldr	r1, [r4, #8]
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	4620      	mov	r0, r4
 8007c16:	f003 fb8d 	bl	800b334 <_vfiprintf_r>
 8007c1a:	b002      	add	sp, #8
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c20:	b004      	add	sp, #16
 8007c22:	4770      	bx	lr
 8007c24:	20000010 	.word	0x20000010

08007c28 <_puts_r>:
 8007c28:	b570      	push	{r4, r5, r6, lr}
 8007c2a:	460e      	mov	r6, r1
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	b118      	cbz	r0, 8007c38 <_puts_r+0x10>
 8007c30:	6983      	ldr	r3, [r0, #24]
 8007c32:	b90b      	cbnz	r3, 8007c38 <_puts_r+0x10>
 8007c34:	f001 ffa0 	bl	8009b78 <__sinit>
 8007c38:	69ab      	ldr	r3, [r5, #24]
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	b913      	cbnz	r3, 8007c44 <_puts_r+0x1c>
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f001 ff9a 	bl	8009b78 <__sinit>
 8007c44:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <_puts_r+0xd0>)
 8007c46:	429c      	cmp	r4, r3
 8007c48:	d120      	bne.n	8007c8c <_puts_r+0x64>
 8007c4a:	686c      	ldr	r4, [r5, #4]
 8007c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c4e:	07db      	lsls	r3, r3, #31
 8007c50:	d405      	bmi.n	8007c5e <_puts_r+0x36>
 8007c52:	89a3      	ldrh	r3, [r4, #12]
 8007c54:	0598      	lsls	r0, r3, #22
 8007c56:	d402      	bmi.n	8007c5e <_puts_r+0x36>
 8007c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c5a:	f002 fb9e 	bl	800a39a <__retarget_lock_acquire_recursive>
 8007c5e:	89a3      	ldrh	r3, [r4, #12]
 8007c60:	0719      	lsls	r1, r3, #28
 8007c62:	d51d      	bpl.n	8007ca0 <_puts_r+0x78>
 8007c64:	6923      	ldr	r3, [r4, #16]
 8007c66:	b1db      	cbz	r3, 8007ca0 <_puts_r+0x78>
 8007c68:	3e01      	subs	r6, #1
 8007c6a:	68a3      	ldr	r3, [r4, #8]
 8007c6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c70:	3b01      	subs	r3, #1
 8007c72:	60a3      	str	r3, [r4, #8]
 8007c74:	bb39      	cbnz	r1, 8007cc6 <_puts_r+0x9e>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	da38      	bge.n	8007cec <_puts_r+0xc4>
 8007c7a:	4622      	mov	r2, r4
 8007c7c:	210a      	movs	r1, #10
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 ff24 	bl	8008acc <__swbuf_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d011      	beq.n	8007cac <_puts_r+0x84>
 8007c88:	250a      	movs	r5, #10
 8007c8a:	e011      	b.n	8007cb0 <_puts_r+0x88>
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	; (8007cfc <_puts_r+0xd4>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d101      	bne.n	8007c96 <_puts_r+0x6e>
 8007c92:	68ac      	ldr	r4, [r5, #8]
 8007c94:	e7da      	b.n	8007c4c <_puts_r+0x24>
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <_puts_r+0xd8>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	bf08      	it	eq
 8007c9c:	68ec      	ldreq	r4, [r5, #12]
 8007c9e:	e7d5      	b.n	8007c4c <_puts_r+0x24>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 ff64 	bl	8008b70 <__swsetup_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0dd      	beq.n	8007c68 <_puts_r+0x40>
 8007cac:	f04f 35ff 	mov.w	r5, #4294967295
 8007cb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007cb2:	07da      	lsls	r2, r3, #31
 8007cb4:	d405      	bmi.n	8007cc2 <_puts_r+0x9a>
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	059b      	lsls	r3, r3, #22
 8007cba:	d402      	bmi.n	8007cc2 <_puts_r+0x9a>
 8007cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007cbe:	f002 fb6d 	bl	800a39c <__retarget_lock_release_recursive>
 8007cc2:	4628      	mov	r0, r5
 8007cc4:	bd70      	pop	{r4, r5, r6, pc}
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	da04      	bge.n	8007cd4 <_puts_r+0xac>
 8007cca:	69a2      	ldr	r2, [r4, #24]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	dc06      	bgt.n	8007cde <_puts_r+0xb6>
 8007cd0:	290a      	cmp	r1, #10
 8007cd2:	d004      	beq.n	8007cde <_puts_r+0xb6>
 8007cd4:	6823      	ldr	r3, [r4, #0]
 8007cd6:	1c5a      	adds	r2, r3, #1
 8007cd8:	6022      	str	r2, [r4, #0]
 8007cda:	7019      	strb	r1, [r3, #0]
 8007cdc:	e7c5      	b.n	8007c6a <_puts_r+0x42>
 8007cde:	4622      	mov	r2, r4
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f000 fef3 	bl	8008acc <__swbuf_r>
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d1bf      	bne.n	8007c6a <_puts_r+0x42>
 8007cea:	e7df      	b.n	8007cac <_puts_r+0x84>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	250a      	movs	r5, #10
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	6022      	str	r2, [r4, #0]
 8007cf4:	701d      	strb	r5, [r3, #0]
 8007cf6:	e7db      	b.n	8007cb0 <_puts_r+0x88>
 8007cf8:	0800bc74 	.word	0x0800bc74
 8007cfc:	0800bc94 	.word	0x0800bc94
 8007d00:	0800bc54 	.word	0x0800bc54

08007d04 <puts>:
 8007d04:	4b02      	ldr	r3, [pc, #8]	; (8007d10 <puts+0xc>)
 8007d06:	4601      	mov	r1, r0
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	f7ff bf8d 	b.w	8007c28 <_puts_r>
 8007d0e:	bf00      	nop
 8007d10:	20000010 	.word	0x20000010

08007d14 <nanf>:
 8007d14:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007d1c <nanf+0x8>
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	7fc00000 	.word	0x7fc00000

08007d20 <siprintf>:
 8007d20:	b40e      	push	{r1, r2, r3}
 8007d22:	b500      	push	{lr}
 8007d24:	b09c      	sub	sp, #112	; 0x70
 8007d26:	ab1d      	add	r3, sp, #116	; 0x74
 8007d28:	9002      	str	r0, [sp, #8]
 8007d2a:	9006      	str	r0, [sp, #24]
 8007d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d30:	4809      	ldr	r0, [pc, #36]	; (8007d58 <siprintf+0x38>)
 8007d32:	9107      	str	r1, [sp, #28]
 8007d34:	9104      	str	r1, [sp, #16]
 8007d36:	4909      	ldr	r1, [pc, #36]	; (8007d5c <siprintf+0x3c>)
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	9105      	str	r1, [sp, #20]
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	a902      	add	r1, sp, #8
 8007d44:	f003 f9cc 	bl	800b0e0 <_svfiprintf_r>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	b01c      	add	sp, #112	; 0x70
 8007d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d54:	b003      	add	sp, #12
 8007d56:	4770      	bx	lr
 8007d58:	20000010 	.word	0x20000010
 8007d5c:	ffff0208 	.word	0xffff0208

08007d60 <sulp>:
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	ec45 4b10 	vmov	d0, r4, r5
 8007d6a:	4616      	mov	r6, r2
 8007d6c:	f002 ff16 	bl	800ab9c <__ulp>
 8007d70:	ec51 0b10 	vmov	r0, r1, d0
 8007d74:	b17e      	cbz	r6, 8007d96 <sulp+0x36>
 8007d76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007d7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dd09      	ble.n	8007d96 <sulp+0x36>
 8007d82:	051b      	lsls	r3, r3, #20
 8007d84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007d88:	2400      	movs	r4, #0
 8007d8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007d8e:	4622      	mov	r2, r4
 8007d90:	462b      	mov	r3, r5
 8007d92:	f7f8 fc31 	bl	80005f8 <__aeabi_dmul>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}

08007d98 <_strtod_l>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	ed2d 8b02 	vpush	{d8}
 8007da0:	b09d      	sub	sp, #116	; 0x74
 8007da2:	461f      	mov	r7, r3
 8007da4:	2300      	movs	r3, #0
 8007da6:	9318      	str	r3, [sp, #96]	; 0x60
 8007da8:	4ba2      	ldr	r3, [pc, #648]	; (8008034 <_strtod_l+0x29c>)
 8007daa:	9213      	str	r2, [sp, #76]	; 0x4c
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	9305      	str	r3, [sp, #20]
 8007db0:	4604      	mov	r4, r0
 8007db2:	4618      	mov	r0, r3
 8007db4:	4688      	mov	r8, r1
 8007db6:	f7f8 fa0b 	bl	80001d0 <strlen>
 8007dba:	f04f 0a00 	mov.w	sl, #0
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	f04f 0b00 	mov.w	fp, #0
 8007dc4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dca:	781a      	ldrb	r2, [r3, #0]
 8007dcc:	2a2b      	cmp	r2, #43	; 0x2b
 8007dce:	d04e      	beq.n	8007e6e <_strtod_l+0xd6>
 8007dd0:	d83b      	bhi.n	8007e4a <_strtod_l+0xb2>
 8007dd2:	2a0d      	cmp	r2, #13
 8007dd4:	d834      	bhi.n	8007e40 <_strtod_l+0xa8>
 8007dd6:	2a08      	cmp	r2, #8
 8007dd8:	d834      	bhi.n	8007e44 <_strtod_l+0xac>
 8007dda:	2a00      	cmp	r2, #0
 8007ddc:	d03e      	beq.n	8007e5c <_strtod_l+0xc4>
 8007dde:	2300      	movs	r3, #0
 8007de0:	930a      	str	r3, [sp, #40]	; 0x28
 8007de2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007de4:	7833      	ldrb	r3, [r6, #0]
 8007de6:	2b30      	cmp	r3, #48	; 0x30
 8007de8:	f040 80b0 	bne.w	8007f4c <_strtod_l+0x1b4>
 8007dec:	7873      	ldrb	r3, [r6, #1]
 8007dee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007df2:	2b58      	cmp	r3, #88	; 0x58
 8007df4:	d168      	bne.n	8007ec8 <_strtod_l+0x130>
 8007df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007df8:	9301      	str	r3, [sp, #4]
 8007dfa:	ab18      	add	r3, sp, #96	; 0x60
 8007dfc:	9702      	str	r7, [sp, #8]
 8007dfe:	9300      	str	r3, [sp, #0]
 8007e00:	4a8d      	ldr	r2, [pc, #564]	; (8008038 <_strtod_l+0x2a0>)
 8007e02:	ab19      	add	r3, sp, #100	; 0x64
 8007e04:	a917      	add	r1, sp, #92	; 0x5c
 8007e06:	4620      	mov	r0, r4
 8007e08:	f001 ffba 	bl	8009d80 <__gethex>
 8007e0c:	f010 0707 	ands.w	r7, r0, #7
 8007e10:	4605      	mov	r5, r0
 8007e12:	d005      	beq.n	8007e20 <_strtod_l+0x88>
 8007e14:	2f06      	cmp	r7, #6
 8007e16:	d12c      	bne.n	8007e72 <_strtod_l+0xda>
 8007e18:	3601      	adds	r6, #1
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	9617      	str	r6, [sp, #92]	; 0x5c
 8007e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8007e20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 8590 	bne.w	8008948 <_strtod_l+0xbb0>
 8007e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e2a:	b1eb      	cbz	r3, 8007e68 <_strtod_l+0xd0>
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007e32:	ec43 2b10 	vmov	d0, r2, r3
 8007e36:	b01d      	add	sp, #116	; 0x74
 8007e38:	ecbd 8b02 	vpop	{d8}
 8007e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e40:	2a20      	cmp	r2, #32
 8007e42:	d1cc      	bne.n	8007dde <_strtod_l+0x46>
 8007e44:	3301      	adds	r3, #1
 8007e46:	9317      	str	r3, [sp, #92]	; 0x5c
 8007e48:	e7be      	b.n	8007dc8 <_strtod_l+0x30>
 8007e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8007e4c:	d1c7      	bne.n	8007dde <_strtod_l+0x46>
 8007e4e:	2201      	movs	r2, #1
 8007e50:	920a      	str	r2, [sp, #40]	; 0x28
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1c2      	bne.n	8007de2 <_strtod_l+0x4a>
 8007e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007e5e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f040 856e 	bne.w	8008944 <_strtod_l+0xbac>
 8007e68:	4652      	mov	r2, sl
 8007e6a:	465b      	mov	r3, fp
 8007e6c:	e7e1      	b.n	8007e32 <_strtod_l+0x9a>
 8007e6e:	2200      	movs	r2, #0
 8007e70:	e7ee      	b.n	8007e50 <_strtod_l+0xb8>
 8007e72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007e74:	b13a      	cbz	r2, 8007e86 <_strtod_l+0xee>
 8007e76:	2135      	movs	r1, #53	; 0x35
 8007e78:	a81a      	add	r0, sp, #104	; 0x68
 8007e7a:	f002 ff9a 	bl	800adb2 <__copybits>
 8007e7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007e80:	4620      	mov	r0, r4
 8007e82:	f002 fb59 	bl	800a538 <_Bfree>
 8007e86:	3f01      	subs	r7, #1
 8007e88:	2f04      	cmp	r7, #4
 8007e8a:	d806      	bhi.n	8007e9a <_strtod_l+0x102>
 8007e8c:	e8df f007 	tbb	[pc, r7]
 8007e90:	1714030a 	.word	0x1714030a
 8007e94:	0a          	.byte	0x0a
 8007e95:	00          	.byte	0x00
 8007e96:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007e9a:	0728      	lsls	r0, r5, #28
 8007e9c:	d5c0      	bpl.n	8007e20 <_strtod_l+0x88>
 8007e9e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007ea2:	e7bd      	b.n	8007e20 <_strtod_l+0x88>
 8007ea4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007ea8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007eaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007eae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007eb2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007eb6:	e7f0      	b.n	8007e9a <_strtod_l+0x102>
 8007eb8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800803c <_strtod_l+0x2a4>
 8007ebc:	e7ed      	b.n	8007e9a <_strtod_l+0x102>
 8007ebe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007ec2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ec6:	e7e8      	b.n	8007e9a <_strtod_l+0x102>
 8007ec8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007eca:	1c5a      	adds	r2, r3, #1
 8007ecc:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b30      	cmp	r3, #48	; 0x30
 8007ed2:	d0f9      	beq.n	8007ec8 <_strtod_l+0x130>
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0a3      	beq.n	8007e20 <_strtod_l+0x88>
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f04f 0900 	mov.w	r9, #0
 8007ede:	9304      	str	r3, [sp, #16]
 8007ee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ee2:	9308      	str	r3, [sp, #32]
 8007ee4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007ee8:	464f      	mov	r7, r9
 8007eea:	220a      	movs	r2, #10
 8007eec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007eee:	7806      	ldrb	r6, [r0, #0]
 8007ef0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007ef4:	b2d9      	uxtb	r1, r3
 8007ef6:	2909      	cmp	r1, #9
 8007ef8:	d92a      	bls.n	8007f50 <_strtod_l+0x1b8>
 8007efa:	9905      	ldr	r1, [sp, #20]
 8007efc:	462a      	mov	r2, r5
 8007efe:	f003 fba6 	bl	800b64e <strncmp>
 8007f02:	b398      	cbz	r0, 8007f6c <_strtod_l+0x1d4>
 8007f04:	2000      	movs	r0, #0
 8007f06:	4632      	mov	r2, r6
 8007f08:	463d      	mov	r5, r7
 8007f0a:	9005      	str	r0, [sp, #20]
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2a65      	cmp	r2, #101	; 0x65
 8007f10:	d001      	beq.n	8007f16 <_strtod_l+0x17e>
 8007f12:	2a45      	cmp	r2, #69	; 0x45
 8007f14:	d118      	bne.n	8007f48 <_strtod_l+0x1b0>
 8007f16:	b91d      	cbnz	r5, 8007f20 <_strtod_l+0x188>
 8007f18:	9a04      	ldr	r2, [sp, #16]
 8007f1a:	4302      	orrs	r2, r0
 8007f1c:	d09e      	beq.n	8007e5c <_strtod_l+0xc4>
 8007f1e:	2500      	movs	r5, #0
 8007f20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007f24:	f108 0201 	add.w	r2, r8, #1
 8007f28:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007f2e:	2a2b      	cmp	r2, #43	; 0x2b
 8007f30:	d075      	beq.n	800801e <_strtod_l+0x286>
 8007f32:	2a2d      	cmp	r2, #45	; 0x2d
 8007f34:	d07b      	beq.n	800802e <_strtod_l+0x296>
 8007f36:	f04f 0c00 	mov.w	ip, #0
 8007f3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007f3e:	2909      	cmp	r1, #9
 8007f40:	f240 8082 	bls.w	8008048 <_strtod_l+0x2b0>
 8007f44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007f48:	2600      	movs	r6, #0
 8007f4a:	e09d      	b.n	8008088 <_strtod_l+0x2f0>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	e7c4      	b.n	8007eda <_strtod_l+0x142>
 8007f50:	2f08      	cmp	r7, #8
 8007f52:	bfd8      	it	le
 8007f54:	9907      	ldrle	r1, [sp, #28]
 8007f56:	f100 0001 	add.w	r0, r0, #1
 8007f5a:	bfda      	itte	le
 8007f5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007f60:	9307      	strle	r3, [sp, #28]
 8007f62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007f66:	3701      	adds	r7, #1
 8007f68:	9017      	str	r0, [sp, #92]	; 0x5c
 8007f6a:	e7bf      	b.n	8007eec <_strtod_l+0x154>
 8007f6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f6e:	195a      	adds	r2, r3, r5
 8007f70:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f72:	5d5a      	ldrb	r2, [r3, r5]
 8007f74:	2f00      	cmp	r7, #0
 8007f76:	d037      	beq.n	8007fe8 <_strtod_l+0x250>
 8007f78:	9005      	str	r0, [sp, #20]
 8007f7a:	463d      	mov	r5, r7
 8007f7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007f80:	2b09      	cmp	r3, #9
 8007f82:	d912      	bls.n	8007faa <_strtod_l+0x212>
 8007f84:	2301      	movs	r3, #1
 8007f86:	e7c2      	b.n	8007f0e <_strtod_l+0x176>
 8007f88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007f8e:	785a      	ldrb	r2, [r3, #1]
 8007f90:	3001      	adds	r0, #1
 8007f92:	2a30      	cmp	r2, #48	; 0x30
 8007f94:	d0f8      	beq.n	8007f88 <_strtod_l+0x1f0>
 8007f96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007f9a:	2b08      	cmp	r3, #8
 8007f9c:	f200 84d9 	bhi.w	8008952 <_strtod_l+0xbba>
 8007fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fa2:	9005      	str	r0, [sp, #20]
 8007fa4:	2000      	movs	r0, #0
 8007fa6:	9308      	str	r3, [sp, #32]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	3a30      	subs	r2, #48	; 0x30
 8007fac:	f100 0301 	add.w	r3, r0, #1
 8007fb0:	d014      	beq.n	8007fdc <_strtod_l+0x244>
 8007fb2:	9905      	ldr	r1, [sp, #20]
 8007fb4:	4419      	add	r1, r3
 8007fb6:	9105      	str	r1, [sp, #20]
 8007fb8:	462b      	mov	r3, r5
 8007fba:	eb00 0e05 	add.w	lr, r0, r5
 8007fbe:	210a      	movs	r1, #10
 8007fc0:	4573      	cmp	r3, lr
 8007fc2:	d113      	bne.n	8007fec <_strtod_l+0x254>
 8007fc4:	182b      	adds	r3, r5, r0
 8007fc6:	2b08      	cmp	r3, #8
 8007fc8:	f105 0501 	add.w	r5, r5, #1
 8007fcc:	4405      	add	r5, r0
 8007fce:	dc1c      	bgt.n	800800a <_strtod_l+0x272>
 8007fd0:	9907      	ldr	r1, [sp, #28]
 8007fd2:	230a      	movs	r3, #10
 8007fd4:	fb03 2301 	mla	r3, r3, r1, r2
 8007fd8:	9307      	str	r3, [sp, #28]
 8007fda:	2300      	movs	r3, #0
 8007fdc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007fde:	1c51      	adds	r1, r2, #1
 8007fe0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007fe2:	7852      	ldrb	r2, [r2, #1]
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	e7c9      	b.n	8007f7c <_strtod_l+0x1e4>
 8007fe8:	4638      	mov	r0, r7
 8007fea:	e7d2      	b.n	8007f92 <_strtod_l+0x1fa>
 8007fec:	2b08      	cmp	r3, #8
 8007fee:	dc04      	bgt.n	8007ffa <_strtod_l+0x262>
 8007ff0:	9e07      	ldr	r6, [sp, #28]
 8007ff2:	434e      	muls	r6, r1
 8007ff4:	9607      	str	r6, [sp, #28]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	e7e2      	b.n	8007fc0 <_strtod_l+0x228>
 8007ffa:	f103 0c01 	add.w	ip, r3, #1
 8007ffe:	f1bc 0f10 	cmp.w	ip, #16
 8008002:	bfd8      	it	le
 8008004:	fb01 f909 	mulle.w	r9, r1, r9
 8008008:	e7f5      	b.n	8007ff6 <_strtod_l+0x25e>
 800800a:	2d10      	cmp	r5, #16
 800800c:	bfdc      	itt	le
 800800e:	230a      	movle	r3, #10
 8008010:	fb03 2909 	mlale	r9, r3, r9, r2
 8008014:	e7e1      	b.n	8007fda <_strtod_l+0x242>
 8008016:	2300      	movs	r3, #0
 8008018:	9305      	str	r3, [sp, #20]
 800801a:	2301      	movs	r3, #1
 800801c:	e77c      	b.n	8007f18 <_strtod_l+0x180>
 800801e:	f04f 0c00 	mov.w	ip, #0
 8008022:	f108 0202 	add.w	r2, r8, #2
 8008026:	9217      	str	r2, [sp, #92]	; 0x5c
 8008028:	f898 2002 	ldrb.w	r2, [r8, #2]
 800802c:	e785      	b.n	8007f3a <_strtod_l+0x1a2>
 800802e:	f04f 0c01 	mov.w	ip, #1
 8008032:	e7f6      	b.n	8008022 <_strtod_l+0x28a>
 8008034:	0800bd1c 	.word	0x0800bd1c
 8008038:	0800ba6c 	.word	0x0800ba6c
 800803c:	7ff00000 	.word	0x7ff00000
 8008040:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008042:	1c51      	adds	r1, r2, #1
 8008044:	9117      	str	r1, [sp, #92]	; 0x5c
 8008046:	7852      	ldrb	r2, [r2, #1]
 8008048:	2a30      	cmp	r2, #48	; 0x30
 800804a:	d0f9      	beq.n	8008040 <_strtod_l+0x2a8>
 800804c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008050:	2908      	cmp	r1, #8
 8008052:	f63f af79 	bhi.w	8007f48 <_strtod_l+0x1b0>
 8008056:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800805a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800805c:	9206      	str	r2, [sp, #24]
 800805e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008060:	1c51      	adds	r1, r2, #1
 8008062:	9117      	str	r1, [sp, #92]	; 0x5c
 8008064:	7852      	ldrb	r2, [r2, #1]
 8008066:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800806a:	2e09      	cmp	r6, #9
 800806c:	d937      	bls.n	80080de <_strtod_l+0x346>
 800806e:	9e06      	ldr	r6, [sp, #24]
 8008070:	1b89      	subs	r1, r1, r6
 8008072:	2908      	cmp	r1, #8
 8008074:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008078:	dc02      	bgt.n	8008080 <_strtod_l+0x2e8>
 800807a:	4576      	cmp	r6, lr
 800807c:	bfa8      	it	ge
 800807e:	4676      	movge	r6, lr
 8008080:	f1bc 0f00 	cmp.w	ip, #0
 8008084:	d000      	beq.n	8008088 <_strtod_l+0x2f0>
 8008086:	4276      	negs	r6, r6
 8008088:	2d00      	cmp	r5, #0
 800808a:	d14d      	bne.n	8008128 <_strtod_l+0x390>
 800808c:	9904      	ldr	r1, [sp, #16]
 800808e:	4301      	orrs	r1, r0
 8008090:	f47f aec6 	bne.w	8007e20 <_strtod_l+0x88>
 8008094:	2b00      	cmp	r3, #0
 8008096:	f47f aee1 	bne.w	8007e5c <_strtod_l+0xc4>
 800809a:	2a69      	cmp	r2, #105	; 0x69
 800809c:	d027      	beq.n	80080ee <_strtod_l+0x356>
 800809e:	dc24      	bgt.n	80080ea <_strtod_l+0x352>
 80080a0:	2a49      	cmp	r2, #73	; 0x49
 80080a2:	d024      	beq.n	80080ee <_strtod_l+0x356>
 80080a4:	2a4e      	cmp	r2, #78	; 0x4e
 80080a6:	f47f aed9 	bne.w	8007e5c <_strtod_l+0xc4>
 80080aa:	499f      	ldr	r1, [pc, #636]	; (8008328 <_strtod_l+0x590>)
 80080ac:	a817      	add	r0, sp, #92	; 0x5c
 80080ae:	f002 f8bf 	bl	800a230 <__match>
 80080b2:	2800      	cmp	r0, #0
 80080b4:	f43f aed2 	beq.w	8007e5c <_strtod_l+0xc4>
 80080b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b28      	cmp	r3, #40	; 0x28
 80080be:	d12d      	bne.n	800811c <_strtod_l+0x384>
 80080c0:	499a      	ldr	r1, [pc, #616]	; (800832c <_strtod_l+0x594>)
 80080c2:	aa1a      	add	r2, sp, #104	; 0x68
 80080c4:	a817      	add	r0, sp, #92	; 0x5c
 80080c6:	f002 f8c7 	bl	800a258 <__hexnan>
 80080ca:	2805      	cmp	r0, #5
 80080cc:	d126      	bne.n	800811c <_strtod_l+0x384>
 80080ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80080d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80080d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80080d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80080dc:	e6a0      	b.n	8007e20 <_strtod_l+0x88>
 80080de:	210a      	movs	r1, #10
 80080e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80080e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80080e8:	e7b9      	b.n	800805e <_strtod_l+0x2c6>
 80080ea:	2a6e      	cmp	r2, #110	; 0x6e
 80080ec:	e7db      	b.n	80080a6 <_strtod_l+0x30e>
 80080ee:	4990      	ldr	r1, [pc, #576]	; (8008330 <_strtod_l+0x598>)
 80080f0:	a817      	add	r0, sp, #92	; 0x5c
 80080f2:	f002 f89d 	bl	800a230 <__match>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	f43f aeb0 	beq.w	8007e5c <_strtod_l+0xc4>
 80080fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080fe:	498d      	ldr	r1, [pc, #564]	; (8008334 <_strtod_l+0x59c>)
 8008100:	3b01      	subs	r3, #1
 8008102:	a817      	add	r0, sp, #92	; 0x5c
 8008104:	9317      	str	r3, [sp, #92]	; 0x5c
 8008106:	f002 f893 	bl	800a230 <__match>
 800810a:	b910      	cbnz	r0, 8008112 <_strtod_l+0x37a>
 800810c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800810e:	3301      	adds	r3, #1
 8008110:	9317      	str	r3, [sp, #92]	; 0x5c
 8008112:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008344 <_strtod_l+0x5ac>
 8008116:	f04f 0a00 	mov.w	sl, #0
 800811a:	e681      	b.n	8007e20 <_strtod_l+0x88>
 800811c:	4886      	ldr	r0, [pc, #536]	; (8008338 <_strtod_l+0x5a0>)
 800811e:	f003 fa3b 	bl	800b598 <nan>
 8008122:	ec5b ab10 	vmov	sl, fp, d0
 8008126:	e67b      	b.n	8007e20 <_strtod_l+0x88>
 8008128:	9b05      	ldr	r3, [sp, #20]
 800812a:	9807      	ldr	r0, [sp, #28]
 800812c:	1af3      	subs	r3, r6, r3
 800812e:	2f00      	cmp	r7, #0
 8008130:	bf08      	it	eq
 8008132:	462f      	moveq	r7, r5
 8008134:	2d10      	cmp	r5, #16
 8008136:	9306      	str	r3, [sp, #24]
 8008138:	46a8      	mov	r8, r5
 800813a:	bfa8      	it	ge
 800813c:	f04f 0810 	movge.w	r8, #16
 8008140:	f7f8 f9e0 	bl	8000504 <__aeabi_ui2d>
 8008144:	2d09      	cmp	r5, #9
 8008146:	4682      	mov	sl, r0
 8008148:	468b      	mov	fp, r1
 800814a:	dd13      	ble.n	8008174 <_strtod_l+0x3dc>
 800814c:	4b7b      	ldr	r3, [pc, #492]	; (800833c <_strtod_l+0x5a4>)
 800814e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008152:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008156:	f7f8 fa4f 	bl	80005f8 <__aeabi_dmul>
 800815a:	4682      	mov	sl, r0
 800815c:	4648      	mov	r0, r9
 800815e:	468b      	mov	fp, r1
 8008160:	f7f8 f9d0 	bl	8000504 <__aeabi_ui2d>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4650      	mov	r0, sl
 800816a:	4659      	mov	r1, fp
 800816c:	f7f8 f88e 	bl	800028c <__adddf3>
 8008170:	4682      	mov	sl, r0
 8008172:	468b      	mov	fp, r1
 8008174:	2d0f      	cmp	r5, #15
 8008176:	dc38      	bgt.n	80081ea <_strtod_l+0x452>
 8008178:	9b06      	ldr	r3, [sp, #24]
 800817a:	2b00      	cmp	r3, #0
 800817c:	f43f ae50 	beq.w	8007e20 <_strtod_l+0x88>
 8008180:	dd24      	ble.n	80081cc <_strtod_l+0x434>
 8008182:	2b16      	cmp	r3, #22
 8008184:	dc0b      	bgt.n	800819e <_strtod_l+0x406>
 8008186:	496d      	ldr	r1, [pc, #436]	; (800833c <_strtod_l+0x5a4>)
 8008188:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800818c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008190:	4652      	mov	r2, sl
 8008192:	465b      	mov	r3, fp
 8008194:	f7f8 fa30 	bl	80005f8 <__aeabi_dmul>
 8008198:	4682      	mov	sl, r0
 800819a:	468b      	mov	fp, r1
 800819c:	e640      	b.n	8007e20 <_strtod_l+0x88>
 800819e:	9a06      	ldr	r2, [sp, #24]
 80081a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80081a4:	4293      	cmp	r3, r2
 80081a6:	db20      	blt.n	80081ea <_strtod_l+0x452>
 80081a8:	4c64      	ldr	r4, [pc, #400]	; (800833c <_strtod_l+0x5a4>)
 80081aa:	f1c5 050f 	rsb	r5, r5, #15
 80081ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80081ba:	f7f8 fa1d 	bl	80005f8 <__aeabi_dmul>
 80081be:	9b06      	ldr	r3, [sp, #24]
 80081c0:	1b5d      	subs	r5, r3, r5
 80081c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80081c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80081ca:	e7e3      	b.n	8008194 <_strtod_l+0x3fc>
 80081cc:	9b06      	ldr	r3, [sp, #24]
 80081ce:	3316      	adds	r3, #22
 80081d0:	db0b      	blt.n	80081ea <_strtod_l+0x452>
 80081d2:	9b05      	ldr	r3, [sp, #20]
 80081d4:	1b9e      	subs	r6, r3, r6
 80081d6:	4b59      	ldr	r3, [pc, #356]	; (800833c <_strtod_l+0x5a4>)
 80081d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80081dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80081e0:	4650      	mov	r0, sl
 80081e2:	4659      	mov	r1, fp
 80081e4:	f7f8 fb32 	bl	800084c <__aeabi_ddiv>
 80081e8:	e7d6      	b.n	8008198 <_strtod_l+0x400>
 80081ea:	9b06      	ldr	r3, [sp, #24]
 80081ec:	eba5 0808 	sub.w	r8, r5, r8
 80081f0:	4498      	add	r8, r3
 80081f2:	f1b8 0f00 	cmp.w	r8, #0
 80081f6:	dd74      	ble.n	80082e2 <_strtod_l+0x54a>
 80081f8:	f018 030f 	ands.w	r3, r8, #15
 80081fc:	d00a      	beq.n	8008214 <_strtod_l+0x47c>
 80081fe:	494f      	ldr	r1, [pc, #316]	; (800833c <_strtod_l+0x5a4>)
 8008200:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008204:	4652      	mov	r2, sl
 8008206:	465b      	mov	r3, fp
 8008208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800820c:	f7f8 f9f4 	bl	80005f8 <__aeabi_dmul>
 8008210:	4682      	mov	sl, r0
 8008212:	468b      	mov	fp, r1
 8008214:	f038 080f 	bics.w	r8, r8, #15
 8008218:	d04f      	beq.n	80082ba <_strtod_l+0x522>
 800821a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800821e:	dd22      	ble.n	8008266 <_strtod_l+0x4ce>
 8008220:	2500      	movs	r5, #0
 8008222:	462e      	mov	r6, r5
 8008224:	9507      	str	r5, [sp, #28]
 8008226:	9505      	str	r5, [sp, #20]
 8008228:	2322      	movs	r3, #34	; 0x22
 800822a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008344 <_strtod_l+0x5ac>
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	f04f 0a00 	mov.w	sl, #0
 8008234:	9b07      	ldr	r3, [sp, #28]
 8008236:	2b00      	cmp	r3, #0
 8008238:	f43f adf2 	beq.w	8007e20 <_strtod_l+0x88>
 800823c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800823e:	4620      	mov	r0, r4
 8008240:	f002 f97a 	bl	800a538 <_Bfree>
 8008244:	9905      	ldr	r1, [sp, #20]
 8008246:	4620      	mov	r0, r4
 8008248:	f002 f976 	bl	800a538 <_Bfree>
 800824c:	4631      	mov	r1, r6
 800824e:	4620      	mov	r0, r4
 8008250:	f002 f972 	bl	800a538 <_Bfree>
 8008254:	9907      	ldr	r1, [sp, #28]
 8008256:	4620      	mov	r0, r4
 8008258:	f002 f96e 	bl	800a538 <_Bfree>
 800825c:	4629      	mov	r1, r5
 800825e:	4620      	mov	r0, r4
 8008260:	f002 f96a 	bl	800a538 <_Bfree>
 8008264:	e5dc      	b.n	8007e20 <_strtod_l+0x88>
 8008266:	4b36      	ldr	r3, [pc, #216]	; (8008340 <_strtod_l+0x5a8>)
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	2300      	movs	r3, #0
 800826c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008270:	4650      	mov	r0, sl
 8008272:	4659      	mov	r1, fp
 8008274:	4699      	mov	r9, r3
 8008276:	f1b8 0f01 	cmp.w	r8, #1
 800827a:	dc21      	bgt.n	80082c0 <_strtod_l+0x528>
 800827c:	b10b      	cbz	r3, 8008282 <_strtod_l+0x4ea>
 800827e:	4682      	mov	sl, r0
 8008280:	468b      	mov	fp, r1
 8008282:	4b2f      	ldr	r3, [pc, #188]	; (8008340 <_strtod_l+0x5a8>)
 8008284:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008288:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008294:	f7f8 f9b0 	bl	80005f8 <__aeabi_dmul>
 8008298:	4b2a      	ldr	r3, [pc, #168]	; (8008344 <_strtod_l+0x5ac>)
 800829a:	460a      	mov	r2, r1
 800829c:	400b      	ands	r3, r1
 800829e:	492a      	ldr	r1, [pc, #168]	; (8008348 <_strtod_l+0x5b0>)
 80082a0:	428b      	cmp	r3, r1
 80082a2:	4682      	mov	sl, r0
 80082a4:	d8bc      	bhi.n	8008220 <_strtod_l+0x488>
 80082a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80082aa:	428b      	cmp	r3, r1
 80082ac:	bf86      	itte	hi
 80082ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800834c <_strtod_l+0x5b4>
 80082b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80082b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80082ba:	2300      	movs	r3, #0
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	e084      	b.n	80083ca <_strtod_l+0x632>
 80082c0:	f018 0f01 	tst.w	r8, #1
 80082c4:	d005      	beq.n	80082d2 <_strtod_l+0x53a>
 80082c6:	9b04      	ldr	r3, [sp, #16]
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f8 f994 	bl	80005f8 <__aeabi_dmul>
 80082d0:	2301      	movs	r3, #1
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	3208      	adds	r2, #8
 80082d6:	f109 0901 	add.w	r9, r9, #1
 80082da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082de:	9204      	str	r2, [sp, #16]
 80082e0:	e7c9      	b.n	8008276 <_strtod_l+0x4de>
 80082e2:	d0ea      	beq.n	80082ba <_strtod_l+0x522>
 80082e4:	f1c8 0800 	rsb	r8, r8, #0
 80082e8:	f018 020f 	ands.w	r2, r8, #15
 80082ec:	d00a      	beq.n	8008304 <_strtod_l+0x56c>
 80082ee:	4b13      	ldr	r3, [pc, #76]	; (800833c <_strtod_l+0x5a4>)
 80082f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082f4:	4650      	mov	r0, sl
 80082f6:	4659      	mov	r1, fp
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	f7f8 faa6 	bl	800084c <__aeabi_ddiv>
 8008300:	4682      	mov	sl, r0
 8008302:	468b      	mov	fp, r1
 8008304:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008308:	d0d7      	beq.n	80082ba <_strtod_l+0x522>
 800830a:	f1b8 0f1f 	cmp.w	r8, #31
 800830e:	dd1f      	ble.n	8008350 <_strtod_l+0x5b8>
 8008310:	2500      	movs	r5, #0
 8008312:	462e      	mov	r6, r5
 8008314:	9507      	str	r5, [sp, #28]
 8008316:	9505      	str	r5, [sp, #20]
 8008318:	2322      	movs	r3, #34	; 0x22
 800831a:	f04f 0a00 	mov.w	sl, #0
 800831e:	f04f 0b00 	mov.w	fp, #0
 8008322:	6023      	str	r3, [r4, #0]
 8008324:	e786      	b.n	8008234 <_strtod_l+0x49c>
 8008326:	bf00      	nop
 8008328:	0800ba3d 	.word	0x0800ba3d
 800832c:	0800ba80 	.word	0x0800ba80
 8008330:	0800ba35 	.word	0x0800ba35
 8008334:	0800bbc4 	.word	0x0800bbc4
 8008338:	0800bed8 	.word	0x0800bed8
 800833c:	0800bdb8 	.word	0x0800bdb8
 8008340:	0800bd90 	.word	0x0800bd90
 8008344:	7ff00000 	.word	0x7ff00000
 8008348:	7ca00000 	.word	0x7ca00000
 800834c:	7fefffff 	.word	0x7fefffff
 8008350:	f018 0310 	ands.w	r3, r8, #16
 8008354:	bf18      	it	ne
 8008356:	236a      	movne	r3, #106	; 0x6a
 8008358:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008708 <_strtod_l+0x970>
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	4650      	mov	r0, sl
 8008360:	4659      	mov	r1, fp
 8008362:	2300      	movs	r3, #0
 8008364:	f018 0f01 	tst.w	r8, #1
 8008368:	d004      	beq.n	8008374 <_strtod_l+0x5dc>
 800836a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800836e:	f7f8 f943 	bl	80005f8 <__aeabi_dmul>
 8008372:	2301      	movs	r3, #1
 8008374:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008378:	f109 0908 	add.w	r9, r9, #8
 800837c:	d1f2      	bne.n	8008364 <_strtod_l+0x5cc>
 800837e:	b10b      	cbz	r3, 8008384 <_strtod_l+0x5ec>
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	9b04      	ldr	r3, [sp, #16]
 8008386:	b1c3      	cbz	r3, 80083ba <_strtod_l+0x622>
 8008388:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800838c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008390:	2b00      	cmp	r3, #0
 8008392:	4659      	mov	r1, fp
 8008394:	dd11      	ble.n	80083ba <_strtod_l+0x622>
 8008396:	2b1f      	cmp	r3, #31
 8008398:	f340 8124 	ble.w	80085e4 <_strtod_l+0x84c>
 800839c:	2b34      	cmp	r3, #52	; 0x34
 800839e:	bfde      	ittt	le
 80083a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80083a4:	f04f 33ff 	movle.w	r3, #4294967295
 80083a8:	fa03 f202 	lslle.w	r2, r3, r2
 80083ac:	f04f 0a00 	mov.w	sl, #0
 80083b0:	bfcc      	ite	gt
 80083b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80083b6:	ea02 0b01 	andle.w	fp, r2, r1
 80083ba:	2200      	movs	r2, #0
 80083bc:	2300      	movs	r3, #0
 80083be:	4650      	mov	r0, sl
 80083c0:	4659      	mov	r1, fp
 80083c2:	f7f8 fb81 	bl	8000ac8 <__aeabi_dcmpeq>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	d1a2      	bne.n	8008310 <_strtod_l+0x578>
 80083ca:	9b07      	ldr	r3, [sp, #28]
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	9908      	ldr	r1, [sp, #32]
 80083d0:	462b      	mov	r3, r5
 80083d2:	463a      	mov	r2, r7
 80083d4:	4620      	mov	r0, r4
 80083d6:	f002 f917 	bl	800a608 <__s2b>
 80083da:	9007      	str	r0, [sp, #28]
 80083dc:	2800      	cmp	r0, #0
 80083de:	f43f af1f 	beq.w	8008220 <_strtod_l+0x488>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	1b9e      	subs	r6, r3, r6
 80083e6:	9b06      	ldr	r3, [sp, #24]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	bfb4      	ite	lt
 80083ec:	4633      	movlt	r3, r6
 80083ee:	2300      	movge	r3, #0
 80083f0:	930c      	str	r3, [sp, #48]	; 0x30
 80083f2:	9b06      	ldr	r3, [sp, #24]
 80083f4:	2500      	movs	r5, #0
 80083f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80083fa:	9312      	str	r3, [sp, #72]	; 0x48
 80083fc:	462e      	mov	r6, r5
 80083fe:	9b07      	ldr	r3, [sp, #28]
 8008400:	4620      	mov	r0, r4
 8008402:	6859      	ldr	r1, [r3, #4]
 8008404:	f002 f858 	bl	800a4b8 <_Balloc>
 8008408:	9005      	str	r0, [sp, #20]
 800840a:	2800      	cmp	r0, #0
 800840c:	f43f af0c 	beq.w	8008228 <_strtod_l+0x490>
 8008410:	9b07      	ldr	r3, [sp, #28]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	3202      	adds	r2, #2
 8008416:	f103 010c 	add.w	r1, r3, #12
 800841a:	0092      	lsls	r2, r2, #2
 800841c:	300c      	adds	r0, #12
 800841e:	f002 f83d 	bl	800a49c <memcpy>
 8008422:	ec4b ab10 	vmov	d0, sl, fp
 8008426:	aa1a      	add	r2, sp, #104	; 0x68
 8008428:	a919      	add	r1, sp, #100	; 0x64
 800842a:	4620      	mov	r0, r4
 800842c:	f002 fc32 	bl	800ac94 <__d2b>
 8008430:	ec4b ab18 	vmov	d8, sl, fp
 8008434:	9018      	str	r0, [sp, #96]	; 0x60
 8008436:	2800      	cmp	r0, #0
 8008438:	f43f aef6 	beq.w	8008228 <_strtod_l+0x490>
 800843c:	2101      	movs	r1, #1
 800843e:	4620      	mov	r0, r4
 8008440:	f002 f97c 	bl	800a73c <__i2b>
 8008444:	4606      	mov	r6, r0
 8008446:	2800      	cmp	r0, #0
 8008448:	f43f aeee 	beq.w	8008228 <_strtod_l+0x490>
 800844c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800844e:	9904      	ldr	r1, [sp, #16]
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfab      	itete	ge
 8008454:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008456:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008458:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800845a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800845e:	bfac      	ite	ge
 8008460:	eb03 0902 	addge.w	r9, r3, r2
 8008464:	1ad7      	sublt	r7, r2, r3
 8008466:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008468:	eba3 0801 	sub.w	r8, r3, r1
 800846c:	4490      	add	r8, r2
 800846e:	4ba1      	ldr	r3, [pc, #644]	; (80086f4 <_strtod_l+0x95c>)
 8008470:	f108 38ff 	add.w	r8, r8, #4294967295
 8008474:	4598      	cmp	r8, r3
 8008476:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800847a:	f280 80c7 	bge.w	800860c <_strtod_l+0x874>
 800847e:	eba3 0308 	sub.w	r3, r3, r8
 8008482:	2b1f      	cmp	r3, #31
 8008484:	eba2 0203 	sub.w	r2, r2, r3
 8008488:	f04f 0101 	mov.w	r1, #1
 800848c:	f300 80b1 	bgt.w	80085f2 <_strtod_l+0x85a>
 8008490:	fa01 f303 	lsl.w	r3, r1, r3
 8008494:	930d      	str	r3, [sp, #52]	; 0x34
 8008496:	2300      	movs	r3, #0
 8008498:	9308      	str	r3, [sp, #32]
 800849a:	eb09 0802 	add.w	r8, r9, r2
 800849e:	9b04      	ldr	r3, [sp, #16]
 80084a0:	45c1      	cmp	r9, r8
 80084a2:	4417      	add	r7, r2
 80084a4:	441f      	add	r7, r3
 80084a6:	464b      	mov	r3, r9
 80084a8:	bfa8      	it	ge
 80084aa:	4643      	movge	r3, r8
 80084ac:	42bb      	cmp	r3, r7
 80084ae:	bfa8      	it	ge
 80084b0:	463b      	movge	r3, r7
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	bfc2      	ittt	gt
 80084b6:	eba8 0803 	subgt.w	r8, r8, r3
 80084ba:	1aff      	subgt	r7, r7, r3
 80084bc:	eba9 0903 	subgt.w	r9, r9, r3
 80084c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	dd17      	ble.n	80084f6 <_strtod_l+0x75e>
 80084c6:	4631      	mov	r1, r6
 80084c8:	461a      	mov	r2, r3
 80084ca:	4620      	mov	r0, r4
 80084cc:	f002 f9f6 	bl	800a8bc <__pow5mult>
 80084d0:	4606      	mov	r6, r0
 80084d2:	2800      	cmp	r0, #0
 80084d4:	f43f aea8 	beq.w	8008228 <_strtod_l+0x490>
 80084d8:	4601      	mov	r1, r0
 80084da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084dc:	4620      	mov	r0, r4
 80084de:	f002 f943 	bl	800a768 <__multiply>
 80084e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f43f ae9f 	beq.w	8008228 <_strtod_l+0x490>
 80084ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084ec:	4620      	mov	r0, r4
 80084ee:	f002 f823 	bl	800a538 <_Bfree>
 80084f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f4:	9318      	str	r3, [sp, #96]	; 0x60
 80084f6:	f1b8 0f00 	cmp.w	r8, #0
 80084fa:	f300 808c 	bgt.w	8008616 <_strtod_l+0x87e>
 80084fe:	9b06      	ldr	r3, [sp, #24]
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd08      	ble.n	8008516 <_strtod_l+0x77e>
 8008504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008506:	9905      	ldr	r1, [sp, #20]
 8008508:	4620      	mov	r0, r4
 800850a:	f002 f9d7 	bl	800a8bc <__pow5mult>
 800850e:	9005      	str	r0, [sp, #20]
 8008510:	2800      	cmp	r0, #0
 8008512:	f43f ae89 	beq.w	8008228 <_strtod_l+0x490>
 8008516:	2f00      	cmp	r7, #0
 8008518:	dd08      	ble.n	800852c <_strtod_l+0x794>
 800851a:	9905      	ldr	r1, [sp, #20]
 800851c:	463a      	mov	r2, r7
 800851e:	4620      	mov	r0, r4
 8008520:	f002 fa26 	bl	800a970 <__lshift>
 8008524:	9005      	str	r0, [sp, #20]
 8008526:	2800      	cmp	r0, #0
 8008528:	f43f ae7e 	beq.w	8008228 <_strtod_l+0x490>
 800852c:	f1b9 0f00 	cmp.w	r9, #0
 8008530:	dd08      	ble.n	8008544 <_strtod_l+0x7ac>
 8008532:	4631      	mov	r1, r6
 8008534:	464a      	mov	r2, r9
 8008536:	4620      	mov	r0, r4
 8008538:	f002 fa1a 	bl	800a970 <__lshift>
 800853c:	4606      	mov	r6, r0
 800853e:	2800      	cmp	r0, #0
 8008540:	f43f ae72 	beq.w	8008228 <_strtod_l+0x490>
 8008544:	9a05      	ldr	r2, [sp, #20]
 8008546:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008548:	4620      	mov	r0, r4
 800854a:	f002 fa9d 	bl	800aa88 <__mdiff>
 800854e:	4605      	mov	r5, r0
 8008550:	2800      	cmp	r0, #0
 8008552:	f43f ae69 	beq.w	8008228 <_strtod_l+0x490>
 8008556:	68c3      	ldr	r3, [r0, #12]
 8008558:	930b      	str	r3, [sp, #44]	; 0x2c
 800855a:	2300      	movs	r3, #0
 800855c:	60c3      	str	r3, [r0, #12]
 800855e:	4631      	mov	r1, r6
 8008560:	f002 fa76 	bl	800aa50 <__mcmp>
 8008564:	2800      	cmp	r0, #0
 8008566:	da60      	bge.n	800862a <_strtod_l+0x892>
 8008568:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800856a:	ea53 030a 	orrs.w	r3, r3, sl
 800856e:	f040 8082 	bne.w	8008676 <_strtod_l+0x8de>
 8008572:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008576:	2b00      	cmp	r3, #0
 8008578:	d17d      	bne.n	8008676 <_strtod_l+0x8de>
 800857a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800857e:	0d1b      	lsrs	r3, r3, #20
 8008580:	051b      	lsls	r3, r3, #20
 8008582:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008586:	d976      	bls.n	8008676 <_strtod_l+0x8de>
 8008588:	696b      	ldr	r3, [r5, #20]
 800858a:	b913      	cbnz	r3, 8008592 <_strtod_l+0x7fa>
 800858c:	692b      	ldr	r3, [r5, #16]
 800858e:	2b01      	cmp	r3, #1
 8008590:	dd71      	ble.n	8008676 <_strtod_l+0x8de>
 8008592:	4629      	mov	r1, r5
 8008594:	2201      	movs	r2, #1
 8008596:	4620      	mov	r0, r4
 8008598:	f002 f9ea 	bl	800a970 <__lshift>
 800859c:	4631      	mov	r1, r6
 800859e:	4605      	mov	r5, r0
 80085a0:	f002 fa56 	bl	800aa50 <__mcmp>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	dd66      	ble.n	8008676 <_strtod_l+0x8de>
 80085a8:	9904      	ldr	r1, [sp, #16]
 80085aa:	4a53      	ldr	r2, [pc, #332]	; (80086f8 <_strtod_l+0x960>)
 80085ac:	465b      	mov	r3, fp
 80085ae:	2900      	cmp	r1, #0
 80085b0:	f000 8081 	beq.w	80086b6 <_strtod_l+0x91e>
 80085b4:	ea02 010b 	and.w	r1, r2, fp
 80085b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80085bc:	dc7b      	bgt.n	80086b6 <_strtod_l+0x91e>
 80085be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80085c2:	f77f aea9 	ble.w	8008318 <_strtod_l+0x580>
 80085c6:	4b4d      	ldr	r3, [pc, #308]	; (80086fc <_strtod_l+0x964>)
 80085c8:	4650      	mov	r0, sl
 80085ca:	4659      	mov	r1, fp
 80085cc:	2200      	movs	r2, #0
 80085ce:	f7f8 f813 	bl	80005f8 <__aeabi_dmul>
 80085d2:	460b      	mov	r3, r1
 80085d4:	4303      	orrs	r3, r0
 80085d6:	bf08      	it	eq
 80085d8:	2322      	moveq	r3, #34	; 0x22
 80085da:	4682      	mov	sl, r0
 80085dc:	468b      	mov	fp, r1
 80085de:	bf08      	it	eq
 80085e0:	6023      	streq	r3, [r4, #0]
 80085e2:	e62b      	b.n	800823c <_strtod_l+0x4a4>
 80085e4:	f04f 32ff 	mov.w	r2, #4294967295
 80085e8:	fa02 f303 	lsl.w	r3, r2, r3
 80085ec:	ea03 0a0a 	and.w	sl, r3, sl
 80085f0:	e6e3      	b.n	80083ba <_strtod_l+0x622>
 80085f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80085f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80085fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80085fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008602:	fa01 f308 	lsl.w	r3, r1, r8
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	910d      	str	r1, [sp, #52]	; 0x34
 800860a:	e746      	b.n	800849a <_strtod_l+0x702>
 800860c:	2300      	movs	r3, #0
 800860e:	9308      	str	r3, [sp, #32]
 8008610:	2301      	movs	r3, #1
 8008612:	930d      	str	r3, [sp, #52]	; 0x34
 8008614:	e741      	b.n	800849a <_strtod_l+0x702>
 8008616:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008618:	4642      	mov	r2, r8
 800861a:	4620      	mov	r0, r4
 800861c:	f002 f9a8 	bl	800a970 <__lshift>
 8008620:	9018      	str	r0, [sp, #96]	; 0x60
 8008622:	2800      	cmp	r0, #0
 8008624:	f47f af6b 	bne.w	80084fe <_strtod_l+0x766>
 8008628:	e5fe      	b.n	8008228 <_strtod_l+0x490>
 800862a:	465f      	mov	r7, fp
 800862c:	d16e      	bne.n	800870c <_strtod_l+0x974>
 800862e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008630:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008634:	b342      	cbz	r2, 8008688 <_strtod_l+0x8f0>
 8008636:	4a32      	ldr	r2, [pc, #200]	; (8008700 <_strtod_l+0x968>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d128      	bne.n	800868e <_strtod_l+0x8f6>
 800863c:	9b04      	ldr	r3, [sp, #16]
 800863e:	4651      	mov	r1, sl
 8008640:	b1eb      	cbz	r3, 800867e <_strtod_l+0x8e6>
 8008642:	4b2d      	ldr	r3, [pc, #180]	; (80086f8 <_strtod_l+0x960>)
 8008644:	403b      	ands	r3, r7
 8008646:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800864a:	f04f 32ff 	mov.w	r2, #4294967295
 800864e:	d819      	bhi.n	8008684 <_strtod_l+0x8ec>
 8008650:	0d1b      	lsrs	r3, r3, #20
 8008652:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008656:	fa02 f303 	lsl.w	r3, r2, r3
 800865a:	4299      	cmp	r1, r3
 800865c:	d117      	bne.n	800868e <_strtod_l+0x8f6>
 800865e:	4b29      	ldr	r3, [pc, #164]	; (8008704 <_strtod_l+0x96c>)
 8008660:	429f      	cmp	r7, r3
 8008662:	d102      	bne.n	800866a <_strtod_l+0x8d2>
 8008664:	3101      	adds	r1, #1
 8008666:	f43f addf 	beq.w	8008228 <_strtod_l+0x490>
 800866a:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <_strtod_l+0x960>)
 800866c:	403b      	ands	r3, r7
 800866e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008672:	f04f 0a00 	mov.w	sl, #0
 8008676:	9b04      	ldr	r3, [sp, #16]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1a4      	bne.n	80085c6 <_strtod_l+0x82e>
 800867c:	e5de      	b.n	800823c <_strtod_l+0x4a4>
 800867e:	f04f 33ff 	mov.w	r3, #4294967295
 8008682:	e7ea      	b.n	800865a <_strtod_l+0x8c2>
 8008684:	4613      	mov	r3, r2
 8008686:	e7e8      	b.n	800865a <_strtod_l+0x8c2>
 8008688:	ea53 030a 	orrs.w	r3, r3, sl
 800868c:	d08c      	beq.n	80085a8 <_strtod_l+0x810>
 800868e:	9b08      	ldr	r3, [sp, #32]
 8008690:	b1db      	cbz	r3, 80086ca <_strtod_l+0x932>
 8008692:	423b      	tst	r3, r7
 8008694:	d0ef      	beq.n	8008676 <_strtod_l+0x8de>
 8008696:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008698:	9a04      	ldr	r2, [sp, #16]
 800869a:	4650      	mov	r0, sl
 800869c:	4659      	mov	r1, fp
 800869e:	b1c3      	cbz	r3, 80086d2 <_strtod_l+0x93a>
 80086a0:	f7ff fb5e 	bl	8007d60 <sulp>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	ec51 0b18 	vmov	r0, r1, d8
 80086ac:	f7f7 fdee 	bl	800028c <__adddf3>
 80086b0:	4682      	mov	sl, r0
 80086b2:	468b      	mov	fp, r1
 80086b4:	e7df      	b.n	8008676 <_strtod_l+0x8de>
 80086b6:	4013      	ands	r3, r2
 80086b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80086bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80086c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80086c4:	f04f 3aff 	mov.w	sl, #4294967295
 80086c8:	e7d5      	b.n	8008676 <_strtod_l+0x8de>
 80086ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086cc:	ea13 0f0a 	tst.w	r3, sl
 80086d0:	e7e0      	b.n	8008694 <_strtod_l+0x8fc>
 80086d2:	f7ff fb45 	bl	8007d60 <sulp>
 80086d6:	4602      	mov	r2, r0
 80086d8:	460b      	mov	r3, r1
 80086da:	ec51 0b18 	vmov	r0, r1, d8
 80086de:	f7f7 fdd3 	bl	8000288 <__aeabi_dsub>
 80086e2:	2200      	movs	r2, #0
 80086e4:	2300      	movs	r3, #0
 80086e6:	4682      	mov	sl, r0
 80086e8:	468b      	mov	fp, r1
 80086ea:	f7f8 f9ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	d0c1      	beq.n	8008676 <_strtod_l+0x8de>
 80086f2:	e611      	b.n	8008318 <_strtod_l+0x580>
 80086f4:	fffffc02 	.word	0xfffffc02
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	39500000 	.word	0x39500000
 8008700:	000fffff 	.word	0x000fffff
 8008704:	7fefffff 	.word	0x7fefffff
 8008708:	0800ba98 	.word	0x0800ba98
 800870c:	4631      	mov	r1, r6
 800870e:	4628      	mov	r0, r5
 8008710:	f002 fb1c 	bl	800ad4c <__ratio>
 8008714:	ec59 8b10 	vmov	r8, r9, d0
 8008718:	ee10 0a10 	vmov	r0, s0
 800871c:	2200      	movs	r2, #0
 800871e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008722:	4649      	mov	r1, r9
 8008724:	f7f8 f9e4 	bl	8000af0 <__aeabi_dcmple>
 8008728:	2800      	cmp	r0, #0
 800872a:	d07a      	beq.n	8008822 <_strtod_l+0xa8a>
 800872c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	d04a      	beq.n	80087c8 <_strtod_l+0xa30>
 8008732:	4b95      	ldr	r3, [pc, #596]	; (8008988 <_strtod_l+0xbf0>)
 8008734:	2200      	movs	r2, #0
 8008736:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800873a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008988 <_strtod_l+0xbf0>
 800873e:	f04f 0800 	mov.w	r8, #0
 8008742:	4b92      	ldr	r3, [pc, #584]	; (800898c <_strtod_l+0xbf4>)
 8008744:	403b      	ands	r3, r7
 8008746:	930d      	str	r3, [sp, #52]	; 0x34
 8008748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800874a:	4b91      	ldr	r3, [pc, #580]	; (8008990 <_strtod_l+0xbf8>)
 800874c:	429a      	cmp	r2, r3
 800874e:	f040 80b0 	bne.w	80088b2 <_strtod_l+0xb1a>
 8008752:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008756:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800875a:	ec4b ab10 	vmov	d0, sl, fp
 800875e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008762:	f002 fa1b 	bl	800ab9c <__ulp>
 8008766:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800876a:	ec53 2b10 	vmov	r2, r3, d0
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	4652      	mov	r2, sl
 8008774:	465b      	mov	r3, fp
 8008776:	f7f7 fd89 	bl	800028c <__adddf3>
 800877a:	460b      	mov	r3, r1
 800877c:	4983      	ldr	r1, [pc, #524]	; (800898c <_strtod_l+0xbf4>)
 800877e:	4a85      	ldr	r2, [pc, #532]	; (8008994 <_strtod_l+0xbfc>)
 8008780:	4019      	ands	r1, r3
 8008782:	4291      	cmp	r1, r2
 8008784:	4682      	mov	sl, r0
 8008786:	d960      	bls.n	800884a <_strtod_l+0xab2>
 8008788:	ee18 3a90 	vmov	r3, s17
 800878c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008790:	4293      	cmp	r3, r2
 8008792:	d104      	bne.n	800879e <_strtod_l+0xa06>
 8008794:	ee18 3a10 	vmov	r3, s16
 8008798:	3301      	adds	r3, #1
 800879a:	f43f ad45 	beq.w	8008228 <_strtod_l+0x490>
 800879e:	f8df b200 	ldr.w	fp, [pc, #512]	; 80089a0 <_strtod_l+0xc08>
 80087a2:	f04f 3aff 	mov.w	sl, #4294967295
 80087a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80087a8:	4620      	mov	r0, r4
 80087aa:	f001 fec5 	bl	800a538 <_Bfree>
 80087ae:	9905      	ldr	r1, [sp, #20]
 80087b0:	4620      	mov	r0, r4
 80087b2:	f001 fec1 	bl	800a538 <_Bfree>
 80087b6:	4631      	mov	r1, r6
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 febd 	bl	800a538 <_Bfree>
 80087be:	4629      	mov	r1, r5
 80087c0:	4620      	mov	r0, r4
 80087c2:	f001 feb9 	bl	800a538 <_Bfree>
 80087c6:	e61a      	b.n	80083fe <_strtod_l+0x666>
 80087c8:	f1ba 0f00 	cmp.w	sl, #0
 80087cc:	d11b      	bne.n	8008806 <_strtod_l+0xa6e>
 80087ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087d2:	b9f3      	cbnz	r3, 8008812 <_strtod_l+0xa7a>
 80087d4:	4b6c      	ldr	r3, [pc, #432]	; (8008988 <_strtod_l+0xbf0>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	4640      	mov	r0, r8
 80087da:	4649      	mov	r1, r9
 80087dc:	f7f8 f97e 	bl	8000adc <__aeabi_dcmplt>
 80087e0:	b9d0      	cbnz	r0, 8008818 <_strtod_l+0xa80>
 80087e2:	4640      	mov	r0, r8
 80087e4:	4649      	mov	r1, r9
 80087e6:	4b6c      	ldr	r3, [pc, #432]	; (8008998 <_strtod_l+0xc00>)
 80087e8:	2200      	movs	r2, #0
 80087ea:	f7f7 ff05 	bl	80005f8 <__aeabi_dmul>
 80087ee:	4680      	mov	r8, r0
 80087f0:	4689      	mov	r9, r1
 80087f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80087f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80087fa:	9315      	str	r3, [sp, #84]	; 0x54
 80087fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008800:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008804:	e79d      	b.n	8008742 <_strtod_l+0x9aa>
 8008806:	f1ba 0f01 	cmp.w	sl, #1
 800880a:	d102      	bne.n	8008812 <_strtod_l+0xa7a>
 800880c:	2f00      	cmp	r7, #0
 800880e:	f43f ad83 	beq.w	8008318 <_strtod_l+0x580>
 8008812:	4b62      	ldr	r3, [pc, #392]	; (800899c <_strtod_l+0xc04>)
 8008814:	2200      	movs	r2, #0
 8008816:	e78e      	b.n	8008736 <_strtod_l+0x99e>
 8008818:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008998 <_strtod_l+0xc00>
 800881c:	f04f 0800 	mov.w	r8, #0
 8008820:	e7e7      	b.n	80087f2 <_strtod_l+0xa5a>
 8008822:	4b5d      	ldr	r3, [pc, #372]	; (8008998 <_strtod_l+0xc00>)
 8008824:	4640      	mov	r0, r8
 8008826:	4649      	mov	r1, r9
 8008828:	2200      	movs	r2, #0
 800882a:	f7f7 fee5 	bl	80005f8 <__aeabi_dmul>
 800882e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008830:	4680      	mov	r8, r0
 8008832:	4689      	mov	r9, r1
 8008834:	b933      	cbnz	r3, 8008844 <_strtod_l+0xaac>
 8008836:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800883a:	900e      	str	r0, [sp, #56]	; 0x38
 800883c:	930f      	str	r3, [sp, #60]	; 0x3c
 800883e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008842:	e7dd      	b.n	8008800 <_strtod_l+0xa68>
 8008844:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008848:	e7f9      	b.n	800883e <_strtod_l+0xaa6>
 800884a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800884e:	9b04      	ldr	r3, [sp, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1a8      	bne.n	80087a6 <_strtod_l+0xa0e>
 8008854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800885a:	0d1b      	lsrs	r3, r3, #20
 800885c:	051b      	lsls	r3, r3, #20
 800885e:	429a      	cmp	r2, r3
 8008860:	d1a1      	bne.n	80087a6 <_strtod_l+0xa0e>
 8008862:	4640      	mov	r0, r8
 8008864:	4649      	mov	r1, r9
 8008866:	f7f8 fa27 	bl	8000cb8 <__aeabi_d2lz>
 800886a:	f7f7 fe97 	bl	800059c <__aeabi_l2d>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4640      	mov	r0, r8
 8008874:	4649      	mov	r1, r9
 8008876:	f7f7 fd07 	bl	8000288 <__aeabi_dsub>
 800887a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800887c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008880:	ea43 030a 	orr.w	r3, r3, sl
 8008884:	4313      	orrs	r3, r2
 8008886:	4680      	mov	r8, r0
 8008888:	4689      	mov	r9, r1
 800888a:	d055      	beq.n	8008938 <_strtod_l+0xba0>
 800888c:	a336      	add	r3, pc, #216	; (adr r3, 8008968 <_strtod_l+0xbd0>)
 800888e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008892:	f7f8 f923 	bl	8000adc <__aeabi_dcmplt>
 8008896:	2800      	cmp	r0, #0
 8008898:	f47f acd0 	bne.w	800823c <_strtod_l+0x4a4>
 800889c:	a334      	add	r3, pc, #208	; (adr r3, 8008970 <_strtod_l+0xbd8>)
 800889e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f8 f937 	bl	8000b18 <__aeabi_dcmpgt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	f43f af7b 	beq.w	80087a6 <_strtod_l+0xa0e>
 80088b0:	e4c4      	b.n	800823c <_strtod_l+0x4a4>
 80088b2:	9b04      	ldr	r3, [sp, #16]
 80088b4:	b333      	cbz	r3, 8008904 <_strtod_l+0xb6c>
 80088b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80088bc:	d822      	bhi.n	8008904 <_strtod_l+0xb6c>
 80088be:	a32e      	add	r3, pc, #184	; (adr r3, 8008978 <_strtod_l+0xbe0>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	4640      	mov	r0, r8
 80088c6:	4649      	mov	r1, r9
 80088c8:	f7f8 f912 	bl	8000af0 <__aeabi_dcmple>
 80088cc:	b1a0      	cbz	r0, 80088f8 <_strtod_l+0xb60>
 80088ce:	4649      	mov	r1, r9
 80088d0:	4640      	mov	r0, r8
 80088d2:	f7f8 f969 	bl	8000ba8 <__aeabi_d2uiz>
 80088d6:	2801      	cmp	r0, #1
 80088d8:	bf38      	it	cc
 80088da:	2001      	movcc	r0, #1
 80088dc:	f7f7 fe12 	bl	8000504 <__aeabi_ui2d>
 80088e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e2:	4680      	mov	r8, r0
 80088e4:	4689      	mov	r9, r1
 80088e6:	bb23      	cbnz	r3, 8008932 <_strtod_l+0xb9a>
 80088e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088ec:	9010      	str	r0, [sp, #64]	; 0x40
 80088ee:	9311      	str	r3, [sp, #68]	; 0x44
 80088f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80088f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80088fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008900:	1a9b      	subs	r3, r3, r2
 8008902:	9309      	str	r3, [sp, #36]	; 0x24
 8008904:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008908:	eeb0 0a48 	vmov.f32	s0, s16
 800890c:	eef0 0a68 	vmov.f32	s1, s17
 8008910:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008914:	f002 f942 	bl	800ab9c <__ulp>
 8008918:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800891c:	ec53 2b10 	vmov	r2, r3, d0
 8008920:	f7f7 fe6a 	bl	80005f8 <__aeabi_dmul>
 8008924:	ec53 2b18 	vmov	r2, r3, d8
 8008928:	f7f7 fcb0 	bl	800028c <__adddf3>
 800892c:	4682      	mov	sl, r0
 800892e:	468b      	mov	fp, r1
 8008930:	e78d      	b.n	800884e <_strtod_l+0xab6>
 8008932:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008936:	e7db      	b.n	80088f0 <_strtod_l+0xb58>
 8008938:	a311      	add	r3, pc, #68	; (adr r3, 8008980 <_strtod_l+0xbe8>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f8 f8cd 	bl	8000adc <__aeabi_dcmplt>
 8008942:	e7b2      	b.n	80088aa <_strtod_l+0xb12>
 8008944:	2300      	movs	r3, #0
 8008946:	930a      	str	r3, [sp, #40]	; 0x28
 8008948:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800894a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	f7ff ba6b 	b.w	8007e28 <_strtod_l+0x90>
 8008952:	2a65      	cmp	r2, #101	; 0x65
 8008954:	f43f ab5f 	beq.w	8008016 <_strtod_l+0x27e>
 8008958:	2a45      	cmp	r2, #69	; 0x45
 800895a:	f43f ab5c 	beq.w	8008016 <_strtod_l+0x27e>
 800895e:	2301      	movs	r3, #1
 8008960:	f7ff bb94 	b.w	800808c <_strtod_l+0x2f4>
 8008964:	f3af 8000 	nop.w
 8008968:	94a03595 	.word	0x94a03595
 800896c:	3fdfffff 	.word	0x3fdfffff
 8008970:	35afe535 	.word	0x35afe535
 8008974:	3fe00000 	.word	0x3fe00000
 8008978:	ffc00000 	.word	0xffc00000
 800897c:	41dfffff 	.word	0x41dfffff
 8008980:	94a03595 	.word	0x94a03595
 8008984:	3fcfffff 	.word	0x3fcfffff
 8008988:	3ff00000 	.word	0x3ff00000
 800898c:	7ff00000 	.word	0x7ff00000
 8008990:	7fe00000 	.word	0x7fe00000
 8008994:	7c9fffff 	.word	0x7c9fffff
 8008998:	3fe00000 	.word	0x3fe00000
 800899c:	bff00000 	.word	0xbff00000
 80089a0:	7fefffff 	.word	0x7fefffff

080089a4 <_strtod_r>:
 80089a4:	4b01      	ldr	r3, [pc, #4]	; (80089ac <_strtod_r+0x8>)
 80089a6:	f7ff b9f7 	b.w	8007d98 <_strtod_l>
 80089aa:	bf00      	nop
 80089ac:	20000078 	.word	0x20000078

080089b0 <_strtol_l.constprop.0>:
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b6:	d001      	beq.n	80089bc <_strtol_l.constprop.0+0xc>
 80089b8:	2b24      	cmp	r3, #36	; 0x24
 80089ba:	d906      	bls.n	80089ca <_strtol_l.constprop.0+0x1a>
 80089bc:	f7fe fa70 	bl	8006ea0 <__errno>
 80089c0:	2316      	movs	r3, #22
 80089c2:	6003      	str	r3, [r0, #0]
 80089c4:	2000      	movs	r0, #0
 80089c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008ab0 <_strtol_l.constprop.0+0x100>
 80089ce:	460d      	mov	r5, r1
 80089d0:	462e      	mov	r6, r5
 80089d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80089da:	f017 0708 	ands.w	r7, r7, #8
 80089de:	d1f7      	bne.n	80089d0 <_strtol_l.constprop.0+0x20>
 80089e0:	2c2d      	cmp	r4, #45	; 0x2d
 80089e2:	d132      	bne.n	8008a4a <_strtol_l.constprop.0+0x9a>
 80089e4:	782c      	ldrb	r4, [r5, #0]
 80089e6:	2701      	movs	r7, #1
 80089e8:	1cb5      	adds	r5, r6, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d05b      	beq.n	8008aa6 <_strtol_l.constprop.0+0xf6>
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d109      	bne.n	8008a06 <_strtol_l.constprop.0+0x56>
 80089f2:	2c30      	cmp	r4, #48	; 0x30
 80089f4:	d107      	bne.n	8008a06 <_strtol_l.constprop.0+0x56>
 80089f6:	782c      	ldrb	r4, [r5, #0]
 80089f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80089fc:	2c58      	cmp	r4, #88	; 0x58
 80089fe:	d14d      	bne.n	8008a9c <_strtol_l.constprop.0+0xec>
 8008a00:	786c      	ldrb	r4, [r5, #1]
 8008a02:	2310      	movs	r3, #16
 8008a04:	3502      	adds	r5, #2
 8008a06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008a0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a0e:	f04f 0c00 	mov.w	ip, #0
 8008a12:	fbb8 f9f3 	udiv	r9, r8, r3
 8008a16:	4666      	mov	r6, ip
 8008a18:	fb03 8a19 	mls	sl, r3, r9, r8
 8008a1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008a20:	f1be 0f09 	cmp.w	lr, #9
 8008a24:	d816      	bhi.n	8008a54 <_strtol_l.constprop.0+0xa4>
 8008a26:	4674      	mov	r4, lr
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	dd24      	ble.n	8008a76 <_strtol_l.constprop.0+0xc6>
 8008a2c:	f1bc 0f00 	cmp.w	ip, #0
 8008a30:	db1e      	blt.n	8008a70 <_strtol_l.constprop.0+0xc0>
 8008a32:	45b1      	cmp	r9, r6
 8008a34:	d31c      	bcc.n	8008a70 <_strtol_l.constprop.0+0xc0>
 8008a36:	d101      	bne.n	8008a3c <_strtol_l.constprop.0+0x8c>
 8008a38:	45a2      	cmp	sl, r4
 8008a3a:	db19      	blt.n	8008a70 <_strtol_l.constprop.0+0xc0>
 8008a3c:	fb06 4603 	mla	r6, r6, r3, r4
 8008a40:	f04f 0c01 	mov.w	ip, #1
 8008a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a48:	e7e8      	b.n	8008a1c <_strtol_l.constprop.0+0x6c>
 8008a4a:	2c2b      	cmp	r4, #43	; 0x2b
 8008a4c:	bf04      	itt	eq
 8008a4e:	782c      	ldrbeq	r4, [r5, #0]
 8008a50:	1cb5      	addeq	r5, r6, #2
 8008a52:	e7ca      	b.n	80089ea <_strtol_l.constprop.0+0x3a>
 8008a54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008a58:	f1be 0f19 	cmp.w	lr, #25
 8008a5c:	d801      	bhi.n	8008a62 <_strtol_l.constprop.0+0xb2>
 8008a5e:	3c37      	subs	r4, #55	; 0x37
 8008a60:	e7e2      	b.n	8008a28 <_strtol_l.constprop.0+0x78>
 8008a62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008a66:	f1be 0f19 	cmp.w	lr, #25
 8008a6a:	d804      	bhi.n	8008a76 <_strtol_l.constprop.0+0xc6>
 8008a6c:	3c57      	subs	r4, #87	; 0x57
 8008a6e:	e7db      	b.n	8008a28 <_strtol_l.constprop.0+0x78>
 8008a70:	f04f 3cff 	mov.w	ip, #4294967295
 8008a74:	e7e6      	b.n	8008a44 <_strtol_l.constprop.0+0x94>
 8008a76:	f1bc 0f00 	cmp.w	ip, #0
 8008a7a:	da05      	bge.n	8008a88 <_strtol_l.constprop.0+0xd8>
 8008a7c:	2322      	movs	r3, #34	; 0x22
 8008a7e:	6003      	str	r3, [r0, #0]
 8008a80:	4646      	mov	r6, r8
 8008a82:	b942      	cbnz	r2, 8008a96 <_strtol_l.constprop.0+0xe6>
 8008a84:	4630      	mov	r0, r6
 8008a86:	e79e      	b.n	80089c6 <_strtol_l.constprop.0+0x16>
 8008a88:	b107      	cbz	r7, 8008a8c <_strtol_l.constprop.0+0xdc>
 8008a8a:	4276      	negs	r6, r6
 8008a8c:	2a00      	cmp	r2, #0
 8008a8e:	d0f9      	beq.n	8008a84 <_strtol_l.constprop.0+0xd4>
 8008a90:	f1bc 0f00 	cmp.w	ip, #0
 8008a94:	d000      	beq.n	8008a98 <_strtol_l.constprop.0+0xe8>
 8008a96:	1e69      	subs	r1, r5, #1
 8008a98:	6011      	str	r1, [r2, #0]
 8008a9a:	e7f3      	b.n	8008a84 <_strtol_l.constprop.0+0xd4>
 8008a9c:	2430      	movs	r4, #48	; 0x30
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1b1      	bne.n	8008a06 <_strtol_l.constprop.0+0x56>
 8008aa2:	2308      	movs	r3, #8
 8008aa4:	e7af      	b.n	8008a06 <_strtol_l.constprop.0+0x56>
 8008aa6:	2c30      	cmp	r4, #48	; 0x30
 8008aa8:	d0a5      	beq.n	80089f6 <_strtol_l.constprop.0+0x46>
 8008aaa:	230a      	movs	r3, #10
 8008aac:	e7ab      	b.n	8008a06 <_strtol_l.constprop.0+0x56>
 8008aae:	bf00      	nop
 8008ab0:	0800bac1 	.word	0x0800bac1

08008ab4 <_strtol_r>:
 8008ab4:	f7ff bf7c 	b.w	80089b0 <_strtol_l.constprop.0>

08008ab8 <strtol>:
 8008ab8:	4613      	mov	r3, r2
 8008aba:	460a      	mov	r2, r1
 8008abc:	4601      	mov	r1, r0
 8008abe:	4802      	ldr	r0, [pc, #8]	; (8008ac8 <strtol+0x10>)
 8008ac0:	6800      	ldr	r0, [r0, #0]
 8008ac2:	f7ff bf75 	b.w	80089b0 <_strtol_l.constprop.0>
 8008ac6:	bf00      	nop
 8008ac8:	20000010 	.word	0x20000010

08008acc <__swbuf_r>:
 8008acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ace:	460e      	mov	r6, r1
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	4605      	mov	r5, r0
 8008ad4:	b118      	cbz	r0, 8008ade <__swbuf_r+0x12>
 8008ad6:	6983      	ldr	r3, [r0, #24]
 8008ad8:	b90b      	cbnz	r3, 8008ade <__swbuf_r+0x12>
 8008ada:	f001 f84d 	bl	8009b78 <__sinit>
 8008ade:	4b21      	ldr	r3, [pc, #132]	; (8008b64 <__swbuf_r+0x98>)
 8008ae0:	429c      	cmp	r4, r3
 8008ae2:	d12b      	bne.n	8008b3c <__swbuf_r+0x70>
 8008ae4:	686c      	ldr	r4, [r5, #4]
 8008ae6:	69a3      	ldr	r3, [r4, #24]
 8008ae8:	60a3      	str	r3, [r4, #8]
 8008aea:	89a3      	ldrh	r3, [r4, #12]
 8008aec:	071a      	lsls	r2, r3, #28
 8008aee:	d52f      	bpl.n	8008b50 <__swbuf_r+0x84>
 8008af0:	6923      	ldr	r3, [r4, #16]
 8008af2:	b36b      	cbz	r3, 8008b50 <__swbuf_r+0x84>
 8008af4:	6923      	ldr	r3, [r4, #16]
 8008af6:	6820      	ldr	r0, [r4, #0]
 8008af8:	1ac0      	subs	r0, r0, r3
 8008afa:	6963      	ldr	r3, [r4, #20]
 8008afc:	b2f6      	uxtb	r6, r6
 8008afe:	4283      	cmp	r3, r0
 8008b00:	4637      	mov	r7, r6
 8008b02:	dc04      	bgt.n	8008b0e <__swbuf_r+0x42>
 8008b04:	4621      	mov	r1, r4
 8008b06:	4628      	mov	r0, r5
 8008b08:	f000 ffa2 	bl	8009a50 <_fflush_r>
 8008b0c:	bb30      	cbnz	r0, 8008b5c <__swbuf_r+0x90>
 8008b0e:	68a3      	ldr	r3, [r4, #8]
 8008b10:	3b01      	subs	r3, #1
 8008b12:	60a3      	str	r3, [r4, #8]
 8008b14:	6823      	ldr	r3, [r4, #0]
 8008b16:	1c5a      	adds	r2, r3, #1
 8008b18:	6022      	str	r2, [r4, #0]
 8008b1a:	701e      	strb	r6, [r3, #0]
 8008b1c:	6963      	ldr	r3, [r4, #20]
 8008b1e:	3001      	adds	r0, #1
 8008b20:	4283      	cmp	r3, r0
 8008b22:	d004      	beq.n	8008b2e <__swbuf_r+0x62>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	07db      	lsls	r3, r3, #31
 8008b28:	d506      	bpl.n	8008b38 <__swbuf_r+0x6c>
 8008b2a:	2e0a      	cmp	r6, #10
 8008b2c:	d104      	bne.n	8008b38 <__swbuf_r+0x6c>
 8008b2e:	4621      	mov	r1, r4
 8008b30:	4628      	mov	r0, r5
 8008b32:	f000 ff8d 	bl	8009a50 <_fflush_r>
 8008b36:	b988      	cbnz	r0, 8008b5c <__swbuf_r+0x90>
 8008b38:	4638      	mov	r0, r7
 8008b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <__swbuf_r+0x9c>)
 8008b3e:	429c      	cmp	r4, r3
 8008b40:	d101      	bne.n	8008b46 <__swbuf_r+0x7a>
 8008b42:	68ac      	ldr	r4, [r5, #8]
 8008b44:	e7cf      	b.n	8008ae6 <__swbuf_r+0x1a>
 8008b46:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <__swbuf_r+0xa0>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	bf08      	it	eq
 8008b4c:	68ec      	ldreq	r4, [r5, #12]
 8008b4e:	e7ca      	b.n	8008ae6 <__swbuf_r+0x1a>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f000 f80c 	bl	8008b70 <__swsetup_r>
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	d0cb      	beq.n	8008af4 <__swbuf_r+0x28>
 8008b5c:	f04f 37ff 	mov.w	r7, #4294967295
 8008b60:	e7ea      	b.n	8008b38 <__swbuf_r+0x6c>
 8008b62:	bf00      	nop
 8008b64:	0800bc74 	.word	0x0800bc74
 8008b68:	0800bc94 	.word	0x0800bc94
 8008b6c:	0800bc54 	.word	0x0800bc54

08008b70 <__swsetup_r>:
 8008b70:	4b32      	ldr	r3, [pc, #200]	; (8008c3c <__swsetup_r+0xcc>)
 8008b72:	b570      	push	{r4, r5, r6, lr}
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	4606      	mov	r6, r0
 8008b78:	460c      	mov	r4, r1
 8008b7a:	b125      	cbz	r5, 8008b86 <__swsetup_r+0x16>
 8008b7c:	69ab      	ldr	r3, [r5, #24]
 8008b7e:	b913      	cbnz	r3, 8008b86 <__swsetup_r+0x16>
 8008b80:	4628      	mov	r0, r5
 8008b82:	f000 fff9 	bl	8009b78 <__sinit>
 8008b86:	4b2e      	ldr	r3, [pc, #184]	; (8008c40 <__swsetup_r+0xd0>)
 8008b88:	429c      	cmp	r4, r3
 8008b8a:	d10f      	bne.n	8008bac <__swsetup_r+0x3c>
 8008b8c:	686c      	ldr	r4, [r5, #4]
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b94:	0719      	lsls	r1, r3, #28
 8008b96:	d42c      	bmi.n	8008bf2 <__swsetup_r+0x82>
 8008b98:	06dd      	lsls	r5, r3, #27
 8008b9a:	d411      	bmi.n	8008bc0 <__swsetup_r+0x50>
 8008b9c:	2309      	movs	r3, #9
 8008b9e:	6033      	str	r3, [r6, #0]
 8008ba0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ba4:	81a3      	strh	r3, [r4, #12]
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8008baa:	e03e      	b.n	8008c2a <__swsetup_r+0xba>
 8008bac:	4b25      	ldr	r3, [pc, #148]	; (8008c44 <__swsetup_r+0xd4>)
 8008bae:	429c      	cmp	r4, r3
 8008bb0:	d101      	bne.n	8008bb6 <__swsetup_r+0x46>
 8008bb2:	68ac      	ldr	r4, [r5, #8]
 8008bb4:	e7eb      	b.n	8008b8e <__swsetup_r+0x1e>
 8008bb6:	4b24      	ldr	r3, [pc, #144]	; (8008c48 <__swsetup_r+0xd8>)
 8008bb8:	429c      	cmp	r4, r3
 8008bba:	bf08      	it	eq
 8008bbc:	68ec      	ldreq	r4, [r5, #12]
 8008bbe:	e7e6      	b.n	8008b8e <__swsetup_r+0x1e>
 8008bc0:	0758      	lsls	r0, r3, #29
 8008bc2:	d512      	bpl.n	8008bea <__swsetup_r+0x7a>
 8008bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bc6:	b141      	cbz	r1, 8008bda <__swsetup_r+0x6a>
 8008bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008bcc:	4299      	cmp	r1, r3
 8008bce:	d002      	beq.n	8008bd6 <__swsetup_r+0x66>
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	f002 f949 	bl	800ae68 <_free_r>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008be0:	81a3      	strh	r3, [r4, #12]
 8008be2:	2300      	movs	r3, #0
 8008be4:	6063      	str	r3, [r4, #4]
 8008be6:	6923      	ldr	r3, [r4, #16]
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	89a3      	ldrh	r3, [r4, #12]
 8008bec:	f043 0308 	orr.w	r3, r3, #8
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	b94b      	cbnz	r3, 8008c0a <__swsetup_r+0x9a>
 8008bf6:	89a3      	ldrh	r3, [r4, #12]
 8008bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c00:	d003      	beq.n	8008c0a <__swsetup_r+0x9a>
 8008c02:	4621      	mov	r1, r4
 8008c04:	4630      	mov	r0, r6
 8008c06:	f001 fbef 	bl	800a3e8 <__smakebuf_r>
 8008c0a:	89a0      	ldrh	r0, [r4, #12]
 8008c0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c10:	f010 0301 	ands.w	r3, r0, #1
 8008c14:	d00a      	beq.n	8008c2c <__swsetup_r+0xbc>
 8008c16:	2300      	movs	r3, #0
 8008c18:	60a3      	str	r3, [r4, #8]
 8008c1a:	6963      	ldr	r3, [r4, #20]
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	61a3      	str	r3, [r4, #24]
 8008c20:	6923      	ldr	r3, [r4, #16]
 8008c22:	b943      	cbnz	r3, 8008c36 <__swsetup_r+0xc6>
 8008c24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c28:	d1ba      	bne.n	8008ba0 <__swsetup_r+0x30>
 8008c2a:	bd70      	pop	{r4, r5, r6, pc}
 8008c2c:	0781      	lsls	r1, r0, #30
 8008c2e:	bf58      	it	pl
 8008c30:	6963      	ldrpl	r3, [r4, #20]
 8008c32:	60a3      	str	r3, [r4, #8]
 8008c34:	e7f4      	b.n	8008c20 <__swsetup_r+0xb0>
 8008c36:	2000      	movs	r0, #0
 8008c38:	e7f7      	b.n	8008c2a <__swsetup_r+0xba>
 8008c3a:	bf00      	nop
 8008c3c:	20000010 	.word	0x20000010
 8008c40:	0800bc74 	.word	0x0800bc74
 8008c44:	0800bc94 	.word	0x0800bc94
 8008c48:	0800bc54 	.word	0x0800bc54

08008c4c <quorem>:
 8008c4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	6903      	ldr	r3, [r0, #16]
 8008c52:	690c      	ldr	r4, [r1, #16]
 8008c54:	42a3      	cmp	r3, r4
 8008c56:	4607      	mov	r7, r0
 8008c58:	f2c0 8081 	blt.w	8008d5e <quorem+0x112>
 8008c5c:	3c01      	subs	r4, #1
 8008c5e:	f101 0814 	add.w	r8, r1, #20
 8008c62:	f100 0514 	add.w	r5, r0, #20
 8008c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c74:	3301      	adds	r3, #1
 8008c76:	429a      	cmp	r2, r3
 8008c78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c80:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c84:	d331      	bcc.n	8008cea <quorem+0x9e>
 8008c86:	f04f 0e00 	mov.w	lr, #0
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	46ac      	mov	ip, r5
 8008c8e:	46f2      	mov	sl, lr
 8008c90:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c94:	b293      	uxth	r3, r2
 8008c96:	fb06 e303 	mla	r3, r6, r3, lr
 8008c9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	ebaa 0303 	sub.w	r3, sl, r3
 8008ca4:	f8dc a000 	ldr.w	sl, [ip]
 8008ca8:	0c12      	lsrs	r2, r2, #16
 8008caa:	fa13 f38a 	uxtah	r3, r3, sl
 8008cae:	fb06 e202 	mla	r2, r6, r2, lr
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	9b00      	ldr	r3, [sp, #0]
 8008cb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008cba:	b292      	uxth	r2, r2
 8008cbc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008cc4:	f8bd 3000 	ldrh.w	r3, [sp]
 8008cc8:	4581      	cmp	r9, r0
 8008cca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008cce:	f84c 3b04 	str.w	r3, [ip], #4
 8008cd2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008cd6:	d2db      	bcs.n	8008c90 <quorem+0x44>
 8008cd8:	f855 300b 	ldr.w	r3, [r5, fp]
 8008cdc:	b92b      	cbnz	r3, 8008cea <quorem+0x9e>
 8008cde:	9b01      	ldr	r3, [sp, #4]
 8008ce0:	3b04      	subs	r3, #4
 8008ce2:	429d      	cmp	r5, r3
 8008ce4:	461a      	mov	r2, r3
 8008ce6:	d32e      	bcc.n	8008d46 <quorem+0xfa>
 8008ce8:	613c      	str	r4, [r7, #16]
 8008cea:	4638      	mov	r0, r7
 8008cec:	f001 feb0 	bl	800aa50 <__mcmp>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	db24      	blt.n	8008d3e <quorem+0xf2>
 8008cf4:	3601      	adds	r6, #1
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f04f 0c00 	mov.w	ip, #0
 8008cfc:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d00:	f8d0 e000 	ldr.w	lr, [r0]
 8008d04:	b293      	uxth	r3, r2
 8008d06:	ebac 0303 	sub.w	r3, ip, r3
 8008d0a:	0c12      	lsrs	r2, r2, #16
 8008d0c:	fa13 f38e 	uxtah	r3, r3, lr
 8008d10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d1e:	45c1      	cmp	r9, r8
 8008d20:	f840 3b04 	str.w	r3, [r0], #4
 8008d24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d28:	d2e8      	bcs.n	8008cfc <quorem+0xb0>
 8008d2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d32:	b922      	cbnz	r2, 8008d3e <quorem+0xf2>
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d30a      	bcc.n	8008d52 <quorem+0x106>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4630      	mov	r0, r6
 8008d40:	b003      	add	sp, #12
 8008d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	3b04      	subs	r3, #4
 8008d4a:	2a00      	cmp	r2, #0
 8008d4c:	d1cc      	bne.n	8008ce8 <quorem+0x9c>
 8008d4e:	3c01      	subs	r4, #1
 8008d50:	e7c7      	b.n	8008ce2 <quorem+0x96>
 8008d52:	6812      	ldr	r2, [r2, #0]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	2a00      	cmp	r2, #0
 8008d58:	d1f0      	bne.n	8008d3c <quorem+0xf0>
 8008d5a:	3c01      	subs	r4, #1
 8008d5c:	e7eb      	b.n	8008d36 <quorem+0xea>
 8008d5e:	2000      	movs	r0, #0
 8008d60:	e7ee      	b.n	8008d40 <quorem+0xf4>
 8008d62:	0000      	movs	r0, r0
 8008d64:	0000      	movs	r0, r0
	...

08008d68 <_dtoa_r>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	ed2d 8b04 	vpush	{d8-d9}
 8008d70:	ec57 6b10 	vmov	r6, r7, d0
 8008d74:	b093      	sub	sp, #76	; 0x4c
 8008d76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008d78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008d7c:	9106      	str	r1, [sp, #24]
 8008d7e:	ee10 aa10 	vmov	sl, s0
 8008d82:	4604      	mov	r4, r0
 8008d84:	9209      	str	r2, [sp, #36]	; 0x24
 8008d86:	930c      	str	r3, [sp, #48]	; 0x30
 8008d88:	46bb      	mov	fp, r7
 8008d8a:	b975      	cbnz	r5, 8008daa <_dtoa_r+0x42>
 8008d8c:	2010      	movs	r0, #16
 8008d8e:	f001 fb6b 	bl	800a468 <malloc>
 8008d92:	4602      	mov	r2, r0
 8008d94:	6260      	str	r0, [r4, #36]	; 0x24
 8008d96:	b920      	cbnz	r0, 8008da2 <_dtoa_r+0x3a>
 8008d98:	4ba7      	ldr	r3, [pc, #668]	; (8009038 <_dtoa_r+0x2d0>)
 8008d9a:	21ea      	movs	r1, #234	; 0xea
 8008d9c:	48a7      	ldr	r0, [pc, #668]	; (800903c <_dtoa_r+0x2d4>)
 8008d9e:	f002 fc89 	bl	800b6b4 <__assert_func>
 8008da2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008da6:	6005      	str	r5, [r0, #0]
 8008da8:	60c5      	str	r5, [r0, #12]
 8008daa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dac:	6819      	ldr	r1, [r3, #0]
 8008dae:	b151      	cbz	r1, 8008dc6 <_dtoa_r+0x5e>
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	604a      	str	r2, [r1, #4]
 8008db4:	2301      	movs	r3, #1
 8008db6:	4093      	lsls	r3, r2
 8008db8:	608b      	str	r3, [r1, #8]
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f001 fbbc 	bl	800a538 <_Bfree>
 8008dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	601a      	str	r2, [r3, #0]
 8008dc6:	1e3b      	subs	r3, r7, #0
 8008dc8:	bfaa      	itet	ge
 8008dca:	2300      	movge	r3, #0
 8008dcc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008dd0:	f8c8 3000 	strge.w	r3, [r8]
 8008dd4:	4b9a      	ldr	r3, [pc, #616]	; (8009040 <_dtoa_r+0x2d8>)
 8008dd6:	bfbc      	itt	lt
 8008dd8:	2201      	movlt	r2, #1
 8008dda:	f8c8 2000 	strlt.w	r2, [r8]
 8008dde:	ea33 030b 	bics.w	r3, r3, fp
 8008de2:	d11b      	bne.n	8008e1c <_dtoa_r+0xb4>
 8008de4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008de6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dea:	6013      	str	r3, [r2, #0]
 8008dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008df0:	4333      	orrs	r3, r6
 8008df2:	f000 8592 	beq.w	800991a <_dtoa_r+0xbb2>
 8008df6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df8:	b963      	cbnz	r3, 8008e14 <_dtoa_r+0xac>
 8008dfa:	4b92      	ldr	r3, [pc, #584]	; (8009044 <_dtoa_r+0x2dc>)
 8008dfc:	e022      	b.n	8008e44 <_dtoa_r+0xdc>
 8008dfe:	4b92      	ldr	r3, [pc, #584]	; (8009048 <_dtoa_r+0x2e0>)
 8008e00:	9301      	str	r3, [sp, #4]
 8008e02:	3308      	adds	r3, #8
 8008e04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	9801      	ldr	r0, [sp, #4]
 8008e0a:	b013      	add	sp, #76	; 0x4c
 8008e0c:	ecbd 8b04 	vpop	{d8-d9}
 8008e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e14:	4b8b      	ldr	r3, [pc, #556]	; (8009044 <_dtoa_r+0x2dc>)
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	3303      	adds	r3, #3
 8008e1a:	e7f3      	b.n	8008e04 <_dtoa_r+0x9c>
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2300      	movs	r3, #0
 8008e20:	4650      	mov	r0, sl
 8008e22:	4659      	mov	r1, fp
 8008e24:	f7f7 fe50 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e28:	ec4b ab19 	vmov	d9, sl, fp
 8008e2c:	4680      	mov	r8, r0
 8008e2e:	b158      	cbz	r0, 8008e48 <_dtoa_r+0xe0>
 8008e30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e32:	2301      	movs	r3, #1
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 856b 	beq.w	8009914 <_dtoa_r+0xbac>
 8008e3e:	4883      	ldr	r0, [pc, #524]	; (800904c <_dtoa_r+0x2e4>)
 8008e40:	6018      	str	r0, [r3, #0]
 8008e42:	1e43      	subs	r3, r0, #1
 8008e44:	9301      	str	r3, [sp, #4]
 8008e46:	e7df      	b.n	8008e08 <_dtoa_r+0xa0>
 8008e48:	ec4b ab10 	vmov	d0, sl, fp
 8008e4c:	aa10      	add	r2, sp, #64	; 0x40
 8008e4e:	a911      	add	r1, sp, #68	; 0x44
 8008e50:	4620      	mov	r0, r4
 8008e52:	f001 ff1f 	bl	800ac94 <__d2b>
 8008e56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008e5a:	ee08 0a10 	vmov	s16, r0
 8008e5e:	2d00      	cmp	r5, #0
 8008e60:	f000 8084 	beq.w	8008f6c <_dtoa_r+0x204>
 8008e64:	ee19 3a90 	vmov	r3, s19
 8008e68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008e70:	4656      	mov	r6, sl
 8008e72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008e76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008e7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008e7e:	4b74      	ldr	r3, [pc, #464]	; (8009050 <_dtoa_r+0x2e8>)
 8008e80:	2200      	movs	r2, #0
 8008e82:	4630      	mov	r0, r6
 8008e84:	4639      	mov	r1, r7
 8008e86:	f7f7 f9ff 	bl	8000288 <__aeabi_dsub>
 8008e8a:	a365      	add	r3, pc, #404	; (adr r3, 8009020 <_dtoa_r+0x2b8>)
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f7f7 fbb2 	bl	80005f8 <__aeabi_dmul>
 8008e94:	a364      	add	r3, pc, #400	; (adr r3, 8009028 <_dtoa_r+0x2c0>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 f9f7 	bl	800028c <__adddf3>
 8008e9e:	4606      	mov	r6, r0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	460f      	mov	r7, r1
 8008ea4:	f7f7 fb3e 	bl	8000524 <__aeabi_i2d>
 8008ea8:	a361      	add	r3, pc, #388	; (adr r3, 8009030 <_dtoa_r+0x2c8>)
 8008eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eae:	f7f7 fba3 	bl	80005f8 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 f9e7 	bl	800028c <__adddf3>
 8008ebe:	4606      	mov	r6, r0
 8008ec0:	460f      	mov	r7, r1
 8008ec2:	f7f7 fe49 	bl	8000b58 <__aeabi_d2iz>
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	9000      	str	r0, [sp, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	4630      	mov	r0, r6
 8008ece:	4639      	mov	r1, r7
 8008ed0:	f7f7 fe04 	bl	8000adc <__aeabi_dcmplt>
 8008ed4:	b150      	cbz	r0, 8008eec <_dtoa_r+0x184>
 8008ed6:	9800      	ldr	r0, [sp, #0]
 8008ed8:	f7f7 fb24 	bl	8000524 <__aeabi_i2d>
 8008edc:	4632      	mov	r2, r6
 8008ede:	463b      	mov	r3, r7
 8008ee0:	f7f7 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ee4:	b910      	cbnz	r0, 8008eec <_dtoa_r+0x184>
 8008ee6:	9b00      	ldr	r3, [sp, #0]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	2b16      	cmp	r3, #22
 8008ef0:	d85a      	bhi.n	8008fa8 <_dtoa_r+0x240>
 8008ef2:	9a00      	ldr	r2, [sp, #0]
 8008ef4:	4b57      	ldr	r3, [pc, #348]	; (8009054 <_dtoa_r+0x2ec>)
 8008ef6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efe:	ec51 0b19 	vmov	r0, r1, d9
 8008f02:	f7f7 fdeb 	bl	8000adc <__aeabi_dcmplt>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	d050      	beq.n	8008fac <_dtoa_r+0x244>
 8008f0a:	9b00      	ldr	r3, [sp, #0]
 8008f0c:	3b01      	subs	r3, #1
 8008f0e:	9300      	str	r3, [sp, #0]
 8008f10:	2300      	movs	r3, #0
 8008f12:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f16:	1b5d      	subs	r5, r3, r5
 8008f18:	1e6b      	subs	r3, r5, #1
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	bf45      	ittet	mi
 8008f1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f22:	9304      	strmi	r3, [sp, #16]
 8008f24:	2300      	movpl	r3, #0
 8008f26:	2300      	movmi	r3, #0
 8008f28:	bf4c      	ite	mi
 8008f2a:	9305      	strmi	r3, [sp, #20]
 8008f2c:	9304      	strpl	r3, [sp, #16]
 8008f2e:	9b00      	ldr	r3, [sp, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db3d      	blt.n	8008fb0 <_dtoa_r+0x248>
 8008f34:	9b05      	ldr	r3, [sp, #20]
 8008f36:	9a00      	ldr	r2, [sp, #0]
 8008f38:	920a      	str	r2, [sp, #40]	; 0x28
 8008f3a:	4413      	add	r3, r2
 8008f3c:	9305      	str	r3, [sp, #20]
 8008f3e:	2300      	movs	r3, #0
 8008f40:	9307      	str	r3, [sp, #28]
 8008f42:	9b06      	ldr	r3, [sp, #24]
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	f200 8089 	bhi.w	800905c <_dtoa_r+0x2f4>
 8008f4a:	2b05      	cmp	r3, #5
 8008f4c:	bfc4      	itt	gt
 8008f4e:	3b04      	subgt	r3, #4
 8008f50:	9306      	strgt	r3, [sp, #24]
 8008f52:	9b06      	ldr	r3, [sp, #24]
 8008f54:	f1a3 0302 	sub.w	r3, r3, #2
 8008f58:	bfcc      	ite	gt
 8008f5a:	2500      	movgt	r5, #0
 8008f5c:	2501      	movle	r5, #1
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	f200 8087 	bhi.w	8009072 <_dtoa_r+0x30a>
 8008f64:	e8df f003 	tbb	[pc, r3]
 8008f68:	59383a2d 	.word	0x59383a2d
 8008f6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008f70:	441d      	add	r5, r3
 8008f72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008f76:	2b20      	cmp	r3, #32
 8008f78:	bfc1      	itttt	gt
 8008f7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008f82:	fa0b f303 	lslgt.w	r3, fp, r3
 8008f86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008f8a:	bfda      	itte	le
 8008f8c:	f1c3 0320 	rsble	r3, r3, #32
 8008f90:	fa06 f003 	lslle.w	r0, r6, r3
 8008f94:	4318      	orrgt	r0, r3
 8008f96:	f7f7 fab5 	bl	8000504 <__aeabi_ui2d>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	4606      	mov	r6, r0
 8008f9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008fa2:	3d01      	subs	r5, #1
 8008fa4:	930e      	str	r3, [sp, #56]	; 0x38
 8008fa6:	e76a      	b.n	8008e7e <_dtoa_r+0x116>
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e7b2      	b.n	8008f12 <_dtoa_r+0x1aa>
 8008fac:	900b      	str	r0, [sp, #44]	; 0x2c
 8008fae:	e7b1      	b.n	8008f14 <_dtoa_r+0x1ac>
 8008fb0:	9b04      	ldr	r3, [sp, #16]
 8008fb2:	9a00      	ldr	r2, [sp, #0]
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	9304      	str	r3, [sp, #16]
 8008fb8:	4253      	negs	r3, r2
 8008fba:	9307      	str	r3, [sp, #28]
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	930a      	str	r3, [sp, #40]	; 0x28
 8008fc0:	e7bf      	b.n	8008f42 <_dtoa_r+0x1da>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	dc55      	bgt.n	8009078 <_dtoa_r+0x310>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fd6:	e00c      	b.n	8008ff2 <_dtoa_r+0x28a>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e7f3      	b.n	8008fc4 <_dtoa_r+0x25c>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe0:	9308      	str	r3, [sp, #32]
 8008fe2:	9b00      	ldr	r3, [sp, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	9302      	str	r3, [sp, #8]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	9303      	str	r3, [sp, #12]
 8008fee:	bfb8      	it	lt
 8008ff0:	2301      	movlt	r3, #1
 8008ff2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	6042      	str	r2, [r0, #4]
 8008ff8:	2204      	movs	r2, #4
 8008ffa:	f102 0614 	add.w	r6, r2, #20
 8008ffe:	429e      	cmp	r6, r3
 8009000:	6841      	ldr	r1, [r0, #4]
 8009002:	d93d      	bls.n	8009080 <_dtoa_r+0x318>
 8009004:	4620      	mov	r0, r4
 8009006:	f001 fa57 	bl	800a4b8 <_Balloc>
 800900a:	9001      	str	r0, [sp, #4]
 800900c:	2800      	cmp	r0, #0
 800900e:	d13b      	bne.n	8009088 <_dtoa_r+0x320>
 8009010:	4b11      	ldr	r3, [pc, #68]	; (8009058 <_dtoa_r+0x2f0>)
 8009012:	4602      	mov	r2, r0
 8009014:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009018:	e6c0      	b.n	8008d9c <_dtoa_r+0x34>
 800901a:	2301      	movs	r3, #1
 800901c:	e7df      	b.n	8008fde <_dtoa_r+0x276>
 800901e:	bf00      	nop
 8009020:	636f4361 	.word	0x636f4361
 8009024:	3fd287a7 	.word	0x3fd287a7
 8009028:	8b60c8b3 	.word	0x8b60c8b3
 800902c:	3fc68a28 	.word	0x3fc68a28
 8009030:	509f79fb 	.word	0x509f79fb
 8009034:	3fd34413 	.word	0x3fd34413
 8009038:	0800bbce 	.word	0x0800bbce
 800903c:	0800bbe5 	.word	0x0800bbe5
 8009040:	7ff00000 	.word	0x7ff00000
 8009044:	0800bbca 	.word	0x0800bbca
 8009048:	0800bbc1 	.word	0x0800bbc1
 800904c:	0800ba41 	.word	0x0800ba41
 8009050:	3ff80000 	.word	0x3ff80000
 8009054:	0800bdb8 	.word	0x0800bdb8
 8009058:	0800bc40 	.word	0x0800bc40
 800905c:	2501      	movs	r5, #1
 800905e:	2300      	movs	r3, #0
 8009060:	9306      	str	r3, [sp, #24]
 8009062:	9508      	str	r5, [sp, #32]
 8009064:	f04f 33ff 	mov.w	r3, #4294967295
 8009068:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800906c:	2200      	movs	r2, #0
 800906e:	2312      	movs	r3, #18
 8009070:	e7b0      	b.n	8008fd4 <_dtoa_r+0x26c>
 8009072:	2301      	movs	r3, #1
 8009074:	9308      	str	r3, [sp, #32]
 8009076:	e7f5      	b.n	8009064 <_dtoa_r+0x2fc>
 8009078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800907a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800907e:	e7b8      	b.n	8008ff2 <_dtoa_r+0x28a>
 8009080:	3101      	adds	r1, #1
 8009082:	6041      	str	r1, [r0, #4]
 8009084:	0052      	lsls	r2, r2, #1
 8009086:	e7b8      	b.n	8008ffa <_dtoa_r+0x292>
 8009088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800908a:	9a01      	ldr	r2, [sp, #4]
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	9b03      	ldr	r3, [sp, #12]
 8009090:	2b0e      	cmp	r3, #14
 8009092:	f200 809d 	bhi.w	80091d0 <_dtoa_r+0x468>
 8009096:	2d00      	cmp	r5, #0
 8009098:	f000 809a 	beq.w	80091d0 <_dtoa_r+0x468>
 800909c:	9b00      	ldr	r3, [sp, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dd32      	ble.n	8009108 <_dtoa_r+0x3a0>
 80090a2:	4ab7      	ldr	r2, [pc, #732]	; (8009380 <_dtoa_r+0x618>)
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80090ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090b0:	9b00      	ldr	r3, [sp, #0]
 80090b2:	05d8      	lsls	r0, r3, #23
 80090b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80090b8:	d516      	bpl.n	80090e8 <_dtoa_r+0x380>
 80090ba:	4bb2      	ldr	r3, [pc, #712]	; (8009384 <_dtoa_r+0x61c>)
 80090bc:	ec51 0b19 	vmov	r0, r1, d9
 80090c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090c4:	f7f7 fbc2 	bl	800084c <__aeabi_ddiv>
 80090c8:	f007 070f 	and.w	r7, r7, #15
 80090cc:	4682      	mov	sl, r0
 80090ce:	468b      	mov	fp, r1
 80090d0:	2503      	movs	r5, #3
 80090d2:	4eac      	ldr	r6, [pc, #688]	; (8009384 <_dtoa_r+0x61c>)
 80090d4:	b957      	cbnz	r7, 80090ec <_dtoa_r+0x384>
 80090d6:	4642      	mov	r2, r8
 80090d8:	464b      	mov	r3, r9
 80090da:	4650      	mov	r0, sl
 80090dc:	4659      	mov	r1, fp
 80090de:	f7f7 fbb5 	bl	800084c <__aeabi_ddiv>
 80090e2:	4682      	mov	sl, r0
 80090e4:	468b      	mov	fp, r1
 80090e6:	e028      	b.n	800913a <_dtoa_r+0x3d2>
 80090e8:	2502      	movs	r5, #2
 80090ea:	e7f2      	b.n	80090d2 <_dtoa_r+0x36a>
 80090ec:	07f9      	lsls	r1, r7, #31
 80090ee:	d508      	bpl.n	8009102 <_dtoa_r+0x39a>
 80090f0:	4640      	mov	r0, r8
 80090f2:	4649      	mov	r1, r9
 80090f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090f8:	f7f7 fa7e 	bl	80005f8 <__aeabi_dmul>
 80090fc:	3501      	adds	r5, #1
 80090fe:	4680      	mov	r8, r0
 8009100:	4689      	mov	r9, r1
 8009102:	107f      	asrs	r7, r7, #1
 8009104:	3608      	adds	r6, #8
 8009106:	e7e5      	b.n	80090d4 <_dtoa_r+0x36c>
 8009108:	f000 809b 	beq.w	8009242 <_dtoa_r+0x4da>
 800910c:	9b00      	ldr	r3, [sp, #0]
 800910e:	4f9d      	ldr	r7, [pc, #628]	; (8009384 <_dtoa_r+0x61c>)
 8009110:	425e      	negs	r6, r3
 8009112:	4b9b      	ldr	r3, [pc, #620]	; (8009380 <_dtoa_r+0x618>)
 8009114:	f006 020f 	and.w	r2, r6, #15
 8009118:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	ec51 0b19 	vmov	r0, r1, d9
 8009124:	f7f7 fa68 	bl	80005f8 <__aeabi_dmul>
 8009128:	1136      	asrs	r6, r6, #4
 800912a:	4682      	mov	sl, r0
 800912c:	468b      	mov	fp, r1
 800912e:	2300      	movs	r3, #0
 8009130:	2502      	movs	r5, #2
 8009132:	2e00      	cmp	r6, #0
 8009134:	d17a      	bne.n	800922c <_dtoa_r+0x4c4>
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1d3      	bne.n	80090e2 <_dtoa_r+0x37a>
 800913a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 8082 	beq.w	8009246 <_dtoa_r+0x4de>
 8009142:	4b91      	ldr	r3, [pc, #580]	; (8009388 <_dtoa_r+0x620>)
 8009144:	2200      	movs	r2, #0
 8009146:	4650      	mov	r0, sl
 8009148:	4659      	mov	r1, fp
 800914a:	f7f7 fcc7 	bl	8000adc <__aeabi_dcmplt>
 800914e:	2800      	cmp	r0, #0
 8009150:	d079      	beq.n	8009246 <_dtoa_r+0x4de>
 8009152:	9b03      	ldr	r3, [sp, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d076      	beq.n	8009246 <_dtoa_r+0x4de>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	2b00      	cmp	r3, #0
 800915c:	dd36      	ble.n	80091cc <_dtoa_r+0x464>
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	4650      	mov	r0, sl
 8009162:	4659      	mov	r1, fp
 8009164:	1e5f      	subs	r7, r3, #1
 8009166:	2200      	movs	r2, #0
 8009168:	4b88      	ldr	r3, [pc, #544]	; (800938c <_dtoa_r+0x624>)
 800916a:	f7f7 fa45 	bl	80005f8 <__aeabi_dmul>
 800916e:	9e02      	ldr	r6, [sp, #8]
 8009170:	4682      	mov	sl, r0
 8009172:	468b      	mov	fp, r1
 8009174:	3501      	adds	r5, #1
 8009176:	4628      	mov	r0, r5
 8009178:	f7f7 f9d4 	bl	8000524 <__aeabi_i2d>
 800917c:	4652      	mov	r2, sl
 800917e:	465b      	mov	r3, fp
 8009180:	f7f7 fa3a 	bl	80005f8 <__aeabi_dmul>
 8009184:	4b82      	ldr	r3, [pc, #520]	; (8009390 <_dtoa_r+0x628>)
 8009186:	2200      	movs	r2, #0
 8009188:	f7f7 f880 	bl	800028c <__adddf3>
 800918c:	46d0      	mov	r8, sl
 800918e:	46d9      	mov	r9, fp
 8009190:	4682      	mov	sl, r0
 8009192:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009196:	2e00      	cmp	r6, #0
 8009198:	d158      	bne.n	800924c <_dtoa_r+0x4e4>
 800919a:	4b7e      	ldr	r3, [pc, #504]	; (8009394 <_dtoa_r+0x62c>)
 800919c:	2200      	movs	r2, #0
 800919e:	4640      	mov	r0, r8
 80091a0:	4649      	mov	r1, r9
 80091a2:	f7f7 f871 	bl	8000288 <__aeabi_dsub>
 80091a6:	4652      	mov	r2, sl
 80091a8:	465b      	mov	r3, fp
 80091aa:	4680      	mov	r8, r0
 80091ac:	4689      	mov	r9, r1
 80091ae:	f7f7 fcb3 	bl	8000b18 <__aeabi_dcmpgt>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	f040 8295 	bne.w	80096e2 <_dtoa_r+0x97a>
 80091b8:	4652      	mov	r2, sl
 80091ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80091be:	4640      	mov	r0, r8
 80091c0:	4649      	mov	r1, r9
 80091c2:	f7f7 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f040 8289 	bne.w	80096de <_dtoa_r+0x976>
 80091cc:	ec5b ab19 	vmov	sl, fp, d9
 80091d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f2c0 8148 	blt.w	8009468 <_dtoa_r+0x700>
 80091d8:	9a00      	ldr	r2, [sp, #0]
 80091da:	2a0e      	cmp	r2, #14
 80091dc:	f300 8144 	bgt.w	8009468 <_dtoa_r+0x700>
 80091e0:	4b67      	ldr	r3, [pc, #412]	; (8009380 <_dtoa_r+0x618>)
 80091e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f280 80d5 	bge.w	800939c <_dtoa_r+0x634>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f300 80d1 	bgt.w	800939c <_dtoa_r+0x634>
 80091fa:	f040 826f 	bne.w	80096dc <_dtoa_r+0x974>
 80091fe:	4b65      	ldr	r3, [pc, #404]	; (8009394 <_dtoa_r+0x62c>)
 8009200:	2200      	movs	r2, #0
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4652      	mov	r2, sl
 800920c:	465b      	mov	r3, fp
 800920e:	f7f7 fc79 	bl	8000b04 <__aeabi_dcmpge>
 8009212:	9e03      	ldr	r6, [sp, #12]
 8009214:	4637      	mov	r7, r6
 8009216:	2800      	cmp	r0, #0
 8009218:	f040 8245 	bne.w	80096a6 <_dtoa_r+0x93e>
 800921c:	9d01      	ldr	r5, [sp, #4]
 800921e:	2331      	movs	r3, #49	; 0x31
 8009220:	f805 3b01 	strb.w	r3, [r5], #1
 8009224:	9b00      	ldr	r3, [sp, #0]
 8009226:	3301      	adds	r3, #1
 8009228:	9300      	str	r3, [sp, #0]
 800922a:	e240      	b.n	80096ae <_dtoa_r+0x946>
 800922c:	07f2      	lsls	r2, r6, #31
 800922e:	d505      	bpl.n	800923c <_dtoa_r+0x4d4>
 8009230:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009234:	f7f7 f9e0 	bl	80005f8 <__aeabi_dmul>
 8009238:	3501      	adds	r5, #1
 800923a:	2301      	movs	r3, #1
 800923c:	1076      	asrs	r6, r6, #1
 800923e:	3708      	adds	r7, #8
 8009240:	e777      	b.n	8009132 <_dtoa_r+0x3ca>
 8009242:	2502      	movs	r5, #2
 8009244:	e779      	b.n	800913a <_dtoa_r+0x3d2>
 8009246:	9f00      	ldr	r7, [sp, #0]
 8009248:	9e03      	ldr	r6, [sp, #12]
 800924a:	e794      	b.n	8009176 <_dtoa_r+0x40e>
 800924c:	9901      	ldr	r1, [sp, #4]
 800924e:	4b4c      	ldr	r3, [pc, #304]	; (8009380 <_dtoa_r+0x618>)
 8009250:	4431      	add	r1, r6
 8009252:	910d      	str	r1, [sp, #52]	; 0x34
 8009254:	9908      	ldr	r1, [sp, #32]
 8009256:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800925a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800925e:	2900      	cmp	r1, #0
 8009260:	d043      	beq.n	80092ea <_dtoa_r+0x582>
 8009262:	494d      	ldr	r1, [pc, #308]	; (8009398 <_dtoa_r+0x630>)
 8009264:	2000      	movs	r0, #0
 8009266:	f7f7 faf1 	bl	800084c <__aeabi_ddiv>
 800926a:	4652      	mov	r2, sl
 800926c:	465b      	mov	r3, fp
 800926e:	f7f7 f80b 	bl	8000288 <__aeabi_dsub>
 8009272:	9d01      	ldr	r5, [sp, #4]
 8009274:	4682      	mov	sl, r0
 8009276:	468b      	mov	fp, r1
 8009278:	4649      	mov	r1, r9
 800927a:	4640      	mov	r0, r8
 800927c:	f7f7 fc6c 	bl	8000b58 <__aeabi_d2iz>
 8009280:	4606      	mov	r6, r0
 8009282:	f7f7 f94f 	bl	8000524 <__aeabi_i2d>
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	3630      	adds	r6, #48	; 0x30
 8009294:	f805 6b01 	strb.w	r6, [r5], #1
 8009298:	4652      	mov	r2, sl
 800929a:	465b      	mov	r3, fp
 800929c:	4680      	mov	r8, r0
 800929e:	4689      	mov	r9, r1
 80092a0:	f7f7 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80092a4:	2800      	cmp	r0, #0
 80092a6:	d163      	bne.n	8009370 <_dtoa_r+0x608>
 80092a8:	4642      	mov	r2, r8
 80092aa:	464b      	mov	r3, r9
 80092ac:	4936      	ldr	r1, [pc, #216]	; (8009388 <_dtoa_r+0x620>)
 80092ae:	2000      	movs	r0, #0
 80092b0:	f7f6 ffea 	bl	8000288 <__aeabi_dsub>
 80092b4:	4652      	mov	r2, sl
 80092b6:	465b      	mov	r3, fp
 80092b8:	f7f7 fc10 	bl	8000adc <__aeabi_dcmplt>
 80092bc:	2800      	cmp	r0, #0
 80092be:	f040 80b5 	bne.w	800942c <_dtoa_r+0x6c4>
 80092c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c4:	429d      	cmp	r5, r3
 80092c6:	d081      	beq.n	80091cc <_dtoa_r+0x464>
 80092c8:	4b30      	ldr	r3, [pc, #192]	; (800938c <_dtoa_r+0x624>)
 80092ca:	2200      	movs	r2, #0
 80092cc:	4650      	mov	r0, sl
 80092ce:	4659      	mov	r1, fp
 80092d0:	f7f7 f992 	bl	80005f8 <__aeabi_dmul>
 80092d4:	4b2d      	ldr	r3, [pc, #180]	; (800938c <_dtoa_r+0x624>)
 80092d6:	4682      	mov	sl, r0
 80092d8:	468b      	mov	fp, r1
 80092da:	4640      	mov	r0, r8
 80092dc:	4649      	mov	r1, r9
 80092de:	2200      	movs	r2, #0
 80092e0:	f7f7 f98a 	bl	80005f8 <__aeabi_dmul>
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	e7c6      	b.n	8009278 <_dtoa_r+0x510>
 80092ea:	4650      	mov	r0, sl
 80092ec:	4659      	mov	r1, fp
 80092ee:	f7f7 f983 	bl	80005f8 <__aeabi_dmul>
 80092f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092f4:	9d01      	ldr	r5, [sp, #4]
 80092f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80092f8:	4682      	mov	sl, r0
 80092fa:	468b      	mov	fp, r1
 80092fc:	4649      	mov	r1, r9
 80092fe:	4640      	mov	r0, r8
 8009300:	f7f7 fc2a 	bl	8000b58 <__aeabi_d2iz>
 8009304:	4606      	mov	r6, r0
 8009306:	f7f7 f90d 	bl	8000524 <__aeabi_i2d>
 800930a:	3630      	adds	r6, #48	; 0x30
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4640      	mov	r0, r8
 8009312:	4649      	mov	r1, r9
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	f805 6b01 	strb.w	r6, [r5], #1
 800931c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931e:	429d      	cmp	r5, r3
 8009320:	4680      	mov	r8, r0
 8009322:	4689      	mov	r9, r1
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	d124      	bne.n	8009374 <_dtoa_r+0x60c>
 800932a:	4b1b      	ldr	r3, [pc, #108]	; (8009398 <_dtoa_r+0x630>)
 800932c:	4650      	mov	r0, sl
 800932e:	4659      	mov	r1, fp
 8009330:	f7f6 ffac 	bl	800028c <__adddf3>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4640      	mov	r0, r8
 800933a:	4649      	mov	r1, r9
 800933c:	f7f7 fbec 	bl	8000b18 <__aeabi_dcmpgt>
 8009340:	2800      	cmp	r0, #0
 8009342:	d173      	bne.n	800942c <_dtoa_r+0x6c4>
 8009344:	4652      	mov	r2, sl
 8009346:	465b      	mov	r3, fp
 8009348:	4913      	ldr	r1, [pc, #76]	; (8009398 <_dtoa_r+0x630>)
 800934a:	2000      	movs	r0, #0
 800934c:	f7f6 ff9c 	bl	8000288 <__aeabi_dsub>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800935c:	2800      	cmp	r0, #0
 800935e:	f43f af35 	beq.w	80091cc <_dtoa_r+0x464>
 8009362:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009364:	1e6b      	subs	r3, r5, #1
 8009366:	930f      	str	r3, [sp, #60]	; 0x3c
 8009368:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800936c:	2b30      	cmp	r3, #48	; 0x30
 800936e:	d0f8      	beq.n	8009362 <_dtoa_r+0x5fa>
 8009370:	9700      	str	r7, [sp, #0]
 8009372:	e049      	b.n	8009408 <_dtoa_r+0x6a0>
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <_dtoa_r+0x624>)
 8009376:	f7f7 f93f 	bl	80005f8 <__aeabi_dmul>
 800937a:	4680      	mov	r8, r0
 800937c:	4689      	mov	r9, r1
 800937e:	e7bd      	b.n	80092fc <_dtoa_r+0x594>
 8009380:	0800bdb8 	.word	0x0800bdb8
 8009384:	0800bd90 	.word	0x0800bd90
 8009388:	3ff00000 	.word	0x3ff00000
 800938c:	40240000 	.word	0x40240000
 8009390:	401c0000 	.word	0x401c0000
 8009394:	40140000 	.word	0x40140000
 8009398:	3fe00000 	.word	0x3fe00000
 800939c:	9d01      	ldr	r5, [sp, #4]
 800939e:	4656      	mov	r6, sl
 80093a0:	465f      	mov	r7, fp
 80093a2:	4642      	mov	r2, r8
 80093a4:	464b      	mov	r3, r9
 80093a6:	4630      	mov	r0, r6
 80093a8:	4639      	mov	r1, r7
 80093aa:	f7f7 fa4f 	bl	800084c <__aeabi_ddiv>
 80093ae:	f7f7 fbd3 	bl	8000b58 <__aeabi_d2iz>
 80093b2:	4682      	mov	sl, r0
 80093b4:	f7f7 f8b6 	bl	8000524 <__aeabi_i2d>
 80093b8:	4642      	mov	r2, r8
 80093ba:	464b      	mov	r3, r9
 80093bc:	f7f7 f91c 	bl	80005f8 <__aeabi_dmul>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4630      	mov	r0, r6
 80093c6:	4639      	mov	r1, r7
 80093c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80093cc:	f7f6 ff5c 	bl	8000288 <__aeabi_dsub>
 80093d0:	f805 6b01 	strb.w	r6, [r5], #1
 80093d4:	9e01      	ldr	r6, [sp, #4]
 80093d6:	9f03      	ldr	r7, [sp, #12]
 80093d8:	1bae      	subs	r6, r5, r6
 80093da:	42b7      	cmp	r7, r6
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	d135      	bne.n	800944e <_dtoa_r+0x6e6>
 80093e2:	f7f6 ff53 	bl	800028c <__adddf3>
 80093e6:	4642      	mov	r2, r8
 80093e8:	464b      	mov	r3, r9
 80093ea:	4606      	mov	r6, r0
 80093ec:	460f      	mov	r7, r1
 80093ee:	f7f7 fb93 	bl	8000b18 <__aeabi_dcmpgt>
 80093f2:	b9d0      	cbnz	r0, 800942a <_dtoa_r+0x6c2>
 80093f4:	4642      	mov	r2, r8
 80093f6:	464b      	mov	r3, r9
 80093f8:	4630      	mov	r0, r6
 80093fa:	4639      	mov	r1, r7
 80093fc:	f7f7 fb64 	bl	8000ac8 <__aeabi_dcmpeq>
 8009400:	b110      	cbz	r0, 8009408 <_dtoa_r+0x6a0>
 8009402:	f01a 0f01 	tst.w	sl, #1
 8009406:	d110      	bne.n	800942a <_dtoa_r+0x6c2>
 8009408:	4620      	mov	r0, r4
 800940a:	ee18 1a10 	vmov	r1, s16
 800940e:	f001 f893 	bl	800a538 <_Bfree>
 8009412:	2300      	movs	r3, #0
 8009414:	9800      	ldr	r0, [sp, #0]
 8009416:	702b      	strb	r3, [r5, #0]
 8009418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800941a:	3001      	adds	r0, #1
 800941c:	6018      	str	r0, [r3, #0]
 800941e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009420:	2b00      	cmp	r3, #0
 8009422:	f43f acf1 	beq.w	8008e08 <_dtoa_r+0xa0>
 8009426:	601d      	str	r5, [r3, #0]
 8009428:	e4ee      	b.n	8008e08 <_dtoa_r+0xa0>
 800942a:	9f00      	ldr	r7, [sp, #0]
 800942c:	462b      	mov	r3, r5
 800942e:	461d      	mov	r5, r3
 8009430:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009434:	2a39      	cmp	r2, #57	; 0x39
 8009436:	d106      	bne.n	8009446 <_dtoa_r+0x6de>
 8009438:	9a01      	ldr	r2, [sp, #4]
 800943a:	429a      	cmp	r2, r3
 800943c:	d1f7      	bne.n	800942e <_dtoa_r+0x6c6>
 800943e:	9901      	ldr	r1, [sp, #4]
 8009440:	2230      	movs	r2, #48	; 0x30
 8009442:	3701      	adds	r7, #1
 8009444:	700a      	strb	r2, [r1, #0]
 8009446:	781a      	ldrb	r2, [r3, #0]
 8009448:	3201      	adds	r2, #1
 800944a:	701a      	strb	r2, [r3, #0]
 800944c:	e790      	b.n	8009370 <_dtoa_r+0x608>
 800944e:	4ba6      	ldr	r3, [pc, #664]	; (80096e8 <_dtoa_r+0x980>)
 8009450:	2200      	movs	r2, #0
 8009452:	f7f7 f8d1 	bl	80005f8 <__aeabi_dmul>
 8009456:	2200      	movs	r2, #0
 8009458:	2300      	movs	r3, #0
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	f7f7 fb33 	bl	8000ac8 <__aeabi_dcmpeq>
 8009462:	2800      	cmp	r0, #0
 8009464:	d09d      	beq.n	80093a2 <_dtoa_r+0x63a>
 8009466:	e7cf      	b.n	8009408 <_dtoa_r+0x6a0>
 8009468:	9a08      	ldr	r2, [sp, #32]
 800946a:	2a00      	cmp	r2, #0
 800946c:	f000 80d7 	beq.w	800961e <_dtoa_r+0x8b6>
 8009470:	9a06      	ldr	r2, [sp, #24]
 8009472:	2a01      	cmp	r2, #1
 8009474:	f300 80ba 	bgt.w	80095ec <_dtoa_r+0x884>
 8009478:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800947a:	2a00      	cmp	r2, #0
 800947c:	f000 80b2 	beq.w	80095e4 <_dtoa_r+0x87c>
 8009480:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009484:	9e07      	ldr	r6, [sp, #28]
 8009486:	9d04      	ldr	r5, [sp, #16]
 8009488:	9a04      	ldr	r2, [sp, #16]
 800948a:	441a      	add	r2, r3
 800948c:	9204      	str	r2, [sp, #16]
 800948e:	9a05      	ldr	r2, [sp, #20]
 8009490:	2101      	movs	r1, #1
 8009492:	441a      	add	r2, r3
 8009494:	4620      	mov	r0, r4
 8009496:	9205      	str	r2, [sp, #20]
 8009498:	f001 f950 	bl	800a73c <__i2b>
 800949c:	4607      	mov	r7, r0
 800949e:	2d00      	cmp	r5, #0
 80094a0:	dd0c      	ble.n	80094bc <_dtoa_r+0x754>
 80094a2:	9b05      	ldr	r3, [sp, #20]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	dd09      	ble.n	80094bc <_dtoa_r+0x754>
 80094a8:	42ab      	cmp	r3, r5
 80094aa:	9a04      	ldr	r2, [sp, #16]
 80094ac:	bfa8      	it	ge
 80094ae:	462b      	movge	r3, r5
 80094b0:	1ad2      	subs	r2, r2, r3
 80094b2:	9204      	str	r2, [sp, #16]
 80094b4:	9a05      	ldr	r2, [sp, #20]
 80094b6:	1aed      	subs	r5, r5, r3
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	9305      	str	r3, [sp, #20]
 80094bc:	9b07      	ldr	r3, [sp, #28]
 80094be:	b31b      	cbz	r3, 8009508 <_dtoa_r+0x7a0>
 80094c0:	9b08      	ldr	r3, [sp, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 80af 	beq.w	8009626 <_dtoa_r+0x8be>
 80094c8:	2e00      	cmp	r6, #0
 80094ca:	dd13      	ble.n	80094f4 <_dtoa_r+0x78c>
 80094cc:	4639      	mov	r1, r7
 80094ce:	4632      	mov	r2, r6
 80094d0:	4620      	mov	r0, r4
 80094d2:	f001 f9f3 	bl	800a8bc <__pow5mult>
 80094d6:	ee18 2a10 	vmov	r2, s16
 80094da:	4601      	mov	r1, r0
 80094dc:	4607      	mov	r7, r0
 80094de:	4620      	mov	r0, r4
 80094e0:	f001 f942 	bl	800a768 <__multiply>
 80094e4:	ee18 1a10 	vmov	r1, s16
 80094e8:	4680      	mov	r8, r0
 80094ea:	4620      	mov	r0, r4
 80094ec:	f001 f824 	bl	800a538 <_Bfree>
 80094f0:	ee08 8a10 	vmov	s16, r8
 80094f4:	9b07      	ldr	r3, [sp, #28]
 80094f6:	1b9a      	subs	r2, r3, r6
 80094f8:	d006      	beq.n	8009508 <_dtoa_r+0x7a0>
 80094fa:	ee18 1a10 	vmov	r1, s16
 80094fe:	4620      	mov	r0, r4
 8009500:	f001 f9dc 	bl	800a8bc <__pow5mult>
 8009504:	ee08 0a10 	vmov	s16, r0
 8009508:	2101      	movs	r1, #1
 800950a:	4620      	mov	r0, r4
 800950c:	f001 f916 	bl	800a73c <__i2b>
 8009510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009512:	2b00      	cmp	r3, #0
 8009514:	4606      	mov	r6, r0
 8009516:	f340 8088 	ble.w	800962a <_dtoa_r+0x8c2>
 800951a:	461a      	mov	r2, r3
 800951c:	4601      	mov	r1, r0
 800951e:	4620      	mov	r0, r4
 8009520:	f001 f9cc 	bl	800a8bc <__pow5mult>
 8009524:	9b06      	ldr	r3, [sp, #24]
 8009526:	2b01      	cmp	r3, #1
 8009528:	4606      	mov	r6, r0
 800952a:	f340 8081 	ble.w	8009630 <_dtoa_r+0x8c8>
 800952e:	f04f 0800 	mov.w	r8, #0
 8009532:	6933      	ldr	r3, [r6, #16]
 8009534:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009538:	6918      	ldr	r0, [r3, #16]
 800953a:	f001 f8af 	bl	800a69c <__hi0bits>
 800953e:	f1c0 0020 	rsb	r0, r0, #32
 8009542:	9b05      	ldr	r3, [sp, #20]
 8009544:	4418      	add	r0, r3
 8009546:	f010 001f 	ands.w	r0, r0, #31
 800954a:	f000 8092 	beq.w	8009672 <_dtoa_r+0x90a>
 800954e:	f1c0 0320 	rsb	r3, r0, #32
 8009552:	2b04      	cmp	r3, #4
 8009554:	f340 808a 	ble.w	800966c <_dtoa_r+0x904>
 8009558:	f1c0 001c 	rsb	r0, r0, #28
 800955c:	9b04      	ldr	r3, [sp, #16]
 800955e:	4403      	add	r3, r0
 8009560:	9304      	str	r3, [sp, #16]
 8009562:	9b05      	ldr	r3, [sp, #20]
 8009564:	4403      	add	r3, r0
 8009566:	4405      	add	r5, r0
 8009568:	9305      	str	r3, [sp, #20]
 800956a:	9b04      	ldr	r3, [sp, #16]
 800956c:	2b00      	cmp	r3, #0
 800956e:	dd07      	ble.n	8009580 <_dtoa_r+0x818>
 8009570:	ee18 1a10 	vmov	r1, s16
 8009574:	461a      	mov	r2, r3
 8009576:	4620      	mov	r0, r4
 8009578:	f001 f9fa 	bl	800a970 <__lshift>
 800957c:	ee08 0a10 	vmov	s16, r0
 8009580:	9b05      	ldr	r3, [sp, #20]
 8009582:	2b00      	cmp	r3, #0
 8009584:	dd05      	ble.n	8009592 <_dtoa_r+0x82a>
 8009586:	4631      	mov	r1, r6
 8009588:	461a      	mov	r2, r3
 800958a:	4620      	mov	r0, r4
 800958c:	f001 f9f0 	bl	800a970 <__lshift>
 8009590:	4606      	mov	r6, r0
 8009592:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009594:	2b00      	cmp	r3, #0
 8009596:	d06e      	beq.n	8009676 <_dtoa_r+0x90e>
 8009598:	ee18 0a10 	vmov	r0, s16
 800959c:	4631      	mov	r1, r6
 800959e:	f001 fa57 	bl	800aa50 <__mcmp>
 80095a2:	2800      	cmp	r0, #0
 80095a4:	da67      	bge.n	8009676 <_dtoa_r+0x90e>
 80095a6:	9b00      	ldr	r3, [sp, #0]
 80095a8:	3b01      	subs	r3, #1
 80095aa:	ee18 1a10 	vmov	r1, s16
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	220a      	movs	r2, #10
 80095b2:	2300      	movs	r3, #0
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 ffe1 	bl	800a57c <__multadd>
 80095ba:	9b08      	ldr	r3, [sp, #32]
 80095bc:	ee08 0a10 	vmov	s16, r0
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 81b1 	beq.w	8009928 <_dtoa_r+0xbc0>
 80095c6:	2300      	movs	r3, #0
 80095c8:	4639      	mov	r1, r7
 80095ca:	220a      	movs	r2, #10
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 ffd5 	bl	800a57c <__multadd>
 80095d2:	9b02      	ldr	r3, [sp, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	4607      	mov	r7, r0
 80095d8:	f300 808e 	bgt.w	80096f8 <_dtoa_r+0x990>
 80095dc:	9b06      	ldr	r3, [sp, #24]
 80095de:	2b02      	cmp	r3, #2
 80095e0:	dc51      	bgt.n	8009686 <_dtoa_r+0x91e>
 80095e2:	e089      	b.n	80096f8 <_dtoa_r+0x990>
 80095e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095ea:	e74b      	b.n	8009484 <_dtoa_r+0x71c>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	1e5e      	subs	r6, r3, #1
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	42b3      	cmp	r3, r6
 80095f4:	bfbf      	itttt	lt
 80095f6:	9b07      	ldrlt	r3, [sp, #28]
 80095f8:	9607      	strlt	r6, [sp, #28]
 80095fa:	1af2      	sublt	r2, r6, r3
 80095fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095fe:	bfb6      	itet	lt
 8009600:	189b      	addlt	r3, r3, r2
 8009602:	1b9e      	subge	r6, r3, r6
 8009604:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009606:	9b03      	ldr	r3, [sp, #12]
 8009608:	bfb8      	it	lt
 800960a:	2600      	movlt	r6, #0
 800960c:	2b00      	cmp	r3, #0
 800960e:	bfb7      	itett	lt
 8009610:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009614:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009618:	1a9d      	sublt	r5, r3, r2
 800961a:	2300      	movlt	r3, #0
 800961c:	e734      	b.n	8009488 <_dtoa_r+0x720>
 800961e:	9e07      	ldr	r6, [sp, #28]
 8009620:	9d04      	ldr	r5, [sp, #16]
 8009622:	9f08      	ldr	r7, [sp, #32]
 8009624:	e73b      	b.n	800949e <_dtoa_r+0x736>
 8009626:	9a07      	ldr	r2, [sp, #28]
 8009628:	e767      	b.n	80094fa <_dtoa_r+0x792>
 800962a:	9b06      	ldr	r3, [sp, #24]
 800962c:	2b01      	cmp	r3, #1
 800962e:	dc18      	bgt.n	8009662 <_dtoa_r+0x8fa>
 8009630:	f1ba 0f00 	cmp.w	sl, #0
 8009634:	d115      	bne.n	8009662 <_dtoa_r+0x8fa>
 8009636:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800963a:	b993      	cbnz	r3, 8009662 <_dtoa_r+0x8fa>
 800963c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009640:	0d1b      	lsrs	r3, r3, #20
 8009642:	051b      	lsls	r3, r3, #20
 8009644:	b183      	cbz	r3, 8009668 <_dtoa_r+0x900>
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	3301      	adds	r3, #1
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	3301      	adds	r3, #1
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	f04f 0801 	mov.w	r8, #1
 8009656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	f47f af6a 	bne.w	8009532 <_dtoa_r+0x7ca>
 800965e:	2001      	movs	r0, #1
 8009660:	e76f      	b.n	8009542 <_dtoa_r+0x7da>
 8009662:	f04f 0800 	mov.w	r8, #0
 8009666:	e7f6      	b.n	8009656 <_dtoa_r+0x8ee>
 8009668:	4698      	mov	r8, r3
 800966a:	e7f4      	b.n	8009656 <_dtoa_r+0x8ee>
 800966c:	f43f af7d 	beq.w	800956a <_dtoa_r+0x802>
 8009670:	4618      	mov	r0, r3
 8009672:	301c      	adds	r0, #28
 8009674:	e772      	b.n	800955c <_dtoa_r+0x7f4>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dc37      	bgt.n	80096ec <_dtoa_r+0x984>
 800967c:	9b06      	ldr	r3, [sp, #24]
 800967e:	2b02      	cmp	r3, #2
 8009680:	dd34      	ble.n	80096ec <_dtoa_r+0x984>
 8009682:	9b03      	ldr	r3, [sp, #12]
 8009684:	9302      	str	r3, [sp, #8]
 8009686:	9b02      	ldr	r3, [sp, #8]
 8009688:	b96b      	cbnz	r3, 80096a6 <_dtoa_r+0x93e>
 800968a:	4631      	mov	r1, r6
 800968c:	2205      	movs	r2, #5
 800968e:	4620      	mov	r0, r4
 8009690:	f000 ff74 	bl	800a57c <__multadd>
 8009694:	4601      	mov	r1, r0
 8009696:	4606      	mov	r6, r0
 8009698:	ee18 0a10 	vmov	r0, s16
 800969c:	f001 f9d8 	bl	800aa50 <__mcmp>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f73f adbb 	bgt.w	800921c <_dtoa_r+0x4b4>
 80096a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a8:	9d01      	ldr	r5, [sp, #4]
 80096aa:	43db      	mvns	r3, r3
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	f04f 0800 	mov.w	r8, #0
 80096b2:	4631      	mov	r1, r6
 80096b4:	4620      	mov	r0, r4
 80096b6:	f000 ff3f 	bl	800a538 <_Bfree>
 80096ba:	2f00      	cmp	r7, #0
 80096bc:	f43f aea4 	beq.w	8009408 <_dtoa_r+0x6a0>
 80096c0:	f1b8 0f00 	cmp.w	r8, #0
 80096c4:	d005      	beq.n	80096d2 <_dtoa_r+0x96a>
 80096c6:	45b8      	cmp	r8, r7
 80096c8:	d003      	beq.n	80096d2 <_dtoa_r+0x96a>
 80096ca:	4641      	mov	r1, r8
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 ff33 	bl	800a538 <_Bfree>
 80096d2:	4639      	mov	r1, r7
 80096d4:	4620      	mov	r0, r4
 80096d6:	f000 ff2f 	bl	800a538 <_Bfree>
 80096da:	e695      	b.n	8009408 <_dtoa_r+0x6a0>
 80096dc:	2600      	movs	r6, #0
 80096de:	4637      	mov	r7, r6
 80096e0:	e7e1      	b.n	80096a6 <_dtoa_r+0x93e>
 80096e2:	9700      	str	r7, [sp, #0]
 80096e4:	4637      	mov	r7, r6
 80096e6:	e599      	b.n	800921c <_dtoa_r+0x4b4>
 80096e8:	40240000 	.word	0x40240000
 80096ec:	9b08      	ldr	r3, [sp, #32]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 80ca 	beq.w	8009888 <_dtoa_r+0xb20>
 80096f4:	9b03      	ldr	r3, [sp, #12]
 80096f6:	9302      	str	r3, [sp, #8]
 80096f8:	2d00      	cmp	r5, #0
 80096fa:	dd05      	ble.n	8009708 <_dtoa_r+0x9a0>
 80096fc:	4639      	mov	r1, r7
 80096fe:	462a      	mov	r2, r5
 8009700:	4620      	mov	r0, r4
 8009702:	f001 f935 	bl	800a970 <__lshift>
 8009706:	4607      	mov	r7, r0
 8009708:	f1b8 0f00 	cmp.w	r8, #0
 800970c:	d05b      	beq.n	80097c6 <_dtoa_r+0xa5e>
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	4620      	mov	r0, r4
 8009712:	f000 fed1 	bl	800a4b8 <_Balloc>
 8009716:	4605      	mov	r5, r0
 8009718:	b928      	cbnz	r0, 8009726 <_dtoa_r+0x9be>
 800971a:	4b87      	ldr	r3, [pc, #540]	; (8009938 <_dtoa_r+0xbd0>)
 800971c:	4602      	mov	r2, r0
 800971e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009722:	f7ff bb3b 	b.w	8008d9c <_dtoa_r+0x34>
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	3202      	adds	r2, #2
 800972a:	0092      	lsls	r2, r2, #2
 800972c:	f107 010c 	add.w	r1, r7, #12
 8009730:	300c      	adds	r0, #12
 8009732:	f000 feb3 	bl	800a49c <memcpy>
 8009736:	2201      	movs	r2, #1
 8009738:	4629      	mov	r1, r5
 800973a:	4620      	mov	r0, r4
 800973c:	f001 f918 	bl	800a970 <__lshift>
 8009740:	9b01      	ldr	r3, [sp, #4]
 8009742:	f103 0901 	add.w	r9, r3, #1
 8009746:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800974a:	4413      	add	r3, r2
 800974c:	9305      	str	r3, [sp, #20]
 800974e:	f00a 0301 	and.w	r3, sl, #1
 8009752:	46b8      	mov	r8, r7
 8009754:	9304      	str	r3, [sp, #16]
 8009756:	4607      	mov	r7, r0
 8009758:	4631      	mov	r1, r6
 800975a:	ee18 0a10 	vmov	r0, s16
 800975e:	f7ff fa75 	bl	8008c4c <quorem>
 8009762:	4641      	mov	r1, r8
 8009764:	9002      	str	r0, [sp, #8]
 8009766:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800976a:	ee18 0a10 	vmov	r0, s16
 800976e:	f001 f96f 	bl	800aa50 <__mcmp>
 8009772:	463a      	mov	r2, r7
 8009774:	9003      	str	r0, [sp, #12]
 8009776:	4631      	mov	r1, r6
 8009778:	4620      	mov	r0, r4
 800977a:	f001 f985 	bl	800aa88 <__mdiff>
 800977e:	68c2      	ldr	r2, [r0, #12]
 8009780:	f109 3bff 	add.w	fp, r9, #4294967295
 8009784:	4605      	mov	r5, r0
 8009786:	bb02      	cbnz	r2, 80097ca <_dtoa_r+0xa62>
 8009788:	4601      	mov	r1, r0
 800978a:	ee18 0a10 	vmov	r0, s16
 800978e:	f001 f95f 	bl	800aa50 <__mcmp>
 8009792:	4602      	mov	r2, r0
 8009794:	4629      	mov	r1, r5
 8009796:	4620      	mov	r0, r4
 8009798:	9207      	str	r2, [sp, #28]
 800979a:	f000 fecd 	bl	800a538 <_Bfree>
 800979e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80097a2:	ea43 0102 	orr.w	r1, r3, r2
 80097a6:	9b04      	ldr	r3, [sp, #16]
 80097a8:	430b      	orrs	r3, r1
 80097aa:	464d      	mov	r5, r9
 80097ac:	d10f      	bne.n	80097ce <_dtoa_r+0xa66>
 80097ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80097b2:	d02a      	beq.n	800980a <_dtoa_r+0xaa2>
 80097b4:	9b03      	ldr	r3, [sp, #12]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	dd02      	ble.n	80097c0 <_dtoa_r+0xa58>
 80097ba:	9b02      	ldr	r3, [sp, #8]
 80097bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80097c0:	f88b a000 	strb.w	sl, [fp]
 80097c4:	e775      	b.n	80096b2 <_dtoa_r+0x94a>
 80097c6:	4638      	mov	r0, r7
 80097c8:	e7ba      	b.n	8009740 <_dtoa_r+0x9d8>
 80097ca:	2201      	movs	r2, #1
 80097cc:	e7e2      	b.n	8009794 <_dtoa_r+0xa2c>
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	db04      	blt.n	80097de <_dtoa_r+0xa76>
 80097d4:	9906      	ldr	r1, [sp, #24]
 80097d6:	430b      	orrs	r3, r1
 80097d8:	9904      	ldr	r1, [sp, #16]
 80097da:	430b      	orrs	r3, r1
 80097dc:	d122      	bne.n	8009824 <_dtoa_r+0xabc>
 80097de:	2a00      	cmp	r2, #0
 80097e0:	ddee      	ble.n	80097c0 <_dtoa_r+0xa58>
 80097e2:	ee18 1a10 	vmov	r1, s16
 80097e6:	2201      	movs	r2, #1
 80097e8:	4620      	mov	r0, r4
 80097ea:	f001 f8c1 	bl	800a970 <__lshift>
 80097ee:	4631      	mov	r1, r6
 80097f0:	ee08 0a10 	vmov	s16, r0
 80097f4:	f001 f92c 	bl	800aa50 <__mcmp>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	dc03      	bgt.n	8009804 <_dtoa_r+0xa9c>
 80097fc:	d1e0      	bne.n	80097c0 <_dtoa_r+0xa58>
 80097fe:	f01a 0f01 	tst.w	sl, #1
 8009802:	d0dd      	beq.n	80097c0 <_dtoa_r+0xa58>
 8009804:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009808:	d1d7      	bne.n	80097ba <_dtoa_r+0xa52>
 800980a:	2339      	movs	r3, #57	; 0x39
 800980c:	f88b 3000 	strb.w	r3, [fp]
 8009810:	462b      	mov	r3, r5
 8009812:	461d      	mov	r5, r3
 8009814:	3b01      	subs	r3, #1
 8009816:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800981a:	2a39      	cmp	r2, #57	; 0x39
 800981c:	d071      	beq.n	8009902 <_dtoa_r+0xb9a>
 800981e:	3201      	adds	r2, #1
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	e746      	b.n	80096b2 <_dtoa_r+0x94a>
 8009824:	2a00      	cmp	r2, #0
 8009826:	dd07      	ble.n	8009838 <_dtoa_r+0xad0>
 8009828:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800982c:	d0ed      	beq.n	800980a <_dtoa_r+0xaa2>
 800982e:	f10a 0301 	add.w	r3, sl, #1
 8009832:	f88b 3000 	strb.w	r3, [fp]
 8009836:	e73c      	b.n	80096b2 <_dtoa_r+0x94a>
 8009838:	9b05      	ldr	r3, [sp, #20]
 800983a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800983e:	4599      	cmp	r9, r3
 8009840:	d047      	beq.n	80098d2 <_dtoa_r+0xb6a>
 8009842:	ee18 1a10 	vmov	r1, s16
 8009846:	2300      	movs	r3, #0
 8009848:	220a      	movs	r2, #10
 800984a:	4620      	mov	r0, r4
 800984c:	f000 fe96 	bl	800a57c <__multadd>
 8009850:	45b8      	cmp	r8, r7
 8009852:	ee08 0a10 	vmov	s16, r0
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	f04f 020a 	mov.w	r2, #10
 800985e:	4641      	mov	r1, r8
 8009860:	4620      	mov	r0, r4
 8009862:	d106      	bne.n	8009872 <_dtoa_r+0xb0a>
 8009864:	f000 fe8a 	bl	800a57c <__multadd>
 8009868:	4680      	mov	r8, r0
 800986a:	4607      	mov	r7, r0
 800986c:	f109 0901 	add.w	r9, r9, #1
 8009870:	e772      	b.n	8009758 <_dtoa_r+0x9f0>
 8009872:	f000 fe83 	bl	800a57c <__multadd>
 8009876:	4639      	mov	r1, r7
 8009878:	4680      	mov	r8, r0
 800987a:	2300      	movs	r3, #0
 800987c:	220a      	movs	r2, #10
 800987e:	4620      	mov	r0, r4
 8009880:	f000 fe7c 	bl	800a57c <__multadd>
 8009884:	4607      	mov	r7, r0
 8009886:	e7f1      	b.n	800986c <_dtoa_r+0xb04>
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	9302      	str	r3, [sp, #8]
 800988c:	9d01      	ldr	r5, [sp, #4]
 800988e:	ee18 0a10 	vmov	r0, s16
 8009892:	4631      	mov	r1, r6
 8009894:	f7ff f9da 	bl	8008c4c <quorem>
 8009898:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800989c:	9b01      	ldr	r3, [sp, #4]
 800989e:	f805 ab01 	strb.w	sl, [r5], #1
 80098a2:	1aea      	subs	r2, r5, r3
 80098a4:	9b02      	ldr	r3, [sp, #8]
 80098a6:	4293      	cmp	r3, r2
 80098a8:	dd09      	ble.n	80098be <_dtoa_r+0xb56>
 80098aa:	ee18 1a10 	vmov	r1, s16
 80098ae:	2300      	movs	r3, #0
 80098b0:	220a      	movs	r2, #10
 80098b2:	4620      	mov	r0, r4
 80098b4:	f000 fe62 	bl	800a57c <__multadd>
 80098b8:	ee08 0a10 	vmov	s16, r0
 80098bc:	e7e7      	b.n	800988e <_dtoa_r+0xb26>
 80098be:	9b02      	ldr	r3, [sp, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bfc8      	it	gt
 80098c4:	461d      	movgt	r5, r3
 80098c6:	9b01      	ldr	r3, [sp, #4]
 80098c8:	bfd8      	it	le
 80098ca:	2501      	movle	r5, #1
 80098cc:	441d      	add	r5, r3
 80098ce:	f04f 0800 	mov.w	r8, #0
 80098d2:	ee18 1a10 	vmov	r1, s16
 80098d6:	2201      	movs	r2, #1
 80098d8:	4620      	mov	r0, r4
 80098da:	f001 f849 	bl	800a970 <__lshift>
 80098de:	4631      	mov	r1, r6
 80098e0:	ee08 0a10 	vmov	s16, r0
 80098e4:	f001 f8b4 	bl	800aa50 <__mcmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	dc91      	bgt.n	8009810 <_dtoa_r+0xaa8>
 80098ec:	d102      	bne.n	80098f4 <_dtoa_r+0xb8c>
 80098ee:	f01a 0f01 	tst.w	sl, #1
 80098f2:	d18d      	bne.n	8009810 <_dtoa_r+0xaa8>
 80098f4:	462b      	mov	r3, r5
 80098f6:	461d      	mov	r5, r3
 80098f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098fc:	2a30      	cmp	r2, #48	; 0x30
 80098fe:	d0fa      	beq.n	80098f6 <_dtoa_r+0xb8e>
 8009900:	e6d7      	b.n	80096b2 <_dtoa_r+0x94a>
 8009902:	9a01      	ldr	r2, [sp, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d184      	bne.n	8009812 <_dtoa_r+0xaaa>
 8009908:	9b00      	ldr	r3, [sp, #0]
 800990a:	3301      	adds	r3, #1
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	2331      	movs	r3, #49	; 0x31
 8009910:	7013      	strb	r3, [r2, #0]
 8009912:	e6ce      	b.n	80096b2 <_dtoa_r+0x94a>
 8009914:	4b09      	ldr	r3, [pc, #36]	; (800993c <_dtoa_r+0xbd4>)
 8009916:	f7ff ba95 	b.w	8008e44 <_dtoa_r+0xdc>
 800991a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800991c:	2b00      	cmp	r3, #0
 800991e:	f47f aa6e 	bne.w	8008dfe <_dtoa_r+0x96>
 8009922:	4b07      	ldr	r3, [pc, #28]	; (8009940 <_dtoa_r+0xbd8>)
 8009924:	f7ff ba8e 	b.w	8008e44 <_dtoa_r+0xdc>
 8009928:	9b02      	ldr	r3, [sp, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	dcae      	bgt.n	800988c <_dtoa_r+0xb24>
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	2b02      	cmp	r3, #2
 8009932:	f73f aea8 	bgt.w	8009686 <_dtoa_r+0x91e>
 8009936:	e7a9      	b.n	800988c <_dtoa_r+0xb24>
 8009938:	0800bc40 	.word	0x0800bc40
 800993c:	0800ba40 	.word	0x0800ba40
 8009940:	0800bbc1 	.word	0x0800bbc1

08009944 <__sflush_r>:
 8009944:	898a      	ldrh	r2, [r1, #12]
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	0710      	lsls	r0, r2, #28
 800994e:	460c      	mov	r4, r1
 8009950:	d458      	bmi.n	8009a04 <__sflush_r+0xc0>
 8009952:	684b      	ldr	r3, [r1, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dc05      	bgt.n	8009964 <__sflush_r+0x20>
 8009958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	dc02      	bgt.n	8009964 <__sflush_r+0x20>
 800995e:	2000      	movs	r0, #0
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009966:	2e00      	cmp	r6, #0
 8009968:	d0f9      	beq.n	800995e <__sflush_r+0x1a>
 800996a:	2300      	movs	r3, #0
 800996c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009970:	682f      	ldr	r7, [r5, #0]
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	d032      	beq.n	80099dc <__sflush_r+0x98>
 8009976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	075a      	lsls	r2, r3, #29
 800997c:	d505      	bpl.n	800998a <__sflush_r+0x46>
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	1ac0      	subs	r0, r0, r3
 8009982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009984:	b10b      	cbz	r3, 800998a <__sflush_r+0x46>
 8009986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009988:	1ac0      	subs	r0, r0, r3
 800998a:	2300      	movs	r3, #0
 800998c:	4602      	mov	r2, r0
 800998e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	4628      	mov	r0, r5
 8009994:	47b0      	blx	r6
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	d106      	bne.n	80099aa <__sflush_r+0x66>
 800999c:	6829      	ldr	r1, [r5, #0]
 800999e:	291d      	cmp	r1, #29
 80099a0:	d82c      	bhi.n	80099fc <__sflush_r+0xb8>
 80099a2:	4a2a      	ldr	r2, [pc, #168]	; (8009a4c <__sflush_r+0x108>)
 80099a4:	40ca      	lsrs	r2, r1
 80099a6:	07d6      	lsls	r6, r2, #31
 80099a8:	d528      	bpl.n	80099fc <__sflush_r+0xb8>
 80099aa:	2200      	movs	r2, #0
 80099ac:	6062      	str	r2, [r4, #4]
 80099ae:	04d9      	lsls	r1, r3, #19
 80099b0:	6922      	ldr	r2, [r4, #16]
 80099b2:	6022      	str	r2, [r4, #0]
 80099b4:	d504      	bpl.n	80099c0 <__sflush_r+0x7c>
 80099b6:	1c42      	adds	r2, r0, #1
 80099b8:	d101      	bne.n	80099be <__sflush_r+0x7a>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b903      	cbnz	r3, 80099c0 <__sflush_r+0x7c>
 80099be:	6560      	str	r0, [r4, #84]	; 0x54
 80099c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099c2:	602f      	str	r7, [r5, #0]
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d0ca      	beq.n	800995e <__sflush_r+0x1a>
 80099c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099cc:	4299      	cmp	r1, r3
 80099ce:	d002      	beq.n	80099d6 <__sflush_r+0x92>
 80099d0:	4628      	mov	r0, r5
 80099d2:	f001 fa49 	bl	800ae68 <_free_r>
 80099d6:	2000      	movs	r0, #0
 80099d8:	6360      	str	r0, [r4, #52]	; 0x34
 80099da:	e7c1      	b.n	8009960 <__sflush_r+0x1c>
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	2301      	movs	r3, #1
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b0      	blx	r6
 80099e4:	1c41      	adds	r1, r0, #1
 80099e6:	d1c7      	bne.n	8009978 <__sflush_r+0x34>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0c4      	beq.n	8009978 <__sflush_r+0x34>
 80099ee:	2b1d      	cmp	r3, #29
 80099f0:	d001      	beq.n	80099f6 <__sflush_r+0xb2>
 80099f2:	2b16      	cmp	r3, #22
 80099f4:	d101      	bne.n	80099fa <__sflush_r+0xb6>
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	e7b1      	b.n	800995e <__sflush_r+0x1a>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7ad      	b.n	8009960 <__sflush_r+0x1c>
 8009a04:	690f      	ldr	r7, [r1, #16]
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	d0a9      	beq.n	800995e <__sflush_r+0x1a>
 8009a0a:	0793      	lsls	r3, r2, #30
 8009a0c:	680e      	ldr	r6, [r1, #0]
 8009a0e:	bf08      	it	eq
 8009a10:	694b      	ldreq	r3, [r1, #20]
 8009a12:	600f      	str	r7, [r1, #0]
 8009a14:	bf18      	it	ne
 8009a16:	2300      	movne	r3, #0
 8009a18:	eba6 0807 	sub.w	r8, r6, r7
 8009a1c:	608b      	str	r3, [r1, #8]
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	dd9c      	ble.n	800995e <__sflush_r+0x1a>
 8009a24:	6a21      	ldr	r1, [r4, #32]
 8009a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a28:	4643      	mov	r3, r8
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b0      	blx	r6
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dc06      	bgt.n	8009a42 <__sflush_r+0xfe>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e78e      	b.n	8009960 <__sflush_r+0x1c>
 8009a42:	4407      	add	r7, r0
 8009a44:	eba8 0800 	sub.w	r8, r8, r0
 8009a48:	e7e9      	b.n	8009a1e <__sflush_r+0xda>
 8009a4a:	bf00      	nop
 8009a4c:	20400001 	.word	0x20400001

08009a50 <_fflush_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	690b      	ldr	r3, [r1, #16]
 8009a54:	4605      	mov	r5, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b913      	cbnz	r3, 8009a60 <_fflush_r+0x10>
 8009a5a:	2500      	movs	r5, #0
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	b118      	cbz	r0, 8009a6a <_fflush_r+0x1a>
 8009a62:	6983      	ldr	r3, [r0, #24]
 8009a64:	b90b      	cbnz	r3, 8009a6a <_fflush_r+0x1a>
 8009a66:	f000 f887 	bl	8009b78 <__sinit>
 8009a6a:	4b14      	ldr	r3, [pc, #80]	; (8009abc <_fflush_r+0x6c>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d11b      	bne.n	8009aa8 <_fflush_r+0x58>
 8009a70:	686c      	ldr	r4, [r5, #4]
 8009a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0ef      	beq.n	8009a5a <_fflush_r+0xa>
 8009a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a7c:	07d0      	lsls	r0, r2, #31
 8009a7e:	d404      	bmi.n	8009a8a <_fflush_r+0x3a>
 8009a80:	0599      	lsls	r1, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_fflush_r+0x3a>
 8009a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a86:	f000 fc88 	bl	800a39a <__retarget_lock_acquire_recursive>
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f7ff ff59 	bl	8009944 <__sflush_r>
 8009a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a94:	07da      	lsls	r2, r3, #31
 8009a96:	4605      	mov	r5, r0
 8009a98:	d4e0      	bmi.n	8009a5c <_fflush_r+0xc>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	059b      	lsls	r3, r3, #22
 8009a9e:	d4dd      	bmi.n	8009a5c <_fflush_r+0xc>
 8009aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aa2:	f000 fc7b 	bl	800a39c <__retarget_lock_release_recursive>
 8009aa6:	e7d9      	b.n	8009a5c <_fflush_r+0xc>
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <_fflush_r+0x70>)
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	d101      	bne.n	8009ab2 <_fflush_r+0x62>
 8009aae:	68ac      	ldr	r4, [r5, #8]
 8009ab0:	e7df      	b.n	8009a72 <_fflush_r+0x22>
 8009ab2:	4b04      	ldr	r3, [pc, #16]	; (8009ac4 <_fflush_r+0x74>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	bf08      	it	eq
 8009ab8:	68ec      	ldreq	r4, [r5, #12]
 8009aba:	e7da      	b.n	8009a72 <_fflush_r+0x22>
 8009abc:	0800bc74 	.word	0x0800bc74
 8009ac0:	0800bc94 	.word	0x0800bc94
 8009ac4:	0800bc54 	.word	0x0800bc54

08009ac8 <std>:
 8009ac8:	2300      	movs	r3, #0
 8009aca:	b510      	push	{r4, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	e9c0 3300 	strd	r3, r3, [r0]
 8009ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ad6:	6083      	str	r3, [r0, #8]
 8009ad8:	8181      	strh	r1, [r0, #12]
 8009ada:	6643      	str	r3, [r0, #100]	; 0x64
 8009adc:	81c2      	strh	r2, [r0, #14]
 8009ade:	6183      	str	r3, [r0, #24]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	305c      	adds	r0, #92	; 0x5c
 8009ae6:	f7fd fa05 	bl	8006ef4 <memset>
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <std+0x38>)
 8009aec:	6263      	str	r3, [r4, #36]	; 0x24
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <std+0x3c>)
 8009af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <std+0x40>)
 8009af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009af6:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <std+0x44>)
 8009af8:	6224      	str	r4, [r4, #32]
 8009afa:	6323      	str	r3, [r4, #48]	; 0x30
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	bf00      	nop
 8009b00:	0800b5c9 	.word	0x0800b5c9
 8009b04:	0800b5eb 	.word	0x0800b5eb
 8009b08:	0800b623 	.word	0x0800b623
 8009b0c:	0800b647 	.word	0x0800b647

08009b10 <_cleanup_r>:
 8009b10:	4901      	ldr	r1, [pc, #4]	; (8009b18 <_cleanup_r+0x8>)
 8009b12:	f000 b8af 	b.w	8009c74 <_fwalk_reent>
 8009b16:	bf00      	nop
 8009b18:	08009a51 	.word	0x08009a51

08009b1c <__sfmoreglue>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	2268      	movs	r2, #104	; 0x68
 8009b20:	1e4d      	subs	r5, r1, #1
 8009b22:	4355      	muls	r5, r2
 8009b24:	460e      	mov	r6, r1
 8009b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b2a:	f001 fa09 	bl	800af40 <_malloc_r>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	b140      	cbz	r0, 8009b44 <__sfmoreglue+0x28>
 8009b32:	2100      	movs	r1, #0
 8009b34:	e9c0 1600 	strd	r1, r6, [r0]
 8009b38:	300c      	adds	r0, #12
 8009b3a:	60a0      	str	r0, [r4, #8]
 8009b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b40:	f7fd f9d8 	bl	8006ef4 <memset>
 8009b44:	4620      	mov	r0, r4
 8009b46:	bd70      	pop	{r4, r5, r6, pc}

08009b48 <__sfp_lock_acquire>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__sfp_lock_acquire+0x8>)
 8009b4a:	f000 bc26 	b.w	800a39a <__retarget_lock_acquire_recursive>
 8009b4e:	bf00      	nop
 8009b50:	200003c1 	.word	0x200003c1

08009b54 <__sfp_lock_release>:
 8009b54:	4801      	ldr	r0, [pc, #4]	; (8009b5c <__sfp_lock_release+0x8>)
 8009b56:	f000 bc21 	b.w	800a39c <__retarget_lock_release_recursive>
 8009b5a:	bf00      	nop
 8009b5c:	200003c1 	.word	0x200003c1

08009b60 <__sinit_lock_acquire>:
 8009b60:	4801      	ldr	r0, [pc, #4]	; (8009b68 <__sinit_lock_acquire+0x8>)
 8009b62:	f000 bc1a 	b.w	800a39a <__retarget_lock_acquire_recursive>
 8009b66:	bf00      	nop
 8009b68:	200003c2 	.word	0x200003c2

08009b6c <__sinit_lock_release>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	; (8009b74 <__sinit_lock_release+0x8>)
 8009b6e:	f000 bc15 	b.w	800a39c <__retarget_lock_release_recursive>
 8009b72:	bf00      	nop
 8009b74:	200003c2 	.word	0x200003c2

08009b78 <__sinit>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	f7ff fff0 	bl	8009b60 <__sinit_lock_acquire>
 8009b80:	69a3      	ldr	r3, [r4, #24]
 8009b82:	b11b      	cbz	r3, 8009b8c <__sinit+0x14>
 8009b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b88:	f7ff bff0 	b.w	8009b6c <__sinit_lock_release>
 8009b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b90:	6523      	str	r3, [r4, #80]	; 0x50
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <__sinit+0x68>)
 8009b94:	4a13      	ldr	r2, [pc, #76]	; (8009be4 <__sinit+0x6c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	bf04      	itt	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	61a3      	streq	r3, [r4, #24]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 f820 	bl	8009be8 <__sfp>
 8009ba8:	6060      	str	r0, [r4, #4]
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 f81c 	bl	8009be8 <__sfp>
 8009bb0:	60a0      	str	r0, [r4, #8]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f818 	bl	8009be8 <__sfp>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	60e0      	str	r0, [r4, #12]
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	6860      	ldr	r0, [r4, #4]
 8009bc0:	f7ff ff82 	bl	8009ac8 <std>
 8009bc4:	68a0      	ldr	r0, [r4, #8]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	2109      	movs	r1, #9
 8009bca:	f7ff ff7d 	bl	8009ac8 <std>
 8009bce:	68e0      	ldr	r0, [r4, #12]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	2112      	movs	r1, #18
 8009bd4:	f7ff ff78 	bl	8009ac8 <std>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	61a3      	str	r3, [r4, #24]
 8009bdc:	e7d2      	b.n	8009b84 <__sinit+0xc>
 8009bde:	bf00      	nop
 8009be0:	0800ba2c 	.word	0x0800ba2c
 8009be4:	08009b11 	.word	0x08009b11

08009be8 <__sfp>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	4607      	mov	r7, r0
 8009bec:	f7ff ffac 	bl	8009b48 <__sfp_lock_acquire>
 8009bf0:	4b1e      	ldr	r3, [pc, #120]	; (8009c6c <__sfp+0x84>)
 8009bf2:	681e      	ldr	r6, [r3, #0]
 8009bf4:	69b3      	ldr	r3, [r6, #24]
 8009bf6:	b913      	cbnz	r3, 8009bfe <__sfp+0x16>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ffbd 	bl	8009b78 <__sinit>
 8009bfe:	3648      	adds	r6, #72	; 0x48
 8009c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	d503      	bpl.n	8009c10 <__sfp+0x28>
 8009c08:	6833      	ldr	r3, [r6, #0]
 8009c0a:	b30b      	cbz	r3, 8009c50 <__sfp+0x68>
 8009c0c:	6836      	ldr	r6, [r6, #0]
 8009c0e:	e7f7      	b.n	8009c00 <__sfp+0x18>
 8009c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c14:	b9d5      	cbnz	r5, 8009c4c <__sfp+0x64>
 8009c16:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <__sfp+0x88>)
 8009c18:	60e3      	str	r3, [r4, #12]
 8009c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c20:	f000 fbba 	bl	800a398 <__retarget_lock_init_recursive>
 8009c24:	f7ff ff96 	bl	8009b54 <__sfp_lock_release>
 8009c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c30:	6025      	str	r5, [r4, #0]
 8009c32:	61a5      	str	r5, [r4, #24]
 8009c34:	2208      	movs	r2, #8
 8009c36:	4629      	mov	r1, r5
 8009c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c3c:	f7fd f95a 	bl	8006ef4 <memset>
 8009c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c48:	4620      	mov	r0, r4
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4c:	3468      	adds	r4, #104	; 0x68
 8009c4e:	e7d9      	b.n	8009c04 <__sfp+0x1c>
 8009c50:	2104      	movs	r1, #4
 8009c52:	4638      	mov	r0, r7
 8009c54:	f7ff ff62 	bl	8009b1c <__sfmoreglue>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	6030      	str	r0, [r6, #0]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1d5      	bne.n	8009c0c <__sfp+0x24>
 8009c60:	f7ff ff78 	bl	8009b54 <__sfp_lock_release>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	e7ee      	b.n	8009c48 <__sfp+0x60>
 8009c6a:	bf00      	nop
 8009c6c:	0800ba2c 	.word	0x0800ba2c
 8009c70:	ffff0001 	.word	0xffff0001

08009c74 <_fwalk_reent>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4606      	mov	r6, r0
 8009c7a:	4688      	mov	r8, r1
 8009c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c80:	2700      	movs	r7, #0
 8009c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c86:	f1b9 0901 	subs.w	r9, r9, #1
 8009c8a:	d505      	bpl.n	8009c98 <_fwalk_reent+0x24>
 8009c8c:	6824      	ldr	r4, [r4, #0]
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	d1f7      	bne.n	8009c82 <_fwalk_reent+0xe>
 8009c92:	4638      	mov	r0, r7
 8009c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c98:	89ab      	ldrh	r3, [r5, #12]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d907      	bls.n	8009cae <_fwalk_reent+0x3a>
 8009c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	d003      	beq.n	8009cae <_fwalk_reent+0x3a>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	47c0      	blx	r8
 8009cac:	4307      	orrs	r7, r0
 8009cae:	3568      	adds	r5, #104	; 0x68
 8009cb0:	e7e9      	b.n	8009c86 <_fwalk_reent+0x12>

08009cb2 <rshift>:
 8009cb2:	6903      	ldr	r3, [r0, #16]
 8009cb4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009cb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009cbc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009cc0:	f100 0414 	add.w	r4, r0, #20
 8009cc4:	dd45      	ble.n	8009d52 <rshift+0xa0>
 8009cc6:	f011 011f 	ands.w	r1, r1, #31
 8009cca:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009cce:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009cd2:	d10c      	bne.n	8009cee <rshift+0x3c>
 8009cd4:	f100 0710 	add.w	r7, r0, #16
 8009cd8:	4629      	mov	r1, r5
 8009cda:	42b1      	cmp	r1, r6
 8009cdc:	d334      	bcc.n	8009d48 <rshift+0x96>
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	1eea      	subs	r2, r5, #3
 8009ce4:	4296      	cmp	r6, r2
 8009ce6:	bf38      	it	cc
 8009ce8:	2300      	movcc	r3, #0
 8009cea:	4423      	add	r3, r4
 8009cec:	e015      	b.n	8009d1a <rshift+0x68>
 8009cee:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009cf2:	f1c1 0820 	rsb	r8, r1, #32
 8009cf6:	40cf      	lsrs	r7, r1
 8009cf8:	f105 0e04 	add.w	lr, r5, #4
 8009cfc:	46a1      	mov	r9, r4
 8009cfe:	4576      	cmp	r6, lr
 8009d00:	46f4      	mov	ip, lr
 8009d02:	d815      	bhi.n	8009d30 <rshift+0x7e>
 8009d04:	1a9a      	subs	r2, r3, r2
 8009d06:	0092      	lsls	r2, r2, #2
 8009d08:	3a04      	subs	r2, #4
 8009d0a:	3501      	adds	r5, #1
 8009d0c:	42ae      	cmp	r6, r5
 8009d0e:	bf38      	it	cc
 8009d10:	2200      	movcc	r2, #0
 8009d12:	18a3      	adds	r3, r4, r2
 8009d14:	50a7      	str	r7, [r4, r2]
 8009d16:	b107      	cbz	r7, 8009d1a <rshift+0x68>
 8009d18:	3304      	adds	r3, #4
 8009d1a:	1b1a      	subs	r2, r3, r4
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009d22:	bf08      	it	eq
 8009d24:	2300      	moveq	r3, #0
 8009d26:	6102      	str	r2, [r0, #16]
 8009d28:	bf08      	it	eq
 8009d2a:	6143      	streq	r3, [r0, #20]
 8009d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d30:	f8dc c000 	ldr.w	ip, [ip]
 8009d34:	fa0c fc08 	lsl.w	ip, ip, r8
 8009d38:	ea4c 0707 	orr.w	r7, ip, r7
 8009d3c:	f849 7b04 	str.w	r7, [r9], #4
 8009d40:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d44:	40cf      	lsrs	r7, r1
 8009d46:	e7da      	b.n	8009cfe <rshift+0x4c>
 8009d48:	f851 cb04 	ldr.w	ip, [r1], #4
 8009d4c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009d50:	e7c3      	b.n	8009cda <rshift+0x28>
 8009d52:	4623      	mov	r3, r4
 8009d54:	e7e1      	b.n	8009d1a <rshift+0x68>

08009d56 <__hexdig_fun>:
 8009d56:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009d5a:	2b09      	cmp	r3, #9
 8009d5c:	d802      	bhi.n	8009d64 <__hexdig_fun+0xe>
 8009d5e:	3820      	subs	r0, #32
 8009d60:	b2c0      	uxtb	r0, r0
 8009d62:	4770      	bx	lr
 8009d64:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009d68:	2b05      	cmp	r3, #5
 8009d6a:	d801      	bhi.n	8009d70 <__hexdig_fun+0x1a>
 8009d6c:	3847      	subs	r0, #71	; 0x47
 8009d6e:	e7f7      	b.n	8009d60 <__hexdig_fun+0xa>
 8009d70:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009d74:	2b05      	cmp	r3, #5
 8009d76:	d801      	bhi.n	8009d7c <__hexdig_fun+0x26>
 8009d78:	3827      	subs	r0, #39	; 0x27
 8009d7a:	e7f1      	b.n	8009d60 <__hexdig_fun+0xa>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	4770      	bx	lr

08009d80 <__gethex>:
 8009d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	ed2d 8b02 	vpush	{d8}
 8009d88:	b089      	sub	sp, #36	; 0x24
 8009d8a:	ee08 0a10 	vmov	s16, r0
 8009d8e:	9304      	str	r3, [sp, #16]
 8009d90:	4bb4      	ldr	r3, [pc, #720]	; (800a064 <__gethex+0x2e4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	4618      	mov	r0, r3
 8009d98:	468b      	mov	fp, r1
 8009d9a:	4690      	mov	r8, r2
 8009d9c:	f7f6 fa18 	bl	80001d0 <strlen>
 8009da0:	9b01      	ldr	r3, [sp, #4]
 8009da2:	f8db 2000 	ldr.w	r2, [fp]
 8009da6:	4403      	add	r3, r0
 8009da8:	4682      	mov	sl, r0
 8009daa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009dae:	9305      	str	r3, [sp, #20]
 8009db0:	1c93      	adds	r3, r2, #2
 8009db2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009db6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009dba:	32fe      	adds	r2, #254	; 0xfe
 8009dbc:	18d1      	adds	r1, r2, r3
 8009dbe:	461f      	mov	r7, r3
 8009dc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009dc4:	9100      	str	r1, [sp, #0]
 8009dc6:	2830      	cmp	r0, #48	; 0x30
 8009dc8:	d0f8      	beq.n	8009dbc <__gethex+0x3c>
 8009dca:	f7ff ffc4 	bl	8009d56 <__hexdig_fun>
 8009dce:	4604      	mov	r4, r0
 8009dd0:	2800      	cmp	r0, #0
 8009dd2:	d13a      	bne.n	8009e4a <__gethex+0xca>
 8009dd4:	9901      	ldr	r1, [sp, #4]
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4638      	mov	r0, r7
 8009dda:	f001 fc38 	bl	800b64e <strncmp>
 8009dde:	4605      	mov	r5, r0
 8009de0:	2800      	cmp	r0, #0
 8009de2:	d168      	bne.n	8009eb6 <__gethex+0x136>
 8009de4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009de8:	eb07 060a 	add.w	r6, r7, sl
 8009dec:	f7ff ffb3 	bl	8009d56 <__hexdig_fun>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d062      	beq.n	8009eba <__gethex+0x13a>
 8009df4:	4633      	mov	r3, r6
 8009df6:	7818      	ldrb	r0, [r3, #0]
 8009df8:	2830      	cmp	r0, #48	; 0x30
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	f103 0301 	add.w	r3, r3, #1
 8009e00:	d0f9      	beq.n	8009df6 <__gethex+0x76>
 8009e02:	f7ff ffa8 	bl	8009d56 <__hexdig_fun>
 8009e06:	2301      	movs	r3, #1
 8009e08:	fab0 f480 	clz	r4, r0
 8009e0c:	0964      	lsrs	r4, r4, #5
 8009e0e:	4635      	mov	r5, r6
 8009e10:	9300      	str	r3, [sp, #0]
 8009e12:	463a      	mov	r2, r7
 8009e14:	4616      	mov	r6, r2
 8009e16:	3201      	adds	r2, #1
 8009e18:	7830      	ldrb	r0, [r6, #0]
 8009e1a:	f7ff ff9c 	bl	8009d56 <__hexdig_fun>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d1f8      	bne.n	8009e14 <__gethex+0x94>
 8009e22:	9901      	ldr	r1, [sp, #4]
 8009e24:	4652      	mov	r2, sl
 8009e26:	4630      	mov	r0, r6
 8009e28:	f001 fc11 	bl	800b64e <strncmp>
 8009e2c:	b980      	cbnz	r0, 8009e50 <__gethex+0xd0>
 8009e2e:	b94d      	cbnz	r5, 8009e44 <__gethex+0xc4>
 8009e30:	eb06 050a 	add.w	r5, r6, sl
 8009e34:	462a      	mov	r2, r5
 8009e36:	4616      	mov	r6, r2
 8009e38:	3201      	adds	r2, #1
 8009e3a:	7830      	ldrb	r0, [r6, #0]
 8009e3c:	f7ff ff8b 	bl	8009d56 <__hexdig_fun>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1f8      	bne.n	8009e36 <__gethex+0xb6>
 8009e44:	1bad      	subs	r5, r5, r6
 8009e46:	00ad      	lsls	r5, r5, #2
 8009e48:	e004      	b.n	8009e54 <__gethex+0xd4>
 8009e4a:	2400      	movs	r4, #0
 8009e4c:	4625      	mov	r5, r4
 8009e4e:	e7e0      	b.n	8009e12 <__gethex+0x92>
 8009e50:	2d00      	cmp	r5, #0
 8009e52:	d1f7      	bne.n	8009e44 <__gethex+0xc4>
 8009e54:	7833      	ldrb	r3, [r6, #0]
 8009e56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e5a:	2b50      	cmp	r3, #80	; 0x50
 8009e5c:	d13b      	bne.n	8009ed6 <__gethex+0x156>
 8009e5e:	7873      	ldrb	r3, [r6, #1]
 8009e60:	2b2b      	cmp	r3, #43	; 0x2b
 8009e62:	d02c      	beq.n	8009ebe <__gethex+0x13e>
 8009e64:	2b2d      	cmp	r3, #45	; 0x2d
 8009e66:	d02e      	beq.n	8009ec6 <__gethex+0x146>
 8009e68:	1c71      	adds	r1, r6, #1
 8009e6a:	f04f 0900 	mov.w	r9, #0
 8009e6e:	7808      	ldrb	r0, [r1, #0]
 8009e70:	f7ff ff71 	bl	8009d56 <__hexdig_fun>
 8009e74:	1e43      	subs	r3, r0, #1
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b18      	cmp	r3, #24
 8009e7a:	d82c      	bhi.n	8009ed6 <__gethex+0x156>
 8009e7c:	f1a0 0210 	sub.w	r2, r0, #16
 8009e80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009e84:	f7ff ff67 	bl	8009d56 <__hexdig_fun>
 8009e88:	1e43      	subs	r3, r0, #1
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b18      	cmp	r3, #24
 8009e8e:	d91d      	bls.n	8009ecc <__gethex+0x14c>
 8009e90:	f1b9 0f00 	cmp.w	r9, #0
 8009e94:	d000      	beq.n	8009e98 <__gethex+0x118>
 8009e96:	4252      	negs	r2, r2
 8009e98:	4415      	add	r5, r2
 8009e9a:	f8cb 1000 	str.w	r1, [fp]
 8009e9e:	b1e4      	cbz	r4, 8009eda <__gethex+0x15a>
 8009ea0:	9b00      	ldr	r3, [sp, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	bf14      	ite	ne
 8009ea6:	2700      	movne	r7, #0
 8009ea8:	2706      	moveq	r7, #6
 8009eaa:	4638      	mov	r0, r7
 8009eac:	b009      	add	sp, #36	; 0x24
 8009eae:	ecbd 8b02 	vpop	{d8}
 8009eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb6:	463e      	mov	r6, r7
 8009eb8:	4625      	mov	r5, r4
 8009eba:	2401      	movs	r4, #1
 8009ebc:	e7ca      	b.n	8009e54 <__gethex+0xd4>
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	1cb1      	adds	r1, r6, #2
 8009ec4:	e7d3      	b.n	8009e6e <__gethex+0xee>
 8009ec6:	f04f 0901 	mov.w	r9, #1
 8009eca:	e7fa      	b.n	8009ec2 <__gethex+0x142>
 8009ecc:	230a      	movs	r3, #10
 8009ece:	fb03 0202 	mla	r2, r3, r2, r0
 8009ed2:	3a10      	subs	r2, #16
 8009ed4:	e7d4      	b.n	8009e80 <__gethex+0x100>
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	e7df      	b.n	8009e9a <__gethex+0x11a>
 8009eda:	1bf3      	subs	r3, r6, r7
 8009edc:	3b01      	subs	r3, #1
 8009ede:	4621      	mov	r1, r4
 8009ee0:	2b07      	cmp	r3, #7
 8009ee2:	dc0b      	bgt.n	8009efc <__gethex+0x17c>
 8009ee4:	ee18 0a10 	vmov	r0, s16
 8009ee8:	f000 fae6 	bl	800a4b8 <_Balloc>
 8009eec:	4604      	mov	r4, r0
 8009eee:	b940      	cbnz	r0, 8009f02 <__gethex+0x182>
 8009ef0:	4b5d      	ldr	r3, [pc, #372]	; (800a068 <__gethex+0x2e8>)
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	21de      	movs	r1, #222	; 0xde
 8009ef6:	485d      	ldr	r0, [pc, #372]	; (800a06c <__gethex+0x2ec>)
 8009ef8:	f001 fbdc 	bl	800b6b4 <__assert_func>
 8009efc:	3101      	adds	r1, #1
 8009efe:	105b      	asrs	r3, r3, #1
 8009f00:	e7ee      	b.n	8009ee0 <__gethex+0x160>
 8009f02:	f100 0914 	add.w	r9, r0, #20
 8009f06:	f04f 0b00 	mov.w	fp, #0
 8009f0a:	f1ca 0301 	rsb	r3, sl, #1
 8009f0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f12:	f8cd b000 	str.w	fp, [sp]
 8009f16:	9306      	str	r3, [sp, #24]
 8009f18:	42b7      	cmp	r7, r6
 8009f1a:	d340      	bcc.n	8009f9e <__gethex+0x21e>
 8009f1c:	9802      	ldr	r0, [sp, #8]
 8009f1e:	9b00      	ldr	r3, [sp, #0]
 8009f20:	f840 3b04 	str.w	r3, [r0], #4
 8009f24:	eba0 0009 	sub.w	r0, r0, r9
 8009f28:	1080      	asrs	r0, r0, #2
 8009f2a:	0146      	lsls	r6, r0, #5
 8009f2c:	6120      	str	r0, [r4, #16]
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f000 fbb4 	bl	800a69c <__hi0bits>
 8009f34:	1a30      	subs	r0, r6, r0
 8009f36:	f8d8 6000 	ldr.w	r6, [r8]
 8009f3a:	42b0      	cmp	r0, r6
 8009f3c:	dd63      	ble.n	800a006 <__gethex+0x286>
 8009f3e:	1b87      	subs	r7, r0, r6
 8009f40:	4639      	mov	r1, r7
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 ff58 	bl	800adf8 <__any_on>
 8009f48:	4682      	mov	sl, r0
 8009f4a:	b1a8      	cbz	r0, 8009f78 <__gethex+0x1f8>
 8009f4c:	1e7b      	subs	r3, r7, #1
 8009f4e:	1159      	asrs	r1, r3, #5
 8009f50:	f003 021f 	and.w	r2, r3, #31
 8009f54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009f58:	f04f 0a01 	mov.w	sl, #1
 8009f5c:	fa0a f202 	lsl.w	r2, sl, r2
 8009f60:	420a      	tst	r2, r1
 8009f62:	d009      	beq.n	8009f78 <__gethex+0x1f8>
 8009f64:	4553      	cmp	r3, sl
 8009f66:	dd05      	ble.n	8009f74 <__gethex+0x1f4>
 8009f68:	1eb9      	subs	r1, r7, #2
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	f000 ff44 	bl	800adf8 <__any_on>
 8009f70:	2800      	cmp	r0, #0
 8009f72:	d145      	bne.n	800a000 <__gethex+0x280>
 8009f74:	f04f 0a02 	mov.w	sl, #2
 8009f78:	4639      	mov	r1, r7
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f7ff fe99 	bl	8009cb2 <rshift>
 8009f80:	443d      	add	r5, r7
 8009f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f86:	42ab      	cmp	r3, r5
 8009f88:	da4c      	bge.n	800a024 <__gethex+0x2a4>
 8009f8a:	ee18 0a10 	vmov	r0, s16
 8009f8e:	4621      	mov	r1, r4
 8009f90:	f000 fad2 	bl	800a538 <_Bfree>
 8009f94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f96:	2300      	movs	r3, #0
 8009f98:	6013      	str	r3, [r2, #0]
 8009f9a:	27a3      	movs	r7, #163	; 0xa3
 8009f9c:	e785      	b.n	8009eaa <__gethex+0x12a>
 8009f9e:	1e73      	subs	r3, r6, #1
 8009fa0:	9a05      	ldr	r2, [sp, #20]
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d019      	beq.n	8009fe0 <__gethex+0x260>
 8009fac:	f1bb 0f20 	cmp.w	fp, #32
 8009fb0:	d107      	bne.n	8009fc2 <__gethex+0x242>
 8009fb2:	9b02      	ldr	r3, [sp, #8]
 8009fb4:	9a00      	ldr	r2, [sp, #0]
 8009fb6:	f843 2b04 	str.w	r2, [r3], #4
 8009fba:	9302      	str	r3, [sp, #8]
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	469b      	mov	fp, r3
 8009fc2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009fc6:	f7ff fec6 	bl	8009d56 <__hexdig_fun>
 8009fca:	9b00      	ldr	r3, [sp, #0]
 8009fcc:	f000 000f 	and.w	r0, r0, #15
 8009fd0:	fa00 f00b 	lsl.w	r0, r0, fp
 8009fd4:	4303      	orrs	r3, r0
 8009fd6:	9300      	str	r3, [sp, #0]
 8009fd8:	f10b 0b04 	add.w	fp, fp, #4
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	e00d      	b.n	8009ffc <__gethex+0x27c>
 8009fe0:	9b03      	ldr	r3, [sp, #12]
 8009fe2:	9a06      	ldr	r2, [sp, #24]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	42bb      	cmp	r3, r7
 8009fe8:	d3e0      	bcc.n	8009fac <__gethex+0x22c>
 8009fea:	4618      	mov	r0, r3
 8009fec:	9901      	ldr	r1, [sp, #4]
 8009fee:	9307      	str	r3, [sp, #28]
 8009ff0:	4652      	mov	r2, sl
 8009ff2:	f001 fb2c 	bl	800b64e <strncmp>
 8009ff6:	9b07      	ldr	r3, [sp, #28]
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1d7      	bne.n	8009fac <__gethex+0x22c>
 8009ffc:	461e      	mov	r6, r3
 8009ffe:	e78b      	b.n	8009f18 <__gethex+0x198>
 800a000:	f04f 0a03 	mov.w	sl, #3
 800a004:	e7b8      	b.n	8009f78 <__gethex+0x1f8>
 800a006:	da0a      	bge.n	800a01e <__gethex+0x29e>
 800a008:	1a37      	subs	r7, r6, r0
 800a00a:	4621      	mov	r1, r4
 800a00c:	ee18 0a10 	vmov	r0, s16
 800a010:	463a      	mov	r2, r7
 800a012:	f000 fcad 	bl	800a970 <__lshift>
 800a016:	1bed      	subs	r5, r5, r7
 800a018:	4604      	mov	r4, r0
 800a01a:	f100 0914 	add.w	r9, r0, #20
 800a01e:	f04f 0a00 	mov.w	sl, #0
 800a022:	e7ae      	b.n	8009f82 <__gethex+0x202>
 800a024:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a028:	42a8      	cmp	r0, r5
 800a02a:	dd72      	ble.n	800a112 <__gethex+0x392>
 800a02c:	1b45      	subs	r5, r0, r5
 800a02e:	42ae      	cmp	r6, r5
 800a030:	dc36      	bgt.n	800a0a0 <__gethex+0x320>
 800a032:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a036:	2b02      	cmp	r3, #2
 800a038:	d02a      	beq.n	800a090 <__gethex+0x310>
 800a03a:	2b03      	cmp	r3, #3
 800a03c:	d02c      	beq.n	800a098 <__gethex+0x318>
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d11c      	bne.n	800a07c <__gethex+0x2fc>
 800a042:	42ae      	cmp	r6, r5
 800a044:	d11a      	bne.n	800a07c <__gethex+0x2fc>
 800a046:	2e01      	cmp	r6, #1
 800a048:	d112      	bne.n	800a070 <__gethex+0x2f0>
 800a04a:	9a04      	ldr	r2, [sp, #16]
 800a04c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	2301      	movs	r3, #1
 800a054:	6123      	str	r3, [r4, #16]
 800a056:	f8c9 3000 	str.w	r3, [r9]
 800a05a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a05c:	2762      	movs	r7, #98	; 0x62
 800a05e:	601c      	str	r4, [r3, #0]
 800a060:	e723      	b.n	8009eaa <__gethex+0x12a>
 800a062:	bf00      	nop
 800a064:	0800bd1c 	.word	0x0800bd1c
 800a068:	0800bc40 	.word	0x0800bc40
 800a06c:	0800bcb4 	.word	0x0800bcb4
 800a070:	1e71      	subs	r1, r6, #1
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fec0 	bl	800adf8 <__any_on>
 800a078:	2800      	cmp	r0, #0
 800a07a:	d1e6      	bne.n	800a04a <__gethex+0x2ca>
 800a07c:	ee18 0a10 	vmov	r0, s16
 800a080:	4621      	mov	r1, r4
 800a082:	f000 fa59 	bl	800a538 <_Bfree>
 800a086:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a088:	2300      	movs	r3, #0
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	2750      	movs	r7, #80	; 0x50
 800a08e:	e70c      	b.n	8009eaa <__gethex+0x12a>
 800a090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a092:	2b00      	cmp	r3, #0
 800a094:	d1f2      	bne.n	800a07c <__gethex+0x2fc>
 800a096:	e7d8      	b.n	800a04a <__gethex+0x2ca>
 800a098:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1d5      	bne.n	800a04a <__gethex+0x2ca>
 800a09e:	e7ed      	b.n	800a07c <__gethex+0x2fc>
 800a0a0:	1e6f      	subs	r7, r5, #1
 800a0a2:	f1ba 0f00 	cmp.w	sl, #0
 800a0a6:	d131      	bne.n	800a10c <__gethex+0x38c>
 800a0a8:	b127      	cbz	r7, 800a0b4 <__gethex+0x334>
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	4620      	mov	r0, r4
 800a0ae:	f000 fea3 	bl	800adf8 <__any_on>
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	117b      	asrs	r3, r7, #5
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a0bc:	f007 071f 	and.w	r7, r7, #31
 800a0c0:	fa01 f707 	lsl.w	r7, r1, r7
 800a0c4:	421f      	tst	r7, r3
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	bf18      	it	ne
 800a0cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800a0d0:	1b76      	subs	r6, r6, r5
 800a0d2:	f7ff fdee 	bl	8009cb2 <rshift>
 800a0d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a0da:	2702      	movs	r7, #2
 800a0dc:	f1ba 0f00 	cmp.w	sl, #0
 800a0e0:	d048      	beq.n	800a174 <__gethex+0x3f4>
 800a0e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d015      	beq.n	800a116 <__gethex+0x396>
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d017      	beq.n	800a11e <__gethex+0x39e>
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d109      	bne.n	800a106 <__gethex+0x386>
 800a0f2:	f01a 0f02 	tst.w	sl, #2
 800a0f6:	d006      	beq.n	800a106 <__gethex+0x386>
 800a0f8:	f8d9 0000 	ldr.w	r0, [r9]
 800a0fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a100:	f01a 0f01 	tst.w	sl, #1
 800a104:	d10e      	bne.n	800a124 <__gethex+0x3a4>
 800a106:	f047 0710 	orr.w	r7, r7, #16
 800a10a:	e033      	b.n	800a174 <__gethex+0x3f4>
 800a10c:	f04f 0a01 	mov.w	sl, #1
 800a110:	e7d0      	b.n	800a0b4 <__gethex+0x334>
 800a112:	2701      	movs	r7, #1
 800a114:	e7e2      	b.n	800a0dc <__gethex+0x35c>
 800a116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a118:	f1c3 0301 	rsb	r3, r3, #1
 800a11c:	9315      	str	r3, [sp, #84]	; 0x54
 800a11e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a120:	2b00      	cmp	r3, #0
 800a122:	d0f0      	beq.n	800a106 <__gethex+0x386>
 800a124:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a128:	f104 0314 	add.w	r3, r4, #20
 800a12c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a130:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a134:	f04f 0c00 	mov.w	ip, #0
 800a138:	4618      	mov	r0, r3
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a142:	d01c      	beq.n	800a17e <__gethex+0x3fe>
 800a144:	3201      	adds	r2, #1
 800a146:	6002      	str	r2, [r0, #0]
 800a148:	2f02      	cmp	r7, #2
 800a14a:	f104 0314 	add.w	r3, r4, #20
 800a14e:	d13f      	bne.n	800a1d0 <__gethex+0x450>
 800a150:	f8d8 2000 	ldr.w	r2, [r8]
 800a154:	3a01      	subs	r2, #1
 800a156:	42b2      	cmp	r2, r6
 800a158:	d10a      	bne.n	800a170 <__gethex+0x3f0>
 800a15a:	1171      	asrs	r1, r6, #5
 800a15c:	2201      	movs	r2, #1
 800a15e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a162:	f006 061f 	and.w	r6, r6, #31
 800a166:	fa02 f606 	lsl.w	r6, r2, r6
 800a16a:	421e      	tst	r6, r3
 800a16c:	bf18      	it	ne
 800a16e:	4617      	movne	r7, r2
 800a170:	f047 0720 	orr.w	r7, r7, #32
 800a174:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a176:	601c      	str	r4, [r3, #0]
 800a178:	9b04      	ldr	r3, [sp, #16]
 800a17a:	601d      	str	r5, [r3, #0]
 800a17c:	e695      	b.n	8009eaa <__gethex+0x12a>
 800a17e:	4299      	cmp	r1, r3
 800a180:	f843 cc04 	str.w	ip, [r3, #-4]
 800a184:	d8d8      	bhi.n	800a138 <__gethex+0x3b8>
 800a186:	68a3      	ldr	r3, [r4, #8]
 800a188:	459b      	cmp	fp, r3
 800a18a:	db19      	blt.n	800a1c0 <__gethex+0x440>
 800a18c:	6861      	ldr	r1, [r4, #4]
 800a18e:	ee18 0a10 	vmov	r0, s16
 800a192:	3101      	adds	r1, #1
 800a194:	f000 f990 	bl	800a4b8 <_Balloc>
 800a198:	4681      	mov	r9, r0
 800a19a:	b918      	cbnz	r0, 800a1a4 <__gethex+0x424>
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <__gethex+0x488>)
 800a19e:	4602      	mov	r2, r0
 800a1a0:	2184      	movs	r1, #132	; 0x84
 800a1a2:	e6a8      	b.n	8009ef6 <__gethex+0x176>
 800a1a4:	6922      	ldr	r2, [r4, #16]
 800a1a6:	3202      	adds	r2, #2
 800a1a8:	f104 010c 	add.w	r1, r4, #12
 800a1ac:	0092      	lsls	r2, r2, #2
 800a1ae:	300c      	adds	r0, #12
 800a1b0:	f000 f974 	bl	800a49c <memcpy>
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	ee18 0a10 	vmov	r0, s16
 800a1ba:	f000 f9bd 	bl	800a538 <_Bfree>
 800a1be:	464c      	mov	r4, r9
 800a1c0:	6923      	ldr	r3, [r4, #16]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1c8:	6122      	str	r2, [r4, #16]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	615a      	str	r2, [r3, #20]
 800a1ce:	e7bb      	b.n	800a148 <__gethex+0x3c8>
 800a1d0:	6922      	ldr	r2, [r4, #16]
 800a1d2:	455a      	cmp	r2, fp
 800a1d4:	dd0b      	ble.n	800a1ee <__gethex+0x46e>
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f7ff fd6a 	bl	8009cb2 <rshift>
 800a1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1e2:	3501      	adds	r5, #1
 800a1e4:	42ab      	cmp	r3, r5
 800a1e6:	f6ff aed0 	blt.w	8009f8a <__gethex+0x20a>
 800a1ea:	2701      	movs	r7, #1
 800a1ec:	e7c0      	b.n	800a170 <__gethex+0x3f0>
 800a1ee:	f016 061f 	ands.w	r6, r6, #31
 800a1f2:	d0fa      	beq.n	800a1ea <__gethex+0x46a>
 800a1f4:	4453      	add	r3, sl
 800a1f6:	f1c6 0620 	rsb	r6, r6, #32
 800a1fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a1fe:	f000 fa4d 	bl	800a69c <__hi0bits>
 800a202:	42b0      	cmp	r0, r6
 800a204:	dbe7      	blt.n	800a1d6 <__gethex+0x456>
 800a206:	e7f0      	b.n	800a1ea <__gethex+0x46a>
 800a208:	0800bc40 	.word	0x0800bc40

0800a20c <L_shift>:
 800a20c:	f1c2 0208 	rsb	r2, r2, #8
 800a210:	0092      	lsls	r2, r2, #2
 800a212:	b570      	push	{r4, r5, r6, lr}
 800a214:	f1c2 0620 	rsb	r6, r2, #32
 800a218:	6843      	ldr	r3, [r0, #4]
 800a21a:	6804      	ldr	r4, [r0, #0]
 800a21c:	fa03 f506 	lsl.w	r5, r3, r6
 800a220:	432c      	orrs	r4, r5
 800a222:	40d3      	lsrs	r3, r2
 800a224:	6004      	str	r4, [r0, #0]
 800a226:	f840 3f04 	str.w	r3, [r0, #4]!
 800a22a:	4288      	cmp	r0, r1
 800a22c:	d3f4      	bcc.n	800a218 <L_shift+0xc>
 800a22e:	bd70      	pop	{r4, r5, r6, pc}

0800a230 <__match>:
 800a230:	b530      	push	{r4, r5, lr}
 800a232:	6803      	ldr	r3, [r0, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a23a:	b914      	cbnz	r4, 800a242 <__match+0x12>
 800a23c:	6003      	str	r3, [r0, #0]
 800a23e:	2001      	movs	r0, #1
 800a240:	bd30      	pop	{r4, r5, pc}
 800a242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a246:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a24a:	2d19      	cmp	r5, #25
 800a24c:	bf98      	it	ls
 800a24e:	3220      	addls	r2, #32
 800a250:	42a2      	cmp	r2, r4
 800a252:	d0f0      	beq.n	800a236 <__match+0x6>
 800a254:	2000      	movs	r0, #0
 800a256:	e7f3      	b.n	800a240 <__match+0x10>

0800a258 <__hexnan>:
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	680b      	ldr	r3, [r1, #0]
 800a25e:	115e      	asrs	r6, r3, #5
 800a260:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a264:	f013 031f 	ands.w	r3, r3, #31
 800a268:	b087      	sub	sp, #28
 800a26a:	bf18      	it	ne
 800a26c:	3604      	addne	r6, #4
 800a26e:	2500      	movs	r5, #0
 800a270:	1f37      	subs	r7, r6, #4
 800a272:	4690      	mov	r8, r2
 800a274:	6802      	ldr	r2, [r0, #0]
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	4682      	mov	sl, r0
 800a27a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a27e:	46b9      	mov	r9, r7
 800a280:	463c      	mov	r4, r7
 800a282:	9502      	str	r5, [sp, #8]
 800a284:	46ab      	mov	fp, r5
 800a286:	7851      	ldrb	r1, [r2, #1]
 800a288:	1c53      	adds	r3, r2, #1
 800a28a:	9303      	str	r3, [sp, #12]
 800a28c:	b341      	cbz	r1, 800a2e0 <__hexnan+0x88>
 800a28e:	4608      	mov	r0, r1
 800a290:	9205      	str	r2, [sp, #20]
 800a292:	9104      	str	r1, [sp, #16]
 800a294:	f7ff fd5f 	bl	8009d56 <__hexdig_fun>
 800a298:	2800      	cmp	r0, #0
 800a29a:	d14f      	bne.n	800a33c <__hexnan+0xe4>
 800a29c:	9904      	ldr	r1, [sp, #16]
 800a29e:	9a05      	ldr	r2, [sp, #20]
 800a2a0:	2920      	cmp	r1, #32
 800a2a2:	d818      	bhi.n	800a2d6 <__hexnan+0x7e>
 800a2a4:	9b02      	ldr	r3, [sp, #8]
 800a2a6:	459b      	cmp	fp, r3
 800a2a8:	dd13      	ble.n	800a2d2 <__hexnan+0x7a>
 800a2aa:	454c      	cmp	r4, r9
 800a2ac:	d206      	bcs.n	800a2bc <__hexnan+0x64>
 800a2ae:	2d07      	cmp	r5, #7
 800a2b0:	dc04      	bgt.n	800a2bc <__hexnan+0x64>
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4649      	mov	r1, r9
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f7ff ffa8 	bl	800a20c <L_shift>
 800a2bc:	4544      	cmp	r4, r8
 800a2be:	d950      	bls.n	800a362 <__hexnan+0x10a>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a2c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a2ca:	f8cd b008 	str.w	fp, [sp, #8]
 800a2ce:	464c      	mov	r4, r9
 800a2d0:	461d      	mov	r5, r3
 800a2d2:	9a03      	ldr	r2, [sp, #12]
 800a2d4:	e7d7      	b.n	800a286 <__hexnan+0x2e>
 800a2d6:	2929      	cmp	r1, #41	; 0x29
 800a2d8:	d156      	bne.n	800a388 <__hexnan+0x130>
 800a2da:	3202      	adds	r2, #2
 800a2dc:	f8ca 2000 	str.w	r2, [sl]
 800a2e0:	f1bb 0f00 	cmp.w	fp, #0
 800a2e4:	d050      	beq.n	800a388 <__hexnan+0x130>
 800a2e6:	454c      	cmp	r4, r9
 800a2e8:	d206      	bcs.n	800a2f8 <__hexnan+0xa0>
 800a2ea:	2d07      	cmp	r5, #7
 800a2ec:	dc04      	bgt.n	800a2f8 <__hexnan+0xa0>
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	4649      	mov	r1, r9
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f7ff ff8a 	bl	800a20c <L_shift>
 800a2f8:	4544      	cmp	r4, r8
 800a2fa:	d934      	bls.n	800a366 <__hexnan+0x10e>
 800a2fc:	f1a8 0204 	sub.w	r2, r8, #4
 800a300:	4623      	mov	r3, r4
 800a302:	f853 1b04 	ldr.w	r1, [r3], #4
 800a306:	f842 1f04 	str.w	r1, [r2, #4]!
 800a30a:	429f      	cmp	r7, r3
 800a30c:	d2f9      	bcs.n	800a302 <__hexnan+0xaa>
 800a30e:	1b3b      	subs	r3, r7, r4
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	3304      	adds	r3, #4
 800a316:	3401      	adds	r4, #1
 800a318:	3e03      	subs	r6, #3
 800a31a:	42b4      	cmp	r4, r6
 800a31c:	bf88      	it	hi
 800a31e:	2304      	movhi	r3, #4
 800a320:	4443      	add	r3, r8
 800a322:	2200      	movs	r2, #0
 800a324:	f843 2b04 	str.w	r2, [r3], #4
 800a328:	429f      	cmp	r7, r3
 800a32a:	d2fb      	bcs.n	800a324 <__hexnan+0xcc>
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	b91b      	cbnz	r3, 800a338 <__hexnan+0xe0>
 800a330:	4547      	cmp	r7, r8
 800a332:	d127      	bne.n	800a384 <__hexnan+0x12c>
 800a334:	2301      	movs	r3, #1
 800a336:	603b      	str	r3, [r7, #0]
 800a338:	2005      	movs	r0, #5
 800a33a:	e026      	b.n	800a38a <__hexnan+0x132>
 800a33c:	3501      	adds	r5, #1
 800a33e:	2d08      	cmp	r5, #8
 800a340:	f10b 0b01 	add.w	fp, fp, #1
 800a344:	dd06      	ble.n	800a354 <__hexnan+0xfc>
 800a346:	4544      	cmp	r4, r8
 800a348:	d9c3      	bls.n	800a2d2 <__hexnan+0x7a>
 800a34a:	2300      	movs	r3, #0
 800a34c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a350:	2501      	movs	r5, #1
 800a352:	3c04      	subs	r4, #4
 800a354:	6822      	ldr	r2, [r4, #0]
 800a356:	f000 000f 	and.w	r0, r0, #15
 800a35a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a35e:	6022      	str	r2, [r4, #0]
 800a360:	e7b7      	b.n	800a2d2 <__hexnan+0x7a>
 800a362:	2508      	movs	r5, #8
 800a364:	e7b5      	b.n	800a2d2 <__hexnan+0x7a>
 800a366:	9b01      	ldr	r3, [sp, #4]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d0df      	beq.n	800a32c <__hexnan+0xd4>
 800a36c:	f04f 32ff 	mov.w	r2, #4294967295
 800a370:	f1c3 0320 	rsb	r3, r3, #32
 800a374:	fa22 f303 	lsr.w	r3, r2, r3
 800a378:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a37c:	401a      	ands	r2, r3
 800a37e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a382:	e7d3      	b.n	800a32c <__hexnan+0xd4>
 800a384:	3f04      	subs	r7, #4
 800a386:	e7d1      	b.n	800a32c <__hexnan+0xd4>
 800a388:	2004      	movs	r0, #4
 800a38a:	b007      	add	sp, #28
 800a38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a390 <_localeconv_r>:
 800a390:	4800      	ldr	r0, [pc, #0]	; (800a394 <_localeconv_r+0x4>)
 800a392:	4770      	bx	lr
 800a394:	20000168 	.word	0x20000168

0800a398 <__retarget_lock_init_recursive>:
 800a398:	4770      	bx	lr

0800a39a <__retarget_lock_acquire_recursive>:
 800a39a:	4770      	bx	lr

0800a39c <__retarget_lock_release_recursive>:
 800a39c:	4770      	bx	lr

0800a39e <__swhatbuf_r>:
 800a39e:	b570      	push	{r4, r5, r6, lr}
 800a3a0:	460e      	mov	r6, r1
 800a3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3a6:	2900      	cmp	r1, #0
 800a3a8:	b096      	sub	sp, #88	; 0x58
 800a3aa:	4614      	mov	r4, r2
 800a3ac:	461d      	mov	r5, r3
 800a3ae:	da08      	bge.n	800a3c2 <__swhatbuf_r+0x24>
 800a3b0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	061a      	lsls	r2, r3, #24
 800a3ba:	d410      	bmi.n	800a3de <__swhatbuf_r+0x40>
 800a3bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c0:	e00e      	b.n	800a3e0 <__swhatbuf_r+0x42>
 800a3c2:	466a      	mov	r2, sp
 800a3c4:	f001 f9b6 	bl	800b734 <_fstat_r>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	dbf1      	blt.n	800a3b0 <__swhatbuf_r+0x12>
 800a3cc:	9a01      	ldr	r2, [sp, #4]
 800a3ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a3d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a3d6:	425a      	negs	r2, r3
 800a3d8:	415a      	adcs	r2, r3
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	e7ee      	b.n	800a3bc <__swhatbuf_r+0x1e>
 800a3de:	2340      	movs	r3, #64	; 0x40
 800a3e0:	2000      	movs	r0, #0
 800a3e2:	6023      	str	r3, [r4, #0]
 800a3e4:	b016      	add	sp, #88	; 0x58
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}

0800a3e8 <__smakebuf_r>:
 800a3e8:	898b      	ldrh	r3, [r1, #12]
 800a3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a3ec:	079d      	lsls	r5, r3, #30
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	460c      	mov	r4, r1
 800a3f2:	d507      	bpl.n	800a404 <__smakebuf_r+0x1c>
 800a3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a3f8:	6023      	str	r3, [r4, #0]
 800a3fa:	6123      	str	r3, [r4, #16]
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	b002      	add	sp, #8
 800a402:	bd70      	pop	{r4, r5, r6, pc}
 800a404:	ab01      	add	r3, sp, #4
 800a406:	466a      	mov	r2, sp
 800a408:	f7ff ffc9 	bl	800a39e <__swhatbuf_r>
 800a40c:	9900      	ldr	r1, [sp, #0]
 800a40e:	4605      	mov	r5, r0
 800a410:	4630      	mov	r0, r6
 800a412:	f000 fd95 	bl	800af40 <_malloc_r>
 800a416:	b948      	cbnz	r0, 800a42c <__smakebuf_r+0x44>
 800a418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a41c:	059a      	lsls	r2, r3, #22
 800a41e:	d4ef      	bmi.n	800a400 <__smakebuf_r+0x18>
 800a420:	f023 0303 	bic.w	r3, r3, #3
 800a424:	f043 0302 	orr.w	r3, r3, #2
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	e7e3      	b.n	800a3f4 <__smakebuf_r+0xc>
 800a42c:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <__smakebuf_r+0x7c>)
 800a42e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a430:	89a3      	ldrh	r3, [r4, #12]
 800a432:	6020      	str	r0, [r4, #0]
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	81a3      	strh	r3, [r4, #12]
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	6163      	str	r3, [r4, #20]
 800a43e:	9b01      	ldr	r3, [sp, #4]
 800a440:	6120      	str	r0, [r4, #16]
 800a442:	b15b      	cbz	r3, 800a45c <__smakebuf_r+0x74>
 800a444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a448:	4630      	mov	r0, r6
 800a44a:	f001 f985 	bl	800b758 <_isatty_r>
 800a44e:	b128      	cbz	r0, 800a45c <__smakebuf_r+0x74>
 800a450:	89a3      	ldrh	r3, [r4, #12]
 800a452:	f023 0303 	bic.w	r3, r3, #3
 800a456:	f043 0301 	orr.w	r3, r3, #1
 800a45a:	81a3      	strh	r3, [r4, #12]
 800a45c:	89a0      	ldrh	r0, [r4, #12]
 800a45e:	4305      	orrs	r5, r0
 800a460:	81a5      	strh	r5, [r4, #12]
 800a462:	e7cd      	b.n	800a400 <__smakebuf_r+0x18>
 800a464:	08009b11 	.word	0x08009b11

0800a468 <malloc>:
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <malloc+0xc>)
 800a46a:	4601      	mov	r1, r0
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f000 bd67 	b.w	800af40 <_malloc_r>
 800a472:	bf00      	nop
 800a474:	20000010 	.word	0x20000010

0800a478 <__ascii_mbtowc>:
 800a478:	b082      	sub	sp, #8
 800a47a:	b901      	cbnz	r1, 800a47e <__ascii_mbtowc+0x6>
 800a47c:	a901      	add	r1, sp, #4
 800a47e:	b142      	cbz	r2, 800a492 <__ascii_mbtowc+0x1a>
 800a480:	b14b      	cbz	r3, 800a496 <__ascii_mbtowc+0x1e>
 800a482:	7813      	ldrb	r3, [r2, #0]
 800a484:	600b      	str	r3, [r1, #0]
 800a486:	7812      	ldrb	r2, [r2, #0]
 800a488:	1e10      	subs	r0, r2, #0
 800a48a:	bf18      	it	ne
 800a48c:	2001      	movne	r0, #1
 800a48e:	b002      	add	sp, #8
 800a490:	4770      	bx	lr
 800a492:	4610      	mov	r0, r2
 800a494:	e7fb      	b.n	800a48e <__ascii_mbtowc+0x16>
 800a496:	f06f 0001 	mvn.w	r0, #1
 800a49a:	e7f8      	b.n	800a48e <__ascii_mbtowc+0x16>

0800a49c <memcpy>:
 800a49c:	440a      	add	r2, r1
 800a49e:	4291      	cmp	r1, r2
 800a4a0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4a4:	d100      	bne.n	800a4a8 <memcpy+0xc>
 800a4a6:	4770      	bx	lr
 800a4a8:	b510      	push	{r4, lr}
 800a4aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4b2:	4291      	cmp	r1, r2
 800a4b4:	d1f9      	bne.n	800a4aa <memcpy+0xe>
 800a4b6:	bd10      	pop	{r4, pc}

0800a4b8 <_Balloc>:
 800a4b8:	b570      	push	{r4, r5, r6, lr}
 800a4ba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a4bc:	4604      	mov	r4, r0
 800a4be:	460d      	mov	r5, r1
 800a4c0:	b976      	cbnz	r6, 800a4e0 <_Balloc+0x28>
 800a4c2:	2010      	movs	r0, #16
 800a4c4:	f7ff ffd0 	bl	800a468 <malloc>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	6260      	str	r0, [r4, #36]	; 0x24
 800a4cc:	b920      	cbnz	r0, 800a4d8 <_Balloc+0x20>
 800a4ce:	4b18      	ldr	r3, [pc, #96]	; (800a530 <_Balloc+0x78>)
 800a4d0:	4818      	ldr	r0, [pc, #96]	; (800a534 <_Balloc+0x7c>)
 800a4d2:	2166      	movs	r1, #102	; 0x66
 800a4d4:	f001 f8ee 	bl	800b6b4 <__assert_func>
 800a4d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4dc:	6006      	str	r6, [r0, #0]
 800a4de:	60c6      	str	r6, [r0, #12]
 800a4e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a4e2:	68f3      	ldr	r3, [r6, #12]
 800a4e4:	b183      	cbz	r3, 800a508 <_Balloc+0x50>
 800a4e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a4e8:	68db      	ldr	r3, [r3, #12]
 800a4ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4ee:	b9b8      	cbnz	r0, 800a520 <_Balloc+0x68>
 800a4f0:	2101      	movs	r1, #1
 800a4f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a4f6:	1d72      	adds	r2, r6, #5
 800a4f8:	0092      	lsls	r2, r2, #2
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 fc9d 	bl	800ae3a <_calloc_r>
 800a500:	b160      	cbz	r0, 800a51c <_Balloc+0x64>
 800a502:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a506:	e00e      	b.n	800a526 <_Balloc+0x6e>
 800a508:	2221      	movs	r2, #33	; 0x21
 800a50a:	2104      	movs	r1, #4
 800a50c:	4620      	mov	r0, r4
 800a50e:	f000 fc94 	bl	800ae3a <_calloc_r>
 800a512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a514:	60f0      	str	r0, [r6, #12]
 800a516:	68db      	ldr	r3, [r3, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e4      	bne.n	800a4e6 <_Balloc+0x2e>
 800a51c:	2000      	movs	r0, #0
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	6802      	ldr	r2, [r0, #0]
 800a522:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a526:	2300      	movs	r3, #0
 800a528:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a52c:	e7f7      	b.n	800a51e <_Balloc+0x66>
 800a52e:	bf00      	nop
 800a530:	0800bbce 	.word	0x0800bbce
 800a534:	0800bd30 	.word	0x0800bd30

0800a538 <_Bfree>:
 800a538:	b570      	push	{r4, r5, r6, lr}
 800a53a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a53c:	4605      	mov	r5, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b976      	cbnz	r6, 800a560 <_Bfree+0x28>
 800a542:	2010      	movs	r0, #16
 800a544:	f7ff ff90 	bl	800a468 <malloc>
 800a548:	4602      	mov	r2, r0
 800a54a:	6268      	str	r0, [r5, #36]	; 0x24
 800a54c:	b920      	cbnz	r0, 800a558 <_Bfree+0x20>
 800a54e:	4b09      	ldr	r3, [pc, #36]	; (800a574 <_Bfree+0x3c>)
 800a550:	4809      	ldr	r0, [pc, #36]	; (800a578 <_Bfree+0x40>)
 800a552:	218a      	movs	r1, #138	; 0x8a
 800a554:	f001 f8ae 	bl	800b6b4 <__assert_func>
 800a558:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a55c:	6006      	str	r6, [r0, #0]
 800a55e:	60c6      	str	r6, [r0, #12]
 800a560:	b13c      	cbz	r4, 800a572 <_Bfree+0x3a>
 800a562:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a564:	6862      	ldr	r2, [r4, #4]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a56c:	6021      	str	r1, [r4, #0]
 800a56e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a572:	bd70      	pop	{r4, r5, r6, pc}
 800a574:	0800bbce 	.word	0x0800bbce
 800a578:	0800bd30 	.word	0x0800bd30

0800a57c <__multadd>:
 800a57c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a580:	690d      	ldr	r5, [r1, #16]
 800a582:	4607      	mov	r7, r0
 800a584:	460c      	mov	r4, r1
 800a586:	461e      	mov	r6, r3
 800a588:	f101 0c14 	add.w	ip, r1, #20
 800a58c:	2000      	movs	r0, #0
 800a58e:	f8dc 3000 	ldr.w	r3, [ip]
 800a592:	b299      	uxth	r1, r3
 800a594:	fb02 6101 	mla	r1, r2, r1, r6
 800a598:	0c1e      	lsrs	r6, r3, #16
 800a59a:	0c0b      	lsrs	r3, r1, #16
 800a59c:	fb02 3306 	mla	r3, r2, r6, r3
 800a5a0:	b289      	uxth	r1, r1
 800a5a2:	3001      	adds	r0, #1
 800a5a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5a8:	4285      	cmp	r5, r0
 800a5aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a5ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5b2:	dcec      	bgt.n	800a58e <__multadd+0x12>
 800a5b4:	b30e      	cbz	r6, 800a5fa <__multadd+0x7e>
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	42ab      	cmp	r3, r5
 800a5ba:	dc19      	bgt.n	800a5f0 <__multadd+0x74>
 800a5bc:	6861      	ldr	r1, [r4, #4]
 800a5be:	4638      	mov	r0, r7
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	f7ff ff79 	bl	800a4b8 <_Balloc>
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__multadd+0x5a>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	4b0c      	ldr	r3, [pc, #48]	; (800a600 <__multadd+0x84>)
 800a5ce:	480d      	ldr	r0, [pc, #52]	; (800a604 <__multadd+0x88>)
 800a5d0:	21b5      	movs	r1, #181	; 0xb5
 800a5d2:	f001 f86f 	bl	800b6b4 <__assert_func>
 800a5d6:	6922      	ldr	r2, [r4, #16]
 800a5d8:	3202      	adds	r2, #2
 800a5da:	f104 010c 	add.w	r1, r4, #12
 800a5de:	0092      	lsls	r2, r2, #2
 800a5e0:	300c      	adds	r0, #12
 800a5e2:	f7ff ff5b 	bl	800a49c <memcpy>
 800a5e6:	4621      	mov	r1, r4
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ffa5 	bl	800a538 <_Bfree>
 800a5ee:	4644      	mov	r4, r8
 800a5f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	615e      	str	r6, [r3, #20]
 800a5f8:	6125      	str	r5, [r4, #16]
 800a5fa:	4620      	mov	r0, r4
 800a5fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a600:	0800bc40 	.word	0x0800bc40
 800a604:	0800bd30 	.word	0x0800bd30

0800a608 <__s2b>:
 800a608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a60c:	460c      	mov	r4, r1
 800a60e:	4615      	mov	r5, r2
 800a610:	461f      	mov	r7, r3
 800a612:	2209      	movs	r2, #9
 800a614:	3308      	adds	r3, #8
 800a616:	4606      	mov	r6, r0
 800a618:	fb93 f3f2 	sdiv	r3, r3, r2
 800a61c:	2100      	movs	r1, #0
 800a61e:	2201      	movs	r2, #1
 800a620:	429a      	cmp	r2, r3
 800a622:	db09      	blt.n	800a638 <__s2b+0x30>
 800a624:	4630      	mov	r0, r6
 800a626:	f7ff ff47 	bl	800a4b8 <_Balloc>
 800a62a:	b940      	cbnz	r0, 800a63e <__s2b+0x36>
 800a62c:	4602      	mov	r2, r0
 800a62e:	4b19      	ldr	r3, [pc, #100]	; (800a694 <__s2b+0x8c>)
 800a630:	4819      	ldr	r0, [pc, #100]	; (800a698 <__s2b+0x90>)
 800a632:	21ce      	movs	r1, #206	; 0xce
 800a634:	f001 f83e 	bl	800b6b4 <__assert_func>
 800a638:	0052      	lsls	r2, r2, #1
 800a63a:	3101      	adds	r1, #1
 800a63c:	e7f0      	b.n	800a620 <__s2b+0x18>
 800a63e:	9b08      	ldr	r3, [sp, #32]
 800a640:	6143      	str	r3, [r0, #20]
 800a642:	2d09      	cmp	r5, #9
 800a644:	f04f 0301 	mov.w	r3, #1
 800a648:	6103      	str	r3, [r0, #16]
 800a64a:	dd16      	ble.n	800a67a <__s2b+0x72>
 800a64c:	f104 0909 	add.w	r9, r4, #9
 800a650:	46c8      	mov	r8, r9
 800a652:	442c      	add	r4, r5
 800a654:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a658:	4601      	mov	r1, r0
 800a65a:	3b30      	subs	r3, #48	; 0x30
 800a65c:	220a      	movs	r2, #10
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff8c 	bl	800a57c <__multadd>
 800a664:	45a0      	cmp	r8, r4
 800a666:	d1f5      	bne.n	800a654 <__s2b+0x4c>
 800a668:	f1a5 0408 	sub.w	r4, r5, #8
 800a66c:	444c      	add	r4, r9
 800a66e:	1b2d      	subs	r5, r5, r4
 800a670:	1963      	adds	r3, r4, r5
 800a672:	42bb      	cmp	r3, r7
 800a674:	db04      	blt.n	800a680 <__s2b+0x78>
 800a676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67a:	340a      	adds	r4, #10
 800a67c:	2509      	movs	r5, #9
 800a67e:	e7f6      	b.n	800a66e <__s2b+0x66>
 800a680:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a684:	4601      	mov	r1, r0
 800a686:	3b30      	subs	r3, #48	; 0x30
 800a688:	220a      	movs	r2, #10
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ff76 	bl	800a57c <__multadd>
 800a690:	e7ee      	b.n	800a670 <__s2b+0x68>
 800a692:	bf00      	nop
 800a694:	0800bc40 	.word	0x0800bc40
 800a698:	0800bd30 	.word	0x0800bd30

0800a69c <__hi0bits>:
 800a69c:	0c03      	lsrs	r3, r0, #16
 800a69e:	041b      	lsls	r3, r3, #16
 800a6a0:	b9d3      	cbnz	r3, 800a6d8 <__hi0bits+0x3c>
 800a6a2:	0400      	lsls	r0, r0, #16
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6aa:	bf04      	itt	eq
 800a6ac:	0200      	lsleq	r0, r0, #8
 800a6ae:	3308      	addeq	r3, #8
 800a6b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6b4:	bf04      	itt	eq
 800a6b6:	0100      	lsleq	r0, r0, #4
 800a6b8:	3304      	addeq	r3, #4
 800a6ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6be:	bf04      	itt	eq
 800a6c0:	0080      	lsleq	r0, r0, #2
 800a6c2:	3302      	addeq	r3, #2
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	db05      	blt.n	800a6d4 <__hi0bits+0x38>
 800a6c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6cc:	f103 0301 	add.w	r3, r3, #1
 800a6d0:	bf08      	it	eq
 800a6d2:	2320      	moveq	r3, #32
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	4770      	bx	lr
 800a6d8:	2300      	movs	r3, #0
 800a6da:	e7e4      	b.n	800a6a6 <__hi0bits+0xa>

0800a6dc <__lo0bits>:
 800a6dc:	6803      	ldr	r3, [r0, #0]
 800a6de:	f013 0207 	ands.w	r2, r3, #7
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	d00b      	beq.n	800a6fe <__lo0bits+0x22>
 800a6e6:	07da      	lsls	r2, r3, #31
 800a6e8:	d423      	bmi.n	800a732 <__lo0bits+0x56>
 800a6ea:	0798      	lsls	r0, r3, #30
 800a6ec:	bf49      	itett	mi
 800a6ee:	085b      	lsrmi	r3, r3, #1
 800a6f0:	089b      	lsrpl	r3, r3, #2
 800a6f2:	2001      	movmi	r0, #1
 800a6f4:	600b      	strmi	r3, [r1, #0]
 800a6f6:	bf5c      	itt	pl
 800a6f8:	600b      	strpl	r3, [r1, #0]
 800a6fa:	2002      	movpl	r0, #2
 800a6fc:	4770      	bx	lr
 800a6fe:	b298      	uxth	r0, r3
 800a700:	b9a8      	cbnz	r0, 800a72e <__lo0bits+0x52>
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	2010      	movs	r0, #16
 800a706:	b2da      	uxtb	r2, r3
 800a708:	b90a      	cbnz	r2, 800a70e <__lo0bits+0x32>
 800a70a:	3008      	adds	r0, #8
 800a70c:	0a1b      	lsrs	r3, r3, #8
 800a70e:	071a      	lsls	r2, r3, #28
 800a710:	bf04      	itt	eq
 800a712:	091b      	lsreq	r3, r3, #4
 800a714:	3004      	addeq	r0, #4
 800a716:	079a      	lsls	r2, r3, #30
 800a718:	bf04      	itt	eq
 800a71a:	089b      	lsreq	r3, r3, #2
 800a71c:	3002      	addeq	r0, #2
 800a71e:	07da      	lsls	r2, r3, #31
 800a720:	d403      	bmi.n	800a72a <__lo0bits+0x4e>
 800a722:	085b      	lsrs	r3, r3, #1
 800a724:	f100 0001 	add.w	r0, r0, #1
 800a728:	d005      	beq.n	800a736 <__lo0bits+0x5a>
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	4770      	bx	lr
 800a72e:	4610      	mov	r0, r2
 800a730:	e7e9      	b.n	800a706 <__lo0bits+0x2a>
 800a732:	2000      	movs	r0, #0
 800a734:	4770      	bx	lr
 800a736:	2020      	movs	r0, #32
 800a738:	4770      	bx	lr
	...

0800a73c <__i2b>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	2101      	movs	r1, #1
 800a742:	f7ff feb9 	bl	800a4b8 <_Balloc>
 800a746:	4602      	mov	r2, r0
 800a748:	b928      	cbnz	r0, 800a756 <__i2b+0x1a>
 800a74a:	4b05      	ldr	r3, [pc, #20]	; (800a760 <__i2b+0x24>)
 800a74c:	4805      	ldr	r0, [pc, #20]	; (800a764 <__i2b+0x28>)
 800a74e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a752:	f000 ffaf 	bl	800b6b4 <__assert_func>
 800a756:	2301      	movs	r3, #1
 800a758:	6144      	str	r4, [r0, #20]
 800a75a:	6103      	str	r3, [r0, #16]
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	bf00      	nop
 800a760:	0800bc40 	.word	0x0800bc40
 800a764:	0800bd30 	.word	0x0800bd30

0800a768 <__multiply>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	4691      	mov	r9, r2
 800a76e:	690a      	ldr	r2, [r1, #16]
 800a770:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a774:	429a      	cmp	r2, r3
 800a776:	bfb8      	it	lt
 800a778:	460b      	movlt	r3, r1
 800a77a:	460c      	mov	r4, r1
 800a77c:	bfbc      	itt	lt
 800a77e:	464c      	movlt	r4, r9
 800a780:	4699      	movlt	r9, r3
 800a782:	6927      	ldr	r7, [r4, #16]
 800a784:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	6861      	ldr	r1, [r4, #4]
 800a78c:	eb07 060a 	add.w	r6, r7, sl
 800a790:	42b3      	cmp	r3, r6
 800a792:	b085      	sub	sp, #20
 800a794:	bfb8      	it	lt
 800a796:	3101      	addlt	r1, #1
 800a798:	f7ff fe8e 	bl	800a4b8 <_Balloc>
 800a79c:	b930      	cbnz	r0, 800a7ac <__multiply+0x44>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	4b44      	ldr	r3, [pc, #272]	; (800a8b4 <__multiply+0x14c>)
 800a7a2:	4845      	ldr	r0, [pc, #276]	; (800a8b8 <__multiply+0x150>)
 800a7a4:	f240 115d 	movw	r1, #349	; 0x15d
 800a7a8:	f000 ff84 	bl	800b6b4 <__assert_func>
 800a7ac:	f100 0514 	add.w	r5, r0, #20
 800a7b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4543      	cmp	r3, r8
 800a7ba:	d321      	bcc.n	800a800 <__multiply+0x98>
 800a7bc:	f104 0314 	add.w	r3, r4, #20
 800a7c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7c4:	f109 0314 	add.w	r3, r9, #20
 800a7c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7cc:	9202      	str	r2, [sp, #8]
 800a7ce:	1b3a      	subs	r2, r7, r4
 800a7d0:	3a15      	subs	r2, #21
 800a7d2:	f022 0203 	bic.w	r2, r2, #3
 800a7d6:	3204      	adds	r2, #4
 800a7d8:	f104 0115 	add.w	r1, r4, #21
 800a7dc:	428f      	cmp	r7, r1
 800a7de:	bf38      	it	cc
 800a7e0:	2204      	movcc	r2, #4
 800a7e2:	9201      	str	r2, [sp, #4]
 800a7e4:	9a02      	ldr	r2, [sp, #8]
 800a7e6:	9303      	str	r3, [sp, #12]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	d80c      	bhi.n	800a806 <__multiply+0x9e>
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	dd03      	ble.n	800a7f8 <__multiply+0x90>
 800a7f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d05a      	beq.n	800a8ae <__multiply+0x146>
 800a7f8:	6106      	str	r6, [r0, #16]
 800a7fa:	b005      	add	sp, #20
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	f843 2b04 	str.w	r2, [r3], #4
 800a804:	e7d8      	b.n	800a7b8 <__multiply+0x50>
 800a806:	f8b3 a000 	ldrh.w	sl, [r3]
 800a80a:	f1ba 0f00 	cmp.w	sl, #0
 800a80e:	d024      	beq.n	800a85a <__multiply+0xf2>
 800a810:	f104 0e14 	add.w	lr, r4, #20
 800a814:	46a9      	mov	r9, r5
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a81e:	f8d9 1000 	ldr.w	r1, [r9]
 800a822:	fa1f fb82 	uxth.w	fp, r2
 800a826:	b289      	uxth	r1, r1
 800a828:	fb0a 110b 	mla	r1, sl, fp, r1
 800a82c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a830:	f8d9 2000 	ldr.w	r2, [r9]
 800a834:	4461      	add	r1, ip
 800a836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a83a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a83e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a842:	b289      	uxth	r1, r1
 800a844:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a848:	4577      	cmp	r7, lr
 800a84a:	f849 1b04 	str.w	r1, [r9], #4
 800a84e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a852:	d8e2      	bhi.n	800a81a <__multiply+0xb2>
 800a854:	9a01      	ldr	r2, [sp, #4]
 800a856:	f845 c002 	str.w	ip, [r5, r2]
 800a85a:	9a03      	ldr	r2, [sp, #12]
 800a85c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a860:	3304      	adds	r3, #4
 800a862:	f1b9 0f00 	cmp.w	r9, #0
 800a866:	d020      	beq.n	800a8aa <__multiply+0x142>
 800a868:	6829      	ldr	r1, [r5, #0]
 800a86a:	f104 0c14 	add.w	ip, r4, #20
 800a86e:	46ae      	mov	lr, r5
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	f8bc b000 	ldrh.w	fp, [ip]
 800a878:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a87c:	fb09 220b 	mla	r2, r9, fp, r2
 800a880:	4492      	add	sl, r2
 800a882:	b289      	uxth	r1, r1
 800a884:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a888:	f84e 1b04 	str.w	r1, [lr], #4
 800a88c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a890:	f8be 1000 	ldrh.w	r1, [lr]
 800a894:	0c12      	lsrs	r2, r2, #16
 800a896:	fb09 1102 	mla	r1, r9, r2, r1
 800a89a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a89e:	4567      	cmp	r7, ip
 800a8a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8a4:	d8e6      	bhi.n	800a874 <__multiply+0x10c>
 800a8a6:	9a01      	ldr	r2, [sp, #4]
 800a8a8:	50a9      	str	r1, [r5, r2]
 800a8aa:	3504      	adds	r5, #4
 800a8ac:	e79a      	b.n	800a7e4 <__multiply+0x7c>
 800a8ae:	3e01      	subs	r6, #1
 800a8b0:	e79c      	b.n	800a7ec <__multiply+0x84>
 800a8b2:	bf00      	nop
 800a8b4:	0800bc40 	.word	0x0800bc40
 800a8b8:	0800bd30 	.word	0x0800bd30

0800a8bc <__pow5mult>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	4615      	mov	r5, r2
 800a8c2:	f012 0203 	ands.w	r2, r2, #3
 800a8c6:	4606      	mov	r6, r0
 800a8c8:	460f      	mov	r7, r1
 800a8ca:	d007      	beq.n	800a8dc <__pow5mult+0x20>
 800a8cc:	4c25      	ldr	r4, [pc, #148]	; (800a964 <__pow5mult+0xa8>)
 800a8ce:	3a01      	subs	r2, #1
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8d6:	f7ff fe51 	bl	800a57c <__multadd>
 800a8da:	4607      	mov	r7, r0
 800a8dc:	10ad      	asrs	r5, r5, #2
 800a8de:	d03d      	beq.n	800a95c <__pow5mult+0xa0>
 800a8e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a8e2:	b97c      	cbnz	r4, 800a904 <__pow5mult+0x48>
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f7ff fdbf 	bl	800a468 <malloc>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a8ee:	b928      	cbnz	r0, 800a8fc <__pow5mult+0x40>
 800a8f0:	4b1d      	ldr	r3, [pc, #116]	; (800a968 <__pow5mult+0xac>)
 800a8f2:	481e      	ldr	r0, [pc, #120]	; (800a96c <__pow5mult+0xb0>)
 800a8f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a8f8:	f000 fedc 	bl	800b6b4 <__assert_func>
 800a8fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a900:	6004      	str	r4, [r0, #0]
 800a902:	60c4      	str	r4, [r0, #12]
 800a904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a90c:	b94c      	cbnz	r4, 800a922 <__pow5mult+0x66>
 800a90e:	f240 2171 	movw	r1, #625	; 0x271
 800a912:	4630      	mov	r0, r6
 800a914:	f7ff ff12 	bl	800a73c <__i2b>
 800a918:	2300      	movs	r3, #0
 800a91a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a91e:	4604      	mov	r4, r0
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	07eb      	lsls	r3, r5, #31
 800a928:	d50a      	bpl.n	800a940 <__pow5mult+0x84>
 800a92a:	4639      	mov	r1, r7
 800a92c:	4622      	mov	r2, r4
 800a92e:	4630      	mov	r0, r6
 800a930:	f7ff ff1a 	bl	800a768 <__multiply>
 800a934:	4639      	mov	r1, r7
 800a936:	4680      	mov	r8, r0
 800a938:	4630      	mov	r0, r6
 800a93a:	f7ff fdfd 	bl	800a538 <_Bfree>
 800a93e:	4647      	mov	r7, r8
 800a940:	106d      	asrs	r5, r5, #1
 800a942:	d00b      	beq.n	800a95c <__pow5mult+0xa0>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	b938      	cbnz	r0, 800a958 <__pow5mult+0x9c>
 800a948:	4622      	mov	r2, r4
 800a94a:	4621      	mov	r1, r4
 800a94c:	4630      	mov	r0, r6
 800a94e:	f7ff ff0b 	bl	800a768 <__multiply>
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f8c0 9000 	str.w	r9, [r0]
 800a958:	4604      	mov	r4, r0
 800a95a:	e7e4      	b.n	800a926 <__pow5mult+0x6a>
 800a95c:	4638      	mov	r0, r7
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a962:	bf00      	nop
 800a964:	0800be80 	.word	0x0800be80
 800a968:	0800bbce 	.word	0x0800bbce
 800a96c:	0800bd30 	.word	0x0800bd30

0800a970 <__lshift>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	460c      	mov	r4, r1
 800a976:	6849      	ldr	r1, [r1, #4]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	4607      	mov	r7, r0
 800a982:	4691      	mov	r9, r2
 800a984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a988:	f108 0601 	add.w	r6, r8, #1
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	db0b      	blt.n	800a9a8 <__lshift+0x38>
 800a990:	4638      	mov	r0, r7
 800a992:	f7ff fd91 	bl	800a4b8 <_Balloc>
 800a996:	4605      	mov	r5, r0
 800a998:	b948      	cbnz	r0, 800a9ae <__lshift+0x3e>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b2a      	ldr	r3, [pc, #168]	; (800aa48 <__lshift+0xd8>)
 800a99e:	482b      	ldr	r0, [pc, #172]	; (800aa4c <__lshift+0xdc>)
 800a9a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a9a4:	f000 fe86 	bl	800b6b4 <__assert_func>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	e7ee      	b.n	800a98c <__lshift+0x1c>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f100 0114 	add.w	r1, r0, #20
 800a9b4:	f100 0210 	add.w	r2, r0, #16
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4553      	cmp	r3, sl
 800a9bc:	db37      	blt.n	800aa2e <__lshift+0xbe>
 800a9be:	6920      	ldr	r0, [r4, #16]
 800a9c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9c4:	f104 0314 	add.w	r3, r4, #20
 800a9c8:	f019 091f 	ands.w	r9, r9, #31
 800a9cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a9d4:	d02f      	beq.n	800aa36 <__lshift+0xc6>
 800a9d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9da:	468a      	mov	sl, r1
 800a9dc:	f04f 0c00 	mov.w	ip, #0
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	fa02 f209 	lsl.w	r2, r2, r9
 800a9e6:	ea42 020c 	orr.w	r2, r2, ip
 800a9ea:	f84a 2b04 	str.w	r2, [sl], #4
 800a9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f2:	4298      	cmp	r0, r3
 800a9f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a9f8:	d8f2      	bhi.n	800a9e0 <__lshift+0x70>
 800a9fa:	1b03      	subs	r3, r0, r4
 800a9fc:	3b15      	subs	r3, #21
 800a9fe:	f023 0303 	bic.w	r3, r3, #3
 800aa02:	3304      	adds	r3, #4
 800aa04:	f104 0215 	add.w	r2, r4, #21
 800aa08:	4290      	cmp	r0, r2
 800aa0a:	bf38      	it	cc
 800aa0c:	2304      	movcc	r3, #4
 800aa0e:	f841 c003 	str.w	ip, [r1, r3]
 800aa12:	f1bc 0f00 	cmp.w	ip, #0
 800aa16:	d001      	beq.n	800aa1c <__lshift+0xac>
 800aa18:	f108 0602 	add.w	r6, r8, #2
 800aa1c:	3e01      	subs	r6, #1
 800aa1e:	4638      	mov	r0, r7
 800aa20:	612e      	str	r6, [r5, #16]
 800aa22:	4621      	mov	r1, r4
 800aa24:	f7ff fd88 	bl	800a538 <_Bfree>
 800aa28:	4628      	mov	r0, r5
 800aa2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa32:	3301      	adds	r3, #1
 800aa34:	e7c1      	b.n	800a9ba <__lshift+0x4a>
 800aa36:	3904      	subs	r1, #4
 800aa38:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa40:	4298      	cmp	r0, r3
 800aa42:	d8f9      	bhi.n	800aa38 <__lshift+0xc8>
 800aa44:	e7ea      	b.n	800aa1c <__lshift+0xac>
 800aa46:	bf00      	nop
 800aa48:	0800bc40 	.word	0x0800bc40
 800aa4c:	0800bd30 	.word	0x0800bd30

0800aa50 <__mcmp>:
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	6902      	ldr	r2, [r0, #16]
 800aa54:	690c      	ldr	r4, [r1, #16]
 800aa56:	1b12      	subs	r2, r2, r4
 800aa58:	d10e      	bne.n	800aa78 <__mcmp+0x28>
 800aa5a:	f100 0314 	add.w	r3, r0, #20
 800aa5e:	3114      	adds	r1, #20
 800aa60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa70:	42a5      	cmp	r5, r4
 800aa72:	d003      	beq.n	800aa7c <__mcmp+0x2c>
 800aa74:	d305      	bcc.n	800aa82 <__mcmp+0x32>
 800aa76:	2201      	movs	r2, #1
 800aa78:	4610      	mov	r0, r2
 800aa7a:	bd30      	pop	{r4, r5, pc}
 800aa7c:	4283      	cmp	r3, r0
 800aa7e:	d3f3      	bcc.n	800aa68 <__mcmp+0x18>
 800aa80:	e7fa      	b.n	800aa78 <__mcmp+0x28>
 800aa82:	f04f 32ff 	mov.w	r2, #4294967295
 800aa86:	e7f7      	b.n	800aa78 <__mcmp+0x28>

0800aa88 <__mdiff>:
 800aa88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	4606      	mov	r6, r0
 800aa90:	4611      	mov	r1, r2
 800aa92:	4620      	mov	r0, r4
 800aa94:	4690      	mov	r8, r2
 800aa96:	f7ff ffdb 	bl	800aa50 <__mcmp>
 800aa9a:	1e05      	subs	r5, r0, #0
 800aa9c:	d110      	bne.n	800aac0 <__mdiff+0x38>
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	4630      	mov	r0, r6
 800aaa2:	f7ff fd09 	bl	800a4b8 <_Balloc>
 800aaa6:	b930      	cbnz	r0, 800aab6 <__mdiff+0x2e>
 800aaa8:	4b3a      	ldr	r3, [pc, #232]	; (800ab94 <__mdiff+0x10c>)
 800aaaa:	4602      	mov	r2, r0
 800aaac:	f240 2132 	movw	r1, #562	; 0x232
 800aab0:	4839      	ldr	r0, [pc, #228]	; (800ab98 <__mdiff+0x110>)
 800aab2:	f000 fdff 	bl	800b6b4 <__assert_func>
 800aab6:	2301      	movs	r3, #1
 800aab8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aabc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac0:	bfa4      	itt	ge
 800aac2:	4643      	movge	r3, r8
 800aac4:	46a0      	movge	r8, r4
 800aac6:	4630      	mov	r0, r6
 800aac8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aacc:	bfa6      	itte	ge
 800aace:	461c      	movge	r4, r3
 800aad0:	2500      	movge	r5, #0
 800aad2:	2501      	movlt	r5, #1
 800aad4:	f7ff fcf0 	bl	800a4b8 <_Balloc>
 800aad8:	b920      	cbnz	r0, 800aae4 <__mdiff+0x5c>
 800aada:	4b2e      	ldr	r3, [pc, #184]	; (800ab94 <__mdiff+0x10c>)
 800aadc:	4602      	mov	r2, r0
 800aade:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aae2:	e7e5      	b.n	800aab0 <__mdiff+0x28>
 800aae4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aae8:	6926      	ldr	r6, [r4, #16]
 800aaea:	60c5      	str	r5, [r0, #12]
 800aaec:	f104 0914 	add.w	r9, r4, #20
 800aaf0:	f108 0514 	add.w	r5, r8, #20
 800aaf4:	f100 0e14 	add.w	lr, r0, #20
 800aaf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800aafc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab00:	f108 0210 	add.w	r2, r8, #16
 800ab04:	46f2      	mov	sl, lr
 800ab06:	2100      	movs	r1, #0
 800ab08:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab10:	fa1f f883 	uxth.w	r8, r3
 800ab14:	fa11 f18b 	uxtah	r1, r1, fp
 800ab18:	0c1b      	lsrs	r3, r3, #16
 800ab1a:	eba1 0808 	sub.w	r8, r1, r8
 800ab1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab26:	fa1f f888 	uxth.w	r8, r8
 800ab2a:	1419      	asrs	r1, r3, #16
 800ab2c:	454e      	cmp	r6, r9
 800ab2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab32:	f84a 3b04 	str.w	r3, [sl], #4
 800ab36:	d8e7      	bhi.n	800ab08 <__mdiff+0x80>
 800ab38:	1b33      	subs	r3, r6, r4
 800ab3a:	3b15      	subs	r3, #21
 800ab3c:	f023 0303 	bic.w	r3, r3, #3
 800ab40:	3304      	adds	r3, #4
 800ab42:	3415      	adds	r4, #21
 800ab44:	42a6      	cmp	r6, r4
 800ab46:	bf38      	it	cc
 800ab48:	2304      	movcc	r3, #4
 800ab4a:	441d      	add	r5, r3
 800ab4c:	4473      	add	r3, lr
 800ab4e:	469e      	mov	lr, r3
 800ab50:	462e      	mov	r6, r5
 800ab52:	4566      	cmp	r6, ip
 800ab54:	d30e      	bcc.n	800ab74 <__mdiff+0xec>
 800ab56:	f10c 0203 	add.w	r2, ip, #3
 800ab5a:	1b52      	subs	r2, r2, r5
 800ab5c:	f022 0203 	bic.w	r2, r2, #3
 800ab60:	3d03      	subs	r5, #3
 800ab62:	45ac      	cmp	ip, r5
 800ab64:	bf38      	it	cc
 800ab66:	2200      	movcc	r2, #0
 800ab68:	441a      	add	r2, r3
 800ab6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ab6e:	b17b      	cbz	r3, 800ab90 <__mdiff+0x108>
 800ab70:	6107      	str	r7, [r0, #16]
 800ab72:	e7a3      	b.n	800aabc <__mdiff+0x34>
 800ab74:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab78:	fa11 f288 	uxtah	r2, r1, r8
 800ab7c:	1414      	asrs	r4, r2, #16
 800ab7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab82:	b292      	uxth	r2, r2
 800ab84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab88:	f84e 2b04 	str.w	r2, [lr], #4
 800ab8c:	1421      	asrs	r1, r4, #16
 800ab8e:	e7e0      	b.n	800ab52 <__mdiff+0xca>
 800ab90:	3f01      	subs	r7, #1
 800ab92:	e7ea      	b.n	800ab6a <__mdiff+0xe2>
 800ab94:	0800bc40 	.word	0x0800bc40
 800ab98:	0800bd30 	.word	0x0800bd30

0800ab9c <__ulp>:
 800ab9c:	b082      	sub	sp, #8
 800ab9e:	ed8d 0b00 	vstr	d0, [sp]
 800aba2:	9b01      	ldr	r3, [sp, #4]
 800aba4:	4912      	ldr	r1, [pc, #72]	; (800abf0 <__ulp+0x54>)
 800aba6:	4019      	ands	r1, r3
 800aba8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800abac:	2900      	cmp	r1, #0
 800abae:	dd05      	ble.n	800abbc <__ulp+0x20>
 800abb0:	2200      	movs	r2, #0
 800abb2:	460b      	mov	r3, r1
 800abb4:	ec43 2b10 	vmov	d0, r2, r3
 800abb8:	b002      	add	sp, #8
 800abba:	4770      	bx	lr
 800abbc:	4249      	negs	r1, r1
 800abbe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800abc2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	f04f 0300 	mov.w	r3, #0
 800abce:	da04      	bge.n	800abda <__ulp+0x3e>
 800abd0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800abd4:	fa41 f300 	asr.w	r3, r1, r0
 800abd8:	e7ec      	b.n	800abb4 <__ulp+0x18>
 800abda:	f1a0 0114 	sub.w	r1, r0, #20
 800abde:	291e      	cmp	r1, #30
 800abe0:	bfda      	itte	le
 800abe2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800abe6:	fa20 f101 	lsrle.w	r1, r0, r1
 800abea:	2101      	movgt	r1, #1
 800abec:	460a      	mov	r2, r1
 800abee:	e7e1      	b.n	800abb4 <__ulp+0x18>
 800abf0:	7ff00000 	.word	0x7ff00000

0800abf4 <__b2d>:
 800abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abf6:	6905      	ldr	r5, [r0, #16]
 800abf8:	f100 0714 	add.w	r7, r0, #20
 800abfc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ac00:	1f2e      	subs	r6, r5, #4
 800ac02:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ac06:	4620      	mov	r0, r4
 800ac08:	f7ff fd48 	bl	800a69c <__hi0bits>
 800ac0c:	f1c0 0320 	rsb	r3, r0, #32
 800ac10:	280a      	cmp	r0, #10
 800ac12:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ac90 <__b2d+0x9c>
 800ac16:	600b      	str	r3, [r1, #0]
 800ac18:	dc14      	bgt.n	800ac44 <__b2d+0x50>
 800ac1a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ac1e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ac22:	42b7      	cmp	r7, r6
 800ac24:	ea41 030c 	orr.w	r3, r1, ip
 800ac28:	bf34      	ite	cc
 800ac2a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac2e:	2100      	movcs	r1, #0
 800ac30:	3015      	adds	r0, #21
 800ac32:	fa04 f000 	lsl.w	r0, r4, r0
 800ac36:	fa21 f10e 	lsr.w	r1, r1, lr
 800ac3a:	ea40 0201 	orr.w	r2, r0, r1
 800ac3e:	ec43 2b10 	vmov	d0, r2, r3
 800ac42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac44:	42b7      	cmp	r7, r6
 800ac46:	bf3a      	itte	cc
 800ac48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ac4c:	f1a5 0608 	subcc.w	r6, r5, #8
 800ac50:	2100      	movcs	r1, #0
 800ac52:	380b      	subs	r0, #11
 800ac54:	d017      	beq.n	800ac86 <__b2d+0x92>
 800ac56:	f1c0 0c20 	rsb	ip, r0, #32
 800ac5a:	fa04 f500 	lsl.w	r5, r4, r0
 800ac5e:	42be      	cmp	r6, r7
 800ac60:	fa21 f40c 	lsr.w	r4, r1, ip
 800ac64:	ea45 0504 	orr.w	r5, r5, r4
 800ac68:	bf8c      	ite	hi
 800ac6a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ac6e:	2400      	movls	r4, #0
 800ac70:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ac74:	fa01 f000 	lsl.w	r0, r1, r0
 800ac78:	fa24 f40c 	lsr.w	r4, r4, ip
 800ac7c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ac80:	ea40 0204 	orr.w	r2, r0, r4
 800ac84:	e7db      	b.n	800ac3e <__b2d+0x4a>
 800ac86:	ea44 030c 	orr.w	r3, r4, ip
 800ac8a:	460a      	mov	r2, r1
 800ac8c:	e7d7      	b.n	800ac3e <__b2d+0x4a>
 800ac8e:	bf00      	nop
 800ac90:	3ff00000 	.word	0x3ff00000

0800ac94 <__d2b>:
 800ac94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	4689      	mov	r9, r1
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	ec57 6b10 	vmov	r6, r7, d0
 800aca0:	4690      	mov	r8, r2
 800aca2:	f7ff fc09 	bl	800a4b8 <_Balloc>
 800aca6:	4604      	mov	r4, r0
 800aca8:	b930      	cbnz	r0, 800acb8 <__d2b+0x24>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b25      	ldr	r3, [pc, #148]	; (800ad44 <__d2b+0xb0>)
 800acae:	4826      	ldr	r0, [pc, #152]	; (800ad48 <__d2b+0xb4>)
 800acb0:	f240 310a 	movw	r1, #778	; 0x30a
 800acb4:	f000 fcfe 	bl	800b6b4 <__assert_func>
 800acb8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800acbc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acc0:	bb35      	cbnz	r5, 800ad10 <__d2b+0x7c>
 800acc2:	2e00      	cmp	r6, #0
 800acc4:	9301      	str	r3, [sp, #4]
 800acc6:	d028      	beq.n	800ad1a <__d2b+0x86>
 800acc8:	4668      	mov	r0, sp
 800acca:	9600      	str	r6, [sp, #0]
 800accc:	f7ff fd06 	bl	800a6dc <__lo0bits>
 800acd0:	9900      	ldr	r1, [sp, #0]
 800acd2:	b300      	cbz	r0, 800ad16 <__d2b+0x82>
 800acd4:	9a01      	ldr	r2, [sp, #4]
 800acd6:	f1c0 0320 	rsb	r3, r0, #32
 800acda:	fa02 f303 	lsl.w	r3, r2, r3
 800acde:	430b      	orrs	r3, r1
 800ace0:	40c2      	lsrs	r2, r0
 800ace2:	6163      	str	r3, [r4, #20]
 800ace4:	9201      	str	r2, [sp, #4]
 800ace6:	9b01      	ldr	r3, [sp, #4]
 800ace8:	61a3      	str	r3, [r4, #24]
 800acea:	2b00      	cmp	r3, #0
 800acec:	bf14      	ite	ne
 800acee:	2202      	movne	r2, #2
 800acf0:	2201      	moveq	r2, #1
 800acf2:	6122      	str	r2, [r4, #16]
 800acf4:	b1d5      	cbz	r5, 800ad2c <__d2b+0x98>
 800acf6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acfa:	4405      	add	r5, r0
 800acfc:	f8c9 5000 	str.w	r5, [r9]
 800ad00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad04:	f8c8 0000 	str.w	r0, [r8]
 800ad08:	4620      	mov	r0, r4
 800ad0a:	b003      	add	sp, #12
 800ad0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad14:	e7d5      	b.n	800acc2 <__d2b+0x2e>
 800ad16:	6161      	str	r1, [r4, #20]
 800ad18:	e7e5      	b.n	800ace6 <__d2b+0x52>
 800ad1a:	a801      	add	r0, sp, #4
 800ad1c:	f7ff fcde 	bl	800a6dc <__lo0bits>
 800ad20:	9b01      	ldr	r3, [sp, #4]
 800ad22:	6163      	str	r3, [r4, #20]
 800ad24:	2201      	movs	r2, #1
 800ad26:	6122      	str	r2, [r4, #16]
 800ad28:	3020      	adds	r0, #32
 800ad2a:	e7e3      	b.n	800acf4 <__d2b+0x60>
 800ad2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad34:	f8c9 0000 	str.w	r0, [r9]
 800ad38:	6918      	ldr	r0, [r3, #16]
 800ad3a:	f7ff fcaf 	bl	800a69c <__hi0bits>
 800ad3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad42:	e7df      	b.n	800ad04 <__d2b+0x70>
 800ad44:	0800bc40 	.word	0x0800bc40
 800ad48:	0800bd30 	.word	0x0800bd30

0800ad4c <__ratio>:
 800ad4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad50:	4688      	mov	r8, r1
 800ad52:	4669      	mov	r1, sp
 800ad54:	4681      	mov	r9, r0
 800ad56:	f7ff ff4d 	bl	800abf4 <__b2d>
 800ad5a:	a901      	add	r1, sp, #4
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	ec55 4b10 	vmov	r4, r5, d0
 800ad62:	f7ff ff47 	bl	800abf4 <__b2d>
 800ad66:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad6a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad6e:	eba3 0c02 	sub.w	ip, r3, r2
 800ad72:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad76:	1a9b      	subs	r3, r3, r2
 800ad78:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad7c:	ec51 0b10 	vmov	r0, r1, d0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	bfd6      	itet	le
 800ad84:	460a      	movle	r2, r1
 800ad86:	462a      	movgt	r2, r5
 800ad88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad8c:	468b      	mov	fp, r1
 800ad8e:	462f      	mov	r7, r5
 800ad90:	bfd4      	ite	le
 800ad92:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	ee10 2a10 	vmov	r2, s0
 800ada0:	465b      	mov	r3, fp
 800ada2:	4639      	mov	r1, r7
 800ada4:	f7f5 fd52 	bl	800084c <__aeabi_ddiv>
 800ada8:	ec41 0b10 	vmov	d0, r0, r1
 800adac:	b003      	add	sp, #12
 800adae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adb2 <__copybits>:
 800adb2:	3901      	subs	r1, #1
 800adb4:	b570      	push	{r4, r5, r6, lr}
 800adb6:	1149      	asrs	r1, r1, #5
 800adb8:	6914      	ldr	r4, [r2, #16]
 800adba:	3101      	adds	r1, #1
 800adbc:	f102 0314 	add.w	r3, r2, #20
 800adc0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adc4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adc8:	1f05      	subs	r5, r0, #4
 800adca:	42a3      	cmp	r3, r4
 800adcc:	d30c      	bcc.n	800ade8 <__copybits+0x36>
 800adce:	1aa3      	subs	r3, r4, r2
 800add0:	3b11      	subs	r3, #17
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	3211      	adds	r2, #17
 800add8:	42a2      	cmp	r2, r4
 800adda:	bf88      	it	hi
 800addc:	2300      	movhi	r3, #0
 800adde:	4418      	add	r0, r3
 800ade0:	2300      	movs	r3, #0
 800ade2:	4288      	cmp	r0, r1
 800ade4:	d305      	bcc.n	800adf2 <__copybits+0x40>
 800ade6:	bd70      	pop	{r4, r5, r6, pc}
 800ade8:	f853 6b04 	ldr.w	r6, [r3], #4
 800adec:	f845 6f04 	str.w	r6, [r5, #4]!
 800adf0:	e7eb      	b.n	800adca <__copybits+0x18>
 800adf2:	f840 3b04 	str.w	r3, [r0], #4
 800adf6:	e7f4      	b.n	800ade2 <__copybits+0x30>

0800adf8 <__any_on>:
 800adf8:	f100 0214 	add.w	r2, r0, #20
 800adfc:	6900      	ldr	r0, [r0, #16]
 800adfe:	114b      	asrs	r3, r1, #5
 800ae00:	4298      	cmp	r0, r3
 800ae02:	b510      	push	{r4, lr}
 800ae04:	db11      	blt.n	800ae2a <__any_on+0x32>
 800ae06:	dd0a      	ble.n	800ae1e <__any_on+0x26>
 800ae08:	f011 011f 	ands.w	r1, r1, #31
 800ae0c:	d007      	beq.n	800ae1e <__any_on+0x26>
 800ae0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae12:	fa24 f001 	lsr.w	r0, r4, r1
 800ae16:	fa00 f101 	lsl.w	r1, r0, r1
 800ae1a:	428c      	cmp	r4, r1
 800ae1c:	d10b      	bne.n	800ae36 <__any_on+0x3e>
 800ae1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d803      	bhi.n	800ae2e <__any_on+0x36>
 800ae26:	2000      	movs	r0, #0
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	e7f7      	b.n	800ae1e <__any_on+0x26>
 800ae2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae32:	2900      	cmp	r1, #0
 800ae34:	d0f5      	beq.n	800ae22 <__any_on+0x2a>
 800ae36:	2001      	movs	r0, #1
 800ae38:	e7f6      	b.n	800ae28 <__any_on+0x30>

0800ae3a <_calloc_r>:
 800ae3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae3c:	fba1 2402 	umull	r2, r4, r1, r2
 800ae40:	b94c      	cbnz	r4, 800ae56 <_calloc_r+0x1c>
 800ae42:	4611      	mov	r1, r2
 800ae44:	9201      	str	r2, [sp, #4]
 800ae46:	f000 f87b 	bl	800af40 <_malloc_r>
 800ae4a:	9a01      	ldr	r2, [sp, #4]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	b930      	cbnz	r0, 800ae5e <_calloc_r+0x24>
 800ae50:	4628      	mov	r0, r5
 800ae52:	b003      	add	sp, #12
 800ae54:	bd30      	pop	{r4, r5, pc}
 800ae56:	220c      	movs	r2, #12
 800ae58:	6002      	str	r2, [r0, #0]
 800ae5a:	2500      	movs	r5, #0
 800ae5c:	e7f8      	b.n	800ae50 <_calloc_r+0x16>
 800ae5e:	4621      	mov	r1, r4
 800ae60:	f7fc f848 	bl	8006ef4 <memset>
 800ae64:	e7f4      	b.n	800ae50 <_calloc_r+0x16>
	...

0800ae68 <_free_r>:
 800ae68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae6a:	2900      	cmp	r1, #0
 800ae6c:	d044      	beq.n	800aef8 <_free_r+0x90>
 800ae6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae72:	9001      	str	r0, [sp, #4]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	f1a1 0404 	sub.w	r4, r1, #4
 800ae7a:	bfb8      	it	lt
 800ae7c:	18e4      	addlt	r4, r4, r3
 800ae7e:	f000 fca7 	bl	800b7d0 <__malloc_lock>
 800ae82:	4a1e      	ldr	r2, [pc, #120]	; (800aefc <_free_r+0x94>)
 800ae84:	9801      	ldr	r0, [sp, #4]
 800ae86:	6813      	ldr	r3, [r2, #0]
 800ae88:	b933      	cbnz	r3, 800ae98 <_free_r+0x30>
 800ae8a:	6063      	str	r3, [r4, #4]
 800ae8c:	6014      	str	r4, [r2, #0]
 800ae8e:	b003      	add	sp, #12
 800ae90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae94:	f000 bca2 	b.w	800b7dc <__malloc_unlock>
 800ae98:	42a3      	cmp	r3, r4
 800ae9a:	d908      	bls.n	800aeae <_free_r+0x46>
 800ae9c:	6825      	ldr	r5, [r4, #0]
 800ae9e:	1961      	adds	r1, r4, r5
 800aea0:	428b      	cmp	r3, r1
 800aea2:	bf01      	itttt	eq
 800aea4:	6819      	ldreq	r1, [r3, #0]
 800aea6:	685b      	ldreq	r3, [r3, #4]
 800aea8:	1949      	addeq	r1, r1, r5
 800aeaa:	6021      	streq	r1, [r4, #0]
 800aeac:	e7ed      	b.n	800ae8a <_free_r+0x22>
 800aeae:	461a      	mov	r2, r3
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	b10b      	cbz	r3, 800aeb8 <_free_r+0x50>
 800aeb4:	42a3      	cmp	r3, r4
 800aeb6:	d9fa      	bls.n	800aeae <_free_r+0x46>
 800aeb8:	6811      	ldr	r1, [r2, #0]
 800aeba:	1855      	adds	r5, r2, r1
 800aebc:	42a5      	cmp	r5, r4
 800aebe:	d10b      	bne.n	800aed8 <_free_r+0x70>
 800aec0:	6824      	ldr	r4, [r4, #0]
 800aec2:	4421      	add	r1, r4
 800aec4:	1854      	adds	r4, r2, r1
 800aec6:	42a3      	cmp	r3, r4
 800aec8:	6011      	str	r1, [r2, #0]
 800aeca:	d1e0      	bne.n	800ae8e <_free_r+0x26>
 800aecc:	681c      	ldr	r4, [r3, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	6053      	str	r3, [r2, #4]
 800aed2:	4421      	add	r1, r4
 800aed4:	6011      	str	r1, [r2, #0]
 800aed6:	e7da      	b.n	800ae8e <_free_r+0x26>
 800aed8:	d902      	bls.n	800aee0 <_free_r+0x78>
 800aeda:	230c      	movs	r3, #12
 800aedc:	6003      	str	r3, [r0, #0]
 800aede:	e7d6      	b.n	800ae8e <_free_r+0x26>
 800aee0:	6825      	ldr	r5, [r4, #0]
 800aee2:	1961      	adds	r1, r4, r5
 800aee4:	428b      	cmp	r3, r1
 800aee6:	bf04      	itt	eq
 800aee8:	6819      	ldreq	r1, [r3, #0]
 800aeea:	685b      	ldreq	r3, [r3, #4]
 800aeec:	6063      	str	r3, [r4, #4]
 800aeee:	bf04      	itt	eq
 800aef0:	1949      	addeq	r1, r1, r5
 800aef2:	6021      	streq	r1, [r4, #0]
 800aef4:	6054      	str	r4, [r2, #4]
 800aef6:	e7ca      	b.n	800ae8e <_free_r+0x26>
 800aef8:	b003      	add	sp, #12
 800aefa:	bd30      	pop	{r4, r5, pc}
 800aefc:	200003c4 	.word	0x200003c4

0800af00 <sbrk_aligned>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	4e0e      	ldr	r6, [pc, #56]	; (800af3c <sbrk_aligned+0x3c>)
 800af04:	460c      	mov	r4, r1
 800af06:	6831      	ldr	r1, [r6, #0]
 800af08:	4605      	mov	r5, r0
 800af0a:	b911      	cbnz	r1, 800af12 <sbrk_aligned+0x12>
 800af0c:	f000 fb4c 	bl	800b5a8 <_sbrk_r>
 800af10:	6030      	str	r0, [r6, #0]
 800af12:	4621      	mov	r1, r4
 800af14:	4628      	mov	r0, r5
 800af16:	f000 fb47 	bl	800b5a8 <_sbrk_r>
 800af1a:	1c43      	adds	r3, r0, #1
 800af1c:	d00a      	beq.n	800af34 <sbrk_aligned+0x34>
 800af1e:	1cc4      	adds	r4, r0, #3
 800af20:	f024 0403 	bic.w	r4, r4, #3
 800af24:	42a0      	cmp	r0, r4
 800af26:	d007      	beq.n	800af38 <sbrk_aligned+0x38>
 800af28:	1a21      	subs	r1, r4, r0
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 fb3c 	bl	800b5a8 <_sbrk_r>
 800af30:	3001      	adds	r0, #1
 800af32:	d101      	bne.n	800af38 <sbrk_aligned+0x38>
 800af34:	f04f 34ff 	mov.w	r4, #4294967295
 800af38:	4620      	mov	r0, r4
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	200003c8 	.word	0x200003c8

0800af40 <_malloc_r>:
 800af40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af44:	1ccd      	adds	r5, r1, #3
 800af46:	f025 0503 	bic.w	r5, r5, #3
 800af4a:	3508      	adds	r5, #8
 800af4c:	2d0c      	cmp	r5, #12
 800af4e:	bf38      	it	cc
 800af50:	250c      	movcc	r5, #12
 800af52:	2d00      	cmp	r5, #0
 800af54:	4607      	mov	r7, r0
 800af56:	db01      	blt.n	800af5c <_malloc_r+0x1c>
 800af58:	42a9      	cmp	r1, r5
 800af5a:	d905      	bls.n	800af68 <_malloc_r+0x28>
 800af5c:	230c      	movs	r3, #12
 800af5e:	603b      	str	r3, [r7, #0]
 800af60:	2600      	movs	r6, #0
 800af62:	4630      	mov	r0, r6
 800af64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af68:	4e2e      	ldr	r6, [pc, #184]	; (800b024 <_malloc_r+0xe4>)
 800af6a:	f000 fc31 	bl	800b7d0 <__malloc_lock>
 800af6e:	6833      	ldr	r3, [r6, #0]
 800af70:	461c      	mov	r4, r3
 800af72:	bb34      	cbnz	r4, 800afc2 <_malloc_r+0x82>
 800af74:	4629      	mov	r1, r5
 800af76:	4638      	mov	r0, r7
 800af78:	f7ff ffc2 	bl	800af00 <sbrk_aligned>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	4604      	mov	r4, r0
 800af80:	d14d      	bne.n	800b01e <_malloc_r+0xde>
 800af82:	6834      	ldr	r4, [r6, #0]
 800af84:	4626      	mov	r6, r4
 800af86:	2e00      	cmp	r6, #0
 800af88:	d140      	bne.n	800b00c <_malloc_r+0xcc>
 800af8a:	6823      	ldr	r3, [r4, #0]
 800af8c:	4631      	mov	r1, r6
 800af8e:	4638      	mov	r0, r7
 800af90:	eb04 0803 	add.w	r8, r4, r3
 800af94:	f000 fb08 	bl	800b5a8 <_sbrk_r>
 800af98:	4580      	cmp	r8, r0
 800af9a:	d13a      	bne.n	800b012 <_malloc_r+0xd2>
 800af9c:	6821      	ldr	r1, [r4, #0]
 800af9e:	3503      	adds	r5, #3
 800afa0:	1a6d      	subs	r5, r5, r1
 800afa2:	f025 0503 	bic.w	r5, r5, #3
 800afa6:	3508      	adds	r5, #8
 800afa8:	2d0c      	cmp	r5, #12
 800afaa:	bf38      	it	cc
 800afac:	250c      	movcc	r5, #12
 800afae:	4629      	mov	r1, r5
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff ffa5 	bl	800af00 <sbrk_aligned>
 800afb6:	3001      	adds	r0, #1
 800afb8:	d02b      	beq.n	800b012 <_malloc_r+0xd2>
 800afba:	6823      	ldr	r3, [r4, #0]
 800afbc:	442b      	add	r3, r5
 800afbe:	6023      	str	r3, [r4, #0]
 800afc0:	e00e      	b.n	800afe0 <_malloc_r+0xa0>
 800afc2:	6822      	ldr	r2, [r4, #0]
 800afc4:	1b52      	subs	r2, r2, r5
 800afc6:	d41e      	bmi.n	800b006 <_malloc_r+0xc6>
 800afc8:	2a0b      	cmp	r2, #11
 800afca:	d916      	bls.n	800affa <_malloc_r+0xba>
 800afcc:	1961      	adds	r1, r4, r5
 800afce:	42a3      	cmp	r3, r4
 800afd0:	6025      	str	r5, [r4, #0]
 800afd2:	bf18      	it	ne
 800afd4:	6059      	strne	r1, [r3, #4]
 800afd6:	6863      	ldr	r3, [r4, #4]
 800afd8:	bf08      	it	eq
 800afda:	6031      	streq	r1, [r6, #0]
 800afdc:	5162      	str	r2, [r4, r5]
 800afde:	604b      	str	r3, [r1, #4]
 800afe0:	4638      	mov	r0, r7
 800afe2:	f104 060b 	add.w	r6, r4, #11
 800afe6:	f000 fbf9 	bl	800b7dc <__malloc_unlock>
 800afea:	f026 0607 	bic.w	r6, r6, #7
 800afee:	1d23      	adds	r3, r4, #4
 800aff0:	1af2      	subs	r2, r6, r3
 800aff2:	d0b6      	beq.n	800af62 <_malloc_r+0x22>
 800aff4:	1b9b      	subs	r3, r3, r6
 800aff6:	50a3      	str	r3, [r4, r2]
 800aff8:	e7b3      	b.n	800af62 <_malloc_r+0x22>
 800affa:	6862      	ldr	r2, [r4, #4]
 800affc:	42a3      	cmp	r3, r4
 800affe:	bf0c      	ite	eq
 800b000:	6032      	streq	r2, [r6, #0]
 800b002:	605a      	strne	r2, [r3, #4]
 800b004:	e7ec      	b.n	800afe0 <_malloc_r+0xa0>
 800b006:	4623      	mov	r3, r4
 800b008:	6864      	ldr	r4, [r4, #4]
 800b00a:	e7b2      	b.n	800af72 <_malloc_r+0x32>
 800b00c:	4634      	mov	r4, r6
 800b00e:	6876      	ldr	r6, [r6, #4]
 800b010:	e7b9      	b.n	800af86 <_malloc_r+0x46>
 800b012:	230c      	movs	r3, #12
 800b014:	603b      	str	r3, [r7, #0]
 800b016:	4638      	mov	r0, r7
 800b018:	f000 fbe0 	bl	800b7dc <__malloc_unlock>
 800b01c:	e7a1      	b.n	800af62 <_malloc_r+0x22>
 800b01e:	6025      	str	r5, [r4, #0]
 800b020:	e7de      	b.n	800afe0 <_malloc_r+0xa0>
 800b022:	bf00      	nop
 800b024:	200003c4 	.word	0x200003c4

0800b028 <__ssputs_r>:
 800b028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b02c:	688e      	ldr	r6, [r1, #8]
 800b02e:	429e      	cmp	r6, r3
 800b030:	4682      	mov	sl, r0
 800b032:	460c      	mov	r4, r1
 800b034:	4690      	mov	r8, r2
 800b036:	461f      	mov	r7, r3
 800b038:	d838      	bhi.n	800b0ac <__ssputs_r+0x84>
 800b03a:	898a      	ldrh	r2, [r1, #12]
 800b03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b040:	d032      	beq.n	800b0a8 <__ssputs_r+0x80>
 800b042:	6825      	ldr	r5, [r4, #0]
 800b044:	6909      	ldr	r1, [r1, #16]
 800b046:	eba5 0901 	sub.w	r9, r5, r1
 800b04a:	6965      	ldr	r5, [r4, #20]
 800b04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b054:	3301      	adds	r3, #1
 800b056:	444b      	add	r3, r9
 800b058:	106d      	asrs	r5, r5, #1
 800b05a:	429d      	cmp	r5, r3
 800b05c:	bf38      	it	cc
 800b05e:	461d      	movcc	r5, r3
 800b060:	0553      	lsls	r3, r2, #21
 800b062:	d531      	bpl.n	800b0c8 <__ssputs_r+0xa0>
 800b064:	4629      	mov	r1, r5
 800b066:	f7ff ff6b 	bl	800af40 <_malloc_r>
 800b06a:	4606      	mov	r6, r0
 800b06c:	b950      	cbnz	r0, 800b084 <__ssputs_r+0x5c>
 800b06e:	230c      	movs	r3, #12
 800b070:	f8ca 3000 	str.w	r3, [sl]
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b07a:	81a3      	strh	r3, [r4, #12]
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b084:	6921      	ldr	r1, [r4, #16]
 800b086:	464a      	mov	r2, r9
 800b088:	f7ff fa08 	bl	800a49c <memcpy>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b096:	81a3      	strh	r3, [r4, #12]
 800b098:	6126      	str	r6, [r4, #16]
 800b09a:	6165      	str	r5, [r4, #20]
 800b09c:	444e      	add	r6, r9
 800b09e:	eba5 0509 	sub.w	r5, r5, r9
 800b0a2:	6026      	str	r6, [r4, #0]
 800b0a4:	60a5      	str	r5, [r4, #8]
 800b0a6:	463e      	mov	r6, r7
 800b0a8:	42be      	cmp	r6, r7
 800b0aa:	d900      	bls.n	800b0ae <__ssputs_r+0x86>
 800b0ac:	463e      	mov	r6, r7
 800b0ae:	6820      	ldr	r0, [r4, #0]
 800b0b0:	4632      	mov	r2, r6
 800b0b2:	4641      	mov	r1, r8
 800b0b4:	f000 fb72 	bl	800b79c <memmove>
 800b0b8:	68a3      	ldr	r3, [r4, #8]
 800b0ba:	1b9b      	subs	r3, r3, r6
 800b0bc:	60a3      	str	r3, [r4, #8]
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	4433      	add	r3, r6
 800b0c2:	6023      	str	r3, [r4, #0]
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	e7db      	b.n	800b080 <__ssputs_r+0x58>
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	f000 fb8d 	bl	800b7e8 <_realloc_r>
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d1e1      	bne.n	800b098 <__ssputs_r+0x70>
 800b0d4:	6921      	ldr	r1, [r4, #16]
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	f7ff fec6 	bl	800ae68 <_free_r>
 800b0dc:	e7c7      	b.n	800b06e <__ssputs_r+0x46>
	...

0800b0e0 <_svfiprintf_r>:
 800b0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	4698      	mov	r8, r3
 800b0e6:	898b      	ldrh	r3, [r1, #12]
 800b0e8:	061b      	lsls	r3, r3, #24
 800b0ea:	b09d      	sub	sp, #116	; 0x74
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	460d      	mov	r5, r1
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	d50e      	bpl.n	800b112 <_svfiprintf_r+0x32>
 800b0f4:	690b      	ldr	r3, [r1, #16]
 800b0f6:	b963      	cbnz	r3, 800b112 <_svfiprintf_r+0x32>
 800b0f8:	2140      	movs	r1, #64	; 0x40
 800b0fa:	f7ff ff21 	bl	800af40 <_malloc_r>
 800b0fe:	6028      	str	r0, [r5, #0]
 800b100:	6128      	str	r0, [r5, #16]
 800b102:	b920      	cbnz	r0, 800b10e <_svfiprintf_r+0x2e>
 800b104:	230c      	movs	r3, #12
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	f04f 30ff 	mov.w	r0, #4294967295
 800b10c:	e0d1      	b.n	800b2b2 <_svfiprintf_r+0x1d2>
 800b10e:	2340      	movs	r3, #64	; 0x40
 800b110:	616b      	str	r3, [r5, #20]
 800b112:	2300      	movs	r3, #0
 800b114:	9309      	str	r3, [sp, #36]	; 0x24
 800b116:	2320      	movs	r3, #32
 800b118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b120:	2330      	movs	r3, #48	; 0x30
 800b122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b2cc <_svfiprintf_r+0x1ec>
 800b126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b12a:	f04f 0901 	mov.w	r9, #1
 800b12e:	4623      	mov	r3, r4
 800b130:	469a      	mov	sl, r3
 800b132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b136:	b10a      	cbz	r2, 800b13c <_svfiprintf_r+0x5c>
 800b138:	2a25      	cmp	r2, #37	; 0x25
 800b13a:	d1f9      	bne.n	800b130 <_svfiprintf_r+0x50>
 800b13c:	ebba 0b04 	subs.w	fp, sl, r4
 800b140:	d00b      	beq.n	800b15a <_svfiprintf_r+0x7a>
 800b142:	465b      	mov	r3, fp
 800b144:	4622      	mov	r2, r4
 800b146:	4629      	mov	r1, r5
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ff6d 	bl	800b028 <__ssputs_r>
 800b14e:	3001      	adds	r0, #1
 800b150:	f000 80aa 	beq.w	800b2a8 <_svfiprintf_r+0x1c8>
 800b154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b156:	445a      	add	r2, fp
 800b158:	9209      	str	r2, [sp, #36]	; 0x24
 800b15a:	f89a 3000 	ldrb.w	r3, [sl]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	f000 80a2 	beq.w	800b2a8 <_svfiprintf_r+0x1c8>
 800b164:	2300      	movs	r3, #0
 800b166:	f04f 32ff 	mov.w	r2, #4294967295
 800b16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b16e:	f10a 0a01 	add.w	sl, sl, #1
 800b172:	9304      	str	r3, [sp, #16]
 800b174:	9307      	str	r3, [sp, #28]
 800b176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b17a:	931a      	str	r3, [sp, #104]	; 0x68
 800b17c:	4654      	mov	r4, sl
 800b17e:	2205      	movs	r2, #5
 800b180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b184:	4851      	ldr	r0, [pc, #324]	; (800b2cc <_svfiprintf_r+0x1ec>)
 800b186:	f7f5 f82b 	bl	80001e0 <memchr>
 800b18a:	9a04      	ldr	r2, [sp, #16]
 800b18c:	b9d8      	cbnz	r0, 800b1c6 <_svfiprintf_r+0xe6>
 800b18e:	06d0      	lsls	r0, r2, #27
 800b190:	bf44      	itt	mi
 800b192:	2320      	movmi	r3, #32
 800b194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b198:	0711      	lsls	r1, r2, #28
 800b19a:	bf44      	itt	mi
 800b19c:	232b      	movmi	r3, #43	; 0x2b
 800b19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b1a8:	d015      	beq.n	800b1d6 <_svfiprintf_r+0xf6>
 800b1aa:	9a07      	ldr	r2, [sp, #28]
 800b1ac:	4654      	mov	r4, sl
 800b1ae:	2000      	movs	r0, #0
 800b1b0:	f04f 0c0a 	mov.w	ip, #10
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1ba:	3b30      	subs	r3, #48	; 0x30
 800b1bc:	2b09      	cmp	r3, #9
 800b1be:	d94e      	bls.n	800b25e <_svfiprintf_r+0x17e>
 800b1c0:	b1b0      	cbz	r0, 800b1f0 <_svfiprintf_r+0x110>
 800b1c2:	9207      	str	r2, [sp, #28]
 800b1c4:	e014      	b.n	800b1f0 <_svfiprintf_r+0x110>
 800b1c6:	eba0 0308 	sub.w	r3, r0, r8
 800b1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	46a2      	mov	sl, r4
 800b1d4:	e7d2      	b.n	800b17c <_svfiprintf_r+0x9c>
 800b1d6:	9b03      	ldr	r3, [sp, #12]
 800b1d8:	1d19      	adds	r1, r3, #4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	9103      	str	r1, [sp, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bfbb      	ittet	lt
 800b1e2:	425b      	neglt	r3, r3
 800b1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b1e8:	9307      	strge	r3, [sp, #28]
 800b1ea:	9307      	strlt	r3, [sp, #28]
 800b1ec:	bfb8      	it	lt
 800b1ee:	9204      	strlt	r2, [sp, #16]
 800b1f0:	7823      	ldrb	r3, [r4, #0]
 800b1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800b1f4:	d10c      	bne.n	800b210 <_svfiprintf_r+0x130>
 800b1f6:	7863      	ldrb	r3, [r4, #1]
 800b1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1fa:	d135      	bne.n	800b268 <_svfiprintf_r+0x188>
 800b1fc:	9b03      	ldr	r3, [sp, #12]
 800b1fe:	1d1a      	adds	r2, r3, #4
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	9203      	str	r2, [sp, #12]
 800b204:	2b00      	cmp	r3, #0
 800b206:	bfb8      	it	lt
 800b208:	f04f 33ff 	movlt.w	r3, #4294967295
 800b20c:	3402      	adds	r4, #2
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b2dc <_svfiprintf_r+0x1fc>
 800b214:	7821      	ldrb	r1, [r4, #0]
 800b216:	2203      	movs	r2, #3
 800b218:	4650      	mov	r0, sl
 800b21a:	f7f4 ffe1 	bl	80001e0 <memchr>
 800b21e:	b140      	cbz	r0, 800b232 <_svfiprintf_r+0x152>
 800b220:	2340      	movs	r3, #64	; 0x40
 800b222:	eba0 000a 	sub.w	r0, r0, sl
 800b226:	fa03 f000 	lsl.w	r0, r3, r0
 800b22a:	9b04      	ldr	r3, [sp, #16]
 800b22c:	4303      	orrs	r3, r0
 800b22e:	3401      	adds	r4, #1
 800b230:	9304      	str	r3, [sp, #16]
 800b232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b236:	4826      	ldr	r0, [pc, #152]	; (800b2d0 <_svfiprintf_r+0x1f0>)
 800b238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b23c:	2206      	movs	r2, #6
 800b23e:	f7f4 ffcf 	bl	80001e0 <memchr>
 800b242:	2800      	cmp	r0, #0
 800b244:	d038      	beq.n	800b2b8 <_svfiprintf_r+0x1d8>
 800b246:	4b23      	ldr	r3, [pc, #140]	; (800b2d4 <_svfiprintf_r+0x1f4>)
 800b248:	bb1b      	cbnz	r3, 800b292 <_svfiprintf_r+0x1b2>
 800b24a:	9b03      	ldr	r3, [sp, #12]
 800b24c:	3307      	adds	r3, #7
 800b24e:	f023 0307 	bic.w	r3, r3, #7
 800b252:	3308      	adds	r3, #8
 800b254:	9303      	str	r3, [sp, #12]
 800b256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b258:	4433      	add	r3, r6
 800b25a:	9309      	str	r3, [sp, #36]	; 0x24
 800b25c:	e767      	b.n	800b12e <_svfiprintf_r+0x4e>
 800b25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b262:	460c      	mov	r4, r1
 800b264:	2001      	movs	r0, #1
 800b266:	e7a5      	b.n	800b1b4 <_svfiprintf_r+0xd4>
 800b268:	2300      	movs	r3, #0
 800b26a:	3401      	adds	r4, #1
 800b26c:	9305      	str	r3, [sp, #20]
 800b26e:	4619      	mov	r1, r3
 800b270:	f04f 0c0a 	mov.w	ip, #10
 800b274:	4620      	mov	r0, r4
 800b276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b27a:	3a30      	subs	r2, #48	; 0x30
 800b27c:	2a09      	cmp	r2, #9
 800b27e:	d903      	bls.n	800b288 <_svfiprintf_r+0x1a8>
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0c5      	beq.n	800b210 <_svfiprintf_r+0x130>
 800b284:	9105      	str	r1, [sp, #20]
 800b286:	e7c3      	b.n	800b210 <_svfiprintf_r+0x130>
 800b288:	fb0c 2101 	mla	r1, ip, r1, r2
 800b28c:	4604      	mov	r4, r0
 800b28e:	2301      	movs	r3, #1
 800b290:	e7f0      	b.n	800b274 <_svfiprintf_r+0x194>
 800b292:	ab03      	add	r3, sp, #12
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	462a      	mov	r2, r5
 800b298:	4b0f      	ldr	r3, [pc, #60]	; (800b2d8 <_svfiprintf_r+0x1f8>)
 800b29a:	a904      	add	r1, sp, #16
 800b29c:	4638      	mov	r0, r7
 800b29e:	f7fb fed1 	bl	8007044 <_printf_float>
 800b2a2:	1c42      	adds	r2, r0, #1
 800b2a4:	4606      	mov	r6, r0
 800b2a6:	d1d6      	bne.n	800b256 <_svfiprintf_r+0x176>
 800b2a8:	89ab      	ldrh	r3, [r5, #12]
 800b2aa:	065b      	lsls	r3, r3, #25
 800b2ac:	f53f af2c 	bmi.w	800b108 <_svfiprintf_r+0x28>
 800b2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b2b2:	b01d      	add	sp, #116	; 0x74
 800b2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b8:	ab03      	add	r3, sp, #12
 800b2ba:	9300      	str	r3, [sp, #0]
 800b2bc:	462a      	mov	r2, r5
 800b2be:	4b06      	ldr	r3, [pc, #24]	; (800b2d8 <_svfiprintf_r+0x1f8>)
 800b2c0:	a904      	add	r1, sp, #16
 800b2c2:	4638      	mov	r0, r7
 800b2c4:	f7fc f962 	bl	800758c <_printf_i>
 800b2c8:	e7eb      	b.n	800b2a2 <_svfiprintf_r+0x1c2>
 800b2ca:	bf00      	nop
 800b2cc:	0800be8c 	.word	0x0800be8c
 800b2d0:	0800be96 	.word	0x0800be96
 800b2d4:	08007045 	.word	0x08007045
 800b2d8:	0800b029 	.word	0x0800b029
 800b2dc:	0800be92 	.word	0x0800be92

0800b2e0 <__sfputc_r>:
 800b2e0:	6893      	ldr	r3, [r2, #8]
 800b2e2:	3b01      	subs	r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	b410      	push	{r4}
 800b2e8:	6093      	str	r3, [r2, #8]
 800b2ea:	da08      	bge.n	800b2fe <__sfputc_r+0x1e>
 800b2ec:	6994      	ldr	r4, [r2, #24]
 800b2ee:	42a3      	cmp	r3, r4
 800b2f0:	db01      	blt.n	800b2f6 <__sfputc_r+0x16>
 800b2f2:	290a      	cmp	r1, #10
 800b2f4:	d103      	bne.n	800b2fe <__sfputc_r+0x1e>
 800b2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b2fa:	f7fd bbe7 	b.w	8008acc <__swbuf_r>
 800b2fe:	6813      	ldr	r3, [r2, #0]
 800b300:	1c58      	adds	r0, r3, #1
 800b302:	6010      	str	r0, [r2, #0]
 800b304:	7019      	strb	r1, [r3, #0]
 800b306:	4608      	mov	r0, r1
 800b308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b30c:	4770      	bx	lr

0800b30e <__sfputs_r>:
 800b30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b310:	4606      	mov	r6, r0
 800b312:	460f      	mov	r7, r1
 800b314:	4614      	mov	r4, r2
 800b316:	18d5      	adds	r5, r2, r3
 800b318:	42ac      	cmp	r4, r5
 800b31a:	d101      	bne.n	800b320 <__sfputs_r+0x12>
 800b31c:	2000      	movs	r0, #0
 800b31e:	e007      	b.n	800b330 <__sfputs_r+0x22>
 800b320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b324:	463a      	mov	r2, r7
 800b326:	4630      	mov	r0, r6
 800b328:	f7ff ffda 	bl	800b2e0 <__sfputc_r>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d1f3      	bne.n	800b318 <__sfputs_r+0xa>
 800b330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b334 <_vfiprintf_r>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	460d      	mov	r5, r1
 800b33a:	b09d      	sub	sp, #116	; 0x74
 800b33c:	4614      	mov	r4, r2
 800b33e:	4698      	mov	r8, r3
 800b340:	4606      	mov	r6, r0
 800b342:	b118      	cbz	r0, 800b34c <_vfiprintf_r+0x18>
 800b344:	6983      	ldr	r3, [r0, #24]
 800b346:	b90b      	cbnz	r3, 800b34c <_vfiprintf_r+0x18>
 800b348:	f7fe fc16 	bl	8009b78 <__sinit>
 800b34c:	4b89      	ldr	r3, [pc, #548]	; (800b574 <_vfiprintf_r+0x240>)
 800b34e:	429d      	cmp	r5, r3
 800b350:	d11b      	bne.n	800b38a <_vfiprintf_r+0x56>
 800b352:	6875      	ldr	r5, [r6, #4]
 800b354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b356:	07d9      	lsls	r1, r3, #31
 800b358:	d405      	bmi.n	800b366 <_vfiprintf_r+0x32>
 800b35a:	89ab      	ldrh	r3, [r5, #12]
 800b35c:	059a      	lsls	r2, r3, #22
 800b35e:	d402      	bmi.n	800b366 <_vfiprintf_r+0x32>
 800b360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b362:	f7ff f81a 	bl	800a39a <__retarget_lock_acquire_recursive>
 800b366:	89ab      	ldrh	r3, [r5, #12]
 800b368:	071b      	lsls	r3, r3, #28
 800b36a:	d501      	bpl.n	800b370 <_vfiprintf_r+0x3c>
 800b36c:	692b      	ldr	r3, [r5, #16]
 800b36e:	b9eb      	cbnz	r3, 800b3ac <_vfiprintf_r+0x78>
 800b370:	4629      	mov	r1, r5
 800b372:	4630      	mov	r0, r6
 800b374:	f7fd fbfc 	bl	8008b70 <__swsetup_r>
 800b378:	b1c0      	cbz	r0, 800b3ac <_vfiprintf_r+0x78>
 800b37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b37c:	07dc      	lsls	r4, r3, #31
 800b37e:	d50e      	bpl.n	800b39e <_vfiprintf_r+0x6a>
 800b380:	f04f 30ff 	mov.w	r0, #4294967295
 800b384:	b01d      	add	sp, #116	; 0x74
 800b386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38a:	4b7b      	ldr	r3, [pc, #492]	; (800b578 <_vfiprintf_r+0x244>)
 800b38c:	429d      	cmp	r5, r3
 800b38e:	d101      	bne.n	800b394 <_vfiprintf_r+0x60>
 800b390:	68b5      	ldr	r5, [r6, #8]
 800b392:	e7df      	b.n	800b354 <_vfiprintf_r+0x20>
 800b394:	4b79      	ldr	r3, [pc, #484]	; (800b57c <_vfiprintf_r+0x248>)
 800b396:	429d      	cmp	r5, r3
 800b398:	bf08      	it	eq
 800b39a:	68f5      	ldreq	r5, [r6, #12]
 800b39c:	e7da      	b.n	800b354 <_vfiprintf_r+0x20>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	0598      	lsls	r0, r3, #22
 800b3a2:	d4ed      	bmi.n	800b380 <_vfiprintf_r+0x4c>
 800b3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3a6:	f7fe fff9 	bl	800a39c <__retarget_lock_release_recursive>
 800b3aa:	e7e9      	b.n	800b380 <_vfiprintf_r+0x4c>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3ba:	2330      	movs	r3, #48	; 0x30
 800b3bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b580 <_vfiprintf_r+0x24c>
 800b3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3c4:	f04f 0901 	mov.w	r9, #1
 800b3c8:	4623      	mov	r3, r4
 800b3ca:	469a      	mov	sl, r3
 800b3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3d0:	b10a      	cbz	r2, 800b3d6 <_vfiprintf_r+0xa2>
 800b3d2:	2a25      	cmp	r2, #37	; 0x25
 800b3d4:	d1f9      	bne.n	800b3ca <_vfiprintf_r+0x96>
 800b3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3da:	d00b      	beq.n	800b3f4 <_vfiprintf_r+0xc0>
 800b3dc:	465b      	mov	r3, fp
 800b3de:	4622      	mov	r2, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	f7ff ff93 	bl	800b30e <__sfputs_r>
 800b3e8:	3001      	adds	r0, #1
 800b3ea:	f000 80aa 	beq.w	800b542 <_vfiprintf_r+0x20e>
 800b3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3f0:	445a      	add	r2, fp
 800b3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	f000 80a2 	beq.w	800b542 <_vfiprintf_r+0x20e>
 800b3fe:	2300      	movs	r3, #0
 800b400:	f04f 32ff 	mov.w	r2, #4294967295
 800b404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b408:	f10a 0a01 	add.w	sl, sl, #1
 800b40c:	9304      	str	r3, [sp, #16]
 800b40e:	9307      	str	r3, [sp, #28]
 800b410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b414:	931a      	str	r3, [sp, #104]	; 0x68
 800b416:	4654      	mov	r4, sl
 800b418:	2205      	movs	r2, #5
 800b41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41e:	4858      	ldr	r0, [pc, #352]	; (800b580 <_vfiprintf_r+0x24c>)
 800b420:	f7f4 fede 	bl	80001e0 <memchr>
 800b424:	9a04      	ldr	r2, [sp, #16]
 800b426:	b9d8      	cbnz	r0, 800b460 <_vfiprintf_r+0x12c>
 800b428:	06d1      	lsls	r1, r2, #27
 800b42a:	bf44      	itt	mi
 800b42c:	2320      	movmi	r3, #32
 800b42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b432:	0713      	lsls	r3, r2, #28
 800b434:	bf44      	itt	mi
 800b436:	232b      	movmi	r3, #43	; 0x2b
 800b438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b43c:	f89a 3000 	ldrb.w	r3, [sl]
 800b440:	2b2a      	cmp	r3, #42	; 0x2a
 800b442:	d015      	beq.n	800b470 <_vfiprintf_r+0x13c>
 800b444:	9a07      	ldr	r2, [sp, #28]
 800b446:	4654      	mov	r4, sl
 800b448:	2000      	movs	r0, #0
 800b44a:	f04f 0c0a 	mov.w	ip, #10
 800b44e:	4621      	mov	r1, r4
 800b450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b454:	3b30      	subs	r3, #48	; 0x30
 800b456:	2b09      	cmp	r3, #9
 800b458:	d94e      	bls.n	800b4f8 <_vfiprintf_r+0x1c4>
 800b45a:	b1b0      	cbz	r0, 800b48a <_vfiprintf_r+0x156>
 800b45c:	9207      	str	r2, [sp, #28]
 800b45e:	e014      	b.n	800b48a <_vfiprintf_r+0x156>
 800b460:	eba0 0308 	sub.w	r3, r0, r8
 800b464:	fa09 f303 	lsl.w	r3, r9, r3
 800b468:	4313      	orrs	r3, r2
 800b46a:	9304      	str	r3, [sp, #16]
 800b46c:	46a2      	mov	sl, r4
 800b46e:	e7d2      	b.n	800b416 <_vfiprintf_r+0xe2>
 800b470:	9b03      	ldr	r3, [sp, #12]
 800b472:	1d19      	adds	r1, r3, #4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	9103      	str	r1, [sp, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bfbb      	ittet	lt
 800b47c:	425b      	neglt	r3, r3
 800b47e:	f042 0202 	orrlt.w	r2, r2, #2
 800b482:	9307      	strge	r3, [sp, #28]
 800b484:	9307      	strlt	r3, [sp, #28]
 800b486:	bfb8      	it	lt
 800b488:	9204      	strlt	r2, [sp, #16]
 800b48a:	7823      	ldrb	r3, [r4, #0]
 800b48c:	2b2e      	cmp	r3, #46	; 0x2e
 800b48e:	d10c      	bne.n	800b4aa <_vfiprintf_r+0x176>
 800b490:	7863      	ldrb	r3, [r4, #1]
 800b492:	2b2a      	cmp	r3, #42	; 0x2a
 800b494:	d135      	bne.n	800b502 <_vfiprintf_r+0x1ce>
 800b496:	9b03      	ldr	r3, [sp, #12]
 800b498:	1d1a      	adds	r2, r3, #4
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	9203      	str	r2, [sp, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bfb8      	it	lt
 800b4a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4a6:	3402      	adds	r4, #2
 800b4a8:	9305      	str	r3, [sp, #20]
 800b4aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b590 <_vfiprintf_r+0x25c>
 800b4ae:	7821      	ldrb	r1, [r4, #0]
 800b4b0:	2203      	movs	r2, #3
 800b4b2:	4650      	mov	r0, sl
 800b4b4:	f7f4 fe94 	bl	80001e0 <memchr>
 800b4b8:	b140      	cbz	r0, 800b4cc <_vfiprintf_r+0x198>
 800b4ba:	2340      	movs	r3, #64	; 0x40
 800b4bc:	eba0 000a 	sub.w	r0, r0, sl
 800b4c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b4c4:	9b04      	ldr	r3, [sp, #16]
 800b4c6:	4303      	orrs	r3, r0
 800b4c8:	3401      	adds	r4, #1
 800b4ca:	9304      	str	r3, [sp, #16]
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	482c      	ldr	r0, [pc, #176]	; (800b584 <_vfiprintf_r+0x250>)
 800b4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4d6:	2206      	movs	r2, #6
 800b4d8:	f7f4 fe82 	bl	80001e0 <memchr>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d03f      	beq.n	800b560 <_vfiprintf_r+0x22c>
 800b4e0:	4b29      	ldr	r3, [pc, #164]	; (800b588 <_vfiprintf_r+0x254>)
 800b4e2:	bb1b      	cbnz	r3, 800b52c <_vfiprintf_r+0x1f8>
 800b4e4:	9b03      	ldr	r3, [sp, #12]
 800b4e6:	3307      	adds	r3, #7
 800b4e8:	f023 0307 	bic.w	r3, r3, #7
 800b4ec:	3308      	adds	r3, #8
 800b4ee:	9303      	str	r3, [sp, #12]
 800b4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4f2:	443b      	add	r3, r7
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	e767      	b.n	800b3c8 <_vfiprintf_r+0x94>
 800b4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	2001      	movs	r0, #1
 800b500:	e7a5      	b.n	800b44e <_vfiprintf_r+0x11a>
 800b502:	2300      	movs	r3, #0
 800b504:	3401      	adds	r4, #1
 800b506:	9305      	str	r3, [sp, #20]
 800b508:	4619      	mov	r1, r3
 800b50a:	f04f 0c0a 	mov.w	ip, #10
 800b50e:	4620      	mov	r0, r4
 800b510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b514:	3a30      	subs	r2, #48	; 0x30
 800b516:	2a09      	cmp	r2, #9
 800b518:	d903      	bls.n	800b522 <_vfiprintf_r+0x1ee>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d0c5      	beq.n	800b4aa <_vfiprintf_r+0x176>
 800b51e:	9105      	str	r1, [sp, #20]
 800b520:	e7c3      	b.n	800b4aa <_vfiprintf_r+0x176>
 800b522:	fb0c 2101 	mla	r1, ip, r1, r2
 800b526:	4604      	mov	r4, r0
 800b528:	2301      	movs	r3, #1
 800b52a:	e7f0      	b.n	800b50e <_vfiprintf_r+0x1da>
 800b52c:	ab03      	add	r3, sp, #12
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	462a      	mov	r2, r5
 800b532:	4b16      	ldr	r3, [pc, #88]	; (800b58c <_vfiprintf_r+0x258>)
 800b534:	a904      	add	r1, sp, #16
 800b536:	4630      	mov	r0, r6
 800b538:	f7fb fd84 	bl	8007044 <_printf_float>
 800b53c:	4607      	mov	r7, r0
 800b53e:	1c78      	adds	r0, r7, #1
 800b540:	d1d6      	bne.n	800b4f0 <_vfiprintf_r+0x1bc>
 800b542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b544:	07d9      	lsls	r1, r3, #31
 800b546:	d405      	bmi.n	800b554 <_vfiprintf_r+0x220>
 800b548:	89ab      	ldrh	r3, [r5, #12]
 800b54a:	059a      	lsls	r2, r3, #22
 800b54c:	d402      	bmi.n	800b554 <_vfiprintf_r+0x220>
 800b54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b550:	f7fe ff24 	bl	800a39c <__retarget_lock_release_recursive>
 800b554:	89ab      	ldrh	r3, [r5, #12]
 800b556:	065b      	lsls	r3, r3, #25
 800b558:	f53f af12 	bmi.w	800b380 <_vfiprintf_r+0x4c>
 800b55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b55e:	e711      	b.n	800b384 <_vfiprintf_r+0x50>
 800b560:	ab03      	add	r3, sp, #12
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	462a      	mov	r2, r5
 800b566:	4b09      	ldr	r3, [pc, #36]	; (800b58c <_vfiprintf_r+0x258>)
 800b568:	a904      	add	r1, sp, #16
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7fc f80e 	bl	800758c <_printf_i>
 800b570:	e7e4      	b.n	800b53c <_vfiprintf_r+0x208>
 800b572:	bf00      	nop
 800b574:	0800bc74 	.word	0x0800bc74
 800b578:	0800bc94 	.word	0x0800bc94
 800b57c:	0800bc54 	.word	0x0800bc54
 800b580:	0800be8c 	.word	0x0800be8c
 800b584:	0800be96 	.word	0x0800be96
 800b588:	08007045 	.word	0x08007045
 800b58c:	0800b30f 	.word	0x0800b30f
 800b590:	0800be92 	.word	0x0800be92
 800b594:	00000000 	.word	0x00000000

0800b598 <nan>:
 800b598:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b5a0 <nan+0x8>
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	00000000 	.word	0x00000000
 800b5a4:	7ff80000 	.word	0x7ff80000

0800b5a8 <_sbrk_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d06      	ldr	r5, [pc, #24]	; (800b5c4 <_sbrk_r+0x1c>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	602b      	str	r3, [r5, #0]
 800b5b4:	f7f6 fda0 	bl	80020f8 <_sbrk>
 800b5b8:	1c43      	adds	r3, r0, #1
 800b5ba:	d102      	bne.n	800b5c2 <_sbrk_r+0x1a>
 800b5bc:	682b      	ldr	r3, [r5, #0]
 800b5be:	b103      	cbz	r3, 800b5c2 <_sbrk_r+0x1a>
 800b5c0:	6023      	str	r3, [r4, #0]
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	200003cc 	.word	0x200003cc

0800b5c8 <__sread>:
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	460c      	mov	r4, r1
 800b5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5d0:	f000 f93a 	bl	800b848 <_read_r>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	bfab      	itete	ge
 800b5d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b5da:	89a3      	ldrhlt	r3, [r4, #12]
 800b5dc:	181b      	addge	r3, r3, r0
 800b5de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b5e2:	bfac      	ite	ge
 800b5e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b5e6:	81a3      	strhlt	r3, [r4, #12]
 800b5e8:	bd10      	pop	{r4, pc}

0800b5ea <__swrite>:
 800b5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ee:	461f      	mov	r7, r3
 800b5f0:	898b      	ldrh	r3, [r1, #12]
 800b5f2:	05db      	lsls	r3, r3, #23
 800b5f4:	4605      	mov	r5, r0
 800b5f6:	460c      	mov	r4, r1
 800b5f8:	4616      	mov	r6, r2
 800b5fa:	d505      	bpl.n	800b608 <__swrite+0x1e>
 800b5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b600:	2302      	movs	r3, #2
 800b602:	2200      	movs	r2, #0
 800b604:	f000 f8b8 	bl	800b778 <_lseek_r>
 800b608:	89a3      	ldrh	r3, [r4, #12]
 800b60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b60e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b612:	81a3      	strh	r3, [r4, #12]
 800b614:	4632      	mov	r2, r6
 800b616:	463b      	mov	r3, r7
 800b618:	4628      	mov	r0, r5
 800b61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b61e:	f000 b837 	b.w	800b690 <_write_r>

0800b622 <__sseek>:
 800b622:	b510      	push	{r4, lr}
 800b624:	460c      	mov	r4, r1
 800b626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62a:	f000 f8a5 	bl	800b778 <_lseek_r>
 800b62e:	1c43      	adds	r3, r0, #1
 800b630:	89a3      	ldrh	r3, [r4, #12]
 800b632:	bf15      	itete	ne
 800b634:	6560      	strne	r0, [r4, #84]	; 0x54
 800b636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b63a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b63e:	81a3      	strheq	r3, [r4, #12]
 800b640:	bf18      	it	ne
 800b642:	81a3      	strhne	r3, [r4, #12]
 800b644:	bd10      	pop	{r4, pc}

0800b646 <__sclose>:
 800b646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b64a:	f000 b851 	b.w	800b6f0 <_close_r>

0800b64e <strncmp>:
 800b64e:	b510      	push	{r4, lr}
 800b650:	b17a      	cbz	r2, 800b672 <strncmp+0x24>
 800b652:	4603      	mov	r3, r0
 800b654:	3901      	subs	r1, #1
 800b656:	1884      	adds	r4, r0, r2
 800b658:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b65c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b660:	4290      	cmp	r0, r2
 800b662:	d101      	bne.n	800b668 <strncmp+0x1a>
 800b664:	42a3      	cmp	r3, r4
 800b666:	d101      	bne.n	800b66c <strncmp+0x1e>
 800b668:	1a80      	subs	r0, r0, r2
 800b66a:	bd10      	pop	{r4, pc}
 800b66c:	2800      	cmp	r0, #0
 800b66e:	d1f3      	bne.n	800b658 <strncmp+0xa>
 800b670:	e7fa      	b.n	800b668 <strncmp+0x1a>
 800b672:	4610      	mov	r0, r2
 800b674:	e7f9      	b.n	800b66a <strncmp+0x1c>

0800b676 <__ascii_wctomb>:
 800b676:	b149      	cbz	r1, 800b68c <__ascii_wctomb+0x16>
 800b678:	2aff      	cmp	r2, #255	; 0xff
 800b67a:	bf85      	ittet	hi
 800b67c:	238a      	movhi	r3, #138	; 0x8a
 800b67e:	6003      	strhi	r3, [r0, #0]
 800b680:	700a      	strbls	r2, [r1, #0]
 800b682:	f04f 30ff 	movhi.w	r0, #4294967295
 800b686:	bf98      	it	ls
 800b688:	2001      	movls	r0, #1
 800b68a:	4770      	bx	lr
 800b68c:	4608      	mov	r0, r1
 800b68e:	4770      	bx	lr

0800b690 <_write_r>:
 800b690:	b538      	push	{r3, r4, r5, lr}
 800b692:	4d07      	ldr	r5, [pc, #28]	; (800b6b0 <_write_r+0x20>)
 800b694:	4604      	mov	r4, r0
 800b696:	4608      	mov	r0, r1
 800b698:	4611      	mov	r1, r2
 800b69a:	2200      	movs	r2, #0
 800b69c:	602a      	str	r2, [r5, #0]
 800b69e:	461a      	mov	r2, r3
 800b6a0:	f7f6 fcd9 	bl	8002056 <_write>
 800b6a4:	1c43      	adds	r3, r0, #1
 800b6a6:	d102      	bne.n	800b6ae <_write_r+0x1e>
 800b6a8:	682b      	ldr	r3, [r5, #0]
 800b6aa:	b103      	cbz	r3, 800b6ae <_write_r+0x1e>
 800b6ac:	6023      	str	r3, [r4, #0]
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	200003cc 	.word	0x200003cc

0800b6b4 <__assert_func>:
 800b6b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b6b6:	4614      	mov	r4, r2
 800b6b8:	461a      	mov	r2, r3
 800b6ba:	4b09      	ldr	r3, [pc, #36]	; (800b6e0 <__assert_func+0x2c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4605      	mov	r5, r0
 800b6c0:	68d8      	ldr	r0, [r3, #12]
 800b6c2:	b14c      	cbz	r4, 800b6d8 <__assert_func+0x24>
 800b6c4:	4b07      	ldr	r3, [pc, #28]	; (800b6e4 <__assert_func+0x30>)
 800b6c6:	9100      	str	r1, [sp, #0]
 800b6c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b6cc:	4906      	ldr	r1, [pc, #24]	; (800b6e8 <__assert_func+0x34>)
 800b6ce:	462b      	mov	r3, r5
 800b6d0:	f000 f81e 	bl	800b710 <fiprintf>
 800b6d4:	f000 f8ca 	bl	800b86c <abort>
 800b6d8:	4b04      	ldr	r3, [pc, #16]	; (800b6ec <__assert_func+0x38>)
 800b6da:	461c      	mov	r4, r3
 800b6dc:	e7f3      	b.n	800b6c6 <__assert_func+0x12>
 800b6de:	bf00      	nop
 800b6e0:	20000010 	.word	0x20000010
 800b6e4:	0800be9d 	.word	0x0800be9d
 800b6e8:	0800beaa 	.word	0x0800beaa
 800b6ec:	0800bed8 	.word	0x0800bed8

0800b6f0 <_close_r>:
 800b6f0:	b538      	push	{r3, r4, r5, lr}
 800b6f2:	4d06      	ldr	r5, [pc, #24]	; (800b70c <_close_r+0x1c>)
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	4604      	mov	r4, r0
 800b6f8:	4608      	mov	r0, r1
 800b6fa:	602b      	str	r3, [r5, #0]
 800b6fc:	f7f6 fcc7 	bl	800208e <_close>
 800b700:	1c43      	adds	r3, r0, #1
 800b702:	d102      	bne.n	800b70a <_close_r+0x1a>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	b103      	cbz	r3, 800b70a <_close_r+0x1a>
 800b708:	6023      	str	r3, [r4, #0]
 800b70a:	bd38      	pop	{r3, r4, r5, pc}
 800b70c:	200003cc 	.word	0x200003cc

0800b710 <fiprintf>:
 800b710:	b40e      	push	{r1, r2, r3}
 800b712:	b503      	push	{r0, r1, lr}
 800b714:	4601      	mov	r1, r0
 800b716:	ab03      	add	r3, sp, #12
 800b718:	4805      	ldr	r0, [pc, #20]	; (800b730 <fiprintf+0x20>)
 800b71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b71e:	6800      	ldr	r0, [r0, #0]
 800b720:	9301      	str	r3, [sp, #4]
 800b722:	f7ff fe07 	bl	800b334 <_vfiprintf_r>
 800b726:	b002      	add	sp, #8
 800b728:	f85d eb04 	ldr.w	lr, [sp], #4
 800b72c:	b003      	add	sp, #12
 800b72e:	4770      	bx	lr
 800b730:	20000010 	.word	0x20000010

0800b734 <_fstat_r>:
 800b734:	b538      	push	{r3, r4, r5, lr}
 800b736:	4d07      	ldr	r5, [pc, #28]	; (800b754 <_fstat_r+0x20>)
 800b738:	2300      	movs	r3, #0
 800b73a:	4604      	mov	r4, r0
 800b73c:	4608      	mov	r0, r1
 800b73e:	4611      	mov	r1, r2
 800b740:	602b      	str	r3, [r5, #0]
 800b742:	f7f6 fcb0 	bl	80020a6 <_fstat>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d102      	bne.n	800b750 <_fstat_r+0x1c>
 800b74a:	682b      	ldr	r3, [r5, #0]
 800b74c:	b103      	cbz	r3, 800b750 <_fstat_r+0x1c>
 800b74e:	6023      	str	r3, [r4, #0]
 800b750:	bd38      	pop	{r3, r4, r5, pc}
 800b752:	bf00      	nop
 800b754:	200003cc 	.word	0x200003cc

0800b758 <_isatty_r>:
 800b758:	b538      	push	{r3, r4, r5, lr}
 800b75a:	4d06      	ldr	r5, [pc, #24]	; (800b774 <_isatty_r+0x1c>)
 800b75c:	2300      	movs	r3, #0
 800b75e:	4604      	mov	r4, r0
 800b760:	4608      	mov	r0, r1
 800b762:	602b      	str	r3, [r5, #0]
 800b764:	f7f6 fcaf 	bl	80020c6 <_isatty>
 800b768:	1c43      	adds	r3, r0, #1
 800b76a:	d102      	bne.n	800b772 <_isatty_r+0x1a>
 800b76c:	682b      	ldr	r3, [r5, #0]
 800b76e:	b103      	cbz	r3, 800b772 <_isatty_r+0x1a>
 800b770:	6023      	str	r3, [r4, #0]
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	200003cc 	.word	0x200003cc

0800b778 <_lseek_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	4d07      	ldr	r5, [pc, #28]	; (800b798 <_lseek_r+0x20>)
 800b77c:	4604      	mov	r4, r0
 800b77e:	4608      	mov	r0, r1
 800b780:	4611      	mov	r1, r2
 800b782:	2200      	movs	r2, #0
 800b784:	602a      	str	r2, [r5, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	f7f6 fca8 	bl	80020dc <_lseek>
 800b78c:	1c43      	adds	r3, r0, #1
 800b78e:	d102      	bne.n	800b796 <_lseek_r+0x1e>
 800b790:	682b      	ldr	r3, [r5, #0]
 800b792:	b103      	cbz	r3, 800b796 <_lseek_r+0x1e>
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	bd38      	pop	{r3, r4, r5, pc}
 800b798:	200003cc 	.word	0x200003cc

0800b79c <memmove>:
 800b79c:	4288      	cmp	r0, r1
 800b79e:	b510      	push	{r4, lr}
 800b7a0:	eb01 0402 	add.w	r4, r1, r2
 800b7a4:	d902      	bls.n	800b7ac <memmove+0x10>
 800b7a6:	4284      	cmp	r4, r0
 800b7a8:	4623      	mov	r3, r4
 800b7aa:	d807      	bhi.n	800b7bc <memmove+0x20>
 800b7ac:	1e43      	subs	r3, r0, #1
 800b7ae:	42a1      	cmp	r1, r4
 800b7b0:	d008      	beq.n	800b7c4 <memmove+0x28>
 800b7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7ba:	e7f8      	b.n	800b7ae <memmove+0x12>
 800b7bc:	4402      	add	r2, r0
 800b7be:	4601      	mov	r1, r0
 800b7c0:	428a      	cmp	r2, r1
 800b7c2:	d100      	bne.n	800b7c6 <memmove+0x2a>
 800b7c4:	bd10      	pop	{r4, pc}
 800b7c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ce:	e7f7      	b.n	800b7c0 <memmove+0x24>

0800b7d0 <__malloc_lock>:
 800b7d0:	4801      	ldr	r0, [pc, #4]	; (800b7d8 <__malloc_lock+0x8>)
 800b7d2:	f7fe bde2 	b.w	800a39a <__retarget_lock_acquire_recursive>
 800b7d6:	bf00      	nop
 800b7d8:	200003c0 	.word	0x200003c0

0800b7dc <__malloc_unlock>:
 800b7dc:	4801      	ldr	r0, [pc, #4]	; (800b7e4 <__malloc_unlock+0x8>)
 800b7de:	f7fe bddd 	b.w	800a39c <__retarget_lock_release_recursive>
 800b7e2:	bf00      	nop
 800b7e4:	200003c0 	.word	0x200003c0

0800b7e8 <_realloc_r>:
 800b7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	4614      	mov	r4, r2
 800b7f0:	460e      	mov	r6, r1
 800b7f2:	b921      	cbnz	r1, 800b7fe <_realloc_r+0x16>
 800b7f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	f7ff bba1 	b.w	800af40 <_malloc_r>
 800b7fe:	b92a      	cbnz	r2, 800b80c <_realloc_r+0x24>
 800b800:	f7ff fb32 	bl	800ae68 <_free_r>
 800b804:	4625      	mov	r5, r4
 800b806:	4628      	mov	r0, r5
 800b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b80c:	f000 f835 	bl	800b87a <_malloc_usable_size_r>
 800b810:	4284      	cmp	r4, r0
 800b812:	4607      	mov	r7, r0
 800b814:	d802      	bhi.n	800b81c <_realloc_r+0x34>
 800b816:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b81a:	d812      	bhi.n	800b842 <_realloc_r+0x5a>
 800b81c:	4621      	mov	r1, r4
 800b81e:	4640      	mov	r0, r8
 800b820:	f7ff fb8e 	bl	800af40 <_malloc_r>
 800b824:	4605      	mov	r5, r0
 800b826:	2800      	cmp	r0, #0
 800b828:	d0ed      	beq.n	800b806 <_realloc_r+0x1e>
 800b82a:	42bc      	cmp	r4, r7
 800b82c:	4622      	mov	r2, r4
 800b82e:	4631      	mov	r1, r6
 800b830:	bf28      	it	cs
 800b832:	463a      	movcs	r2, r7
 800b834:	f7fe fe32 	bl	800a49c <memcpy>
 800b838:	4631      	mov	r1, r6
 800b83a:	4640      	mov	r0, r8
 800b83c:	f7ff fb14 	bl	800ae68 <_free_r>
 800b840:	e7e1      	b.n	800b806 <_realloc_r+0x1e>
 800b842:	4635      	mov	r5, r6
 800b844:	e7df      	b.n	800b806 <_realloc_r+0x1e>
	...

0800b848 <_read_r>:
 800b848:	b538      	push	{r3, r4, r5, lr}
 800b84a:	4d07      	ldr	r5, [pc, #28]	; (800b868 <_read_r+0x20>)
 800b84c:	4604      	mov	r4, r0
 800b84e:	4608      	mov	r0, r1
 800b850:	4611      	mov	r1, r2
 800b852:	2200      	movs	r2, #0
 800b854:	602a      	str	r2, [r5, #0]
 800b856:	461a      	mov	r2, r3
 800b858:	f7f6 fbe0 	bl	800201c <_read>
 800b85c:	1c43      	adds	r3, r0, #1
 800b85e:	d102      	bne.n	800b866 <_read_r+0x1e>
 800b860:	682b      	ldr	r3, [r5, #0]
 800b862:	b103      	cbz	r3, 800b866 <_read_r+0x1e>
 800b864:	6023      	str	r3, [r4, #0]
 800b866:	bd38      	pop	{r3, r4, r5, pc}
 800b868:	200003cc 	.word	0x200003cc

0800b86c <abort>:
 800b86c:	b508      	push	{r3, lr}
 800b86e:	2006      	movs	r0, #6
 800b870:	f000 f834 	bl	800b8dc <raise>
 800b874:	2001      	movs	r0, #1
 800b876:	f7f6 fbc7 	bl	8002008 <_exit>

0800b87a <_malloc_usable_size_r>:
 800b87a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b87e:	1f18      	subs	r0, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	bfbc      	itt	lt
 800b884:	580b      	ldrlt	r3, [r1, r0]
 800b886:	18c0      	addlt	r0, r0, r3
 800b888:	4770      	bx	lr

0800b88a <_raise_r>:
 800b88a:	291f      	cmp	r1, #31
 800b88c:	b538      	push	{r3, r4, r5, lr}
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	d904      	bls.n	800b89e <_raise_r+0x14>
 800b894:	2316      	movs	r3, #22
 800b896:	6003      	str	r3, [r0, #0]
 800b898:	f04f 30ff 	mov.w	r0, #4294967295
 800b89c:	bd38      	pop	{r3, r4, r5, pc}
 800b89e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b8a0:	b112      	cbz	r2, 800b8a8 <_raise_r+0x1e>
 800b8a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b8a6:	b94b      	cbnz	r3, 800b8bc <_raise_r+0x32>
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 f831 	bl	800b910 <_getpid_r>
 800b8ae:	462a      	mov	r2, r5
 800b8b0:	4601      	mov	r1, r0
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8b8:	f000 b818 	b.w	800b8ec <_kill_r>
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d00a      	beq.n	800b8d6 <_raise_r+0x4c>
 800b8c0:	1c59      	adds	r1, r3, #1
 800b8c2:	d103      	bne.n	800b8cc <_raise_r+0x42>
 800b8c4:	2316      	movs	r3, #22
 800b8c6:	6003      	str	r3, [r0, #0]
 800b8c8:	2001      	movs	r0, #1
 800b8ca:	e7e7      	b.n	800b89c <_raise_r+0x12>
 800b8cc:	2400      	movs	r4, #0
 800b8ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8d2:	4628      	mov	r0, r5
 800b8d4:	4798      	blx	r3
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e7e0      	b.n	800b89c <_raise_r+0x12>
	...

0800b8dc <raise>:
 800b8dc:	4b02      	ldr	r3, [pc, #8]	; (800b8e8 <raise+0xc>)
 800b8de:	4601      	mov	r1, r0
 800b8e0:	6818      	ldr	r0, [r3, #0]
 800b8e2:	f7ff bfd2 	b.w	800b88a <_raise_r>
 800b8e6:	bf00      	nop
 800b8e8:	20000010 	.word	0x20000010

0800b8ec <_kill_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_kill_r+0x20>)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	4608      	mov	r0, r1
 800b8f6:	4611      	mov	r1, r2
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	f7f6 fb75 	bl	8001fe8 <_kill>
 800b8fe:	1c43      	adds	r3, r0, #1
 800b900:	d102      	bne.n	800b908 <_kill_r+0x1c>
 800b902:	682b      	ldr	r3, [r5, #0]
 800b904:	b103      	cbz	r3, 800b908 <_kill_r+0x1c>
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	bd38      	pop	{r3, r4, r5, pc}
 800b90a:	bf00      	nop
 800b90c:	200003cc 	.word	0x200003cc

0800b910 <_getpid_r>:
 800b910:	f7f6 bb62 	b.w	8001fd8 <_getpid>

0800b914 <_init>:
 800b914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b916:	bf00      	nop
 800b918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b91a:	bc08      	pop	{r3}
 800b91c:	469e      	mov	lr, r3
 800b91e:	4770      	bx	lr

0800b920 <_fini>:
 800b920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b922:	bf00      	nop
 800b924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b926:	bc08      	pop	{r3}
 800b928:	469e      	mov	lr, r3
 800b92a:	4770      	bx	lr
