
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b63c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd64  0800bd64  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd64  0800bd64  0001bd64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd6c  0800bd6c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd70  0800bd70  0001bd70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800bd74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  200001e4  0800bf58  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  0800bf58  000203d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012737  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b55  00000000  00000000  0003294b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00036440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000242ee  00000000  00000000  000372a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013943  00000000  00000000  0005b596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da7e8  00000000  00000000  0006eed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001496c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005674  00000000  00000000  00149714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7b4 	.word	0x0800b7b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800b7b4 	.word	0x0800b7b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fa87 	bl	800256c <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fe92 	bl	8001d8c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f001 fbe9 	bl	8002850 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fe82 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000200 	.word	0x20000200
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f002 fbeb 	bl	80038e4 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream1;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f001 ffc3 	bl	80030e0 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f000 fe14 	bl	8001d8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	20000248 	.word	0x20000248
 8001188:	40026428 	.word	0x40026428

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f001 ff06 	bl	8002fb2 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 fdee 	bl	8001d8c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f001 ff3e 	bl	8003040 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 fddf 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 fb49 	bl	80038e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2039      	movs	r0, #57	; 0x39
 8001290:	f001 fe59 	bl	8002f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001294:	2039      	movs	r0, #57	; 0x39
 8001296:	f001 fe72 	bl	8002f7e <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	4b56      	ldr	r3, [pc, #344]	; (800141c <MX_GPIO_Init+0x174>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a55      	ldr	r2, [pc, #340]	; (800141c <MX_GPIO_Init+0x174>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <MX_GPIO_Init+0x174>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	61bb      	str	r3, [r7, #24]
 80012d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	4b4f      	ldr	r3, [pc, #316]	; (800141c <MX_GPIO_Init+0x174>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <MX_GPIO_Init+0x174>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b4c      	ldr	r3, [pc, #304]	; (800141c <MX_GPIO_Init+0x174>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <MX_GPIO_Init+0x174>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a47      	ldr	r2, [pc, #284]	; (800141c <MX_GPIO_Init+0x174>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b45      	ldr	r3, [pc, #276]	; (800141c <MX_GPIO_Init+0x174>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b41      	ldr	r3, [pc, #260]	; (800141c <MX_GPIO_Init+0x174>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a40      	ldr	r2, [pc, #256]	; (800141c <MX_GPIO_Init+0x174>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b3e      	ldr	r3, [pc, #248]	; (800141c <MX_GPIO_Init+0x174>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b3a      	ldr	r3, [pc, #232]	; (800141c <MX_GPIO_Init+0x174>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a39      	ldr	r2, [pc, #228]	; (800141c <MX_GPIO_Init+0x174>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b37      	ldr	r3, [pc, #220]	; (800141c <MX_GPIO_Init+0x174>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <MX_GPIO_Init+0x174>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a32      	ldr	r2, [pc, #200]	; (800141c <MX_GPIO_Init+0x174>)
 8001354:	f043 0308 	orr.w	r3, r3, #8
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b30      	ldr	r3, [pc, #192]	; (800141c <MX_GPIO_Init+0x174>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f248 0181 	movw	r1, #32897	; 0x8081
 800136c:	482c      	ldr	r0, [pc, #176]	; (8001420 <MX_GPIO_Init+0x178>)
 800136e:	f002 fc6d 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001372:	2200      	movs	r2, #0
 8001374:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 8001378:	482a      	ldr	r0, [pc, #168]	; (8001424 <MX_GPIO_Init+0x17c>)
 800137a:	f002 fc67 	bl	8003c4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001384:	4828      	ldr	r0, [pc, #160]	; (8001428 <MX_GPIO_Init+0x180>)
 8001386:	f002 fc61 	bl	8003c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800138a:	2310      	movs	r3, #16
 800138c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138e:	2300      	movs	r3, #0
 8001390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001396:	f107 031c 	add.w	r3, r7, #28
 800139a:	4619      	mov	r1, r3
 800139c:	4823      	ldr	r0, [pc, #140]	; (800142c <MX_GPIO_Init+0x184>)
 800139e:	f002 faa1 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = rec_left_Pin|rec_right_Pin;
 80013a2:	2306      	movs	r3, #6
 80013a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	; (8001428 <MX_GPIO_Init+0x180>)
 80013b6:	f002 fa95 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 80013ba:	f248 0381 	movw	r3, #32897	; 0x8081
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4813      	ldr	r0, [pc, #76]	; (8001420 <MX_GPIO_Init+0x178>)
 80013d4:	f002 fa86 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d8:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013dc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 031c 	add.w	r3, r7, #28
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <MX_GPIO_Init+0x17c>)
 80013f2:	f002 fa77 	bl	80038e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 031c 	add.w	r3, r7, #28
 800140c:	4619      	mov	r1, r3
 800140e:	4806      	ldr	r0, [pc, #24]	; (8001428 <MX_GPIO_Init+0x180>)
 8001410:	f002 fa68 	bl	80038e4 <HAL_GPIO_Init>

}
 8001414:	bf00      	nop
 8001416:	3730      	adds	r7, #48	; 0x30
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40023800 	.word	0x40023800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40020800 	.word	0x40020800
 8001428:	40020000 	.word	0x40020000
 800142c:	40021000 	.word	0x40021000

08001430 <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
    if (ch == '\n')
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b0a      	cmp	r3, #10
 800143c:	d109      	bne.n	8001452 <__io_putchar+0x22>
    {
        uint8_t ch2 = '\r';
 800143e:	230d      	movs	r3, #13
 8001440:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8001442:	f107 010f 	add.w	r1, r7, #15
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
 800144a:	2201      	movs	r2, #1
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <__io_putchar+0x3c>)
 800144e:	f004 fc48 	bl	8005ce2 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001452:	1d39      	adds	r1, r7, #4
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	2201      	movs	r2, #1
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <__io_putchar+0x3c>)
 800145c:	f004 fc41 	bl	8005ce2 <HAL_UART_Transmit>
    return 1;
 8001460:	2301      	movs	r3, #1
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000378 	.word	0x20000378

08001470 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d110      	bne.n	80014a2 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3305      	adds	r3, #5
 8001486:	b29a      	uxth	r2, r3
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148a:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4808      	ldr	r0, [pc, #32]	; (80014b4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001494:	f006 fb00 	bl	8007a98 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001498:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800149e:	f002 fbee 	bl	8003c7e <HAL_GPIO_TogglePin>
	{
		printf("TIM2 przerwanie\n");
		RC5_ResetPacket();
	}
*/
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000330 	.word	0x20000330
 80014b0:	200002e2 	.word	0x200002e2
 80014b4:	0800b7d0 	.word	0x0800b7d0
 80014b8:	40020c00 	.word	0x40020c00

080014bc <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	    	printf("CH 2 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
*/
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <STOP>:

void STOP(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	speed = 0;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <STOP+0x34>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <STOP+0x34>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	4809      	ldr	r0, [pc, #36]	; (8001508 <STOP+0x38>)
 80014e4:	f001 fd87 	bl	8002ff6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ee:	4807      	ldr	r0, [pc, #28]	; (800150c <STOP+0x3c>)
 80014f0:	f002 fbac 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014fa:	4804      	ldr	r0, [pc, #16]	; (800150c <STOP+0x3c>)
 80014fc:	f002 fba6 	bl	8003c4c <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200002c8 	.word	0x200002c8
 8001508:	200002a8 	.word	0x200002a8
 800150c:	40020800 	.word	0x40020800

08001510 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	drive = atoi((char*)&RX_BUFFER[0]);
 8001518:	481a      	ldr	r0, [pc, #104]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 800151a:	f005 fc0d 	bl	8006d38 <atoi>
 800151e:	4603      	mov	r3, r0
 8001520:	4a19      	ldr	r2, [pc, #100]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001522:	6013      	str	r3, [r2, #0]

	switch(drive)
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_RxCpltCallback+0x78>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b05      	cmp	r3, #5
 800152a:	d821      	bhi.n	8001570 <HAL_UART_RxCpltCallback+0x60>
 800152c:	a201      	add	r2, pc, #4	; (adr r2, 8001534 <HAL_UART_RxCpltCallback+0x24>)
 800152e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001532:	bf00      	nop
 8001534:	0800154d 	.word	0x0800154d
 8001538:	08001559 	.word	0x08001559
 800153c:	08001561 	.word	0x08001561
 8001540:	08001571 	.word	0x08001571
 8001544:	08001571 	.word	0x08001571
 8001548:	08001569 	.word	0x08001569
		{
		case 0:
			STOP();
 800154c:	f7ff ffc0 	bl	80014d0 <STOP>
			printf("Odebrano: 0\n");
 8001550:	480e      	ldr	r0, [pc, #56]	; (800158c <HAL_UART_RxCpltCallback+0x7c>)
 8001552:	f006 fb27 	bl	8007ba4 <puts>
			break;
 8001556:	e00c      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 1:
			printf("Odebrano: 1\n");
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <HAL_UART_RxCpltCallback+0x80>)
 800155a:	f006 fb23 	bl	8007ba4 <puts>
			break;
 800155e:	e008      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 2:
			printf("Odebrano: 2\n");
 8001560:	480c      	ldr	r0, [pc, #48]	; (8001594 <HAL_UART_RxCpltCallback+0x84>)
 8001562:	f006 fb1f 	bl	8007ba4 <puts>
			break;
 8001566:	e004      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		case 5:
			printf("Odebrano: 5\n");
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_UART_RxCpltCallback+0x88>)
 800156a:	f006 fb1b 	bl	8007ba4 <puts>
			break;
 800156e:	e000      	b.n	8001572 <HAL_UART_RxCpltCallback+0x62>
		default:
			break;
 8001570:	bf00      	nop
		break;
	}
*/

	//wlaczenie nasluchiwania na kanale UART
	HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 8001572:	2201      	movs	r2, #1
 8001574:	4903      	ldr	r1, [pc, #12]	; (8001584 <HAL_UART_RxCpltCallback+0x74>)
 8001576:	4809      	ldr	r0, [pc, #36]	; (800159c <HAL_UART_RxCpltCallback+0x8c>)
 8001578:	f004 fc45 	bl	8005e06 <HAL_UART_Receive_IT>

}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	200002c4 	.word	0x200002c4
 8001588:	20000000 	.word	0x20000000
 800158c:	0800b7e4 	.word	0x0800b7e4
 8001590:	0800b7f0 	.word	0x0800b7f0
 8001594:	0800b7fc 	.word	0x0800b7fc
 8001598:	0800b808 	.word	0x0800b808
 800159c:	20000378 	.word	0x20000378

080015a0 <PRZOD>:

void PRZOD(void){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <PRZOD+0x44>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	480e      	ldr	r0, [pc, #56]	; (80015e8 <PRZOD+0x48>)
 80015ae:	f001 fd22 	bl	8002ff6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 przód
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b8:	480c      	ldr	r0, [pc, #48]	; (80015ec <PRZOD+0x4c>)
 80015ba:	f002 fb47 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 przód
 80015be:	2200      	movs	r2, #0
 80015c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c4:	4809      	ldr	r0, [pc, #36]	; (80015ec <PRZOD+0x4c>)
 80015c6:	f002 fb41 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 przód
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <PRZOD+0x50>)
 80015d2:	f002 fb3b 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 przód
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	4804      	ldr	r0, [pc, #16]	; (80015ec <PRZOD+0x4c>)
 80015dc:	f002 fb36 	bl	8003c4c <HAL_GPIO_WritePin>
}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002c8 	.word	0x200002c8
 80015e8:	200002a8 	.word	0x200002a8
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020000 	.word	0x40020000

080015f4 <OBROT_P>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
}

void OBROT_P(void){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <OBROT_P+0x44>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	480e      	ldr	r0, [pc, #56]	; (800163c <OBROT_P+0x48>)
 8001602:	f001 fcf8 	bl	8002ff6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001606:	2201      	movs	r2, #1
 8001608:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <OBROT_P+0x4c>)
 800160e:	f002 fb1d 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <OBROT_P+0x4c>)
 800161a:	f002 fb17 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <OBROT_P+0x50>)
 8001626:	f002 fb11 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 800162a:	2201      	movs	r2, #1
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	4804      	ldr	r0, [pc, #16]	; (8001640 <OBROT_P+0x4c>)
 8001630:	f002 fb0c 	bl	8003c4c <HAL_GPIO_WritePin>
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002c8 	.word	0x200002c8
 800163c:	200002a8 	.word	0x200002a8
 8001640:	40020800 	.word	0x40020800
 8001644:	40020000 	.word	0x40020000

08001648 <OBROT_L>:

void OBROT_L(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <OBROT_L+0x44>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	480e      	ldr	r0, [pc, #56]	; (8001690 <OBROT_L+0x48>)
 8001656:	f001 fcce 	bl	8002ff6 <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 800165a:	2200      	movs	r2, #0
 800165c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001660:	480c      	ldr	r0, [pc, #48]	; (8001694 <OBROT_L+0x4c>)
 8001662:	f002 faf3 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7100 	mov.w	r1, #512	; 0x200
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <OBROT_L+0x4c>)
 800166e:	f002 faed 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <OBROT_L+0x50>)
 800167a:	f002 fae7 	bl	8003c4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800167e:	2200      	movs	r2, #0
 8001680:	2180      	movs	r1, #128	; 0x80
 8001682:	4804      	ldr	r0, [pc, #16]	; (8001694 <OBROT_L+0x4c>)
 8001684:	f002 fae2 	bl	8003c4c <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200002c8 	.word	0x200002c8
 8001690:	200002a8 	.word	0x200002a8
 8001694:	40020800 	.word	0x40020800
 8001698:	40020000 	.word	0x40020000

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fecd 	bl	8002440 <HAL_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 fb07 	bl	8001cb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f7ff fdfd 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ae:	f7ff fddb 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 80016b2:	f000 fd61 	bl	8002178 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80016b6:	f000 fe1f 	bl	80022f8 <MX_USART2_UART_Init>
  MX_DAC_Init();
 80016ba:	f7ff fd67 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 80016be:	f7ff fc9b 	bl	8000ff8 <MX_ADC3_Init>
  MX_TIM2_Init();
 80016c2:	f000 fcb1 	bl	8002028 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  //RC5_Init();

//  volatile static uint16_t reciver[2];
  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 80016c6:	2201      	movs	r2, #1
 80016c8:	4982      	ldr	r1, [pc, #520]	; (80018d4 <main+0x238>)
 80016ca:	4883      	ldr	r0, [pc, #524]	; (80018d8 <main+0x23c>)
 80016cc:	f000 ff92 	bl	80025f4 <HAL_ADC_Start_DMA>
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)reciver, 2); //uruchomienie konwersji ADC z DMA

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10 - licznik czasu
 80016d0:	4882      	ldr	r0, [pc, #520]	; (80018dc <main+0x240>)
 80016d2:	f002 ff97 	bl	8004604 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1); //timer 2 - pomiar czujnika odleglosci
 80016d6:	2100      	movs	r1, #0
 80016d8:	4881      	ldr	r0, [pc, #516]	; (80018e0 <main+0x244>)
 80016da:	f003 f97f 	bl	80049dc <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 80016de:	2104      	movs	r1, #4
 80016e0:	487f      	ldr	r0, [pc, #508]	; (80018e0 <main+0x244>)
 80016e2:	f003 f97b 	bl	80049dc <HAL_TIM_IC_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80016e6:	2108      	movs	r1, #8
 80016e8:	487d      	ldr	r0, [pc, #500]	; (80018e0 <main+0x244>)
 80016ea:	f003 f855 	bl	8004798 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 80016ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016f2:	f000 ff17 	bl	8002524 <HAL_Delay>
/*  HAL_TIM_Base_Start_IT(&htim2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
*/

  HAL_UART_Receive_IT(&huart2, RX_BUFFER, BUFFER_LEN);
 80016f6:	2201      	movs	r2, #1
 80016f8:	497a      	ldr	r1, [pc, #488]	; (80018e4 <main+0x248>)
 80016fa:	487b      	ldr	r0, [pc, #492]	; (80018e8 <main+0x24c>)
 80016fc:	f004 fb83 	bl	8005e06 <HAL_UART_Receive_IT>
*/
	  //printf("ADC = %lu (%.3f V)\n", battery_adc, battery_voltage);
	  //HAL_Delay(300);

	  /*-----------Odczyt stanu baterii---------------*/
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001700:	4b74      	ldr	r3, [pc, #464]	; (80018d4 <main+0x238>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800170c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80018ec <main+0x250>
 8001710:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001714:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018f0 <main+0x254>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	4b75      	ldr	r3, [pc, #468]	; (80018f4 <main+0x258>)
 800171e:	edc3 7a00 	vstr	s15, [r3]

	  //float voltage = 3.3f * rec_left / 4096.0f;
	  //printf("ADC = %lu (%.3f V)\n", value, voltage);

	  /*--------------CZUJNIK ODLEGLOSCI----------------*/
	  uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8001722:	2100      	movs	r1, #0
 8001724:	486e      	ldr	r0, [pc, #440]	; (80018e0 <main+0x244>)
 8001726:	f003 fd63 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 800172a:	6078      	str	r0, [r7, #4]
	  uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 800172c:	2104      	movs	r1, #4
 800172e:	486c      	ldr	r0, [pc, #432]	; (80018e0 <main+0x244>)
 8001730:	f003 fd5e 	bl	80051f0 <HAL_TIM_ReadCapturedValue>
 8001734:	6038      	str	r0, [r7, #0]

	  distance = (stop - start) / 58;
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a6e      	ldr	r2, [pc, #440]	; (80018f8 <main+0x25c>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	095b      	lsrs	r3, r3, #5
 8001744:	4a6d      	ldr	r2, [pc, #436]	; (80018fc <main+0x260>)
 8001746:	6013      	str	r3, [r2, #0]
	  //printf("%lu cm\n", distance);

	  /* sygnał przychodzący od odbiorników -------------------------------------------IR */
	  /*-------sprawdzenie czy sygnal przychodzi-------*/
	  if (HAL_GPIO_ReadPin(rec_left_GPIO_Port, rec_left_Pin) == GPIO_PIN_RESET)
 8001748:	2102      	movs	r1, #2
 800174a:	486d      	ldr	r0, [pc, #436]	; (8001900 <main+0x264>)
 800174c:	f002 fa66 	bl	8003c1c <HAL_GPIO_ReadPin>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <main+0xce>
	  {
		  rec_left = true;
 8001756:	4b6b      	ldr	r3, [pc, #428]	; (8001904 <main+0x268>)
 8001758:	2201      	movs	r2, #1
 800175a:	701a      	strb	r2, [r3, #0]
		  printf("lewy\n");
 800175c:	486a      	ldr	r0, [pc, #424]	; (8001908 <main+0x26c>)
 800175e:	f006 fa21 	bl	8007ba4 <puts>
		  HAL_Delay(100);
 8001762:	2064      	movs	r0, #100	; 0x64
 8001764:	f000 fede 	bl	8002524 <HAL_Delay>
 8001768:	e002      	b.n	8001770 <main+0xd4>
	  }else
		  rec_left = false;
 800176a:	4b66      	ldr	r3, [pc, #408]	; (8001904 <main+0x268>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(rec_right_GPIO_Port, rec_right_Pin) == GPIO_PIN_RESET)
 8001770:	2104      	movs	r1, #4
 8001772:	4863      	ldr	r0, [pc, #396]	; (8001900 <main+0x264>)
 8001774:	f002 fa52 	bl	8003c1c <HAL_GPIO_ReadPin>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <main+0xf6>
	  {
		  rec_right = true;
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <main+0x270>)
 8001780:	2201      	movs	r2, #1
 8001782:	701a      	strb	r2, [r3, #0]
		  printf("prawy\n");
 8001784:	4862      	ldr	r0, [pc, #392]	; (8001910 <main+0x274>)
 8001786:	f006 fa0d 	bl	8007ba4 <puts>
		  HAL_Delay(100);
 800178a:	2064      	movs	r0, #100	; 0x64
 800178c:	f000 feca 	bl	8002524 <HAL_Delay>
 8001790:	e002      	b.n	8001798 <main+0xfc>
	  }else
		  rec_right = false;
 8001792:	4b5e      	ldr	r3, [pc, #376]	; (800190c <main+0x270>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]

	  /*-----SWITCH DLA DANYCH ZE STACJI-------*/
	  switch(drive)
 8001798:	4b5e      	ldr	r3, [pc, #376]	; (8001914 <main+0x278>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d85f      	bhi.n	8001860 <main+0x1c4>
 80017a0:	a201      	add	r2, pc, #4	; (adr r2, 80017a8 <main+0x10c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017c1 	.word	0x080017c1
 80017ac:	080017d3 	.word	0x080017d3
 80017b0:	080017e7 	.word	0x080017e7
 80017b4:	08001861 	.word	0x08001861
 80017b8:	08001861 	.word	0x08001861
 80017bc:	080017fb 	.word	0x080017fb
	  {
	  	  case 0:
	  		  STOP();
 80017c0:	f7ff fe86 	bl	80014d0 <STOP>
	  		  //nadawanie informacji przez UART
	  		  printf("STOP\n");
 80017c4:	4854      	ldr	r0, [pc, #336]	; (8001918 <main+0x27c>)
 80017c6:	f006 f9ed 	bl	8007ba4 <puts>
	  		  drive = 10;
 80017ca:	4b52      	ldr	r3, [pc, #328]	; (8001914 <main+0x278>)
 80017cc:	220a      	movs	r2, #10
 80017ce:	601a      	str	r2, [r3, #0]
	  		  break;
 80017d0:	e047      	b.n	8001862 <main+0x1c6>
	  	  case 1:
	  		  //info, ze stacja wykryla przed soba robota
	  		  printf("--- UWAGA STACJA WYKRYLA ROBOTA PRZED SOBA\n");
 80017d2:	4852      	ldr	r0, [pc, #328]	; (800191c <main+0x280>)
 80017d4:	f006 f9e6 	bl	8007ba4 <puts>
	  		  STATION = true;
 80017d8:	4b51      	ldr	r3, [pc, #324]	; (8001920 <main+0x284>)
 80017da:	2201      	movs	r2, #1
 80017dc:	701a      	strb	r2, [r3, #0]
	  		  drive = 10;
 80017de:	4b4d      	ldr	r3, [pc, #308]	; (8001914 <main+0x278>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	601a      	str	r2, [r3, #0]
	  		  break;
 80017e4:	e03d      	b.n	8001862 <main+0x1c6>
	  	  case 2:
	  		//info, ze stacja wykryla przed soba robota
			  printf("--- ROBOT SIE ODDALIL\n");
 80017e6:	484f      	ldr	r0, [pc, #316]	; (8001924 <main+0x288>)
 80017e8:	f006 f9dc 	bl	8007ba4 <puts>
			  STATION = false;
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <main+0x284>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			  drive = 10;
 80017f2:	4b48      	ldr	r3, [pc, #288]	; (8001914 <main+0x278>)
 80017f4:	220a      	movs	r2, #10
 80017f6:	601a      	str	r2, [r3, #0]
			  break;
 80017f8:	e033      	b.n	8001862 <main+0x1c6>
	  	  case 5:
	  		  //TRYB AUTOMATYCZNY DOKOWANIA
			  STOP();
 80017fa:	f7ff fe69 	bl	80014d0 <STOP>
			  if (automat == false){
 80017fe:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <main+0x28c>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f083 0301 	eor.w	r3, r3, #1
 8001806:	b2db      	uxtb	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <main+0x182>
				  STOP();
 800180c:	f7ff fe60 	bl	80014d0 <STOP>
				  automat = true;
 8001810:	4b45      	ldr	r3, [pc, #276]	; (8001928 <main+0x28c>)
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> ON\n");
 8001816:	4845      	ldr	r0, [pc, #276]	; (800192c <main+0x290>)
 8001818:	f006 f9c4 	bl	8007ba4 <puts>
 800181c:	e01c      	b.n	8001858 <main+0x1bc>
			  }else{
				  STOP();
 800181e:	f7ff fe57 	bl	80014d0 <STOP>
				  spin_right = false;
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <main+0x294>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
				  spin_left = false;
 8001828:	4b42      	ldr	r3, [pc, #264]	; (8001934 <main+0x298>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
				  automat = false;
 800182e:	4b3e      	ldr	r3, [pc, #248]	; (8001928 <main+0x28c>)
 8001830:	2200      	movs	r2, #0
 8001832:	701a      	strb	r2, [r3, #0]
				  left = false;
 8001834:	4b40      	ldr	r3, [pc, #256]	; (8001938 <main+0x29c>)
 8001836:	2200      	movs	r2, #0
 8001838:	701a      	strb	r2, [r3, #0]
				  left_center = false;
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <main+0x2a0>)
 800183c:	2200      	movs	r2, #0
 800183e:	701a      	strb	r2, [r3, #0]
				  center = false;
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <main+0x2a4>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
				  right_center = false;
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <main+0x2a8>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
				  right = false;
 800184c:	4b3e      	ldr	r3, [pc, #248]	; (8001948 <main+0x2ac>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
				  printf("Dokowanie -> OFF\n");
 8001852:	483e      	ldr	r0, [pc, #248]	; (800194c <main+0x2b0>)
 8001854:	f006 f9a6 	bl	8007ba4 <puts>
			  }
			  drive = 10;
 8001858:	4b2e      	ldr	r3, [pc, #184]	; (8001914 <main+0x278>)
 800185a:	220a      	movs	r2, #10
 800185c:	601a      	str	r2, [r3, #0]
			  break;
 800185e:	e000      	b.n	8001862 <main+0x1c6>
		  default:
			  break;
 8001860:	bf00      	nop
	  default:
		  break;
	  }
*/

	  if (automat == true)
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <main+0x28c>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	f43f af4a 	beq.w	8001700 <main+0x64>
		  rec_right = HAL_ADC_GetValue(&hadc2);
		  printf("REC_______RIGHT = %lu\n\n", rec_right);
		  HAL_Delay(300);
*/
		  //lewy NIE
		  if (rec_left == false && spin_right == false)
 800186c:	4b25      	ldr	r3, [pc, #148]	; (8001904 <main+0x268>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	f083 0301 	eor.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d010      	beq.n	800189c <main+0x200>
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <main+0x294>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	f083 0301 	eor.w	r3, r3, #1
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <main+0x200>
		  {
			  spin_left = false;
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <main+0x298>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
			  spin_right = true;
 800188e:	4b28      	ldr	r3, [pc, #160]	; (8001930 <main+0x294>)
 8001890:	2201      	movs	r2, #1
 8001892:	701a      	strb	r2, [r3, #0]
			  center = false;
 8001894:	4b2a      	ldr	r3, [pc, #168]	; (8001940 <main+0x2a4>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
 800189a:	e071      	b.n	8001980 <main+0x2e4>
		  }
		  //lewy TAK; prawy NIE
		  else if (rec_left == true && rec_right == false && spin_left == false)
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <main+0x268>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d055      	beq.n	8001950 <main+0x2b4>
 80018a4:	4b19      	ldr	r3, [pc, #100]	; (800190c <main+0x270>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f083 0301 	eor.w	r3, r3, #1
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d04e      	beq.n	8001950 <main+0x2b4>
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <main+0x298>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	f083 0301 	eor.w	r3, r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d047      	beq.n	8001950 <main+0x2b4>
		  {
			  spin_left = true;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <main+0x298>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <main+0x294>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	701a      	strb	r2, [r3, #0]
			  center = false;
 80018cc:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <main+0x2a4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	e055      	b.n	8001980 <main+0x2e4>
 80018d4:	200002bc 	.word	0x200002bc
 80018d8:	20000200 	.word	0x20000200
 80018dc:	20000330 	.word	0x20000330
 80018e0:	200002e8 	.word	0x200002e8
 80018e4:	200002c4 	.word	0x200002c4
 80018e8:	20000378 	.word	0x20000378
 80018ec:	40533333 	.word	0x40533333
 80018f0:	457ff000 	.word	0x457ff000
 80018f4:	200002cc 	.word	0x200002cc
 80018f8:	8d3dcb09 	.word	0x8d3dcb09
 80018fc:	200002dc 	.word	0x200002dc
 8001900:	40020000 	.word	0x40020000
 8001904:	200002d0 	.word	0x200002d0
 8001908:	0800b814 	.word	0x0800b814
 800190c:	200002d1 	.word	0x200002d1
 8001910:	0800b81c 	.word	0x0800b81c
 8001914:	20000000 	.word	0x20000000
 8001918:	0800b824 	.word	0x0800b824
 800191c:	0800b82c 	.word	0x0800b82c
 8001920:	200002e0 	.word	0x200002e0
 8001924:	0800b858 	.word	0x0800b858
 8001928:	200002c0 	.word	0x200002c0
 800192c:	0800b870 	.word	0x0800b870
 8001930:	200002d2 	.word	0x200002d2
 8001934:	200002d3 	.word	0x200002d3
 8001938:	200002d6 	.word	0x200002d6
 800193c:	200002d8 	.word	0x200002d8
 8001940:	200002d4 	.word	0x200002d4
 8001944:	200002d7 	.word	0x200002d7
 8001948:	200002d5 	.word	0x200002d5
 800194c:	0800b880 	.word	0x0800b880
		  }
		  //lewy TAK; prawy TAK
		  else if (rec_left == true && rec_right == true && center == false)
 8001950:	4bbc      	ldr	r3, [pc, #752]	; (8001c44 <main+0x5a8>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d013      	beq.n	8001980 <main+0x2e4>
 8001958:	4bbb      	ldr	r3, [pc, #748]	; (8001c48 <main+0x5ac>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d00f      	beq.n	8001980 <main+0x2e4>
 8001960:	4bba      	ldr	r3, [pc, #744]	; (8001c4c <main+0x5b0>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	f083 0301 	eor.w	r3, r3, #1
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d008      	beq.n	8001980 <main+0x2e4>
		  {
			  spin_left = false;
 800196e:	4bb8      	ldr	r3, [pc, #736]	; (8001c50 <main+0x5b4>)
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]
			  spin_right = false;
 8001974:	4bb7      	ldr	r3, [pc, #732]	; (8001c54 <main+0x5b8>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
			  center = true;
 800197a:	4bb4      	ldr	r3, [pc, #720]	; (8001c4c <main+0x5b0>)
 800197c:	2201      	movs	r2, #1
 800197e:	701a      	strb	r2, [r3, #0]
		  }

		  if (spin_left == true)
 8001980:	4bb3      	ldr	r3, [pc, #716]	; (8001c50 <main+0x5b4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d069      	beq.n	8001a5c <main+0x3c0>
		  {
			  if (speed != 40)
 8001988:	4bb3      	ldr	r3, [pc, #716]	; (8001c58 <main+0x5bc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b28      	cmp	r3, #40	; 0x28
 800198e:	f43f aeb7 	beq.w	8001700 <main+0x64>
			  {
				  STOP();
 8001992:	f7ff fd9d 	bl	80014d0 <STOP>
				  OBROT_L();
 8001996:	f7ff fe57 	bl	8001648 <OBROT_L>
				  //zwiekszenie predkosci x4
				  speed = 40;
 800199a:	4baf      	ldr	r3, [pc, #700]	; (8001c58 <main+0x5bc>)
 800199c:	2228      	movs	r2, #40	; 0x28
 800199e:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019a6:	48ad      	ldr	r0, [pc, #692]	; (8001c5c <main+0x5c0>)
 80019a8:	f002 f950 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019b2:	48aa      	ldr	r0, [pc, #680]	; (8001c5c <main+0x5c0>)
 80019b4:	f002 f94a 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80019b8:	2064      	movs	r0, #100	; 0x64
 80019ba:	f000 fdb3 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80019be:	2200      	movs	r2, #0
 80019c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019c4:	48a5      	ldr	r0, [pc, #660]	; (8001c5c <main+0x5c0>)
 80019c6:	f002 f941 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80019ca:	2032      	movs	r0, #50	; 0x32
 80019cc:	f000 fdaa 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019d6:	48a1      	ldr	r0, [pc, #644]	; (8001c5c <main+0x5c0>)
 80019d8:	f002 f938 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019e2:	489e      	ldr	r0, [pc, #632]	; (8001c5c <main+0x5c0>)
 80019e4:	f002 f932 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 80019e8:	2064      	movs	r0, #100	; 0x64
 80019ea:	f000 fd9b 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019f4:	4899      	ldr	r0, [pc, #612]	; (8001c5c <main+0x5c0>)
 80019f6:	f002 f929 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f000 fd92 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001a00:	2201      	movs	r2, #1
 8001a02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a06:	4895      	ldr	r0, [pc, #596]	; (8001c5c <main+0x5c0>)
 8001a08:	f002 f920 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a12:	4892      	ldr	r0, [pc, #584]	; (8001c5c <main+0x5c0>)
 8001a14:	f002 f91a 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001a18:	2064      	movs	r0, #100	; 0x64
 8001a1a:	f000 fd83 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a24:	488d      	ldr	r0, [pc, #564]	; (8001c5c <main+0x5c0>)
 8001a26:	f002 f911 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001a2a:	2032      	movs	r0, #50	; 0x32
 8001a2c:	f000 fd7a 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001a30:	2201      	movs	r2, #1
 8001a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a36:	4889      	ldr	r0, [pc, #548]	; (8001c5c <main+0x5c0>)
 8001a38:	f002 f908 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a42:	4886      	ldr	r0, [pc, #536]	; (8001c5c <main+0x5c0>)
 8001a44:	f002 f902 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	f000 fd6b 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a54:	4881      	ldr	r0, [pc, #516]	; (8001c5c <main+0x5c0>)
 8001a56:	f002 f8f9 	bl	8003c4c <HAL_GPIO_WritePin>
 8001a5a:	e651      	b.n	8001700 <main+0x64>
			  }
		  }
		  else if (spin_right == true)
 8001a5c:	4b7d      	ldr	r3, [pc, #500]	; (8001c54 <main+0x5b8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d069      	beq.n	8001b38 <main+0x49c>
	  	  {
			  if (speed != 40)
 8001a64:	4b7c      	ldr	r3, [pc, #496]	; (8001c58 <main+0x5bc>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b28      	cmp	r3, #40	; 0x28
 8001a6a:	f43f ae49 	beq.w	8001700 <main+0x64>
			  {
				  STOP();
 8001a6e:	f7ff fd2f 	bl	80014d0 <STOP>
				  OBROT_P();
 8001a72:	f7ff fdbf 	bl	80015f4 <OBROT_P>
				  //zwiekszenie predkosci x4
				  speed = 40;
 8001a76:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <main+0x5bc>)
 8001a78:	2228      	movs	r2, #40	; 0x28
 8001a7a:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a82:	4876      	ldr	r0, [pc, #472]	; (8001c5c <main+0x5c0>)
 8001a84:	f002 f8e2 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a8e:	4873      	ldr	r0, [pc, #460]	; (8001c5c <main+0x5c0>)
 8001a90:	f002 f8dc 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001a94:	2064      	movs	r0, #100	; 0x64
 8001a96:	f000 fd45 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa0:	486e      	ldr	r0, [pc, #440]	; (8001c5c <main+0x5c0>)
 8001aa2:	f002 f8d3 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001aa6:	2032      	movs	r0, #50	; 0x32
 8001aa8:	f000 fd3c 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001aac:	2201      	movs	r2, #1
 8001aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ab2:	486a      	ldr	r0, [pc, #424]	; (8001c5c <main+0x5c0>)
 8001ab4:	f002 f8ca 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001abe:	4867      	ldr	r0, [pc, #412]	; (8001c5c <main+0x5c0>)
 8001ac0:	f002 f8c4 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001ac4:	2064      	movs	r0, #100	; 0x64
 8001ac6:	f000 fd2d 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad0:	4862      	ldr	r0, [pc, #392]	; (8001c5c <main+0x5c0>)
 8001ad2:	f002 f8bb 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001ad6:	2032      	movs	r0, #50	; 0x32
 8001ad8:	f000 fd24 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae2:	485e      	ldr	r0, [pc, #376]	; (8001c5c <main+0x5c0>)
 8001ae4:	f002 f8b2 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aee:	485b      	ldr	r0, [pc, #364]	; (8001c5c <main+0x5c0>)
 8001af0:	f002 f8ac 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001af4:	2064      	movs	r0, #100	; 0x64
 8001af6:	f000 fd15 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b00:	4856      	ldr	r0, [pc, #344]	; (8001c5c <main+0x5c0>)
 8001b02:	f002 f8a3 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001b06:	2032      	movs	r0, #50	; 0x32
 8001b08:	f000 fd0c 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b12:	4852      	ldr	r0, [pc, #328]	; (8001c5c <main+0x5c0>)
 8001b14:	f002 f89a 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b1e:	484f      	ldr	r0, [pc, #316]	; (8001c5c <main+0x5c0>)
 8001b20:	f002 f894 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001b24:	2064      	movs	r0, #100	; 0x64
 8001b26:	f000 fcfd 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b30:	484a      	ldr	r0, [pc, #296]	; (8001c5c <main+0x5c0>)
 8001b32:	f002 f88b 	bl	8003c4c <HAL_GPIO_WritePin>
 8001b36:	e5e3      	b.n	8001700 <main+0x64>
			  }
	  	  }
	  	  else if (left == false && right == false && center == true && STATION == false)
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <main+0x5c4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8092 	beq.w	8001c6c <main+0x5d0>
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <main+0x5c8>)
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 808a 	beq.w	8001c6c <main+0x5d0>
 8001b58:	4b3c      	ldr	r3, [pc, #240]	; (8001c4c <main+0x5b0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8085 	beq.w	8001c6c <main+0x5d0>
 8001b62:	4b41      	ldr	r3, [pc, #260]	; (8001c68 <main+0x5cc>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	f083 0301 	eor.w	r3, r3, #1
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d07d      	beq.n	8001c6c <main+0x5d0>
		  {
			  if (speed != 40)
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <main+0x5bc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2b28      	cmp	r3, #40	; 0x28
 8001b76:	f000 8095 	beq.w	8001ca4 <main+0x608>
			  {
				  STOP();
 8001b7a:	f7ff fca9 	bl	80014d0 <STOP>
				  PRZOD();
 8001b7e:	f7ff fd0f 	bl	80015a0 <PRZOD>
				  //zwiekszenie predkosci x3
				  speed = 40;
 8001b82:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <main+0x5bc>)
 8001b84:	2228      	movs	r2, #40	; 0x28
 8001b86:	601a      	str	r2, [r3, #0]
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b8e:	4833      	ldr	r0, [pc, #204]	; (8001c5c <main+0x5c0>)
 8001b90:	f002 f85c 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b9a:	4830      	ldr	r0, [pc, #192]	; (8001c5c <main+0x5c0>)
 8001b9c:	f002 f856 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001ba0:	2064      	movs	r0, #100	; 0x64
 8001ba2:	f000 fcbf 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bac:	482b      	ldr	r0, [pc, #172]	; (8001c5c <main+0x5c0>)
 8001bae:	f002 f84d 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001bb2:	2032      	movs	r0, #50	; 0x32
 8001bb4:	f000 fcb6 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bbe:	4827      	ldr	r0, [pc, #156]	; (8001c5c <main+0x5c0>)
 8001bc0:	f002 f844 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bca:	4824      	ldr	r0, [pc, #144]	; (8001c5c <main+0x5c0>)
 8001bcc:	f002 f83e 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001bd0:	2064      	movs	r0, #100	; 0x64
 8001bd2:	f000 fca7 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bdc:	481f      	ldr	r0, [pc, #124]	; (8001c5c <main+0x5c0>)
 8001bde:	f002 f835 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001be2:	2032      	movs	r0, #50	; 0x32
 8001be4:	f000 fc9e 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	481b      	ldr	r0, [pc, #108]	; (8001c5c <main+0x5c0>)
 8001bf0:	f002 f82c 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bfa:	4818      	ldr	r0, [pc, #96]	; (8001c5c <main+0x5c0>)
 8001bfc:	f002 f826 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c00:	2064      	movs	r0, #100	; 0x64
 8001c02:	f000 fc8f 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c06:	2200      	movs	r2, #0
 8001c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c0c:	4813      	ldr	r0, [pc, #76]	; (8001c5c <main+0x5c0>)
 8001c0e:	f002 f81d 	bl	8003c4c <HAL_GPIO_WritePin>

				  HAL_Delay(50);
 8001c12:	2032      	movs	r0, #50	; 0x32
 8001c14:	f000 fc86 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1e:	480f      	ldr	r0, [pc, #60]	; (8001c5c <main+0x5c0>)
 8001c20:	f002 f814 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	480c      	ldr	r0, [pc, #48]	; (8001c5c <main+0x5c0>)
 8001c2c:	f002 f80e 	bl	8003c4c <HAL_GPIO_WritePin>
				  HAL_Delay(100);
 8001c30:	2064      	movs	r0, #100	; 0x64
 8001c32:	f000 fc77 	bl	8002524 <HAL_Delay>
				  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3c:	4807      	ldr	r0, [pc, #28]	; (8001c5c <main+0x5c0>)
 8001c3e:	f002 f805 	bl	8003c4c <HAL_GPIO_WritePin>
			  if (speed != 40)
 8001c42:	e02f      	b.n	8001ca4 <main+0x608>
 8001c44:	200002d0 	.word	0x200002d0
 8001c48:	200002d1 	.word	0x200002d1
 8001c4c:	200002d4 	.word	0x200002d4
 8001c50:	200002d3 	.word	0x200002d3
 8001c54:	200002d2 	.word	0x200002d2
 8001c58:	200002c8 	.word	0x200002c8
 8001c5c:	40020800 	.word	0x40020800
 8001c60:	200002d6 	.word	0x200002d6
 8001c64:	200002d5 	.word	0x200002d5
 8001c68:	200002e0 	.word	0x200002e0
			  }
		  }
		  else if ( (spin_left == false && spin_right == false && center == false) || STATION == true)
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <main+0x60c>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00d      	beq.n	8001c96 <main+0x5fa>
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <main+0x610>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <main+0x5fa>
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <main+0x614>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d104      	bne.n	8001ca0 <main+0x604>
 8001c96:	4b07      	ldr	r3, [pc, #28]	; (8001cb4 <main+0x618>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f43f ad30 	beq.w	8001700 <main+0x64>
		  {
			  STOP();
 8001ca0:	f7ff fc16 	bl	80014d0 <STOP>
  {
 8001ca4:	e52c      	b.n	8001700 <main+0x64>
 8001ca6:	bf00      	nop
 8001ca8:	200002d3 	.word	0x200002d3
 8001cac:	200002d2 	.word	0x200002d2
 8001cb0:	200002d4 	.word	0x200002d4
 8001cb4:	200002e0 	.word	0x200002e0

08001cb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b094      	sub	sp, #80	; 0x50
 8001cbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cbe:	f107 0320 	add.w	r3, r7, #32
 8001cc2:	2230      	movs	r2, #48	; 0x30
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f005 f864 	bl	8006d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	4b28      	ldr	r3, [pc, #160]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a27      	ldr	r2, [pc, #156]	; (8001d84 <SystemClock_Config+0xcc>)
 8001ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
 8001cec:	4b25      	ldr	r3, [pc, #148]	; (8001d84 <SystemClock_Config+0xcc>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <SystemClock_Config+0xd0>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b1f      	ldr	r3, [pc, #124]	; (8001d88 <SystemClock_Config+0xd0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d14:	2302      	movs	r3, #2
 8001d16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d1c:	2310      	movs	r3, #16
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d20:	2302      	movs	r3, #2
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d24:	2300      	movs	r3, #0
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001d2c:	23a0      	movs	r3, #160	; 0xa0
 8001d2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d38:	f107 0320 	add.w	r3, r7, #32
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 ffb9 	bl	8003cb4 <HAL_RCC_OscConfig>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d48:	f000 f820 	bl	8001d8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4c:	230f      	movs	r3, #15
 8001d4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d50:	2302      	movs	r3, #2
 8001d52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	2105      	movs	r1, #5
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fa1a 	bl	80041a4 <HAL_RCC_ClockConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d76:	f000 f809 	bl	8001d8c <Error_Handler>
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	3750      	adds	r7, #80	; 0x50
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40007000 	.word	0x40007000

08001d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d90:	b672      	cpsid	i
}
 8001d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <Error_Handler+0x8>
	...

08001d98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_MspInit+0x4c>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_MspInit+0x4c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a08      	ldr	r2, [pc, #32]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd2:	603b      	str	r3, [r7, #0]
 8001dd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 fb56 	bl	80024e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e42:	f002 fea7 	bl	8004b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000330 	.word	0x20000330

08001e50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART2_IRQHandler+0x10>)
 8001e56:	f004 f807 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000378 	.word	0x20000378

08001e64 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <DMA2_Stream1_IRQHandler+0x10>)
 8001e6a:	f001 fad1 	bl	8003410 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000248 	.word	0x20000248

08001e78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
	return 1;
 8001e7c:	2301      	movs	r3, #1
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <_kill>:

int _kill(int pid, int sig)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e92:	f004 ff55 	bl	8006d40 <__errno>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2216      	movs	r2, #22
 8001e9a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <_exit>:

void _exit (int status)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ffe7 	bl	8001e88 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001eba:	e7fe      	b.n	8001eba <_exit+0x12>

08001ebc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e00a      	b.n	8001ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ece:	f3af 8000 	nop.w
 8001ed2:	4601      	mov	r1, r0
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	617b      	str	r3, [r7, #20]
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbf0      	blt.n	8001ece <_read+0x12>
	}

return len;
 8001eec:	687b      	ldr	r3, [r7, #4]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	e009      	b.n	8001f1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	60ba      	str	r2, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fa8d 	bl	8001430 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	dbf1      	blt.n	8001f08 <_write+0x12>
	}
	return len;
 8001f24:	687b      	ldr	r3, [r7, #4]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <_close>:

int _close(int file)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
	return -1;
 8001f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f56:	605a      	str	r2, [r3, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <_isatty>:

int _isatty(int file)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
	return 0;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f004 feba 	bl	8006d40 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20020000 	.word	0x20020000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	200002e4 	.word	0x200002e4
 8002000:	200003d0 	.word	0x200003d0

08002004 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x20>)
 800200a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <SystemInit+0x20>)
 8002010:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002014:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000ed00 	.word	0xe000ed00

08002028 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b092      	sub	sp, #72	; 0x48
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800202e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	605a      	str	r2, [r3, #4]
 8002038:	609a      	str	r2, [r3, #8]
 800203a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800203c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002046:	f107 0320 	add.w	r3, r7, #32
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
 800205e:	60da      	str	r2, [r3, #12]
 8002060:	611a      	str	r2, [r3, #16]
 8002062:	615a      	str	r2, [r3, #20]
 8002064:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002066:	4b43      	ldr	r3, [pc, #268]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002068:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800206c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800206e:	4b41      	ldr	r3, [pc, #260]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002070:	224f      	movs	r2, #79	; 0x4f
 8002072:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002074:	4b3f      	ldr	r3, [pc, #252]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <MX_TIM2_Init+0x14c>)
 800207c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002080:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002082:	4b3c      	ldr	r3, [pc, #240]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002084:	2200      	movs	r2, #0
 8002086:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002088:	4b3a      	ldr	r3, [pc, #232]	; (8002174 <MX_TIM2_Init+0x14c>)
 800208a:	2200      	movs	r2, #0
 800208c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800208e:	4839      	ldr	r0, [pc, #228]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002090:	f002 fa68 	bl	8004564 <HAL_TIM_Base_Init>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800209a:	f7ff fe77 	bl	8001d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800209e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020a8:	4619      	mov	r1, r3
 80020aa:	4832      	ldr	r0, [pc, #200]	; (8002174 <MX_TIM2_Init+0x14c>)
 80020ac:	f002 ffd8 	bl	8005060 <HAL_TIM_ConfigClockSource>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80020b6:	f7ff fe69 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80020ba:	482e      	ldr	r0, [pc, #184]	; (8002174 <MX_TIM2_Init+0x14c>)
 80020bc:	f002 fc34 	bl	8004928 <HAL_TIM_IC_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80020c6:	f7ff fe61 	bl	8001d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020ca:	482a      	ldr	r0, [pc, #168]	; (8002174 <MX_TIM2_Init+0x14c>)
 80020cc:	f002 fb0a 	bl	80046e4 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80020d6:	f7ff fe59 	bl	8001d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020e6:	4619      	mov	r1, r3
 80020e8:	4822      	ldr	r0, [pc, #136]	; (8002174 <MX_TIM2_Init+0x14c>)
 80020ea:	f003 fd1d 	bl	8005b28 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80020f4:	f7ff fe4a 	bl	8001d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80020fc:	2301      	movs	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002108:	f107 0320 	add.w	r3, r7, #32
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	4818      	ldr	r0, [pc, #96]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002112:	f002 fe47 	bl	8004da4 <HAL_TIM_IC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 800211c:	f7ff fe36 	bl	8001d8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002120:	2302      	movs	r3, #2
 8002122:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002124:	2302      	movs	r3, #2
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002128:	f107 0320 	add.w	r3, r7, #32
 800212c:	2204      	movs	r2, #4
 800212e:	4619      	mov	r1, r3
 8002130:	4810      	ldr	r0, [pc, #64]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002132:	f002 fe37 	bl	8004da4 <HAL_TIM_IC_ConfigChannel>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800213c:	f7ff fe26 	bl	8001d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002140:	2360      	movs	r3, #96	; 0x60
 8002142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002144:	230a      	movs	r3, #10
 8002146:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	2208      	movs	r2, #8
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002158:	f002 fec0 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 8002162:	f7ff fe13 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <MX_TIM2_Init+0x14c>)
 8002168:	f000 f88e 	bl	8002288 <HAL_TIM_MspPostInit>

}
 800216c:	bf00      	nop
 800216e:	3748      	adds	r7, #72	; 0x48
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200002e8 	.word	0x200002e8

08002178 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <MX_TIM10_Init+0x40>)
 800217e:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <MX_TIM10_Init+0x44>)
 8002180:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <MX_TIM10_Init+0x40>)
 8002184:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002188:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <MX_TIM10_Init+0x40>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 8002190:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <MX_TIM10_Init+0x40>)
 8002192:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002196:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002198:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <MX_TIM10_Init+0x40>)
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <MX_TIM10_Init+0x40>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021a4:	4804      	ldr	r0, [pc, #16]	; (80021b8 <MX_TIM10_Init+0x40>)
 80021a6:	f002 f9dd 	bl	8004564 <HAL_TIM_Base_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80021b0:	f7ff fdec 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80021b4:	bf00      	nop
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000330 	.word	0x20000330
 80021bc:	40014400 	.word	0x40014400

080021c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0314 	add.w	r3, r7, #20
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d12c      	bne.n	800223c <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a24      	ldr	r2, [pc, #144]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	613b      	str	r3, [r7, #16]
 80021fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a1d      	ldr	r2, [pc, #116]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b1b      	ldr	r3, [pc, #108]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800221a:	2301      	movs	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002226:	2300      	movs	r3, #0
 8002228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800222a:	2301      	movs	r3, #1
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	4619      	mov	r1, r3
 8002234:	4812      	ldr	r0, [pc, #72]	; (8002280 <HAL_TIM_Base_MspInit+0xc0>)
 8002236:	f001 fb55 	bl	80038e4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800223a:	e01a      	b.n	8002272 <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM10)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a10      	ldr	r2, [pc, #64]	; (8002284 <HAL_TIM_Base_MspInit+0xc4>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d115      	bne.n	8002272 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_TIM_Base_MspInit+0xbc>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	60bb      	str	r3, [r7, #8]
 8002260:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	2102      	movs	r1, #2
 8002266:	2019      	movs	r0, #25
 8002268:	f000 fe6d 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800226c:	2019      	movs	r0, #25
 800226e:	f000 fe86 	bl	8002f7e <HAL_NVIC_EnableIRQ>
}
 8002272:	bf00      	nop
 8002274:	3728      	adds	r7, #40	; 0x28
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000
 8002284:	40014400 	.word	0x40014400

08002288 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 030c 	add.w	r3, r7, #12
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d11e      	bne.n	80022e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <HAL_TIM_MspPostInit+0x68>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a0f      	ldr	r2, [pc, #60]	; (80022f0 <HAL_TIM_MspPostInit+0x68>)
 80022b4:	f043 0302 	orr.w	r3, r3, #2
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <HAL_TIM_MspPostInit+0x68>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022d8:	2301      	movs	r3, #1
 80022da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	4804      	ldr	r0, [pc, #16]	; (80022f4 <HAL_TIM_MspPostInit+0x6c>)
 80022e4:	f001 fafe 	bl	80038e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022e8:	bf00      	nop
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020400 	.word	0x40020400

080022f8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80022fc:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 80022fe:	4a12      	ldr	r2, [pc, #72]	; (8002348 <MX_USART2_UART_Init+0x50>)
 8002300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002302:	4b10      	ldr	r3, [pc, #64]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 8002304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 8002312:	2200      	movs	r2, #0
 8002314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 800231e:	220c      	movs	r2, #12
 8002320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_USART2_UART_Init+0x4c>)
 8002330:	f003 fc8a 	bl	8005c48 <HAL_UART_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800233a:	f7ff fd27 	bl	8001d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000378 	.word	0x20000378
 8002348:	40004400 	.word	0x40004400

0800234c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_UART_MspInit+0x94>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d133      	bne.n	80023d6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b19      	ldr	r3, [pc, #100]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	613b      	str	r3, [r7, #16]
 8002388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <HAL_UART_MspInit+0x98>)
 8002394:	f043 0308 	orr.w	r3, r3, #8
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b12      	ldr	r3, [pc, #72]	; (80023e4 <HAL_UART_MspInit+0x98>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023a6:	2360      	movs	r3, #96	; 0x60
 80023a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023b6:	2307      	movs	r3, #7
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ba:	f107 0314 	add.w	r3, r7, #20
 80023be:	4619      	mov	r1, r3
 80023c0:	4809      	ldr	r0, [pc, #36]	; (80023e8 <HAL_UART_MspInit+0x9c>)
 80023c2:	f001 fa8f 	bl	80038e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2103      	movs	r1, #3
 80023ca:	2026      	movs	r0, #38	; 0x26
 80023cc:	f000 fdbb 	bl	8002f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023d0:	2026      	movs	r0, #38	; 0x26
 80023d2:	f000 fdd4 	bl	8002f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80023d6:	bf00      	nop
 80023d8:	3728      	adds	r7, #40	; 0x28
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40004400 	.word	0x40004400
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020c00 	.word	0x40020c00

080023ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002424 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f0:	480d      	ldr	r0, [pc, #52]	; (8002428 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f2:	490e      	ldr	r1, [pc, #56]	; (800242c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f4:	4a0e      	ldr	r2, [pc, #56]	; (8002430 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f8:	e002      	b.n	8002400 <LoopCopyDataInit>

080023fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fe:	3304      	adds	r3, #4

08002400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002404:	d3f9      	bcc.n	80023fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002408:	4c0b      	ldr	r4, [pc, #44]	; (8002438 <LoopFillZerobss+0x26>)
  movs r3, #0
 800240a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800240c:	e001      	b.n	8002412 <LoopFillZerobss>

0800240e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002410:	3204      	adds	r2, #4

08002412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002414:	d3fb      	bcc.n	800240e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002416:	f7ff fdf5 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241a:	f004 fc97 	bl	8006d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241e:	f7ff f93d 	bl	800169c <main>
  bx  lr    
 8002422:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002424:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800242c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002430:	0800bd74 	.word	0x0800bd74
  ldr r2, =_sbss
 8002434:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002438:	200003d0 	.word	0x200003d0

0800243c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800243c:	e7fe      	b.n	800243c <ADC_IRQHandler>
	...

08002440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0d      	ldr	r2, [pc, #52]	; (8002480 <HAL_Init+0x40>)
 800244a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0a      	ldr	r2, [pc, #40]	; (8002480 <HAL_Init+0x40>)
 8002456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800245c:	4b08      	ldr	r3, [pc, #32]	; (8002480 <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a07      	ldr	r2, [pc, #28]	; (8002480 <HAL_Init+0x40>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002468:	2003      	movs	r0, #3
 800246a:	f000 fd61 	bl	8002f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246e:	2000      	movs	r0, #0
 8002470:	f000 f808 	bl	8002484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002474:	f7ff fc90 	bl	8001d98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40023c00 	.word	0x40023c00

08002484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x54>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0x58>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fd79 	bl	8002f9a <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00e      	b.n	80024d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b0f      	cmp	r3, #15
 80024b6:	d80a      	bhi.n	80024ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b8:	2200      	movs	r2, #0
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f000 fd41 	bl	8002f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c4:	4a06      	ldr	r2, [pc, #24]	; (80024e0 <HAL_InitTick+0x5c>)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	e000      	b.n	80024d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000004 	.word	0x20000004
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	20000008 	.word	0x20000008

080024e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x20>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_IncTick+0x24>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4413      	add	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_IncTick+0x24>)
 80024f6:	6013      	str	r3, [r2, #0]
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000000c 	.word	0x2000000c
 8002508:	200003bc 	.word	0x200003bc

0800250c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  return uwTick;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_GetTick+0x14>)
 8002512:	681b      	ldr	r3, [r3, #0]
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	200003bc 	.word	0x200003bc

08002524 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800252c:	f7ff ffee 	bl	800250c <HAL_GetTick>
 8002530:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d005      	beq.n	800254a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253e:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <HAL_Delay+0x44>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	461a      	mov	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4413      	add	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254a:	bf00      	nop
 800254c:	f7ff ffde 	bl	800250c <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	429a      	cmp	r2, r3
 800255a:	d8f7      	bhi.n	800254c <HAL_Delay+0x28>
  {
  }
}
 800255c:	bf00      	nop
 800255e:	bf00      	nop
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	2000000c 	.word	0x2000000c

0800256c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e033      	b.n	80025ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b00      	cmp	r3, #0
 8002588:	d109      	bne.n	800259e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe fd86 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d118      	bne.n	80025dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025b2:	f023 0302 	bic.w	r3, r3, #2
 80025b6:	f043 0202 	orr.w	r2, r3, #2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 fa68 	bl	8002a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f023 0303 	bic.w	r3, r3, #3
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
 80025da:	e001      	b.n	80025e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_ADC_Start_DMA+0x1e>
 800260e:	2302      	movs	r3, #2
 8002610:	e0e9      	b.n	80027e6 <HAL_ADC_Start_DMA+0x1f2>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b01      	cmp	r3, #1
 8002626:	d018      	beq.n	800265a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002638:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_ADC_Start_DMA+0x1fc>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a6d      	ldr	r2, [pc, #436]	; (80027f4 <HAL_ADC_Start_DMA+0x200>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0c9a      	lsrs	r2, r3, #18
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800264c:	e002      	b.n	8002654 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	3b01      	subs	r3, #1
 8002652:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f9      	bne.n	800264e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002668:	d107      	bne.n	800267a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002678:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	f040 80a1 	bne.w	80027cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d007      	beq.n	80026bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c8:	d106      	bne.n	80026d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ce:	f023 0206 	bic.w	r2, r3, #6
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44
 80026d6:	e002      	b.n	80026de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026e6:	4b44      	ldr	r3, [pc, #272]	; (80027f8 <HAL_ADC_Start_DMA+0x204>)
 80026e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ee:	4a43      	ldr	r2, [pc, #268]	; (80027fc <HAL_ADC_Start_DMA+0x208>)
 80026f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	4a42      	ldr	r2, [pc, #264]	; (8002800 <HAL_ADC_Start_DMA+0x20c>)
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	4a41      	ldr	r2, [pc, #260]	; (8002804 <HAL_ADC_Start_DMA+0x210>)
 8002700:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800270a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800271a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800272a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	334c      	adds	r3, #76	; 0x4c
 8002736:	4619      	mov	r1, r3
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f000 fd7e 	bl	800323c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	2b00      	cmp	r3, #0
 800274a:	d12a      	bne.n	80027a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a2d      	ldr	r2, [pc, #180]	; (8002808 <HAL_ADC_Start_DMA+0x214>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d015      	beq.n	8002782 <HAL_ADC_Start_DMA+0x18e>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a2c      	ldr	r2, [pc, #176]	; (800280c <HAL_ADC_Start_DMA+0x218>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d105      	bne.n	800276c <HAL_ADC_Start_DMA+0x178>
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <HAL_ADC_Start_DMA+0x204>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 031f 	and.w	r3, r3, #31
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00a      	beq.n	8002782 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a27      	ldr	r2, [pc, #156]	; (8002810 <HAL_ADC_Start_DMA+0x21c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d136      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_ADC_Start_DMA+0x204>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 0310 	and.w	r3, r3, #16
 800277e:	2b00      	cmp	r3, #0
 8002780:	d130      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d129      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800279e:	609a      	str	r2, [r3, #8]
 80027a0:	e020      	b.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <HAL_ADC_Start_DMA+0x214>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d11b      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d114      	bne.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689a      	ldr	r2, [r3, #8]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	e00b      	b.n	80027e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d0:	f043 0210 	orr.w	r2, r3, #16
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	20000004 	.word	0x20000004
 80027f4:	431bde83 	.word	0x431bde83
 80027f8:	40012300 	.word	0x40012300
 80027fc:	08002c8d 	.word	0x08002c8d
 8002800:	08002d47 	.word	0x08002d47
 8002804:	08002d63 	.word	0x08002d63
 8002808:	40012000 	.word	0x40012000
 800280c:	40012100 	.word	0x40012100
 8002810:	40012200 	.word	0x40012200

08002814 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_ADC_ConfigChannel+0x1c>
 8002868:	2302      	movs	r3, #2
 800286a:	e105      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x228>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b09      	cmp	r3, #9
 800287a:	d925      	bls.n	80028c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	b29b      	uxth	r3, r3
 8002888:	461a      	mov	r2, r3
 800288a:	4613      	mov	r3, r2
 800288c:	005b      	lsls	r3, r3, #1
 800288e:	4413      	add	r3, r2
 8002890:	3b1e      	subs	r3, #30
 8002892:	2207      	movs	r2, #7
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43da      	mvns	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	400a      	ands	r2, r1
 80028a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68d9      	ldr	r1, [r3, #12]
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	4618      	mov	r0, r3
 80028b4:	4603      	mov	r3, r0
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4403      	add	r3, r0
 80028ba:	3b1e      	subs	r3, #30
 80028bc:	409a      	lsls	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	60da      	str	r2, [r3, #12]
 80028c6:	e022      	b.n	800290e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6919      	ldr	r1, [r3, #16]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	461a      	mov	r2, r3
 80028d6:	4613      	mov	r3, r2
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	4413      	add	r3, r2
 80028dc:	2207      	movs	r2, #7
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43da      	mvns	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	400a      	ands	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	689a      	ldr	r2, [r3, #8]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	4618      	mov	r0, r3
 80028fe:	4603      	mov	r3, r0
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4403      	add	r3, r0
 8002904:	409a      	lsls	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	430a      	orrs	r2, r1
 800290c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b06      	cmp	r3, #6
 8002914:	d824      	bhi.n	8002960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b05      	subs	r3, #5
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b05      	subs	r3, #5
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	635a      	str	r2, [r3, #52]	; 0x34
 800295e:	e04c      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	2b0c      	cmp	r3, #12
 8002966:	d824      	bhi.n	80029b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	3b23      	subs	r3, #35	; 0x23
 800297a:	221f      	movs	r2, #31
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43da      	mvns	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	400a      	ands	r2, r1
 8002988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4618      	mov	r0, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	3b23      	subs	r3, #35	; 0x23
 80029a4:	fa00 f203 	lsl.w	r2, r0, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	631a      	str	r2, [r3, #48]	; 0x30
 80029b0:	e023      	b.n	80029fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b41      	subs	r3, #65	; 0x41
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b41      	subs	r3, #65	; 0x41
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029fa:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <HAL_ADC_ConfigChannel+0x234>)
 80029fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a21      	ldr	r2, [pc, #132]	; (8002a88 <HAL_ADC_ConfigChannel+0x238>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d109      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1cc>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2b12      	cmp	r3, #18
 8002a0e:	d105      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <HAL_ADC_ConfigChannel+0x238>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d123      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x21e>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b10      	cmp	r3, #16
 8002a2c:	d003      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x1e6>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b11      	cmp	r3, #17
 8002a34:	d11b      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b10      	cmp	r3, #16
 8002a48:	d111      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_ADC_ConfigChannel+0x23c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a10      	ldr	r2, [pc, #64]	; (8002a90 <HAL_ADC_ConfigChannel+0x240>)
 8002a50:	fba2 2303 	umull	r2, r3, r2, r3
 8002a54:	0c9a      	lsrs	r2, r3, #18
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a60:	e002      	b.n	8002a68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f9      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	40012000 	.word	0x40012000
 8002a8c:	20000004 	.word	0x20000004
 8002a90:	431bde83 	.word	0x431bde83

08002a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9c:	4b79      	ldr	r3, [pc, #484]	; (8002c84 <ADC_Init+0x1f0>)
 8002a9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	021a      	lsls	r2, r3, #8
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6899      	ldr	r1, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68da      	ldr	r2, [r3, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	4a58      	ldr	r2, [pc, #352]	; (8002c88 <ADC_Init+0x1f4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d022      	beq.n	8002b72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6899      	ldr	r1, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	e00f      	b.n	8002b92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f022 0202 	bic.w	r2, r2, #2
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7e1b      	ldrb	r3, [r3, #24]
 8002bac:	005a      	lsls	r2, r3, #1
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01b      	beq.n	8002bf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685a      	ldr	r2, [r3, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	3b01      	subs	r3, #1
 8002bec:	035a      	lsls	r2, r3, #13
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	e007      	b.n	8002c08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69db      	ldr	r3, [r3, #28]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	051a      	lsls	r2, r3, #20
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6899      	ldr	r1, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c4a:	025a      	lsls	r2, r3, #9
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6899      	ldr	r1, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	029a      	lsls	r2, r3, #10
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	40012300 	.word	0x40012300
 8002c88:	0f000001 	.word	0x0f000001

08002c8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d13c      	bne.n	8002d20 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d12b      	bne.n	8002d18 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d127      	bne.n	8002d18 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d006      	beq.n	8002ce4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d119      	bne.n	8002d18 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0220 	bic.w	r2, r2, #32
 8002cf2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	f043 0201 	orr.w	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d18:	68f8      	ldr	r0, [r7, #12]
 8002d1a:	f7ff fd7b 	bl	8002814 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d1e:	e00e      	b.n	8002d3e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fd85 	bl	800283c <HAL_ADC_ErrorCallback>
}
 8002d32:	e004      	b.n	8002d3e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f7ff fd67 	bl	8002828 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d5a:	bf00      	nop
 8002d5c:	3710      	adds	r7, #16
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2240      	movs	r2, #64	; 0x40
 8002d74:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f043 0204 	orr.w	r2, r3, #4
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff fd5a 	bl	800283c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dac:	4013      	ands	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc2:	4a04      	ldr	r2, [pc, #16]	; (8002dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	60d3      	str	r3, [r2, #12]
}
 8002dc8:	bf00      	nop
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	e000ed00 	.word	0xe000ed00

08002dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	0a1b      	lsrs	r3, r3, #8
 8002de2:	f003 0307 	and.w	r3, r3, #7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	db0b      	blt.n	8002e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	f003 021f 	and.w	r2, r3, #31
 8002e0c:	4907      	ldr	r1, [pc, #28]	; (8002e2c <__NVIC_EnableIRQ+0x38>)
 8002e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e12:	095b      	lsrs	r3, r3, #5
 8002e14:	2001      	movs	r0, #1
 8002e16:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	; (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	; (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	; 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	; 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002efc:	d301      	bcc.n	8002f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efe:	2301      	movs	r3, #1
 8002f00:	e00f      	b.n	8002f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f02:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <SysTick_Config+0x40>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f10:	f7ff ff8e 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <SysTick_Config+0x40>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <SysTick_Config+0x40>)
 8002f1c:	2207      	movs	r2, #7
 8002f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	e000e010 	.word	0xe000e010

08002f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f7ff ff29 	bl	8002d90 <__NVIC_SetPriorityGrouping>
}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f58:	f7ff ff3e 	bl	8002dd8 <__NVIC_GetPriorityGrouping>
 8002f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68b9      	ldr	r1, [r7, #8]
 8002f62:	6978      	ldr	r0, [r7, #20]
 8002f64:	f7ff ff8e 	bl	8002e84 <NVIC_EncodePriority>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff ff5d 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f76:	bf00      	nop
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	4603      	mov	r3, r0
 8002f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff31 	bl	8002df4 <__NVIC_EnableIRQ>
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffa2 	bl	8002eec <SysTick_Config>
 8002fa8:	4603      	mov	r3, r0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e014      	b.n	8002fee <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	791b      	ldrb	r3, [r3, #4]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d105      	bne.n	8002fda <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fe f903 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2202      	movs	r2, #2
 8002fde:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b087      	sub	sp, #28
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003004:	2300      	movs	r3, #0
 8003006:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d105      	bne.n	8003020 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	3308      	adds	r3, #8
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e004      	b.n	800302a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	3314      	adds	r3, #20
 8003028:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	461a      	mov	r2, r3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	795b      	ldrb	r3, [r3, #5]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_DAC_ConfigChannel+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e03c      	b.n	80030d2 <HAL_DAC_ConfigChannel+0x92>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2202      	movs	r2, #2
 8003062:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4013      	ands	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	22c0      	movs	r2, #192	; 0xc0
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	400a      	ands	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030e8:	2300      	movs	r3, #0
 80030ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030ec:	f7ff fa0e 	bl	800250c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d101      	bne.n	80030fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e099      	b.n	8003230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2202      	movs	r2, #2
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0201 	bic.w	r2, r2, #1
 800311a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800311c:	e00f      	b.n	800313e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800311e:	f7ff f9f5 	bl	800250c <HAL_GetTick>
 8003122:	4602      	mov	r2, r0
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	2b05      	cmp	r3, #5
 800312a:	d908      	bls.n	800313e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2203      	movs	r2, #3
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e078      	b.n	8003230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e8      	bne.n	800311e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_DMA_Init+0x158>)
 8003158:	4013      	ands	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800316a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b04      	cmp	r3, #4
 8003196:	d107      	bne.n	80031a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	4313      	orrs	r3, r2
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f023 0307 	bic.w	r3, r3, #7
 80031be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d117      	bne.n	8003202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb01 	bl	80037ec <DMA_CheckFifoParam>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d008      	beq.n	8003202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80031fe:	2301      	movs	r3, #1
 8003200:	e016      	b.n	8003230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fab8 	bl	8003780 <DMA_CalcBaseAndBitshift>
 8003210:	4603      	mov	r3, r0
 8003212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	223f      	movs	r2, #63	; 0x3f
 800321a:	409a      	lsls	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	f010803f 	.word	0xf010803f

0800323c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_DMA_Start_IT+0x26>
 800325e:	2302      	movs	r3, #2
 8003260:	e040      	b.n	80032e4 <HAL_DMA_Start_IT+0xa8>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d12f      	bne.n	80032d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2202      	movs	r2, #2
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fa4a 	bl	8003724 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	223f      	movs	r2, #63	; 0x3f
 8003296:	409a      	lsls	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0216 	orr.w	r2, r2, #22
 80032aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d007      	beq.n	80032c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f042 0208 	orr.w	r2, r2, #8
 80032c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e005      	b.n	80032e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032de:	2302      	movs	r3, #2
 80032e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032fa:	f7ff f907 	bl	800250c <HAL_GetTick>
 80032fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d008      	beq.n	800331e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e052      	b.n	80033c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0216 	bic.w	r2, r2, #22
 800332c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695a      	ldr	r2, [r3, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800333c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d103      	bne.n	800334e <HAL_DMA_Abort+0x62>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 0208 	bic.w	r2, r2, #8
 800335c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0201 	bic.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800336e:	e013      	b.n	8003398 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003370:	f7ff f8cc 	bl	800250c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b05      	cmp	r3, #5
 800337c:	d90c      	bls.n	8003398 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2203      	movs	r2, #3
 8003388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e015      	b.n	80033c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1e4      	bne.n	8003370 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033aa:	223f      	movs	r2, #63	; 0x3f
 80033ac:	409a      	lsls	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2201      	movs	r2, #1
 80033b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3710      	adds	r7, #16
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d004      	beq.n	80033ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2280      	movs	r2, #128	; 0x80
 80033e4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00c      	b.n	8003404 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2205      	movs	r2, #5
 80033ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0201 	bic.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800341c:	4b8e      	ldr	r3, [pc, #568]	; (8003658 <HAL_DMA_IRQHandler+0x248>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a8e      	ldr	r2, [pc, #568]	; (800365c <HAL_DMA_IRQHandler+0x24c>)
 8003422:	fba2 2303 	umull	r2, r3, r2, r3
 8003426:	0a9b      	lsrs	r3, r3, #10
 8003428:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	2208      	movs	r2, #8
 800343c:	409a      	lsls	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d01a      	beq.n	800347c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d013      	beq.n	800347c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0204 	bic.w	r2, r2, #4
 8003462:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003468:	2208      	movs	r2, #8
 800346a:	409a      	lsls	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	f043 0201 	orr.w	r2, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003480:	2201      	movs	r2, #1
 8003482:	409a      	lsls	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d012      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	2201      	movs	r2, #1
 80034a0:	409a      	lsls	r2, r3
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b6:	2204      	movs	r2, #4
 80034b8:	409a      	lsls	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	4013      	ands	r3, r2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d012      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00b      	beq.n	80034e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d4:	2204      	movs	r2, #4
 80034d6:	409a      	lsls	r2, r3
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0204 	orr.w	r2, r3, #4
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ec:	2210      	movs	r2, #16
 80034ee:	409a      	lsls	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4013      	ands	r3, r2
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d043      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0308 	and.w	r3, r3, #8
 8003502:	2b00      	cmp	r3, #0
 8003504:	d03c      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	2210      	movs	r2, #16
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d018      	beq.n	8003552 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d108      	bne.n	8003540 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d024      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	4798      	blx	r3
 800353e:	e01f      	b.n	8003580 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01b      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
 8003550:	e016      	b.n	8003580 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355c:	2b00      	cmp	r3, #0
 800355e:	d107      	bne.n	8003570 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0208 	bic.w	r2, r2, #8
 800356e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2220      	movs	r2, #32
 8003586:	409a      	lsls	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 808f 	beq.w	80036b0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8087 	beq.w	80036b0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	2220      	movs	r2, #32
 80035a8:	409a      	lsls	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d136      	bne.n	8003628 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0216 	bic.w	r2, r2, #22
 80035c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d103      	bne.n	80035ea <HAL_DMA_IRQHandler+0x1da>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d007      	beq.n	80035fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 0208 	bic.w	r2, r2, #8
 80035f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fe:	223f      	movs	r2, #63	; 0x3f
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361a:	2b00      	cmp	r3, #0
 800361c:	d07e      	beq.n	800371c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	4798      	blx	r3
        }
        return;
 8003626:	e079      	b.n	800371c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d01d      	beq.n	8003672 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10d      	bne.n	8003660 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	2b00      	cmp	r3, #0
 800364a:	d031      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	4798      	blx	r3
 8003654:	e02c      	b.n	80036b0 <HAL_DMA_IRQHandler+0x2a0>
 8003656:	bf00      	nop
 8003658:	20000004 	.word	0x20000004
 800365c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d023      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e01e      	b.n	80036b0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10f      	bne.n	80036a0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0210 	bic.w	r2, r2, #16
 800368e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d032      	beq.n	800371e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d022      	beq.n	800370a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2205      	movs	r2, #5
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0201 	bic.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	3301      	adds	r3, #1
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d307      	bcc.n	80036f8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f2      	bne.n	80036dc <HAL_DMA_IRQHandler+0x2cc>
 80036f6:	e000      	b.n	80036fa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80036f8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
 800371a:	e000      	b.n	800371e <HAL_DMA_IRQHandler+0x30e>
        return;
 800371c:	bf00      	nop
    }
  }
}
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003740:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	d108      	bne.n	8003764 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003762:	e007      	b.n	8003774 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	3b10      	subs	r3, #16
 8003790:	4a14      	ldr	r2, [pc, #80]	; (80037e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003792:	fba2 2303 	umull	r2, r3, r2, r3
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800379a:	4a13      	ldr	r2, [pc, #76]	; (80037e8 <DMA_CalcBaseAndBitshift+0x68>)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d909      	bls.n	80037c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037b6:	f023 0303 	bic.w	r3, r3, #3
 80037ba:	1d1a      	adds	r2, r3, #4
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	659a      	str	r2, [r3, #88]	; 0x58
 80037c0:	e007      	b.n	80037d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	aaaaaaab 	.word	0xaaaaaaab
 80037e8:	0800b8ac 	.word	0x0800b8ac

080037ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d11f      	bne.n	8003846 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b03      	cmp	r3, #3
 800380a:	d856      	bhi.n	80038ba <DMA_CheckFifoParam+0xce>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <DMA_CheckFifoParam+0x28>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003825 	.word	0x08003825
 8003818:	08003837 	.word	0x08003837
 800381c:	08003825 	.word	0x08003825
 8003820:	080038bb 	.word	0x080038bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d046      	beq.n	80038be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e043      	b.n	80038be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800383e:	d140      	bne.n	80038c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003844:	e03d      	b.n	80038c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800384e:	d121      	bne.n	8003894 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b03      	cmp	r3, #3
 8003854:	d837      	bhi.n	80038c6 <DMA_CheckFifoParam+0xda>
 8003856:	a201      	add	r2, pc, #4	; (adr r2, 800385c <DMA_CheckFifoParam+0x70>)
 8003858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385c:	0800386d 	.word	0x0800386d
 8003860:	08003873 	.word	0x08003873
 8003864:	0800386d 	.word	0x0800386d
 8003868:	08003885 	.word	0x08003885
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
      break;
 8003870:	e030      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003876:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d025      	beq.n	80038ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003882:	e022      	b.n	80038ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003888:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800388c:	d11f      	bne.n	80038ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003892:	e01c      	b.n	80038ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b02      	cmp	r3, #2
 8003898:	d903      	bls.n	80038a2 <DMA_CheckFifoParam+0xb6>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b03      	cmp	r3, #3
 800389e:	d003      	beq.n	80038a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038a0:	e018      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
      break;
 80038a6:	e015      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e00b      	b.n	80038d2 <DMA_CheckFifoParam+0xe6>
      break;
 80038ba:	bf00      	nop
 80038bc:	e00a      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038be:	bf00      	nop
 80038c0:	e008      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038c2:	bf00      	nop
 80038c4:	e006      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e004      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e002      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ce:	bf00      	nop
 80038d0:	e000      	b.n	80038d4 <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
    }
  } 
  
  return status; 
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop

080038e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b089      	sub	sp, #36	; 0x24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
 80038fe:	e16b      	b.n	8003bd8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003900:	2201      	movs	r2, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	429a      	cmp	r2, r3
 800391a:	f040 815a 	bne.w	8003bd2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d005      	beq.n	8003936 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003932:	2b02      	cmp	r3, #2
 8003934:	d130      	bne.n	8003998 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800396c:	2201      	movs	r2, #1
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4013      	ands	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	091b      	lsrs	r3, r3, #4
 8003982:	f003 0201 	and.w	r2, r3, #1
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	fa02 f303 	lsl.w	r3, r2, r3
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 0303 	and.w	r3, r3, #3
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d017      	beq.n	80039d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d123      	bne.n	8003a28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	08da      	lsrs	r2, r3, #3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3208      	adds	r2, #8
 80039e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	220f      	movs	r2, #15
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	43db      	mvns	r3, r3
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	4013      	ands	r3, r2
 8003a02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	08da      	lsrs	r2, r3, #3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	3208      	adds	r2, #8
 8003a22:	69b9      	ldr	r1, [r7, #24]
 8003a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0203 	and.w	r2, r3, #3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80b4 	beq.w	8003bd2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	4a5f      	ldr	r2, [pc, #380]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a78:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7a:	4b5d      	ldr	r3, [pc, #372]	; (8003bf0 <HAL_GPIO_Init+0x30c>)
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a86:	4a5b      	ldr	r2, [pc, #364]	; (8003bf4 <HAL_GPIO_Init+0x310>)
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a52      	ldr	r2, [pc, #328]	; (8003bf8 <HAL_GPIO_Init+0x314>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d02b      	beq.n	8003b0a <HAL_GPIO_Init+0x226>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a51      	ldr	r2, [pc, #324]	; (8003bfc <HAL_GPIO_Init+0x318>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d025      	beq.n	8003b06 <HAL_GPIO_Init+0x222>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a50      	ldr	r2, [pc, #320]	; (8003c00 <HAL_GPIO_Init+0x31c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01f      	beq.n	8003b02 <HAL_GPIO_Init+0x21e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4f      	ldr	r2, [pc, #316]	; (8003c04 <HAL_GPIO_Init+0x320>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d019      	beq.n	8003afe <HAL_GPIO_Init+0x21a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4e      	ldr	r2, [pc, #312]	; (8003c08 <HAL_GPIO_Init+0x324>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d013      	beq.n	8003afa <HAL_GPIO_Init+0x216>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <HAL_GPIO_Init+0x328>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00d      	beq.n	8003af6 <HAL_GPIO_Init+0x212>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4c      	ldr	r2, [pc, #304]	; (8003c10 <HAL_GPIO_Init+0x32c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x20e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4b      	ldr	r2, [pc, #300]	; (8003c14 <HAL_GPIO_Init+0x330>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_GPIO_Init+0x20a>
 8003aea:	2307      	movs	r3, #7
 8003aec:	e00e      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003aee:	2308      	movs	r3, #8
 8003af0:	e00c      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003af2:	2306      	movs	r3, #6
 8003af4:	e00a      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e008      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003afa:	2304      	movs	r3, #4
 8003afc:	e006      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003afe:	2303      	movs	r3, #3
 8003b00:	e004      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e002      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b06:	2301      	movs	r3, #1
 8003b08:	e000      	b.n	8003b0c <HAL_GPIO_Init+0x228>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	f002 0203 	and.w	r2, r2, #3
 8003b12:	0092      	lsls	r2, r2, #2
 8003b14:	4093      	lsls	r3, r2
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b1c:	4935      	ldr	r1, [pc, #212]	; (8003bf4 <HAL_GPIO_Init+0x310>)
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	3302      	adds	r3, #2
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b2a:	4b3b      	ldr	r3, [pc, #236]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b4e:	4a32      	ldr	r2, [pc, #200]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b54:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b78:	4a27      	ldr	r2, [pc, #156]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b7e:	4b26      	ldr	r3, [pc, #152]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ba2:	4a1d      	ldr	r2, [pc, #116]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_GPIO_Init+0x334>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	61fb      	str	r3, [r7, #28]
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	2b0f      	cmp	r3, #15
 8003bdc:	f67f ae90 	bls.w	8003900 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3724      	adds	r7, #36	; 0x24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40013800 	.word	0x40013800
 8003bf8:	40020000 	.word	0x40020000
 8003bfc:	40020400 	.word	0x40020400
 8003c00:	40020800 	.word	0x40020800
 8003c04:	40020c00 	.word	0x40020c00
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	40021400 	.word	0x40021400
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40021c00 	.word	0x40021c00
 8003c18:	40013c00 	.word	0x40013c00

08003c1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	460b      	mov	r3, r1
 8003c26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691a      	ldr	r2, [r3, #16]
 8003c2c:	887b      	ldrh	r3, [r7, #2]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c34:	2301      	movs	r3, #1
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e001      	b.n	8003c3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	807b      	strh	r3, [r7, #2]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c5c:	787b      	ldrb	r3, [r7, #1]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c62:	887a      	ldrh	r2, [r7, #2]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c68:	e003      	b.n	8003c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	041a      	lsls	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	619a      	str	r2, [r3, #24]
}
 8003c72:	bf00      	nop
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b085      	sub	sp, #20
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c90:	887a      	ldrh	r2, [r7, #2]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4013      	ands	r3, r2
 8003c96:	041a      	lsls	r2, r3, #16
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43d9      	mvns	r1, r3
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	400b      	ands	r3, r1
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	619a      	str	r2, [r3, #24]
}
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e267      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d075      	beq.n	8003dbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cd2:	4b88      	ldr	r3, [pc, #544]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d00c      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cde:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d112      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b82      	ldr	r3, [pc, #520]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cf6:	d10b      	bne.n	8003d10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0x108>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d157      	bne.n	8003dbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e242      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d18:	d106      	bne.n	8003d28 <HAL_RCC_OscConfig+0x74>
 8003d1a:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a75      	ldr	r2, [pc, #468]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e01d      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d30:	d10c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x98>
 8003d32:	4b70      	ldr	r3, [pc, #448]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a6f      	ldr	r2, [pc, #444]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3c:	6013      	str	r3, [r2, #0]
 8003d3e:	4b6d      	ldr	r3, [pc, #436]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6c      	ldr	r2, [pc, #432]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	e00b      	b.n	8003d64 <HAL_RCC_OscConfig+0xb0>
 8003d4c:	4b69      	ldr	r3, [pc, #420]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a68      	ldr	r2, [pc, #416]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	4b66      	ldr	r3, [pc, #408]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a65      	ldr	r2, [pc, #404]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d013      	beq.n	8003d94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fe fbce 	bl	800250c <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe fbca 	bl	800250c <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	; 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e207      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d86:	4b5b      	ldr	r3, [pc, #364]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0f0      	beq.n	8003d74 <HAL_RCC_OscConfig+0xc0>
 8003d92:	e014      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fbba 	bl	800250c <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fbb6 	bl	800250c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e1f3      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dae:	4b51      	ldr	r3, [pc, #324]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1f0      	bne.n	8003d9c <HAL_RCC_OscConfig+0xe8>
 8003dba:	e000      	b.n	8003dbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d063      	beq.n	8003e92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dca:	4b4a      	ldr	r3, [pc, #296]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11c      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d116      	bne.n	8003e1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dee:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d005      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d001      	beq.n	8003e06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e1c7      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e06:	4b3b      	ldr	r3, [pc, #236]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4937      	ldr	r1, [pc, #220]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1a:	e03a      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e24:	4b34      	ldr	r3, [pc, #208]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e26:	2201      	movs	r2, #1
 8003e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fb6f 	bl	800250c <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fb6b 	bl	800250c <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e1a8      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e44:	4b2b      	ldr	r3, [pc, #172]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0f0      	beq.n	8003e32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4925      	ldr	r1, [pc, #148]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]
 8003e64:	e015      	b.n	8003e92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x244>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fb4e 	bl	800250c <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fe fb4a 	bl	800250c <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e187      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f0      	bne.n	8003e74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0308 	and.w	r3, r3, #8
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d036      	beq.n	8003f0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d016      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fb2e 	bl	800250c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fb2a 	bl	800250c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e167      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <HAL_RCC_OscConfig+0x240>)
 8003ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x200>
 8003ed2:	e01b      	b.n	8003f0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <HAL_RCC_OscConfig+0x248>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fe fb17 	bl	800250c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe fb13 	bl	800250c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d907      	bls.n	8003f00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e150      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	42470000 	.word	0x42470000
 8003efc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	4b88      	ldr	r3, [pc, #544]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1ea      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8097 	beq.w	8004048 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1e:	4b81      	ldr	r3, [pc, #516]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	4b7d      	ldr	r3, [pc, #500]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	4a7c      	ldr	r2, [pc, #496]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f38:	6413      	str	r3, [r2, #64]	; 0x40
 8003f3a:	4b7a      	ldr	r3, [pc, #488]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f46:	2301      	movs	r3, #1
 8003f48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4a:	4b77      	ldr	r3, [pc, #476]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d118      	bne.n	8003f88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f56:	4b74      	ldr	r3, [pc, #464]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a73      	ldr	r2, [pc, #460]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f62:	f7fe fad3 	bl	800250c <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fe facf 	bl	800250c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e10c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x474>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d106      	bne.n	8003f9e <HAL_RCC_OscConfig+0x2ea>
 8003f90:	4b64      	ldr	r3, [pc, #400]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f94:	4a63      	ldr	r2, [pc, #396]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f9c:	e01c      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x30c>
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	4a5e      	ldr	r2, [pc, #376]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb2:	4b5c      	ldr	r3, [pc, #368]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0301 	orr.w	r3, r3, #1
 8003fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fbe:	e00b      	b.n	8003fd8 <HAL_RCC_OscConfig+0x324>
 8003fc0:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc4:	4a57      	ldr	r2, [pc, #348]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70
 8003fcc:	4b55      	ldr	r3, [pc, #340]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	4a54      	ldr	r2, [pc, #336]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0304 	bic.w	r3, r3, #4
 8003fd6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d015      	beq.n	800400c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fe fa94 	bl	800250c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	e00a      	b.n	8003ffe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe8:	f7fe fa90 	bl	800250c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0cb      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0ee      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x334>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800400c:	f7fe fa7e 	bl	800250c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004012:	e00a      	b.n	800402a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004014:	f7fe fa7a 	bl	800250c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004022:	4293      	cmp	r3, r2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e0b5      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402a:	4b3e      	ldr	r3, [pc, #248]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800402c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1ee      	bne.n	8004014 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004036:	7dfb      	ldrb	r3, [r7, #23]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403c:	4b39      	ldr	r3, [pc, #228]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800403e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004040:	4a38      	ldr	r2, [pc, #224]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004046:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 80a1 	beq.w	8004194 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004052:	4b34      	ldr	r3, [pc, #208]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d05c      	beq.n	8004118 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	2b02      	cmp	r3, #2
 8004064:	d141      	bne.n	80040ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004066:	4b31      	ldr	r3, [pc, #196]	; (800412c <HAL_RCC_OscConfig+0x478>)
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406c:	f7fe fa4e 	bl	800250c <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fa4a 	bl	800250c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e087      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	491b      	ldr	r1, [pc, #108]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040bc:	4b1b      	ldr	r3, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe fa23 	bl	800250c <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fa1f 	bl	800250c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e05c      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040dc:	4b11      	ldr	r3, [pc, #68]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x416>
 80040e8:	e054      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x478>)
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe fa0c 	bl	800250c <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fe fa08 	bl	800250c <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e045      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_OscConfig+0x470>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x444>
 8004116:	e03d      	b.n	8004194 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e038      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
 8004124:	40023800 	.word	0x40023800
 8004128:	40007000 	.word	0x40007000
 800412c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004130:	4b1b      	ldr	r3, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4ec>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d028      	beq.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d121      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d11a      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004166:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004168:	4293      	cmp	r3, r2
 800416a:	d111      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	40023800 	.word	0x40023800

080041a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e0cc      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b8:	4b68      	ldr	r3, [pc, #416]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	683a      	ldr	r2, [r7, #0]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d90c      	bls.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c6:	4b65      	ldr	r3, [pc, #404]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d001      	beq.n	80041e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041f8:	4b59      	ldr	r3, [pc, #356]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a58      	ldr	r2, [pc, #352]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004202:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0308 	and.w	r3, r3, #8
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004210:	4b53      	ldr	r3, [pc, #332]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4a52      	ldr	r2, [pc, #328]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800421a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	494d      	ldr	r1, [pc, #308]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	d044      	beq.n	80042c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d107      	bne.n	8004252 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004242:	4b47      	ldr	r3, [pc, #284]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d119      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e07f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d003      	beq.n	8004262 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004262:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d109      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e06f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004272:	4b3b      	ldr	r3, [pc, #236]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e067      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004282:	4b37      	ldr	r3, [pc, #220]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f023 0203 	bic.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	4934      	ldr	r1, [pc, #208]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	4313      	orrs	r3, r2
 8004292:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004294:	f7fe f93a 	bl	800250c <HAL_GetTick>
 8004298:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	e00a      	b.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800429c:	f7fe f936 	bl	800250c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e04f      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	4b2b      	ldr	r3, [pc, #172]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 020c 	and.w	r2, r3, #12
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d1eb      	bne.n	800429c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d20c      	bcs.n	80042ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b20      	ldr	r3, [pc, #128]	; (800435c <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e032      	b.n	8004352 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f8:	4b19      	ldr	r3, [pc, #100]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	4916      	ldr	r1, [pc, #88]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d009      	beq.n	800432a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004316:	4b12      	ldr	r3, [pc, #72]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	490e      	ldr	r1, [pc, #56]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800432a:	f000 f821 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	490a      	ldr	r1, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x1c0>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	fa22 f303 	lsr.w	r3, r2, r3
 8004342:	4a09      	ldr	r2, [pc, #36]	; (8004368 <HAL_RCC_ClockConfig+0x1c4>)
 8004344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_RCC_ClockConfig+0x1c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe f89a 	bl	8002484 <HAL_InitTick>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023c00 	.word	0x40023c00
 8004360:	40023800 	.word	0x40023800
 8004364:	0800b894 	.word	0x0800b894
 8004368:	20000004 	.word	0x20000004
 800436c:	20000008 	.word	0x20000008

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b090      	sub	sp, #64	; 0x40
 8004376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
 800437c:	2300      	movs	r3, #0
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	2300      	movs	r3, #0
 8004382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004388:	4b59      	ldr	r3, [pc, #356]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b08      	cmp	r3, #8
 8004392:	d00d      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004394:	2b08      	cmp	r3, #8
 8004396:	f200 80a1 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x16c>
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d003      	beq.n	80043aa <HAL_RCC_GetSysClockFreq+0x3a>
 80043a2:	e09b      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043a4:	4b53      	ldr	r3, [pc, #332]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80043a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043a8:	e09b      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b53      	ldr	r3, [pc, #332]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043ae:	e098      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043b0:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ba:	4b4d      	ldr	r3, [pc, #308]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d028      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043c6:	4b4a      	ldr	r3, [pc, #296]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	099b      	lsrs	r3, r3, #6
 80043cc:	2200      	movs	r2, #0
 80043ce:	623b      	str	r3, [r7, #32]
 80043d0:	627a      	str	r2, [r7, #36]	; 0x24
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043d8:	2100      	movs	r1, #0
 80043da:	4b47      	ldr	r3, [pc, #284]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043dc:	fb03 f201 	mul.w	r2, r3, r1
 80043e0:	2300      	movs	r3, #0
 80043e2:	fb00 f303 	mul.w	r3, r0, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	4a43      	ldr	r2, [pc, #268]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ea:	fba0 1202 	umull	r1, r2, r0, r2
 80043ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043f0:	460a      	mov	r2, r1
 80043f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80043f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f6:	4413      	add	r3, r2
 80043f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	2200      	movs	r2, #0
 80043fe:	61bb      	str	r3, [r7, #24]
 8004400:	61fa      	str	r2, [r7, #28]
 8004402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800440a:	f7fc fc3d 	bl	8000c88 <__aeabi_uldivmod>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4613      	mov	r3, r2
 8004414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004416:	e053      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004418:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	2200      	movs	r2, #0
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	617a      	str	r2, [r7, #20]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800442a:	f04f 0b00 	mov.w	fp, #0
 800442e:	4652      	mov	r2, sl
 8004430:	465b      	mov	r3, fp
 8004432:	f04f 0000 	mov.w	r0, #0
 8004436:	f04f 0100 	mov.w	r1, #0
 800443a:	0159      	lsls	r1, r3, #5
 800443c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004440:	0150      	lsls	r0, r2, #5
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	ebb2 080a 	subs.w	r8, r2, sl
 800444a:	eb63 090b 	sbc.w	r9, r3, fp
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800445a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800445e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004462:	ebb2 0408 	subs.w	r4, r2, r8
 8004466:	eb63 0509 	sbc.w	r5, r3, r9
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	00eb      	lsls	r3, r5, #3
 8004474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004478:	00e2      	lsls	r2, r4, #3
 800447a:	4614      	mov	r4, r2
 800447c:	461d      	mov	r5, r3
 800447e:	eb14 030a 	adds.w	r3, r4, sl
 8004482:	603b      	str	r3, [r7, #0]
 8004484:	eb45 030b 	adc.w	r3, r5, fp
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004496:	4629      	mov	r1, r5
 8004498:	028b      	lsls	r3, r1, #10
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a0:	4621      	mov	r1, r4
 80044a2:	028a      	lsls	r2, r1, #10
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044aa:	2200      	movs	r2, #0
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	60fa      	str	r2, [r7, #12]
 80044b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b4:	f7fc fbe8 	bl	8000c88 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4613      	mov	r3, r2
 80044be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	3301      	adds	r3, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80044de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3740      	adds	r7, #64	; 0x40
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	017d7840 	.word	0x017d7840

080044fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000004 	.word	0x20000004

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	0800b8a4 	.word	0x0800b8a4

0800453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004540:	f7ff ffdc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0b5b      	lsrs	r3, r3, #13
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0800b8a4 	.word	0x0800b8a4

08004564 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e041      	b.n	80045fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fe18 	bl	80021c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	3304      	adds	r3, #4
 80045a0:	4619      	mov	r1, r3
 80045a2:	4610      	mov	r0, r2
 80045a4:	f000 fe86 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e04e      	b.n	80046ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f042 0201 	orr.w	r2, r2, #1
 8004632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a23      	ldr	r2, [pc, #140]	; (80046c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d022      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004646:	d01d      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_TIM_Base_Start_IT+0xc8>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_TIM_Base_Start_IT+0x80>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d111      	bne.n	80046a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b06      	cmp	r3, #6
 8004694:	d010      	beq.n	80046b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f042 0201 	orr.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a6:	e007      	b.n	80046b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3714      	adds	r7, #20
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40000400 	.word	0x40000400
 80046d0:	40000800 	.word	0x40000800
 80046d4:	40000c00 	.word	0x40000c00
 80046d8:	40010400 	.word	0x40010400
 80046dc:	40014000 	.word	0x40014000
 80046e0:	40001800 	.word	0x40001800

080046e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e041      	b.n	800477a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d106      	bne.n	8004710 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f839 	bl	8004782 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2202      	movs	r2, #2
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f000 fdc6 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004782:	b480      	push	{r7}
 8004784:	b083      	sub	sp, #12
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_TIM_PWM_Start+0x24>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	e022      	b.n	8004802 <HAL_TIM_PWM_Start+0x6a>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d109      	bne.n	80047d6 <HAL_TIM_PWM_Start+0x3e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	e015      	b.n	8004802 <HAL_TIM_PWM_Start+0x6a>
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d109      	bne.n	80047f0 <HAL_TIM_PWM_Start+0x58>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	e008      	b.n	8004802 <HAL_TIM_PWM_Start+0x6a>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d001      	beq.n	800480a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e07c      	b.n	8004904 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0x82>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	e013      	b.n	8004842 <HAL_TIM_PWM_Start+0xaa>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b04      	cmp	r3, #4
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0x92>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004828:	e00b      	b.n	8004842 <HAL_TIM_PWM_Start+0xaa>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xa2>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004838:	e003      	b.n	8004842 <HAL_TIM_PWM_Start+0xaa>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2201      	movs	r2, #1
 8004848:	6839      	ldr	r1, [r7, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f001 f946 	bl	8005adc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_TIM_PWM_Start+0x174>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d004      	beq.n	8004864 <HAL_TIM_PWM_Start+0xcc>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <HAL_TIM_PWM_Start+0x178>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d101      	bne.n	8004868 <HAL_TIM_PWM_Start+0xd0>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_TIM_PWM_Start+0xd2>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800487c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a22      	ldr	r2, [pc, #136]	; (800490c <HAL_TIM_PWM_Start+0x174>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d022      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004890:	d01d      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1f      	ldr	r2, [pc, #124]	; (8004914 <HAL_TIM_PWM_Start+0x17c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d018      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1d      	ldr	r2, [pc, #116]	; (8004918 <HAL_TIM_PWM_Start+0x180>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d013      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1c      	ldr	r2, [pc, #112]	; (800491c <HAL_TIM_PWM_Start+0x184>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00e      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_TIM_PWM_Start+0x178>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d009      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a18      	ldr	r2, [pc, #96]	; (8004920 <HAL_TIM_PWM_Start+0x188>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_TIM_PWM_Start+0x136>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_TIM_PWM_Start+0x18c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b06      	cmp	r3, #6
 80048de:	d010      	beq.n	8004902 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f0:	e007      	b.n	8004902 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0201 	orr.w	r2, r2, #1
 8004900:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40000c00 	.word	0x40000c00
 8004920:	40014000 	.word	0x40014000
 8004924:	40001800 	.word	0x40001800

08004928 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e041      	b.n	80049be <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f839 	bl	80049c6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 fca4 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_TIM_IC_Start+0x1a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	e013      	b.n	8004a1e <HAL_TIM_IC_Start+0x42>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d104      	bne.n	8004a06 <HAL_TIM_IC_Start+0x2a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	e00b      	b.n	8004a1e <HAL_TIM_IC_Start+0x42>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIM_IC_Start+0x3a>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	e003      	b.n	8004a1e <HAL_TIM_IC_Start+0x42>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d104      	bne.n	8004a30 <HAL_TIM_IC_Start+0x54>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e013      	b.n	8004a58 <HAL_TIM_IC_Start+0x7c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	d104      	bne.n	8004a40 <HAL_TIM_IC_Start+0x64>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	e00b      	b.n	8004a58 <HAL_TIM_IC_Start+0x7c>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d104      	bne.n	8004a50 <HAL_TIM_IC_Start+0x74>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e003      	b.n	8004a58 <HAL_TIM_IC_Start+0x7c>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d102      	bne.n	8004a66 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d001      	beq.n	8004a6a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e081      	b.n	8004b6e <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_IC_Start+0x9e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a78:	e013      	b.n	8004aa2 <HAL_TIM_IC_Start+0xc6>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_IC_Start+0xae>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	e00b      	b.n	8004aa2 <HAL_TIM_IC_Start+0xc6>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start+0xbe>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	e003      	b.n	8004aa2 <HAL_TIM_IC_Start+0xc6>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d104      	bne.n	8004ab2 <HAL_TIM_IC_Start+0xd6>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab0:	e013      	b.n	8004ada <HAL_TIM_IC_Start+0xfe>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b04      	cmp	r3, #4
 8004ab6:	d104      	bne.n	8004ac2 <HAL_TIM_IC_Start+0xe6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac0:	e00b      	b.n	8004ada <HAL_TIM_IC_Start+0xfe>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b08      	cmp	r3, #8
 8004ac6:	d104      	bne.n	8004ad2 <HAL_TIM_IC_Start+0xf6>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad0:	e003      	b.n	8004ada <HAL_TIM_IC_Start+0xfe>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fffa 	bl	8005adc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	; (8004b78 <HAL_TIM_IC_Start+0x19c>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004afa:	d01d      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1e      	ldr	r2, [pc, #120]	; (8004b7c <HAL_TIM_IC_Start+0x1a0>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1d      	ldr	r2, [pc, #116]	; (8004b80 <HAL_TIM_IC_Start+0x1a4>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1b      	ldr	r2, [pc, #108]	; (8004b84 <HAL_TIM_IC_Start+0x1a8>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_TIM_IC_Start+0x1ac>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a18      	ldr	r2, [pc, #96]	; (8004b8c <HAL_TIM_IC_Start+0x1b0>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_TIM_IC_Start+0x15c>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <HAL_TIM_IC_Start+0x1b4>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d111      	bne.n	8004b5c <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d010      	beq.n	8004b6c <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5a:	e007      	b.n	8004b6c <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	40010000 	.word	0x40010000
 8004b7c:	40000400 	.word	0x40000400
 8004b80:	40000800 	.word	0x40000800
 8004b84:	40000c00 	.word	0x40000c00
 8004b88:	40010400 	.word	0x40010400
 8004b8c:	40014000 	.word	0x40014000
 8004b90:	40001800 	.word	0x40001800

08004b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d122      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d11b      	bne.n	8004bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0202 	mvn.w	r2, #2
 8004bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7fc fc70 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e005      	b.n	8004bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fb4a 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 fb51 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	d122      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b04      	cmp	r3, #4
 8004c0a:	d11b      	bne.n	8004c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f06f 0204 	mvn.w	r2, #4
 8004c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fc46 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004c30:	e005      	b.n	8004c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fb20 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb27 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d122      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d11b      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0208 	mvn.w	r2, #8
 8004c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fc1c 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004c84:	e005      	b.n	8004c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 faf6 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fafd 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b10      	cmp	r3, #16
 8004ca4:	d122      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b10      	cmp	r3, #16
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0210 	mvn.w	r2, #16
 8004cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2208      	movs	r2, #8
 8004cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7fc fbf2 	bl	80014bc <HAL_TIM_IC_CaptureCallback>
 8004cd8:	e005      	b.n	8004ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 facc 	bl	8005278 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fad3 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d10e      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d107      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0201 	mvn.w	r2, #1
 8004d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fc fbac 	bl	8001470 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 ff78 	bl	8005c34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b40      	cmp	r3, #64	; 0x40
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa98 	bl	80052a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d10e      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d107      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f06f 0220 	mvn.w	r2, #32
 8004d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 ff42 	bl	8005c20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e088      	b.n	8004ed4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	6819      	ldr	r1, [r3, #0]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f000 fcb8 	bl	8005754 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 020c 	bic.w	r2, r2, #12
 8004df2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	689a      	ldr	r2, [r3, #8]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	619a      	str	r2, [r3, #24]
 8004e06:	e060      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d11c      	bne.n	8004e48 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f000 fd3c 	bl	800589a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e30:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6999      	ldr	r1, [r3, #24]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	021a      	lsls	r2, r3, #8
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	619a      	str	r2, [r3, #24]
 8004e46:	e040      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b08      	cmp	r3, #8
 8004e4c:	d11b      	bne.n	8004e86 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	6819      	ldr	r1, [r3, #0]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f000 fd89 	bl	8005974 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 020c 	bic.w	r2, r2, #12
 8004e70:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69d9      	ldr	r1, [r3, #28]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	61da      	str	r2, [r3, #28]
 8004e84:	e021      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b0c      	cmp	r3, #12
 8004e8a:	d11c      	bne.n	8004ec6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6818      	ldr	r0, [r3, #0]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	6819      	ldr	r1, [r3, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f000 fda6 	bl	80059ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004eae:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69d9      	ldr	r1, [r3, #28]
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	021a      	lsls	r2, r3, #8
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	61da      	str	r2, [r3, #28]
 8004ec4:	e001      	b.n	8004eca <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ae      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	f200 809f 	bhi.w	8005048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08005049 	.word	0x08005049
 8004f18:	08005049 	.word	0x08005049
 8004f1c:	08005049 	.word	0x08005049
 8004f20:	08004f85 	.word	0x08004f85
 8004f24:	08005049 	.word	0x08005049
 8004f28:	08005049 	.word	0x08005049
 8004f2c:	08005049 	.word	0x08005049
 8004f30:	08004fc7 	.word	0x08004fc7
 8004f34:	08005049 	.word	0x08005049
 8004f38:	08005049 	.word	0x08005049
 8004f3c:	08005049 	.word	0x08005049
 8004f40:	08005007 	.word	0x08005007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa52 	bl	80053f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
      break;
 8004f82:	e064      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 faa2 	bl	80054d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	619a      	str	r2, [r3, #24]
      break;
 8004fc4:	e043      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 faf7 	bl	80055c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0208 	orr.w	r2, r2, #8
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
      break;
 8005004:	e023      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fb4b 	bl	80056a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	61da      	str	r2, [r3, #28]
      break;
 8005046:	e002      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIM_ConfigClockSource+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e0b4      	b.n	80051e6 <HAL_TIM_ConfigClockSource+0x186>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800509a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b4:	d03e      	beq.n	8005134 <HAL_TIM_ConfigClockSource+0xd4>
 80050b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ba:	f200 8087 	bhi.w	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	f000 8086 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x172>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	d87f      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b70      	cmp	r3, #112	; 0x70
 80050ce:	d01a      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xa6>
 80050d0:	2b70      	cmp	r3, #112	; 0x70
 80050d2:	d87b      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d050      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x11a>
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d877      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b50      	cmp	r3, #80	; 0x50
 80050de:	d03c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0xfa>
 80050e0:	2b50      	cmp	r3, #80	; 0x50
 80050e2:	d873      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d058      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x13a>
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d86f      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d064      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d86b      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d060      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d867      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d05a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 8005104:	e062      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6899      	ldr	r1, [r3, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f000 fcc1 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	609a      	str	r2, [r3, #8]
      break;
 8005132:	e04f      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6899      	ldr	r1, [r3, #8]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f000 fcaa 	bl	8005a9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005156:	609a      	str	r2, [r3, #8]
      break;
 8005158:	e03c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 fb68 	bl	800583c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2150      	movs	r1, #80	; 0x50
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fc77 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005178:	e02c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 fbc4 	bl	8005914 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2160      	movs	r1, #96	; 0x60
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fc67 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 8005198:	e01c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fb48 	bl	800583c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fc57 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80051b8:	e00c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 fc4e 	bl	8005a66 <TIM_ITRx_SetConfig>
      break;
 80051ca:	e003      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      break;
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b0c      	cmp	r3, #12
 8005202:	d831      	bhi.n	8005268 <HAL_TIM_ReadCapturedValue+0x78>
 8005204:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520a:	bf00      	nop
 800520c:	08005241 	.word	0x08005241
 8005210:	08005269 	.word	0x08005269
 8005214:	08005269 	.word	0x08005269
 8005218:	08005269 	.word	0x08005269
 800521c:	0800524b 	.word	0x0800524b
 8005220:	08005269 	.word	0x08005269
 8005224:	08005269 	.word	0x08005269
 8005228:	08005269 	.word	0x08005269
 800522c:	08005255 	.word	0x08005255
 8005230:	08005269 	.word	0x08005269
 8005234:	08005269 	.word	0x08005269
 8005238:	08005269 	.word	0x08005269
 800523c:	0800525f 	.word	0x0800525f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005246:	60fb      	str	r3, [r7, #12]

      break;
 8005248:	e00f      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	60fb      	str	r3, [r7, #12]

      break;
 8005252:	e00a      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	60fb      	str	r3, [r7, #12]

      break;
 800525c:	e005      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	60fb      	str	r3, [r7, #12]

      break;
 8005266:	e000      	b.n	800526a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005268:	bf00      	nop
  }

  return tmpreg;
 800526a:	68fb      	ldr	r3, [r7, #12]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3714      	adds	r7, #20
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a40      	ldr	r2, [pc, #256]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3d      	ldr	r2, [pc, #244]	; (80053cc <TIM_Base_SetConfig+0x118>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3c      	ldr	r2, [pc, #240]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a3b      	ldr	r2, [pc, #236]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x40>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a3a      	ldr	r2, [pc, #232]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d02b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005314:	d027      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2c      	ldr	r2, [pc, #176]	; (80053cc <TIM_Base_SetConfig+0x118>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d023      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2b      	ldr	r2, [pc, #172]	; (80053d0 <TIM_Base_SetConfig+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d01f      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2a      	ldr	r2, [pc, #168]	; (80053d4 <TIM_Base_SetConfig+0x120>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a29      	ldr	r2, [pc, #164]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d017      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a28      	ldr	r2, [pc, #160]	; (80053dc <TIM_Base_SetConfig+0x128>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d013      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <TIM_Base_SetConfig+0x12c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d00f      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	; (80053e4 <TIM_Base_SetConfig+0x130>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00b      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <TIM_Base_SetConfig+0x134>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d007      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a24      	ldr	r2, [pc, #144]	; (80053ec <TIM_Base_SetConfig+0x138>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d003      	beq.n	8005366 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <TIM_Base_SetConfig+0x13c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d108      	bne.n	8005378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800536c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	689a      	ldr	r2, [r3, #8]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a0a      	ldr	r2, [pc, #40]	; (80053c8 <TIM_Base_SetConfig+0x114>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0xf8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a0c      	ldr	r2, [pc, #48]	; (80053d8 <TIM_Base_SetConfig+0x124>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]
}
 80053ba:	bf00      	nop
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40010000 	.word	0x40010000
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	40010400 	.word	0x40010400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800
 80053e8:	40001800 	.word	0x40001800
 80053ec:	40001c00 	.word	0x40001c00
 80053f0:	40002000 	.word	0x40002000

080053f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b087      	sub	sp, #28
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	f023 0201 	bic.w	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005422:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a20      	ldr	r2, [pc, #128]	; (80054cc <TIM_OC1_SetConfig+0xd8>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC1_SetConfig+0x64>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <TIM_OC1_SetConfig+0xdc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d10c      	bne.n	8005472 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0308 	bic.w	r3, r3, #8
 800545e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f023 0304 	bic.w	r3, r3, #4
 8005470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <TIM_OC1_SetConfig+0xd8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d003      	beq.n	8005482 <TIM_OC1_SetConfig+0x8e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a14      	ldr	r2, [pc, #80]	; (80054d0 <TIM_OC1_SetConfig+0xdc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d111      	bne.n	80054a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4313      	orrs	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	621a      	str	r2, [r3, #32]
}
 80054c0:	bf00      	nop
 80054c2:	371c      	adds	r7, #28
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40010400 	.word	0x40010400

080054d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b087      	sub	sp, #28
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	f023 0210 	bic.w	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800550a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	021b      	lsls	r3, r3, #8
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f023 0320 	bic.w	r3, r3, #32
 800551e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a22      	ldr	r2, [pc, #136]	; (80055b8 <TIM_OC2_SetConfig+0xe4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_OC2_SetConfig+0x68>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a21      	ldr	r2, [pc, #132]	; (80055bc <TIM_OC2_SetConfig+0xe8>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d10d      	bne.n	8005558 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005556:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a17      	ldr	r2, [pc, #92]	; (80055b8 <TIM_OC2_SetConfig+0xe4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC2_SetConfig+0x94>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <TIM_OC2_SetConfig+0xe8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d113      	bne.n	8005590 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800556e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40010000 	.word	0x40010000
 80055bc:	40010400 	.word	0x40010400

080055c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a1b      	ldr	r3, [r3, #32]
 80055ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0303 	bic.w	r3, r3, #3
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005608:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	021b      	lsls	r3, r3, #8
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	4313      	orrs	r3, r2
 8005614:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <TIM_OC3_SetConfig+0xe0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC3_SetConfig+0x66>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a20      	ldr	r2, [pc, #128]	; (80056a4 <TIM_OC3_SetConfig+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10d      	bne.n	8005642 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800562c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <TIM_OC3_SetConfig+0xe0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC3_SetConfig+0x92>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <TIM_OC3_SetConfig+0xe4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d113      	bne.n	800567a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	011b      	lsls	r3, r3, #4
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4313      	orrs	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400

080056a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	69db      	ldr	r3, [r3, #28]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	031b      	lsls	r3, r3, #12
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a12      	ldr	r2, [pc, #72]	; (800574c <TIM_OC4_SetConfig+0xa4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC4_SetConfig+0x68>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a11      	ldr	r2, [pc, #68]	; (8005750 <TIM_OC4_SetConfig+0xa8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d109      	bne.n	8005724 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	019b      	lsls	r3, r3, #6
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	4a28      	ldr	r2, [pc, #160]	; (8005820 <TIM_TI1_SetConfig+0xcc>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01b      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005788:	d017      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <TIM_TI1_SetConfig+0xd0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d013      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	4a24      	ldr	r2, [pc, #144]	; (8005828 <TIM_TI1_SetConfig+0xd4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d00f      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <TIM_TI1_SetConfig+0xd8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d00b      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	4a22      	ldr	r2, [pc, #136]	; (8005830 <TIM_TI1_SetConfig+0xdc>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d007      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4a21      	ldr	r2, [pc, #132]	; (8005834 <TIM_TI1_SetConfig+0xe0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d003      	beq.n	80057ba <TIM_TI1_SetConfig+0x66>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4a20      	ldr	r2, [pc, #128]	; (8005838 <TIM_TI1_SetConfig+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <TIM_TI1_SetConfig+0x6a>
 80057ba:	2301      	movs	r3, #1
 80057bc:	e000      	b.n	80057c0 <TIM_TI1_SetConfig+0x6c>
 80057be:	2300      	movs	r3, #0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d008      	beq.n	80057d6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057cc:	697a      	ldr	r2, [r7, #20]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e003      	b.n	80057de <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f023 030a 	bic.w	r3, r3, #10
 80057f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 030a 	and.w	r3, r3, #10
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40001800 	.word	0x40001800

0800583c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0201 	bic.w	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	011b      	lsls	r3, r3, #4
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	4313      	orrs	r3, r2
 8005870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f023 030a 	bic.w	r3, r3, #10
 8005878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	621a      	str	r2, [r3, #32]
}
 800588e:	bf00      	nop
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800589a:	b480      	push	{r7}
 800589c:	b087      	sub	sp, #28
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	f023 0210 	bic.w	r2, r3, #16
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	021b      	lsls	r3, r3, #8
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	031b      	lsls	r3, r3, #12
 80058de:	b29b      	uxth	r3, r3
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	621a      	str	r2, [r3, #32]
}
 8005908:	bf00      	nop
 800590a:	371c      	adds	r7, #28
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f023 0210 	bic.w	r2, r3, #16
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6a1b      	ldr	r3, [r3, #32]
 8005936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800593e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	031b      	lsls	r3, r3, #12
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	4313      	orrs	r3, r2
 8005948:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005950:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	4313      	orrs	r3, r2
 800595a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	69db      	ldr	r3, [r3, #28]
 8005992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f023 0303 	bic.w	r3, r3, #3
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	031b      	lsls	r3, r3, #12
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a3e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	031b      	lsls	r3, r3, #12
 8005a44:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	621a      	str	r2, [r3, #32]
}
 8005a5a:	bf00      	nop
 8005a5c:	371c      	adds	r7, #28
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b085      	sub	sp, #20
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a7e:	683a      	ldr	r2, [r7, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f043 0307 	orr.w	r3, r3, #7
 8005a88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	609a      	str	r2, [r3, #8]
}
 8005a90:	bf00      	nop
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	021a      	lsls	r2, r3, #8
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	609a      	str	r2, [r3, #8]
}
 8005ad0:	bf00      	nop
 8005ad2:	371c      	adds	r7, #28
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f003 031f 	and.w	r3, r3, #31
 8005aee:	2201      	movs	r2, #1
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6a1a      	ldr	r2, [r3, #32]
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	43db      	mvns	r3, r3
 8005afe:	401a      	ands	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 031f 	and.w	r3, r3, #31
 8005b0e:	6879      	ldr	r1, [r7, #4]
 8005b10:	fa01 f303 	lsl.w	r3, r1, r3
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
	...

08005b28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	e05a      	b.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a21      	ldr	r2, [pc, #132]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d022      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8c:	d01d      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a1d      	ldr	r2, [pc, #116]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a1a      	ldr	r2, [pc, #104]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00e      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a17      	ldr	r2, [pc, #92]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a15      	ldr	r2, [pc, #84]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d10c      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40010000 	.word	0x40010000
 8005c08:	40000400 	.word	0x40000400
 8005c0c:	40000800 	.word	0x40000800
 8005c10:	40000c00 	.word	0x40000c00
 8005c14:	40010400 	.word	0x40010400
 8005c18:	40014000 	.word	0x40014000
 8005c1c:	40001800 	.word	0x40001800

08005c20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e03f      	b.n	8005cda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fc fb6c 	bl	800234c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fddf 	bl	8006850 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68da      	ldr	r2, [r3, #12]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b08a      	sub	sp, #40	; 0x28
 8005ce6:	af02      	add	r7, sp, #8
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	603b      	str	r3, [r7, #0]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d17c      	bne.n	8005dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d002      	beq.n	8005d0e <HAL_UART_Transmit+0x2c>
 8005d08:	88fb      	ldrh	r3, [r7, #6]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e075      	b.n	8005dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_UART_Transmit+0x3e>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e06e      	b.n	8005dfe <HAL_UART_Transmit+0x11c>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2221      	movs	r2, #33	; 0x21
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d36:	f7fc fbe9 	bl	800250c <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d50:	d108      	bne.n	8005d64 <HAL_UART_Transmit+0x82>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d104      	bne.n	8005d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	e003      	b.n	8005d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d74:	e02a      	b.n	8005dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	9300      	str	r3, [sp, #0]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	2180      	movs	r1, #128	; 0x80
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 fb1f 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e036      	b.n	8005dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	3302      	adds	r3, #2
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e007      	b.n	8005dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	781a      	ldrb	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1cf      	bne.n	8005d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	9300      	str	r3, [sp, #0]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	2140      	movs	r1, #64	; 0x40
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f000 faef 	bl	80063c4 <UART_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e006      	b.n	8005dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e000      	b.n	8005dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005dfc:	2302      	movs	r3, #2
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3720      	adds	r7, #32
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d11d      	bne.n	8005e5c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Receive_IT+0x26>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e016      	b.n	8005e5e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Receive_IT+0x38>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e00f      	b.n	8005e5e <HAL_UART_Receive_IT+0x58>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e4c:	88fb      	ldrh	r3, [r7, #6]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68b9      	ldr	r1, [r7, #8]
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fb24 	bl	80064a0 <UART_Start_Receive_IT>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	e000      	b.n	8005e5e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005e5c:	2302      	movs	r3, #2
  }
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	; 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10f      	bne.n	8005ece <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d009      	beq.n	8005ece <HAL_UART_IRQHandler+0x66>
 8005eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ebe:	f003 0320 	and.w	r3, r3, #32
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fc07 	bl	80066da <UART_Receive_IT>
      return;
 8005ecc:	e256      	b.n	800637c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 80de 	beq.w	8006094 <HAL_UART_IRQHandler+0x22c>
 8005ed8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ee8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f000 80d1 	beq.w	8006094 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <HAL_UART_IRQHandler+0xae>
 8005efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d005      	beq.n	8005f16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f0e:	f043 0201 	orr.w	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1a:	f003 0304 	and.w	r3, r3, #4
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <HAL_UART_IRQHandler+0xd2>
 8005f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f043 0202 	orr.w	r2, r3, #2
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00b      	beq.n	8005f5e <HAL_UART_IRQHandler+0xf6>
 8005f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d005      	beq.n	8005f5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	f043 0204 	orr.w	r2, r3, #4
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d011      	beq.n	8005f8e <HAL_UART_IRQHandler+0x126>
 8005f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d105      	bne.n	8005f82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d005      	beq.n	8005f8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f043 0208 	orr.w	r2, r3, #8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 81ed 	beq.w	8006372 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9c:	f003 0320 	and.w	r3, r3, #32
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d008      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x14e>
 8005fa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb92 	bl	80066da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695b      	ldr	r3, [r3, #20]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	bf0c      	ite	eq
 8005fc4:	2301      	moveq	r3, #1
 8005fc6:	2300      	movne	r3, #0
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d103      	bne.n	8005fe2 <HAL_UART_IRQHandler+0x17a>
 8005fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d04f      	beq.n	8006082 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa9a 	bl	800651c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff2:	2b40      	cmp	r3, #64	; 0x40
 8005ff4:	d141      	bne.n	800607a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3314      	adds	r3, #20
 8005ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800600c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3314      	adds	r3, #20
 800601e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800602e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800603a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1d9      	bne.n	8005ff6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	2b00      	cmp	r3, #0
 8006048:	d013      	beq.n	8006072 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	4a7d      	ldr	r2, [pc, #500]	; (8006244 <HAL_UART_IRQHandler+0x3dc>)
 8006050:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	4618      	mov	r0, r3
 8006058:	f7fd f9b8 	bl	80033cc <HAL_DMA_Abort_IT>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d016      	beq.n	8006090 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006070:	e00e      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f990 	bl	8006398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006078:	e00a      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f98c 	bl	8006398 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	e006      	b.n	8006090 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f988 	bl	8006398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800608e:	e170      	b.n	8006372 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006090:	bf00      	nop
    return;
 8006092:	e16e      	b.n	8006372 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 814a 	bne.w	8006332 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800609e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a2:	f003 0310 	and.w	r3, r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8143 	beq.w	8006332 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	f000 813c 	beq.w	8006332 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60bb      	str	r3, [r7, #8]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	60bb      	str	r3, [r7, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b40      	cmp	r3, #64	; 0x40
 80060dc:	f040 80b4 	bne.w	8006248 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80060ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 8140 	beq.w	8006376 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80060fe:	429a      	cmp	r2, r3
 8006100:	f080 8139 	bcs.w	8006376 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800610a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006116:	f000 8088 	beq.w	800622a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006124:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006130:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006138:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006146:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800614a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006152:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800615e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1d9      	bne.n	800611a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3314      	adds	r3, #20
 800616c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006178:	f023 0301 	bic.w	r3, r3, #1
 800617c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800618a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800618e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006190:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006196:	e841 2300 	strex	r3, r2, [r1]
 800619a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800619c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d1e1      	bne.n	8006166 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3314      	adds	r3, #20
 80061a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ac:	e853 3f00 	ldrex	r3, [r3]
 80061b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	3314      	adds	r3, #20
 80061c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80061c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80061cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80061ce:	e841 2300 	strex	r3, r2, [r1]
 80061d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80061d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d1e3      	bne.n	80061a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	f023 0310 	bic.w	r3, r3, #16
 80061fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	330c      	adds	r3, #12
 8006208:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800620c:	65ba      	str	r2, [r7, #88]	; 0x58
 800620e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006212:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006214:	e841 2300 	strex	r3, r2, [r1]
 8006218:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800621a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621c:	2b00      	cmp	r3, #0
 800621e:	d1e3      	bne.n	80061e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006224:	4618      	mov	r0, r3
 8006226:	f7fd f861 	bl	80032ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006232:	b29b      	uxth	r3, r3
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	b29b      	uxth	r3, r3
 8006238:	4619      	mov	r1, r3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f8b6 	bl	80063ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006240:	e099      	b.n	8006376 <HAL_UART_IRQHandler+0x50e>
 8006242:	bf00      	nop
 8006244:	080065e3 	.word	0x080065e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006250:	b29b      	uxth	r3, r3
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800625c:	b29b      	uxth	r3, r3
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 808b 	beq.w	800637a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006264:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8086 	beq.w	800637a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	e853 3f00 	ldrex	r3, [r3]
 800627c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006292:	647a      	str	r2, [r7, #68]	; 0x44
 8006294:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006298:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800629a:	e841 2300 	strex	r3, r2, [r1]
 800629e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1e3      	bne.n	800626e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3314      	adds	r3, #20
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b0:	e853 3f00 	ldrex	r3, [r3]
 80062b4:	623b      	str	r3, [r7, #32]
   return(result);
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	f023 0301 	bic.w	r3, r3, #1
 80062bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	3314      	adds	r3, #20
 80062c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80062ca:	633a      	str	r2, [r7, #48]	; 0x30
 80062cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d2:	e841 2300 	strex	r3, r2, [r1]
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1e3      	bne.n	80062a6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	330c      	adds	r3, #12
 80062f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	e853 3f00 	ldrex	r3, [r3]
 80062fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0310 	bic.w	r3, r3, #16
 8006302:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	330c      	adds	r3, #12
 800630c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006310:	61fa      	str	r2, [r7, #28]
 8006312:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	69b9      	ldr	r1, [r7, #24]
 8006316:	69fa      	ldr	r2, [r7, #28]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	617b      	str	r3, [r7, #20]
   return(result);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e3      	bne.n	80062ec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006324:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006328:	4619      	mov	r1, r3
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f83e 	bl	80063ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006330:	e023      	b.n	800637a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <HAL_UART_IRQHandler+0x4ea>
 800633e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006346:	2b00      	cmp	r3, #0
 8006348:	d003      	beq.n	8006352 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f95d 	bl	800660a <UART_Transmit_IT>
    return;
 8006350:	e014      	b.n	800637c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00e      	beq.n	800637c <HAL_UART_IRQHandler+0x514>
 800635e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f99d 	bl	80066aa <UART_EndTransmit_IT>
    return;
 8006370:	e004      	b.n	800637c <HAL_UART_IRQHandler+0x514>
    return;
 8006372:	bf00      	nop
 8006374:	e002      	b.n	800637c <HAL_UART_IRQHandler+0x514>
      return;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_UART_IRQHandler+0x514>
      return;
 800637a:	bf00      	nop
  }
}
 800637c:	37e8      	adds	r7, #232	; 0xe8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop

08006384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	460b      	mov	r3, r1
 80063b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b090      	sub	sp, #64	; 0x40
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	4613      	mov	r3, r2
 80063d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063d4:	e050      	b.n	8006478 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063dc:	d04c      	beq.n	8006478 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80063de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80063e4:	f7fc f892 	bl	800250c <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d241      	bcs.n	8006478 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	330c      	adds	r3, #12
 80063fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	e853 3f00 	ldrex	r3, [r3]
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006406:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006414:	637a      	str	r2, [r7, #52]	; 0x34
 8006416:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800641a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800641c:	e841 2300 	strex	r3, r2, [r1]
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e5      	bne.n	80063f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3314      	adds	r3, #20
 800642e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	613b      	str	r3, [r7, #16]
   return(result);
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f023 0301 	bic.w	r3, r3, #1
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006448:	623a      	str	r2, [r7, #32]
 800644a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644c:	69f9      	ldr	r1, [r7, #28]
 800644e:	6a3a      	ldr	r2, [r7, #32]
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	61bb      	str	r3, [r7, #24]
   return(result);
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e5      	bne.n	8006428 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e00f      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4013      	ands	r3, r2
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	429a      	cmp	r2, r3
 8006486:	bf0c      	ite	eq
 8006488:	2301      	moveq	r3, #1
 800648a:	2300      	movne	r3, #0
 800648c:	b2db      	uxtb	r3, r3
 800648e:	461a      	mov	r2, r3
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	429a      	cmp	r2, r3
 8006494:	d09f      	beq.n	80063d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3740      	adds	r7, #64	; 0x40
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	88fa      	ldrh	r2, [r7, #6]
 80064b8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	88fa      	ldrh	r2, [r7, #6]
 80064be:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2222      	movs	r2, #34	; 0x22
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d007      	beq.n	80064ee <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f042 0201 	orr.w	r2, r2, #1
 80064fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0220 	orr.w	r2, r2, #32
 800650c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3714      	adds	r7, #20
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b095      	sub	sp, #84	; 0x54
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800653a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006544:	643a      	str	r2, [r7, #64]	; 0x40
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800654a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3314      	adds	r3, #20
 800655e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	e853 3f00 	ldrex	r3, [r3]
 8006566:	61fb      	str	r3, [r7, #28]
   return(result);
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f023 0301 	bic.w	r3, r3, #1
 800656e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3314      	adds	r3, #20
 8006576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006578:	62fa      	str	r2, [r7, #44]	; 0x2c
 800657a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800657e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006580:	e841 2300 	strex	r3, r2, [r1]
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1e5      	bne.n	8006558 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	2b01      	cmp	r3, #1
 8006592:	d119      	bne.n	80065c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f023 0310 	bic.w	r3, r3, #16
 80065aa:	647b      	str	r3, [r7, #68]	; 0x44
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b4:	61ba      	str	r2, [r7, #24]
 80065b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6979      	ldr	r1, [r7, #20]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	613b      	str	r3, [r7, #16]
   return(result);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065d6:	bf00      	nop
 80065d8:	3754      	adds	r7, #84	; 0x54
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f7ff fecb 	bl	8006398 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006602:	bf00      	nop
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b21      	cmp	r3, #33	; 0x21
 800661c:	d13e      	bne.n	800669c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006626:	d114      	bne.n	8006652 <UART_Transmit_IT+0x48>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d110      	bne.n	8006652 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a1b      	ldr	r3, [r3, #32]
 8006634:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	881b      	ldrh	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006644:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	1c9a      	adds	r2, r3, #2
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]
 8006650:	e008      	b.n	8006664 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	1c59      	adds	r1, r3, #1
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6211      	str	r1, [r2, #32]
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006668:	b29b      	uxth	r3, r3
 800666a:	3b01      	subs	r3, #1
 800666c:	b29b      	uxth	r3, r3
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4619      	mov	r1, r3
 8006672:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10f      	bne.n	8006698 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68da      	ldr	r2, [r3, #12]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006686:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006696:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006698:	2300      	movs	r3, #0
 800669a:	e000      	b.n	800669e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800669c:	2302      	movs	r3, #2
  }
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b082      	sub	sp, #8
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fe5a 	bl	8006384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}

080066da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b08c      	sub	sp, #48	; 0x30
 80066de:	af00      	add	r7, sp, #0
 80066e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b22      	cmp	r3, #34	; 0x22
 80066ec:	f040 80ab 	bne.w	8006846 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f8:	d117      	bne.n	800672a <UART_Receive_IT+0x50>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d113      	bne.n	800672a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006702:	2300      	movs	r3, #0
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	b29b      	uxth	r3, r3
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	b29a      	uxth	r2, r3
 800671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006722:	1c9a      	adds	r2, r3, #2
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	629a      	str	r2, [r3, #40]	; 0x28
 8006728:	e026      	b.n	8006778 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006730:	2300      	movs	r3, #0
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673c:	d007      	beq.n	800674e <UART_Receive_IT+0x74>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <UART_Receive_IT+0x82>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d106      	bne.n	800675c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	b2da      	uxtb	r2, r3
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e008      	b.n	800676e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006768:	b2da      	uxtb	r2, r3
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	1c5a      	adds	r2, r3, #1
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800677c:	b29b      	uxth	r3, r3
 800677e:	3b01      	subs	r3, #1
 8006780:	b29b      	uxth	r3, r3
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4619      	mov	r1, r3
 8006786:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006788:	2b00      	cmp	r3, #0
 800678a:	d15a      	bne.n	8006842 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0220 	bic.w	r2, r2, #32
 800679a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695a      	ldr	r2, [r3, #20]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d135      	bne.n	8006838 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	e853 3f00 	ldrex	r3, [r3]
 80067e0:	613b      	str	r3, [r7, #16]
   return(result);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f023 0310 	bic.w	r3, r3, #16
 80067e8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	330c      	adds	r3, #12
 80067f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f2:	623a      	str	r2, [r7, #32]
 80067f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	69f9      	ldr	r1, [r7, #28]
 80067f8:	6a3a      	ldr	r2, [r7, #32]
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e5      	bne.n	80067d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0310 	and.w	r3, r3, #16
 8006810:	2b10      	cmp	r3, #16
 8006812:	d10a      	bne.n	800682a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006814:	2300      	movs	r3, #0
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fdbb 	bl	80063ac <HAL_UARTEx_RxEventCallback>
 8006836:	e002      	b.n	800683e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f7fa fe69 	bl	8001510 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	e002      	b.n	8006848 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006842:	2300      	movs	r3, #0
 8006844:	e000      	b.n	8006848 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006846:	2302      	movs	r3, #2
  }
}
 8006848:	4618      	mov	r0, r3
 800684a:	3730      	adds	r7, #48	; 0x30
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006850:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006854:	b0c0      	sub	sp, #256	; 0x100
 8006856:	af00      	add	r7, sp, #0
 8006858:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800685c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	68d9      	ldr	r1, [r3, #12]
 800686e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	ea40 0301 	orr.w	r3, r0, r1
 8006878:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800687a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	431a      	orrs	r2, r3
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	431a      	orrs	r2, r3
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800689c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80068a8:	f021 010c 	bic.w	r1, r1, #12
 80068ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80068b6:	430b      	orrs	r3, r1
 80068b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80068c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ca:	6999      	ldr	r1, [r3, #24]
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	ea40 0301 	orr.w	r3, r0, r1
 80068d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	4b8f      	ldr	r3, [pc, #572]	; (8006b1c <UART_SetConfig+0x2cc>)
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d005      	beq.n	80068f0 <UART_SetConfig+0xa0>
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	4b8d      	ldr	r3, [pc, #564]	; (8006b20 <UART_SetConfig+0x2d0>)
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d104      	bne.n	80068fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068f0:	f7fd fe24 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 80068f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068f8:	e003      	b.n	8006902 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068fa:	f7fd fe0b 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 80068fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006906:	69db      	ldr	r3, [r3, #28]
 8006908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800690c:	f040 810c 	bne.w	8006b28 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006914:	2200      	movs	r2, #0
 8006916:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800691a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800691e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	1891      	adds	r1, r2, r2
 8006928:	65b9      	str	r1, [r7, #88]	; 0x58
 800692a:	415b      	adcs	r3, r3
 800692c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800692e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006932:	4621      	mov	r1, r4
 8006934:	eb12 0801 	adds.w	r8, r2, r1
 8006938:	4629      	mov	r1, r5
 800693a:	eb43 0901 	adc.w	r9, r3, r1
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800694a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800694e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006952:	4690      	mov	r8, r2
 8006954:	4699      	mov	r9, r3
 8006956:	4623      	mov	r3, r4
 8006958:	eb18 0303 	adds.w	r3, r8, r3
 800695c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006960:	462b      	mov	r3, r5
 8006962:	eb49 0303 	adc.w	r3, r9, r3
 8006966:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800696a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006976:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800697a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800697e:	460b      	mov	r3, r1
 8006980:	18db      	adds	r3, r3, r3
 8006982:	653b      	str	r3, [r7, #80]	; 0x50
 8006984:	4613      	mov	r3, r2
 8006986:	eb42 0303 	adc.w	r3, r2, r3
 800698a:	657b      	str	r3, [r7, #84]	; 0x54
 800698c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006990:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006994:	f7fa f978 	bl	8000c88 <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4b61      	ldr	r3, [pc, #388]	; (8006b24 <UART_SetConfig+0x2d4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	011c      	lsls	r4, r3, #4
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80069b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	64b9      	str	r1, [r7, #72]	; 0x48
 80069c0:	415b      	adcs	r3, r3
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80069c8:	4641      	mov	r1, r8
 80069ca:	eb12 0a01 	adds.w	sl, r2, r1
 80069ce:	4649      	mov	r1, r9
 80069d0:	eb43 0b01 	adc.w	fp, r3, r1
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80069e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069e8:	4692      	mov	sl, r2
 80069ea:	469b      	mov	fp, r3
 80069ec:	4643      	mov	r3, r8
 80069ee:	eb1a 0303 	adds.w	r3, sl, r3
 80069f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069f6:	464b      	mov	r3, r9
 80069f8:	eb4b 0303 	adc.w	r3, fp, r3
 80069fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a0c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a10:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a14:	460b      	mov	r3, r1
 8006a16:	18db      	adds	r3, r3, r3
 8006a18:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	eb42 0303 	adc.w	r3, r2, r3
 8006a20:	647b      	str	r3, [r7, #68]	; 0x44
 8006a22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a26:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a2a:	f7fa f92d 	bl	8000c88 <__aeabi_uldivmod>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	4b3b      	ldr	r3, [pc, #236]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006a36:	fba3 2301 	umull	r2, r3, r3, r1
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	2264      	movs	r2, #100	; 0x64
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	1acb      	subs	r3, r1, r3
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a4a:	4b36      	ldr	r3, [pc, #216]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006a4c:	fba3 2302 	umull	r2, r3, r3, r2
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	005b      	lsls	r3, r3, #1
 8006a54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a58:	441c      	add	r4, r3
 8006a5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a64:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a68:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a6c:	4642      	mov	r2, r8
 8006a6e:	464b      	mov	r3, r9
 8006a70:	1891      	adds	r1, r2, r2
 8006a72:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a74:	415b      	adcs	r3, r3
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a78:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a7c:	4641      	mov	r1, r8
 8006a7e:	1851      	adds	r1, r2, r1
 8006a80:	6339      	str	r1, [r7, #48]	; 0x30
 8006a82:	4649      	mov	r1, r9
 8006a84:	414b      	adcs	r3, r1
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a94:	4659      	mov	r1, fp
 8006a96:	00cb      	lsls	r3, r1, #3
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	00ca      	lsls	r2, r1, #3
 8006aa2:	4610      	mov	r0, r2
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	189b      	adds	r3, r3, r2
 8006aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ab0:	464b      	mov	r3, r9
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	eb42 0303 	adc.w	r3, r2, r3
 8006ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006ac8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006acc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	18db      	adds	r3, r3, r3
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ade:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ae2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006ae6:	f7fa f8cf 	bl	8000c88 <__aeabi_uldivmod>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	4b0d      	ldr	r3, [pc, #52]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006af0:	fba3 1302 	umull	r1, r3, r3, r2
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	2164      	movs	r1, #100	; 0x64
 8006af8:	fb01 f303 	mul.w	r3, r1, r3
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	00db      	lsls	r3, r3, #3
 8006b00:	3332      	adds	r3, #50	; 0x32
 8006b02:	4a08      	ldr	r2, [pc, #32]	; (8006b24 <UART_SetConfig+0x2d4>)
 8006b04:	fba2 2303 	umull	r2, r3, r2, r3
 8006b08:	095b      	lsrs	r3, r3, #5
 8006b0a:	f003 0207 	and.w	r2, r3, #7
 8006b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4422      	add	r2, r4
 8006b16:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b18:	e105      	b.n	8006d26 <UART_SetConfig+0x4d6>
 8006b1a:	bf00      	nop
 8006b1c:	40011000 	.word	0x40011000
 8006b20:	40011400 	.word	0x40011400
 8006b24:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b32:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006b36:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006b3a:	4642      	mov	r2, r8
 8006b3c:	464b      	mov	r3, r9
 8006b3e:	1891      	adds	r1, r2, r2
 8006b40:	6239      	str	r1, [r7, #32]
 8006b42:	415b      	adcs	r3, r3
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
 8006b46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	1854      	adds	r4, r2, r1
 8006b4e:	4649      	mov	r1, r9
 8006b50:	eb43 0501 	adc.w	r5, r3, r1
 8006b54:	f04f 0200 	mov.w	r2, #0
 8006b58:	f04f 0300 	mov.w	r3, #0
 8006b5c:	00eb      	lsls	r3, r5, #3
 8006b5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b62:	00e2      	lsls	r2, r4, #3
 8006b64:	4614      	mov	r4, r2
 8006b66:	461d      	mov	r5, r3
 8006b68:	4643      	mov	r3, r8
 8006b6a:	18e3      	adds	r3, r4, r3
 8006b6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b70:	464b      	mov	r3, r9
 8006b72:	eb45 0303 	adc.w	r3, r5, r3
 8006b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b96:	4629      	mov	r1, r5
 8006b98:	008b      	lsls	r3, r1, #2
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	008a      	lsls	r2, r1, #2
 8006ba4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ba8:	f7fa f86e 	bl	8000c88 <__aeabi_uldivmod>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	4b60      	ldr	r3, [pc, #384]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006bb2:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb6:	095b      	lsrs	r3, r3, #5
 8006bb8:	011c      	lsls	r4, r3, #4
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006bc4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006bc8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	61b9      	str	r1, [r7, #24]
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	61fb      	str	r3, [r7, #28]
 8006bd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6139      	str	r1, [r7, #16]
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c26:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	f04f 0300 	mov.w	r3, #0
 8006c30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006c34:	4649      	mov	r1, r9
 8006c36:	008b      	lsls	r3, r1, #2
 8006c38:	4641      	mov	r1, r8
 8006c3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c3e:	4641      	mov	r1, r8
 8006c40:	008a      	lsls	r2, r1, #2
 8006c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c46:	f7fa f81f 	bl	8000c88 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b39      	ldr	r3, [pc, #228]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	; 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	3332      	adds	r3, #50	; 0x32
 8006c62:	4a34      	ldr	r2, [pc, #208]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c6e:	441c      	add	r4, r3
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	673b      	str	r3, [r7, #112]	; 0x70
 8006c78:	677a      	str	r2, [r7, #116]	; 0x74
 8006c7a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c7e:	4642      	mov	r2, r8
 8006c80:	464b      	mov	r3, r9
 8006c82:	1891      	adds	r1, r2, r2
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	415b      	adcs	r3, r3
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c8e:	4641      	mov	r1, r8
 8006c90:	1851      	adds	r1, r2, r1
 8006c92:	6039      	str	r1, [r7, #0]
 8006c94:	4649      	mov	r1, r9
 8006c96:	414b      	adcs	r3, r1
 8006c98:	607b      	str	r3, [r7, #4]
 8006c9a:	f04f 0200 	mov.w	r2, #0
 8006c9e:	f04f 0300 	mov.w	r3, #0
 8006ca2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ca6:	4659      	mov	r1, fp
 8006ca8:	00cb      	lsls	r3, r1, #3
 8006caa:	4651      	mov	r1, sl
 8006cac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006cb0:	4651      	mov	r1, sl
 8006cb2:	00ca      	lsls	r2, r1, #3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4603      	mov	r3, r0
 8006cba:	4642      	mov	r2, r8
 8006cbc:	189b      	adds	r3, r3, r2
 8006cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006cc0:	464b      	mov	r3, r9
 8006cc2:	460a      	mov	r2, r1
 8006cc4:	eb42 0303 	adc.w	r3, r2, r3
 8006cc8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	663b      	str	r3, [r7, #96]	; 0x60
 8006cd4:	667a      	str	r2, [r7, #100]	; 0x64
 8006cd6:	f04f 0200 	mov.w	r2, #0
 8006cda:	f04f 0300 	mov.w	r3, #0
 8006cde:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ce2:	4649      	mov	r1, r9
 8006ce4:	008b      	lsls	r3, r1, #2
 8006ce6:	4641      	mov	r1, r8
 8006ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cec:	4641      	mov	r1, r8
 8006cee:	008a      	lsls	r2, r1, #2
 8006cf0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cf4:	f7f9 ffc8 	bl	8000c88 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b0d      	ldr	r3, [pc, #52]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	2164      	movs	r1, #100	; 0x64
 8006d06:	fb01 f303 	mul.w	r3, r1, r3
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	011b      	lsls	r3, r3, #4
 8006d0e:	3332      	adds	r3, #50	; 0x32
 8006d10:	4a08      	ldr	r2, [pc, #32]	; (8006d34 <UART_SetConfig+0x4e4>)
 8006d12:	fba2 2303 	umull	r2, r3, r2, r3
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	f003 020f 	and.w	r2, r3, #15
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4422      	add	r2, r4
 8006d24:	609a      	str	r2, [r3, #8]
}
 8006d26:	bf00      	nop
 8006d28:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d32:	bf00      	nop
 8006d34:	51eb851f 	.word	0x51eb851f

08006d38 <atoi>:
 8006d38:	220a      	movs	r2, #10
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	f001 be0c 	b.w	8008958 <strtol>

08006d40 <__errno>:
 8006d40:	4b01      	ldr	r3, [pc, #4]	; (8006d48 <__errno+0x8>)
 8006d42:	6818      	ldr	r0, [r3, #0]
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	20000010 	.word	0x20000010

08006d4c <__libc_init_array>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4d0d      	ldr	r5, [pc, #52]	; (8006d84 <__libc_init_array+0x38>)
 8006d50:	4c0d      	ldr	r4, [pc, #52]	; (8006d88 <__libc_init_array+0x3c>)
 8006d52:	1b64      	subs	r4, r4, r5
 8006d54:	10a4      	asrs	r4, r4, #2
 8006d56:	2600      	movs	r6, #0
 8006d58:	42a6      	cmp	r6, r4
 8006d5a:	d109      	bne.n	8006d70 <__libc_init_array+0x24>
 8006d5c:	4d0b      	ldr	r5, [pc, #44]	; (8006d8c <__libc_init_array+0x40>)
 8006d5e:	4c0c      	ldr	r4, [pc, #48]	; (8006d90 <__libc_init_array+0x44>)
 8006d60:	f004 fd28 	bl	800b7b4 <_init>
 8006d64:	1b64      	subs	r4, r4, r5
 8006d66:	10a4      	asrs	r4, r4, #2
 8006d68:	2600      	movs	r6, #0
 8006d6a:	42a6      	cmp	r6, r4
 8006d6c:	d105      	bne.n	8006d7a <__libc_init_array+0x2e>
 8006d6e:	bd70      	pop	{r4, r5, r6, pc}
 8006d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d74:	4798      	blx	r3
 8006d76:	3601      	adds	r6, #1
 8006d78:	e7ee      	b.n	8006d58 <__libc_init_array+0xc>
 8006d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7e:	4798      	blx	r3
 8006d80:	3601      	adds	r6, #1
 8006d82:	e7f2      	b.n	8006d6a <__libc_init_array+0x1e>
 8006d84:	0800bd6c 	.word	0x0800bd6c
 8006d88:	0800bd6c 	.word	0x0800bd6c
 8006d8c:	0800bd6c 	.word	0x0800bd6c
 8006d90:	0800bd70 	.word	0x0800bd70

08006d94 <memset>:
 8006d94:	4402      	add	r2, r0
 8006d96:	4603      	mov	r3, r0
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d100      	bne.n	8006d9e <memset+0xa>
 8006d9c:	4770      	bx	lr
 8006d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006da2:	e7f9      	b.n	8006d98 <memset+0x4>

08006da4 <__cvt>:
 8006da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	ec55 4b10 	vmov	r4, r5, d0
 8006dac:	2d00      	cmp	r5, #0
 8006dae:	460e      	mov	r6, r1
 8006db0:	4619      	mov	r1, r3
 8006db2:	462b      	mov	r3, r5
 8006db4:	bfbb      	ittet	lt
 8006db6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006dba:	461d      	movlt	r5, r3
 8006dbc:	2300      	movge	r3, #0
 8006dbe:	232d      	movlt	r3, #45	; 0x2d
 8006dc0:	700b      	strb	r3, [r1, #0]
 8006dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006dc8:	4691      	mov	r9, r2
 8006dca:	f023 0820 	bic.w	r8, r3, #32
 8006dce:	bfbc      	itt	lt
 8006dd0:	4622      	movlt	r2, r4
 8006dd2:	4614      	movlt	r4, r2
 8006dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd8:	d005      	beq.n	8006de6 <__cvt+0x42>
 8006dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dde:	d100      	bne.n	8006de2 <__cvt+0x3e>
 8006de0:	3601      	adds	r6, #1
 8006de2:	2102      	movs	r1, #2
 8006de4:	e000      	b.n	8006de8 <__cvt+0x44>
 8006de6:	2103      	movs	r1, #3
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	ab02      	add	r3, sp, #8
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	ec45 4b10 	vmov	d0, r4, r5
 8006df4:	4653      	mov	r3, sl
 8006df6:	4632      	mov	r2, r6
 8006df8:	f001 ff06 	bl	8008c08 <_dtoa_r>
 8006dfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e00:	4607      	mov	r7, r0
 8006e02:	d102      	bne.n	8006e0a <__cvt+0x66>
 8006e04:	f019 0f01 	tst.w	r9, #1
 8006e08:	d022      	beq.n	8006e50 <__cvt+0xac>
 8006e0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e0e:	eb07 0906 	add.w	r9, r7, r6
 8006e12:	d110      	bne.n	8006e36 <__cvt+0x92>
 8006e14:	783b      	ldrb	r3, [r7, #0]
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	d10a      	bne.n	8006e30 <__cvt+0x8c>
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	4620      	mov	r0, r4
 8006e20:	4629      	mov	r1, r5
 8006e22:	f7f9 fe51 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e26:	b918      	cbnz	r0, 8006e30 <__cvt+0x8c>
 8006e28:	f1c6 0601 	rsb	r6, r6, #1
 8006e2c:	f8ca 6000 	str.w	r6, [sl]
 8006e30:	f8da 3000 	ldr.w	r3, [sl]
 8006e34:	4499      	add	r9, r3
 8006e36:	2200      	movs	r2, #0
 8006e38:	2300      	movs	r3, #0
 8006e3a:	4620      	mov	r0, r4
 8006e3c:	4629      	mov	r1, r5
 8006e3e:	f7f9 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e42:	b108      	cbz	r0, 8006e48 <__cvt+0xa4>
 8006e44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006e48:	2230      	movs	r2, #48	; 0x30
 8006e4a:	9b03      	ldr	r3, [sp, #12]
 8006e4c:	454b      	cmp	r3, r9
 8006e4e:	d307      	bcc.n	8006e60 <__cvt+0xbc>
 8006e50:	9b03      	ldr	r3, [sp, #12]
 8006e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e54:	1bdb      	subs	r3, r3, r7
 8006e56:	4638      	mov	r0, r7
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	b004      	add	sp, #16
 8006e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	9103      	str	r1, [sp, #12]
 8006e64:	701a      	strb	r2, [r3, #0]
 8006e66:	e7f0      	b.n	8006e4a <__cvt+0xa6>

08006e68 <__exponent>:
 8006e68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	bfb8      	it	lt
 8006e70:	4249      	neglt	r1, r1
 8006e72:	f803 2b02 	strb.w	r2, [r3], #2
 8006e76:	bfb4      	ite	lt
 8006e78:	222d      	movlt	r2, #45	; 0x2d
 8006e7a:	222b      	movge	r2, #43	; 0x2b
 8006e7c:	2909      	cmp	r1, #9
 8006e7e:	7042      	strb	r2, [r0, #1]
 8006e80:	dd2a      	ble.n	8006ed8 <__exponent+0x70>
 8006e82:	f10d 0407 	add.w	r4, sp, #7
 8006e86:	46a4      	mov	ip, r4
 8006e88:	270a      	movs	r7, #10
 8006e8a:	46a6      	mov	lr, r4
 8006e8c:	460a      	mov	r2, r1
 8006e8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e92:	fb07 1516 	mls	r5, r7, r6, r1
 8006e96:	3530      	adds	r5, #48	; 0x30
 8006e98:	2a63      	cmp	r2, #99	; 0x63
 8006e9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006e9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	dcf1      	bgt.n	8006e8a <__exponent+0x22>
 8006ea6:	3130      	adds	r1, #48	; 0x30
 8006ea8:	f1ae 0502 	sub.w	r5, lr, #2
 8006eac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006eb0:	1c44      	adds	r4, r0, #1
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	4561      	cmp	r1, ip
 8006eb6:	d30a      	bcc.n	8006ece <__exponent+0x66>
 8006eb8:	f10d 0209 	add.w	r2, sp, #9
 8006ebc:	eba2 020e 	sub.w	r2, r2, lr
 8006ec0:	4565      	cmp	r5, ip
 8006ec2:	bf88      	it	hi
 8006ec4:	2200      	movhi	r2, #0
 8006ec6:	4413      	add	r3, r2
 8006ec8:	1a18      	subs	r0, r3, r0
 8006eca:	b003      	add	sp, #12
 8006ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ed2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ed6:	e7ed      	b.n	8006eb4 <__exponent+0x4c>
 8006ed8:	2330      	movs	r3, #48	; 0x30
 8006eda:	3130      	adds	r1, #48	; 0x30
 8006edc:	7083      	strb	r3, [r0, #2]
 8006ede:	70c1      	strb	r1, [r0, #3]
 8006ee0:	1d03      	adds	r3, r0, #4
 8006ee2:	e7f1      	b.n	8006ec8 <__exponent+0x60>

08006ee4 <_printf_float>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	ed2d 8b02 	vpush	{d8}
 8006eec:	b08d      	sub	sp, #52	; 0x34
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	4605      	mov	r5, r0
 8006efa:	f003 f999 	bl	800a230 <_localeconv_r>
 8006efe:	f8d0 a000 	ldr.w	sl, [r0]
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7f9 f964 	bl	80001d0 <strlen>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	9305      	str	r3, [sp, #20]
 8006f10:	f8d8 3000 	ldr.w	r3, [r8]
 8006f14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f18:	3307      	adds	r3, #7
 8006f1a:	f023 0307 	bic.w	r3, r3, #7
 8006f1e:	f103 0208 	add.w	r2, r3, #8
 8006f22:	f8c8 2000 	str.w	r2, [r8]
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006f32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f36:	9307      	str	r3, [sp, #28]
 8006f38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f3c:	ee08 0a10 	vmov	s16, r0
 8006f40:	4b9f      	ldr	r3, [pc, #636]	; (80071c0 <_printf_float+0x2dc>)
 8006f42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f46:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4a:	f7f9 fdef 	bl	8000b2c <__aeabi_dcmpun>
 8006f4e:	bb88      	cbnz	r0, 8006fb4 <_printf_float+0xd0>
 8006f50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006f54:	4b9a      	ldr	r3, [pc, #616]	; (80071c0 <_printf_float+0x2dc>)
 8006f56:	f04f 32ff 	mov.w	r2, #4294967295
 8006f5a:	f7f9 fdc9 	bl	8000af0 <__aeabi_dcmple>
 8006f5e:	bb48      	cbnz	r0, 8006fb4 <_printf_float+0xd0>
 8006f60:	2200      	movs	r2, #0
 8006f62:	2300      	movs	r3, #0
 8006f64:	4640      	mov	r0, r8
 8006f66:	4649      	mov	r1, r9
 8006f68:	f7f9 fdb8 	bl	8000adc <__aeabi_dcmplt>
 8006f6c:	b110      	cbz	r0, 8006f74 <_printf_float+0x90>
 8006f6e:	232d      	movs	r3, #45	; 0x2d
 8006f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f74:	4b93      	ldr	r3, [pc, #588]	; (80071c4 <_printf_float+0x2e0>)
 8006f76:	4894      	ldr	r0, [pc, #592]	; (80071c8 <_printf_float+0x2e4>)
 8006f78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006f7c:	bf94      	ite	ls
 8006f7e:	4698      	movls	r8, r3
 8006f80:	4680      	movhi	r8, r0
 8006f82:	2303      	movs	r3, #3
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	9b05      	ldr	r3, [sp, #20]
 8006f88:	f023 0204 	bic.w	r2, r3, #4
 8006f8c:	6022      	str	r2, [r4, #0]
 8006f8e:	f04f 0900 	mov.w	r9, #0
 8006f92:	9700      	str	r7, [sp, #0]
 8006f94:	4633      	mov	r3, r6
 8006f96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006f98:	4621      	mov	r1, r4
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f000 f9d8 	bl	8007350 <_printf_common>
 8006fa0:	3001      	adds	r0, #1
 8006fa2:	f040 8090 	bne.w	80070c6 <_printf_float+0x1e2>
 8006fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8006faa:	b00d      	add	sp, #52	; 0x34
 8006fac:	ecbd 8b02 	vpop	{d8}
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fdb6 	bl	8000b2c <__aeabi_dcmpun>
 8006fc0:	b140      	cbz	r0, 8006fd4 <_printf_float+0xf0>
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	bfbc      	itt	lt
 8006fc8:	232d      	movlt	r3, #45	; 0x2d
 8006fca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fce:	487f      	ldr	r0, [pc, #508]	; (80071cc <_printf_float+0x2e8>)
 8006fd0:	4b7f      	ldr	r3, [pc, #508]	; (80071d0 <_printf_float+0x2ec>)
 8006fd2:	e7d1      	b.n	8006f78 <_printf_float+0x94>
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006fda:	9206      	str	r2, [sp, #24]
 8006fdc:	1c5a      	adds	r2, r3, #1
 8006fde:	d13f      	bne.n	8007060 <_printf_float+0x17c>
 8006fe0:	2306      	movs	r3, #6
 8006fe2:	6063      	str	r3, [r4, #4]
 8006fe4:	9b05      	ldr	r3, [sp, #20]
 8006fe6:	6861      	ldr	r1, [r4, #4]
 8006fe8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006fec:	2300      	movs	r3, #0
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ff2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ff6:	ab09      	add	r3, sp, #36	; 0x24
 8006ff8:	ec49 8b10 	vmov	d0, r8, r9
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	6022      	str	r2, [r4, #0]
 8007000:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007004:	4628      	mov	r0, r5
 8007006:	f7ff fecd 	bl	8006da4 <__cvt>
 800700a:	9b06      	ldr	r3, [sp, #24]
 800700c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700e:	2b47      	cmp	r3, #71	; 0x47
 8007010:	4680      	mov	r8, r0
 8007012:	d108      	bne.n	8007026 <_printf_float+0x142>
 8007014:	1cc8      	adds	r0, r1, #3
 8007016:	db02      	blt.n	800701e <_printf_float+0x13a>
 8007018:	6863      	ldr	r3, [r4, #4]
 800701a:	4299      	cmp	r1, r3
 800701c:	dd41      	ble.n	80070a2 <_printf_float+0x1be>
 800701e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007022:	fa5f fb8b 	uxtb.w	fp, fp
 8007026:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800702a:	d820      	bhi.n	800706e <_printf_float+0x18a>
 800702c:	3901      	subs	r1, #1
 800702e:	465a      	mov	r2, fp
 8007030:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007034:	9109      	str	r1, [sp, #36]	; 0x24
 8007036:	f7ff ff17 	bl	8006e68 <__exponent>
 800703a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800703c:	1813      	adds	r3, r2, r0
 800703e:	2a01      	cmp	r2, #1
 8007040:	4681      	mov	r9, r0
 8007042:	6123      	str	r3, [r4, #16]
 8007044:	dc02      	bgt.n	800704c <_printf_float+0x168>
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	07d2      	lsls	r2, r2, #31
 800704a:	d501      	bpl.n	8007050 <_printf_float+0x16c>
 800704c:	3301      	adds	r3, #1
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007054:	2b00      	cmp	r3, #0
 8007056:	d09c      	beq.n	8006f92 <_printf_float+0xae>
 8007058:	232d      	movs	r3, #45	; 0x2d
 800705a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800705e:	e798      	b.n	8006f92 <_printf_float+0xae>
 8007060:	9a06      	ldr	r2, [sp, #24]
 8007062:	2a47      	cmp	r2, #71	; 0x47
 8007064:	d1be      	bne.n	8006fe4 <_printf_float+0x100>
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1bc      	bne.n	8006fe4 <_printf_float+0x100>
 800706a:	2301      	movs	r3, #1
 800706c:	e7b9      	b.n	8006fe2 <_printf_float+0xfe>
 800706e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007072:	d118      	bne.n	80070a6 <_printf_float+0x1c2>
 8007074:	2900      	cmp	r1, #0
 8007076:	6863      	ldr	r3, [r4, #4]
 8007078:	dd0b      	ble.n	8007092 <_printf_float+0x1ae>
 800707a:	6121      	str	r1, [r4, #16]
 800707c:	b913      	cbnz	r3, 8007084 <_printf_float+0x1a0>
 800707e:	6822      	ldr	r2, [r4, #0]
 8007080:	07d0      	lsls	r0, r2, #31
 8007082:	d502      	bpl.n	800708a <_printf_float+0x1a6>
 8007084:	3301      	adds	r3, #1
 8007086:	440b      	add	r3, r1
 8007088:	6123      	str	r3, [r4, #16]
 800708a:	65a1      	str	r1, [r4, #88]	; 0x58
 800708c:	f04f 0900 	mov.w	r9, #0
 8007090:	e7de      	b.n	8007050 <_printf_float+0x16c>
 8007092:	b913      	cbnz	r3, 800709a <_printf_float+0x1b6>
 8007094:	6822      	ldr	r2, [r4, #0]
 8007096:	07d2      	lsls	r2, r2, #31
 8007098:	d501      	bpl.n	800709e <_printf_float+0x1ba>
 800709a:	3302      	adds	r3, #2
 800709c:	e7f4      	b.n	8007088 <_printf_float+0x1a4>
 800709e:	2301      	movs	r3, #1
 80070a0:	e7f2      	b.n	8007088 <_printf_float+0x1a4>
 80070a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80070a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a8:	4299      	cmp	r1, r3
 80070aa:	db05      	blt.n	80070b8 <_printf_float+0x1d4>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	6121      	str	r1, [r4, #16]
 80070b0:	07d8      	lsls	r0, r3, #31
 80070b2:	d5ea      	bpl.n	800708a <_printf_float+0x1a6>
 80070b4:	1c4b      	adds	r3, r1, #1
 80070b6:	e7e7      	b.n	8007088 <_printf_float+0x1a4>
 80070b8:	2900      	cmp	r1, #0
 80070ba:	bfd4      	ite	le
 80070bc:	f1c1 0202 	rsble	r2, r1, #2
 80070c0:	2201      	movgt	r2, #1
 80070c2:	4413      	add	r3, r2
 80070c4:	e7e0      	b.n	8007088 <_printf_float+0x1a4>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	055a      	lsls	r2, r3, #21
 80070ca:	d407      	bmi.n	80070dc <_printf_float+0x1f8>
 80070cc:	6923      	ldr	r3, [r4, #16]
 80070ce:	4642      	mov	r2, r8
 80070d0:	4631      	mov	r1, r6
 80070d2:	4628      	mov	r0, r5
 80070d4:	47b8      	blx	r7
 80070d6:	3001      	adds	r0, #1
 80070d8:	d12c      	bne.n	8007134 <_printf_float+0x250>
 80070da:	e764      	b.n	8006fa6 <_printf_float+0xc2>
 80070dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80070e0:	f240 80e0 	bls.w	80072a4 <_printf_float+0x3c0>
 80070e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e8:	2200      	movs	r2, #0
 80070ea:	2300      	movs	r3, #0
 80070ec:	f7f9 fcec 	bl	8000ac8 <__aeabi_dcmpeq>
 80070f0:	2800      	cmp	r0, #0
 80070f2:	d034      	beq.n	800715e <_printf_float+0x27a>
 80070f4:	4a37      	ldr	r2, [pc, #220]	; (80071d4 <_printf_float+0x2f0>)
 80070f6:	2301      	movs	r3, #1
 80070f8:	4631      	mov	r1, r6
 80070fa:	4628      	mov	r0, r5
 80070fc:	47b8      	blx	r7
 80070fe:	3001      	adds	r0, #1
 8007100:	f43f af51 	beq.w	8006fa6 <_printf_float+0xc2>
 8007104:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007108:	429a      	cmp	r2, r3
 800710a:	db02      	blt.n	8007112 <_printf_float+0x22e>
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	07d8      	lsls	r0, r3, #31
 8007110:	d510      	bpl.n	8007134 <_printf_float+0x250>
 8007112:	ee18 3a10 	vmov	r3, s16
 8007116:	4652      	mov	r2, sl
 8007118:	4631      	mov	r1, r6
 800711a:	4628      	mov	r0, r5
 800711c:	47b8      	blx	r7
 800711e:	3001      	adds	r0, #1
 8007120:	f43f af41 	beq.w	8006fa6 <_printf_float+0xc2>
 8007124:	f04f 0800 	mov.w	r8, #0
 8007128:	f104 091a 	add.w	r9, r4, #26
 800712c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	4543      	cmp	r3, r8
 8007132:	dc09      	bgt.n	8007148 <_printf_float+0x264>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	079b      	lsls	r3, r3, #30
 8007138:	f100 8105 	bmi.w	8007346 <_printf_float+0x462>
 800713c:	68e0      	ldr	r0, [r4, #12]
 800713e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007140:	4298      	cmp	r0, r3
 8007142:	bfb8      	it	lt
 8007144:	4618      	movlt	r0, r3
 8007146:	e730      	b.n	8006faa <_printf_float+0xc6>
 8007148:	2301      	movs	r3, #1
 800714a:	464a      	mov	r2, r9
 800714c:	4631      	mov	r1, r6
 800714e:	4628      	mov	r0, r5
 8007150:	47b8      	blx	r7
 8007152:	3001      	adds	r0, #1
 8007154:	f43f af27 	beq.w	8006fa6 <_printf_float+0xc2>
 8007158:	f108 0801 	add.w	r8, r8, #1
 800715c:	e7e6      	b.n	800712c <_printf_float+0x248>
 800715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007160:	2b00      	cmp	r3, #0
 8007162:	dc39      	bgt.n	80071d8 <_printf_float+0x2f4>
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <_printf_float+0x2f0>)
 8007166:	2301      	movs	r3, #1
 8007168:	4631      	mov	r1, r6
 800716a:	4628      	mov	r0, r5
 800716c:	47b8      	blx	r7
 800716e:	3001      	adds	r0, #1
 8007170:	f43f af19 	beq.w	8006fa6 <_printf_float+0xc2>
 8007174:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007178:	4313      	orrs	r3, r2
 800717a:	d102      	bne.n	8007182 <_printf_float+0x29e>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	07d9      	lsls	r1, r3, #31
 8007180:	d5d8      	bpl.n	8007134 <_printf_float+0x250>
 8007182:	ee18 3a10 	vmov	r3, s16
 8007186:	4652      	mov	r2, sl
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	47b8      	blx	r7
 800718e:	3001      	adds	r0, #1
 8007190:	f43f af09 	beq.w	8006fa6 <_printf_float+0xc2>
 8007194:	f04f 0900 	mov.w	r9, #0
 8007198:	f104 0a1a 	add.w	sl, r4, #26
 800719c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719e:	425b      	negs	r3, r3
 80071a0:	454b      	cmp	r3, r9
 80071a2:	dc01      	bgt.n	80071a8 <_printf_float+0x2c4>
 80071a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a6:	e792      	b.n	80070ce <_printf_float+0x1ea>
 80071a8:	2301      	movs	r3, #1
 80071aa:	4652      	mov	r2, sl
 80071ac:	4631      	mov	r1, r6
 80071ae:	4628      	mov	r0, r5
 80071b0:	47b8      	blx	r7
 80071b2:	3001      	adds	r0, #1
 80071b4:	f43f aef7 	beq.w	8006fa6 <_printf_float+0xc2>
 80071b8:	f109 0901 	add.w	r9, r9, #1
 80071bc:	e7ee      	b.n	800719c <_printf_float+0x2b8>
 80071be:	bf00      	nop
 80071c0:	7fefffff 	.word	0x7fefffff
 80071c4:	0800b8b8 	.word	0x0800b8b8
 80071c8:	0800b8bc 	.word	0x0800b8bc
 80071cc:	0800b8c4 	.word	0x0800b8c4
 80071d0:	0800b8c0 	.word	0x0800b8c0
 80071d4:	0800b8c8 	.word	0x0800b8c8
 80071d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071dc:	429a      	cmp	r2, r3
 80071de:	bfa8      	it	ge
 80071e0:	461a      	movge	r2, r3
 80071e2:	2a00      	cmp	r2, #0
 80071e4:	4691      	mov	r9, r2
 80071e6:	dc37      	bgt.n	8007258 <_printf_float+0x374>
 80071e8:	f04f 0b00 	mov.w	fp, #0
 80071ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071f0:	f104 021a 	add.w	r2, r4, #26
 80071f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071f6:	9305      	str	r3, [sp, #20]
 80071f8:	eba3 0309 	sub.w	r3, r3, r9
 80071fc:	455b      	cmp	r3, fp
 80071fe:	dc33      	bgt.n	8007268 <_printf_float+0x384>
 8007200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007204:	429a      	cmp	r2, r3
 8007206:	db3b      	blt.n	8007280 <_printf_float+0x39c>
 8007208:	6823      	ldr	r3, [r4, #0]
 800720a:	07da      	lsls	r2, r3, #31
 800720c:	d438      	bmi.n	8007280 <_printf_float+0x39c>
 800720e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007210:	9a05      	ldr	r2, [sp, #20]
 8007212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007214:	1a9a      	subs	r2, r3, r2
 8007216:	eba3 0901 	sub.w	r9, r3, r1
 800721a:	4591      	cmp	r9, r2
 800721c:	bfa8      	it	ge
 800721e:	4691      	movge	r9, r2
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	dc35      	bgt.n	8007292 <_printf_float+0x3ae>
 8007226:	f04f 0800 	mov.w	r8, #0
 800722a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800722e:	f104 0a1a 	add.w	sl, r4, #26
 8007232:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007236:	1a9b      	subs	r3, r3, r2
 8007238:	eba3 0309 	sub.w	r3, r3, r9
 800723c:	4543      	cmp	r3, r8
 800723e:	f77f af79 	ble.w	8007134 <_printf_float+0x250>
 8007242:	2301      	movs	r3, #1
 8007244:	4652      	mov	r2, sl
 8007246:	4631      	mov	r1, r6
 8007248:	4628      	mov	r0, r5
 800724a:	47b8      	blx	r7
 800724c:	3001      	adds	r0, #1
 800724e:	f43f aeaa 	beq.w	8006fa6 <_printf_float+0xc2>
 8007252:	f108 0801 	add.w	r8, r8, #1
 8007256:	e7ec      	b.n	8007232 <_printf_float+0x34e>
 8007258:	4613      	mov	r3, r2
 800725a:	4631      	mov	r1, r6
 800725c:	4642      	mov	r2, r8
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	d1c0      	bne.n	80071e8 <_printf_float+0x304>
 8007266:	e69e      	b.n	8006fa6 <_printf_float+0xc2>
 8007268:	2301      	movs	r3, #1
 800726a:	4631      	mov	r1, r6
 800726c:	4628      	mov	r0, r5
 800726e:	9205      	str	r2, [sp, #20]
 8007270:	47b8      	blx	r7
 8007272:	3001      	adds	r0, #1
 8007274:	f43f ae97 	beq.w	8006fa6 <_printf_float+0xc2>
 8007278:	9a05      	ldr	r2, [sp, #20]
 800727a:	f10b 0b01 	add.w	fp, fp, #1
 800727e:	e7b9      	b.n	80071f4 <_printf_float+0x310>
 8007280:	ee18 3a10 	vmov	r3, s16
 8007284:	4652      	mov	r2, sl
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	47b8      	blx	r7
 800728c:	3001      	adds	r0, #1
 800728e:	d1be      	bne.n	800720e <_printf_float+0x32a>
 8007290:	e689      	b.n	8006fa6 <_printf_float+0xc2>
 8007292:	9a05      	ldr	r2, [sp, #20]
 8007294:	464b      	mov	r3, r9
 8007296:	4442      	add	r2, r8
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	d1c1      	bne.n	8007226 <_printf_float+0x342>
 80072a2:	e680      	b.n	8006fa6 <_printf_float+0xc2>
 80072a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072a6:	2a01      	cmp	r2, #1
 80072a8:	dc01      	bgt.n	80072ae <_printf_float+0x3ca>
 80072aa:	07db      	lsls	r3, r3, #31
 80072ac:	d538      	bpl.n	8007320 <_printf_float+0x43c>
 80072ae:	2301      	movs	r3, #1
 80072b0:	4642      	mov	r2, r8
 80072b2:	4631      	mov	r1, r6
 80072b4:	4628      	mov	r0, r5
 80072b6:	47b8      	blx	r7
 80072b8:	3001      	adds	r0, #1
 80072ba:	f43f ae74 	beq.w	8006fa6 <_printf_float+0xc2>
 80072be:	ee18 3a10 	vmov	r3, s16
 80072c2:	4652      	mov	r2, sl
 80072c4:	4631      	mov	r1, r6
 80072c6:	4628      	mov	r0, r5
 80072c8:	47b8      	blx	r7
 80072ca:	3001      	adds	r0, #1
 80072cc:	f43f ae6b 	beq.w	8006fa6 <_printf_float+0xc2>
 80072d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072d4:	2200      	movs	r2, #0
 80072d6:	2300      	movs	r3, #0
 80072d8:	f7f9 fbf6 	bl	8000ac8 <__aeabi_dcmpeq>
 80072dc:	b9d8      	cbnz	r0, 8007316 <_printf_float+0x432>
 80072de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072e0:	f108 0201 	add.w	r2, r8, #1
 80072e4:	3b01      	subs	r3, #1
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	d10e      	bne.n	800730e <_printf_float+0x42a>
 80072f0:	e659      	b.n	8006fa6 <_printf_float+0xc2>
 80072f2:	2301      	movs	r3, #1
 80072f4:	4652      	mov	r2, sl
 80072f6:	4631      	mov	r1, r6
 80072f8:	4628      	mov	r0, r5
 80072fa:	47b8      	blx	r7
 80072fc:	3001      	adds	r0, #1
 80072fe:	f43f ae52 	beq.w	8006fa6 <_printf_float+0xc2>
 8007302:	f108 0801 	add.w	r8, r8, #1
 8007306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007308:	3b01      	subs	r3, #1
 800730a:	4543      	cmp	r3, r8
 800730c:	dcf1      	bgt.n	80072f2 <_printf_float+0x40e>
 800730e:	464b      	mov	r3, r9
 8007310:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007314:	e6dc      	b.n	80070d0 <_printf_float+0x1ec>
 8007316:	f04f 0800 	mov.w	r8, #0
 800731a:	f104 0a1a 	add.w	sl, r4, #26
 800731e:	e7f2      	b.n	8007306 <_printf_float+0x422>
 8007320:	2301      	movs	r3, #1
 8007322:	4642      	mov	r2, r8
 8007324:	e7df      	b.n	80072e6 <_printf_float+0x402>
 8007326:	2301      	movs	r3, #1
 8007328:	464a      	mov	r2, r9
 800732a:	4631      	mov	r1, r6
 800732c:	4628      	mov	r0, r5
 800732e:	47b8      	blx	r7
 8007330:	3001      	adds	r0, #1
 8007332:	f43f ae38 	beq.w	8006fa6 <_printf_float+0xc2>
 8007336:	f108 0801 	add.w	r8, r8, #1
 800733a:	68e3      	ldr	r3, [r4, #12]
 800733c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800733e:	1a5b      	subs	r3, r3, r1
 8007340:	4543      	cmp	r3, r8
 8007342:	dcf0      	bgt.n	8007326 <_printf_float+0x442>
 8007344:	e6fa      	b.n	800713c <_printf_float+0x258>
 8007346:	f04f 0800 	mov.w	r8, #0
 800734a:	f104 0919 	add.w	r9, r4, #25
 800734e:	e7f4      	b.n	800733a <_printf_float+0x456>

08007350 <_printf_common>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	4616      	mov	r6, r2
 8007356:	4699      	mov	r9, r3
 8007358:	688a      	ldr	r2, [r1, #8]
 800735a:	690b      	ldr	r3, [r1, #16]
 800735c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007360:	4293      	cmp	r3, r2
 8007362:	bfb8      	it	lt
 8007364:	4613      	movlt	r3, r2
 8007366:	6033      	str	r3, [r6, #0]
 8007368:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800736c:	4607      	mov	r7, r0
 800736e:	460c      	mov	r4, r1
 8007370:	b10a      	cbz	r2, 8007376 <_printf_common+0x26>
 8007372:	3301      	adds	r3, #1
 8007374:	6033      	str	r3, [r6, #0]
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	0699      	lsls	r1, r3, #26
 800737a:	bf42      	ittt	mi
 800737c:	6833      	ldrmi	r3, [r6, #0]
 800737e:	3302      	addmi	r3, #2
 8007380:	6033      	strmi	r3, [r6, #0]
 8007382:	6825      	ldr	r5, [r4, #0]
 8007384:	f015 0506 	ands.w	r5, r5, #6
 8007388:	d106      	bne.n	8007398 <_printf_common+0x48>
 800738a:	f104 0a19 	add.w	sl, r4, #25
 800738e:	68e3      	ldr	r3, [r4, #12]
 8007390:	6832      	ldr	r2, [r6, #0]
 8007392:	1a9b      	subs	r3, r3, r2
 8007394:	42ab      	cmp	r3, r5
 8007396:	dc26      	bgt.n	80073e6 <_printf_common+0x96>
 8007398:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800739c:	1e13      	subs	r3, r2, #0
 800739e:	6822      	ldr	r2, [r4, #0]
 80073a0:	bf18      	it	ne
 80073a2:	2301      	movne	r3, #1
 80073a4:	0692      	lsls	r2, r2, #26
 80073a6:	d42b      	bmi.n	8007400 <_printf_common+0xb0>
 80073a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ac:	4649      	mov	r1, r9
 80073ae:	4638      	mov	r0, r7
 80073b0:	47c0      	blx	r8
 80073b2:	3001      	adds	r0, #1
 80073b4:	d01e      	beq.n	80073f4 <_printf_common+0xa4>
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	68e5      	ldr	r5, [r4, #12]
 80073ba:	6832      	ldr	r2, [r6, #0]
 80073bc:	f003 0306 	and.w	r3, r3, #6
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	bf08      	it	eq
 80073c4:	1aad      	subeq	r5, r5, r2
 80073c6:	68a3      	ldr	r3, [r4, #8]
 80073c8:	6922      	ldr	r2, [r4, #16]
 80073ca:	bf0c      	ite	eq
 80073cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073d0:	2500      	movne	r5, #0
 80073d2:	4293      	cmp	r3, r2
 80073d4:	bfc4      	itt	gt
 80073d6:	1a9b      	subgt	r3, r3, r2
 80073d8:	18ed      	addgt	r5, r5, r3
 80073da:	2600      	movs	r6, #0
 80073dc:	341a      	adds	r4, #26
 80073de:	42b5      	cmp	r5, r6
 80073e0:	d11a      	bne.n	8007418 <_printf_common+0xc8>
 80073e2:	2000      	movs	r0, #0
 80073e4:	e008      	b.n	80073f8 <_printf_common+0xa8>
 80073e6:	2301      	movs	r3, #1
 80073e8:	4652      	mov	r2, sl
 80073ea:	4649      	mov	r1, r9
 80073ec:	4638      	mov	r0, r7
 80073ee:	47c0      	blx	r8
 80073f0:	3001      	adds	r0, #1
 80073f2:	d103      	bne.n	80073fc <_printf_common+0xac>
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fc:	3501      	adds	r5, #1
 80073fe:	e7c6      	b.n	800738e <_printf_common+0x3e>
 8007400:	18e1      	adds	r1, r4, r3
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	2030      	movs	r0, #48	; 0x30
 8007406:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800740a:	4422      	add	r2, r4
 800740c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007410:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007414:	3302      	adds	r3, #2
 8007416:	e7c7      	b.n	80073a8 <_printf_common+0x58>
 8007418:	2301      	movs	r3, #1
 800741a:	4622      	mov	r2, r4
 800741c:	4649      	mov	r1, r9
 800741e:	4638      	mov	r0, r7
 8007420:	47c0      	blx	r8
 8007422:	3001      	adds	r0, #1
 8007424:	d0e6      	beq.n	80073f4 <_printf_common+0xa4>
 8007426:	3601      	adds	r6, #1
 8007428:	e7d9      	b.n	80073de <_printf_common+0x8e>
	...

0800742c <_printf_i>:
 800742c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007430:	7e0f      	ldrb	r7, [r1, #24]
 8007432:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007434:	2f78      	cmp	r7, #120	; 0x78
 8007436:	4691      	mov	r9, r2
 8007438:	4680      	mov	r8, r0
 800743a:	460c      	mov	r4, r1
 800743c:	469a      	mov	sl, r3
 800743e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007442:	d807      	bhi.n	8007454 <_printf_i+0x28>
 8007444:	2f62      	cmp	r7, #98	; 0x62
 8007446:	d80a      	bhi.n	800745e <_printf_i+0x32>
 8007448:	2f00      	cmp	r7, #0
 800744a:	f000 80d8 	beq.w	80075fe <_printf_i+0x1d2>
 800744e:	2f58      	cmp	r7, #88	; 0x58
 8007450:	f000 80a3 	beq.w	800759a <_printf_i+0x16e>
 8007454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007458:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800745c:	e03a      	b.n	80074d4 <_printf_i+0xa8>
 800745e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007462:	2b15      	cmp	r3, #21
 8007464:	d8f6      	bhi.n	8007454 <_printf_i+0x28>
 8007466:	a101      	add	r1, pc, #4	; (adr r1, 800746c <_printf_i+0x40>)
 8007468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800746c:	080074c5 	.word	0x080074c5
 8007470:	080074d9 	.word	0x080074d9
 8007474:	08007455 	.word	0x08007455
 8007478:	08007455 	.word	0x08007455
 800747c:	08007455 	.word	0x08007455
 8007480:	08007455 	.word	0x08007455
 8007484:	080074d9 	.word	0x080074d9
 8007488:	08007455 	.word	0x08007455
 800748c:	08007455 	.word	0x08007455
 8007490:	08007455 	.word	0x08007455
 8007494:	08007455 	.word	0x08007455
 8007498:	080075e5 	.word	0x080075e5
 800749c:	08007509 	.word	0x08007509
 80074a0:	080075c7 	.word	0x080075c7
 80074a4:	08007455 	.word	0x08007455
 80074a8:	08007455 	.word	0x08007455
 80074ac:	08007607 	.word	0x08007607
 80074b0:	08007455 	.word	0x08007455
 80074b4:	08007509 	.word	0x08007509
 80074b8:	08007455 	.word	0x08007455
 80074bc:	08007455 	.word	0x08007455
 80074c0:	080075cf 	.word	0x080075cf
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	602a      	str	r2, [r5, #0]
 80074cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074d4:	2301      	movs	r3, #1
 80074d6:	e0a3      	b.n	8007620 <_printf_i+0x1f4>
 80074d8:	6820      	ldr	r0, [r4, #0]
 80074da:	6829      	ldr	r1, [r5, #0]
 80074dc:	0606      	lsls	r6, r0, #24
 80074de:	f101 0304 	add.w	r3, r1, #4
 80074e2:	d50a      	bpl.n	80074fa <_printf_i+0xce>
 80074e4:	680e      	ldr	r6, [r1, #0]
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	2e00      	cmp	r6, #0
 80074ea:	da03      	bge.n	80074f4 <_printf_i+0xc8>
 80074ec:	232d      	movs	r3, #45	; 0x2d
 80074ee:	4276      	negs	r6, r6
 80074f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074f4:	485e      	ldr	r0, [pc, #376]	; (8007670 <_printf_i+0x244>)
 80074f6:	230a      	movs	r3, #10
 80074f8:	e019      	b.n	800752e <_printf_i+0x102>
 80074fa:	680e      	ldr	r6, [r1, #0]
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007502:	bf18      	it	ne
 8007504:	b236      	sxthne	r6, r6
 8007506:	e7ef      	b.n	80074e8 <_printf_i+0xbc>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	6820      	ldr	r0, [r4, #0]
 800750c:	1d19      	adds	r1, r3, #4
 800750e:	6029      	str	r1, [r5, #0]
 8007510:	0601      	lsls	r1, r0, #24
 8007512:	d501      	bpl.n	8007518 <_printf_i+0xec>
 8007514:	681e      	ldr	r6, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0xf2>
 8007518:	0646      	lsls	r6, r0, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0xe8>
 800751c:	881e      	ldrh	r6, [r3, #0]
 800751e:	4854      	ldr	r0, [pc, #336]	; (8007670 <_printf_i+0x244>)
 8007520:	2f6f      	cmp	r7, #111	; 0x6f
 8007522:	bf0c      	ite	eq
 8007524:	2308      	moveq	r3, #8
 8007526:	230a      	movne	r3, #10
 8007528:	2100      	movs	r1, #0
 800752a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800752e:	6865      	ldr	r5, [r4, #4]
 8007530:	60a5      	str	r5, [r4, #8]
 8007532:	2d00      	cmp	r5, #0
 8007534:	bfa2      	ittt	ge
 8007536:	6821      	ldrge	r1, [r4, #0]
 8007538:	f021 0104 	bicge.w	r1, r1, #4
 800753c:	6021      	strge	r1, [r4, #0]
 800753e:	b90e      	cbnz	r6, 8007544 <_printf_i+0x118>
 8007540:	2d00      	cmp	r5, #0
 8007542:	d04d      	beq.n	80075e0 <_printf_i+0x1b4>
 8007544:	4615      	mov	r5, r2
 8007546:	fbb6 f1f3 	udiv	r1, r6, r3
 800754a:	fb03 6711 	mls	r7, r3, r1, r6
 800754e:	5dc7      	ldrb	r7, [r0, r7]
 8007550:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007554:	4637      	mov	r7, r6
 8007556:	42bb      	cmp	r3, r7
 8007558:	460e      	mov	r6, r1
 800755a:	d9f4      	bls.n	8007546 <_printf_i+0x11a>
 800755c:	2b08      	cmp	r3, #8
 800755e:	d10b      	bne.n	8007578 <_printf_i+0x14c>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	07de      	lsls	r6, r3, #31
 8007564:	d508      	bpl.n	8007578 <_printf_i+0x14c>
 8007566:	6923      	ldr	r3, [r4, #16]
 8007568:	6861      	ldr	r1, [r4, #4]
 800756a:	4299      	cmp	r1, r3
 800756c:	bfde      	ittt	le
 800756e:	2330      	movle	r3, #48	; 0x30
 8007570:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007574:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007578:	1b52      	subs	r2, r2, r5
 800757a:	6122      	str	r2, [r4, #16]
 800757c:	f8cd a000 	str.w	sl, [sp]
 8007580:	464b      	mov	r3, r9
 8007582:	aa03      	add	r2, sp, #12
 8007584:	4621      	mov	r1, r4
 8007586:	4640      	mov	r0, r8
 8007588:	f7ff fee2 	bl	8007350 <_printf_common>
 800758c:	3001      	adds	r0, #1
 800758e:	d14c      	bne.n	800762a <_printf_i+0x1fe>
 8007590:	f04f 30ff 	mov.w	r0, #4294967295
 8007594:	b004      	add	sp, #16
 8007596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759a:	4835      	ldr	r0, [pc, #212]	; (8007670 <_printf_i+0x244>)
 800759c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075a0:	6829      	ldr	r1, [r5, #0]
 80075a2:	6823      	ldr	r3, [r4, #0]
 80075a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80075a8:	6029      	str	r1, [r5, #0]
 80075aa:	061d      	lsls	r5, r3, #24
 80075ac:	d514      	bpl.n	80075d8 <_printf_i+0x1ac>
 80075ae:	07df      	lsls	r7, r3, #31
 80075b0:	bf44      	itt	mi
 80075b2:	f043 0320 	orrmi.w	r3, r3, #32
 80075b6:	6023      	strmi	r3, [r4, #0]
 80075b8:	b91e      	cbnz	r6, 80075c2 <_printf_i+0x196>
 80075ba:	6823      	ldr	r3, [r4, #0]
 80075bc:	f023 0320 	bic.w	r3, r3, #32
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	2310      	movs	r3, #16
 80075c4:	e7b0      	b.n	8007528 <_printf_i+0xfc>
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	f043 0320 	orr.w	r3, r3, #32
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	2378      	movs	r3, #120	; 0x78
 80075d0:	4828      	ldr	r0, [pc, #160]	; (8007674 <_printf_i+0x248>)
 80075d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075d6:	e7e3      	b.n	80075a0 <_printf_i+0x174>
 80075d8:	0659      	lsls	r1, r3, #25
 80075da:	bf48      	it	mi
 80075dc:	b2b6      	uxthmi	r6, r6
 80075de:	e7e6      	b.n	80075ae <_printf_i+0x182>
 80075e0:	4615      	mov	r5, r2
 80075e2:	e7bb      	b.n	800755c <_printf_i+0x130>
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6826      	ldr	r6, [r4, #0]
 80075e8:	6961      	ldr	r1, [r4, #20]
 80075ea:	1d18      	adds	r0, r3, #4
 80075ec:	6028      	str	r0, [r5, #0]
 80075ee:	0635      	lsls	r5, r6, #24
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	d501      	bpl.n	80075f8 <_printf_i+0x1cc>
 80075f4:	6019      	str	r1, [r3, #0]
 80075f6:	e002      	b.n	80075fe <_printf_i+0x1d2>
 80075f8:	0670      	lsls	r0, r6, #25
 80075fa:	d5fb      	bpl.n	80075f4 <_printf_i+0x1c8>
 80075fc:	8019      	strh	r1, [r3, #0]
 80075fe:	2300      	movs	r3, #0
 8007600:	6123      	str	r3, [r4, #16]
 8007602:	4615      	mov	r5, r2
 8007604:	e7ba      	b.n	800757c <_printf_i+0x150>
 8007606:	682b      	ldr	r3, [r5, #0]
 8007608:	1d1a      	adds	r2, r3, #4
 800760a:	602a      	str	r2, [r5, #0]
 800760c:	681d      	ldr	r5, [r3, #0]
 800760e:	6862      	ldr	r2, [r4, #4]
 8007610:	2100      	movs	r1, #0
 8007612:	4628      	mov	r0, r5
 8007614:	f7f8 fde4 	bl	80001e0 <memchr>
 8007618:	b108      	cbz	r0, 800761e <_printf_i+0x1f2>
 800761a:	1b40      	subs	r0, r0, r5
 800761c:	6060      	str	r0, [r4, #4]
 800761e:	6863      	ldr	r3, [r4, #4]
 8007620:	6123      	str	r3, [r4, #16]
 8007622:	2300      	movs	r3, #0
 8007624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007628:	e7a8      	b.n	800757c <_printf_i+0x150>
 800762a:	6923      	ldr	r3, [r4, #16]
 800762c:	462a      	mov	r2, r5
 800762e:	4649      	mov	r1, r9
 8007630:	4640      	mov	r0, r8
 8007632:	47d0      	blx	sl
 8007634:	3001      	adds	r0, #1
 8007636:	d0ab      	beq.n	8007590 <_printf_i+0x164>
 8007638:	6823      	ldr	r3, [r4, #0]
 800763a:	079b      	lsls	r3, r3, #30
 800763c:	d413      	bmi.n	8007666 <_printf_i+0x23a>
 800763e:	68e0      	ldr	r0, [r4, #12]
 8007640:	9b03      	ldr	r3, [sp, #12]
 8007642:	4298      	cmp	r0, r3
 8007644:	bfb8      	it	lt
 8007646:	4618      	movlt	r0, r3
 8007648:	e7a4      	b.n	8007594 <_printf_i+0x168>
 800764a:	2301      	movs	r3, #1
 800764c:	4632      	mov	r2, r6
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	47d0      	blx	sl
 8007654:	3001      	adds	r0, #1
 8007656:	d09b      	beq.n	8007590 <_printf_i+0x164>
 8007658:	3501      	adds	r5, #1
 800765a:	68e3      	ldr	r3, [r4, #12]
 800765c:	9903      	ldr	r1, [sp, #12]
 800765e:	1a5b      	subs	r3, r3, r1
 8007660:	42ab      	cmp	r3, r5
 8007662:	dcf2      	bgt.n	800764a <_printf_i+0x21e>
 8007664:	e7eb      	b.n	800763e <_printf_i+0x212>
 8007666:	2500      	movs	r5, #0
 8007668:	f104 0619 	add.w	r6, r4, #25
 800766c:	e7f5      	b.n	800765a <_printf_i+0x22e>
 800766e:	bf00      	nop
 8007670:	0800b8ca 	.word	0x0800b8ca
 8007674:	0800b8db 	.word	0x0800b8db

08007678 <_scanf_float>:
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	b087      	sub	sp, #28
 800767e:	4617      	mov	r7, r2
 8007680:	9303      	str	r3, [sp, #12]
 8007682:	688b      	ldr	r3, [r1, #8]
 8007684:	1e5a      	subs	r2, r3, #1
 8007686:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800768a:	bf83      	ittte	hi
 800768c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007690:	195b      	addhi	r3, r3, r5
 8007692:	9302      	strhi	r3, [sp, #8]
 8007694:	2300      	movls	r3, #0
 8007696:	bf86      	itte	hi
 8007698:	f240 135d 	movwhi	r3, #349	; 0x15d
 800769c:	608b      	strhi	r3, [r1, #8]
 800769e:	9302      	strls	r3, [sp, #8]
 80076a0:	680b      	ldr	r3, [r1, #0]
 80076a2:	468b      	mov	fp, r1
 80076a4:	2500      	movs	r5, #0
 80076a6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80076aa:	f84b 3b1c 	str.w	r3, [fp], #28
 80076ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80076b2:	4680      	mov	r8, r0
 80076b4:	460c      	mov	r4, r1
 80076b6:	465e      	mov	r6, fp
 80076b8:	46aa      	mov	sl, r5
 80076ba:	46a9      	mov	r9, r5
 80076bc:	9501      	str	r5, [sp, #4]
 80076be:	68a2      	ldr	r2, [r4, #8]
 80076c0:	b152      	cbz	r2, 80076d8 <_scanf_float+0x60>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2b4e      	cmp	r3, #78	; 0x4e
 80076c8:	d864      	bhi.n	8007794 <_scanf_float+0x11c>
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d83c      	bhi.n	8007748 <_scanf_float+0xd0>
 80076ce:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80076d2:	b2c8      	uxtb	r0, r1
 80076d4:	280e      	cmp	r0, #14
 80076d6:	d93a      	bls.n	800774e <_scanf_float+0xd6>
 80076d8:	f1b9 0f00 	cmp.w	r9, #0
 80076dc:	d003      	beq.n	80076e6 <_scanf_float+0x6e>
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ea:	f1ba 0f01 	cmp.w	sl, #1
 80076ee:	f200 8113 	bhi.w	8007918 <_scanf_float+0x2a0>
 80076f2:	455e      	cmp	r6, fp
 80076f4:	f200 8105 	bhi.w	8007902 <_scanf_float+0x28a>
 80076f8:	2501      	movs	r5, #1
 80076fa:	4628      	mov	r0, r5
 80076fc:	b007      	add	sp, #28
 80076fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007702:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007706:	2a0d      	cmp	r2, #13
 8007708:	d8e6      	bhi.n	80076d8 <_scanf_float+0x60>
 800770a:	a101      	add	r1, pc, #4	; (adr r1, 8007710 <_scanf_float+0x98>)
 800770c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007710:	0800784f 	.word	0x0800784f
 8007714:	080076d9 	.word	0x080076d9
 8007718:	080076d9 	.word	0x080076d9
 800771c:	080076d9 	.word	0x080076d9
 8007720:	080078af 	.word	0x080078af
 8007724:	08007887 	.word	0x08007887
 8007728:	080076d9 	.word	0x080076d9
 800772c:	080076d9 	.word	0x080076d9
 8007730:	0800785d 	.word	0x0800785d
 8007734:	080076d9 	.word	0x080076d9
 8007738:	080076d9 	.word	0x080076d9
 800773c:	080076d9 	.word	0x080076d9
 8007740:	080076d9 	.word	0x080076d9
 8007744:	08007815 	.word	0x08007815
 8007748:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800774c:	e7db      	b.n	8007706 <_scanf_float+0x8e>
 800774e:	290e      	cmp	r1, #14
 8007750:	d8c2      	bhi.n	80076d8 <_scanf_float+0x60>
 8007752:	a001      	add	r0, pc, #4	; (adr r0, 8007758 <_scanf_float+0xe0>)
 8007754:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007758:	08007807 	.word	0x08007807
 800775c:	080076d9 	.word	0x080076d9
 8007760:	08007807 	.word	0x08007807
 8007764:	0800789b 	.word	0x0800789b
 8007768:	080076d9 	.word	0x080076d9
 800776c:	080077b5 	.word	0x080077b5
 8007770:	080077f1 	.word	0x080077f1
 8007774:	080077f1 	.word	0x080077f1
 8007778:	080077f1 	.word	0x080077f1
 800777c:	080077f1 	.word	0x080077f1
 8007780:	080077f1 	.word	0x080077f1
 8007784:	080077f1 	.word	0x080077f1
 8007788:	080077f1 	.word	0x080077f1
 800778c:	080077f1 	.word	0x080077f1
 8007790:	080077f1 	.word	0x080077f1
 8007794:	2b6e      	cmp	r3, #110	; 0x6e
 8007796:	d809      	bhi.n	80077ac <_scanf_float+0x134>
 8007798:	2b60      	cmp	r3, #96	; 0x60
 800779a:	d8b2      	bhi.n	8007702 <_scanf_float+0x8a>
 800779c:	2b54      	cmp	r3, #84	; 0x54
 800779e:	d077      	beq.n	8007890 <_scanf_float+0x218>
 80077a0:	2b59      	cmp	r3, #89	; 0x59
 80077a2:	d199      	bne.n	80076d8 <_scanf_float+0x60>
 80077a4:	2d07      	cmp	r5, #7
 80077a6:	d197      	bne.n	80076d8 <_scanf_float+0x60>
 80077a8:	2508      	movs	r5, #8
 80077aa:	e029      	b.n	8007800 <_scanf_float+0x188>
 80077ac:	2b74      	cmp	r3, #116	; 0x74
 80077ae:	d06f      	beq.n	8007890 <_scanf_float+0x218>
 80077b0:	2b79      	cmp	r3, #121	; 0x79
 80077b2:	e7f6      	b.n	80077a2 <_scanf_float+0x12a>
 80077b4:	6821      	ldr	r1, [r4, #0]
 80077b6:	05c8      	lsls	r0, r1, #23
 80077b8:	d51a      	bpl.n	80077f0 <_scanf_float+0x178>
 80077ba:	9b02      	ldr	r3, [sp, #8]
 80077bc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80077c0:	6021      	str	r1, [r4, #0]
 80077c2:	f109 0901 	add.w	r9, r9, #1
 80077c6:	b11b      	cbz	r3, 80077d0 <_scanf_float+0x158>
 80077c8:	3b01      	subs	r3, #1
 80077ca:	3201      	adds	r2, #1
 80077cc:	9302      	str	r3, [sp, #8]
 80077ce:	60a2      	str	r2, [r4, #8]
 80077d0:	68a3      	ldr	r3, [r4, #8]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	60a3      	str	r3, [r4, #8]
 80077d6:	6923      	ldr	r3, [r4, #16]
 80077d8:	3301      	adds	r3, #1
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	3b01      	subs	r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	607b      	str	r3, [r7, #4]
 80077e4:	f340 8084 	ble.w	80078f0 <_scanf_float+0x278>
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	e766      	b.n	80076be <_scanf_float+0x46>
 80077f0:	eb1a 0f05 	cmn.w	sl, r5
 80077f4:	f47f af70 	bne.w	80076d8 <_scanf_float+0x60>
 80077f8:	6822      	ldr	r2, [r4, #0]
 80077fa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80077fe:	6022      	str	r2, [r4, #0]
 8007800:	f806 3b01 	strb.w	r3, [r6], #1
 8007804:	e7e4      	b.n	80077d0 <_scanf_float+0x158>
 8007806:	6822      	ldr	r2, [r4, #0]
 8007808:	0610      	lsls	r0, r2, #24
 800780a:	f57f af65 	bpl.w	80076d8 <_scanf_float+0x60>
 800780e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007812:	e7f4      	b.n	80077fe <_scanf_float+0x186>
 8007814:	f1ba 0f00 	cmp.w	sl, #0
 8007818:	d10e      	bne.n	8007838 <_scanf_float+0x1c0>
 800781a:	f1b9 0f00 	cmp.w	r9, #0
 800781e:	d10e      	bne.n	800783e <_scanf_float+0x1c6>
 8007820:	6822      	ldr	r2, [r4, #0]
 8007822:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007826:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800782a:	d108      	bne.n	800783e <_scanf_float+0x1c6>
 800782c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007830:	6022      	str	r2, [r4, #0]
 8007832:	f04f 0a01 	mov.w	sl, #1
 8007836:	e7e3      	b.n	8007800 <_scanf_float+0x188>
 8007838:	f1ba 0f02 	cmp.w	sl, #2
 800783c:	d055      	beq.n	80078ea <_scanf_float+0x272>
 800783e:	2d01      	cmp	r5, #1
 8007840:	d002      	beq.n	8007848 <_scanf_float+0x1d0>
 8007842:	2d04      	cmp	r5, #4
 8007844:	f47f af48 	bne.w	80076d8 <_scanf_float+0x60>
 8007848:	3501      	adds	r5, #1
 800784a:	b2ed      	uxtb	r5, r5
 800784c:	e7d8      	b.n	8007800 <_scanf_float+0x188>
 800784e:	f1ba 0f01 	cmp.w	sl, #1
 8007852:	f47f af41 	bne.w	80076d8 <_scanf_float+0x60>
 8007856:	f04f 0a02 	mov.w	sl, #2
 800785a:	e7d1      	b.n	8007800 <_scanf_float+0x188>
 800785c:	b97d      	cbnz	r5, 800787e <_scanf_float+0x206>
 800785e:	f1b9 0f00 	cmp.w	r9, #0
 8007862:	f47f af3c 	bne.w	80076de <_scanf_float+0x66>
 8007866:	6822      	ldr	r2, [r4, #0]
 8007868:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800786c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007870:	f47f af39 	bne.w	80076e6 <_scanf_float+0x6e>
 8007874:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007878:	6022      	str	r2, [r4, #0]
 800787a:	2501      	movs	r5, #1
 800787c:	e7c0      	b.n	8007800 <_scanf_float+0x188>
 800787e:	2d03      	cmp	r5, #3
 8007880:	d0e2      	beq.n	8007848 <_scanf_float+0x1d0>
 8007882:	2d05      	cmp	r5, #5
 8007884:	e7de      	b.n	8007844 <_scanf_float+0x1cc>
 8007886:	2d02      	cmp	r5, #2
 8007888:	f47f af26 	bne.w	80076d8 <_scanf_float+0x60>
 800788c:	2503      	movs	r5, #3
 800788e:	e7b7      	b.n	8007800 <_scanf_float+0x188>
 8007890:	2d06      	cmp	r5, #6
 8007892:	f47f af21 	bne.w	80076d8 <_scanf_float+0x60>
 8007896:	2507      	movs	r5, #7
 8007898:	e7b2      	b.n	8007800 <_scanf_float+0x188>
 800789a:	6822      	ldr	r2, [r4, #0]
 800789c:	0591      	lsls	r1, r2, #22
 800789e:	f57f af1b 	bpl.w	80076d8 <_scanf_float+0x60>
 80078a2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80078a6:	6022      	str	r2, [r4, #0]
 80078a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80078ac:	e7a8      	b.n	8007800 <_scanf_float+0x188>
 80078ae:	6822      	ldr	r2, [r4, #0]
 80078b0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80078b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80078b8:	d006      	beq.n	80078c8 <_scanf_float+0x250>
 80078ba:	0550      	lsls	r0, r2, #21
 80078bc:	f57f af0c 	bpl.w	80076d8 <_scanf_float+0x60>
 80078c0:	f1b9 0f00 	cmp.w	r9, #0
 80078c4:	f43f af0f 	beq.w	80076e6 <_scanf_float+0x6e>
 80078c8:	0591      	lsls	r1, r2, #22
 80078ca:	bf58      	it	pl
 80078cc:	9901      	ldrpl	r1, [sp, #4]
 80078ce:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80078d2:	bf58      	it	pl
 80078d4:	eba9 0101 	subpl.w	r1, r9, r1
 80078d8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80078dc:	bf58      	it	pl
 80078de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	f04f 0900 	mov.w	r9, #0
 80078e8:	e78a      	b.n	8007800 <_scanf_float+0x188>
 80078ea:	f04f 0a03 	mov.w	sl, #3
 80078ee:	e787      	b.n	8007800 <_scanf_float+0x188>
 80078f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80078f4:	4639      	mov	r1, r7
 80078f6:	4640      	mov	r0, r8
 80078f8:	4798      	blx	r3
 80078fa:	2800      	cmp	r0, #0
 80078fc:	f43f aedf 	beq.w	80076be <_scanf_float+0x46>
 8007900:	e6ea      	b.n	80076d8 <_scanf_float+0x60>
 8007902:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007906:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800790a:	463a      	mov	r2, r7
 800790c:	4640      	mov	r0, r8
 800790e:	4798      	blx	r3
 8007910:	6923      	ldr	r3, [r4, #16]
 8007912:	3b01      	subs	r3, #1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	e6ec      	b.n	80076f2 <_scanf_float+0x7a>
 8007918:	1e6b      	subs	r3, r5, #1
 800791a:	2b06      	cmp	r3, #6
 800791c:	d825      	bhi.n	800796a <_scanf_float+0x2f2>
 800791e:	2d02      	cmp	r5, #2
 8007920:	d836      	bhi.n	8007990 <_scanf_float+0x318>
 8007922:	455e      	cmp	r6, fp
 8007924:	f67f aee8 	bls.w	80076f8 <_scanf_float+0x80>
 8007928:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800792c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007930:	463a      	mov	r2, r7
 8007932:	4640      	mov	r0, r8
 8007934:	4798      	blx	r3
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	3b01      	subs	r3, #1
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	e7f1      	b.n	8007922 <_scanf_float+0x2aa>
 800793e:	9802      	ldr	r0, [sp, #8]
 8007940:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007944:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007948:	9002      	str	r0, [sp, #8]
 800794a:	463a      	mov	r2, r7
 800794c:	4640      	mov	r0, r8
 800794e:	4798      	blx	r3
 8007950:	6923      	ldr	r3, [r4, #16]
 8007952:	3b01      	subs	r3, #1
 8007954:	6123      	str	r3, [r4, #16]
 8007956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800795a:	fa5f fa8a 	uxtb.w	sl, sl
 800795e:	f1ba 0f02 	cmp.w	sl, #2
 8007962:	d1ec      	bne.n	800793e <_scanf_float+0x2c6>
 8007964:	3d03      	subs	r5, #3
 8007966:	b2ed      	uxtb	r5, r5
 8007968:	1b76      	subs	r6, r6, r5
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	05da      	lsls	r2, r3, #23
 800796e:	d52f      	bpl.n	80079d0 <_scanf_float+0x358>
 8007970:	055b      	lsls	r3, r3, #21
 8007972:	d510      	bpl.n	8007996 <_scanf_float+0x31e>
 8007974:	455e      	cmp	r6, fp
 8007976:	f67f aebf 	bls.w	80076f8 <_scanf_float+0x80>
 800797a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800797e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007982:	463a      	mov	r2, r7
 8007984:	4640      	mov	r0, r8
 8007986:	4798      	blx	r3
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	3b01      	subs	r3, #1
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	e7f1      	b.n	8007974 <_scanf_float+0x2fc>
 8007990:	46aa      	mov	sl, r5
 8007992:	9602      	str	r6, [sp, #8]
 8007994:	e7df      	b.n	8007956 <_scanf_float+0x2de>
 8007996:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800799a:	6923      	ldr	r3, [r4, #16]
 800799c:	2965      	cmp	r1, #101	; 0x65
 800799e:	f103 33ff 	add.w	r3, r3, #4294967295
 80079a2:	f106 35ff 	add.w	r5, r6, #4294967295
 80079a6:	6123      	str	r3, [r4, #16]
 80079a8:	d00c      	beq.n	80079c4 <_scanf_float+0x34c>
 80079aa:	2945      	cmp	r1, #69	; 0x45
 80079ac:	d00a      	beq.n	80079c4 <_scanf_float+0x34c>
 80079ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079b2:	463a      	mov	r2, r7
 80079b4:	4640      	mov	r0, r8
 80079b6:	4798      	blx	r3
 80079b8:	6923      	ldr	r3, [r4, #16]
 80079ba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80079be:	3b01      	subs	r3, #1
 80079c0:	1eb5      	subs	r5, r6, #2
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079c8:	463a      	mov	r2, r7
 80079ca:	4640      	mov	r0, r8
 80079cc:	4798      	blx	r3
 80079ce:	462e      	mov	r6, r5
 80079d0:	6825      	ldr	r5, [r4, #0]
 80079d2:	f015 0510 	ands.w	r5, r5, #16
 80079d6:	d159      	bne.n	8007a8c <_scanf_float+0x414>
 80079d8:	7035      	strb	r5, [r6, #0]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80079e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079e4:	d11b      	bne.n	8007a1e <_scanf_float+0x3a6>
 80079e6:	9b01      	ldr	r3, [sp, #4]
 80079e8:	454b      	cmp	r3, r9
 80079ea:	eba3 0209 	sub.w	r2, r3, r9
 80079ee:	d123      	bne.n	8007a38 <_scanf_float+0x3c0>
 80079f0:	2200      	movs	r2, #0
 80079f2:	4659      	mov	r1, fp
 80079f4:	4640      	mov	r0, r8
 80079f6:	f000 ff25 	bl	8008844 <_strtod_r>
 80079fa:	6822      	ldr	r2, [r4, #0]
 80079fc:	9b03      	ldr	r3, [sp, #12]
 80079fe:	f012 0f02 	tst.w	r2, #2
 8007a02:	ec57 6b10 	vmov	r6, r7, d0
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	d021      	beq.n	8007a4e <_scanf_float+0x3d6>
 8007a0a:	9903      	ldr	r1, [sp, #12]
 8007a0c:	1d1a      	adds	r2, r3, #4
 8007a0e:	600a      	str	r2, [r1, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	e9c3 6700 	strd	r6, r7, [r3]
 8007a16:	68e3      	ldr	r3, [r4, #12]
 8007a18:	3301      	adds	r3, #1
 8007a1a:	60e3      	str	r3, [r4, #12]
 8007a1c:	e66d      	b.n	80076fa <_scanf_float+0x82>
 8007a1e:	9b04      	ldr	r3, [sp, #16]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0e5      	beq.n	80079f0 <_scanf_float+0x378>
 8007a24:	9905      	ldr	r1, [sp, #20]
 8007a26:	230a      	movs	r3, #10
 8007a28:	462a      	mov	r2, r5
 8007a2a:	3101      	adds	r1, #1
 8007a2c:	4640      	mov	r0, r8
 8007a2e:	f000 ff91 	bl	8008954 <_strtol_r>
 8007a32:	9b04      	ldr	r3, [sp, #16]
 8007a34:	9e05      	ldr	r6, [sp, #20]
 8007a36:	1ac2      	subs	r2, r0, r3
 8007a38:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007a3c:	429e      	cmp	r6, r3
 8007a3e:	bf28      	it	cs
 8007a40:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007a44:	4912      	ldr	r1, [pc, #72]	; (8007a90 <_scanf_float+0x418>)
 8007a46:	4630      	mov	r0, r6
 8007a48:	f000 f8ba 	bl	8007bc0 <siprintf>
 8007a4c:	e7d0      	b.n	80079f0 <_scanf_float+0x378>
 8007a4e:	9903      	ldr	r1, [sp, #12]
 8007a50:	f012 0f04 	tst.w	r2, #4
 8007a54:	f103 0204 	add.w	r2, r3, #4
 8007a58:	600a      	str	r2, [r1, #0]
 8007a5a:	d1d9      	bne.n	8007a10 <_scanf_float+0x398>
 8007a5c:	f8d3 8000 	ldr.w	r8, [r3]
 8007a60:	ee10 2a10 	vmov	r2, s0
 8007a64:	ee10 0a10 	vmov	r0, s0
 8007a68:	463b      	mov	r3, r7
 8007a6a:	4639      	mov	r1, r7
 8007a6c:	f7f9 f85e 	bl	8000b2c <__aeabi_dcmpun>
 8007a70:	b128      	cbz	r0, 8007a7e <_scanf_float+0x406>
 8007a72:	4808      	ldr	r0, [pc, #32]	; (8007a94 <_scanf_float+0x41c>)
 8007a74:	f000 f89e 	bl	8007bb4 <nanf>
 8007a78:	ed88 0a00 	vstr	s0, [r8]
 8007a7c:	e7cb      	b.n	8007a16 <_scanf_float+0x39e>
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f9 f8b1 	bl	8000be8 <__aeabi_d2f>
 8007a86:	f8c8 0000 	str.w	r0, [r8]
 8007a8a:	e7c4      	b.n	8007a16 <_scanf_float+0x39e>
 8007a8c:	2500      	movs	r5, #0
 8007a8e:	e634      	b.n	80076fa <_scanf_float+0x82>
 8007a90:	0800b8ec 	.word	0x0800b8ec
 8007a94:	0800bd60 	.word	0x0800bd60

08007a98 <iprintf>:
 8007a98:	b40f      	push	{r0, r1, r2, r3}
 8007a9a:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <iprintf+0x2c>)
 8007a9c:	b513      	push	{r0, r1, r4, lr}
 8007a9e:	681c      	ldr	r4, [r3, #0]
 8007aa0:	b124      	cbz	r4, 8007aac <iprintf+0x14>
 8007aa2:	69a3      	ldr	r3, [r4, #24]
 8007aa4:	b913      	cbnz	r3, 8007aac <iprintf+0x14>
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	f001 ffb6 	bl	8009a18 <__sinit>
 8007aac:	ab05      	add	r3, sp, #20
 8007aae:	9a04      	ldr	r2, [sp, #16]
 8007ab0:	68a1      	ldr	r1, [r4, #8]
 8007ab2:	9301      	str	r3, [sp, #4]
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f003 fb8d 	bl	800b1d4 <_vfiprintf_r>
 8007aba:	b002      	add	sp, #8
 8007abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ac0:	b004      	add	sp, #16
 8007ac2:	4770      	bx	lr
 8007ac4:	20000010 	.word	0x20000010

08007ac8 <_puts_r>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	460e      	mov	r6, r1
 8007acc:	4605      	mov	r5, r0
 8007ace:	b118      	cbz	r0, 8007ad8 <_puts_r+0x10>
 8007ad0:	6983      	ldr	r3, [r0, #24]
 8007ad2:	b90b      	cbnz	r3, 8007ad8 <_puts_r+0x10>
 8007ad4:	f001 ffa0 	bl	8009a18 <__sinit>
 8007ad8:	69ab      	ldr	r3, [r5, #24]
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	b913      	cbnz	r3, 8007ae4 <_puts_r+0x1c>
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f001 ff9a 	bl	8009a18 <__sinit>
 8007ae4:	4b2c      	ldr	r3, [pc, #176]	; (8007b98 <_puts_r+0xd0>)
 8007ae6:	429c      	cmp	r4, r3
 8007ae8:	d120      	bne.n	8007b2c <_puts_r+0x64>
 8007aea:	686c      	ldr	r4, [r5, #4]
 8007aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007aee:	07db      	lsls	r3, r3, #31
 8007af0:	d405      	bmi.n	8007afe <_puts_r+0x36>
 8007af2:	89a3      	ldrh	r3, [r4, #12]
 8007af4:	0598      	lsls	r0, r3, #22
 8007af6:	d402      	bmi.n	8007afe <_puts_r+0x36>
 8007af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007afa:	f002 fb9e 	bl	800a23a <__retarget_lock_acquire_recursive>
 8007afe:	89a3      	ldrh	r3, [r4, #12]
 8007b00:	0719      	lsls	r1, r3, #28
 8007b02:	d51d      	bpl.n	8007b40 <_puts_r+0x78>
 8007b04:	6923      	ldr	r3, [r4, #16]
 8007b06:	b1db      	cbz	r3, 8007b40 <_puts_r+0x78>
 8007b08:	3e01      	subs	r6, #1
 8007b0a:	68a3      	ldr	r3, [r4, #8]
 8007b0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007b10:	3b01      	subs	r3, #1
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	bb39      	cbnz	r1, 8007b66 <_puts_r+0x9e>
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da38      	bge.n	8007b8c <_puts_r+0xc4>
 8007b1a:	4622      	mov	r2, r4
 8007b1c:	210a      	movs	r1, #10
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 ff24 	bl	800896c <__swbuf_r>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d011      	beq.n	8007b4c <_puts_r+0x84>
 8007b28:	250a      	movs	r5, #10
 8007b2a:	e011      	b.n	8007b50 <_puts_r+0x88>
 8007b2c:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <_puts_r+0xd4>)
 8007b2e:	429c      	cmp	r4, r3
 8007b30:	d101      	bne.n	8007b36 <_puts_r+0x6e>
 8007b32:	68ac      	ldr	r4, [r5, #8]
 8007b34:	e7da      	b.n	8007aec <_puts_r+0x24>
 8007b36:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <_puts_r+0xd8>)
 8007b38:	429c      	cmp	r4, r3
 8007b3a:	bf08      	it	eq
 8007b3c:	68ec      	ldreq	r4, [r5, #12]
 8007b3e:	e7d5      	b.n	8007aec <_puts_r+0x24>
 8007b40:	4621      	mov	r1, r4
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 ff64 	bl	8008a10 <__swsetup_r>
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d0dd      	beq.n	8007b08 <_puts_r+0x40>
 8007b4c:	f04f 35ff 	mov.w	r5, #4294967295
 8007b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b52:	07da      	lsls	r2, r3, #31
 8007b54:	d405      	bmi.n	8007b62 <_puts_r+0x9a>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	059b      	lsls	r3, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_puts_r+0x9a>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b5e:	f002 fb6d 	bl	800a23c <__retarget_lock_release_recursive>
 8007b62:	4628      	mov	r0, r5
 8007b64:	bd70      	pop	{r4, r5, r6, pc}
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	da04      	bge.n	8007b74 <_puts_r+0xac>
 8007b6a:	69a2      	ldr	r2, [r4, #24]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	dc06      	bgt.n	8007b7e <_puts_r+0xb6>
 8007b70:	290a      	cmp	r1, #10
 8007b72:	d004      	beq.n	8007b7e <_puts_r+0xb6>
 8007b74:	6823      	ldr	r3, [r4, #0]
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	6022      	str	r2, [r4, #0]
 8007b7a:	7019      	strb	r1, [r3, #0]
 8007b7c:	e7c5      	b.n	8007b0a <_puts_r+0x42>
 8007b7e:	4622      	mov	r2, r4
 8007b80:	4628      	mov	r0, r5
 8007b82:	f000 fef3 	bl	800896c <__swbuf_r>
 8007b86:	3001      	adds	r0, #1
 8007b88:	d1bf      	bne.n	8007b0a <_puts_r+0x42>
 8007b8a:	e7df      	b.n	8007b4c <_puts_r+0x84>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	250a      	movs	r5, #10
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	6022      	str	r2, [r4, #0]
 8007b94:	701d      	strb	r5, [r3, #0]
 8007b96:	e7db      	b.n	8007b50 <_puts_r+0x88>
 8007b98:	0800bafc 	.word	0x0800bafc
 8007b9c:	0800bb1c 	.word	0x0800bb1c
 8007ba0:	0800badc 	.word	0x0800badc

08007ba4 <puts>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <puts+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f7ff bf8d 	b.w	8007ac8 <_puts_r>
 8007bae:	bf00      	nop
 8007bb0:	20000010 	.word	0x20000010

08007bb4 <nanf>:
 8007bb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007bbc <nanf+0x8>
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	7fc00000 	.word	0x7fc00000

08007bc0 <siprintf>:
 8007bc0:	b40e      	push	{r1, r2, r3}
 8007bc2:	b500      	push	{lr}
 8007bc4:	b09c      	sub	sp, #112	; 0x70
 8007bc6:	ab1d      	add	r3, sp, #116	; 0x74
 8007bc8:	9002      	str	r0, [sp, #8]
 8007bca:	9006      	str	r0, [sp, #24]
 8007bcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bd0:	4809      	ldr	r0, [pc, #36]	; (8007bf8 <siprintf+0x38>)
 8007bd2:	9107      	str	r1, [sp, #28]
 8007bd4:	9104      	str	r1, [sp, #16]
 8007bd6:	4909      	ldr	r1, [pc, #36]	; (8007bfc <siprintf+0x3c>)
 8007bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bdc:	9105      	str	r1, [sp, #20]
 8007bde:	6800      	ldr	r0, [r0, #0]
 8007be0:	9301      	str	r3, [sp, #4]
 8007be2:	a902      	add	r1, sp, #8
 8007be4:	f003 f9cc 	bl	800af80 <_svfiprintf_r>
 8007be8:	9b02      	ldr	r3, [sp, #8]
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]
 8007bee:	b01c      	add	sp, #112	; 0x70
 8007bf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf4:	b003      	add	sp, #12
 8007bf6:	4770      	bx	lr
 8007bf8:	20000010 	.word	0x20000010
 8007bfc:	ffff0208 	.word	0xffff0208

08007c00 <sulp>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4604      	mov	r4, r0
 8007c04:	460d      	mov	r5, r1
 8007c06:	ec45 4b10 	vmov	d0, r4, r5
 8007c0a:	4616      	mov	r6, r2
 8007c0c:	f002 ff16 	bl	800aa3c <__ulp>
 8007c10:	ec51 0b10 	vmov	r0, r1, d0
 8007c14:	b17e      	cbz	r6, 8007c36 <sulp+0x36>
 8007c16:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	dd09      	ble.n	8007c36 <sulp+0x36>
 8007c22:	051b      	lsls	r3, r3, #20
 8007c24:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007c28:	2400      	movs	r4, #0
 8007c2a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007c2e:	4622      	mov	r2, r4
 8007c30:	462b      	mov	r3, r5
 8007c32:	f7f8 fce1 	bl	80005f8 <__aeabi_dmul>
 8007c36:	bd70      	pop	{r4, r5, r6, pc}

08007c38 <_strtod_l>:
 8007c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c3c:	ed2d 8b02 	vpush	{d8}
 8007c40:	b09d      	sub	sp, #116	; 0x74
 8007c42:	461f      	mov	r7, r3
 8007c44:	2300      	movs	r3, #0
 8007c46:	9318      	str	r3, [sp, #96]	; 0x60
 8007c48:	4ba2      	ldr	r3, [pc, #648]	; (8007ed4 <_strtod_l+0x29c>)
 8007c4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	4604      	mov	r4, r0
 8007c52:	4618      	mov	r0, r3
 8007c54:	4688      	mov	r8, r1
 8007c56:	f7f8 fabb 	bl	80001d0 <strlen>
 8007c5a:	f04f 0a00 	mov.w	sl, #0
 8007c5e:	4605      	mov	r5, r0
 8007c60:	f04f 0b00 	mov.w	fp, #0
 8007c64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6a:	781a      	ldrb	r2, [r3, #0]
 8007c6c:	2a2b      	cmp	r2, #43	; 0x2b
 8007c6e:	d04e      	beq.n	8007d0e <_strtod_l+0xd6>
 8007c70:	d83b      	bhi.n	8007cea <_strtod_l+0xb2>
 8007c72:	2a0d      	cmp	r2, #13
 8007c74:	d834      	bhi.n	8007ce0 <_strtod_l+0xa8>
 8007c76:	2a08      	cmp	r2, #8
 8007c78:	d834      	bhi.n	8007ce4 <_strtod_l+0xac>
 8007c7a:	2a00      	cmp	r2, #0
 8007c7c:	d03e      	beq.n	8007cfc <_strtod_l+0xc4>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	930a      	str	r3, [sp, #40]	; 0x28
 8007c82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007c84:	7833      	ldrb	r3, [r6, #0]
 8007c86:	2b30      	cmp	r3, #48	; 0x30
 8007c88:	f040 80b0 	bne.w	8007dec <_strtod_l+0x1b4>
 8007c8c:	7873      	ldrb	r3, [r6, #1]
 8007c8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c92:	2b58      	cmp	r3, #88	; 0x58
 8007c94:	d168      	bne.n	8007d68 <_strtod_l+0x130>
 8007c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c98:	9301      	str	r3, [sp, #4]
 8007c9a:	ab18      	add	r3, sp, #96	; 0x60
 8007c9c:	9702      	str	r7, [sp, #8]
 8007c9e:	9300      	str	r3, [sp, #0]
 8007ca0:	4a8d      	ldr	r2, [pc, #564]	; (8007ed8 <_strtod_l+0x2a0>)
 8007ca2:	ab19      	add	r3, sp, #100	; 0x64
 8007ca4:	a917      	add	r1, sp, #92	; 0x5c
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 ffba 	bl	8009c20 <__gethex>
 8007cac:	f010 0707 	ands.w	r7, r0, #7
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	d005      	beq.n	8007cc0 <_strtod_l+0x88>
 8007cb4:	2f06      	cmp	r7, #6
 8007cb6:	d12c      	bne.n	8007d12 <_strtod_l+0xda>
 8007cb8:	3601      	adds	r6, #1
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8007cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 8590 	bne.w	80087e8 <_strtod_l+0xbb0>
 8007cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cca:	b1eb      	cbz	r3, 8007d08 <_strtod_l+0xd0>
 8007ccc:	4652      	mov	r2, sl
 8007cce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007cd2:	ec43 2b10 	vmov	d0, r2, r3
 8007cd6:	b01d      	add	sp, #116	; 0x74
 8007cd8:	ecbd 8b02 	vpop	{d8}
 8007cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce0:	2a20      	cmp	r2, #32
 8007ce2:	d1cc      	bne.n	8007c7e <_strtod_l+0x46>
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ce8:	e7be      	b.n	8007c68 <_strtod_l+0x30>
 8007cea:	2a2d      	cmp	r2, #45	; 0x2d
 8007cec:	d1c7      	bne.n	8007c7e <_strtod_l+0x46>
 8007cee:	2201      	movs	r2, #1
 8007cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8007cf2:	1c5a      	adds	r2, r3, #1
 8007cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1c2      	bne.n	8007c82 <_strtod_l+0x4a>
 8007cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f040 856e 	bne.w	80087e4 <_strtod_l+0xbac>
 8007d08:	4652      	mov	r2, sl
 8007d0a:	465b      	mov	r3, fp
 8007d0c:	e7e1      	b.n	8007cd2 <_strtod_l+0x9a>
 8007d0e:	2200      	movs	r2, #0
 8007d10:	e7ee      	b.n	8007cf0 <_strtod_l+0xb8>
 8007d12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007d14:	b13a      	cbz	r2, 8007d26 <_strtod_l+0xee>
 8007d16:	2135      	movs	r1, #53	; 0x35
 8007d18:	a81a      	add	r0, sp, #104	; 0x68
 8007d1a:	f002 ff9a 	bl	800ac52 <__copybits>
 8007d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007d20:	4620      	mov	r0, r4
 8007d22:	f002 fb59 	bl	800a3d8 <_Bfree>
 8007d26:	3f01      	subs	r7, #1
 8007d28:	2f04      	cmp	r7, #4
 8007d2a:	d806      	bhi.n	8007d3a <_strtod_l+0x102>
 8007d2c:	e8df f007 	tbb	[pc, r7]
 8007d30:	1714030a 	.word	0x1714030a
 8007d34:	0a          	.byte	0x0a
 8007d35:	00          	.byte	0x00
 8007d36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007d3a:	0728      	lsls	r0, r5, #28
 8007d3c:	d5c0      	bpl.n	8007cc0 <_strtod_l+0x88>
 8007d3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007d42:	e7bd      	b.n	8007cc0 <_strtod_l+0x88>
 8007d44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007d48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007d4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007d52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007d56:	e7f0      	b.n	8007d3a <_strtod_l+0x102>
 8007d58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007edc <_strtod_l+0x2a4>
 8007d5c:	e7ed      	b.n	8007d3a <_strtod_l+0x102>
 8007d5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007d62:	f04f 3aff 	mov.w	sl, #4294967295
 8007d66:	e7e8      	b.n	8007d3a <_strtod_l+0x102>
 8007d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d6a:	1c5a      	adds	r2, r3, #1
 8007d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d6e:	785b      	ldrb	r3, [r3, #1]
 8007d70:	2b30      	cmp	r3, #48	; 0x30
 8007d72:	d0f9      	beq.n	8007d68 <_strtod_l+0x130>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0a3      	beq.n	8007cc0 <_strtod_l+0x88>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f04f 0900 	mov.w	r9, #0
 8007d7e:	9304      	str	r3, [sp, #16]
 8007d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	f8cd 901c 	str.w	r9, [sp, #28]
 8007d88:	464f      	mov	r7, r9
 8007d8a:	220a      	movs	r2, #10
 8007d8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007d8e:	7806      	ldrb	r6, [r0, #0]
 8007d90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007d94:	b2d9      	uxtb	r1, r3
 8007d96:	2909      	cmp	r1, #9
 8007d98:	d92a      	bls.n	8007df0 <_strtod_l+0x1b8>
 8007d9a:	9905      	ldr	r1, [sp, #20]
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	f003 fba6 	bl	800b4ee <strncmp>
 8007da2:	b398      	cbz	r0, 8007e0c <_strtod_l+0x1d4>
 8007da4:	2000      	movs	r0, #0
 8007da6:	4632      	mov	r2, r6
 8007da8:	463d      	mov	r5, r7
 8007daa:	9005      	str	r0, [sp, #20]
 8007dac:	4603      	mov	r3, r0
 8007dae:	2a65      	cmp	r2, #101	; 0x65
 8007db0:	d001      	beq.n	8007db6 <_strtod_l+0x17e>
 8007db2:	2a45      	cmp	r2, #69	; 0x45
 8007db4:	d118      	bne.n	8007de8 <_strtod_l+0x1b0>
 8007db6:	b91d      	cbnz	r5, 8007dc0 <_strtod_l+0x188>
 8007db8:	9a04      	ldr	r2, [sp, #16]
 8007dba:	4302      	orrs	r2, r0
 8007dbc:	d09e      	beq.n	8007cfc <_strtod_l+0xc4>
 8007dbe:	2500      	movs	r5, #0
 8007dc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007dc4:	f108 0201 	add.w	r2, r8, #1
 8007dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007dca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007dce:	2a2b      	cmp	r2, #43	; 0x2b
 8007dd0:	d075      	beq.n	8007ebe <_strtod_l+0x286>
 8007dd2:	2a2d      	cmp	r2, #45	; 0x2d
 8007dd4:	d07b      	beq.n	8007ece <_strtod_l+0x296>
 8007dd6:	f04f 0c00 	mov.w	ip, #0
 8007dda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007dde:	2909      	cmp	r1, #9
 8007de0:	f240 8082 	bls.w	8007ee8 <_strtod_l+0x2b0>
 8007de4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007de8:	2600      	movs	r6, #0
 8007dea:	e09d      	b.n	8007f28 <_strtod_l+0x2f0>
 8007dec:	2300      	movs	r3, #0
 8007dee:	e7c4      	b.n	8007d7a <_strtod_l+0x142>
 8007df0:	2f08      	cmp	r7, #8
 8007df2:	bfd8      	it	le
 8007df4:	9907      	ldrle	r1, [sp, #28]
 8007df6:	f100 0001 	add.w	r0, r0, #1
 8007dfa:	bfda      	itte	le
 8007dfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007e00:	9307      	strle	r3, [sp, #28]
 8007e02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007e06:	3701      	adds	r7, #1
 8007e08:	9017      	str	r0, [sp, #92]	; 0x5c
 8007e0a:	e7bf      	b.n	8007d8c <_strtod_l+0x154>
 8007e0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e0e:	195a      	adds	r2, r3, r5
 8007e10:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e12:	5d5a      	ldrb	r2, [r3, r5]
 8007e14:	2f00      	cmp	r7, #0
 8007e16:	d037      	beq.n	8007e88 <_strtod_l+0x250>
 8007e18:	9005      	str	r0, [sp, #20]
 8007e1a:	463d      	mov	r5, r7
 8007e1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d912      	bls.n	8007e4a <_strtod_l+0x212>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e7c2      	b.n	8007dae <_strtod_l+0x176>
 8007e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e2a:	1c5a      	adds	r2, r3, #1
 8007e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e2e:	785a      	ldrb	r2, [r3, #1]
 8007e30:	3001      	adds	r0, #1
 8007e32:	2a30      	cmp	r2, #48	; 0x30
 8007e34:	d0f8      	beq.n	8007e28 <_strtod_l+0x1f0>
 8007e36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007e3a:	2b08      	cmp	r3, #8
 8007e3c:	f200 84d9 	bhi.w	80087f2 <_strtod_l+0xbba>
 8007e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e42:	9005      	str	r0, [sp, #20]
 8007e44:	2000      	movs	r0, #0
 8007e46:	9308      	str	r3, [sp, #32]
 8007e48:	4605      	mov	r5, r0
 8007e4a:	3a30      	subs	r2, #48	; 0x30
 8007e4c:	f100 0301 	add.w	r3, r0, #1
 8007e50:	d014      	beq.n	8007e7c <_strtod_l+0x244>
 8007e52:	9905      	ldr	r1, [sp, #20]
 8007e54:	4419      	add	r1, r3
 8007e56:	9105      	str	r1, [sp, #20]
 8007e58:	462b      	mov	r3, r5
 8007e5a:	eb00 0e05 	add.w	lr, r0, r5
 8007e5e:	210a      	movs	r1, #10
 8007e60:	4573      	cmp	r3, lr
 8007e62:	d113      	bne.n	8007e8c <_strtod_l+0x254>
 8007e64:	182b      	adds	r3, r5, r0
 8007e66:	2b08      	cmp	r3, #8
 8007e68:	f105 0501 	add.w	r5, r5, #1
 8007e6c:	4405      	add	r5, r0
 8007e6e:	dc1c      	bgt.n	8007eaa <_strtod_l+0x272>
 8007e70:	9907      	ldr	r1, [sp, #28]
 8007e72:	230a      	movs	r3, #10
 8007e74:	fb03 2301 	mla	r3, r3, r1, r2
 8007e78:	9307      	str	r3, [sp, #28]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007e7e:	1c51      	adds	r1, r2, #1
 8007e80:	9117      	str	r1, [sp, #92]	; 0x5c
 8007e82:	7852      	ldrb	r2, [r2, #1]
 8007e84:	4618      	mov	r0, r3
 8007e86:	e7c9      	b.n	8007e1c <_strtod_l+0x1e4>
 8007e88:	4638      	mov	r0, r7
 8007e8a:	e7d2      	b.n	8007e32 <_strtod_l+0x1fa>
 8007e8c:	2b08      	cmp	r3, #8
 8007e8e:	dc04      	bgt.n	8007e9a <_strtod_l+0x262>
 8007e90:	9e07      	ldr	r6, [sp, #28]
 8007e92:	434e      	muls	r6, r1
 8007e94:	9607      	str	r6, [sp, #28]
 8007e96:	3301      	adds	r3, #1
 8007e98:	e7e2      	b.n	8007e60 <_strtod_l+0x228>
 8007e9a:	f103 0c01 	add.w	ip, r3, #1
 8007e9e:	f1bc 0f10 	cmp.w	ip, #16
 8007ea2:	bfd8      	it	le
 8007ea4:	fb01 f909 	mulle.w	r9, r1, r9
 8007ea8:	e7f5      	b.n	8007e96 <_strtod_l+0x25e>
 8007eaa:	2d10      	cmp	r5, #16
 8007eac:	bfdc      	itt	le
 8007eae:	230a      	movle	r3, #10
 8007eb0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007eb4:	e7e1      	b.n	8007e7a <_strtod_l+0x242>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	9305      	str	r3, [sp, #20]
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e77c      	b.n	8007db8 <_strtod_l+0x180>
 8007ebe:	f04f 0c00 	mov.w	ip, #0
 8007ec2:	f108 0202 	add.w	r2, r8, #2
 8007ec6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ec8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007ecc:	e785      	b.n	8007dda <_strtod_l+0x1a2>
 8007ece:	f04f 0c01 	mov.w	ip, #1
 8007ed2:	e7f6      	b.n	8007ec2 <_strtod_l+0x28a>
 8007ed4:	0800bba4 	.word	0x0800bba4
 8007ed8:	0800b8f4 	.word	0x0800b8f4
 8007edc:	7ff00000 	.word	0x7ff00000
 8007ee0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ee2:	1c51      	adds	r1, r2, #1
 8007ee4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007ee6:	7852      	ldrb	r2, [r2, #1]
 8007ee8:	2a30      	cmp	r2, #48	; 0x30
 8007eea:	d0f9      	beq.n	8007ee0 <_strtod_l+0x2a8>
 8007eec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007ef0:	2908      	cmp	r1, #8
 8007ef2:	f63f af79 	bhi.w	8007de8 <_strtod_l+0x1b0>
 8007ef6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007efa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007efc:	9206      	str	r2, [sp, #24]
 8007efe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007f00:	1c51      	adds	r1, r2, #1
 8007f02:	9117      	str	r1, [sp, #92]	; 0x5c
 8007f04:	7852      	ldrb	r2, [r2, #1]
 8007f06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007f0a:	2e09      	cmp	r6, #9
 8007f0c:	d937      	bls.n	8007f7e <_strtod_l+0x346>
 8007f0e:	9e06      	ldr	r6, [sp, #24]
 8007f10:	1b89      	subs	r1, r1, r6
 8007f12:	2908      	cmp	r1, #8
 8007f14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007f18:	dc02      	bgt.n	8007f20 <_strtod_l+0x2e8>
 8007f1a:	4576      	cmp	r6, lr
 8007f1c:	bfa8      	it	ge
 8007f1e:	4676      	movge	r6, lr
 8007f20:	f1bc 0f00 	cmp.w	ip, #0
 8007f24:	d000      	beq.n	8007f28 <_strtod_l+0x2f0>
 8007f26:	4276      	negs	r6, r6
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	d14d      	bne.n	8007fc8 <_strtod_l+0x390>
 8007f2c:	9904      	ldr	r1, [sp, #16]
 8007f2e:	4301      	orrs	r1, r0
 8007f30:	f47f aec6 	bne.w	8007cc0 <_strtod_l+0x88>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f47f aee1 	bne.w	8007cfc <_strtod_l+0xc4>
 8007f3a:	2a69      	cmp	r2, #105	; 0x69
 8007f3c:	d027      	beq.n	8007f8e <_strtod_l+0x356>
 8007f3e:	dc24      	bgt.n	8007f8a <_strtod_l+0x352>
 8007f40:	2a49      	cmp	r2, #73	; 0x49
 8007f42:	d024      	beq.n	8007f8e <_strtod_l+0x356>
 8007f44:	2a4e      	cmp	r2, #78	; 0x4e
 8007f46:	f47f aed9 	bne.w	8007cfc <_strtod_l+0xc4>
 8007f4a:	499f      	ldr	r1, [pc, #636]	; (80081c8 <_strtod_l+0x590>)
 8007f4c:	a817      	add	r0, sp, #92	; 0x5c
 8007f4e:	f002 f8bf 	bl	800a0d0 <__match>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	f43f aed2 	beq.w	8007cfc <_strtod_l+0xc4>
 8007f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b28      	cmp	r3, #40	; 0x28
 8007f5e:	d12d      	bne.n	8007fbc <_strtod_l+0x384>
 8007f60:	499a      	ldr	r1, [pc, #616]	; (80081cc <_strtod_l+0x594>)
 8007f62:	aa1a      	add	r2, sp, #104	; 0x68
 8007f64:	a817      	add	r0, sp, #92	; 0x5c
 8007f66:	f002 f8c7 	bl	800a0f8 <__hexnan>
 8007f6a:	2805      	cmp	r0, #5
 8007f6c:	d126      	bne.n	8007fbc <_strtod_l+0x384>
 8007f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007f70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007f74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007f78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007f7c:	e6a0      	b.n	8007cc0 <_strtod_l+0x88>
 8007f7e:	210a      	movs	r1, #10
 8007f80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007f84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007f88:	e7b9      	b.n	8007efe <_strtod_l+0x2c6>
 8007f8a:	2a6e      	cmp	r2, #110	; 0x6e
 8007f8c:	e7db      	b.n	8007f46 <_strtod_l+0x30e>
 8007f8e:	4990      	ldr	r1, [pc, #576]	; (80081d0 <_strtod_l+0x598>)
 8007f90:	a817      	add	r0, sp, #92	; 0x5c
 8007f92:	f002 f89d 	bl	800a0d0 <__match>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	f43f aeb0 	beq.w	8007cfc <_strtod_l+0xc4>
 8007f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f9e:	498d      	ldr	r1, [pc, #564]	; (80081d4 <_strtod_l+0x59c>)
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	a817      	add	r0, sp, #92	; 0x5c
 8007fa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fa6:	f002 f893 	bl	800a0d0 <__match>
 8007faa:	b910      	cbnz	r0, 8007fb2 <_strtod_l+0x37a>
 8007fac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fae:	3301      	adds	r3, #1
 8007fb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007fb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80081e4 <_strtod_l+0x5ac>
 8007fb6:	f04f 0a00 	mov.w	sl, #0
 8007fba:	e681      	b.n	8007cc0 <_strtod_l+0x88>
 8007fbc:	4886      	ldr	r0, [pc, #536]	; (80081d8 <_strtod_l+0x5a0>)
 8007fbe:	f003 fa3b 	bl	800b438 <nan>
 8007fc2:	ec5b ab10 	vmov	sl, fp, d0
 8007fc6:	e67b      	b.n	8007cc0 <_strtod_l+0x88>
 8007fc8:	9b05      	ldr	r3, [sp, #20]
 8007fca:	9807      	ldr	r0, [sp, #28]
 8007fcc:	1af3      	subs	r3, r6, r3
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	bf08      	it	eq
 8007fd2:	462f      	moveq	r7, r5
 8007fd4:	2d10      	cmp	r5, #16
 8007fd6:	9306      	str	r3, [sp, #24]
 8007fd8:	46a8      	mov	r8, r5
 8007fda:	bfa8      	it	ge
 8007fdc:	f04f 0810 	movge.w	r8, #16
 8007fe0:	f7f8 fa90 	bl	8000504 <__aeabi_ui2d>
 8007fe4:	2d09      	cmp	r5, #9
 8007fe6:	4682      	mov	sl, r0
 8007fe8:	468b      	mov	fp, r1
 8007fea:	dd13      	ble.n	8008014 <_strtod_l+0x3dc>
 8007fec:	4b7b      	ldr	r3, [pc, #492]	; (80081dc <_strtod_l+0x5a4>)
 8007fee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007ff2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007ff6:	f7f8 faff 	bl	80005f8 <__aeabi_dmul>
 8007ffa:	4682      	mov	sl, r0
 8007ffc:	4648      	mov	r0, r9
 8007ffe:	468b      	mov	fp, r1
 8008000:	f7f8 fa80 	bl	8000504 <__aeabi_ui2d>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4650      	mov	r0, sl
 800800a:	4659      	mov	r1, fp
 800800c:	f7f8 f93e 	bl	800028c <__adddf3>
 8008010:	4682      	mov	sl, r0
 8008012:	468b      	mov	fp, r1
 8008014:	2d0f      	cmp	r5, #15
 8008016:	dc38      	bgt.n	800808a <_strtod_l+0x452>
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	2b00      	cmp	r3, #0
 800801c:	f43f ae50 	beq.w	8007cc0 <_strtod_l+0x88>
 8008020:	dd24      	ble.n	800806c <_strtod_l+0x434>
 8008022:	2b16      	cmp	r3, #22
 8008024:	dc0b      	bgt.n	800803e <_strtod_l+0x406>
 8008026:	496d      	ldr	r1, [pc, #436]	; (80081dc <_strtod_l+0x5a4>)
 8008028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800802c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008030:	4652      	mov	r2, sl
 8008032:	465b      	mov	r3, fp
 8008034:	f7f8 fae0 	bl	80005f8 <__aeabi_dmul>
 8008038:	4682      	mov	sl, r0
 800803a:	468b      	mov	fp, r1
 800803c:	e640      	b.n	8007cc0 <_strtod_l+0x88>
 800803e:	9a06      	ldr	r2, [sp, #24]
 8008040:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008044:	4293      	cmp	r3, r2
 8008046:	db20      	blt.n	800808a <_strtod_l+0x452>
 8008048:	4c64      	ldr	r4, [pc, #400]	; (80081dc <_strtod_l+0x5a4>)
 800804a:	f1c5 050f 	rsb	r5, r5, #15
 800804e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008052:	4652      	mov	r2, sl
 8008054:	465b      	mov	r3, fp
 8008056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800805a:	f7f8 facd 	bl	80005f8 <__aeabi_dmul>
 800805e:	9b06      	ldr	r3, [sp, #24]
 8008060:	1b5d      	subs	r5, r3, r5
 8008062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800806a:	e7e3      	b.n	8008034 <_strtod_l+0x3fc>
 800806c:	9b06      	ldr	r3, [sp, #24]
 800806e:	3316      	adds	r3, #22
 8008070:	db0b      	blt.n	800808a <_strtod_l+0x452>
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	1b9e      	subs	r6, r3, r6
 8008076:	4b59      	ldr	r3, [pc, #356]	; (80081dc <_strtod_l+0x5a4>)
 8008078:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800807c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008080:	4650      	mov	r0, sl
 8008082:	4659      	mov	r1, fp
 8008084:	f7f8 fbe2 	bl	800084c <__aeabi_ddiv>
 8008088:	e7d6      	b.n	8008038 <_strtod_l+0x400>
 800808a:	9b06      	ldr	r3, [sp, #24]
 800808c:	eba5 0808 	sub.w	r8, r5, r8
 8008090:	4498      	add	r8, r3
 8008092:	f1b8 0f00 	cmp.w	r8, #0
 8008096:	dd74      	ble.n	8008182 <_strtod_l+0x54a>
 8008098:	f018 030f 	ands.w	r3, r8, #15
 800809c:	d00a      	beq.n	80080b4 <_strtod_l+0x47c>
 800809e:	494f      	ldr	r1, [pc, #316]	; (80081dc <_strtod_l+0x5a4>)
 80080a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80080a4:	4652      	mov	r2, sl
 80080a6:	465b      	mov	r3, fp
 80080a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080ac:	f7f8 faa4 	bl	80005f8 <__aeabi_dmul>
 80080b0:	4682      	mov	sl, r0
 80080b2:	468b      	mov	fp, r1
 80080b4:	f038 080f 	bics.w	r8, r8, #15
 80080b8:	d04f      	beq.n	800815a <_strtod_l+0x522>
 80080ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80080be:	dd22      	ble.n	8008106 <_strtod_l+0x4ce>
 80080c0:	2500      	movs	r5, #0
 80080c2:	462e      	mov	r6, r5
 80080c4:	9507      	str	r5, [sp, #28]
 80080c6:	9505      	str	r5, [sp, #20]
 80080c8:	2322      	movs	r3, #34	; 0x22
 80080ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80081e4 <_strtod_l+0x5ac>
 80080ce:	6023      	str	r3, [r4, #0]
 80080d0:	f04f 0a00 	mov.w	sl, #0
 80080d4:	9b07      	ldr	r3, [sp, #28]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f43f adf2 	beq.w	8007cc0 <_strtod_l+0x88>
 80080dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80080de:	4620      	mov	r0, r4
 80080e0:	f002 f97a 	bl	800a3d8 <_Bfree>
 80080e4:	9905      	ldr	r1, [sp, #20]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f002 f976 	bl	800a3d8 <_Bfree>
 80080ec:	4631      	mov	r1, r6
 80080ee:	4620      	mov	r0, r4
 80080f0:	f002 f972 	bl	800a3d8 <_Bfree>
 80080f4:	9907      	ldr	r1, [sp, #28]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f002 f96e 	bl	800a3d8 <_Bfree>
 80080fc:	4629      	mov	r1, r5
 80080fe:	4620      	mov	r0, r4
 8008100:	f002 f96a 	bl	800a3d8 <_Bfree>
 8008104:	e5dc      	b.n	8007cc0 <_strtod_l+0x88>
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <_strtod_l+0x5a8>)
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	2300      	movs	r3, #0
 800810c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008110:	4650      	mov	r0, sl
 8008112:	4659      	mov	r1, fp
 8008114:	4699      	mov	r9, r3
 8008116:	f1b8 0f01 	cmp.w	r8, #1
 800811a:	dc21      	bgt.n	8008160 <_strtod_l+0x528>
 800811c:	b10b      	cbz	r3, 8008122 <_strtod_l+0x4ea>
 800811e:	4682      	mov	sl, r0
 8008120:	468b      	mov	fp, r1
 8008122:	4b2f      	ldr	r3, [pc, #188]	; (80081e0 <_strtod_l+0x5a8>)
 8008124:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008128:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800812c:	4652      	mov	r2, sl
 800812e:	465b      	mov	r3, fp
 8008130:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008134:	f7f8 fa60 	bl	80005f8 <__aeabi_dmul>
 8008138:	4b2a      	ldr	r3, [pc, #168]	; (80081e4 <_strtod_l+0x5ac>)
 800813a:	460a      	mov	r2, r1
 800813c:	400b      	ands	r3, r1
 800813e:	492a      	ldr	r1, [pc, #168]	; (80081e8 <_strtod_l+0x5b0>)
 8008140:	428b      	cmp	r3, r1
 8008142:	4682      	mov	sl, r0
 8008144:	d8bc      	bhi.n	80080c0 <_strtod_l+0x488>
 8008146:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800814a:	428b      	cmp	r3, r1
 800814c:	bf86      	itte	hi
 800814e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80081ec <_strtod_l+0x5b4>
 8008152:	f04f 3aff 	movhi.w	sl, #4294967295
 8008156:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800815a:	2300      	movs	r3, #0
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	e084      	b.n	800826a <_strtod_l+0x632>
 8008160:	f018 0f01 	tst.w	r8, #1
 8008164:	d005      	beq.n	8008172 <_strtod_l+0x53a>
 8008166:	9b04      	ldr	r3, [sp, #16]
 8008168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816c:	f7f8 fa44 	bl	80005f8 <__aeabi_dmul>
 8008170:	2301      	movs	r3, #1
 8008172:	9a04      	ldr	r2, [sp, #16]
 8008174:	3208      	adds	r2, #8
 8008176:	f109 0901 	add.w	r9, r9, #1
 800817a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800817e:	9204      	str	r2, [sp, #16]
 8008180:	e7c9      	b.n	8008116 <_strtod_l+0x4de>
 8008182:	d0ea      	beq.n	800815a <_strtod_l+0x522>
 8008184:	f1c8 0800 	rsb	r8, r8, #0
 8008188:	f018 020f 	ands.w	r2, r8, #15
 800818c:	d00a      	beq.n	80081a4 <_strtod_l+0x56c>
 800818e:	4b13      	ldr	r3, [pc, #76]	; (80081dc <_strtod_l+0x5a4>)
 8008190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008194:	4650      	mov	r0, sl
 8008196:	4659      	mov	r1, fp
 8008198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819c:	f7f8 fb56 	bl	800084c <__aeabi_ddiv>
 80081a0:	4682      	mov	sl, r0
 80081a2:	468b      	mov	fp, r1
 80081a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80081a8:	d0d7      	beq.n	800815a <_strtod_l+0x522>
 80081aa:	f1b8 0f1f 	cmp.w	r8, #31
 80081ae:	dd1f      	ble.n	80081f0 <_strtod_l+0x5b8>
 80081b0:	2500      	movs	r5, #0
 80081b2:	462e      	mov	r6, r5
 80081b4:	9507      	str	r5, [sp, #28]
 80081b6:	9505      	str	r5, [sp, #20]
 80081b8:	2322      	movs	r3, #34	; 0x22
 80081ba:	f04f 0a00 	mov.w	sl, #0
 80081be:	f04f 0b00 	mov.w	fp, #0
 80081c2:	6023      	str	r3, [r4, #0]
 80081c4:	e786      	b.n	80080d4 <_strtod_l+0x49c>
 80081c6:	bf00      	nop
 80081c8:	0800b8c5 	.word	0x0800b8c5
 80081cc:	0800b908 	.word	0x0800b908
 80081d0:	0800b8bd 	.word	0x0800b8bd
 80081d4:	0800ba4c 	.word	0x0800ba4c
 80081d8:	0800bd60 	.word	0x0800bd60
 80081dc:	0800bc40 	.word	0x0800bc40
 80081e0:	0800bc18 	.word	0x0800bc18
 80081e4:	7ff00000 	.word	0x7ff00000
 80081e8:	7ca00000 	.word	0x7ca00000
 80081ec:	7fefffff 	.word	0x7fefffff
 80081f0:	f018 0310 	ands.w	r3, r8, #16
 80081f4:	bf18      	it	ne
 80081f6:	236a      	movne	r3, #106	; 0x6a
 80081f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80085a8 <_strtod_l+0x970>
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	4650      	mov	r0, sl
 8008200:	4659      	mov	r1, fp
 8008202:	2300      	movs	r3, #0
 8008204:	f018 0f01 	tst.w	r8, #1
 8008208:	d004      	beq.n	8008214 <_strtod_l+0x5dc>
 800820a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800820e:	f7f8 f9f3 	bl	80005f8 <__aeabi_dmul>
 8008212:	2301      	movs	r3, #1
 8008214:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008218:	f109 0908 	add.w	r9, r9, #8
 800821c:	d1f2      	bne.n	8008204 <_strtod_l+0x5cc>
 800821e:	b10b      	cbz	r3, 8008224 <_strtod_l+0x5ec>
 8008220:	4682      	mov	sl, r0
 8008222:	468b      	mov	fp, r1
 8008224:	9b04      	ldr	r3, [sp, #16]
 8008226:	b1c3      	cbz	r3, 800825a <_strtod_l+0x622>
 8008228:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800822c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008230:	2b00      	cmp	r3, #0
 8008232:	4659      	mov	r1, fp
 8008234:	dd11      	ble.n	800825a <_strtod_l+0x622>
 8008236:	2b1f      	cmp	r3, #31
 8008238:	f340 8124 	ble.w	8008484 <_strtod_l+0x84c>
 800823c:	2b34      	cmp	r3, #52	; 0x34
 800823e:	bfde      	ittt	le
 8008240:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008244:	f04f 33ff 	movle.w	r3, #4294967295
 8008248:	fa03 f202 	lslle.w	r2, r3, r2
 800824c:	f04f 0a00 	mov.w	sl, #0
 8008250:	bfcc      	ite	gt
 8008252:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008256:	ea02 0b01 	andle.w	fp, r2, r1
 800825a:	2200      	movs	r2, #0
 800825c:	2300      	movs	r3, #0
 800825e:	4650      	mov	r0, sl
 8008260:	4659      	mov	r1, fp
 8008262:	f7f8 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008266:	2800      	cmp	r0, #0
 8008268:	d1a2      	bne.n	80081b0 <_strtod_l+0x578>
 800826a:	9b07      	ldr	r3, [sp, #28]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	9908      	ldr	r1, [sp, #32]
 8008270:	462b      	mov	r3, r5
 8008272:	463a      	mov	r2, r7
 8008274:	4620      	mov	r0, r4
 8008276:	f002 f917 	bl	800a4a8 <__s2b>
 800827a:	9007      	str	r0, [sp, #28]
 800827c:	2800      	cmp	r0, #0
 800827e:	f43f af1f 	beq.w	80080c0 <_strtod_l+0x488>
 8008282:	9b05      	ldr	r3, [sp, #20]
 8008284:	1b9e      	subs	r6, r3, r6
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfb4      	ite	lt
 800828c:	4633      	movlt	r3, r6
 800828e:	2300      	movge	r3, #0
 8008290:	930c      	str	r3, [sp, #48]	; 0x30
 8008292:	9b06      	ldr	r3, [sp, #24]
 8008294:	2500      	movs	r5, #0
 8008296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800829a:	9312      	str	r3, [sp, #72]	; 0x48
 800829c:	462e      	mov	r6, r5
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	4620      	mov	r0, r4
 80082a2:	6859      	ldr	r1, [r3, #4]
 80082a4:	f002 f858 	bl	800a358 <_Balloc>
 80082a8:	9005      	str	r0, [sp, #20]
 80082aa:	2800      	cmp	r0, #0
 80082ac:	f43f af0c 	beq.w	80080c8 <_strtod_l+0x490>
 80082b0:	9b07      	ldr	r3, [sp, #28]
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	3202      	adds	r2, #2
 80082b6:	f103 010c 	add.w	r1, r3, #12
 80082ba:	0092      	lsls	r2, r2, #2
 80082bc:	300c      	adds	r0, #12
 80082be:	f002 f83d 	bl	800a33c <memcpy>
 80082c2:	ec4b ab10 	vmov	d0, sl, fp
 80082c6:	aa1a      	add	r2, sp, #104	; 0x68
 80082c8:	a919      	add	r1, sp, #100	; 0x64
 80082ca:	4620      	mov	r0, r4
 80082cc:	f002 fc32 	bl	800ab34 <__d2b>
 80082d0:	ec4b ab18 	vmov	d8, sl, fp
 80082d4:	9018      	str	r0, [sp, #96]	; 0x60
 80082d6:	2800      	cmp	r0, #0
 80082d8:	f43f aef6 	beq.w	80080c8 <_strtod_l+0x490>
 80082dc:	2101      	movs	r1, #1
 80082de:	4620      	mov	r0, r4
 80082e0:	f002 f97c 	bl	800a5dc <__i2b>
 80082e4:	4606      	mov	r6, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f aeee 	beq.w	80080c8 <_strtod_l+0x490>
 80082ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80082ee:	9904      	ldr	r1, [sp, #16]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	bfab      	itete	ge
 80082f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80082f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80082f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80082fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80082fe:	bfac      	ite	ge
 8008300:	eb03 0902 	addge.w	r9, r3, r2
 8008304:	1ad7      	sublt	r7, r2, r3
 8008306:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008308:	eba3 0801 	sub.w	r8, r3, r1
 800830c:	4490      	add	r8, r2
 800830e:	4ba1      	ldr	r3, [pc, #644]	; (8008594 <_strtod_l+0x95c>)
 8008310:	f108 38ff 	add.w	r8, r8, #4294967295
 8008314:	4598      	cmp	r8, r3
 8008316:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800831a:	f280 80c7 	bge.w	80084ac <_strtod_l+0x874>
 800831e:	eba3 0308 	sub.w	r3, r3, r8
 8008322:	2b1f      	cmp	r3, #31
 8008324:	eba2 0203 	sub.w	r2, r2, r3
 8008328:	f04f 0101 	mov.w	r1, #1
 800832c:	f300 80b1 	bgt.w	8008492 <_strtod_l+0x85a>
 8008330:	fa01 f303 	lsl.w	r3, r1, r3
 8008334:	930d      	str	r3, [sp, #52]	; 0x34
 8008336:	2300      	movs	r3, #0
 8008338:	9308      	str	r3, [sp, #32]
 800833a:	eb09 0802 	add.w	r8, r9, r2
 800833e:	9b04      	ldr	r3, [sp, #16]
 8008340:	45c1      	cmp	r9, r8
 8008342:	4417      	add	r7, r2
 8008344:	441f      	add	r7, r3
 8008346:	464b      	mov	r3, r9
 8008348:	bfa8      	it	ge
 800834a:	4643      	movge	r3, r8
 800834c:	42bb      	cmp	r3, r7
 800834e:	bfa8      	it	ge
 8008350:	463b      	movge	r3, r7
 8008352:	2b00      	cmp	r3, #0
 8008354:	bfc2      	ittt	gt
 8008356:	eba8 0803 	subgt.w	r8, r8, r3
 800835a:	1aff      	subgt	r7, r7, r3
 800835c:	eba9 0903 	subgt.w	r9, r9, r3
 8008360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008362:	2b00      	cmp	r3, #0
 8008364:	dd17      	ble.n	8008396 <_strtod_l+0x75e>
 8008366:	4631      	mov	r1, r6
 8008368:	461a      	mov	r2, r3
 800836a:	4620      	mov	r0, r4
 800836c:	f002 f9f6 	bl	800a75c <__pow5mult>
 8008370:	4606      	mov	r6, r0
 8008372:	2800      	cmp	r0, #0
 8008374:	f43f aea8 	beq.w	80080c8 <_strtod_l+0x490>
 8008378:	4601      	mov	r1, r0
 800837a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800837c:	4620      	mov	r0, r4
 800837e:	f002 f943 	bl	800a608 <__multiply>
 8008382:	900b      	str	r0, [sp, #44]	; 0x2c
 8008384:	2800      	cmp	r0, #0
 8008386:	f43f ae9f 	beq.w	80080c8 <_strtod_l+0x490>
 800838a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800838c:	4620      	mov	r0, r4
 800838e:	f002 f823 	bl	800a3d8 <_Bfree>
 8008392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008394:	9318      	str	r3, [sp, #96]	; 0x60
 8008396:	f1b8 0f00 	cmp.w	r8, #0
 800839a:	f300 808c 	bgt.w	80084b6 <_strtod_l+0x87e>
 800839e:	9b06      	ldr	r3, [sp, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dd08      	ble.n	80083b6 <_strtod_l+0x77e>
 80083a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083a6:	9905      	ldr	r1, [sp, #20]
 80083a8:	4620      	mov	r0, r4
 80083aa:	f002 f9d7 	bl	800a75c <__pow5mult>
 80083ae:	9005      	str	r0, [sp, #20]
 80083b0:	2800      	cmp	r0, #0
 80083b2:	f43f ae89 	beq.w	80080c8 <_strtod_l+0x490>
 80083b6:	2f00      	cmp	r7, #0
 80083b8:	dd08      	ble.n	80083cc <_strtod_l+0x794>
 80083ba:	9905      	ldr	r1, [sp, #20]
 80083bc:	463a      	mov	r2, r7
 80083be:	4620      	mov	r0, r4
 80083c0:	f002 fa26 	bl	800a810 <__lshift>
 80083c4:	9005      	str	r0, [sp, #20]
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f43f ae7e 	beq.w	80080c8 <_strtod_l+0x490>
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	dd08      	ble.n	80083e4 <_strtod_l+0x7ac>
 80083d2:	4631      	mov	r1, r6
 80083d4:	464a      	mov	r2, r9
 80083d6:	4620      	mov	r0, r4
 80083d8:	f002 fa1a 	bl	800a810 <__lshift>
 80083dc:	4606      	mov	r6, r0
 80083de:	2800      	cmp	r0, #0
 80083e0:	f43f ae72 	beq.w	80080c8 <_strtod_l+0x490>
 80083e4:	9a05      	ldr	r2, [sp, #20]
 80083e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80083e8:	4620      	mov	r0, r4
 80083ea:	f002 fa9d 	bl	800a928 <__mdiff>
 80083ee:	4605      	mov	r5, r0
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f43f ae69 	beq.w	80080c8 <_strtod_l+0x490>
 80083f6:	68c3      	ldr	r3, [r0, #12]
 80083f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80083fa:	2300      	movs	r3, #0
 80083fc:	60c3      	str	r3, [r0, #12]
 80083fe:	4631      	mov	r1, r6
 8008400:	f002 fa76 	bl	800a8f0 <__mcmp>
 8008404:	2800      	cmp	r0, #0
 8008406:	da60      	bge.n	80084ca <_strtod_l+0x892>
 8008408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840a:	ea53 030a 	orrs.w	r3, r3, sl
 800840e:	f040 8082 	bne.w	8008516 <_strtod_l+0x8de>
 8008412:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008416:	2b00      	cmp	r3, #0
 8008418:	d17d      	bne.n	8008516 <_strtod_l+0x8de>
 800841a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800841e:	0d1b      	lsrs	r3, r3, #20
 8008420:	051b      	lsls	r3, r3, #20
 8008422:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008426:	d976      	bls.n	8008516 <_strtod_l+0x8de>
 8008428:	696b      	ldr	r3, [r5, #20]
 800842a:	b913      	cbnz	r3, 8008432 <_strtod_l+0x7fa>
 800842c:	692b      	ldr	r3, [r5, #16]
 800842e:	2b01      	cmp	r3, #1
 8008430:	dd71      	ble.n	8008516 <_strtod_l+0x8de>
 8008432:	4629      	mov	r1, r5
 8008434:	2201      	movs	r2, #1
 8008436:	4620      	mov	r0, r4
 8008438:	f002 f9ea 	bl	800a810 <__lshift>
 800843c:	4631      	mov	r1, r6
 800843e:	4605      	mov	r5, r0
 8008440:	f002 fa56 	bl	800a8f0 <__mcmp>
 8008444:	2800      	cmp	r0, #0
 8008446:	dd66      	ble.n	8008516 <_strtod_l+0x8de>
 8008448:	9904      	ldr	r1, [sp, #16]
 800844a:	4a53      	ldr	r2, [pc, #332]	; (8008598 <_strtod_l+0x960>)
 800844c:	465b      	mov	r3, fp
 800844e:	2900      	cmp	r1, #0
 8008450:	f000 8081 	beq.w	8008556 <_strtod_l+0x91e>
 8008454:	ea02 010b 	and.w	r1, r2, fp
 8008458:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800845c:	dc7b      	bgt.n	8008556 <_strtod_l+0x91e>
 800845e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008462:	f77f aea9 	ble.w	80081b8 <_strtod_l+0x580>
 8008466:	4b4d      	ldr	r3, [pc, #308]	; (800859c <_strtod_l+0x964>)
 8008468:	4650      	mov	r0, sl
 800846a:	4659      	mov	r1, fp
 800846c:	2200      	movs	r2, #0
 800846e:	f7f8 f8c3 	bl	80005f8 <__aeabi_dmul>
 8008472:	460b      	mov	r3, r1
 8008474:	4303      	orrs	r3, r0
 8008476:	bf08      	it	eq
 8008478:	2322      	moveq	r3, #34	; 0x22
 800847a:	4682      	mov	sl, r0
 800847c:	468b      	mov	fp, r1
 800847e:	bf08      	it	eq
 8008480:	6023      	streq	r3, [r4, #0]
 8008482:	e62b      	b.n	80080dc <_strtod_l+0x4a4>
 8008484:	f04f 32ff 	mov.w	r2, #4294967295
 8008488:	fa02 f303 	lsl.w	r3, r2, r3
 800848c:	ea03 0a0a 	and.w	sl, r3, sl
 8008490:	e6e3      	b.n	800825a <_strtod_l+0x622>
 8008492:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008496:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800849a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800849e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80084a2:	fa01 f308 	lsl.w	r3, r1, r8
 80084a6:	9308      	str	r3, [sp, #32]
 80084a8:	910d      	str	r1, [sp, #52]	; 0x34
 80084aa:	e746      	b.n	800833a <_strtod_l+0x702>
 80084ac:	2300      	movs	r3, #0
 80084ae:	9308      	str	r3, [sp, #32]
 80084b0:	2301      	movs	r3, #1
 80084b2:	930d      	str	r3, [sp, #52]	; 0x34
 80084b4:	e741      	b.n	800833a <_strtod_l+0x702>
 80084b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084b8:	4642      	mov	r2, r8
 80084ba:	4620      	mov	r0, r4
 80084bc:	f002 f9a8 	bl	800a810 <__lshift>
 80084c0:	9018      	str	r0, [sp, #96]	; 0x60
 80084c2:	2800      	cmp	r0, #0
 80084c4:	f47f af6b 	bne.w	800839e <_strtod_l+0x766>
 80084c8:	e5fe      	b.n	80080c8 <_strtod_l+0x490>
 80084ca:	465f      	mov	r7, fp
 80084cc:	d16e      	bne.n	80085ac <_strtod_l+0x974>
 80084ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084d4:	b342      	cbz	r2, 8008528 <_strtod_l+0x8f0>
 80084d6:	4a32      	ldr	r2, [pc, #200]	; (80085a0 <_strtod_l+0x968>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d128      	bne.n	800852e <_strtod_l+0x8f6>
 80084dc:	9b04      	ldr	r3, [sp, #16]
 80084de:	4651      	mov	r1, sl
 80084e0:	b1eb      	cbz	r3, 800851e <_strtod_l+0x8e6>
 80084e2:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <_strtod_l+0x960>)
 80084e4:	403b      	ands	r3, r7
 80084e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084ea:	f04f 32ff 	mov.w	r2, #4294967295
 80084ee:	d819      	bhi.n	8008524 <_strtod_l+0x8ec>
 80084f0:	0d1b      	lsrs	r3, r3, #20
 80084f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80084f6:	fa02 f303 	lsl.w	r3, r2, r3
 80084fa:	4299      	cmp	r1, r3
 80084fc:	d117      	bne.n	800852e <_strtod_l+0x8f6>
 80084fe:	4b29      	ldr	r3, [pc, #164]	; (80085a4 <_strtod_l+0x96c>)
 8008500:	429f      	cmp	r7, r3
 8008502:	d102      	bne.n	800850a <_strtod_l+0x8d2>
 8008504:	3101      	adds	r1, #1
 8008506:	f43f addf 	beq.w	80080c8 <_strtod_l+0x490>
 800850a:	4b23      	ldr	r3, [pc, #140]	; (8008598 <_strtod_l+0x960>)
 800850c:	403b      	ands	r3, r7
 800850e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008512:	f04f 0a00 	mov.w	sl, #0
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1a4      	bne.n	8008466 <_strtod_l+0x82e>
 800851c:	e5de      	b.n	80080dc <_strtod_l+0x4a4>
 800851e:	f04f 33ff 	mov.w	r3, #4294967295
 8008522:	e7ea      	b.n	80084fa <_strtod_l+0x8c2>
 8008524:	4613      	mov	r3, r2
 8008526:	e7e8      	b.n	80084fa <_strtod_l+0x8c2>
 8008528:	ea53 030a 	orrs.w	r3, r3, sl
 800852c:	d08c      	beq.n	8008448 <_strtod_l+0x810>
 800852e:	9b08      	ldr	r3, [sp, #32]
 8008530:	b1db      	cbz	r3, 800856a <_strtod_l+0x932>
 8008532:	423b      	tst	r3, r7
 8008534:	d0ef      	beq.n	8008516 <_strtod_l+0x8de>
 8008536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008538:	9a04      	ldr	r2, [sp, #16]
 800853a:	4650      	mov	r0, sl
 800853c:	4659      	mov	r1, fp
 800853e:	b1c3      	cbz	r3, 8008572 <_strtod_l+0x93a>
 8008540:	f7ff fb5e 	bl	8007c00 <sulp>
 8008544:	4602      	mov	r2, r0
 8008546:	460b      	mov	r3, r1
 8008548:	ec51 0b18 	vmov	r0, r1, d8
 800854c:	f7f7 fe9e 	bl	800028c <__adddf3>
 8008550:	4682      	mov	sl, r0
 8008552:	468b      	mov	fp, r1
 8008554:	e7df      	b.n	8008516 <_strtod_l+0x8de>
 8008556:	4013      	ands	r3, r2
 8008558:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800855c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008560:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008564:	f04f 3aff 	mov.w	sl, #4294967295
 8008568:	e7d5      	b.n	8008516 <_strtod_l+0x8de>
 800856a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800856c:	ea13 0f0a 	tst.w	r3, sl
 8008570:	e7e0      	b.n	8008534 <_strtod_l+0x8fc>
 8008572:	f7ff fb45 	bl	8007c00 <sulp>
 8008576:	4602      	mov	r2, r0
 8008578:	460b      	mov	r3, r1
 800857a:	ec51 0b18 	vmov	r0, r1, d8
 800857e:	f7f7 fe83 	bl	8000288 <__aeabi_dsub>
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4682      	mov	sl, r0
 8008588:	468b      	mov	fp, r1
 800858a:	f7f8 fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800858e:	2800      	cmp	r0, #0
 8008590:	d0c1      	beq.n	8008516 <_strtod_l+0x8de>
 8008592:	e611      	b.n	80081b8 <_strtod_l+0x580>
 8008594:	fffffc02 	.word	0xfffffc02
 8008598:	7ff00000 	.word	0x7ff00000
 800859c:	39500000 	.word	0x39500000
 80085a0:	000fffff 	.word	0x000fffff
 80085a4:	7fefffff 	.word	0x7fefffff
 80085a8:	0800b920 	.word	0x0800b920
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	f002 fb1c 	bl	800abec <__ratio>
 80085b4:	ec59 8b10 	vmov	r8, r9, d0
 80085b8:	ee10 0a10 	vmov	r0, s0
 80085bc:	2200      	movs	r2, #0
 80085be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80085c2:	4649      	mov	r1, r9
 80085c4:	f7f8 fa94 	bl	8000af0 <__aeabi_dcmple>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d07a      	beq.n	80086c2 <_strtod_l+0xa8a>
 80085cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d04a      	beq.n	8008668 <_strtod_l+0xa30>
 80085d2:	4b95      	ldr	r3, [pc, #596]	; (8008828 <_strtod_l+0xbf0>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008828 <_strtod_l+0xbf0>
 80085de:	f04f 0800 	mov.w	r8, #0
 80085e2:	4b92      	ldr	r3, [pc, #584]	; (800882c <_strtod_l+0xbf4>)
 80085e4:	403b      	ands	r3, r7
 80085e6:	930d      	str	r3, [sp, #52]	; 0x34
 80085e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085ea:	4b91      	ldr	r3, [pc, #580]	; (8008830 <_strtod_l+0xbf8>)
 80085ec:	429a      	cmp	r2, r3
 80085ee:	f040 80b0 	bne.w	8008752 <_strtod_l+0xb1a>
 80085f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80085fa:	ec4b ab10 	vmov	d0, sl, fp
 80085fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008602:	f002 fa1b 	bl	800aa3c <__ulp>
 8008606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800860a:	ec53 2b10 	vmov	r2, r3, d0
 800860e:	f7f7 fff3 	bl	80005f8 <__aeabi_dmul>
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	f7f7 fe39 	bl	800028c <__adddf3>
 800861a:	460b      	mov	r3, r1
 800861c:	4983      	ldr	r1, [pc, #524]	; (800882c <_strtod_l+0xbf4>)
 800861e:	4a85      	ldr	r2, [pc, #532]	; (8008834 <_strtod_l+0xbfc>)
 8008620:	4019      	ands	r1, r3
 8008622:	4291      	cmp	r1, r2
 8008624:	4682      	mov	sl, r0
 8008626:	d960      	bls.n	80086ea <_strtod_l+0xab2>
 8008628:	ee18 3a90 	vmov	r3, s17
 800862c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008630:	4293      	cmp	r3, r2
 8008632:	d104      	bne.n	800863e <_strtod_l+0xa06>
 8008634:	ee18 3a10 	vmov	r3, s16
 8008638:	3301      	adds	r3, #1
 800863a:	f43f ad45 	beq.w	80080c8 <_strtod_l+0x490>
 800863e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008840 <_strtod_l+0xc08>
 8008642:	f04f 3aff 	mov.w	sl, #4294967295
 8008646:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008648:	4620      	mov	r0, r4
 800864a:	f001 fec5 	bl	800a3d8 <_Bfree>
 800864e:	9905      	ldr	r1, [sp, #20]
 8008650:	4620      	mov	r0, r4
 8008652:	f001 fec1 	bl	800a3d8 <_Bfree>
 8008656:	4631      	mov	r1, r6
 8008658:	4620      	mov	r0, r4
 800865a:	f001 febd 	bl	800a3d8 <_Bfree>
 800865e:	4629      	mov	r1, r5
 8008660:	4620      	mov	r0, r4
 8008662:	f001 feb9 	bl	800a3d8 <_Bfree>
 8008666:	e61a      	b.n	800829e <_strtod_l+0x666>
 8008668:	f1ba 0f00 	cmp.w	sl, #0
 800866c:	d11b      	bne.n	80086a6 <_strtod_l+0xa6e>
 800866e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008672:	b9f3      	cbnz	r3, 80086b2 <_strtod_l+0xa7a>
 8008674:	4b6c      	ldr	r3, [pc, #432]	; (8008828 <_strtod_l+0xbf0>)
 8008676:	2200      	movs	r2, #0
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f8 fa2e 	bl	8000adc <__aeabi_dcmplt>
 8008680:	b9d0      	cbnz	r0, 80086b8 <_strtod_l+0xa80>
 8008682:	4640      	mov	r0, r8
 8008684:	4649      	mov	r1, r9
 8008686:	4b6c      	ldr	r3, [pc, #432]	; (8008838 <_strtod_l+0xc00>)
 8008688:	2200      	movs	r2, #0
 800868a:	f7f7 ffb5 	bl	80005f8 <__aeabi_dmul>
 800868e:	4680      	mov	r8, r0
 8008690:	4689      	mov	r9, r1
 8008692:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008696:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800869a:	9315      	str	r3, [sp, #84]	; 0x54
 800869c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80086a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80086a4:	e79d      	b.n	80085e2 <_strtod_l+0x9aa>
 80086a6:	f1ba 0f01 	cmp.w	sl, #1
 80086aa:	d102      	bne.n	80086b2 <_strtod_l+0xa7a>
 80086ac:	2f00      	cmp	r7, #0
 80086ae:	f43f ad83 	beq.w	80081b8 <_strtod_l+0x580>
 80086b2:	4b62      	ldr	r3, [pc, #392]	; (800883c <_strtod_l+0xc04>)
 80086b4:	2200      	movs	r2, #0
 80086b6:	e78e      	b.n	80085d6 <_strtod_l+0x99e>
 80086b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008838 <_strtod_l+0xc00>
 80086bc:	f04f 0800 	mov.w	r8, #0
 80086c0:	e7e7      	b.n	8008692 <_strtod_l+0xa5a>
 80086c2:	4b5d      	ldr	r3, [pc, #372]	; (8008838 <_strtod_l+0xc00>)
 80086c4:	4640      	mov	r0, r8
 80086c6:	4649      	mov	r1, r9
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7f7 ff95 	bl	80005f8 <__aeabi_dmul>
 80086ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d0:	4680      	mov	r8, r0
 80086d2:	4689      	mov	r9, r1
 80086d4:	b933      	cbnz	r3, 80086e4 <_strtod_l+0xaac>
 80086d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086da:	900e      	str	r0, [sp, #56]	; 0x38
 80086dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80086de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80086e2:	e7dd      	b.n	80086a0 <_strtod_l+0xa68>
 80086e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80086e8:	e7f9      	b.n	80086de <_strtod_l+0xaa6>
 80086ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1a8      	bne.n	8008646 <_strtod_l+0xa0e>
 80086f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80086f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086fa:	0d1b      	lsrs	r3, r3, #20
 80086fc:	051b      	lsls	r3, r3, #20
 80086fe:	429a      	cmp	r2, r3
 8008700:	d1a1      	bne.n	8008646 <_strtod_l+0xa0e>
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	f7f8 fad7 	bl	8000cb8 <__aeabi_d2lz>
 800870a:	f7f7 ff47 	bl	800059c <__aeabi_l2d>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4640      	mov	r0, r8
 8008714:	4649      	mov	r1, r9
 8008716:	f7f7 fdb7 	bl	8000288 <__aeabi_dsub>
 800871a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800871c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008720:	ea43 030a 	orr.w	r3, r3, sl
 8008724:	4313      	orrs	r3, r2
 8008726:	4680      	mov	r8, r0
 8008728:	4689      	mov	r9, r1
 800872a:	d055      	beq.n	80087d8 <_strtod_l+0xba0>
 800872c:	a336      	add	r3, pc, #216	; (adr r3, 8008808 <_strtod_l+0xbd0>)
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f7f8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f47f acd0 	bne.w	80080dc <_strtod_l+0x4a4>
 800873c:	a334      	add	r3, pc, #208	; (adr r3, 8008810 <_strtod_l+0xbd8>)
 800873e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008742:	4640      	mov	r0, r8
 8008744:	4649      	mov	r1, r9
 8008746:	f7f8 f9e7 	bl	8000b18 <__aeabi_dcmpgt>
 800874a:	2800      	cmp	r0, #0
 800874c:	f43f af7b 	beq.w	8008646 <_strtod_l+0xa0e>
 8008750:	e4c4      	b.n	80080dc <_strtod_l+0x4a4>
 8008752:	9b04      	ldr	r3, [sp, #16]
 8008754:	b333      	cbz	r3, 80087a4 <_strtod_l+0xb6c>
 8008756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008758:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800875c:	d822      	bhi.n	80087a4 <_strtod_l+0xb6c>
 800875e:	a32e      	add	r3, pc, #184	; (adr r3, 8008818 <_strtod_l+0xbe0>)
 8008760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008764:	4640      	mov	r0, r8
 8008766:	4649      	mov	r1, r9
 8008768:	f7f8 f9c2 	bl	8000af0 <__aeabi_dcmple>
 800876c:	b1a0      	cbz	r0, 8008798 <_strtod_l+0xb60>
 800876e:	4649      	mov	r1, r9
 8008770:	4640      	mov	r0, r8
 8008772:	f7f8 fa19 	bl	8000ba8 <__aeabi_d2uiz>
 8008776:	2801      	cmp	r0, #1
 8008778:	bf38      	it	cc
 800877a:	2001      	movcc	r0, #1
 800877c:	f7f7 fec2 	bl	8000504 <__aeabi_ui2d>
 8008780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008782:	4680      	mov	r8, r0
 8008784:	4689      	mov	r9, r1
 8008786:	bb23      	cbnz	r3, 80087d2 <_strtod_l+0xb9a>
 8008788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800878c:	9010      	str	r0, [sp, #64]	; 0x40
 800878e:	9311      	str	r3, [sp, #68]	; 0x44
 8008790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008794:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800879c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	9309      	str	r3, [sp, #36]	; 0x24
 80087a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087a8:	eeb0 0a48 	vmov.f32	s0, s16
 80087ac:	eef0 0a68 	vmov.f32	s1, s17
 80087b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80087b4:	f002 f942 	bl	800aa3c <__ulp>
 80087b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80087bc:	ec53 2b10 	vmov	r2, r3, d0
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	ec53 2b18 	vmov	r2, r3, d8
 80087c8:	f7f7 fd60 	bl	800028c <__adddf3>
 80087cc:	4682      	mov	sl, r0
 80087ce:	468b      	mov	fp, r1
 80087d0:	e78d      	b.n	80086ee <_strtod_l+0xab6>
 80087d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80087d6:	e7db      	b.n	8008790 <_strtod_l+0xb58>
 80087d8:	a311      	add	r3, pc, #68	; (adr r3, 8008820 <_strtod_l+0xbe8>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f8 f97d 	bl	8000adc <__aeabi_dcmplt>
 80087e2:	e7b2      	b.n	800874a <_strtod_l+0xb12>
 80087e4:	2300      	movs	r3, #0
 80087e6:	930a      	str	r3, [sp, #40]	; 0x28
 80087e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80087ec:	6013      	str	r3, [r2, #0]
 80087ee:	f7ff ba6b 	b.w	8007cc8 <_strtod_l+0x90>
 80087f2:	2a65      	cmp	r2, #101	; 0x65
 80087f4:	f43f ab5f 	beq.w	8007eb6 <_strtod_l+0x27e>
 80087f8:	2a45      	cmp	r2, #69	; 0x45
 80087fa:	f43f ab5c 	beq.w	8007eb6 <_strtod_l+0x27e>
 80087fe:	2301      	movs	r3, #1
 8008800:	f7ff bb94 	b.w	8007f2c <_strtod_l+0x2f4>
 8008804:	f3af 8000 	nop.w
 8008808:	94a03595 	.word	0x94a03595
 800880c:	3fdfffff 	.word	0x3fdfffff
 8008810:	35afe535 	.word	0x35afe535
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	ffc00000 	.word	0xffc00000
 800881c:	41dfffff 	.word	0x41dfffff
 8008820:	94a03595 	.word	0x94a03595
 8008824:	3fcfffff 	.word	0x3fcfffff
 8008828:	3ff00000 	.word	0x3ff00000
 800882c:	7ff00000 	.word	0x7ff00000
 8008830:	7fe00000 	.word	0x7fe00000
 8008834:	7c9fffff 	.word	0x7c9fffff
 8008838:	3fe00000 	.word	0x3fe00000
 800883c:	bff00000 	.word	0xbff00000
 8008840:	7fefffff 	.word	0x7fefffff

08008844 <_strtod_r>:
 8008844:	4b01      	ldr	r3, [pc, #4]	; (800884c <_strtod_r+0x8>)
 8008846:	f7ff b9f7 	b.w	8007c38 <_strtod_l>
 800884a:	bf00      	nop
 800884c:	20000078 	.word	0x20000078

08008850 <_strtol_l.constprop.0>:
 8008850:	2b01      	cmp	r3, #1
 8008852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008856:	d001      	beq.n	800885c <_strtol_l.constprop.0+0xc>
 8008858:	2b24      	cmp	r3, #36	; 0x24
 800885a:	d906      	bls.n	800886a <_strtol_l.constprop.0+0x1a>
 800885c:	f7fe fa70 	bl	8006d40 <__errno>
 8008860:	2316      	movs	r3, #22
 8008862:	6003      	str	r3, [r0, #0]
 8008864:	2000      	movs	r0, #0
 8008866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800886a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008950 <_strtol_l.constprop.0+0x100>
 800886e:	460d      	mov	r5, r1
 8008870:	462e      	mov	r6, r5
 8008872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008876:	f814 700c 	ldrb.w	r7, [r4, ip]
 800887a:	f017 0708 	ands.w	r7, r7, #8
 800887e:	d1f7      	bne.n	8008870 <_strtol_l.constprop.0+0x20>
 8008880:	2c2d      	cmp	r4, #45	; 0x2d
 8008882:	d132      	bne.n	80088ea <_strtol_l.constprop.0+0x9a>
 8008884:	782c      	ldrb	r4, [r5, #0]
 8008886:	2701      	movs	r7, #1
 8008888:	1cb5      	adds	r5, r6, #2
 800888a:	2b00      	cmp	r3, #0
 800888c:	d05b      	beq.n	8008946 <_strtol_l.constprop.0+0xf6>
 800888e:	2b10      	cmp	r3, #16
 8008890:	d109      	bne.n	80088a6 <_strtol_l.constprop.0+0x56>
 8008892:	2c30      	cmp	r4, #48	; 0x30
 8008894:	d107      	bne.n	80088a6 <_strtol_l.constprop.0+0x56>
 8008896:	782c      	ldrb	r4, [r5, #0]
 8008898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800889c:	2c58      	cmp	r4, #88	; 0x58
 800889e:	d14d      	bne.n	800893c <_strtol_l.constprop.0+0xec>
 80088a0:	786c      	ldrb	r4, [r5, #1]
 80088a2:	2310      	movs	r3, #16
 80088a4:	3502      	adds	r5, #2
 80088a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80088aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80088ae:	f04f 0c00 	mov.w	ip, #0
 80088b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80088b6:	4666      	mov	r6, ip
 80088b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80088bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80088c0:	f1be 0f09 	cmp.w	lr, #9
 80088c4:	d816      	bhi.n	80088f4 <_strtol_l.constprop.0+0xa4>
 80088c6:	4674      	mov	r4, lr
 80088c8:	42a3      	cmp	r3, r4
 80088ca:	dd24      	ble.n	8008916 <_strtol_l.constprop.0+0xc6>
 80088cc:	f1bc 0f00 	cmp.w	ip, #0
 80088d0:	db1e      	blt.n	8008910 <_strtol_l.constprop.0+0xc0>
 80088d2:	45b1      	cmp	r9, r6
 80088d4:	d31c      	bcc.n	8008910 <_strtol_l.constprop.0+0xc0>
 80088d6:	d101      	bne.n	80088dc <_strtol_l.constprop.0+0x8c>
 80088d8:	45a2      	cmp	sl, r4
 80088da:	db19      	blt.n	8008910 <_strtol_l.constprop.0+0xc0>
 80088dc:	fb06 4603 	mla	r6, r6, r3, r4
 80088e0:	f04f 0c01 	mov.w	ip, #1
 80088e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088e8:	e7e8      	b.n	80088bc <_strtol_l.constprop.0+0x6c>
 80088ea:	2c2b      	cmp	r4, #43	; 0x2b
 80088ec:	bf04      	itt	eq
 80088ee:	782c      	ldrbeq	r4, [r5, #0]
 80088f0:	1cb5      	addeq	r5, r6, #2
 80088f2:	e7ca      	b.n	800888a <_strtol_l.constprop.0+0x3a>
 80088f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80088f8:	f1be 0f19 	cmp.w	lr, #25
 80088fc:	d801      	bhi.n	8008902 <_strtol_l.constprop.0+0xb2>
 80088fe:	3c37      	subs	r4, #55	; 0x37
 8008900:	e7e2      	b.n	80088c8 <_strtol_l.constprop.0+0x78>
 8008902:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008906:	f1be 0f19 	cmp.w	lr, #25
 800890a:	d804      	bhi.n	8008916 <_strtol_l.constprop.0+0xc6>
 800890c:	3c57      	subs	r4, #87	; 0x57
 800890e:	e7db      	b.n	80088c8 <_strtol_l.constprop.0+0x78>
 8008910:	f04f 3cff 	mov.w	ip, #4294967295
 8008914:	e7e6      	b.n	80088e4 <_strtol_l.constprop.0+0x94>
 8008916:	f1bc 0f00 	cmp.w	ip, #0
 800891a:	da05      	bge.n	8008928 <_strtol_l.constprop.0+0xd8>
 800891c:	2322      	movs	r3, #34	; 0x22
 800891e:	6003      	str	r3, [r0, #0]
 8008920:	4646      	mov	r6, r8
 8008922:	b942      	cbnz	r2, 8008936 <_strtol_l.constprop.0+0xe6>
 8008924:	4630      	mov	r0, r6
 8008926:	e79e      	b.n	8008866 <_strtol_l.constprop.0+0x16>
 8008928:	b107      	cbz	r7, 800892c <_strtol_l.constprop.0+0xdc>
 800892a:	4276      	negs	r6, r6
 800892c:	2a00      	cmp	r2, #0
 800892e:	d0f9      	beq.n	8008924 <_strtol_l.constprop.0+0xd4>
 8008930:	f1bc 0f00 	cmp.w	ip, #0
 8008934:	d000      	beq.n	8008938 <_strtol_l.constprop.0+0xe8>
 8008936:	1e69      	subs	r1, r5, #1
 8008938:	6011      	str	r1, [r2, #0]
 800893a:	e7f3      	b.n	8008924 <_strtol_l.constprop.0+0xd4>
 800893c:	2430      	movs	r4, #48	; 0x30
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1b1      	bne.n	80088a6 <_strtol_l.constprop.0+0x56>
 8008942:	2308      	movs	r3, #8
 8008944:	e7af      	b.n	80088a6 <_strtol_l.constprop.0+0x56>
 8008946:	2c30      	cmp	r4, #48	; 0x30
 8008948:	d0a5      	beq.n	8008896 <_strtol_l.constprop.0+0x46>
 800894a:	230a      	movs	r3, #10
 800894c:	e7ab      	b.n	80088a6 <_strtol_l.constprop.0+0x56>
 800894e:	bf00      	nop
 8008950:	0800b949 	.word	0x0800b949

08008954 <_strtol_r>:
 8008954:	f7ff bf7c 	b.w	8008850 <_strtol_l.constprop.0>

08008958 <strtol>:
 8008958:	4613      	mov	r3, r2
 800895a:	460a      	mov	r2, r1
 800895c:	4601      	mov	r1, r0
 800895e:	4802      	ldr	r0, [pc, #8]	; (8008968 <strtol+0x10>)
 8008960:	6800      	ldr	r0, [r0, #0]
 8008962:	f7ff bf75 	b.w	8008850 <_strtol_l.constprop.0>
 8008966:	bf00      	nop
 8008968:	20000010 	.word	0x20000010

0800896c <__swbuf_r>:
 800896c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896e:	460e      	mov	r6, r1
 8008970:	4614      	mov	r4, r2
 8008972:	4605      	mov	r5, r0
 8008974:	b118      	cbz	r0, 800897e <__swbuf_r+0x12>
 8008976:	6983      	ldr	r3, [r0, #24]
 8008978:	b90b      	cbnz	r3, 800897e <__swbuf_r+0x12>
 800897a:	f001 f84d 	bl	8009a18 <__sinit>
 800897e:	4b21      	ldr	r3, [pc, #132]	; (8008a04 <__swbuf_r+0x98>)
 8008980:	429c      	cmp	r4, r3
 8008982:	d12b      	bne.n	80089dc <__swbuf_r+0x70>
 8008984:	686c      	ldr	r4, [r5, #4]
 8008986:	69a3      	ldr	r3, [r4, #24]
 8008988:	60a3      	str	r3, [r4, #8]
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	071a      	lsls	r2, r3, #28
 800898e:	d52f      	bpl.n	80089f0 <__swbuf_r+0x84>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	b36b      	cbz	r3, 80089f0 <__swbuf_r+0x84>
 8008994:	6923      	ldr	r3, [r4, #16]
 8008996:	6820      	ldr	r0, [r4, #0]
 8008998:	1ac0      	subs	r0, r0, r3
 800899a:	6963      	ldr	r3, [r4, #20]
 800899c:	b2f6      	uxtb	r6, r6
 800899e:	4283      	cmp	r3, r0
 80089a0:	4637      	mov	r7, r6
 80089a2:	dc04      	bgt.n	80089ae <__swbuf_r+0x42>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f000 ffa2 	bl	80098f0 <_fflush_r>
 80089ac:	bb30      	cbnz	r0, 80089fc <__swbuf_r+0x90>
 80089ae:	68a3      	ldr	r3, [r4, #8]
 80089b0:	3b01      	subs	r3, #1
 80089b2:	60a3      	str	r3, [r4, #8]
 80089b4:	6823      	ldr	r3, [r4, #0]
 80089b6:	1c5a      	adds	r2, r3, #1
 80089b8:	6022      	str	r2, [r4, #0]
 80089ba:	701e      	strb	r6, [r3, #0]
 80089bc:	6963      	ldr	r3, [r4, #20]
 80089be:	3001      	adds	r0, #1
 80089c0:	4283      	cmp	r3, r0
 80089c2:	d004      	beq.n	80089ce <__swbuf_r+0x62>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	07db      	lsls	r3, r3, #31
 80089c8:	d506      	bpl.n	80089d8 <__swbuf_r+0x6c>
 80089ca:	2e0a      	cmp	r6, #10
 80089cc:	d104      	bne.n	80089d8 <__swbuf_r+0x6c>
 80089ce:	4621      	mov	r1, r4
 80089d0:	4628      	mov	r0, r5
 80089d2:	f000 ff8d 	bl	80098f0 <_fflush_r>
 80089d6:	b988      	cbnz	r0, 80089fc <__swbuf_r+0x90>
 80089d8:	4638      	mov	r0, r7
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089dc:	4b0a      	ldr	r3, [pc, #40]	; (8008a08 <__swbuf_r+0x9c>)
 80089de:	429c      	cmp	r4, r3
 80089e0:	d101      	bne.n	80089e6 <__swbuf_r+0x7a>
 80089e2:	68ac      	ldr	r4, [r5, #8]
 80089e4:	e7cf      	b.n	8008986 <__swbuf_r+0x1a>
 80089e6:	4b09      	ldr	r3, [pc, #36]	; (8008a0c <__swbuf_r+0xa0>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	bf08      	it	eq
 80089ec:	68ec      	ldreq	r4, [r5, #12]
 80089ee:	e7ca      	b.n	8008986 <__swbuf_r+0x1a>
 80089f0:	4621      	mov	r1, r4
 80089f2:	4628      	mov	r0, r5
 80089f4:	f000 f80c 	bl	8008a10 <__swsetup_r>
 80089f8:	2800      	cmp	r0, #0
 80089fa:	d0cb      	beq.n	8008994 <__swbuf_r+0x28>
 80089fc:	f04f 37ff 	mov.w	r7, #4294967295
 8008a00:	e7ea      	b.n	80089d8 <__swbuf_r+0x6c>
 8008a02:	bf00      	nop
 8008a04:	0800bafc 	.word	0x0800bafc
 8008a08:	0800bb1c 	.word	0x0800bb1c
 8008a0c:	0800badc 	.word	0x0800badc

08008a10 <__swsetup_r>:
 8008a10:	4b32      	ldr	r3, [pc, #200]	; (8008adc <__swsetup_r+0xcc>)
 8008a12:	b570      	push	{r4, r5, r6, lr}
 8008a14:	681d      	ldr	r5, [r3, #0]
 8008a16:	4606      	mov	r6, r0
 8008a18:	460c      	mov	r4, r1
 8008a1a:	b125      	cbz	r5, 8008a26 <__swsetup_r+0x16>
 8008a1c:	69ab      	ldr	r3, [r5, #24]
 8008a1e:	b913      	cbnz	r3, 8008a26 <__swsetup_r+0x16>
 8008a20:	4628      	mov	r0, r5
 8008a22:	f000 fff9 	bl	8009a18 <__sinit>
 8008a26:	4b2e      	ldr	r3, [pc, #184]	; (8008ae0 <__swsetup_r+0xd0>)
 8008a28:	429c      	cmp	r4, r3
 8008a2a:	d10f      	bne.n	8008a4c <__swsetup_r+0x3c>
 8008a2c:	686c      	ldr	r4, [r5, #4]
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a34:	0719      	lsls	r1, r3, #28
 8008a36:	d42c      	bmi.n	8008a92 <__swsetup_r+0x82>
 8008a38:	06dd      	lsls	r5, r3, #27
 8008a3a:	d411      	bmi.n	8008a60 <__swsetup_r+0x50>
 8008a3c:	2309      	movs	r3, #9
 8008a3e:	6033      	str	r3, [r6, #0]
 8008a40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	f04f 30ff 	mov.w	r0, #4294967295
 8008a4a:	e03e      	b.n	8008aca <__swsetup_r+0xba>
 8008a4c:	4b25      	ldr	r3, [pc, #148]	; (8008ae4 <__swsetup_r+0xd4>)
 8008a4e:	429c      	cmp	r4, r3
 8008a50:	d101      	bne.n	8008a56 <__swsetup_r+0x46>
 8008a52:	68ac      	ldr	r4, [r5, #8]
 8008a54:	e7eb      	b.n	8008a2e <__swsetup_r+0x1e>
 8008a56:	4b24      	ldr	r3, [pc, #144]	; (8008ae8 <__swsetup_r+0xd8>)
 8008a58:	429c      	cmp	r4, r3
 8008a5a:	bf08      	it	eq
 8008a5c:	68ec      	ldreq	r4, [r5, #12]
 8008a5e:	e7e6      	b.n	8008a2e <__swsetup_r+0x1e>
 8008a60:	0758      	lsls	r0, r3, #29
 8008a62:	d512      	bpl.n	8008a8a <__swsetup_r+0x7a>
 8008a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a66:	b141      	cbz	r1, 8008a7a <__swsetup_r+0x6a>
 8008a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a6c:	4299      	cmp	r1, r3
 8008a6e:	d002      	beq.n	8008a76 <__swsetup_r+0x66>
 8008a70:	4630      	mov	r0, r6
 8008a72:	f002 f949 	bl	800ad08 <_free_r>
 8008a76:	2300      	movs	r3, #0
 8008a78:	6363      	str	r3, [r4, #52]	; 0x34
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a80:	81a3      	strh	r3, [r4, #12]
 8008a82:	2300      	movs	r3, #0
 8008a84:	6063      	str	r3, [r4, #4]
 8008a86:	6923      	ldr	r3, [r4, #16]
 8008a88:	6023      	str	r3, [r4, #0]
 8008a8a:	89a3      	ldrh	r3, [r4, #12]
 8008a8c:	f043 0308 	orr.w	r3, r3, #8
 8008a90:	81a3      	strh	r3, [r4, #12]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	b94b      	cbnz	r3, 8008aaa <__swsetup_r+0x9a>
 8008a96:	89a3      	ldrh	r3, [r4, #12]
 8008a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aa0:	d003      	beq.n	8008aaa <__swsetup_r+0x9a>
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f001 fbef 	bl	800a288 <__smakebuf_r>
 8008aaa:	89a0      	ldrh	r0, [r4, #12]
 8008aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ab0:	f010 0301 	ands.w	r3, r0, #1
 8008ab4:	d00a      	beq.n	8008acc <__swsetup_r+0xbc>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	60a3      	str	r3, [r4, #8]
 8008aba:	6963      	ldr	r3, [r4, #20]
 8008abc:	425b      	negs	r3, r3
 8008abe:	61a3      	str	r3, [r4, #24]
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	b943      	cbnz	r3, 8008ad6 <__swsetup_r+0xc6>
 8008ac4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ac8:	d1ba      	bne.n	8008a40 <__swsetup_r+0x30>
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
 8008acc:	0781      	lsls	r1, r0, #30
 8008ace:	bf58      	it	pl
 8008ad0:	6963      	ldrpl	r3, [r4, #20]
 8008ad2:	60a3      	str	r3, [r4, #8]
 8008ad4:	e7f4      	b.n	8008ac0 <__swsetup_r+0xb0>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e7f7      	b.n	8008aca <__swsetup_r+0xba>
 8008ada:	bf00      	nop
 8008adc:	20000010 	.word	0x20000010
 8008ae0:	0800bafc 	.word	0x0800bafc
 8008ae4:	0800bb1c 	.word	0x0800bb1c
 8008ae8:	0800badc 	.word	0x0800badc

08008aec <quorem>:
 8008aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	6903      	ldr	r3, [r0, #16]
 8008af2:	690c      	ldr	r4, [r1, #16]
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	4607      	mov	r7, r0
 8008af8:	f2c0 8081 	blt.w	8008bfe <quorem+0x112>
 8008afc:	3c01      	subs	r4, #1
 8008afe:	f101 0814 	add.w	r8, r1, #20
 8008b02:	f100 0514 	add.w	r5, r0, #20
 8008b06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b0a:	9301      	str	r3, [sp, #4]
 8008b0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b14:	3301      	adds	r3, #1
 8008b16:	429a      	cmp	r2, r3
 8008b18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b20:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b24:	d331      	bcc.n	8008b8a <quorem+0x9e>
 8008b26:	f04f 0e00 	mov.w	lr, #0
 8008b2a:	4640      	mov	r0, r8
 8008b2c:	46ac      	mov	ip, r5
 8008b2e:	46f2      	mov	sl, lr
 8008b30:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b34:	b293      	uxth	r3, r2
 8008b36:	fb06 e303 	mla	r3, r6, r3, lr
 8008b3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	ebaa 0303 	sub.w	r3, sl, r3
 8008b44:	f8dc a000 	ldr.w	sl, [ip]
 8008b48:	0c12      	lsrs	r2, r2, #16
 8008b4a:	fa13 f38a 	uxtah	r3, r3, sl
 8008b4e:	fb06 e202 	mla	r2, r6, r2, lr
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	9b00      	ldr	r3, [sp, #0]
 8008b56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b5a:	b292      	uxth	r2, r2
 8008b5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b64:	f8bd 3000 	ldrh.w	r3, [sp]
 8008b68:	4581      	cmp	r9, r0
 8008b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b6e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b76:	d2db      	bcs.n	8008b30 <quorem+0x44>
 8008b78:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b7c:	b92b      	cbnz	r3, 8008b8a <quorem+0x9e>
 8008b7e:	9b01      	ldr	r3, [sp, #4]
 8008b80:	3b04      	subs	r3, #4
 8008b82:	429d      	cmp	r5, r3
 8008b84:	461a      	mov	r2, r3
 8008b86:	d32e      	bcc.n	8008be6 <quorem+0xfa>
 8008b88:	613c      	str	r4, [r7, #16]
 8008b8a:	4638      	mov	r0, r7
 8008b8c:	f001 feb0 	bl	800a8f0 <__mcmp>
 8008b90:	2800      	cmp	r0, #0
 8008b92:	db24      	blt.n	8008bde <quorem+0xf2>
 8008b94:	3601      	adds	r6, #1
 8008b96:	4628      	mov	r0, r5
 8008b98:	f04f 0c00 	mov.w	ip, #0
 8008b9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ba0:	f8d0 e000 	ldr.w	lr, [r0]
 8008ba4:	b293      	uxth	r3, r2
 8008ba6:	ebac 0303 	sub.w	r3, ip, r3
 8008baa:	0c12      	lsrs	r2, r2, #16
 8008bac:	fa13 f38e 	uxtah	r3, r3, lr
 8008bb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008bb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bbe:	45c1      	cmp	r9, r8
 8008bc0:	f840 3b04 	str.w	r3, [r0], #4
 8008bc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008bc8:	d2e8      	bcs.n	8008b9c <quorem+0xb0>
 8008bca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bd2:	b922      	cbnz	r2, 8008bde <quorem+0xf2>
 8008bd4:	3b04      	subs	r3, #4
 8008bd6:	429d      	cmp	r5, r3
 8008bd8:	461a      	mov	r2, r3
 8008bda:	d30a      	bcc.n	8008bf2 <quorem+0x106>
 8008bdc:	613c      	str	r4, [r7, #16]
 8008bde:	4630      	mov	r0, r6
 8008be0:	b003      	add	sp, #12
 8008be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be6:	6812      	ldr	r2, [r2, #0]
 8008be8:	3b04      	subs	r3, #4
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d1cc      	bne.n	8008b88 <quorem+0x9c>
 8008bee:	3c01      	subs	r4, #1
 8008bf0:	e7c7      	b.n	8008b82 <quorem+0x96>
 8008bf2:	6812      	ldr	r2, [r2, #0]
 8008bf4:	3b04      	subs	r3, #4
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	d1f0      	bne.n	8008bdc <quorem+0xf0>
 8008bfa:	3c01      	subs	r4, #1
 8008bfc:	e7eb      	b.n	8008bd6 <quorem+0xea>
 8008bfe:	2000      	movs	r0, #0
 8008c00:	e7ee      	b.n	8008be0 <quorem+0xf4>
 8008c02:	0000      	movs	r0, r0
 8008c04:	0000      	movs	r0, r0
	...

08008c08 <_dtoa_r>:
 8008c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c0c:	ed2d 8b04 	vpush	{d8-d9}
 8008c10:	ec57 6b10 	vmov	r6, r7, d0
 8008c14:	b093      	sub	sp, #76	; 0x4c
 8008c16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008c18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008c1c:	9106      	str	r1, [sp, #24]
 8008c1e:	ee10 aa10 	vmov	sl, s0
 8008c22:	4604      	mov	r4, r0
 8008c24:	9209      	str	r2, [sp, #36]	; 0x24
 8008c26:	930c      	str	r3, [sp, #48]	; 0x30
 8008c28:	46bb      	mov	fp, r7
 8008c2a:	b975      	cbnz	r5, 8008c4a <_dtoa_r+0x42>
 8008c2c:	2010      	movs	r0, #16
 8008c2e:	f001 fb6b 	bl	800a308 <malloc>
 8008c32:	4602      	mov	r2, r0
 8008c34:	6260      	str	r0, [r4, #36]	; 0x24
 8008c36:	b920      	cbnz	r0, 8008c42 <_dtoa_r+0x3a>
 8008c38:	4ba7      	ldr	r3, [pc, #668]	; (8008ed8 <_dtoa_r+0x2d0>)
 8008c3a:	21ea      	movs	r1, #234	; 0xea
 8008c3c:	48a7      	ldr	r0, [pc, #668]	; (8008edc <_dtoa_r+0x2d4>)
 8008c3e:	f002 fc89 	bl	800b554 <__assert_func>
 8008c42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008c46:	6005      	str	r5, [r0, #0]
 8008c48:	60c5      	str	r5, [r0, #12]
 8008c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c4c:	6819      	ldr	r1, [r3, #0]
 8008c4e:	b151      	cbz	r1, 8008c66 <_dtoa_r+0x5e>
 8008c50:	685a      	ldr	r2, [r3, #4]
 8008c52:	604a      	str	r2, [r1, #4]
 8008c54:	2301      	movs	r3, #1
 8008c56:	4093      	lsls	r3, r2
 8008c58:	608b      	str	r3, [r1, #8]
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f001 fbbc 	bl	800a3d8 <_Bfree>
 8008c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c62:	2200      	movs	r2, #0
 8008c64:	601a      	str	r2, [r3, #0]
 8008c66:	1e3b      	subs	r3, r7, #0
 8008c68:	bfaa      	itet	ge
 8008c6a:	2300      	movge	r3, #0
 8008c6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008c70:	f8c8 3000 	strge.w	r3, [r8]
 8008c74:	4b9a      	ldr	r3, [pc, #616]	; (8008ee0 <_dtoa_r+0x2d8>)
 8008c76:	bfbc      	itt	lt
 8008c78:	2201      	movlt	r2, #1
 8008c7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008c7e:	ea33 030b 	bics.w	r3, r3, fp
 8008c82:	d11b      	bne.n	8008cbc <_dtoa_r+0xb4>
 8008c84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c90:	4333      	orrs	r3, r6
 8008c92:	f000 8592 	beq.w	80097ba <_dtoa_r+0xbb2>
 8008c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c98:	b963      	cbnz	r3, 8008cb4 <_dtoa_r+0xac>
 8008c9a:	4b92      	ldr	r3, [pc, #584]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008c9c:	e022      	b.n	8008ce4 <_dtoa_r+0xdc>
 8008c9e:	4b92      	ldr	r3, [pc, #584]	; (8008ee8 <_dtoa_r+0x2e0>)
 8008ca0:	9301      	str	r3, [sp, #4]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ca6:	6013      	str	r3, [r2, #0]
 8008ca8:	9801      	ldr	r0, [sp, #4]
 8008caa:	b013      	add	sp, #76	; 0x4c
 8008cac:	ecbd 8b04 	vpop	{d8-d9}
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	4b8b      	ldr	r3, [pc, #556]	; (8008ee4 <_dtoa_r+0x2dc>)
 8008cb6:	9301      	str	r3, [sp, #4]
 8008cb8:	3303      	adds	r3, #3
 8008cba:	e7f3      	b.n	8008ca4 <_dtoa_r+0x9c>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4650      	mov	r0, sl
 8008cc2:	4659      	mov	r1, fp
 8008cc4:	f7f7 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 8008cc8:	ec4b ab19 	vmov	d9, sl, fp
 8008ccc:	4680      	mov	r8, r0
 8008cce:	b158      	cbz	r0, 8008ce8 <_dtoa_r+0xe0>
 8008cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	6013      	str	r3, [r2, #0]
 8008cd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	f000 856b 	beq.w	80097b4 <_dtoa_r+0xbac>
 8008cde:	4883      	ldr	r0, [pc, #524]	; (8008eec <_dtoa_r+0x2e4>)
 8008ce0:	6018      	str	r0, [r3, #0]
 8008ce2:	1e43      	subs	r3, r0, #1
 8008ce4:	9301      	str	r3, [sp, #4]
 8008ce6:	e7df      	b.n	8008ca8 <_dtoa_r+0xa0>
 8008ce8:	ec4b ab10 	vmov	d0, sl, fp
 8008cec:	aa10      	add	r2, sp, #64	; 0x40
 8008cee:	a911      	add	r1, sp, #68	; 0x44
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	f001 ff1f 	bl	800ab34 <__d2b>
 8008cf6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008cfa:	ee08 0a10 	vmov	s16, r0
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	f000 8084 	beq.w	8008e0c <_dtoa_r+0x204>
 8008d04:	ee19 3a90 	vmov	r3, s19
 8008d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008d10:	4656      	mov	r6, sl
 8008d12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008d16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008d1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008d1e:	4b74      	ldr	r3, [pc, #464]	; (8008ef0 <_dtoa_r+0x2e8>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	4630      	mov	r0, r6
 8008d24:	4639      	mov	r1, r7
 8008d26:	f7f7 faaf 	bl	8000288 <__aeabi_dsub>
 8008d2a:	a365      	add	r3, pc, #404	; (adr r3, 8008ec0 <_dtoa_r+0x2b8>)
 8008d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d30:	f7f7 fc62 	bl	80005f8 <__aeabi_dmul>
 8008d34:	a364      	add	r3, pc, #400	; (adr r3, 8008ec8 <_dtoa_r+0x2c0>)
 8008d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3a:	f7f7 faa7 	bl	800028c <__adddf3>
 8008d3e:	4606      	mov	r6, r0
 8008d40:	4628      	mov	r0, r5
 8008d42:	460f      	mov	r7, r1
 8008d44:	f7f7 fbee 	bl	8000524 <__aeabi_i2d>
 8008d48:	a361      	add	r3, pc, #388	; (adr r3, 8008ed0 <_dtoa_r+0x2c8>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	4602      	mov	r2, r0
 8008d54:	460b      	mov	r3, r1
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 fa97 	bl	800028c <__adddf3>
 8008d5e:	4606      	mov	r6, r0
 8008d60:	460f      	mov	r7, r1
 8008d62:	f7f7 fef9 	bl	8000b58 <__aeabi_d2iz>
 8008d66:	2200      	movs	r2, #0
 8008d68:	9000      	str	r0, [sp, #0]
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 feb4 	bl	8000adc <__aeabi_dcmplt>
 8008d74:	b150      	cbz	r0, 8008d8c <_dtoa_r+0x184>
 8008d76:	9800      	ldr	r0, [sp, #0]
 8008d78:	f7f7 fbd4 	bl	8000524 <__aeabi_i2d>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d84:	b910      	cbnz	r0, 8008d8c <_dtoa_r+0x184>
 8008d86:	9b00      	ldr	r3, [sp, #0]
 8008d88:	3b01      	subs	r3, #1
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	2b16      	cmp	r3, #22
 8008d90:	d85a      	bhi.n	8008e48 <_dtoa_r+0x240>
 8008d92:	9a00      	ldr	r2, [sp, #0]
 8008d94:	4b57      	ldr	r3, [pc, #348]	; (8008ef4 <_dtoa_r+0x2ec>)
 8008d96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9e:	ec51 0b19 	vmov	r0, r1, d9
 8008da2:	f7f7 fe9b 	bl	8000adc <__aeabi_dcmplt>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d050      	beq.n	8008e4c <_dtoa_r+0x244>
 8008daa:	9b00      	ldr	r3, [sp, #0]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	2300      	movs	r3, #0
 8008db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008db6:	1b5d      	subs	r5, r3, r5
 8008db8:	1e6b      	subs	r3, r5, #1
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	bf45      	ittet	mi
 8008dbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008dc2:	9304      	strmi	r3, [sp, #16]
 8008dc4:	2300      	movpl	r3, #0
 8008dc6:	2300      	movmi	r3, #0
 8008dc8:	bf4c      	ite	mi
 8008dca:	9305      	strmi	r3, [sp, #20]
 8008dcc:	9304      	strpl	r3, [sp, #16]
 8008dce:	9b00      	ldr	r3, [sp, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	db3d      	blt.n	8008e50 <_dtoa_r+0x248>
 8008dd4:	9b05      	ldr	r3, [sp, #20]
 8008dd6:	9a00      	ldr	r2, [sp, #0]
 8008dd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008dda:	4413      	add	r3, r2
 8008ddc:	9305      	str	r3, [sp, #20]
 8008dde:	2300      	movs	r3, #0
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	9b06      	ldr	r3, [sp, #24]
 8008de4:	2b09      	cmp	r3, #9
 8008de6:	f200 8089 	bhi.w	8008efc <_dtoa_r+0x2f4>
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	bfc4      	itt	gt
 8008dee:	3b04      	subgt	r3, #4
 8008df0:	9306      	strgt	r3, [sp, #24]
 8008df2:	9b06      	ldr	r3, [sp, #24]
 8008df4:	f1a3 0302 	sub.w	r3, r3, #2
 8008df8:	bfcc      	ite	gt
 8008dfa:	2500      	movgt	r5, #0
 8008dfc:	2501      	movle	r5, #1
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	f200 8087 	bhi.w	8008f12 <_dtoa_r+0x30a>
 8008e04:	e8df f003 	tbb	[pc, r3]
 8008e08:	59383a2d 	.word	0x59383a2d
 8008e0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008e10:	441d      	add	r5, r3
 8008e12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008e16:	2b20      	cmp	r3, #32
 8008e18:	bfc1      	itttt	gt
 8008e1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008e22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008e26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008e2a:	bfda      	itte	le
 8008e2c:	f1c3 0320 	rsble	r3, r3, #32
 8008e30:	fa06 f003 	lslle.w	r0, r6, r3
 8008e34:	4318      	orrgt	r0, r3
 8008e36:	f7f7 fb65 	bl	8000504 <__aeabi_ui2d>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4606      	mov	r6, r0
 8008e3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008e42:	3d01      	subs	r5, #1
 8008e44:	930e      	str	r3, [sp, #56]	; 0x38
 8008e46:	e76a      	b.n	8008d1e <_dtoa_r+0x116>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	e7b2      	b.n	8008db2 <_dtoa_r+0x1aa>
 8008e4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e4e:	e7b1      	b.n	8008db4 <_dtoa_r+0x1ac>
 8008e50:	9b04      	ldr	r3, [sp, #16]
 8008e52:	9a00      	ldr	r2, [sp, #0]
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	9304      	str	r3, [sp, #16]
 8008e58:	4253      	negs	r3, r2
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e60:	e7bf      	b.n	8008de2 <_dtoa_r+0x1da>
 8008e62:	2300      	movs	r3, #0
 8008e64:	9308      	str	r3, [sp, #32]
 8008e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	dc55      	bgt.n	8008f18 <_dtoa_r+0x310>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008e72:	461a      	mov	r2, r3
 8008e74:	9209      	str	r2, [sp, #36]	; 0x24
 8008e76:	e00c      	b.n	8008e92 <_dtoa_r+0x28a>
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7f3      	b.n	8008e64 <_dtoa_r+0x25c>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	4413      	add	r3, r2
 8008e86:	9302      	str	r3, [sp, #8]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	bfb8      	it	lt
 8008e90:	2301      	movlt	r3, #1
 8008e92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008e94:	2200      	movs	r2, #0
 8008e96:	6042      	str	r2, [r0, #4]
 8008e98:	2204      	movs	r2, #4
 8008e9a:	f102 0614 	add.w	r6, r2, #20
 8008e9e:	429e      	cmp	r6, r3
 8008ea0:	6841      	ldr	r1, [r0, #4]
 8008ea2:	d93d      	bls.n	8008f20 <_dtoa_r+0x318>
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	f001 fa57 	bl	800a358 <_Balloc>
 8008eaa:	9001      	str	r0, [sp, #4]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d13b      	bne.n	8008f28 <_dtoa_r+0x320>
 8008eb0:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <_dtoa_r+0x2f0>)
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008eb8:	e6c0      	b.n	8008c3c <_dtoa_r+0x34>
 8008eba:	2301      	movs	r3, #1
 8008ebc:	e7df      	b.n	8008e7e <_dtoa_r+0x276>
 8008ebe:	bf00      	nop
 8008ec0:	636f4361 	.word	0x636f4361
 8008ec4:	3fd287a7 	.word	0x3fd287a7
 8008ec8:	8b60c8b3 	.word	0x8b60c8b3
 8008ecc:	3fc68a28 	.word	0x3fc68a28
 8008ed0:	509f79fb 	.word	0x509f79fb
 8008ed4:	3fd34413 	.word	0x3fd34413
 8008ed8:	0800ba56 	.word	0x0800ba56
 8008edc:	0800ba6d 	.word	0x0800ba6d
 8008ee0:	7ff00000 	.word	0x7ff00000
 8008ee4:	0800ba52 	.word	0x0800ba52
 8008ee8:	0800ba49 	.word	0x0800ba49
 8008eec:	0800b8c9 	.word	0x0800b8c9
 8008ef0:	3ff80000 	.word	0x3ff80000
 8008ef4:	0800bc40 	.word	0x0800bc40
 8008ef8:	0800bac8 	.word	0x0800bac8
 8008efc:	2501      	movs	r5, #1
 8008efe:	2300      	movs	r3, #0
 8008f00:	9306      	str	r3, [sp, #24]
 8008f02:	9508      	str	r5, [sp, #32]
 8008f04:	f04f 33ff 	mov.w	r3, #4294967295
 8008f08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2312      	movs	r3, #18
 8008f10:	e7b0      	b.n	8008e74 <_dtoa_r+0x26c>
 8008f12:	2301      	movs	r3, #1
 8008f14:	9308      	str	r3, [sp, #32]
 8008f16:	e7f5      	b.n	8008f04 <_dtoa_r+0x2fc>
 8008f18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008f1e:	e7b8      	b.n	8008e92 <_dtoa_r+0x28a>
 8008f20:	3101      	adds	r1, #1
 8008f22:	6041      	str	r1, [r0, #4]
 8008f24:	0052      	lsls	r2, r2, #1
 8008f26:	e7b8      	b.n	8008e9a <_dtoa_r+0x292>
 8008f28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f2a:	9a01      	ldr	r2, [sp, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
 8008f2e:	9b03      	ldr	r3, [sp, #12]
 8008f30:	2b0e      	cmp	r3, #14
 8008f32:	f200 809d 	bhi.w	8009070 <_dtoa_r+0x468>
 8008f36:	2d00      	cmp	r5, #0
 8008f38:	f000 809a 	beq.w	8009070 <_dtoa_r+0x468>
 8008f3c:	9b00      	ldr	r3, [sp, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dd32      	ble.n	8008fa8 <_dtoa_r+0x3a0>
 8008f42:	4ab7      	ldr	r2, [pc, #732]	; (8009220 <_dtoa_r+0x618>)
 8008f44:	f003 030f 	and.w	r3, r3, #15
 8008f48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008f4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f50:	9b00      	ldr	r3, [sp, #0]
 8008f52:	05d8      	lsls	r0, r3, #23
 8008f54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008f58:	d516      	bpl.n	8008f88 <_dtoa_r+0x380>
 8008f5a:	4bb2      	ldr	r3, [pc, #712]	; (8009224 <_dtoa_r+0x61c>)
 8008f5c:	ec51 0b19 	vmov	r0, r1, d9
 8008f60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f64:	f7f7 fc72 	bl	800084c <__aeabi_ddiv>
 8008f68:	f007 070f 	and.w	r7, r7, #15
 8008f6c:	4682      	mov	sl, r0
 8008f6e:	468b      	mov	fp, r1
 8008f70:	2503      	movs	r5, #3
 8008f72:	4eac      	ldr	r6, [pc, #688]	; (8009224 <_dtoa_r+0x61c>)
 8008f74:	b957      	cbnz	r7, 8008f8c <_dtoa_r+0x384>
 8008f76:	4642      	mov	r2, r8
 8008f78:	464b      	mov	r3, r9
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	f7f7 fc65 	bl	800084c <__aeabi_ddiv>
 8008f82:	4682      	mov	sl, r0
 8008f84:	468b      	mov	fp, r1
 8008f86:	e028      	b.n	8008fda <_dtoa_r+0x3d2>
 8008f88:	2502      	movs	r5, #2
 8008f8a:	e7f2      	b.n	8008f72 <_dtoa_r+0x36a>
 8008f8c:	07f9      	lsls	r1, r7, #31
 8008f8e:	d508      	bpl.n	8008fa2 <_dtoa_r+0x39a>
 8008f90:	4640      	mov	r0, r8
 8008f92:	4649      	mov	r1, r9
 8008f94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008f98:	f7f7 fb2e 	bl	80005f8 <__aeabi_dmul>
 8008f9c:	3501      	adds	r5, #1
 8008f9e:	4680      	mov	r8, r0
 8008fa0:	4689      	mov	r9, r1
 8008fa2:	107f      	asrs	r7, r7, #1
 8008fa4:	3608      	adds	r6, #8
 8008fa6:	e7e5      	b.n	8008f74 <_dtoa_r+0x36c>
 8008fa8:	f000 809b 	beq.w	80090e2 <_dtoa_r+0x4da>
 8008fac:	9b00      	ldr	r3, [sp, #0]
 8008fae:	4f9d      	ldr	r7, [pc, #628]	; (8009224 <_dtoa_r+0x61c>)
 8008fb0:	425e      	negs	r6, r3
 8008fb2:	4b9b      	ldr	r3, [pc, #620]	; (8009220 <_dtoa_r+0x618>)
 8008fb4:	f006 020f 	and.w	r2, r6, #15
 8008fb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc0:	ec51 0b19 	vmov	r0, r1, d9
 8008fc4:	f7f7 fb18 	bl	80005f8 <__aeabi_dmul>
 8008fc8:	1136      	asrs	r6, r6, #4
 8008fca:	4682      	mov	sl, r0
 8008fcc:	468b      	mov	fp, r1
 8008fce:	2300      	movs	r3, #0
 8008fd0:	2502      	movs	r5, #2
 8008fd2:	2e00      	cmp	r6, #0
 8008fd4:	d17a      	bne.n	80090cc <_dtoa_r+0x4c4>
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d1d3      	bne.n	8008f82 <_dtoa_r+0x37a>
 8008fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 8082 	beq.w	80090e6 <_dtoa_r+0x4de>
 8008fe2:	4b91      	ldr	r3, [pc, #580]	; (8009228 <_dtoa_r+0x620>)
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	4659      	mov	r1, fp
 8008fea:	f7f7 fd77 	bl	8000adc <__aeabi_dcmplt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d079      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff2:	9b03      	ldr	r3, [sp, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d076      	beq.n	80090e6 <_dtoa_r+0x4de>
 8008ff8:	9b02      	ldr	r3, [sp, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	dd36      	ble.n	800906c <_dtoa_r+0x464>
 8008ffe:	9b00      	ldr	r3, [sp, #0]
 8009000:	4650      	mov	r0, sl
 8009002:	4659      	mov	r1, fp
 8009004:	1e5f      	subs	r7, r3, #1
 8009006:	2200      	movs	r2, #0
 8009008:	4b88      	ldr	r3, [pc, #544]	; (800922c <_dtoa_r+0x624>)
 800900a:	f7f7 faf5 	bl	80005f8 <__aeabi_dmul>
 800900e:	9e02      	ldr	r6, [sp, #8]
 8009010:	4682      	mov	sl, r0
 8009012:	468b      	mov	fp, r1
 8009014:	3501      	adds	r5, #1
 8009016:	4628      	mov	r0, r5
 8009018:	f7f7 fa84 	bl	8000524 <__aeabi_i2d>
 800901c:	4652      	mov	r2, sl
 800901e:	465b      	mov	r3, fp
 8009020:	f7f7 faea 	bl	80005f8 <__aeabi_dmul>
 8009024:	4b82      	ldr	r3, [pc, #520]	; (8009230 <_dtoa_r+0x628>)
 8009026:	2200      	movs	r2, #0
 8009028:	f7f7 f930 	bl	800028c <__adddf3>
 800902c:	46d0      	mov	r8, sl
 800902e:	46d9      	mov	r9, fp
 8009030:	4682      	mov	sl, r0
 8009032:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009036:	2e00      	cmp	r6, #0
 8009038:	d158      	bne.n	80090ec <_dtoa_r+0x4e4>
 800903a:	4b7e      	ldr	r3, [pc, #504]	; (8009234 <_dtoa_r+0x62c>)
 800903c:	2200      	movs	r2, #0
 800903e:	4640      	mov	r0, r8
 8009040:	4649      	mov	r1, r9
 8009042:	f7f7 f921 	bl	8000288 <__aeabi_dsub>
 8009046:	4652      	mov	r2, sl
 8009048:	465b      	mov	r3, fp
 800904a:	4680      	mov	r8, r0
 800904c:	4689      	mov	r9, r1
 800904e:	f7f7 fd63 	bl	8000b18 <__aeabi_dcmpgt>
 8009052:	2800      	cmp	r0, #0
 8009054:	f040 8295 	bne.w	8009582 <_dtoa_r+0x97a>
 8009058:	4652      	mov	r2, sl
 800905a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800905e:	4640      	mov	r0, r8
 8009060:	4649      	mov	r1, r9
 8009062:	f7f7 fd3b 	bl	8000adc <__aeabi_dcmplt>
 8009066:	2800      	cmp	r0, #0
 8009068:	f040 8289 	bne.w	800957e <_dtoa_r+0x976>
 800906c:	ec5b ab19 	vmov	sl, fp, d9
 8009070:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009072:	2b00      	cmp	r3, #0
 8009074:	f2c0 8148 	blt.w	8009308 <_dtoa_r+0x700>
 8009078:	9a00      	ldr	r2, [sp, #0]
 800907a:	2a0e      	cmp	r2, #14
 800907c:	f300 8144 	bgt.w	8009308 <_dtoa_r+0x700>
 8009080:	4b67      	ldr	r3, [pc, #412]	; (8009220 <_dtoa_r+0x618>)
 8009082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009086:	e9d3 8900 	ldrd	r8, r9, [r3]
 800908a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800908c:	2b00      	cmp	r3, #0
 800908e:	f280 80d5 	bge.w	800923c <_dtoa_r+0x634>
 8009092:	9b03      	ldr	r3, [sp, #12]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f300 80d1 	bgt.w	800923c <_dtoa_r+0x634>
 800909a:	f040 826f 	bne.w	800957c <_dtoa_r+0x974>
 800909e:	4b65      	ldr	r3, [pc, #404]	; (8009234 <_dtoa_r+0x62c>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	4640      	mov	r0, r8
 80090a4:	4649      	mov	r1, r9
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	4652      	mov	r2, sl
 80090ac:	465b      	mov	r3, fp
 80090ae:	f7f7 fd29 	bl	8000b04 <__aeabi_dcmpge>
 80090b2:	9e03      	ldr	r6, [sp, #12]
 80090b4:	4637      	mov	r7, r6
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f040 8245 	bne.w	8009546 <_dtoa_r+0x93e>
 80090bc:	9d01      	ldr	r5, [sp, #4]
 80090be:	2331      	movs	r3, #49	; 0x31
 80090c0:	f805 3b01 	strb.w	r3, [r5], #1
 80090c4:	9b00      	ldr	r3, [sp, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	e240      	b.n	800954e <_dtoa_r+0x946>
 80090cc:	07f2      	lsls	r2, r6, #31
 80090ce:	d505      	bpl.n	80090dc <_dtoa_r+0x4d4>
 80090d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d4:	f7f7 fa90 	bl	80005f8 <__aeabi_dmul>
 80090d8:	3501      	adds	r5, #1
 80090da:	2301      	movs	r3, #1
 80090dc:	1076      	asrs	r6, r6, #1
 80090de:	3708      	adds	r7, #8
 80090e0:	e777      	b.n	8008fd2 <_dtoa_r+0x3ca>
 80090e2:	2502      	movs	r5, #2
 80090e4:	e779      	b.n	8008fda <_dtoa_r+0x3d2>
 80090e6:	9f00      	ldr	r7, [sp, #0]
 80090e8:	9e03      	ldr	r6, [sp, #12]
 80090ea:	e794      	b.n	8009016 <_dtoa_r+0x40e>
 80090ec:	9901      	ldr	r1, [sp, #4]
 80090ee:	4b4c      	ldr	r3, [pc, #304]	; (8009220 <_dtoa_r+0x618>)
 80090f0:	4431      	add	r1, r6
 80090f2:	910d      	str	r1, [sp, #52]	; 0x34
 80090f4:	9908      	ldr	r1, [sp, #32]
 80090f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80090fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80090fe:	2900      	cmp	r1, #0
 8009100:	d043      	beq.n	800918a <_dtoa_r+0x582>
 8009102:	494d      	ldr	r1, [pc, #308]	; (8009238 <_dtoa_r+0x630>)
 8009104:	2000      	movs	r0, #0
 8009106:	f7f7 fba1 	bl	800084c <__aeabi_ddiv>
 800910a:	4652      	mov	r2, sl
 800910c:	465b      	mov	r3, fp
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	9d01      	ldr	r5, [sp, #4]
 8009114:	4682      	mov	sl, r0
 8009116:	468b      	mov	fp, r1
 8009118:	4649      	mov	r1, r9
 800911a:	4640      	mov	r0, r8
 800911c:	f7f7 fd1c 	bl	8000b58 <__aeabi_d2iz>
 8009120:	4606      	mov	r6, r0
 8009122:	f7f7 f9ff 	bl	8000524 <__aeabi_i2d>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4640      	mov	r0, r8
 800912c:	4649      	mov	r1, r9
 800912e:	f7f7 f8ab 	bl	8000288 <__aeabi_dsub>
 8009132:	3630      	adds	r6, #48	; 0x30
 8009134:	f805 6b01 	strb.w	r6, [r5], #1
 8009138:	4652      	mov	r2, sl
 800913a:	465b      	mov	r3, fp
 800913c:	4680      	mov	r8, r0
 800913e:	4689      	mov	r9, r1
 8009140:	f7f7 fccc 	bl	8000adc <__aeabi_dcmplt>
 8009144:	2800      	cmp	r0, #0
 8009146:	d163      	bne.n	8009210 <_dtoa_r+0x608>
 8009148:	4642      	mov	r2, r8
 800914a:	464b      	mov	r3, r9
 800914c:	4936      	ldr	r1, [pc, #216]	; (8009228 <_dtoa_r+0x620>)
 800914e:	2000      	movs	r0, #0
 8009150:	f7f7 f89a 	bl	8000288 <__aeabi_dsub>
 8009154:	4652      	mov	r2, sl
 8009156:	465b      	mov	r3, fp
 8009158:	f7f7 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800915c:	2800      	cmp	r0, #0
 800915e:	f040 80b5 	bne.w	80092cc <_dtoa_r+0x6c4>
 8009162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009164:	429d      	cmp	r5, r3
 8009166:	d081      	beq.n	800906c <_dtoa_r+0x464>
 8009168:	4b30      	ldr	r3, [pc, #192]	; (800922c <_dtoa_r+0x624>)
 800916a:	2200      	movs	r2, #0
 800916c:	4650      	mov	r0, sl
 800916e:	4659      	mov	r1, fp
 8009170:	f7f7 fa42 	bl	80005f8 <__aeabi_dmul>
 8009174:	4b2d      	ldr	r3, [pc, #180]	; (800922c <_dtoa_r+0x624>)
 8009176:	4682      	mov	sl, r0
 8009178:	468b      	mov	fp, r1
 800917a:	4640      	mov	r0, r8
 800917c:	4649      	mov	r1, r9
 800917e:	2200      	movs	r2, #0
 8009180:	f7f7 fa3a 	bl	80005f8 <__aeabi_dmul>
 8009184:	4680      	mov	r8, r0
 8009186:	4689      	mov	r9, r1
 8009188:	e7c6      	b.n	8009118 <_dtoa_r+0x510>
 800918a:	4650      	mov	r0, sl
 800918c:	4659      	mov	r1, fp
 800918e:	f7f7 fa33 	bl	80005f8 <__aeabi_dmul>
 8009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009194:	9d01      	ldr	r5, [sp, #4]
 8009196:	930f      	str	r3, [sp, #60]	; 0x3c
 8009198:	4682      	mov	sl, r0
 800919a:	468b      	mov	fp, r1
 800919c:	4649      	mov	r1, r9
 800919e:	4640      	mov	r0, r8
 80091a0:	f7f7 fcda 	bl	8000b58 <__aeabi_d2iz>
 80091a4:	4606      	mov	r6, r0
 80091a6:	f7f7 f9bd 	bl	8000524 <__aeabi_i2d>
 80091aa:	3630      	adds	r6, #48	; 0x30
 80091ac:	4602      	mov	r2, r0
 80091ae:	460b      	mov	r3, r1
 80091b0:	4640      	mov	r0, r8
 80091b2:	4649      	mov	r1, r9
 80091b4:	f7f7 f868 	bl	8000288 <__aeabi_dsub>
 80091b8:	f805 6b01 	strb.w	r6, [r5], #1
 80091bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091be:	429d      	cmp	r5, r3
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	f04f 0200 	mov.w	r2, #0
 80091c8:	d124      	bne.n	8009214 <_dtoa_r+0x60c>
 80091ca:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <_dtoa_r+0x630>)
 80091cc:	4650      	mov	r0, sl
 80091ce:	4659      	mov	r1, fp
 80091d0:	f7f7 f85c 	bl	800028c <__adddf3>
 80091d4:	4602      	mov	r2, r0
 80091d6:	460b      	mov	r3, r1
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	f7f7 fc9c 	bl	8000b18 <__aeabi_dcmpgt>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d173      	bne.n	80092cc <_dtoa_r+0x6c4>
 80091e4:	4652      	mov	r2, sl
 80091e6:	465b      	mov	r3, fp
 80091e8:	4913      	ldr	r1, [pc, #76]	; (8009238 <_dtoa_r+0x630>)
 80091ea:	2000      	movs	r0, #0
 80091ec:	f7f7 f84c 	bl	8000288 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4640      	mov	r0, r8
 80091f6:	4649      	mov	r1, r9
 80091f8:	f7f7 fc70 	bl	8000adc <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f43f af35 	beq.w	800906c <_dtoa_r+0x464>
 8009202:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009204:	1e6b      	subs	r3, r5, #1
 8009206:	930f      	str	r3, [sp, #60]	; 0x3c
 8009208:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800920c:	2b30      	cmp	r3, #48	; 0x30
 800920e:	d0f8      	beq.n	8009202 <_dtoa_r+0x5fa>
 8009210:	9700      	str	r7, [sp, #0]
 8009212:	e049      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009214:	4b05      	ldr	r3, [pc, #20]	; (800922c <_dtoa_r+0x624>)
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	4680      	mov	r8, r0
 800921c:	4689      	mov	r9, r1
 800921e:	e7bd      	b.n	800919c <_dtoa_r+0x594>
 8009220:	0800bc40 	.word	0x0800bc40
 8009224:	0800bc18 	.word	0x0800bc18
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	40240000 	.word	0x40240000
 8009230:	401c0000 	.word	0x401c0000
 8009234:	40140000 	.word	0x40140000
 8009238:	3fe00000 	.word	0x3fe00000
 800923c:	9d01      	ldr	r5, [sp, #4]
 800923e:	4656      	mov	r6, sl
 8009240:	465f      	mov	r7, fp
 8009242:	4642      	mov	r2, r8
 8009244:	464b      	mov	r3, r9
 8009246:	4630      	mov	r0, r6
 8009248:	4639      	mov	r1, r7
 800924a:	f7f7 faff 	bl	800084c <__aeabi_ddiv>
 800924e:	f7f7 fc83 	bl	8000b58 <__aeabi_d2iz>
 8009252:	4682      	mov	sl, r0
 8009254:	f7f7 f966 	bl	8000524 <__aeabi_i2d>
 8009258:	4642      	mov	r2, r8
 800925a:	464b      	mov	r3, r9
 800925c:	f7f7 f9cc 	bl	80005f8 <__aeabi_dmul>
 8009260:	4602      	mov	r2, r0
 8009262:	460b      	mov	r3, r1
 8009264:	4630      	mov	r0, r6
 8009266:	4639      	mov	r1, r7
 8009268:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800926c:	f7f7 f80c 	bl	8000288 <__aeabi_dsub>
 8009270:	f805 6b01 	strb.w	r6, [r5], #1
 8009274:	9e01      	ldr	r6, [sp, #4]
 8009276:	9f03      	ldr	r7, [sp, #12]
 8009278:	1bae      	subs	r6, r5, r6
 800927a:	42b7      	cmp	r7, r6
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	d135      	bne.n	80092ee <_dtoa_r+0x6e6>
 8009282:	f7f7 f803 	bl	800028c <__adddf3>
 8009286:	4642      	mov	r2, r8
 8009288:	464b      	mov	r3, r9
 800928a:	4606      	mov	r6, r0
 800928c:	460f      	mov	r7, r1
 800928e:	f7f7 fc43 	bl	8000b18 <__aeabi_dcmpgt>
 8009292:	b9d0      	cbnz	r0, 80092ca <_dtoa_r+0x6c2>
 8009294:	4642      	mov	r2, r8
 8009296:	464b      	mov	r3, r9
 8009298:	4630      	mov	r0, r6
 800929a:	4639      	mov	r1, r7
 800929c:	f7f7 fc14 	bl	8000ac8 <__aeabi_dcmpeq>
 80092a0:	b110      	cbz	r0, 80092a8 <_dtoa_r+0x6a0>
 80092a2:	f01a 0f01 	tst.w	sl, #1
 80092a6:	d110      	bne.n	80092ca <_dtoa_r+0x6c2>
 80092a8:	4620      	mov	r0, r4
 80092aa:	ee18 1a10 	vmov	r1, s16
 80092ae:	f001 f893 	bl	800a3d8 <_Bfree>
 80092b2:	2300      	movs	r3, #0
 80092b4:	9800      	ldr	r0, [sp, #0]
 80092b6:	702b      	strb	r3, [r5, #0]
 80092b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092ba:	3001      	adds	r0, #1
 80092bc:	6018      	str	r0, [r3, #0]
 80092be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	f43f acf1 	beq.w	8008ca8 <_dtoa_r+0xa0>
 80092c6:	601d      	str	r5, [r3, #0]
 80092c8:	e4ee      	b.n	8008ca8 <_dtoa_r+0xa0>
 80092ca:	9f00      	ldr	r7, [sp, #0]
 80092cc:	462b      	mov	r3, r5
 80092ce:	461d      	mov	r5, r3
 80092d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092d4:	2a39      	cmp	r2, #57	; 0x39
 80092d6:	d106      	bne.n	80092e6 <_dtoa_r+0x6de>
 80092d8:	9a01      	ldr	r2, [sp, #4]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d1f7      	bne.n	80092ce <_dtoa_r+0x6c6>
 80092de:	9901      	ldr	r1, [sp, #4]
 80092e0:	2230      	movs	r2, #48	; 0x30
 80092e2:	3701      	adds	r7, #1
 80092e4:	700a      	strb	r2, [r1, #0]
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	3201      	adds	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
 80092ec:	e790      	b.n	8009210 <_dtoa_r+0x608>
 80092ee:	4ba6      	ldr	r3, [pc, #664]	; (8009588 <_dtoa_r+0x980>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	f7f7 f981 	bl	80005f8 <__aeabi_dmul>
 80092f6:	2200      	movs	r2, #0
 80092f8:	2300      	movs	r3, #0
 80092fa:	4606      	mov	r6, r0
 80092fc:	460f      	mov	r7, r1
 80092fe:	f7f7 fbe3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009302:	2800      	cmp	r0, #0
 8009304:	d09d      	beq.n	8009242 <_dtoa_r+0x63a>
 8009306:	e7cf      	b.n	80092a8 <_dtoa_r+0x6a0>
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	2a00      	cmp	r2, #0
 800930c:	f000 80d7 	beq.w	80094be <_dtoa_r+0x8b6>
 8009310:	9a06      	ldr	r2, [sp, #24]
 8009312:	2a01      	cmp	r2, #1
 8009314:	f300 80ba 	bgt.w	800948c <_dtoa_r+0x884>
 8009318:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800931a:	2a00      	cmp	r2, #0
 800931c:	f000 80b2 	beq.w	8009484 <_dtoa_r+0x87c>
 8009320:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009324:	9e07      	ldr	r6, [sp, #28]
 8009326:	9d04      	ldr	r5, [sp, #16]
 8009328:	9a04      	ldr	r2, [sp, #16]
 800932a:	441a      	add	r2, r3
 800932c:	9204      	str	r2, [sp, #16]
 800932e:	9a05      	ldr	r2, [sp, #20]
 8009330:	2101      	movs	r1, #1
 8009332:	441a      	add	r2, r3
 8009334:	4620      	mov	r0, r4
 8009336:	9205      	str	r2, [sp, #20]
 8009338:	f001 f950 	bl	800a5dc <__i2b>
 800933c:	4607      	mov	r7, r0
 800933e:	2d00      	cmp	r5, #0
 8009340:	dd0c      	ble.n	800935c <_dtoa_r+0x754>
 8009342:	9b05      	ldr	r3, [sp, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd09      	ble.n	800935c <_dtoa_r+0x754>
 8009348:	42ab      	cmp	r3, r5
 800934a:	9a04      	ldr	r2, [sp, #16]
 800934c:	bfa8      	it	ge
 800934e:	462b      	movge	r3, r5
 8009350:	1ad2      	subs	r2, r2, r3
 8009352:	9204      	str	r2, [sp, #16]
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	1aed      	subs	r5, r5, r3
 8009358:	1ad3      	subs	r3, r2, r3
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	9b07      	ldr	r3, [sp, #28]
 800935e:	b31b      	cbz	r3, 80093a8 <_dtoa_r+0x7a0>
 8009360:	9b08      	ldr	r3, [sp, #32]
 8009362:	2b00      	cmp	r3, #0
 8009364:	f000 80af 	beq.w	80094c6 <_dtoa_r+0x8be>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd13      	ble.n	8009394 <_dtoa_r+0x78c>
 800936c:	4639      	mov	r1, r7
 800936e:	4632      	mov	r2, r6
 8009370:	4620      	mov	r0, r4
 8009372:	f001 f9f3 	bl	800a75c <__pow5mult>
 8009376:	ee18 2a10 	vmov	r2, s16
 800937a:	4601      	mov	r1, r0
 800937c:	4607      	mov	r7, r0
 800937e:	4620      	mov	r0, r4
 8009380:	f001 f942 	bl	800a608 <__multiply>
 8009384:	ee18 1a10 	vmov	r1, s16
 8009388:	4680      	mov	r8, r0
 800938a:	4620      	mov	r0, r4
 800938c:	f001 f824 	bl	800a3d8 <_Bfree>
 8009390:	ee08 8a10 	vmov	s16, r8
 8009394:	9b07      	ldr	r3, [sp, #28]
 8009396:	1b9a      	subs	r2, r3, r6
 8009398:	d006      	beq.n	80093a8 <_dtoa_r+0x7a0>
 800939a:	ee18 1a10 	vmov	r1, s16
 800939e:	4620      	mov	r0, r4
 80093a0:	f001 f9dc 	bl	800a75c <__pow5mult>
 80093a4:	ee08 0a10 	vmov	s16, r0
 80093a8:	2101      	movs	r1, #1
 80093aa:	4620      	mov	r0, r4
 80093ac:	f001 f916 	bl	800a5dc <__i2b>
 80093b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	4606      	mov	r6, r0
 80093b6:	f340 8088 	ble.w	80094ca <_dtoa_r+0x8c2>
 80093ba:	461a      	mov	r2, r3
 80093bc:	4601      	mov	r1, r0
 80093be:	4620      	mov	r0, r4
 80093c0:	f001 f9cc 	bl	800a75c <__pow5mult>
 80093c4:	9b06      	ldr	r3, [sp, #24]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	4606      	mov	r6, r0
 80093ca:	f340 8081 	ble.w	80094d0 <_dtoa_r+0x8c8>
 80093ce:	f04f 0800 	mov.w	r8, #0
 80093d2:	6933      	ldr	r3, [r6, #16]
 80093d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80093d8:	6918      	ldr	r0, [r3, #16]
 80093da:	f001 f8af 	bl	800a53c <__hi0bits>
 80093de:	f1c0 0020 	rsb	r0, r0, #32
 80093e2:	9b05      	ldr	r3, [sp, #20]
 80093e4:	4418      	add	r0, r3
 80093e6:	f010 001f 	ands.w	r0, r0, #31
 80093ea:	f000 8092 	beq.w	8009512 <_dtoa_r+0x90a>
 80093ee:	f1c0 0320 	rsb	r3, r0, #32
 80093f2:	2b04      	cmp	r3, #4
 80093f4:	f340 808a 	ble.w	800950c <_dtoa_r+0x904>
 80093f8:	f1c0 001c 	rsb	r0, r0, #28
 80093fc:	9b04      	ldr	r3, [sp, #16]
 80093fe:	4403      	add	r3, r0
 8009400:	9304      	str	r3, [sp, #16]
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	4403      	add	r3, r0
 8009406:	4405      	add	r5, r0
 8009408:	9305      	str	r3, [sp, #20]
 800940a:	9b04      	ldr	r3, [sp, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd07      	ble.n	8009420 <_dtoa_r+0x818>
 8009410:	ee18 1a10 	vmov	r1, s16
 8009414:	461a      	mov	r2, r3
 8009416:	4620      	mov	r0, r4
 8009418:	f001 f9fa 	bl	800a810 <__lshift>
 800941c:	ee08 0a10 	vmov	s16, r0
 8009420:	9b05      	ldr	r3, [sp, #20]
 8009422:	2b00      	cmp	r3, #0
 8009424:	dd05      	ble.n	8009432 <_dtoa_r+0x82a>
 8009426:	4631      	mov	r1, r6
 8009428:	461a      	mov	r2, r3
 800942a:	4620      	mov	r0, r4
 800942c:	f001 f9f0 	bl	800a810 <__lshift>
 8009430:	4606      	mov	r6, r0
 8009432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009434:	2b00      	cmp	r3, #0
 8009436:	d06e      	beq.n	8009516 <_dtoa_r+0x90e>
 8009438:	ee18 0a10 	vmov	r0, s16
 800943c:	4631      	mov	r1, r6
 800943e:	f001 fa57 	bl	800a8f0 <__mcmp>
 8009442:	2800      	cmp	r0, #0
 8009444:	da67      	bge.n	8009516 <_dtoa_r+0x90e>
 8009446:	9b00      	ldr	r3, [sp, #0]
 8009448:	3b01      	subs	r3, #1
 800944a:	ee18 1a10 	vmov	r1, s16
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	220a      	movs	r2, #10
 8009452:	2300      	movs	r3, #0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 ffe1 	bl	800a41c <__multadd>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	ee08 0a10 	vmov	s16, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 81b1 	beq.w	80097c8 <_dtoa_r+0xbc0>
 8009466:	2300      	movs	r3, #0
 8009468:	4639      	mov	r1, r7
 800946a:	220a      	movs	r2, #10
 800946c:	4620      	mov	r0, r4
 800946e:	f000 ffd5 	bl	800a41c <__multadd>
 8009472:	9b02      	ldr	r3, [sp, #8]
 8009474:	2b00      	cmp	r3, #0
 8009476:	4607      	mov	r7, r0
 8009478:	f300 808e 	bgt.w	8009598 <_dtoa_r+0x990>
 800947c:	9b06      	ldr	r3, [sp, #24]
 800947e:	2b02      	cmp	r3, #2
 8009480:	dc51      	bgt.n	8009526 <_dtoa_r+0x91e>
 8009482:	e089      	b.n	8009598 <_dtoa_r+0x990>
 8009484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009486:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800948a:	e74b      	b.n	8009324 <_dtoa_r+0x71c>
 800948c:	9b03      	ldr	r3, [sp, #12]
 800948e:	1e5e      	subs	r6, r3, #1
 8009490:	9b07      	ldr	r3, [sp, #28]
 8009492:	42b3      	cmp	r3, r6
 8009494:	bfbf      	itttt	lt
 8009496:	9b07      	ldrlt	r3, [sp, #28]
 8009498:	9607      	strlt	r6, [sp, #28]
 800949a:	1af2      	sublt	r2, r6, r3
 800949c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800949e:	bfb6      	itet	lt
 80094a0:	189b      	addlt	r3, r3, r2
 80094a2:	1b9e      	subge	r6, r3, r6
 80094a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80094a6:	9b03      	ldr	r3, [sp, #12]
 80094a8:	bfb8      	it	lt
 80094aa:	2600      	movlt	r6, #0
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	bfb7      	itett	lt
 80094b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80094b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80094b8:	1a9d      	sublt	r5, r3, r2
 80094ba:	2300      	movlt	r3, #0
 80094bc:	e734      	b.n	8009328 <_dtoa_r+0x720>
 80094be:	9e07      	ldr	r6, [sp, #28]
 80094c0:	9d04      	ldr	r5, [sp, #16]
 80094c2:	9f08      	ldr	r7, [sp, #32]
 80094c4:	e73b      	b.n	800933e <_dtoa_r+0x736>
 80094c6:	9a07      	ldr	r2, [sp, #28]
 80094c8:	e767      	b.n	800939a <_dtoa_r+0x792>
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	dc18      	bgt.n	8009502 <_dtoa_r+0x8fa>
 80094d0:	f1ba 0f00 	cmp.w	sl, #0
 80094d4:	d115      	bne.n	8009502 <_dtoa_r+0x8fa>
 80094d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094da:	b993      	cbnz	r3, 8009502 <_dtoa_r+0x8fa>
 80094dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80094e0:	0d1b      	lsrs	r3, r3, #20
 80094e2:	051b      	lsls	r3, r3, #20
 80094e4:	b183      	cbz	r3, 8009508 <_dtoa_r+0x900>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	3301      	adds	r3, #1
 80094ea:	9304      	str	r3, [sp, #16]
 80094ec:	9b05      	ldr	r3, [sp, #20]
 80094ee:	3301      	adds	r3, #1
 80094f0:	9305      	str	r3, [sp, #20]
 80094f2:	f04f 0801 	mov.w	r8, #1
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	f47f af6a 	bne.w	80093d2 <_dtoa_r+0x7ca>
 80094fe:	2001      	movs	r0, #1
 8009500:	e76f      	b.n	80093e2 <_dtoa_r+0x7da>
 8009502:	f04f 0800 	mov.w	r8, #0
 8009506:	e7f6      	b.n	80094f6 <_dtoa_r+0x8ee>
 8009508:	4698      	mov	r8, r3
 800950a:	e7f4      	b.n	80094f6 <_dtoa_r+0x8ee>
 800950c:	f43f af7d 	beq.w	800940a <_dtoa_r+0x802>
 8009510:	4618      	mov	r0, r3
 8009512:	301c      	adds	r0, #28
 8009514:	e772      	b.n	80093fc <_dtoa_r+0x7f4>
 8009516:	9b03      	ldr	r3, [sp, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc37      	bgt.n	800958c <_dtoa_r+0x984>
 800951c:	9b06      	ldr	r3, [sp, #24]
 800951e:	2b02      	cmp	r3, #2
 8009520:	dd34      	ble.n	800958c <_dtoa_r+0x984>
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	9302      	str	r3, [sp, #8]
 8009526:	9b02      	ldr	r3, [sp, #8]
 8009528:	b96b      	cbnz	r3, 8009546 <_dtoa_r+0x93e>
 800952a:	4631      	mov	r1, r6
 800952c:	2205      	movs	r2, #5
 800952e:	4620      	mov	r0, r4
 8009530:	f000 ff74 	bl	800a41c <__multadd>
 8009534:	4601      	mov	r1, r0
 8009536:	4606      	mov	r6, r0
 8009538:	ee18 0a10 	vmov	r0, s16
 800953c:	f001 f9d8 	bl	800a8f0 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	f73f adbb 	bgt.w	80090bc <_dtoa_r+0x4b4>
 8009546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009548:	9d01      	ldr	r5, [sp, #4]
 800954a:	43db      	mvns	r3, r3
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	f04f 0800 	mov.w	r8, #0
 8009552:	4631      	mov	r1, r6
 8009554:	4620      	mov	r0, r4
 8009556:	f000 ff3f 	bl	800a3d8 <_Bfree>
 800955a:	2f00      	cmp	r7, #0
 800955c:	f43f aea4 	beq.w	80092a8 <_dtoa_r+0x6a0>
 8009560:	f1b8 0f00 	cmp.w	r8, #0
 8009564:	d005      	beq.n	8009572 <_dtoa_r+0x96a>
 8009566:	45b8      	cmp	r8, r7
 8009568:	d003      	beq.n	8009572 <_dtoa_r+0x96a>
 800956a:	4641      	mov	r1, r8
 800956c:	4620      	mov	r0, r4
 800956e:	f000 ff33 	bl	800a3d8 <_Bfree>
 8009572:	4639      	mov	r1, r7
 8009574:	4620      	mov	r0, r4
 8009576:	f000 ff2f 	bl	800a3d8 <_Bfree>
 800957a:	e695      	b.n	80092a8 <_dtoa_r+0x6a0>
 800957c:	2600      	movs	r6, #0
 800957e:	4637      	mov	r7, r6
 8009580:	e7e1      	b.n	8009546 <_dtoa_r+0x93e>
 8009582:	9700      	str	r7, [sp, #0]
 8009584:	4637      	mov	r7, r6
 8009586:	e599      	b.n	80090bc <_dtoa_r+0x4b4>
 8009588:	40240000 	.word	0x40240000
 800958c:	9b08      	ldr	r3, [sp, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 80ca 	beq.w	8009728 <_dtoa_r+0xb20>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	2d00      	cmp	r5, #0
 800959a:	dd05      	ble.n	80095a8 <_dtoa_r+0x9a0>
 800959c:	4639      	mov	r1, r7
 800959e:	462a      	mov	r2, r5
 80095a0:	4620      	mov	r0, r4
 80095a2:	f001 f935 	bl	800a810 <__lshift>
 80095a6:	4607      	mov	r7, r0
 80095a8:	f1b8 0f00 	cmp.w	r8, #0
 80095ac:	d05b      	beq.n	8009666 <_dtoa_r+0xa5e>
 80095ae:	6879      	ldr	r1, [r7, #4]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f000 fed1 	bl	800a358 <_Balloc>
 80095b6:	4605      	mov	r5, r0
 80095b8:	b928      	cbnz	r0, 80095c6 <_dtoa_r+0x9be>
 80095ba:	4b87      	ldr	r3, [pc, #540]	; (80097d8 <_dtoa_r+0xbd0>)
 80095bc:	4602      	mov	r2, r0
 80095be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80095c2:	f7ff bb3b 	b.w	8008c3c <_dtoa_r+0x34>
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	3202      	adds	r2, #2
 80095ca:	0092      	lsls	r2, r2, #2
 80095cc:	f107 010c 	add.w	r1, r7, #12
 80095d0:	300c      	adds	r0, #12
 80095d2:	f000 feb3 	bl	800a33c <memcpy>
 80095d6:	2201      	movs	r2, #1
 80095d8:	4629      	mov	r1, r5
 80095da:	4620      	mov	r0, r4
 80095dc:	f001 f918 	bl	800a810 <__lshift>
 80095e0:	9b01      	ldr	r3, [sp, #4]
 80095e2:	f103 0901 	add.w	r9, r3, #1
 80095e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80095ea:	4413      	add	r3, r2
 80095ec:	9305      	str	r3, [sp, #20]
 80095ee:	f00a 0301 	and.w	r3, sl, #1
 80095f2:	46b8      	mov	r8, r7
 80095f4:	9304      	str	r3, [sp, #16]
 80095f6:	4607      	mov	r7, r0
 80095f8:	4631      	mov	r1, r6
 80095fa:	ee18 0a10 	vmov	r0, s16
 80095fe:	f7ff fa75 	bl	8008aec <quorem>
 8009602:	4641      	mov	r1, r8
 8009604:	9002      	str	r0, [sp, #8]
 8009606:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800960a:	ee18 0a10 	vmov	r0, s16
 800960e:	f001 f96f 	bl	800a8f0 <__mcmp>
 8009612:	463a      	mov	r2, r7
 8009614:	9003      	str	r0, [sp, #12]
 8009616:	4631      	mov	r1, r6
 8009618:	4620      	mov	r0, r4
 800961a:	f001 f985 	bl	800a928 <__mdiff>
 800961e:	68c2      	ldr	r2, [r0, #12]
 8009620:	f109 3bff 	add.w	fp, r9, #4294967295
 8009624:	4605      	mov	r5, r0
 8009626:	bb02      	cbnz	r2, 800966a <_dtoa_r+0xa62>
 8009628:	4601      	mov	r1, r0
 800962a:	ee18 0a10 	vmov	r0, s16
 800962e:	f001 f95f 	bl	800a8f0 <__mcmp>
 8009632:	4602      	mov	r2, r0
 8009634:	4629      	mov	r1, r5
 8009636:	4620      	mov	r0, r4
 8009638:	9207      	str	r2, [sp, #28]
 800963a:	f000 fecd 	bl	800a3d8 <_Bfree>
 800963e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009642:	ea43 0102 	orr.w	r1, r3, r2
 8009646:	9b04      	ldr	r3, [sp, #16]
 8009648:	430b      	orrs	r3, r1
 800964a:	464d      	mov	r5, r9
 800964c:	d10f      	bne.n	800966e <_dtoa_r+0xa66>
 800964e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009652:	d02a      	beq.n	80096aa <_dtoa_r+0xaa2>
 8009654:	9b03      	ldr	r3, [sp, #12]
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd02      	ble.n	8009660 <_dtoa_r+0xa58>
 800965a:	9b02      	ldr	r3, [sp, #8]
 800965c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009660:	f88b a000 	strb.w	sl, [fp]
 8009664:	e775      	b.n	8009552 <_dtoa_r+0x94a>
 8009666:	4638      	mov	r0, r7
 8009668:	e7ba      	b.n	80095e0 <_dtoa_r+0x9d8>
 800966a:	2201      	movs	r2, #1
 800966c:	e7e2      	b.n	8009634 <_dtoa_r+0xa2c>
 800966e:	9b03      	ldr	r3, [sp, #12]
 8009670:	2b00      	cmp	r3, #0
 8009672:	db04      	blt.n	800967e <_dtoa_r+0xa76>
 8009674:	9906      	ldr	r1, [sp, #24]
 8009676:	430b      	orrs	r3, r1
 8009678:	9904      	ldr	r1, [sp, #16]
 800967a:	430b      	orrs	r3, r1
 800967c:	d122      	bne.n	80096c4 <_dtoa_r+0xabc>
 800967e:	2a00      	cmp	r2, #0
 8009680:	ddee      	ble.n	8009660 <_dtoa_r+0xa58>
 8009682:	ee18 1a10 	vmov	r1, s16
 8009686:	2201      	movs	r2, #1
 8009688:	4620      	mov	r0, r4
 800968a:	f001 f8c1 	bl	800a810 <__lshift>
 800968e:	4631      	mov	r1, r6
 8009690:	ee08 0a10 	vmov	s16, r0
 8009694:	f001 f92c 	bl	800a8f0 <__mcmp>
 8009698:	2800      	cmp	r0, #0
 800969a:	dc03      	bgt.n	80096a4 <_dtoa_r+0xa9c>
 800969c:	d1e0      	bne.n	8009660 <_dtoa_r+0xa58>
 800969e:	f01a 0f01 	tst.w	sl, #1
 80096a2:	d0dd      	beq.n	8009660 <_dtoa_r+0xa58>
 80096a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096a8:	d1d7      	bne.n	800965a <_dtoa_r+0xa52>
 80096aa:	2339      	movs	r3, #57	; 0x39
 80096ac:	f88b 3000 	strb.w	r3, [fp]
 80096b0:	462b      	mov	r3, r5
 80096b2:	461d      	mov	r5, r3
 80096b4:	3b01      	subs	r3, #1
 80096b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80096ba:	2a39      	cmp	r2, #57	; 0x39
 80096bc:	d071      	beq.n	80097a2 <_dtoa_r+0xb9a>
 80096be:	3201      	adds	r2, #1
 80096c0:	701a      	strb	r2, [r3, #0]
 80096c2:	e746      	b.n	8009552 <_dtoa_r+0x94a>
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	dd07      	ble.n	80096d8 <_dtoa_r+0xad0>
 80096c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80096cc:	d0ed      	beq.n	80096aa <_dtoa_r+0xaa2>
 80096ce:	f10a 0301 	add.w	r3, sl, #1
 80096d2:	f88b 3000 	strb.w	r3, [fp]
 80096d6:	e73c      	b.n	8009552 <_dtoa_r+0x94a>
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80096de:	4599      	cmp	r9, r3
 80096e0:	d047      	beq.n	8009772 <_dtoa_r+0xb6a>
 80096e2:	ee18 1a10 	vmov	r1, s16
 80096e6:	2300      	movs	r3, #0
 80096e8:	220a      	movs	r2, #10
 80096ea:	4620      	mov	r0, r4
 80096ec:	f000 fe96 	bl	800a41c <__multadd>
 80096f0:	45b8      	cmp	r8, r7
 80096f2:	ee08 0a10 	vmov	s16, r0
 80096f6:	f04f 0300 	mov.w	r3, #0
 80096fa:	f04f 020a 	mov.w	r2, #10
 80096fe:	4641      	mov	r1, r8
 8009700:	4620      	mov	r0, r4
 8009702:	d106      	bne.n	8009712 <_dtoa_r+0xb0a>
 8009704:	f000 fe8a 	bl	800a41c <__multadd>
 8009708:	4680      	mov	r8, r0
 800970a:	4607      	mov	r7, r0
 800970c:	f109 0901 	add.w	r9, r9, #1
 8009710:	e772      	b.n	80095f8 <_dtoa_r+0x9f0>
 8009712:	f000 fe83 	bl	800a41c <__multadd>
 8009716:	4639      	mov	r1, r7
 8009718:	4680      	mov	r8, r0
 800971a:	2300      	movs	r3, #0
 800971c:	220a      	movs	r2, #10
 800971e:	4620      	mov	r0, r4
 8009720:	f000 fe7c 	bl	800a41c <__multadd>
 8009724:	4607      	mov	r7, r0
 8009726:	e7f1      	b.n	800970c <_dtoa_r+0xb04>
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	9302      	str	r3, [sp, #8]
 800972c:	9d01      	ldr	r5, [sp, #4]
 800972e:	ee18 0a10 	vmov	r0, s16
 8009732:	4631      	mov	r1, r6
 8009734:	f7ff f9da 	bl	8008aec <quorem>
 8009738:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800973c:	9b01      	ldr	r3, [sp, #4]
 800973e:	f805 ab01 	strb.w	sl, [r5], #1
 8009742:	1aea      	subs	r2, r5, r3
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	4293      	cmp	r3, r2
 8009748:	dd09      	ble.n	800975e <_dtoa_r+0xb56>
 800974a:	ee18 1a10 	vmov	r1, s16
 800974e:	2300      	movs	r3, #0
 8009750:	220a      	movs	r2, #10
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fe62 	bl	800a41c <__multadd>
 8009758:	ee08 0a10 	vmov	s16, r0
 800975c:	e7e7      	b.n	800972e <_dtoa_r+0xb26>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	bfc8      	it	gt
 8009764:	461d      	movgt	r5, r3
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	bfd8      	it	le
 800976a:	2501      	movle	r5, #1
 800976c:	441d      	add	r5, r3
 800976e:	f04f 0800 	mov.w	r8, #0
 8009772:	ee18 1a10 	vmov	r1, s16
 8009776:	2201      	movs	r2, #1
 8009778:	4620      	mov	r0, r4
 800977a:	f001 f849 	bl	800a810 <__lshift>
 800977e:	4631      	mov	r1, r6
 8009780:	ee08 0a10 	vmov	s16, r0
 8009784:	f001 f8b4 	bl	800a8f0 <__mcmp>
 8009788:	2800      	cmp	r0, #0
 800978a:	dc91      	bgt.n	80096b0 <_dtoa_r+0xaa8>
 800978c:	d102      	bne.n	8009794 <_dtoa_r+0xb8c>
 800978e:	f01a 0f01 	tst.w	sl, #1
 8009792:	d18d      	bne.n	80096b0 <_dtoa_r+0xaa8>
 8009794:	462b      	mov	r3, r5
 8009796:	461d      	mov	r5, r3
 8009798:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800979c:	2a30      	cmp	r2, #48	; 0x30
 800979e:	d0fa      	beq.n	8009796 <_dtoa_r+0xb8e>
 80097a0:	e6d7      	b.n	8009552 <_dtoa_r+0x94a>
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d184      	bne.n	80096b2 <_dtoa_r+0xaaa>
 80097a8:	9b00      	ldr	r3, [sp, #0]
 80097aa:	3301      	adds	r3, #1
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	2331      	movs	r3, #49	; 0x31
 80097b0:	7013      	strb	r3, [r2, #0]
 80097b2:	e6ce      	b.n	8009552 <_dtoa_r+0x94a>
 80097b4:	4b09      	ldr	r3, [pc, #36]	; (80097dc <_dtoa_r+0xbd4>)
 80097b6:	f7ff ba95 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f47f aa6e 	bne.w	8008c9e <_dtoa_r+0x96>
 80097c2:	4b07      	ldr	r3, [pc, #28]	; (80097e0 <_dtoa_r+0xbd8>)
 80097c4:	f7ff ba8e 	b.w	8008ce4 <_dtoa_r+0xdc>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	dcae      	bgt.n	800972c <_dtoa_r+0xb24>
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	f73f aea8 	bgt.w	8009526 <_dtoa_r+0x91e>
 80097d6:	e7a9      	b.n	800972c <_dtoa_r+0xb24>
 80097d8:	0800bac8 	.word	0x0800bac8
 80097dc:	0800b8c8 	.word	0x0800b8c8
 80097e0:	0800ba49 	.word	0x0800ba49

080097e4 <__sflush_r>:
 80097e4:	898a      	ldrh	r2, [r1, #12]
 80097e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	0710      	lsls	r0, r2, #28
 80097ee:	460c      	mov	r4, r1
 80097f0:	d458      	bmi.n	80098a4 <__sflush_r+0xc0>
 80097f2:	684b      	ldr	r3, [r1, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dc05      	bgt.n	8009804 <__sflush_r+0x20>
 80097f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	dc02      	bgt.n	8009804 <__sflush_r+0x20>
 80097fe:	2000      	movs	r0, #0
 8009800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009806:	2e00      	cmp	r6, #0
 8009808:	d0f9      	beq.n	80097fe <__sflush_r+0x1a>
 800980a:	2300      	movs	r3, #0
 800980c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009810:	682f      	ldr	r7, [r5, #0]
 8009812:	602b      	str	r3, [r5, #0]
 8009814:	d032      	beq.n	800987c <__sflush_r+0x98>
 8009816:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	075a      	lsls	r2, r3, #29
 800981c:	d505      	bpl.n	800982a <__sflush_r+0x46>
 800981e:	6863      	ldr	r3, [r4, #4]
 8009820:	1ac0      	subs	r0, r0, r3
 8009822:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009824:	b10b      	cbz	r3, 800982a <__sflush_r+0x46>
 8009826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	2300      	movs	r3, #0
 800982c:	4602      	mov	r2, r0
 800982e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009830:	6a21      	ldr	r1, [r4, #32]
 8009832:	4628      	mov	r0, r5
 8009834:	47b0      	blx	r6
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	d106      	bne.n	800984a <__sflush_r+0x66>
 800983c:	6829      	ldr	r1, [r5, #0]
 800983e:	291d      	cmp	r1, #29
 8009840:	d82c      	bhi.n	800989c <__sflush_r+0xb8>
 8009842:	4a2a      	ldr	r2, [pc, #168]	; (80098ec <__sflush_r+0x108>)
 8009844:	40ca      	lsrs	r2, r1
 8009846:	07d6      	lsls	r6, r2, #31
 8009848:	d528      	bpl.n	800989c <__sflush_r+0xb8>
 800984a:	2200      	movs	r2, #0
 800984c:	6062      	str	r2, [r4, #4]
 800984e:	04d9      	lsls	r1, r3, #19
 8009850:	6922      	ldr	r2, [r4, #16]
 8009852:	6022      	str	r2, [r4, #0]
 8009854:	d504      	bpl.n	8009860 <__sflush_r+0x7c>
 8009856:	1c42      	adds	r2, r0, #1
 8009858:	d101      	bne.n	800985e <__sflush_r+0x7a>
 800985a:	682b      	ldr	r3, [r5, #0]
 800985c:	b903      	cbnz	r3, 8009860 <__sflush_r+0x7c>
 800985e:	6560      	str	r0, [r4, #84]	; 0x54
 8009860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009862:	602f      	str	r7, [r5, #0]
 8009864:	2900      	cmp	r1, #0
 8009866:	d0ca      	beq.n	80097fe <__sflush_r+0x1a>
 8009868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800986c:	4299      	cmp	r1, r3
 800986e:	d002      	beq.n	8009876 <__sflush_r+0x92>
 8009870:	4628      	mov	r0, r5
 8009872:	f001 fa49 	bl	800ad08 <_free_r>
 8009876:	2000      	movs	r0, #0
 8009878:	6360      	str	r0, [r4, #52]	; 0x34
 800987a:	e7c1      	b.n	8009800 <__sflush_r+0x1c>
 800987c:	6a21      	ldr	r1, [r4, #32]
 800987e:	2301      	movs	r3, #1
 8009880:	4628      	mov	r0, r5
 8009882:	47b0      	blx	r6
 8009884:	1c41      	adds	r1, r0, #1
 8009886:	d1c7      	bne.n	8009818 <__sflush_r+0x34>
 8009888:	682b      	ldr	r3, [r5, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c4      	beq.n	8009818 <__sflush_r+0x34>
 800988e:	2b1d      	cmp	r3, #29
 8009890:	d001      	beq.n	8009896 <__sflush_r+0xb2>
 8009892:	2b16      	cmp	r3, #22
 8009894:	d101      	bne.n	800989a <__sflush_r+0xb6>
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	e7b1      	b.n	80097fe <__sflush_r+0x1a>
 800989a:	89a3      	ldrh	r3, [r4, #12]
 800989c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a0:	81a3      	strh	r3, [r4, #12]
 80098a2:	e7ad      	b.n	8009800 <__sflush_r+0x1c>
 80098a4:	690f      	ldr	r7, [r1, #16]
 80098a6:	2f00      	cmp	r7, #0
 80098a8:	d0a9      	beq.n	80097fe <__sflush_r+0x1a>
 80098aa:	0793      	lsls	r3, r2, #30
 80098ac:	680e      	ldr	r6, [r1, #0]
 80098ae:	bf08      	it	eq
 80098b0:	694b      	ldreq	r3, [r1, #20]
 80098b2:	600f      	str	r7, [r1, #0]
 80098b4:	bf18      	it	ne
 80098b6:	2300      	movne	r3, #0
 80098b8:	eba6 0807 	sub.w	r8, r6, r7
 80098bc:	608b      	str	r3, [r1, #8]
 80098be:	f1b8 0f00 	cmp.w	r8, #0
 80098c2:	dd9c      	ble.n	80097fe <__sflush_r+0x1a>
 80098c4:	6a21      	ldr	r1, [r4, #32]
 80098c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098c8:	4643      	mov	r3, r8
 80098ca:	463a      	mov	r2, r7
 80098cc:	4628      	mov	r0, r5
 80098ce:	47b0      	blx	r6
 80098d0:	2800      	cmp	r0, #0
 80098d2:	dc06      	bgt.n	80098e2 <__sflush_r+0xfe>
 80098d4:	89a3      	ldrh	r3, [r4, #12]
 80098d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	f04f 30ff 	mov.w	r0, #4294967295
 80098e0:	e78e      	b.n	8009800 <__sflush_r+0x1c>
 80098e2:	4407      	add	r7, r0
 80098e4:	eba8 0800 	sub.w	r8, r8, r0
 80098e8:	e7e9      	b.n	80098be <__sflush_r+0xda>
 80098ea:	bf00      	nop
 80098ec:	20400001 	.word	0x20400001

080098f0 <_fflush_r>:
 80098f0:	b538      	push	{r3, r4, r5, lr}
 80098f2:	690b      	ldr	r3, [r1, #16]
 80098f4:	4605      	mov	r5, r0
 80098f6:	460c      	mov	r4, r1
 80098f8:	b913      	cbnz	r3, 8009900 <_fflush_r+0x10>
 80098fa:	2500      	movs	r5, #0
 80098fc:	4628      	mov	r0, r5
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	b118      	cbz	r0, 800990a <_fflush_r+0x1a>
 8009902:	6983      	ldr	r3, [r0, #24]
 8009904:	b90b      	cbnz	r3, 800990a <_fflush_r+0x1a>
 8009906:	f000 f887 	bl	8009a18 <__sinit>
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <_fflush_r+0x6c>)
 800990c:	429c      	cmp	r4, r3
 800990e:	d11b      	bne.n	8009948 <_fflush_r+0x58>
 8009910:	686c      	ldr	r4, [r5, #4]
 8009912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0ef      	beq.n	80098fa <_fflush_r+0xa>
 800991a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800991c:	07d0      	lsls	r0, r2, #31
 800991e:	d404      	bmi.n	800992a <_fflush_r+0x3a>
 8009920:	0599      	lsls	r1, r3, #22
 8009922:	d402      	bmi.n	800992a <_fflush_r+0x3a>
 8009924:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009926:	f000 fc88 	bl	800a23a <__retarget_lock_acquire_recursive>
 800992a:	4628      	mov	r0, r5
 800992c:	4621      	mov	r1, r4
 800992e:	f7ff ff59 	bl	80097e4 <__sflush_r>
 8009932:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009934:	07da      	lsls	r2, r3, #31
 8009936:	4605      	mov	r5, r0
 8009938:	d4e0      	bmi.n	80098fc <_fflush_r+0xc>
 800993a:	89a3      	ldrh	r3, [r4, #12]
 800993c:	059b      	lsls	r3, r3, #22
 800993e:	d4dd      	bmi.n	80098fc <_fflush_r+0xc>
 8009940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009942:	f000 fc7b 	bl	800a23c <__retarget_lock_release_recursive>
 8009946:	e7d9      	b.n	80098fc <_fflush_r+0xc>
 8009948:	4b05      	ldr	r3, [pc, #20]	; (8009960 <_fflush_r+0x70>)
 800994a:	429c      	cmp	r4, r3
 800994c:	d101      	bne.n	8009952 <_fflush_r+0x62>
 800994e:	68ac      	ldr	r4, [r5, #8]
 8009950:	e7df      	b.n	8009912 <_fflush_r+0x22>
 8009952:	4b04      	ldr	r3, [pc, #16]	; (8009964 <_fflush_r+0x74>)
 8009954:	429c      	cmp	r4, r3
 8009956:	bf08      	it	eq
 8009958:	68ec      	ldreq	r4, [r5, #12]
 800995a:	e7da      	b.n	8009912 <_fflush_r+0x22>
 800995c:	0800bafc 	.word	0x0800bafc
 8009960:	0800bb1c 	.word	0x0800bb1c
 8009964:	0800badc 	.word	0x0800badc

08009968 <std>:
 8009968:	2300      	movs	r3, #0
 800996a:	b510      	push	{r4, lr}
 800996c:	4604      	mov	r4, r0
 800996e:	e9c0 3300 	strd	r3, r3, [r0]
 8009972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009976:	6083      	str	r3, [r0, #8]
 8009978:	8181      	strh	r1, [r0, #12]
 800997a:	6643      	str	r3, [r0, #100]	; 0x64
 800997c:	81c2      	strh	r2, [r0, #14]
 800997e:	6183      	str	r3, [r0, #24]
 8009980:	4619      	mov	r1, r3
 8009982:	2208      	movs	r2, #8
 8009984:	305c      	adds	r0, #92	; 0x5c
 8009986:	f7fd fa05 	bl	8006d94 <memset>
 800998a:	4b05      	ldr	r3, [pc, #20]	; (80099a0 <std+0x38>)
 800998c:	6263      	str	r3, [r4, #36]	; 0x24
 800998e:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <std+0x3c>)
 8009990:	62a3      	str	r3, [r4, #40]	; 0x28
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x40>)
 8009994:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x44>)
 8009998:	6224      	str	r4, [r4, #32]
 800999a:	6323      	str	r3, [r4, #48]	; 0x30
 800999c:	bd10      	pop	{r4, pc}
 800999e:	bf00      	nop
 80099a0:	0800b469 	.word	0x0800b469
 80099a4:	0800b48b 	.word	0x0800b48b
 80099a8:	0800b4c3 	.word	0x0800b4c3
 80099ac:	0800b4e7 	.word	0x0800b4e7

080099b0 <_cleanup_r>:
 80099b0:	4901      	ldr	r1, [pc, #4]	; (80099b8 <_cleanup_r+0x8>)
 80099b2:	f000 b8af 	b.w	8009b14 <_fwalk_reent>
 80099b6:	bf00      	nop
 80099b8:	080098f1 	.word	0x080098f1

080099bc <__sfmoreglue>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	2268      	movs	r2, #104	; 0x68
 80099c0:	1e4d      	subs	r5, r1, #1
 80099c2:	4355      	muls	r5, r2
 80099c4:	460e      	mov	r6, r1
 80099c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099ca:	f001 fa09 	bl	800ade0 <_malloc_r>
 80099ce:	4604      	mov	r4, r0
 80099d0:	b140      	cbz	r0, 80099e4 <__sfmoreglue+0x28>
 80099d2:	2100      	movs	r1, #0
 80099d4:	e9c0 1600 	strd	r1, r6, [r0]
 80099d8:	300c      	adds	r0, #12
 80099da:	60a0      	str	r0, [r4, #8]
 80099dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e0:	f7fd f9d8 	bl	8006d94 <memset>
 80099e4:	4620      	mov	r0, r4
 80099e6:	bd70      	pop	{r4, r5, r6, pc}

080099e8 <__sfp_lock_acquire>:
 80099e8:	4801      	ldr	r0, [pc, #4]	; (80099f0 <__sfp_lock_acquire+0x8>)
 80099ea:	f000 bc26 	b.w	800a23a <__retarget_lock_acquire_recursive>
 80099ee:	bf00      	nop
 80099f0:	200003c1 	.word	0x200003c1

080099f4 <__sfp_lock_release>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__sfp_lock_release+0x8>)
 80099f6:	f000 bc21 	b.w	800a23c <__retarget_lock_release_recursive>
 80099fa:	bf00      	nop
 80099fc:	200003c1 	.word	0x200003c1

08009a00 <__sinit_lock_acquire>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__sinit_lock_acquire+0x8>)
 8009a02:	f000 bc1a 	b.w	800a23a <__retarget_lock_acquire_recursive>
 8009a06:	bf00      	nop
 8009a08:	200003c2 	.word	0x200003c2

08009a0c <__sinit_lock_release>:
 8009a0c:	4801      	ldr	r0, [pc, #4]	; (8009a14 <__sinit_lock_release+0x8>)
 8009a0e:	f000 bc15 	b.w	800a23c <__retarget_lock_release_recursive>
 8009a12:	bf00      	nop
 8009a14:	200003c2 	.word	0x200003c2

08009a18 <__sinit>:
 8009a18:	b510      	push	{r4, lr}
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	f7ff fff0 	bl	8009a00 <__sinit_lock_acquire>
 8009a20:	69a3      	ldr	r3, [r4, #24]
 8009a22:	b11b      	cbz	r3, 8009a2c <__sinit+0x14>
 8009a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a28:	f7ff bff0 	b.w	8009a0c <__sinit_lock_release>
 8009a2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a30:	6523      	str	r3, [r4, #80]	; 0x50
 8009a32:	4b13      	ldr	r3, [pc, #76]	; (8009a80 <__sinit+0x68>)
 8009a34:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <__sinit+0x6c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a3a:	42a3      	cmp	r3, r4
 8009a3c:	bf04      	itt	eq
 8009a3e:	2301      	moveq	r3, #1
 8009a40:	61a3      	streq	r3, [r4, #24]
 8009a42:	4620      	mov	r0, r4
 8009a44:	f000 f820 	bl	8009a88 <__sfp>
 8009a48:	6060      	str	r0, [r4, #4]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f81c 	bl	8009a88 <__sfp>
 8009a50:	60a0      	str	r0, [r4, #8]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 f818 	bl	8009a88 <__sfp>
 8009a58:	2200      	movs	r2, #0
 8009a5a:	60e0      	str	r0, [r4, #12]
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	6860      	ldr	r0, [r4, #4]
 8009a60:	f7ff ff82 	bl	8009968 <std>
 8009a64:	68a0      	ldr	r0, [r4, #8]
 8009a66:	2201      	movs	r2, #1
 8009a68:	2109      	movs	r1, #9
 8009a6a:	f7ff ff7d 	bl	8009968 <std>
 8009a6e:	68e0      	ldr	r0, [r4, #12]
 8009a70:	2202      	movs	r2, #2
 8009a72:	2112      	movs	r1, #18
 8009a74:	f7ff ff78 	bl	8009968 <std>
 8009a78:	2301      	movs	r3, #1
 8009a7a:	61a3      	str	r3, [r4, #24]
 8009a7c:	e7d2      	b.n	8009a24 <__sinit+0xc>
 8009a7e:	bf00      	nop
 8009a80:	0800b8b4 	.word	0x0800b8b4
 8009a84:	080099b1 	.word	0x080099b1

08009a88 <__sfp>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	f7ff ffac 	bl	80099e8 <__sfp_lock_acquire>
 8009a90:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <__sfp+0x84>)
 8009a92:	681e      	ldr	r6, [r3, #0]
 8009a94:	69b3      	ldr	r3, [r6, #24]
 8009a96:	b913      	cbnz	r3, 8009a9e <__sfp+0x16>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff ffbd 	bl	8009a18 <__sinit>
 8009a9e:	3648      	adds	r6, #72	; 0x48
 8009aa0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	d503      	bpl.n	8009ab0 <__sfp+0x28>
 8009aa8:	6833      	ldr	r3, [r6, #0]
 8009aaa:	b30b      	cbz	r3, 8009af0 <__sfp+0x68>
 8009aac:	6836      	ldr	r6, [r6, #0]
 8009aae:	e7f7      	b.n	8009aa0 <__sfp+0x18>
 8009ab0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009ab4:	b9d5      	cbnz	r5, 8009aec <__sfp+0x64>
 8009ab6:	4b16      	ldr	r3, [pc, #88]	; (8009b10 <__sfp+0x88>)
 8009ab8:	60e3      	str	r3, [r4, #12]
 8009aba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009abe:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac0:	f000 fbba 	bl	800a238 <__retarget_lock_init_recursive>
 8009ac4:	f7ff ff96 	bl	80099f4 <__sfp_lock_release>
 8009ac8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009acc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad0:	6025      	str	r5, [r4, #0]
 8009ad2:	61a5      	str	r5, [r4, #24]
 8009ad4:	2208      	movs	r2, #8
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009adc:	f7fd f95a 	bl	8006d94 <memset>
 8009ae0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ae4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ae8:	4620      	mov	r0, r4
 8009aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009aec:	3468      	adds	r4, #104	; 0x68
 8009aee:	e7d9      	b.n	8009aa4 <__sfp+0x1c>
 8009af0:	2104      	movs	r1, #4
 8009af2:	4638      	mov	r0, r7
 8009af4:	f7ff ff62 	bl	80099bc <__sfmoreglue>
 8009af8:	4604      	mov	r4, r0
 8009afa:	6030      	str	r0, [r6, #0]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d1d5      	bne.n	8009aac <__sfp+0x24>
 8009b00:	f7ff ff78 	bl	80099f4 <__sfp_lock_release>
 8009b04:	230c      	movs	r3, #12
 8009b06:	603b      	str	r3, [r7, #0]
 8009b08:	e7ee      	b.n	8009ae8 <__sfp+0x60>
 8009b0a:	bf00      	nop
 8009b0c:	0800b8b4 	.word	0x0800b8b4
 8009b10:	ffff0001 	.word	0xffff0001

08009b14 <_fwalk_reent>:
 8009b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b18:	4606      	mov	r6, r0
 8009b1a:	4688      	mov	r8, r1
 8009b1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b20:	2700      	movs	r7, #0
 8009b22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b26:	f1b9 0901 	subs.w	r9, r9, #1
 8009b2a:	d505      	bpl.n	8009b38 <_fwalk_reent+0x24>
 8009b2c:	6824      	ldr	r4, [r4, #0]
 8009b2e:	2c00      	cmp	r4, #0
 8009b30:	d1f7      	bne.n	8009b22 <_fwalk_reent+0xe>
 8009b32:	4638      	mov	r0, r7
 8009b34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b38:	89ab      	ldrh	r3, [r5, #12]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d907      	bls.n	8009b4e <_fwalk_reent+0x3a>
 8009b3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b42:	3301      	adds	r3, #1
 8009b44:	d003      	beq.n	8009b4e <_fwalk_reent+0x3a>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4630      	mov	r0, r6
 8009b4a:	47c0      	blx	r8
 8009b4c:	4307      	orrs	r7, r0
 8009b4e:	3568      	adds	r5, #104	; 0x68
 8009b50:	e7e9      	b.n	8009b26 <_fwalk_reent+0x12>

08009b52 <rshift>:
 8009b52:	6903      	ldr	r3, [r0, #16]
 8009b54:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b5c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b60:	f100 0414 	add.w	r4, r0, #20
 8009b64:	dd45      	ble.n	8009bf2 <rshift+0xa0>
 8009b66:	f011 011f 	ands.w	r1, r1, #31
 8009b6a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b6e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b72:	d10c      	bne.n	8009b8e <rshift+0x3c>
 8009b74:	f100 0710 	add.w	r7, r0, #16
 8009b78:	4629      	mov	r1, r5
 8009b7a:	42b1      	cmp	r1, r6
 8009b7c:	d334      	bcc.n	8009be8 <rshift+0x96>
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	1eea      	subs	r2, r5, #3
 8009b84:	4296      	cmp	r6, r2
 8009b86:	bf38      	it	cc
 8009b88:	2300      	movcc	r3, #0
 8009b8a:	4423      	add	r3, r4
 8009b8c:	e015      	b.n	8009bba <rshift+0x68>
 8009b8e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b92:	f1c1 0820 	rsb	r8, r1, #32
 8009b96:	40cf      	lsrs	r7, r1
 8009b98:	f105 0e04 	add.w	lr, r5, #4
 8009b9c:	46a1      	mov	r9, r4
 8009b9e:	4576      	cmp	r6, lr
 8009ba0:	46f4      	mov	ip, lr
 8009ba2:	d815      	bhi.n	8009bd0 <rshift+0x7e>
 8009ba4:	1a9a      	subs	r2, r3, r2
 8009ba6:	0092      	lsls	r2, r2, #2
 8009ba8:	3a04      	subs	r2, #4
 8009baa:	3501      	adds	r5, #1
 8009bac:	42ae      	cmp	r6, r5
 8009bae:	bf38      	it	cc
 8009bb0:	2200      	movcc	r2, #0
 8009bb2:	18a3      	adds	r3, r4, r2
 8009bb4:	50a7      	str	r7, [r4, r2]
 8009bb6:	b107      	cbz	r7, 8009bba <rshift+0x68>
 8009bb8:	3304      	adds	r3, #4
 8009bba:	1b1a      	subs	r2, r3, r4
 8009bbc:	42a3      	cmp	r3, r4
 8009bbe:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bc2:	bf08      	it	eq
 8009bc4:	2300      	moveq	r3, #0
 8009bc6:	6102      	str	r2, [r0, #16]
 8009bc8:	bf08      	it	eq
 8009bca:	6143      	streq	r3, [r0, #20]
 8009bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bd0:	f8dc c000 	ldr.w	ip, [ip]
 8009bd4:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bd8:	ea4c 0707 	orr.w	r7, ip, r7
 8009bdc:	f849 7b04 	str.w	r7, [r9], #4
 8009be0:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009be4:	40cf      	lsrs	r7, r1
 8009be6:	e7da      	b.n	8009b9e <rshift+0x4c>
 8009be8:	f851 cb04 	ldr.w	ip, [r1], #4
 8009bec:	f847 cf04 	str.w	ip, [r7, #4]!
 8009bf0:	e7c3      	b.n	8009b7a <rshift+0x28>
 8009bf2:	4623      	mov	r3, r4
 8009bf4:	e7e1      	b.n	8009bba <rshift+0x68>

08009bf6 <__hexdig_fun>:
 8009bf6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009bfa:	2b09      	cmp	r3, #9
 8009bfc:	d802      	bhi.n	8009c04 <__hexdig_fun+0xe>
 8009bfe:	3820      	subs	r0, #32
 8009c00:	b2c0      	uxtb	r0, r0
 8009c02:	4770      	bx	lr
 8009c04:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d801      	bhi.n	8009c10 <__hexdig_fun+0x1a>
 8009c0c:	3847      	subs	r0, #71	; 0x47
 8009c0e:	e7f7      	b.n	8009c00 <__hexdig_fun+0xa>
 8009c10:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009c14:	2b05      	cmp	r3, #5
 8009c16:	d801      	bhi.n	8009c1c <__hexdig_fun+0x26>
 8009c18:	3827      	subs	r0, #39	; 0x27
 8009c1a:	e7f1      	b.n	8009c00 <__hexdig_fun+0xa>
 8009c1c:	2000      	movs	r0, #0
 8009c1e:	4770      	bx	lr

08009c20 <__gethex>:
 8009c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c24:	ed2d 8b02 	vpush	{d8}
 8009c28:	b089      	sub	sp, #36	; 0x24
 8009c2a:	ee08 0a10 	vmov	s16, r0
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	4bb4      	ldr	r3, [pc, #720]	; (8009f04 <__gethex+0x2e4>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	4618      	mov	r0, r3
 8009c38:	468b      	mov	fp, r1
 8009c3a:	4690      	mov	r8, r2
 8009c3c:	f7f6 fac8 	bl	80001d0 <strlen>
 8009c40:	9b01      	ldr	r3, [sp, #4]
 8009c42:	f8db 2000 	ldr.w	r2, [fp]
 8009c46:	4403      	add	r3, r0
 8009c48:	4682      	mov	sl, r0
 8009c4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009c4e:	9305      	str	r3, [sp, #20]
 8009c50:	1c93      	adds	r3, r2, #2
 8009c52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009c56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009c5a:	32fe      	adds	r2, #254	; 0xfe
 8009c5c:	18d1      	adds	r1, r2, r3
 8009c5e:	461f      	mov	r7, r3
 8009c60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c64:	9100      	str	r1, [sp, #0]
 8009c66:	2830      	cmp	r0, #48	; 0x30
 8009c68:	d0f8      	beq.n	8009c5c <__gethex+0x3c>
 8009c6a:	f7ff ffc4 	bl	8009bf6 <__hexdig_fun>
 8009c6e:	4604      	mov	r4, r0
 8009c70:	2800      	cmp	r0, #0
 8009c72:	d13a      	bne.n	8009cea <__gethex+0xca>
 8009c74:	9901      	ldr	r1, [sp, #4]
 8009c76:	4652      	mov	r2, sl
 8009c78:	4638      	mov	r0, r7
 8009c7a:	f001 fc38 	bl	800b4ee <strncmp>
 8009c7e:	4605      	mov	r5, r0
 8009c80:	2800      	cmp	r0, #0
 8009c82:	d168      	bne.n	8009d56 <__gethex+0x136>
 8009c84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009c88:	eb07 060a 	add.w	r6, r7, sl
 8009c8c:	f7ff ffb3 	bl	8009bf6 <__hexdig_fun>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	d062      	beq.n	8009d5a <__gethex+0x13a>
 8009c94:	4633      	mov	r3, r6
 8009c96:	7818      	ldrb	r0, [r3, #0]
 8009c98:	2830      	cmp	r0, #48	; 0x30
 8009c9a:	461f      	mov	r7, r3
 8009c9c:	f103 0301 	add.w	r3, r3, #1
 8009ca0:	d0f9      	beq.n	8009c96 <__gethex+0x76>
 8009ca2:	f7ff ffa8 	bl	8009bf6 <__hexdig_fun>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	fab0 f480 	clz	r4, r0
 8009cac:	0964      	lsrs	r4, r4, #5
 8009cae:	4635      	mov	r5, r6
 8009cb0:	9300      	str	r3, [sp, #0]
 8009cb2:	463a      	mov	r2, r7
 8009cb4:	4616      	mov	r6, r2
 8009cb6:	3201      	adds	r2, #1
 8009cb8:	7830      	ldrb	r0, [r6, #0]
 8009cba:	f7ff ff9c 	bl	8009bf6 <__hexdig_fun>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d1f8      	bne.n	8009cb4 <__gethex+0x94>
 8009cc2:	9901      	ldr	r1, [sp, #4]
 8009cc4:	4652      	mov	r2, sl
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	f001 fc11 	bl	800b4ee <strncmp>
 8009ccc:	b980      	cbnz	r0, 8009cf0 <__gethex+0xd0>
 8009cce:	b94d      	cbnz	r5, 8009ce4 <__gethex+0xc4>
 8009cd0:	eb06 050a 	add.w	r5, r6, sl
 8009cd4:	462a      	mov	r2, r5
 8009cd6:	4616      	mov	r6, r2
 8009cd8:	3201      	adds	r2, #1
 8009cda:	7830      	ldrb	r0, [r6, #0]
 8009cdc:	f7ff ff8b 	bl	8009bf6 <__hexdig_fun>
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d1f8      	bne.n	8009cd6 <__gethex+0xb6>
 8009ce4:	1bad      	subs	r5, r5, r6
 8009ce6:	00ad      	lsls	r5, r5, #2
 8009ce8:	e004      	b.n	8009cf4 <__gethex+0xd4>
 8009cea:	2400      	movs	r4, #0
 8009cec:	4625      	mov	r5, r4
 8009cee:	e7e0      	b.n	8009cb2 <__gethex+0x92>
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	d1f7      	bne.n	8009ce4 <__gethex+0xc4>
 8009cf4:	7833      	ldrb	r3, [r6, #0]
 8009cf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cfa:	2b50      	cmp	r3, #80	; 0x50
 8009cfc:	d13b      	bne.n	8009d76 <__gethex+0x156>
 8009cfe:	7873      	ldrb	r3, [r6, #1]
 8009d00:	2b2b      	cmp	r3, #43	; 0x2b
 8009d02:	d02c      	beq.n	8009d5e <__gethex+0x13e>
 8009d04:	2b2d      	cmp	r3, #45	; 0x2d
 8009d06:	d02e      	beq.n	8009d66 <__gethex+0x146>
 8009d08:	1c71      	adds	r1, r6, #1
 8009d0a:	f04f 0900 	mov.w	r9, #0
 8009d0e:	7808      	ldrb	r0, [r1, #0]
 8009d10:	f7ff ff71 	bl	8009bf6 <__hexdig_fun>
 8009d14:	1e43      	subs	r3, r0, #1
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	2b18      	cmp	r3, #24
 8009d1a:	d82c      	bhi.n	8009d76 <__gethex+0x156>
 8009d1c:	f1a0 0210 	sub.w	r2, r0, #16
 8009d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d24:	f7ff ff67 	bl	8009bf6 <__hexdig_fun>
 8009d28:	1e43      	subs	r3, r0, #1
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b18      	cmp	r3, #24
 8009d2e:	d91d      	bls.n	8009d6c <__gethex+0x14c>
 8009d30:	f1b9 0f00 	cmp.w	r9, #0
 8009d34:	d000      	beq.n	8009d38 <__gethex+0x118>
 8009d36:	4252      	negs	r2, r2
 8009d38:	4415      	add	r5, r2
 8009d3a:	f8cb 1000 	str.w	r1, [fp]
 8009d3e:	b1e4      	cbz	r4, 8009d7a <__gethex+0x15a>
 8009d40:	9b00      	ldr	r3, [sp, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	bf14      	ite	ne
 8009d46:	2700      	movne	r7, #0
 8009d48:	2706      	moveq	r7, #6
 8009d4a:	4638      	mov	r0, r7
 8009d4c:	b009      	add	sp, #36	; 0x24
 8009d4e:	ecbd 8b02 	vpop	{d8}
 8009d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d56:	463e      	mov	r6, r7
 8009d58:	4625      	mov	r5, r4
 8009d5a:	2401      	movs	r4, #1
 8009d5c:	e7ca      	b.n	8009cf4 <__gethex+0xd4>
 8009d5e:	f04f 0900 	mov.w	r9, #0
 8009d62:	1cb1      	adds	r1, r6, #2
 8009d64:	e7d3      	b.n	8009d0e <__gethex+0xee>
 8009d66:	f04f 0901 	mov.w	r9, #1
 8009d6a:	e7fa      	b.n	8009d62 <__gethex+0x142>
 8009d6c:	230a      	movs	r3, #10
 8009d6e:	fb03 0202 	mla	r2, r3, r2, r0
 8009d72:	3a10      	subs	r2, #16
 8009d74:	e7d4      	b.n	8009d20 <__gethex+0x100>
 8009d76:	4631      	mov	r1, r6
 8009d78:	e7df      	b.n	8009d3a <__gethex+0x11a>
 8009d7a:	1bf3      	subs	r3, r6, r7
 8009d7c:	3b01      	subs	r3, #1
 8009d7e:	4621      	mov	r1, r4
 8009d80:	2b07      	cmp	r3, #7
 8009d82:	dc0b      	bgt.n	8009d9c <__gethex+0x17c>
 8009d84:	ee18 0a10 	vmov	r0, s16
 8009d88:	f000 fae6 	bl	800a358 <_Balloc>
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	b940      	cbnz	r0, 8009da2 <__gethex+0x182>
 8009d90:	4b5d      	ldr	r3, [pc, #372]	; (8009f08 <__gethex+0x2e8>)
 8009d92:	4602      	mov	r2, r0
 8009d94:	21de      	movs	r1, #222	; 0xde
 8009d96:	485d      	ldr	r0, [pc, #372]	; (8009f0c <__gethex+0x2ec>)
 8009d98:	f001 fbdc 	bl	800b554 <__assert_func>
 8009d9c:	3101      	adds	r1, #1
 8009d9e:	105b      	asrs	r3, r3, #1
 8009da0:	e7ee      	b.n	8009d80 <__gethex+0x160>
 8009da2:	f100 0914 	add.w	r9, r0, #20
 8009da6:	f04f 0b00 	mov.w	fp, #0
 8009daa:	f1ca 0301 	rsb	r3, sl, #1
 8009dae:	f8cd 9008 	str.w	r9, [sp, #8]
 8009db2:	f8cd b000 	str.w	fp, [sp]
 8009db6:	9306      	str	r3, [sp, #24]
 8009db8:	42b7      	cmp	r7, r6
 8009dba:	d340      	bcc.n	8009e3e <__gethex+0x21e>
 8009dbc:	9802      	ldr	r0, [sp, #8]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	f840 3b04 	str.w	r3, [r0], #4
 8009dc4:	eba0 0009 	sub.w	r0, r0, r9
 8009dc8:	1080      	asrs	r0, r0, #2
 8009dca:	0146      	lsls	r6, r0, #5
 8009dcc:	6120      	str	r0, [r4, #16]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 fbb4 	bl	800a53c <__hi0bits>
 8009dd4:	1a30      	subs	r0, r6, r0
 8009dd6:	f8d8 6000 	ldr.w	r6, [r8]
 8009dda:	42b0      	cmp	r0, r6
 8009ddc:	dd63      	ble.n	8009ea6 <__gethex+0x286>
 8009dde:	1b87      	subs	r7, r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	4620      	mov	r0, r4
 8009de4:	f000 ff58 	bl	800ac98 <__any_on>
 8009de8:	4682      	mov	sl, r0
 8009dea:	b1a8      	cbz	r0, 8009e18 <__gethex+0x1f8>
 8009dec:	1e7b      	subs	r3, r7, #1
 8009dee:	1159      	asrs	r1, r3, #5
 8009df0:	f003 021f 	and.w	r2, r3, #31
 8009df4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009df8:	f04f 0a01 	mov.w	sl, #1
 8009dfc:	fa0a f202 	lsl.w	r2, sl, r2
 8009e00:	420a      	tst	r2, r1
 8009e02:	d009      	beq.n	8009e18 <__gethex+0x1f8>
 8009e04:	4553      	cmp	r3, sl
 8009e06:	dd05      	ble.n	8009e14 <__gethex+0x1f4>
 8009e08:	1eb9      	subs	r1, r7, #2
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f000 ff44 	bl	800ac98 <__any_on>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d145      	bne.n	8009ea0 <__gethex+0x280>
 8009e14:	f04f 0a02 	mov.w	sl, #2
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4620      	mov	r0, r4
 8009e1c:	f7ff fe99 	bl	8009b52 <rshift>
 8009e20:	443d      	add	r5, r7
 8009e22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e26:	42ab      	cmp	r3, r5
 8009e28:	da4c      	bge.n	8009ec4 <__gethex+0x2a4>
 8009e2a:	ee18 0a10 	vmov	r0, s16
 8009e2e:	4621      	mov	r1, r4
 8009e30:	f000 fad2 	bl	800a3d8 <_Bfree>
 8009e34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e36:	2300      	movs	r3, #0
 8009e38:	6013      	str	r3, [r2, #0]
 8009e3a:	27a3      	movs	r7, #163	; 0xa3
 8009e3c:	e785      	b.n	8009d4a <__gethex+0x12a>
 8009e3e:	1e73      	subs	r3, r6, #1
 8009e40:	9a05      	ldr	r2, [sp, #20]
 8009e42:	9303      	str	r3, [sp, #12]
 8009e44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d019      	beq.n	8009e80 <__gethex+0x260>
 8009e4c:	f1bb 0f20 	cmp.w	fp, #32
 8009e50:	d107      	bne.n	8009e62 <__gethex+0x242>
 8009e52:	9b02      	ldr	r3, [sp, #8]
 8009e54:	9a00      	ldr	r2, [sp, #0]
 8009e56:	f843 2b04 	str.w	r2, [r3], #4
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	469b      	mov	fp, r3
 8009e62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009e66:	f7ff fec6 	bl	8009bf6 <__hexdig_fun>
 8009e6a:	9b00      	ldr	r3, [sp, #0]
 8009e6c:	f000 000f 	and.w	r0, r0, #15
 8009e70:	fa00 f00b 	lsl.w	r0, r0, fp
 8009e74:	4303      	orrs	r3, r0
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	f10b 0b04 	add.w	fp, fp, #4
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	e00d      	b.n	8009e9c <__gethex+0x27c>
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	9a06      	ldr	r2, [sp, #24]
 8009e84:	4413      	add	r3, r2
 8009e86:	42bb      	cmp	r3, r7
 8009e88:	d3e0      	bcc.n	8009e4c <__gethex+0x22c>
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	9901      	ldr	r1, [sp, #4]
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	4652      	mov	r2, sl
 8009e92:	f001 fb2c 	bl	800b4ee <strncmp>
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d1d7      	bne.n	8009e4c <__gethex+0x22c>
 8009e9c:	461e      	mov	r6, r3
 8009e9e:	e78b      	b.n	8009db8 <__gethex+0x198>
 8009ea0:	f04f 0a03 	mov.w	sl, #3
 8009ea4:	e7b8      	b.n	8009e18 <__gethex+0x1f8>
 8009ea6:	da0a      	bge.n	8009ebe <__gethex+0x29e>
 8009ea8:	1a37      	subs	r7, r6, r0
 8009eaa:	4621      	mov	r1, r4
 8009eac:	ee18 0a10 	vmov	r0, s16
 8009eb0:	463a      	mov	r2, r7
 8009eb2:	f000 fcad 	bl	800a810 <__lshift>
 8009eb6:	1bed      	subs	r5, r5, r7
 8009eb8:	4604      	mov	r4, r0
 8009eba:	f100 0914 	add.w	r9, r0, #20
 8009ebe:	f04f 0a00 	mov.w	sl, #0
 8009ec2:	e7ae      	b.n	8009e22 <__gethex+0x202>
 8009ec4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009ec8:	42a8      	cmp	r0, r5
 8009eca:	dd72      	ble.n	8009fb2 <__gethex+0x392>
 8009ecc:	1b45      	subs	r5, r0, r5
 8009ece:	42ae      	cmp	r6, r5
 8009ed0:	dc36      	bgt.n	8009f40 <__gethex+0x320>
 8009ed2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009ed6:	2b02      	cmp	r3, #2
 8009ed8:	d02a      	beq.n	8009f30 <__gethex+0x310>
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d02c      	beq.n	8009f38 <__gethex+0x318>
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d11c      	bne.n	8009f1c <__gethex+0x2fc>
 8009ee2:	42ae      	cmp	r6, r5
 8009ee4:	d11a      	bne.n	8009f1c <__gethex+0x2fc>
 8009ee6:	2e01      	cmp	r6, #1
 8009ee8:	d112      	bne.n	8009f10 <__gethex+0x2f0>
 8009eea:	9a04      	ldr	r2, [sp, #16]
 8009eec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ef0:	6013      	str	r3, [r2, #0]
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	f8c9 3000 	str.w	r3, [r9]
 8009efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009efc:	2762      	movs	r7, #98	; 0x62
 8009efe:	601c      	str	r4, [r3, #0]
 8009f00:	e723      	b.n	8009d4a <__gethex+0x12a>
 8009f02:	bf00      	nop
 8009f04:	0800bba4 	.word	0x0800bba4
 8009f08:	0800bac8 	.word	0x0800bac8
 8009f0c:	0800bb3c 	.word	0x0800bb3c
 8009f10:	1e71      	subs	r1, r6, #1
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fec0 	bl	800ac98 <__any_on>
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d1e6      	bne.n	8009eea <__gethex+0x2ca>
 8009f1c:	ee18 0a10 	vmov	r0, s16
 8009f20:	4621      	mov	r1, r4
 8009f22:	f000 fa59 	bl	800a3d8 <_Bfree>
 8009f26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009f28:	2300      	movs	r3, #0
 8009f2a:	6013      	str	r3, [r2, #0]
 8009f2c:	2750      	movs	r7, #80	; 0x50
 8009f2e:	e70c      	b.n	8009d4a <__gethex+0x12a>
 8009f30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d1f2      	bne.n	8009f1c <__gethex+0x2fc>
 8009f36:	e7d8      	b.n	8009eea <__gethex+0x2ca>
 8009f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1d5      	bne.n	8009eea <__gethex+0x2ca>
 8009f3e:	e7ed      	b.n	8009f1c <__gethex+0x2fc>
 8009f40:	1e6f      	subs	r7, r5, #1
 8009f42:	f1ba 0f00 	cmp.w	sl, #0
 8009f46:	d131      	bne.n	8009fac <__gethex+0x38c>
 8009f48:	b127      	cbz	r7, 8009f54 <__gethex+0x334>
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fea3 	bl	800ac98 <__any_on>
 8009f52:	4682      	mov	sl, r0
 8009f54:	117b      	asrs	r3, r7, #5
 8009f56:	2101      	movs	r1, #1
 8009f58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009f5c:	f007 071f 	and.w	r7, r7, #31
 8009f60:	fa01 f707 	lsl.w	r7, r1, r7
 8009f64:	421f      	tst	r7, r3
 8009f66:	4629      	mov	r1, r5
 8009f68:	4620      	mov	r0, r4
 8009f6a:	bf18      	it	ne
 8009f6c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009f70:	1b76      	subs	r6, r6, r5
 8009f72:	f7ff fdee 	bl	8009b52 <rshift>
 8009f76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f7a:	2702      	movs	r7, #2
 8009f7c:	f1ba 0f00 	cmp.w	sl, #0
 8009f80:	d048      	beq.n	800a014 <__gethex+0x3f4>
 8009f82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d015      	beq.n	8009fb6 <__gethex+0x396>
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d017      	beq.n	8009fbe <__gethex+0x39e>
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d109      	bne.n	8009fa6 <__gethex+0x386>
 8009f92:	f01a 0f02 	tst.w	sl, #2
 8009f96:	d006      	beq.n	8009fa6 <__gethex+0x386>
 8009f98:	f8d9 0000 	ldr.w	r0, [r9]
 8009f9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009fa0:	f01a 0f01 	tst.w	sl, #1
 8009fa4:	d10e      	bne.n	8009fc4 <__gethex+0x3a4>
 8009fa6:	f047 0710 	orr.w	r7, r7, #16
 8009faa:	e033      	b.n	800a014 <__gethex+0x3f4>
 8009fac:	f04f 0a01 	mov.w	sl, #1
 8009fb0:	e7d0      	b.n	8009f54 <__gethex+0x334>
 8009fb2:	2701      	movs	r7, #1
 8009fb4:	e7e2      	b.n	8009f7c <__gethex+0x35c>
 8009fb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fb8:	f1c3 0301 	rsb	r3, r3, #1
 8009fbc:	9315      	str	r3, [sp, #84]	; 0x54
 8009fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d0f0      	beq.n	8009fa6 <__gethex+0x386>
 8009fc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fc8:	f104 0314 	add.w	r3, r4, #20
 8009fcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fd4:	f04f 0c00 	mov.w	ip, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fde:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009fe2:	d01c      	beq.n	800a01e <__gethex+0x3fe>
 8009fe4:	3201      	adds	r2, #1
 8009fe6:	6002      	str	r2, [r0, #0]
 8009fe8:	2f02      	cmp	r7, #2
 8009fea:	f104 0314 	add.w	r3, r4, #20
 8009fee:	d13f      	bne.n	800a070 <__gethex+0x450>
 8009ff0:	f8d8 2000 	ldr.w	r2, [r8]
 8009ff4:	3a01      	subs	r2, #1
 8009ff6:	42b2      	cmp	r2, r6
 8009ff8:	d10a      	bne.n	800a010 <__gethex+0x3f0>
 8009ffa:	1171      	asrs	r1, r6, #5
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a002:	f006 061f 	and.w	r6, r6, #31
 800a006:	fa02 f606 	lsl.w	r6, r2, r6
 800a00a:	421e      	tst	r6, r3
 800a00c:	bf18      	it	ne
 800a00e:	4617      	movne	r7, r2
 800a010:	f047 0720 	orr.w	r7, r7, #32
 800a014:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a016:	601c      	str	r4, [r3, #0]
 800a018:	9b04      	ldr	r3, [sp, #16]
 800a01a:	601d      	str	r5, [r3, #0]
 800a01c:	e695      	b.n	8009d4a <__gethex+0x12a>
 800a01e:	4299      	cmp	r1, r3
 800a020:	f843 cc04 	str.w	ip, [r3, #-4]
 800a024:	d8d8      	bhi.n	8009fd8 <__gethex+0x3b8>
 800a026:	68a3      	ldr	r3, [r4, #8]
 800a028:	459b      	cmp	fp, r3
 800a02a:	db19      	blt.n	800a060 <__gethex+0x440>
 800a02c:	6861      	ldr	r1, [r4, #4]
 800a02e:	ee18 0a10 	vmov	r0, s16
 800a032:	3101      	adds	r1, #1
 800a034:	f000 f990 	bl	800a358 <_Balloc>
 800a038:	4681      	mov	r9, r0
 800a03a:	b918      	cbnz	r0, 800a044 <__gethex+0x424>
 800a03c:	4b1a      	ldr	r3, [pc, #104]	; (800a0a8 <__gethex+0x488>)
 800a03e:	4602      	mov	r2, r0
 800a040:	2184      	movs	r1, #132	; 0x84
 800a042:	e6a8      	b.n	8009d96 <__gethex+0x176>
 800a044:	6922      	ldr	r2, [r4, #16]
 800a046:	3202      	adds	r2, #2
 800a048:	f104 010c 	add.w	r1, r4, #12
 800a04c:	0092      	lsls	r2, r2, #2
 800a04e:	300c      	adds	r0, #12
 800a050:	f000 f974 	bl	800a33c <memcpy>
 800a054:	4621      	mov	r1, r4
 800a056:	ee18 0a10 	vmov	r0, s16
 800a05a:	f000 f9bd 	bl	800a3d8 <_Bfree>
 800a05e:	464c      	mov	r4, r9
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a068:	6122      	str	r2, [r4, #16]
 800a06a:	2201      	movs	r2, #1
 800a06c:	615a      	str	r2, [r3, #20]
 800a06e:	e7bb      	b.n	8009fe8 <__gethex+0x3c8>
 800a070:	6922      	ldr	r2, [r4, #16]
 800a072:	455a      	cmp	r2, fp
 800a074:	dd0b      	ble.n	800a08e <__gethex+0x46e>
 800a076:	2101      	movs	r1, #1
 800a078:	4620      	mov	r0, r4
 800a07a:	f7ff fd6a 	bl	8009b52 <rshift>
 800a07e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a082:	3501      	adds	r5, #1
 800a084:	42ab      	cmp	r3, r5
 800a086:	f6ff aed0 	blt.w	8009e2a <__gethex+0x20a>
 800a08a:	2701      	movs	r7, #1
 800a08c:	e7c0      	b.n	800a010 <__gethex+0x3f0>
 800a08e:	f016 061f 	ands.w	r6, r6, #31
 800a092:	d0fa      	beq.n	800a08a <__gethex+0x46a>
 800a094:	4453      	add	r3, sl
 800a096:	f1c6 0620 	rsb	r6, r6, #32
 800a09a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a09e:	f000 fa4d 	bl	800a53c <__hi0bits>
 800a0a2:	42b0      	cmp	r0, r6
 800a0a4:	dbe7      	blt.n	800a076 <__gethex+0x456>
 800a0a6:	e7f0      	b.n	800a08a <__gethex+0x46a>
 800a0a8:	0800bac8 	.word	0x0800bac8

0800a0ac <L_shift>:
 800a0ac:	f1c2 0208 	rsb	r2, r2, #8
 800a0b0:	0092      	lsls	r2, r2, #2
 800a0b2:	b570      	push	{r4, r5, r6, lr}
 800a0b4:	f1c2 0620 	rsb	r6, r2, #32
 800a0b8:	6843      	ldr	r3, [r0, #4]
 800a0ba:	6804      	ldr	r4, [r0, #0]
 800a0bc:	fa03 f506 	lsl.w	r5, r3, r6
 800a0c0:	432c      	orrs	r4, r5
 800a0c2:	40d3      	lsrs	r3, r2
 800a0c4:	6004      	str	r4, [r0, #0]
 800a0c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0ca:	4288      	cmp	r0, r1
 800a0cc:	d3f4      	bcc.n	800a0b8 <L_shift+0xc>
 800a0ce:	bd70      	pop	{r4, r5, r6, pc}

0800a0d0 <__match>:
 800a0d0:	b530      	push	{r4, r5, lr}
 800a0d2:	6803      	ldr	r3, [r0, #0]
 800a0d4:	3301      	adds	r3, #1
 800a0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0da:	b914      	cbnz	r4, 800a0e2 <__match+0x12>
 800a0dc:	6003      	str	r3, [r0, #0]
 800a0de:	2001      	movs	r0, #1
 800a0e0:	bd30      	pop	{r4, r5, pc}
 800a0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a0ea:	2d19      	cmp	r5, #25
 800a0ec:	bf98      	it	ls
 800a0ee:	3220      	addls	r2, #32
 800a0f0:	42a2      	cmp	r2, r4
 800a0f2:	d0f0      	beq.n	800a0d6 <__match+0x6>
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	e7f3      	b.n	800a0e0 <__match+0x10>

0800a0f8 <__hexnan>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	680b      	ldr	r3, [r1, #0]
 800a0fe:	115e      	asrs	r6, r3, #5
 800a100:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a104:	f013 031f 	ands.w	r3, r3, #31
 800a108:	b087      	sub	sp, #28
 800a10a:	bf18      	it	ne
 800a10c:	3604      	addne	r6, #4
 800a10e:	2500      	movs	r5, #0
 800a110:	1f37      	subs	r7, r6, #4
 800a112:	4690      	mov	r8, r2
 800a114:	6802      	ldr	r2, [r0, #0]
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	4682      	mov	sl, r0
 800a11a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a11e:	46b9      	mov	r9, r7
 800a120:	463c      	mov	r4, r7
 800a122:	9502      	str	r5, [sp, #8]
 800a124:	46ab      	mov	fp, r5
 800a126:	7851      	ldrb	r1, [r2, #1]
 800a128:	1c53      	adds	r3, r2, #1
 800a12a:	9303      	str	r3, [sp, #12]
 800a12c:	b341      	cbz	r1, 800a180 <__hexnan+0x88>
 800a12e:	4608      	mov	r0, r1
 800a130:	9205      	str	r2, [sp, #20]
 800a132:	9104      	str	r1, [sp, #16]
 800a134:	f7ff fd5f 	bl	8009bf6 <__hexdig_fun>
 800a138:	2800      	cmp	r0, #0
 800a13a:	d14f      	bne.n	800a1dc <__hexnan+0xe4>
 800a13c:	9904      	ldr	r1, [sp, #16]
 800a13e:	9a05      	ldr	r2, [sp, #20]
 800a140:	2920      	cmp	r1, #32
 800a142:	d818      	bhi.n	800a176 <__hexnan+0x7e>
 800a144:	9b02      	ldr	r3, [sp, #8]
 800a146:	459b      	cmp	fp, r3
 800a148:	dd13      	ble.n	800a172 <__hexnan+0x7a>
 800a14a:	454c      	cmp	r4, r9
 800a14c:	d206      	bcs.n	800a15c <__hexnan+0x64>
 800a14e:	2d07      	cmp	r5, #7
 800a150:	dc04      	bgt.n	800a15c <__hexnan+0x64>
 800a152:	462a      	mov	r2, r5
 800a154:	4649      	mov	r1, r9
 800a156:	4620      	mov	r0, r4
 800a158:	f7ff ffa8 	bl	800a0ac <L_shift>
 800a15c:	4544      	cmp	r4, r8
 800a15e:	d950      	bls.n	800a202 <__hexnan+0x10a>
 800a160:	2300      	movs	r3, #0
 800a162:	f1a4 0904 	sub.w	r9, r4, #4
 800a166:	f844 3c04 	str.w	r3, [r4, #-4]
 800a16a:	f8cd b008 	str.w	fp, [sp, #8]
 800a16e:	464c      	mov	r4, r9
 800a170:	461d      	mov	r5, r3
 800a172:	9a03      	ldr	r2, [sp, #12]
 800a174:	e7d7      	b.n	800a126 <__hexnan+0x2e>
 800a176:	2929      	cmp	r1, #41	; 0x29
 800a178:	d156      	bne.n	800a228 <__hexnan+0x130>
 800a17a:	3202      	adds	r2, #2
 800a17c:	f8ca 2000 	str.w	r2, [sl]
 800a180:	f1bb 0f00 	cmp.w	fp, #0
 800a184:	d050      	beq.n	800a228 <__hexnan+0x130>
 800a186:	454c      	cmp	r4, r9
 800a188:	d206      	bcs.n	800a198 <__hexnan+0xa0>
 800a18a:	2d07      	cmp	r5, #7
 800a18c:	dc04      	bgt.n	800a198 <__hexnan+0xa0>
 800a18e:	462a      	mov	r2, r5
 800a190:	4649      	mov	r1, r9
 800a192:	4620      	mov	r0, r4
 800a194:	f7ff ff8a 	bl	800a0ac <L_shift>
 800a198:	4544      	cmp	r4, r8
 800a19a:	d934      	bls.n	800a206 <__hexnan+0x10e>
 800a19c:	f1a8 0204 	sub.w	r2, r8, #4
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1aa:	429f      	cmp	r7, r3
 800a1ac:	d2f9      	bcs.n	800a1a2 <__hexnan+0xaa>
 800a1ae:	1b3b      	subs	r3, r7, r4
 800a1b0:	f023 0303 	bic.w	r3, r3, #3
 800a1b4:	3304      	adds	r3, #4
 800a1b6:	3401      	adds	r4, #1
 800a1b8:	3e03      	subs	r6, #3
 800a1ba:	42b4      	cmp	r4, r6
 800a1bc:	bf88      	it	hi
 800a1be:	2304      	movhi	r3, #4
 800a1c0:	4443      	add	r3, r8
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f843 2b04 	str.w	r2, [r3], #4
 800a1c8:	429f      	cmp	r7, r3
 800a1ca:	d2fb      	bcs.n	800a1c4 <__hexnan+0xcc>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	b91b      	cbnz	r3, 800a1d8 <__hexnan+0xe0>
 800a1d0:	4547      	cmp	r7, r8
 800a1d2:	d127      	bne.n	800a224 <__hexnan+0x12c>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	603b      	str	r3, [r7, #0]
 800a1d8:	2005      	movs	r0, #5
 800a1da:	e026      	b.n	800a22a <__hexnan+0x132>
 800a1dc:	3501      	adds	r5, #1
 800a1de:	2d08      	cmp	r5, #8
 800a1e0:	f10b 0b01 	add.w	fp, fp, #1
 800a1e4:	dd06      	ble.n	800a1f4 <__hexnan+0xfc>
 800a1e6:	4544      	cmp	r4, r8
 800a1e8:	d9c3      	bls.n	800a172 <__hexnan+0x7a>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1f0:	2501      	movs	r5, #1
 800a1f2:	3c04      	subs	r4, #4
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	f000 000f 	and.w	r0, r0, #15
 800a1fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a1fe:	6022      	str	r2, [r4, #0]
 800a200:	e7b7      	b.n	800a172 <__hexnan+0x7a>
 800a202:	2508      	movs	r5, #8
 800a204:	e7b5      	b.n	800a172 <__hexnan+0x7a>
 800a206:	9b01      	ldr	r3, [sp, #4]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d0df      	beq.n	800a1cc <__hexnan+0xd4>
 800a20c:	f04f 32ff 	mov.w	r2, #4294967295
 800a210:	f1c3 0320 	rsb	r3, r3, #32
 800a214:	fa22 f303 	lsr.w	r3, r2, r3
 800a218:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a21c:	401a      	ands	r2, r3
 800a21e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a222:	e7d3      	b.n	800a1cc <__hexnan+0xd4>
 800a224:	3f04      	subs	r7, #4
 800a226:	e7d1      	b.n	800a1cc <__hexnan+0xd4>
 800a228:	2004      	movs	r0, #4
 800a22a:	b007      	add	sp, #28
 800a22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a230 <_localeconv_r>:
 800a230:	4800      	ldr	r0, [pc, #0]	; (800a234 <_localeconv_r+0x4>)
 800a232:	4770      	bx	lr
 800a234:	20000168 	.word	0x20000168

0800a238 <__retarget_lock_init_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_acquire_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <__retarget_lock_release_recursive>:
 800a23c:	4770      	bx	lr

0800a23e <__swhatbuf_r>:
 800a23e:	b570      	push	{r4, r5, r6, lr}
 800a240:	460e      	mov	r6, r1
 800a242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a246:	2900      	cmp	r1, #0
 800a248:	b096      	sub	sp, #88	; 0x58
 800a24a:	4614      	mov	r4, r2
 800a24c:	461d      	mov	r5, r3
 800a24e:	da08      	bge.n	800a262 <__swhatbuf_r+0x24>
 800a250:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a254:	2200      	movs	r2, #0
 800a256:	602a      	str	r2, [r5, #0]
 800a258:	061a      	lsls	r2, r3, #24
 800a25a:	d410      	bmi.n	800a27e <__swhatbuf_r+0x40>
 800a25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a260:	e00e      	b.n	800a280 <__swhatbuf_r+0x42>
 800a262:	466a      	mov	r2, sp
 800a264:	f001 f9b6 	bl	800b5d4 <_fstat_r>
 800a268:	2800      	cmp	r0, #0
 800a26a:	dbf1      	blt.n	800a250 <__swhatbuf_r+0x12>
 800a26c:	9a01      	ldr	r2, [sp, #4]
 800a26e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a272:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a276:	425a      	negs	r2, r3
 800a278:	415a      	adcs	r2, r3
 800a27a:	602a      	str	r2, [r5, #0]
 800a27c:	e7ee      	b.n	800a25c <__swhatbuf_r+0x1e>
 800a27e:	2340      	movs	r3, #64	; 0x40
 800a280:	2000      	movs	r0, #0
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	b016      	add	sp, #88	; 0x58
 800a286:	bd70      	pop	{r4, r5, r6, pc}

0800a288 <__smakebuf_r>:
 800a288:	898b      	ldrh	r3, [r1, #12]
 800a28a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a28c:	079d      	lsls	r5, r3, #30
 800a28e:	4606      	mov	r6, r0
 800a290:	460c      	mov	r4, r1
 800a292:	d507      	bpl.n	800a2a4 <__smakebuf_r+0x1c>
 800a294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	6123      	str	r3, [r4, #16]
 800a29c:	2301      	movs	r3, #1
 800a29e:	6163      	str	r3, [r4, #20]
 800a2a0:	b002      	add	sp, #8
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	ab01      	add	r3, sp, #4
 800a2a6:	466a      	mov	r2, sp
 800a2a8:	f7ff ffc9 	bl	800a23e <__swhatbuf_r>
 800a2ac:	9900      	ldr	r1, [sp, #0]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 fd95 	bl	800ade0 <_malloc_r>
 800a2b6:	b948      	cbnz	r0, 800a2cc <__smakebuf_r+0x44>
 800a2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2bc:	059a      	lsls	r2, r3, #22
 800a2be:	d4ef      	bmi.n	800a2a0 <__smakebuf_r+0x18>
 800a2c0:	f023 0303 	bic.w	r3, r3, #3
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	e7e3      	b.n	800a294 <__smakebuf_r+0xc>
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <__smakebuf_r+0x7c>)
 800a2ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	6163      	str	r3, [r4, #20]
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	6120      	str	r0, [r4, #16]
 800a2e2:	b15b      	cbz	r3, 800a2fc <__smakebuf_r+0x74>
 800a2e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f001 f985 	bl	800b5f8 <_isatty_r>
 800a2ee:	b128      	cbz	r0, 800a2fc <__smakebuf_r+0x74>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f023 0303 	bic.w	r3, r3, #3
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	89a0      	ldrh	r0, [r4, #12]
 800a2fe:	4305      	orrs	r5, r0
 800a300:	81a5      	strh	r5, [r4, #12]
 800a302:	e7cd      	b.n	800a2a0 <__smakebuf_r+0x18>
 800a304:	080099b1 	.word	0x080099b1

0800a308 <malloc>:
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <malloc+0xc>)
 800a30a:	4601      	mov	r1, r0
 800a30c:	6818      	ldr	r0, [r3, #0]
 800a30e:	f000 bd67 	b.w	800ade0 <_malloc_r>
 800a312:	bf00      	nop
 800a314:	20000010 	.word	0x20000010

0800a318 <__ascii_mbtowc>:
 800a318:	b082      	sub	sp, #8
 800a31a:	b901      	cbnz	r1, 800a31e <__ascii_mbtowc+0x6>
 800a31c:	a901      	add	r1, sp, #4
 800a31e:	b142      	cbz	r2, 800a332 <__ascii_mbtowc+0x1a>
 800a320:	b14b      	cbz	r3, 800a336 <__ascii_mbtowc+0x1e>
 800a322:	7813      	ldrb	r3, [r2, #0]
 800a324:	600b      	str	r3, [r1, #0]
 800a326:	7812      	ldrb	r2, [r2, #0]
 800a328:	1e10      	subs	r0, r2, #0
 800a32a:	bf18      	it	ne
 800a32c:	2001      	movne	r0, #1
 800a32e:	b002      	add	sp, #8
 800a330:	4770      	bx	lr
 800a332:	4610      	mov	r0, r2
 800a334:	e7fb      	b.n	800a32e <__ascii_mbtowc+0x16>
 800a336:	f06f 0001 	mvn.w	r0, #1
 800a33a:	e7f8      	b.n	800a32e <__ascii_mbtowc+0x16>

0800a33c <memcpy>:
 800a33c:	440a      	add	r2, r1
 800a33e:	4291      	cmp	r1, r2
 800a340:	f100 33ff 	add.w	r3, r0, #4294967295
 800a344:	d100      	bne.n	800a348 <memcpy+0xc>
 800a346:	4770      	bx	lr
 800a348:	b510      	push	{r4, lr}
 800a34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a34e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a352:	4291      	cmp	r1, r2
 800a354:	d1f9      	bne.n	800a34a <memcpy+0xe>
 800a356:	bd10      	pop	{r4, pc}

0800a358 <_Balloc>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a35c:	4604      	mov	r4, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	b976      	cbnz	r6, 800a380 <_Balloc+0x28>
 800a362:	2010      	movs	r0, #16
 800a364:	f7ff ffd0 	bl	800a308 <malloc>
 800a368:	4602      	mov	r2, r0
 800a36a:	6260      	str	r0, [r4, #36]	; 0x24
 800a36c:	b920      	cbnz	r0, 800a378 <_Balloc+0x20>
 800a36e:	4b18      	ldr	r3, [pc, #96]	; (800a3d0 <_Balloc+0x78>)
 800a370:	4818      	ldr	r0, [pc, #96]	; (800a3d4 <_Balloc+0x7c>)
 800a372:	2166      	movs	r1, #102	; 0x66
 800a374:	f001 f8ee 	bl	800b554 <__assert_func>
 800a378:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a37c:	6006      	str	r6, [r0, #0]
 800a37e:	60c6      	str	r6, [r0, #12]
 800a380:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a382:	68f3      	ldr	r3, [r6, #12]
 800a384:	b183      	cbz	r3, 800a3a8 <_Balloc+0x50>
 800a386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a38e:	b9b8      	cbnz	r0, 800a3c0 <_Balloc+0x68>
 800a390:	2101      	movs	r1, #1
 800a392:	fa01 f605 	lsl.w	r6, r1, r5
 800a396:	1d72      	adds	r2, r6, #5
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fc9d 	bl	800acda <_calloc_r>
 800a3a0:	b160      	cbz	r0, 800a3bc <_Balloc+0x64>
 800a3a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3a6:	e00e      	b.n	800a3c6 <_Balloc+0x6e>
 800a3a8:	2221      	movs	r2, #33	; 0x21
 800a3aa:	2104      	movs	r1, #4
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	f000 fc94 	bl	800acda <_calloc_r>
 800a3b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3b4:	60f0      	str	r0, [r6, #12]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d1e4      	bne.n	800a386 <_Balloc+0x2e>
 800a3bc:	2000      	movs	r0, #0
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	6802      	ldr	r2, [r0, #0]
 800a3c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a3cc:	e7f7      	b.n	800a3be <_Balloc+0x66>
 800a3ce:	bf00      	nop
 800a3d0:	0800ba56 	.word	0x0800ba56
 800a3d4:	0800bbb8 	.word	0x0800bbb8

0800a3d8 <_Bfree>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a3dc:	4605      	mov	r5, r0
 800a3de:	460c      	mov	r4, r1
 800a3e0:	b976      	cbnz	r6, 800a400 <_Bfree+0x28>
 800a3e2:	2010      	movs	r0, #16
 800a3e4:	f7ff ff90 	bl	800a308 <malloc>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	6268      	str	r0, [r5, #36]	; 0x24
 800a3ec:	b920      	cbnz	r0, 800a3f8 <_Bfree+0x20>
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <_Bfree+0x3c>)
 800a3f0:	4809      	ldr	r0, [pc, #36]	; (800a418 <_Bfree+0x40>)
 800a3f2:	218a      	movs	r1, #138	; 0x8a
 800a3f4:	f001 f8ae 	bl	800b554 <__assert_func>
 800a3f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3fc:	6006      	str	r6, [r0, #0]
 800a3fe:	60c6      	str	r6, [r0, #12]
 800a400:	b13c      	cbz	r4, 800a412 <_Bfree+0x3a>
 800a402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a404:	6862      	ldr	r2, [r4, #4]
 800a406:	68db      	ldr	r3, [r3, #12]
 800a408:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a40c:	6021      	str	r1, [r4, #0]
 800a40e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a412:	bd70      	pop	{r4, r5, r6, pc}
 800a414:	0800ba56 	.word	0x0800ba56
 800a418:	0800bbb8 	.word	0x0800bbb8

0800a41c <__multadd>:
 800a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a420:	690d      	ldr	r5, [r1, #16]
 800a422:	4607      	mov	r7, r0
 800a424:	460c      	mov	r4, r1
 800a426:	461e      	mov	r6, r3
 800a428:	f101 0c14 	add.w	ip, r1, #20
 800a42c:	2000      	movs	r0, #0
 800a42e:	f8dc 3000 	ldr.w	r3, [ip]
 800a432:	b299      	uxth	r1, r3
 800a434:	fb02 6101 	mla	r1, r2, r1, r6
 800a438:	0c1e      	lsrs	r6, r3, #16
 800a43a:	0c0b      	lsrs	r3, r1, #16
 800a43c:	fb02 3306 	mla	r3, r2, r6, r3
 800a440:	b289      	uxth	r1, r1
 800a442:	3001      	adds	r0, #1
 800a444:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a448:	4285      	cmp	r5, r0
 800a44a:	f84c 1b04 	str.w	r1, [ip], #4
 800a44e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a452:	dcec      	bgt.n	800a42e <__multadd+0x12>
 800a454:	b30e      	cbz	r6, 800a49a <__multadd+0x7e>
 800a456:	68a3      	ldr	r3, [r4, #8]
 800a458:	42ab      	cmp	r3, r5
 800a45a:	dc19      	bgt.n	800a490 <__multadd+0x74>
 800a45c:	6861      	ldr	r1, [r4, #4]
 800a45e:	4638      	mov	r0, r7
 800a460:	3101      	adds	r1, #1
 800a462:	f7ff ff79 	bl	800a358 <_Balloc>
 800a466:	4680      	mov	r8, r0
 800a468:	b928      	cbnz	r0, 800a476 <__multadd+0x5a>
 800a46a:	4602      	mov	r2, r0
 800a46c:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <__multadd+0x84>)
 800a46e:	480d      	ldr	r0, [pc, #52]	; (800a4a4 <__multadd+0x88>)
 800a470:	21b5      	movs	r1, #181	; 0xb5
 800a472:	f001 f86f 	bl	800b554 <__assert_func>
 800a476:	6922      	ldr	r2, [r4, #16]
 800a478:	3202      	adds	r2, #2
 800a47a:	f104 010c 	add.w	r1, r4, #12
 800a47e:	0092      	lsls	r2, r2, #2
 800a480:	300c      	adds	r0, #12
 800a482:	f7ff ff5b 	bl	800a33c <memcpy>
 800a486:	4621      	mov	r1, r4
 800a488:	4638      	mov	r0, r7
 800a48a:	f7ff ffa5 	bl	800a3d8 <_Bfree>
 800a48e:	4644      	mov	r4, r8
 800a490:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a494:	3501      	adds	r5, #1
 800a496:	615e      	str	r6, [r3, #20]
 800a498:	6125      	str	r5, [r4, #16]
 800a49a:	4620      	mov	r0, r4
 800a49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a0:	0800bac8 	.word	0x0800bac8
 800a4a4:	0800bbb8 	.word	0x0800bbb8

0800a4a8 <__s2b>:
 800a4a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	4615      	mov	r5, r2
 800a4b0:	461f      	mov	r7, r3
 800a4b2:	2209      	movs	r2, #9
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2201      	movs	r2, #1
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	db09      	blt.n	800a4d8 <__s2b+0x30>
 800a4c4:	4630      	mov	r0, r6
 800a4c6:	f7ff ff47 	bl	800a358 <_Balloc>
 800a4ca:	b940      	cbnz	r0, 800a4de <__s2b+0x36>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	4b19      	ldr	r3, [pc, #100]	; (800a534 <__s2b+0x8c>)
 800a4d0:	4819      	ldr	r0, [pc, #100]	; (800a538 <__s2b+0x90>)
 800a4d2:	21ce      	movs	r1, #206	; 0xce
 800a4d4:	f001 f83e 	bl	800b554 <__assert_func>
 800a4d8:	0052      	lsls	r2, r2, #1
 800a4da:	3101      	adds	r1, #1
 800a4dc:	e7f0      	b.n	800a4c0 <__s2b+0x18>
 800a4de:	9b08      	ldr	r3, [sp, #32]
 800a4e0:	6143      	str	r3, [r0, #20]
 800a4e2:	2d09      	cmp	r5, #9
 800a4e4:	f04f 0301 	mov.w	r3, #1
 800a4e8:	6103      	str	r3, [r0, #16]
 800a4ea:	dd16      	ble.n	800a51a <__s2b+0x72>
 800a4ec:	f104 0909 	add.w	r9, r4, #9
 800a4f0:	46c8      	mov	r8, r9
 800a4f2:	442c      	add	r4, r5
 800a4f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a4f8:	4601      	mov	r1, r0
 800a4fa:	3b30      	subs	r3, #48	; 0x30
 800a4fc:	220a      	movs	r2, #10
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ff8c 	bl	800a41c <__multadd>
 800a504:	45a0      	cmp	r8, r4
 800a506:	d1f5      	bne.n	800a4f4 <__s2b+0x4c>
 800a508:	f1a5 0408 	sub.w	r4, r5, #8
 800a50c:	444c      	add	r4, r9
 800a50e:	1b2d      	subs	r5, r5, r4
 800a510:	1963      	adds	r3, r4, r5
 800a512:	42bb      	cmp	r3, r7
 800a514:	db04      	blt.n	800a520 <__s2b+0x78>
 800a516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51a:	340a      	adds	r4, #10
 800a51c:	2509      	movs	r5, #9
 800a51e:	e7f6      	b.n	800a50e <__s2b+0x66>
 800a520:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a524:	4601      	mov	r1, r0
 800a526:	3b30      	subs	r3, #48	; 0x30
 800a528:	220a      	movs	r2, #10
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff76 	bl	800a41c <__multadd>
 800a530:	e7ee      	b.n	800a510 <__s2b+0x68>
 800a532:	bf00      	nop
 800a534:	0800bac8 	.word	0x0800bac8
 800a538:	0800bbb8 	.word	0x0800bbb8

0800a53c <__hi0bits>:
 800a53c:	0c03      	lsrs	r3, r0, #16
 800a53e:	041b      	lsls	r3, r3, #16
 800a540:	b9d3      	cbnz	r3, 800a578 <__hi0bits+0x3c>
 800a542:	0400      	lsls	r0, r0, #16
 800a544:	2310      	movs	r3, #16
 800a546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a54a:	bf04      	itt	eq
 800a54c:	0200      	lsleq	r0, r0, #8
 800a54e:	3308      	addeq	r3, #8
 800a550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a554:	bf04      	itt	eq
 800a556:	0100      	lsleq	r0, r0, #4
 800a558:	3304      	addeq	r3, #4
 800a55a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a55e:	bf04      	itt	eq
 800a560:	0080      	lsleq	r0, r0, #2
 800a562:	3302      	addeq	r3, #2
 800a564:	2800      	cmp	r0, #0
 800a566:	db05      	blt.n	800a574 <__hi0bits+0x38>
 800a568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a56c:	f103 0301 	add.w	r3, r3, #1
 800a570:	bf08      	it	eq
 800a572:	2320      	moveq	r3, #32
 800a574:	4618      	mov	r0, r3
 800a576:	4770      	bx	lr
 800a578:	2300      	movs	r3, #0
 800a57a:	e7e4      	b.n	800a546 <__hi0bits+0xa>

0800a57c <__lo0bits>:
 800a57c:	6803      	ldr	r3, [r0, #0]
 800a57e:	f013 0207 	ands.w	r2, r3, #7
 800a582:	4601      	mov	r1, r0
 800a584:	d00b      	beq.n	800a59e <__lo0bits+0x22>
 800a586:	07da      	lsls	r2, r3, #31
 800a588:	d423      	bmi.n	800a5d2 <__lo0bits+0x56>
 800a58a:	0798      	lsls	r0, r3, #30
 800a58c:	bf49      	itett	mi
 800a58e:	085b      	lsrmi	r3, r3, #1
 800a590:	089b      	lsrpl	r3, r3, #2
 800a592:	2001      	movmi	r0, #1
 800a594:	600b      	strmi	r3, [r1, #0]
 800a596:	bf5c      	itt	pl
 800a598:	600b      	strpl	r3, [r1, #0]
 800a59a:	2002      	movpl	r0, #2
 800a59c:	4770      	bx	lr
 800a59e:	b298      	uxth	r0, r3
 800a5a0:	b9a8      	cbnz	r0, 800a5ce <__lo0bits+0x52>
 800a5a2:	0c1b      	lsrs	r3, r3, #16
 800a5a4:	2010      	movs	r0, #16
 800a5a6:	b2da      	uxtb	r2, r3
 800a5a8:	b90a      	cbnz	r2, 800a5ae <__lo0bits+0x32>
 800a5aa:	3008      	adds	r0, #8
 800a5ac:	0a1b      	lsrs	r3, r3, #8
 800a5ae:	071a      	lsls	r2, r3, #28
 800a5b0:	bf04      	itt	eq
 800a5b2:	091b      	lsreq	r3, r3, #4
 800a5b4:	3004      	addeq	r0, #4
 800a5b6:	079a      	lsls	r2, r3, #30
 800a5b8:	bf04      	itt	eq
 800a5ba:	089b      	lsreq	r3, r3, #2
 800a5bc:	3002      	addeq	r0, #2
 800a5be:	07da      	lsls	r2, r3, #31
 800a5c0:	d403      	bmi.n	800a5ca <__lo0bits+0x4e>
 800a5c2:	085b      	lsrs	r3, r3, #1
 800a5c4:	f100 0001 	add.w	r0, r0, #1
 800a5c8:	d005      	beq.n	800a5d6 <__lo0bits+0x5a>
 800a5ca:	600b      	str	r3, [r1, #0]
 800a5cc:	4770      	bx	lr
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	e7e9      	b.n	800a5a6 <__lo0bits+0x2a>
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	4770      	bx	lr
 800a5d6:	2020      	movs	r0, #32
 800a5d8:	4770      	bx	lr
	...

0800a5dc <__i2b>:
 800a5dc:	b510      	push	{r4, lr}
 800a5de:	460c      	mov	r4, r1
 800a5e0:	2101      	movs	r1, #1
 800a5e2:	f7ff feb9 	bl	800a358 <_Balloc>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	b928      	cbnz	r0, 800a5f6 <__i2b+0x1a>
 800a5ea:	4b05      	ldr	r3, [pc, #20]	; (800a600 <__i2b+0x24>)
 800a5ec:	4805      	ldr	r0, [pc, #20]	; (800a604 <__i2b+0x28>)
 800a5ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a5f2:	f000 ffaf 	bl	800b554 <__assert_func>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	6144      	str	r4, [r0, #20]
 800a5fa:	6103      	str	r3, [r0, #16]
 800a5fc:	bd10      	pop	{r4, pc}
 800a5fe:	bf00      	nop
 800a600:	0800bac8 	.word	0x0800bac8
 800a604:	0800bbb8 	.word	0x0800bbb8

0800a608 <__multiply>:
 800a608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60c:	4691      	mov	r9, r2
 800a60e:	690a      	ldr	r2, [r1, #16]
 800a610:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a614:	429a      	cmp	r2, r3
 800a616:	bfb8      	it	lt
 800a618:	460b      	movlt	r3, r1
 800a61a:	460c      	mov	r4, r1
 800a61c:	bfbc      	itt	lt
 800a61e:	464c      	movlt	r4, r9
 800a620:	4699      	movlt	r9, r3
 800a622:	6927      	ldr	r7, [r4, #16]
 800a624:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a628:	68a3      	ldr	r3, [r4, #8]
 800a62a:	6861      	ldr	r1, [r4, #4]
 800a62c:	eb07 060a 	add.w	r6, r7, sl
 800a630:	42b3      	cmp	r3, r6
 800a632:	b085      	sub	sp, #20
 800a634:	bfb8      	it	lt
 800a636:	3101      	addlt	r1, #1
 800a638:	f7ff fe8e 	bl	800a358 <_Balloc>
 800a63c:	b930      	cbnz	r0, 800a64c <__multiply+0x44>
 800a63e:	4602      	mov	r2, r0
 800a640:	4b44      	ldr	r3, [pc, #272]	; (800a754 <__multiply+0x14c>)
 800a642:	4845      	ldr	r0, [pc, #276]	; (800a758 <__multiply+0x150>)
 800a644:	f240 115d 	movw	r1, #349	; 0x15d
 800a648:	f000 ff84 	bl	800b554 <__assert_func>
 800a64c:	f100 0514 	add.w	r5, r0, #20
 800a650:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a654:	462b      	mov	r3, r5
 800a656:	2200      	movs	r2, #0
 800a658:	4543      	cmp	r3, r8
 800a65a:	d321      	bcc.n	800a6a0 <__multiply+0x98>
 800a65c:	f104 0314 	add.w	r3, r4, #20
 800a660:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a664:	f109 0314 	add.w	r3, r9, #20
 800a668:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a66c:	9202      	str	r2, [sp, #8]
 800a66e:	1b3a      	subs	r2, r7, r4
 800a670:	3a15      	subs	r2, #21
 800a672:	f022 0203 	bic.w	r2, r2, #3
 800a676:	3204      	adds	r2, #4
 800a678:	f104 0115 	add.w	r1, r4, #21
 800a67c:	428f      	cmp	r7, r1
 800a67e:	bf38      	it	cc
 800a680:	2204      	movcc	r2, #4
 800a682:	9201      	str	r2, [sp, #4]
 800a684:	9a02      	ldr	r2, [sp, #8]
 800a686:	9303      	str	r3, [sp, #12]
 800a688:	429a      	cmp	r2, r3
 800a68a:	d80c      	bhi.n	800a6a6 <__multiply+0x9e>
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	dd03      	ble.n	800a698 <__multiply+0x90>
 800a690:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a694:	2b00      	cmp	r3, #0
 800a696:	d05a      	beq.n	800a74e <__multiply+0x146>
 800a698:	6106      	str	r6, [r0, #16]
 800a69a:	b005      	add	sp, #20
 800a69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6a0:	f843 2b04 	str.w	r2, [r3], #4
 800a6a4:	e7d8      	b.n	800a658 <__multiply+0x50>
 800a6a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800a6aa:	f1ba 0f00 	cmp.w	sl, #0
 800a6ae:	d024      	beq.n	800a6fa <__multiply+0xf2>
 800a6b0:	f104 0e14 	add.w	lr, r4, #20
 800a6b4:	46a9      	mov	r9, r5
 800a6b6:	f04f 0c00 	mov.w	ip, #0
 800a6ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a6be:	f8d9 1000 	ldr.w	r1, [r9]
 800a6c2:	fa1f fb82 	uxth.w	fp, r2
 800a6c6:	b289      	uxth	r1, r1
 800a6c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6d0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6d4:	4461      	add	r1, ip
 800a6d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6da:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6e2:	b289      	uxth	r1, r1
 800a6e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6e8:	4577      	cmp	r7, lr
 800a6ea:	f849 1b04 	str.w	r1, [r9], #4
 800a6ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6f2:	d8e2      	bhi.n	800a6ba <__multiply+0xb2>
 800a6f4:	9a01      	ldr	r2, [sp, #4]
 800a6f6:	f845 c002 	str.w	ip, [r5, r2]
 800a6fa:	9a03      	ldr	r2, [sp, #12]
 800a6fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a700:	3304      	adds	r3, #4
 800a702:	f1b9 0f00 	cmp.w	r9, #0
 800a706:	d020      	beq.n	800a74a <__multiply+0x142>
 800a708:	6829      	ldr	r1, [r5, #0]
 800a70a:	f104 0c14 	add.w	ip, r4, #20
 800a70e:	46ae      	mov	lr, r5
 800a710:	f04f 0a00 	mov.w	sl, #0
 800a714:	f8bc b000 	ldrh.w	fp, [ip]
 800a718:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a71c:	fb09 220b 	mla	r2, r9, fp, r2
 800a720:	4492      	add	sl, r2
 800a722:	b289      	uxth	r1, r1
 800a724:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a728:	f84e 1b04 	str.w	r1, [lr], #4
 800a72c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a730:	f8be 1000 	ldrh.w	r1, [lr]
 800a734:	0c12      	lsrs	r2, r2, #16
 800a736:	fb09 1102 	mla	r1, r9, r2, r1
 800a73a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a73e:	4567      	cmp	r7, ip
 800a740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a744:	d8e6      	bhi.n	800a714 <__multiply+0x10c>
 800a746:	9a01      	ldr	r2, [sp, #4]
 800a748:	50a9      	str	r1, [r5, r2]
 800a74a:	3504      	adds	r5, #4
 800a74c:	e79a      	b.n	800a684 <__multiply+0x7c>
 800a74e:	3e01      	subs	r6, #1
 800a750:	e79c      	b.n	800a68c <__multiply+0x84>
 800a752:	bf00      	nop
 800a754:	0800bac8 	.word	0x0800bac8
 800a758:	0800bbb8 	.word	0x0800bbb8

0800a75c <__pow5mult>:
 800a75c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a760:	4615      	mov	r5, r2
 800a762:	f012 0203 	ands.w	r2, r2, #3
 800a766:	4606      	mov	r6, r0
 800a768:	460f      	mov	r7, r1
 800a76a:	d007      	beq.n	800a77c <__pow5mult+0x20>
 800a76c:	4c25      	ldr	r4, [pc, #148]	; (800a804 <__pow5mult+0xa8>)
 800a76e:	3a01      	subs	r2, #1
 800a770:	2300      	movs	r3, #0
 800a772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a776:	f7ff fe51 	bl	800a41c <__multadd>
 800a77a:	4607      	mov	r7, r0
 800a77c:	10ad      	asrs	r5, r5, #2
 800a77e:	d03d      	beq.n	800a7fc <__pow5mult+0xa0>
 800a780:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a782:	b97c      	cbnz	r4, 800a7a4 <__pow5mult+0x48>
 800a784:	2010      	movs	r0, #16
 800a786:	f7ff fdbf 	bl	800a308 <malloc>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6270      	str	r0, [r6, #36]	; 0x24
 800a78e:	b928      	cbnz	r0, 800a79c <__pow5mult+0x40>
 800a790:	4b1d      	ldr	r3, [pc, #116]	; (800a808 <__pow5mult+0xac>)
 800a792:	481e      	ldr	r0, [pc, #120]	; (800a80c <__pow5mult+0xb0>)
 800a794:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a798:	f000 fedc 	bl	800b554 <__assert_func>
 800a79c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7a0:	6004      	str	r4, [r0, #0]
 800a7a2:	60c4      	str	r4, [r0, #12]
 800a7a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a7a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a7ac:	b94c      	cbnz	r4, 800a7c2 <__pow5mult+0x66>
 800a7ae:	f240 2171 	movw	r1, #625	; 0x271
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f7ff ff12 	bl	800a5dc <__i2b>
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800a7be:	4604      	mov	r4, r0
 800a7c0:	6003      	str	r3, [r0, #0]
 800a7c2:	f04f 0900 	mov.w	r9, #0
 800a7c6:	07eb      	lsls	r3, r5, #31
 800a7c8:	d50a      	bpl.n	800a7e0 <__pow5mult+0x84>
 800a7ca:	4639      	mov	r1, r7
 800a7cc:	4622      	mov	r2, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f7ff ff1a 	bl	800a608 <__multiply>
 800a7d4:	4639      	mov	r1, r7
 800a7d6:	4680      	mov	r8, r0
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f7ff fdfd 	bl	800a3d8 <_Bfree>
 800a7de:	4647      	mov	r7, r8
 800a7e0:	106d      	asrs	r5, r5, #1
 800a7e2:	d00b      	beq.n	800a7fc <__pow5mult+0xa0>
 800a7e4:	6820      	ldr	r0, [r4, #0]
 800a7e6:	b938      	cbnz	r0, 800a7f8 <__pow5mult+0x9c>
 800a7e8:	4622      	mov	r2, r4
 800a7ea:	4621      	mov	r1, r4
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	f7ff ff0b 	bl	800a608 <__multiply>
 800a7f2:	6020      	str	r0, [r4, #0]
 800a7f4:	f8c0 9000 	str.w	r9, [r0]
 800a7f8:	4604      	mov	r4, r0
 800a7fa:	e7e4      	b.n	800a7c6 <__pow5mult+0x6a>
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a802:	bf00      	nop
 800a804:	0800bd08 	.word	0x0800bd08
 800a808:	0800ba56 	.word	0x0800ba56
 800a80c:	0800bbb8 	.word	0x0800bbb8

0800a810 <__lshift>:
 800a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	460c      	mov	r4, r1
 800a816:	6849      	ldr	r1, [r1, #4]
 800a818:	6923      	ldr	r3, [r4, #16]
 800a81a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a81e:	68a3      	ldr	r3, [r4, #8]
 800a820:	4607      	mov	r7, r0
 800a822:	4691      	mov	r9, r2
 800a824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a828:	f108 0601 	add.w	r6, r8, #1
 800a82c:	42b3      	cmp	r3, r6
 800a82e:	db0b      	blt.n	800a848 <__lshift+0x38>
 800a830:	4638      	mov	r0, r7
 800a832:	f7ff fd91 	bl	800a358 <_Balloc>
 800a836:	4605      	mov	r5, r0
 800a838:	b948      	cbnz	r0, 800a84e <__lshift+0x3e>
 800a83a:	4602      	mov	r2, r0
 800a83c:	4b2a      	ldr	r3, [pc, #168]	; (800a8e8 <__lshift+0xd8>)
 800a83e:	482b      	ldr	r0, [pc, #172]	; (800a8ec <__lshift+0xdc>)
 800a840:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a844:	f000 fe86 	bl	800b554 <__assert_func>
 800a848:	3101      	adds	r1, #1
 800a84a:	005b      	lsls	r3, r3, #1
 800a84c:	e7ee      	b.n	800a82c <__lshift+0x1c>
 800a84e:	2300      	movs	r3, #0
 800a850:	f100 0114 	add.w	r1, r0, #20
 800a854:	f100 0210 	add.w	r2, r0, #16
 800a858:	4618      	mov	r0, r3
 800a85a:	4553      	cmp	r3, sl
 800a85c:	db37      	blt.n	800a8ce <__lshift+0xbe>
 800a85e:	6920      	ldr	r0, [r4, #16]
 800a860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a864:	f104 0314 	add.w	r3, r4, #20
 800a868:	f019 091f 	ands.w	r9, r9, #31
 800a86c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a874:	d02f      	beq.n	800a8d6 <__lshift+0xc6>
 800a876:	f1c9 0e20 	rsb	lr, r9, #32
 800a87a:	468a      	mov	sl, r1
 800a87c:	f04f 0c00 	mov.w	ip, #0
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	fa02 f209 	lsl.w	r2, r2, r9
 800a886:	ea42 020c 	orr.w	r2, r2, ip
 800a88a:	f84a 2b04 	str.w	r2, [sl], #4
 800a88e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a892:	4298      	cmp	r0, r3
 800a894:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a898:	d8f2      	bhi.n	800a880 <__lshift+0x70>
 800a89a:	1b03      	subs	r3, r0, r4
 800a89c:	3b15      	subs	r3, #21
 800a89e:	f023 0303 	bic.w	r3, r3, #3
 800a8a2:	3304      	adds	r3, #4
 800a8a4:	f104 0215 	add.w	r2, r4, #21
 800a8a8:	4290      	cmp	r0, r2
 800a8aa:	bf38      	it	cc
 800a8ac:	2304      	movcc	r3, #4
 800a8ae:	f841 c003 	str.w	ip, [r1, r3]
 800a8b2:	f1bc 0f00 	cmp.w	ip, #0
 800a8b6:	d001      	beq.n	800a8bc <__lshift+0xac>
 800a8b8:	f108 0602 	add.w	r6, r8, #2
 800a8bc:	3e01      	subs	r6, #1
 800a8be:	4638      	mov	r0, r7
 800a8c0:	612e      	str	r6, [r5, #16]
 800a8c2:	4621      	mov	r1, r4
 800a8c4:	f7ff fd88 	bl	800a3d8 <_Bfree>
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	e7c1      	b.n	800a85a <__lshift+0x4a>
 800a8d6:	3904      	subs	r1, #4
 800a8d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8e0:	4298      	cmp	r0, r3
 800a8e2:	d8f9      	bhi.n	800a8d8 <__lshift+0xc8>
 800a8e4:	e7ea      	b.n	800a8bc <__lshift+0xac>
 800a8e6:	bf00      	nop
 800a8e8:	0800bac8 	.word	0x0800bac8
 800a8ec:	0800bbb8 	.word	0x0800bbb8

0800a8f0 <__mcmp>:
 800a8f0:	b530      	push	{r4, r5, lr}
 800a8f2:	6902      	ldr	r2, [r0, #16]
 800a8f4:	690c      	ldr	r4, [r1, #16]
 800a8f6:	1b12      	subs	r2, r2, r4
 800a8f8:	d10e      	bne.n	800a918 <__mcmp+0x28>
 800a8fa:	f100 0314 	add.w	r3, r0, #20
 800a8fe:	3114      	adds	r1, #20
 800a900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a90c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a910:	42a5      	cmp	r5, r4
 800a912:	d003      	beq.n	800a91c <__mcmp+0x2c>
 800a914:	d305      	bcc.n	800a922 <__mcmp+0x32>
 800a916:	2201      	movs	r2, #1
 800a918:	4610      	mov	r0, r2
 800a91a:	bd30      	pop	{r4, r5, pc}
 800a91c:	4283      	cmp	r3, r0
 800a91e:	d3f3      	bcc.n	800a908 <__mcmp+0x18>
 800a920:	e7fa      	b.n	800a918 <__mcmp+0x28>
 800a922:	f04f 32ff 	mov.w	r2, #4294967295
 800a926:	e7f7      	b.n	800a918 <__mcmp+0x28>

0800a928 <__mdiff>:
 800a928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	460c      	mov	r4, r1
 800a92e:	4606      	mov	r6, r0
 800a930:	4611      	mov	r1, r2
 800a932:	4620      	mov	r0, r4
 800a934:	4690      	mov	r8, r2
 800a936:	f7ff ffdb 	bl	800a8f0 <__mcmp>
 800a93a:	1e05      	subs	r5, r0, #0
 800a93c:	d110      	bne.n	800a960 <__mdiff+0x38>
 800a93e:	4629      	mov	r1, r5
 800a940:	4630      	mov	r0, r6
 800a942:	f7ff fd09 	bl	800a358 <_Balloc>
 800a946:	b930      	cbnz	r0, 800a956 <__mdiff+0x2e>
 800a948:	4b3a      	ldr	r3, [pc, #232]	; (800aa34 <__mdiff+0x10c>)
 800a94a:	4602      	mov	r2, r0
 800a94c:	f240 2132 	movw	r1, #562	; 0x232
 800a950:	4839      	ldr	r0, [pc, #228]	; (800aa38 <__mdiff+0x110>)
 800a952:	f000 fdff 	bl	800b554 <__assert_func>
 800a956:	2301      	movs	r3, #1
 800a958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a95c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a960:	bfa4      	itt	ge
 800a962:	4643      	movge	r3, r8
 800a964:	46a0      	movge	r8, r4
 800a966:	4630      	mov	r0, r6
 800a968:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a96c:	bfa6      	itte	ge
 800a96e:	461c      	movge	r4, r3
 800a970:	2500      	movge	r5, #0
 800a972:	2501      	movlt	r5, #1
 800a974:	f7ff fcf0 	bl	800a358 <_Balloc>
 800a978:	b920      	cbnz	r0, 800a984 <__mdiff+0x5c>
 800a97a:	4b2e      	ldr	r3, [pc, #184]	; (800aa34 <__mdiff+0x10c>)
 800a97c:	4602      	mov	r2, r0
 800a97e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a982:	e7e5      	b.n	800a950 <__mdiff+0x28>
 800a984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a988:	6926      	ldr	r6, [r4, #16]
 800a98a:	60c5      	str	r5, [r0, #12]
 800a98c:	f104 0914 	add.w	r9, r4, #20
 800a990:	f108 0514 	add.w	r5, r8, #20
 800a994:	f100 0e14 	add.w	lr, r0, #20
 800a998:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a99c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a9a0:	f108 0210 	add.w	r2, r8, #16
 800a9a4:	46f2      	mov	sl, lr
 800a9a6:	2100      	movs	r1, #0
 800a9a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800a9ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a9b0:	fa1f f883 	uxth.w	r8, r3
 800a9b4:	fa11 f18b 	uxtah	r1, r1, fp
 800a9b8:	0c1b      	lsrs	r3, r3, #16
 800a9ba:	eba1 0808 	sub.w	r8, r1, r8
 800a9be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a9c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a9c6:	fa1f f888 	uxth.w	r8, r8
 800a9ca:	1419      	asrs	r1, r3, #16
 800a9cc:	454e      	cmp	r6, r9
 800a9ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9d2:	f84a 3b04 	str.w	r3, [sl], #4
 800a9d6:	d8e7      	bhi.n	800a9a8 <__mdiff+0x80>
 800a9d8:	1b33      	subs	r3, r6, r4
 800a9da:	3b15      	subs	r3, #21
 800a9dc:	f023 0303 	bic.w	r3, r3, #3
 800a9e0:	3304      	adds	r3, #4
 800a9e2:	3415      	adds	r4, #21
 800a9e4:	42a6      	cmp	r6, r4
 800a9e6:	bf38      	it	cc
 800a9e8:	2304      	movcc	r3, #4
 800a9ea:	441d      	add	r5, r3
 800a9ec:	4473      	add	r3, lr
 800a9ee:	469e      	mov	lr, r3
 800a9f0:	462e      	mov	r6, r5
 800a9f2:	4566      	cmp	r6, ip
 800a9f4:	d30e      	bcc.n	800aa14 <__mdiff+0xec>
 800a9f6:	f10c 0203 	add.w	r2, ip, #3
 800a9fa:	1b52      	subs	r2, r2, r5
 800a9fc:	f022 0203 	bic.w	r2, r2, #3
 800aa00:	3d03      	subs	r5, #3
 800aa02:	45ac      	cmp	ip, r5
 800aa04:	bf38      	it	cc
 800aa06:	2200      	movcc	r2, #0
 800aa08:	441a      	add	r2, r3
 800aa0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800aa0e:	b17b      	cbz	r3, 800aa30 <__mdiff+0x108>
 800aa10:	6107      	str	r7, [r0, #16]
 800aa12:	e7a3      	b.n	800a95c <__mdiff+0x34>
 800aa14:	f856 8b04 	ldr.w	r8, [r6], #4
 800aa18:	fa11 f288 	uxtah	r2, r1, r8
 800aa1c:	1414      	asrs	r4, r2, #16
 800aa1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aa22:	b292      	uxth	r2, r2
 800aa24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aa28:	f84e 2b04 	str.w	r2, [lr], #4
 800aa2c:	1421      	asrs	r1, r4, #16
 800aa2e:	e7e0      	b.n	800a9f2 <__mdiff+0xca>
 800aa30:	3f01      	subs	r7, #1
 800aa32:	e7ea      	b.n	800aa0a <__mdiff+0xe2>
 800aa34:	0800bac8 	.word	0x0800bac8
 800aa38:	0800bbb8 	.word	0x0800bbb8

0800aa3c <__ulp>:
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	ed8d 0b00 	vstr	d0, [sp]
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	4912      	ldr	r1, [pc, #72]	; (800aa90 <__ulp+0x54>)
 800aa46:	4019      	ands	r1, r3
 800aa48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800aa4c:	2900      	cmp	r1, #0
 800aa4e:	dd05      	ble.n	800aa5c <__ulp+0x20>
 800aa50:	2200      	movs	r2, #0
 800aa52:	460b      	mov	r3, r1
 800aa54:	ec43 2b10 	vmov	d0, r2, r3
 800aa58:	b002      	add	sp, #8
 800aa5a:	4770      	bx	lr
 800aa5c:	4249      	negs	r1, r1
 800aa5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800aa62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800aa66:	f04f 0200 	mov.w	r2, #0
 800aa6a:	f04f 0300 	mov.w	r3, #0
 800aa6e:	da04      	bge.n	800aa7a <__ulp+0x3e>
 800aa70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800aa74:	fa41 f300 	asr.w	r3, r1, r0
 800aa78:	e7ec      	b.n	800aa54 <__ulp+0x18>
 800aa7a:	f1a0 0114 	sub.w	r1, r0, #20
 800aa7e:	291e      	cmp	r1, #30
 800aa80:	bfda      	itte	le
 800aa82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800aa86:	fa20 f101 	lsrle.w	r1, r0, r1
 800aa8a:	2101      	movgt	r1, #1
 800aa8c:	460a      	mov	r2, r1
 800aa8e:	e7e1      	b.n	800aa54 <__ulp+0x18>
 800aa90:	7ff00000 	.word	0x7ff00000

0800aa94 <__b2d>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	6905      	ldr	r5, [r0, #16]
 800aa98:	f100 0714 	add.w	r7, r0, #20
 800aa9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800aaa0:	1f2e      	subs	r6, r5, #4
 800aaa2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f7ff fd48 	bl	800a53c <__hi0bits>
 800aaac:	f1c0 0320 	rsb	r3, r0, #32
 800aab0:	280a      	cmp	r0, #10
 800aab2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ab30 <__b2d+0x9c>
 800aab6:	600b      	str	r3, [r1, #0]
 800aab8:	dc14      	bgt.n	800aae4 <__b2d+0x50>
 800aaba:	f1c0 0e0b 	rsb	lr, r0, #11
 800aabe:	fa24 f10e 	lsr.w	r1, r4, lr
 800aac2:	42b7      	cmp	r7, r6
 800aac4:	ea41 030c 	orr.w	r3, r1, ip
 800aac8:	bf34      	ite	cc
 800aaca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aace:	2100      	movcs	r1, #0
 800aad0:	3015      	adds	r0, #21
 800aad2:	fa04 f000 	lsl.w	r0, r4, r0
 800aad6:	fa21 f10e 	lsr.w	r1, r1, lr
 800aada:	ea40 0201 	orr.w	r2, r0, r1
 800aade:	ec43 2b10 	vmov	d0, r2, r3
 800aae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae4:	42b7      	cmp	r7, r6
 800aae6:	bf3a      	itte	cc
 800aae8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aaec:	f1a5 0608 	subcc.w	r6, r5, #8
 800aaf0:	2100      	movcs	r1, #0
 800aaf2:	380b      	subs	r0, #11
 800aaf4:	d017      	beq.n	800ab26 <__b2d+0x92>
 800aaf6:	f1c0 0c20 	rsb	ip, r0, #32
 800aafa:	fa04 f500 	lsl.w	r5, r4, r0
 800aafe:	42be      	cmp	r6, r7
 800ab00:	fa21 f40c 	lsr.w	r4, r1, ip
 800ab04:	ea45 0504 	orr.w	r5, r5, r4
 800ab08:	bf8c      	ite	hi
 800ab0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ab0e:	2400      	movls	r4, #0
 800ab10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ab14:	fa01 f000 	lsl.w	r0, r1, r0
 800ab18:	fa24 f40c 	lsr.w	r4, r4, ip
 800ab1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ab20:	ea40 0204 	orr.w	r2, r0, r4
 800ab24:	e7db      	b.n	800aade <__b2d+0x4a>
 800ab26:	ea44 030c 	orr.w	r3, r4, ip
 800ab2a:	460a      	mov	r2, r1
 800ab2c:	e7d7      	b.n	800aade <__b2d+0x4a>
 800ab2e:	bf00      	nop
 800ab30:	3ff00000 	.word	0x3ff00000

0800ab34 <__d2b>:
 800ab34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4689      	mov	r9, r1
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	ec57 6b10 	vmov	r6, r7, d0
 800ab40:	4690      	mov	r8, r2
 800ab42:	f7ff fc09 	bl	800a358 <_Balloc>
 800ab46:	4604      	mov	r4, r0
 800ab48:	b930      	cbnz	r0, 800ab58 <__d2b+0x24>
 800ab4a:	4602      	mov	r2, r0
 800ab4c:	4b25      	ldr	r3, [pc, #148]	; (800abe4 <__d2b+0xb0>)
 800ab4e:	4826      	ldr	r0, [pc, #152]	; (800abe8 <__d2b+0xb4>)
 800ab50:	f240 310a 	movw	r1, #778	; 0x30a
 800ab54:	f000 fcfe 	bl	800b554 <__assert_func>
 800ab58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ab5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ab60:	bb35      	cbnz	r5, 800abb0 <__d2b+0x7c>
 800ab62:	2e00      	cmp	r6, #0
 800ab64:	9301      	str	r3, [sp, #4]
 800ab66:	d028      	beq.n	800abba <__d2b+0x86>
 800ab68:	4668      	mov	r0, sp
 800ab6a:	9600      	str	r6, [sp, #0]
 800ab6c:	f7ff fd06 	bl	800a57c <__lo0bits>
 800ab70:	9900      	ldr	r1, [sp, #0]
 800ab72:	b300      	cbz	r0, 800abb6 <__d2b+0x82>
 800ab74:	9a01      	ldr	r2, [sp, #4]
 800ab76:	f1c0 0320 	rsb	r3, r0, #32
 800ab7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7e:	430b      	orrs	r3, r1
 800ab80:	40c2      	lsrs	r2, r0
 800ab82:	6163      	str	r3, [r4, #20]
 800ab84:	9201      	str	r2, [sp, #4]
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	61a3      	str	r3, [r4, #24]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	bf14      	ite	ne
 800ab8e:	2202      	movne	r2, #2
 800ab90:	2201      	moveq	r2, #1
 800ab92:	6122      	str	r2, [r4, #16]
 800ab94:	b1d5      	cbz	r5, 800abcc <__d2b+0x98>
 800ab96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab9a:	4405      	add	r5, r0
 800ab9c:	f8c9 5000 	str.w	r5, [r9]
 800aba0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aba4:	f8c8 0000 	str.w	r0, [r8]
 800aba8:	4620      	mov	r0, r4
 800abaa:	b003      	add	sp, #12
 800abac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abb4:	e7d5      	b.n	800ab62 <__d2b+0x2e>
 800abb6:	6161      	str	r1, [r4, #20]
 800abb8:	e7e5      	b.n	800ab86 <__d2b+0x52>
 800abba:	a801      	add	r0, sp, #4
 800abbc:	f7ff fcde 	bl	800a57c <__lo0bits>
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	6163      	str	r3, [r4, #20]
 800abc4:	2201      	movs	r2, #1
 800abc6:	6122      	str	r2, [r4, #16]
 800abc8:	3020      	adds	r0, #32
 800abca:	e7e3      	b.n	800ab94 <__d2b+0x60>
 800abcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800abd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800abd4:	f8c9 0000 	str.w	r0, [r9]
 800abd8:	6918      	ldr	r0, [r3, #16]
 800abda:	f7ff fcaf 	bl	800a53c <__hi0bits>
 800abde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800abe2:	e7df      	b.n	800aba4 <__d2b+0x70>
 800abe4:	0800bac8 	.word	0x0800bac8
 800abe8:	0800bbb8 	.word	0x0800bbb8

0800abec <__ratio>:
 800abec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	4688      	mov	r8, r1
 800abf2:	4669      	mov	r1, sp
 800abf4:	4681      	mov	r9, r0
 800abf6:	f7ff ff4d 	bl	800aa94 <__b2d>
 800abfa:	a901      	add	r1, sp, #4
 800abfc:	4640      	mov	r0, r8
 800abfe:	ec55 4b10 	vmov	r4, r5, d0
 800ac02:	f7ff ff47 	bl	800aa94 <__b2d>
 800ac06:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac0a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ac0e:	eba3 0c02 	sub.w	ip, r3, r2
 800ac12:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ac16:	1a9b      	subs	r3, r3, r2
 800ac18:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ac1c:	ec51 0b10 	vmov	r0, r1, d0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	bfd6      	itet	le
 800ac24:	460a      	movle	r2, r1
 800ac26:	462a      	movgt	r2, r5
 800ac28:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac2c:	468b      	mov	fp, r1
 800ac2e:	462f      	mov	r7, r5
 800ac30:	bfd4      	ite	le
 800ac32:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ac36:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	ee10 2a10 	vmov	r2, s0
 800ac40:	465b      	mov	r3, fp
 800ac42:	4639      	mov	r1, r7
 800ac44:	f7f5 fe02 	bl	800084c <__aeabi_ddiv>
 800ac48:	ec41 0b10 	vmov	d0, r0, r1
 800ac4c:	b003      	add	sp, #12
 800ac4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac52 <__copybits>:
 800ac52:	3901      	subs	r1, #1
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	1149      	asrs	r1, r1, #5
 800ac58:	6914      	ldr	r4, [r2, #16]
 800ac5a:	3101      	adds	r1, #1
 800ac5c:	f102 0314 	add.w	r3, r2, #20
 800ac60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ac64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ac68:	1f05      	subs	r5, r0, #4
 800ac6a:	42a3      	cmp	r3, r4
 800ac6c:	d30c      	bcc.n	800ac88 <__copybits+0x36>
 800ac6e:	1aa3      	subs	r3, r4, r2
 800ac70:	3b11      	subs	r3, #17
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	3211      	adds	r2, #17
 800ac78:	42a2      	cmp	r2, r4
 800ac7a:	bf88      	it	hi
 800ac7c:	2300      	movhi	r3, #0
 800ac7e:	4418      	add	r0, r3
 800ac80:	2300      	movs	r3, #0
 800ac82:	4288      	cmp	r0, r1
 800ac84:	d305      	bcc.n	800ac92 <__copybits+0x40>
 800ac86:	bd70      	pop	{r4, r5, r6, pc}
 800ac88:	f853 6b04 	ldr.w	r6, [r3], #4
 800ac8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800ac90:	e7eb      	b.n	800ac6a <__copybits+0x18>
 800ac92:	f840 3b04 	str.w	r3, [r0], #4
 800ac96:	e7f4      	b.n	800ac82 <__copybits+0x30>

0800ac98 <__any_on>:
 800ac98:	f100 0214 	add.w	r2, r0, #20
 800ac9c:	6900      	ldr	r0, [r0, #16]
 800ac9e:	114b      	asrs	r3, r1, #5
 800aca0:	4298      	cmp	r0, r3
 800aca2:	b510      	push	{r4, lr}
 800aca4:	db11      	blt.n	800acca <__any_on+0x32>
 800aca6:	dd0a      	ble.n	800acbe <__any_on+0x26>
 800aca8:	f011 011f 	ands.w	r1, r1, #31
 800acac:	d007      	beq.n	800acbe <__any_on+0x26>
 800acae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acb2:	fa24 f001 	lsr.w	r0, r4, r1
 800acb6:	fa00 f101 	lsl.w	r1, r0, r1
 800acba:	428c      	cmp	r4, r1
 800acbc:	d10b      	bne.n	800acd6 <__any_on+0x3e>
 800acbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d803      	bhi.n	800acce <__any_on+0x36>
 800acc6:	2000      	movs	r0, #0
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	4603      	mov	r3, r0
 800accc:	e7f7      	b.n	800acbe <__any_on+0x26>
 800acce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acd2:	2900      	cmp	r1, #0
 800acd4:	d0f5      	beq.n	800acc2 <__any_on+0x2a>
 800acd6:	2001      	movs	r0, #1
 800acd8:	e7f6      	b.n	800acc8 <__any_on+0x30>

0800acda <_calloc_r>:
 800acda:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acdc:	fba1 2402 	umull	r2, r4, r1, r2
 800ace0:	b94c      	cbnz	r4, 800acf6 <_calloc_r+0x1c>
 800ace2:	4611      	mov	r1, r2
 800ace4:	9201      	str	r2, [sp, #4]
 800ace6:	f000 f87b 	bl	800ade0 <_malloc_r>
 800acea:	9a01      	ldr	r2, [sp, #4]
 800acec:	4605      	mov	r5, r0
 800acee:	b930      	cbnz	r0, 800acfe <_calloc_r+0x24>
 800acf0:	4628      	mov	r0, r5
 800acf2:	b003      	add	sp, #12
 800acf4:	bd30      	pop	{r4, r5, pc}
 800acf6:	220c      	movs	r2, #12
 800acf8:	6002      	str	r2, [r0, #0]
 800acfa:	2500      	movs	r5, #0
 800acfc:	e7f8      	b.n	800acf0 <_calloc_r+0x16>
 800acfe:	4621      	mov	r1, r4
 800ad00:	f7fc f848 	bl	8006d94 <memset>
 800ad04:	e7f4      	b.n	800acf0 <_calloc_r+0x16>
	...

0800ad08 <_free_r>:
 800ad08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad0a:	2900      	cmp	r1, #0
 800ad0c:	d044      	beq.n	800ad98 <_free_r+0x90>
 800ad0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad12:	9001      	str	r0, [sp, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f1a1 0404 	sub.w	r4, r1, #4
 800ad1a:	bfb8      	it	lt
 800ad1c:	18e4      	addlt	r4, r4, r3
 800ad1e:	f000 fca7 	bl	800b670 <__malloc_lock>
 800ad22:	4a1e      	ldr	r2, [pc, #120]	; (800ad9c <_free_r+0x94>)
 800ad24:	9801      	ldr	r0, [sp, #4]
 800ad26:	6813      	ldr	r3, [r2, #0]
 800ad28:	b933      	cbnz	r3, 800ad38 <_free_r+0x30>
 800ad2a:	6063      	str	r3, [r4, #4]
 800ad2c:	6014      	str	r4, [r2, #0]
 800ad2e:	b003      	add	sp, #12
 800ad30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad34:	f000 bca2 	b.w	800b67c <__malloc_unlock>
 800ad38:	42a3      	cmp	r3, r4
 800ad3a:	d908      	bls.n	800ad4e <_free_r+0x46>
 800ad3c:	6825      	ldr	r5, [r4, #0]
 800ad3e:	1961      	adds	r1, r4, r5
 800ad40:	428b      	cmp	r3, r1
 800ad42:	bf01      	itttt	eq
 800ad44:	6819      	ldreq	r1, [r3, #0]
 800ad46:	685b      	ldreq	r3, [r3, #4]
 800ad48:	1949      	addeq	r1, r1, r5
 800ad4a:	6021      	streq	r1, [r4, #0]
 800ad4c:	e7ed      	b.n	800ad2a <_free_r+0x22>
 800ad4e:	461a      	mov	r2, r3
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	b10b      	cbz	r3, 800ad58 <_free_r+0x50>
 800ad54:	42a3      	cmp	r3, r4
 800ad56:	d9fa      	bls.n	800ad4e <_free_r+0x46>
 800ad58:	6811      	ldr	r1, [r2, #0]
 800ad5a:	1855      	adds	r5, r2, r1
 800ad5c:	42a5      	cmp	r5, r4
 800ad5e:	d10b      	bne.n	800ad78 <_free_r+0x70>
 800ad60:	6824      	ldr	r4, [r4, #0]
 800ad62:	4421      	add	r1, r4
 800ad64:	1854      	adds	r4, r2, r1
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	6011      	str	r1, [r2, #0]
 800ad6a:	d1e0      	bne.n	800ad2e <_free_r+0x26>
 800ad6c:	681c      	ldr	r4, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	6053      	str	r3, [r2, #4]
 800ad72:	4421      	add	r1, r4
 800ad74:	6011      	str	r1, [r2, #0]
 800ad76:	e7da      	b.n	800ad2e <_free_r+0x26>
 800ad78:	d902      	bls.n	800ad80 <_free_r+0x78>
 800ad7a:	230c      	movs	r3, #12
 800ad7c:	6003      	str	r3, [r0, #0]
 800ad7e:	e7d6      	b.n	800ad2e <_free_r+0x26>
 800ad80:	6825      	ldr	r5, [r4, #0]
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	428b      	cmp	r3, r1
 800ad86:	bf04      	itt	eq
 800ad88:	6819      	ldreq	r1, [r3, #0]
 800ad8a:	685b      	ldreq	r3, [r3, #4]
 800ad8c:	6063      	str	r3, [r4, #4]
 800ad8e:	bf04      	itt	eq
 800ad90:	1949      	addeq	r1, r1, r5
 800ad92:	6021      	streq	r1, [r4, #0]
 800ad94:	6054      	str	r4, [r2, #4]
 800ad96:	e7ca      	b.n	800ad2e <_free_r+0x26>
 800ad98:	b003      	add	sp, #12
 800ad9a:	bd30      	pop	{r4, r5, pc}
 800ad9c:	200003c4 	.word	0x200003c4

0800ada0 <sbrk_aligned>:
 800ada0:	b570      	push	{r4, r5, r6, lr}
 800ada2:	4e0e      	ldr	r6, [pc, #56]	; (800addc <sbrk_aligned+0x3c>)
 800ada4:	460c      	mov	r4, r1
 800ada6:	6831      	ldr	r1, [r6, #0]
 800ada8:	4605      	mov	r5, r0
 800adaa:	b911      	cbnz	r1, 800adb2 <sbrk_aligned+0x12>
 800adac:	f000 fb4c 	bl	800b448 <_sbrk_r>
 800adb0:	6030      	str	r0, [r6, #0]
 800adb2:	4621      	mov	r1, r4
 800adb4:	4628      	mov	r0, r5
 800adb6:	f000 fb47 	bl	800b448 <_sbrk_r>
 800adba:	1c43      	adds	r3, r0, #1
 800adbc:	d00a      	beq.n	800add4 <sbrk_aligned+0x34>
 800adbe:	1cc4      	adds	r4, r0, #3
 800adc0:	f024 0403 	bic.w	r4, r4, #3
 800adc4:	42a0      	cmp	r0, r4
 800adc6:	d007      	beq.n	800add8 <sbrk_aligned+0x38>
 800adc8:	1a21      	subs	r1, r4, r0
 800adca:	4628      	mov	r0, r5
 800adcc:	f000 fb3c 	bl	800b448 <_sbrk_r>
 800add0:	3001      	adds	r0, #1
 800add2:	d101      	bne.n	800add8 <sbrk_aligned+0x38>
 800add4:	f04f 34ff 	mov.w	r4, #4294967295
 800add8:	4620      	mov	r0, r4
 800adda:	bd70      	pop	{r4, r5, r6, pc}
 800addc:	200003c8 	.word	0x200003c8

0800ade0 <_malloc_r>:
 800ade0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade4:	1ccd      	adds	r5, r1, #3
 800ade6:	f025 0503 	bic.w	r5, r5, #3
 800adea:	3508      	adds	r5, #8
 800adec:	2d0c      	cmp	r5, #12
 800adee:	bf38      	it	cc
 800adf0:	250c      	movcc	r5, #12
 800adf2:	2d00      	cmp	r5, #0
 800adf4:	4607      	mov	r7, r0
 800adf6:	db01      	blt.n	800adfc <_malloc_r+0x1c>
 800adf8:	42a9      	cmp	r1, r5
 800adfa:	d905      	bls.n	800ae08 <_malloc_r+0x28>
 800adfc:	230c      	movs	r3, #12
 800adfe:	603b      	str	r3, [r7, #0]
 800ae00:	2600      	movs	r6, #0
 800ae02:	4630      	mov	r0, r6
 800ae04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae08:	4e2e      	ldr	r6, [pc, #184]	; (800aec4 <_malloc_r+0xe4>)
 800ae0a:	f000 fc31 	bl	800b670 <__malloc_lock>
 800ae0e:	6833      	ldr	r3, [r6, #0]
 800ae10:	461c      	mov	r4, r3
 800ae12:	bb34      	cbnz	r4, 800ae62 <_malloc_r+0x82>
 800ae14:	4629      	mov	r1, r5
 800ae16:	4638      	mov	r0, r7
 800ae18:	f7ff ffc2 	bl	800ada0 <sbrk_aligned>
 800ae1c:	1c43      	adds	r3, r0, #1
 800ae1e:	4604      	mov	r4, r0
 800ae20:	d14d      	bne.n	800aebe <_malloc_r+0xde>
 800ae22:	6834      	ldr	r4, [r6, #0]
 800ae24:	4626      	mov	r6, r4
 800ae26:	2e00      	cmp	r6, #0
 800ae28:	d140      	bne.n	800aeac <_malloc_r+0xcc>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	4631      	mov	r1, r6
 800ae2e:	4638      	mov	r0, r7
 800ae30:	eb04 0803 	add.w	r8, r4, r3
 800ae34:	f000 fb08 	bl	800b448 <_sbrk_r>
 800ae38:	4580      	cmp	r8, r0
 800ae3a:	d13a      	bne.n	800aeb2 <_malloc_r+0xd2>
 800ae3c:	6821      	ldr	r1, [r4, #0]
 800ae3e:	3503      	adds	r5, #3
 800ae40:	1a6d      	subs	r5, r5, r1
 800ae42:	f025 0503 	bic.w	r5, r5, #3
 800ae46:	3508      	adds	r5, #8
 800ae48:	2d0c      	cmp	r5, #12
 800ae4a:	bf38      	it	cc
 800ae4c:	250c      	movcc	r5, #12
 800ae4e:	4629      	mov	r1, r5
 800ae50:	4638      	mov	r0, r7
 800ae52:	f7ff ffa5 	bl	800ada0 <sbrk_aligned>
 800ae56:	3001      	adds	r0, #1
 800ae58:	d02b      	beq.n	800aeb2 <_malloc_r+0xd2>
 800ae5a:	6823      	ldr	r3, [r4, #0]
 800ae5c:	442b      	add	r3, r5
 800ae5e:	6023      	str	r3, [r4, #0]
 800ae60:	e00e      	b.n	800ae80 <_malloc_r+0xa0>
 800ae62:	6822      	ldr	r2, [r4, #0]
 800ae64:	1b52      	subs	r2, r2, r5
 800ae66:	d41e      	bmi.n	800aea6 <_malloc_r+0xc6>
 800ae68:	2a0b      	cmp	r2, #11
 800ae6a:	d916      	bls.n	800ae9a <_malloc_r+0xba>
 800ae6c:	1961      	adds	r1, r4, r5
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	6025      	str	r5, [r4, #0]
 800ae72:	bf18      	it	ne
 800ae74:	6059      	strne	r1, [r3, #4]
 800ae76:	6863      	ldr	r3, [r4, #4]
 800ae78:	bf08      	it	eq
 800ae7a:	6031      	streq	r1, [r6, #0]
 800ae7c:	5162      	str	r2, [r4, r5]
 800ae7e:	604b      	str	r3, [r1, #4]
 800ae80:	4638      	mov	r0, r7
 800ae82:	f104 060b 	add.w	r6, r4, #11
 800ae86:	f000 fbf9 	bl	800b67c <__malloc_unlock>
 800ae8a:	f026 0607 	bic.w	r6, r6, #7
 800ae8e:	1d23      	adds	r3, r4, #4
 800ae90:	1af2      	subs	r2, r6, r3
 800ae92:	d0b6      	beq.n	800ae02 <_malloc_r+0x22>
 800ae94:	1b9b      	subs	r3, r3, r6
 800ae96:	50a3      	str	r3, [r4, r2]
 800ae98:	e7b3      	b.n	800ae02 <_malloc_r+0x22>
 800ae9a:	6862      	ldr	r2, [r4, #4]
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	bf0c      	ite	eq
 800aea0:	6032      	streq	r2, [r6, #0]
 800aea2:	605a      	strne	r2, [r3, #4]
 800aea4:	e7ec      	b.n	800ae80 <_malloc_r+0xa0>
 800aea6:	4623      	mov	r3, r4
 800aea8:	6864      	ldr	r4, [r4, #4]
 800aeaa:	e7b2      	b.n	800ae12 <_malloc_r+0x32>
 800aeac:	4634      	mov	r4, r6
 800aeae:	6876      	ldr	r6, [r6, #4]
 800aeb0:	e7b9      	b.n	800ae26 <_malloc_r+0x46>
 800aeb2:	230c      	movs	r3, #12
 800aeb4:	603b      	str	r3, [r7, #0]
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f000 fbe0 	bl	800b67c <__malloc_unlock>
 800aebc:	e7a1      	b.n	800ae02 <_malloc_r+0x22>
 800aebe:	6025      	str	r5, [r4, #0]
 800aec0:	e7de      	b.n	800ae80 <_malloc_r+0xa0>
 800aec2:	bf00      	nop
 800aec4:	200003c4 	.word	0x200003c4

0800aec8 <__ssputs_r>:
 800aec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aecc:	688e      	ldr	r6, [r1, #8]
 800aece:	429e      	cmp	r6, r3
 800aed0:	4682      	mov	sl, r0
 800aed2:	460c      	mov	r4, r1
 800aed4:	4690      	mov	r8, r2
 800aed6:	461f      	mov	r7, r3
 800aed8:	d838      	bhi.n	800af4c <__ssputs_r+0x84>
 800aeda:	898a      	ldrh	r2, [r1, #12]
 800aedc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aee0:	d032      	beq.n	800af48 <__ssputs_r+0x80>
 800aee2:	6825      	ldr	r5, [r4, #0]
 800aee4:	6909      	ldr	r1, [r1, #16]
 800aee6:	eba5 0901 	sub.w	r9, r5, r1
 800aeea:	6965      	ldr	r5, [r4, #20]
 800aeec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aef0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aef4:	3301      	adds	r3, #1
 800aef6:	444b      	add	r3, r9
 800aef8:	106d      	asrs	r5, r5, #1
 800aefa:	429d      	cmp	r5, r3
 800aefc:	bf38      	it	cc
 800aefe:	461d      	movcc	r5, r3
 800af00:	0553      	lsls	r3, r2, #21
 800af02:	d531      	bpl.n	800af68 <__ssputs_r+0xa0>
 800af04:	4629      	mov	r1, r5
 800af06:	f7ff ff6b 	bl	800ade0 <_malloc_r>
 800af0a:	4606      	mov	r6, r0
 800af0c:	b950      	cbnz	r0, 800af24 <__ssputs_r+0x5c>
 800af0e:	230c      	movs	r3, #12
 800af10:	f8ca 3000 	str.w	r3, [sl]
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af24:	6921      	ldr	r1, [r4, #16]
 800af26:	464a      	mov	r2, r9
 800af28:	f7ff fa08 	bl	800a33c <memcpy>
 800af2c:	89a3      	ldrh	r3, [r4, #12]
 800af2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af36:	81a3      	strh	r3, [r4, #12]
 800af38:	6126      	str	r6, [r4, #16]
 800af3a:	6165      	str	r5, [r4, #20]
 800af3c:	444e      	add	r6, r9
 800af3e:	eba5 0509 	sub.w	r5, r5, r9
 800af42:	6026      	str	r6, [r4, #0]
 800af44:	60a5      	str	r5, [r4, #8]
 800af46:	463e      	mov	r6, r7
 800af48:	42be      	cmp	r6, r7
 800af4a:	d900      	bls.n	800af4e <__ssputs_r+0x86>
 800af4c:	463e      	mov	r6, r7
 800af4e:	6820      	ldr	r0, [r4, #0]
 800af50:	4632      	mov	r2, r6
 800af52:	4641      	mov	r1, r8
 800af54:	f000 fb72 	bl	800b63c <memmove>
 800af58:	68a3      	ldr	r3, [r4, #8]
 800af5a:	1b9b      	subs	r3, r3, r6
 800af5c:	60a3      	str	r3, [r4, #8]
 800af5e:	6823      	ldr	r3, [r4, #0]
 800af60:	4433      	add	r3, r6
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	2000      	movs	r0, #0
 800af66:	e7db      	b.n	800af20 <__ssputs_r+0x58>
 800af68:	462a      	mov	r2, r5
 800af6a:	f000 fb8d 	bl	800b688 <_realloc_r>
 800af6e:	4606      	mov	r6, r0
 800af70:	2800      	cmp	r0, #0
 800af72:	d1e1      	bne.n	800af38 <__ssputs_r+0x70>
 800af74:	6921      	ldr	r1, [r4, #16]
 800af76:	4650      	mov	r0, sl
 800af78:	f7ff fec6 	bl	800ad08 <_free_r>
 800af7c:	e7c7      	b.n	800af0e <__ssputs_r+0x46>
	...

0800af80 <_svfiprintf_r>:
 800af80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af84:	4698      	mov	r8, r3
 800af86:	898b      	ldrh	r3, [r1, #12]
 800af88:	061b      	lsls	r3, r3, #24
 800af8a:	b09d      	sub	sp, #116	; 0x74
 800af8c:	4607      	mov	r7, r0
 800af8e:	460d      	mov	r5, r1
 800af90:	4614      	mov	r4, r2
 800af92:	d50e      	bpl.n	800afb2 <_svfiprintf_r+0x32>
 800af94:	690b      	ldr	r3, [r1, #16]
 800af96:	b963      	cbnz	r3, 800afb2 <_svfiprintf_r+0x32>
 800af98:	2140      	movs	r1, #64	; 0x40
 800af9a:	f7ff ff21 	bl	800ade0 <_malloc_r>
 800af9e:	6028      	str	r0, [r5, #0]
 800afa0:	6128      	str	r0, [r5, #16]
 800afa2:	b920      	cbnz	r0, 800afae <_svfiprintf_r+0x2e>
 800afa4:	230c      	movs	r3, #12
 800afa6:	603b      	str	r3, [r7, #0]
 800afa8:	f04f 30ff 	mov.w	r0, #4294967295
 800afac:	e0d1      	b.n	800b152 <_svfiprintf_r+0x1d2>
 800afae:	2340      	movs	r3, #64	; 0x40
 800afb0:	616b      	str	r3, [r5, #20]
 800afb2:	2300      	movs	r3, #0
 800afb4:	9309      	str	r3, [sp, #36]	; 0x24
 800afb6:	2320      	movs	r3, #32
 800afb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afbc:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc0:	2330      	movs	r3, #48	; 0x30
 800afc2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b16c <_svfiprintf_r+0x1ec>
 800afc6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afca:	f04f 0901 	mov.w	r9, #1
 800afce:	4623      	mov	r3, r4
 800afd0:	469a      	mov	sl, r3
 800afd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afd6:	b10a      	cbz	r2, 800afdc <_svfiprintf_r+0x5c>
 800afd8:	2a25      	cmp	r2, #37	; 0x25
 800afda:	d1f9      	bne.n	800afd0 <_svfiprintf_r+0x50>
 800afdc:	ebba 0b04 	subs.w	fp, sl, r4
 800afe0:	d00b      	beq.n	800affa <_svfiprintf_r+0x7a>
 800afe2:	465b      	mov	r3, fp
 800afe4:	4622      	mov	r2, r4
 800afe6:	4629      	mov	r1, r5
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff ff6d 	bl	800aec8 <__ssputs_r>
 800afee:	3001      	adds	r0, #1
 800aff0:	f000 80aa 	beq.w	800b148 <_svfiprintf_r+0x1c8>
 800aff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aff6:	445a      	add	r2, fp
 800aff8:	9209      	str	r2, [sp, #36]	; 0x24
 800affa:	f89a 3000 	ldrb.w	r3, [sl]
 800affe:	2b00      	cmp	r3, #0
 800b000:	f000 80a2 	beq.w	800b148 <_svfiprintf_r+0x1c8>
 800b004:	2300      	movs	r3, #0
 800b006:	f04f 32ff 	mov.w	r2, #4294967295
 800b00a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b00e:	f10a 0a01 	add.w	sl, sl, #1
 800b012:	9304      	str	r3, [sp, #16]
 800b014:	9307      	str	r3, [sp, #28]
 800b016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b01a:	931a      	str	r3, [sp, #104]	; 0x68
 800b01c:	4654      	mov	r4, sl
 800b01e:	2205      	movs	r2, #5
 800b020:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b024:	4851      	ldr	r0, [pc, #324]	; (800b16c <_svfiprintf_r+0x1ec>)
 800b026:	f7f5 f8db 	bl	80001e0 <memchr>
 800b02a:	9a04      	ldr	r2, [sp, #16]
 800b02c:	b9d8      	cbnz	r0, 800b066 <_svfiprintf_r+0xe6>
 800b02e:	06d0      	lsls	r0, r2, #27
 800b030:	bf44      	itt	mi
 800b032:	2320      	movmi	r3, #32
 800b034:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b038:	0711      	lsls	r1, r2, #28
 800b03a:	bf44      	itt	mi
 800b03c:	232b      	movmi	r3, #43	; 0x2b
 800b03e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b042:	f89a 3000 	ldrb.w	r3, [sl]
 800b046:	2b2a      	cmp	r3, #42	; 0x2a
 800b048:	d015      	beq.n	800b076 <_svfiprintf_r+0xf6>
 800b04a:	9a07      	ldr	r2, [sp, #28]
 800b04c:	4654      	mov	r4, sl
 800b04e:	2000      	movs	r0, #0
 800b050:	f04f 0c0a 	mov.w	ip, #10
 800b054:	4621      	mov	r1, r4
 800b056:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b05a:	3b30      	subs	r3, #48	; 0x30
 800b05c:	2b09      	cmp	r3, #9
 800b05e:	d94e      	bls.n	800b0fe <_svfiprintf_r+0x17e>
 800b060:	b1b0      	cbz	r0, 800b090 <_svfiprintf_r+0x110>
 800b062:	9207      	str	r2, [sp, #28]
 800b064:	e014      	b.n	800b090 <_svfiprintf_r+0x110>
 800b066:	eba0 0308 	sub.w	r3, r0, r8
 800b06a:	fa09 f303 	lsl.w	r3, r9, r3
 800b06e:	4313      	orrs	r3, r2
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	46a2      	mov	sl, r4
 800b074:	e7d2      	b.n	800b01c <_svfiprintf_r+0x9c>
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	1d19      	adds	r1, r3, #4
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	9103      	str	r1, [sp, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	bfbb      	ittet	lt
 800b082:	425b      	neglt	r3, r3
 800b084:	f042 0202 	orrlt.w	r2, r2, #2
 800b088:	9307      	strge	r3, [sp, #28]
 800b08a:	9307      	strlt	r3, [sp, #28]
 800b08c:	bfb8      	it	lt
 800b08e:	9204      	strlt	r2, [sp, #16]
 800b090:	7823      	ldrb	r3, [r4, #0]
 800b092:	2b2e      	cmp	r3, #46	; 0x2e
 800b094:	d10c      	bne.n	800b0b0 <_svfiprintf_r+0x130>
 800b096:	7863      	ldrb	r3, [r4, #1]
 800b098:	2b2a      	cmp	r3, #42	; 0x2a
 800b09a:	d135      	bne.n	800b108 <_svfiprintf_r+0x188>
 800b09c:	9b03      	ldr	r3, [sp, #12]
 800b09e:	1d1a      	adds	r2, r3, #4
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	9203      	str	r2, [sp, #12]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bfb8      	it	lt
 800b0a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0ac:	3402      	adds	r4, #2
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b17c <_svfiprintf_r+0x1fc>
 800b0b4:	7821      	ldrb	r1, [r4, #0]
 800b0b6:	2203      	movs	r2, #3
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	f7f5 f891 	bl	80001e0 <memchr>
 800b0be:	b140      	cbz	r0, 800b0d2 <_svfiprintf_r+0x152>
 800b0c0:	2340      	movs	r3, #64	; 0x40
 800b0c2:	eba0 000a 	sub.w	r0, r0, sl
 800b0c6:	fa03 f000 	lsl.w	r0, r3, r0
 800b0ca:	9b04      	ldr	r3, [sp, #16]
 800b0cc:	4303      	orrs	r3, r0
 800b0ce:	3401      	adds	r4, #1
 800b0d0:	9304      	str	r3, [sp, #16]
 800b0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0d6:	4826      	ldr	r0, [pc, #152]	; (800b170 <_svfiprintf_r+0x1f0>)
 800b0d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0dc:	2206      	movs	r2, #6
 800b0de:	f7f5 f87f 	bl	80001e0 <memchr>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d038      	beq.n	800b158 <_svfiprintf_r+0x1d8>
 800b0e6:	4b23      	ldr	r3, [pc, #140]	; (800b174 <_svfiprintf_r+0x1f4>)
 800b0e8:	bb1b      	cbnz	r3, 800b132 <_svfiprintf_r+0x1b2>
 800b0ea:	9b03      	ldr	r3, [sp, #12]
 800b0ec:	3307      	adds	r3, #7
 800b0ee:	f023 0307 	bic.w	r3, r3, #7
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	9303      	str	r3, [sp, #12]
 800b0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0f8:	4433      	add	r3, r6
 800b0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fc:	e767      	b.n	800afce <_svfiprintf_r+0x4e>
 800b0fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800b102:	460c      	mov	r4, r1
 800b104:	2001      	movs	r0, #1
 800b106:	e7a5      	b.n	800b054 <_svfiprintf_r+0xd4>
 800b108:	2300      	movs	r3, #0
 800b10a:	3401      	adds	r4, #1
 800b10c:	9305      	str	r3, [sp, #20]
 800b10e:	4619      	mov	r1, r3
 800b110:	f04f 0c0a 	mov.w	ip, #10
 800b114:	4620      	mov	r0, r4
 800b116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b11a:	3a30      	subs	r2, #48	; 0x30
 800b11c:	2a09      	cmp	r2, #9
 800b11e:	d903      	bls.n	800b128 <_svfiprintf_r+0x1a8>
 800b120:	2b00      	cmp	r3, #0
 800b122:	d0c5      	beq.n	800b0b0 <_svfiprintf_r+0x130>
 800b124:	9105      	str	r1, [sp, #20]
 800b126:	e7c3      	b.n	800b0b0 <_svfiprintf_r+0x130>
 800b128:	fb0c 2101 	mla	r1, ip, r1, r2
 800b12c:	4604      	mov	r4, r0
 800b12e:	2301      	movs	r3, #1
 800b130:	e7f0      	b.n	800b114 <_svfiprintf_r+0x194>
 800b132:	ab03      	add	r3, sp, #12
 800b134:	9300      	str	r3, [sp, #0]
 800b136:	462a      	mov	r2, r5
 800b138:	4b0f      	ldr	r3, [pc, #60]	; (800b178 <_svfiprintf_r+0x1f8>)
 800b13a:	a904      	add	r1, sp, #16
 800b13c:	4638      	mov	r0, r7
 800b13e:	f7fb fed1 	bl	8006ee4 <_printf_float>
 800b142:	1c42      	adds	r2, r0, #1
 800b144:	4606      	mov	r6, r0
 800b146:	d1d6      	bne.n	800b0f6 <_svfiprintf_r+0x176>
 800b148:	89ab      	ldrh	r3, [r5, #12]
 800b14a:	065b      	lsls	r3, r3, #25
 800b14c:	f53f af2c 	bmi.w	800afa8 <_svfiprintf_r+0x28>
 800b150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b152:	b01d      	add	sp, #116	; 0x74
 800b154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b158:	ab03      	add	r3, sp, #12
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	462a      	mov	r2, r5
 800b15e:	4b06      	ldr	r3, [pc, #24]	; (800b178 <_svfiprintf_r+0x1f8>)
 800b160:	a904      	add	r1, sp, #16
 800b162:	4638      	mov	r0, r7
 800b164:	f7fc f962 	bl	800742c <_printf_i>
 800b168:	e7eb      	b.n	800b142 <_svfiprintf_r+0x1c2>
 800b16a:	bf00      	nop
 800b16c:	0800bd14 	.word	0x0800bd14
 800b170:	0800bd1e 	.word	0x0800bd1e
 800b174:	08006ee5 	.word	0x08006ee5
 800b178:	0800aec9 	.word	0x0800aec9
 800b17c:	0800bd1a 	.word	0x0800bd1a

0800b180 <__sfputc_r>:
 800b180:	6893      	ldr	r3, [r2, #8]
 800b182:	3b01      	subs	r3, #1
 800b184:	2b00      	cmp	r3, #0
 800b186:	b410      	push	{r4}
 800b188:	6093      	str	r3, [r2, #8]
 800b18a:	da08      	bge.n	800b19e <__sfputc_r+0x1e>
 800b18c:	6994      	ldr	r4, [r2, #24]
 800b18e:	42a3      	cmp	r3, r4
 800b190:	db01      	blt.n	800b196 <__sfputc_r+0x16>
 800b192:	290a      	cmp	r1, #10
 800b194:	d103      	bne.n	800b19e <__sfputc_r+0x1e>
 800b196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b19a:	f7fd bbe7 	b.w	800896c <__swbuf_r>
 800b19e:	6813      	ldr	r3, [r2, #0]
 800b1a0:	1c58      	adds	r0, r3, #1
 800b1a2:	6010      	str	r0, [r2, #0]
 800b1a4:	7019      	strb	r1, [r3, #0]
 800b1a6:	4608      	mov	r0, r1
 800b1a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <__sfputs_r>:
 800b1ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1b0:	4606      	mov	r6, r0
 800b1b2:	460f      	mov	r7, r1
 800b1b4:	4614      	mov	r4, r2
 800b1b6:	18d5      	adds	r5, r2, r3
 800b1b8:	42ac      	cmp	r4, r5
 800b1ba:	d101      	bne.n	800b1c0 <__sfputs_r+0x12>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	e007      	b.n	800b1d0 <__sfputs_r+0x22>
 800b1c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c4:	463a      	mov	r2, r7
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff ffda 	bl	800b180 <__sfputc_r>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d1f3      	bne.n	800b1b8 <__sfputs_r+0xa>
 800b1d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b1d4 <_vfiprintf_r>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	460d      	mov	r5, r1
 800b1da:	b09d      	sub	sp, #116	; 0x74
 800b1dc:	4614      	mov	r4, r2
 800b1de:	4698      	mov	r8, r3
 800b1e0:	4606      	mov	r6, r0
 800b1e2:	b118      	cbz	r0, 800b1ec <_vfiprintf_r+0x18>
 800b1e4:	6983      	ldr	r3, [r0, #24]
 800b1e6:	b90b      	cbnz	r3, 800b1ec <_vfiprintf_r+0x18>
 800b1e8:	f7fe fc16 	bl	8009a18 <__sinit>
 800b1ec:	4b89      	ldr	r3, [pc, #548]	; (800b414 <_vfiprintf_r+0x240>)
 800b1ee:	429d      	cmp	r5, r3
 800b1f0:	d11b      	bne.n	800b22a <_vfiprintf_r+0x56>
 800b1f2:	6875      	ldr	r5, [r6, #4]
 800b1f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1f6:	07d9      	lsls	r1, r3, #31
 800b1f8:	d405      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b1fa:	89ab      	ldrh	r3, [r5, #12]
 800b1fc:	059a      	lsls	r2, r3, #22
 800b1fe:	d402      	bmi.n	800b206 <_vfiprintf_r+0x32>
 800b200:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b202:	f7ff f81a 	bl	800a23a <__retarget_lock_acquire_recursive>
 800b206:	89ab      	ldrh	r3, [r5, #12]
 800b208:	071b      	lsls	r3, r3, #28
 800b20a:	d501      	bpl.n	800b210 <_vfiprintf_r+0x3c>
 800b20c:	692b      	ldr	r3, [r5, #16]
 800b20e:	b9eb      	cbnz	r3, 800b24c <_vfiprintf_r+0x78>
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f7fd fbfc 	bl	8008a10 <__swsetup_r>
 800b218:	b1c0      	cbz	r0, 800b24c <_vfiprintf_r+0x78>
 800b21a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b21c:	07dc      	lsls	r4, r3, #31
 800b21e:	d50e      	bpl.n	800b23e <_vfiprintf_r+0x6a>
 800b220:	f04f 30ff 	mov.w	r0, #4294967295
 800b224:	b01d      	add	sp, #116	; 0x74
 800b226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22a:	4b7b      	ldr	r3, [pc, #492]	; (800b418 <_vfiprintf_r+0x244>)
 800b22c:	429d      	cmp	r5, r3
 800b22e:	d101      	bne.n	800b234 <_vfiprintf_r+0x60>
 800b230:	68b5      	ldr	r5, [r6, #8]
 800b232:	e7df      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b234:	4b79      	ldr	r3, [pc, #484]	; (800b41c <_vfiprintf_r+0x248>)
 800b236:	429d      	cmp	r5, r3
 800b238:	bf08      	it	eq
 800b23a:	68f5      	ldreq	r5, [r6, #12]
 800b23c:	e7da      	b.n	800b1f4 <_vfiprintf_r+0x20>
 800b23e:	89ab      	ldrh	r3, [r5, #12]
 800b240:	0598      	lsls	r0, r3, #22
 800b242:	d4ed      	bmi.n	800b220 <_vfiprintf_r+0x4c>
 800b244:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b246:	f7fe fff9 	bl	800a23c <__retarget_lock_release_recursive>
 800b24a:	e7e9      	b.n	800b220 <_vfiprintf_r+0x4c>
 800b24c:	2300      	movs	r3, #0
 800b24e:	9309      	str	r3, [sp, #36]	; 0x24
 800b250:	2320      	movs	r3, #32
 800b252:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b256:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25a:	2330      	movs	r3, #48	; 0x30
 800b25c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b420 <_vfiprintf_r+0x24c>
 800b260:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b264:	f04f 0901 	mov.w	r9, #1
 800b268:	4623      	mov	r3, r4
 800b26a:	469a      	mov	sl, r3
 800b26c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b270:	b10a      	cbz	r2, 800b276 <_vfiprintf_r+0xa2>
 800b272:	2a25      	cmp	r2, #37	; 0x25
 800b274:	d1f9      	bne.n	800b26a <_vfiprintf_r+0x96>
 800b276:	ebba 0b04 	subs.w	fp, sl, r4
 800b27a:	d00b      	beq.n	800b294 <_vfiprintf_r+0xc0>
 800b27c:	465b      	mov	r3, fp
 800b27e:	4622      	mov	r2, r4
 800b280:	4629      	mov	r1, r5
 800b282:	4630      	mov	r0, r6
 800b284:	f7ff ff93 	bl	800b1ae <__sfputs_r>
 800b288:	3001      	adds	r0, #1
 800b28a:	f000 80aa 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b28e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b290:	445a      	add	r2, fp
 800b292:	9209      	str	r2, [sp, #36]	; 0x24
 800b294:	f89a 3000 	ldrb.w	r3, [sl]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f000 80a2 	beq.w	800b3e2 <_vfiprintf_r+0x20e>
 800b29e:	2300      	movs	r3, #0
 800b2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2a8:	f10a 0a01 	add.w	sl, sl, #1
 800b2ac:	9304      	str	r3, [sp, #16]
 800b2ae:	9307      	str	r3, [sp, #28]
 800b2b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2b4:	931a      	str	r3, [sp, #104]	; 0x68
 800b2b6:	4654      	mov	r4, sl
 800b2b8:	2205      	movs	r2, #5
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	4858      	ldr	r0, [pc, #352]	; (800b420 <_vfiprintf_r+0x24c>)
 800b2c0:	f7f4 ff8e 	bl	80001e0 <memchr>
 800b2c4:	9a04      	ldr	r2, [sp, #16]
 800b2c6:	b9d8      	cbnz	r0, 800b300 <_vfiprintf_r+0x12c>
 800b2c8:	06d1      	lsls	r1, r2, #27
 800b2ca:	bf44      	itt	mi
 800b2cc:	2320      	movmi	r3, #32
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d2:	0713      	lsls	r3, r2, #28
 800b2d4:	bf44      	itt	mi
 800b2d6:	232b      	movmi	r3, #43	; 0x2b
 800b2d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e2:	d015      	beq.n	800b310 <_vfiprintf_r+0x13c>
 800b2e4:	9a07      	ldr	r2, [sp, #28]
 800b2e6:	4654      	mov	r4, sl
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	f04f 0c0a 	mov.w	ip, #10
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f4:	3b30      	subs	r3, #48	; 0x30
 800b2f6:	2b09      	cmp	r3, #9
 800b2f8:	d94e      	bls.n	800b398 <_vfiprintf_r+0x1c4>
 800b2fa:	b1b0      	cbz	r0, 800b32a <_vfiprintf_r+0x156>
 800b2fc:	9207      	str	r2, [sp, #28]
 800b2fe:	e014      	b.n	800b32a <_vfiprintf_r+0x156>
 800b300:	eba0 0308 	sub.w	r3, r0, r8
 800b304:	fa09 f303 	lsl.w	r3, r9, r3
 800b308:	4313      	orrs	r3, r2
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	46a2      	mov	sl, r4
 800b30e:	e7d2      	b.n	800b2b6 <_vfiprintf_r+0xe2>
 800b310:	9b03      	ldr	r3, [sp, #12]
 800b312:	1d19      	adds	r1, r3, #4
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	9103      	str	r1, [sp, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	bfbb      	ittet	lt
 800b31c:	425b      	neglt	r3, r3
 800b31e:	f042 0202 	orrlt.w	r2, r2, #2
 800b322:	9307      	strge	r3, [sp, #28]
 800b324:	9307      	strlt	r3, [sp, #28]
 800b326:	bfb8      	it	lt
 800b328:	9204      	strlt	r2, [sp, #16]
 800b32a:	7823      	ldrb	r3, [r4, #0]
 800b32c:	2b2e      	cmp	r3, #46	; 0x2e
 800b32e:	d10c      	bne.n	800b34a <_vfiprintf_r+0x176>
 800b330:	7863      	ldrb	r3, [r4, #1]
 800b332:	2b2a      	cmp	r3, #42	; 0x2a
 800b334:	d135      	bne.n	800b3a2 <_vfiprintf_r+0x1ce>
 800b336:	9b03      	ldr	r3, [sp, #12]
 800b338:	1d1a      	adds	r2, r3, #4
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	9203      	str	r2, [sp, #12]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	bfb8      	it	lt
 800b342:	f04f 33ff 	movlt.w	r3, #4294967295
 800b346:	3402      	adds	r4, #2
 800b348:	9305      	str	r3, [sp, #20]
 800b34a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b430 <_vfiprintf_r+0x25c>
 800b34e:	7821      	ldrb	r1, [r4, #0]
 800b350:	2203      	movs	r2, #3
 800b352:	4650      	mov	r0, sl
 800b354:	f7f4 ff44 	bl	80001e0 <memchr>
 800b358:	b140      	cbz	r0, 800b36c <_vfiprintf_r+0x198>
 800b35a:	2340      	movs	r3, #64	; 0x40
 800b35c:	eba0 000a 	sub.w	r0, r0, sl
 800b360:	fa03 f000 	lsl.w	r0, r3, r0
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	4303      	orrs	r3, r0
 800b368:	3401      	adds	r4, #1
 800b36a:	9304      	str	r3, [sp, #16]
 800b36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b370:	482c      	ldr	r0, [pc, #176]	; (800b424 <_vfiprintf_r+0x250>)
 800b372:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b376:	2206      	movs	r2, #6
 800b378:	f7f4 ff32 	bl	80001e0 <memchr>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d03f      	beq.n	800b400 <_vfiprintf_r+0x22c>
 800b380:	4b29      	ldr	r3, [pc, #164]	; (800b428 <_vfiprintf_r+0x254>)
 800b382:	bb1b      	cbnz	r3, 800b3cc <_vfiprintf_r+0x1f8>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	3307      	adds	r3, #7
 800b388:	f023 0307 	bic.w	r3, r3, #7
 800b38c:	3308      	adds	r3, #8
 800b38e:	9303      	str	r3, [sp, #12]
 800b390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b392:	443b      	add	r3, r7
 800b394:	9309      	str	r3, [sp, #36]	; 0x24
 800b396:	e767      	b.n	800b268 <_vfiprintf_r+0x94>
 800b398:	fb0c 3202 	mla	r2, ip, r2, r3
 800b39c:	460c      	mov	r4, r1
 800b39e:	2001      	movs	r0, #1
 800b3a0:	e7a5      	b.n	800b2ee <_vfiprintf_r+0x11a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	3401      	adds	r4, #1
 800b3a6:	9305      	str	r3, [sp, #20]
 800b3a8:	4619      	mov	r1, r3
 800b3aa:	f04f 0c0a 	mov.w	ip, #10
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b4:	3a30      	subs	r2, #48	; 0x30
 800b3b6:	2a09      	cmp	r2, #9
 800b3b8:	d903      	bls.n	800b3c2 <_vfiprintf_r+0x1ee>
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0c5      	beq.n	800b34a <_vfiprintf_r+0x176>
 800b3be:	9105      	str	r1, [sp, #20]
 800b3c0:	e7c3      	b.n	800b34a <_vfiprintf_r+0x176>
 800b3c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c6:	4604      	mov	r4, r0
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e7f0      	b.n	800b3ae <_vfiprintf_r+0x1da>
 800b3cc:	ab03      	add	r3, sp, #12
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	462a      	mov	r2, r5
 800b3d2:	4b16      	ldr	r3, [pc, #88]	; (800b42c <_vfiprintf_r+0x258>)
 800b3d4:	a904      	add	r1, sp, #16
 800b3d6:	4630      	mov	r0, r6
 800b3d8:	f7fb fd84 	bl	8006ee4 <_printf_float>
 800b3dc:	4607      	mov	r7, r0
 800b3de:	1c78      	adds	r0, r7, #1
 800b3e0:	d1d6      	bne.n	800b390 <_vfiprintf_r+0x1bc>
 800b3e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b3e4:	07d9      	lsls	r1, r3, #31
 800b3e6:	d405      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3e8:	89ab      	ldrh	r3, [r5, #12]
 800b3ea:	059a      	lsls	r2, r3, #22
 800b3ec:	d402      	bmi.n	800b3f4 <_vfiprintf_r+0x220>
 800b3ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b3f0:	f7fe ff24 	bl	800a23c <__retarget_lock_release_recursive>
 800b3f4:	89ab      	ldrh	r3, [r5, #12]
 800b3f6:	065b      	lsls	r3, r3, #25
 800b3f8:	f53f af12 	bmi.w	800b220 <_vfiprintf_r+0x4c>
 800b3fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3fe:	e711      	b.n	800b224 <_vfiprintf_r+0x50>
 800b400:	ab03      	add	r3, sp, #12
 800b402:	9300      	str	r3, [sp, #0]
 800b404:	462a      	mov	r2, r5
 800b406:	4b09      	ldr	r3, [pc, #36]	; (800b42c <_vfiprintf_r+0x258>)
 800b408:	a904      	add	r1, sp, #16
 800b40a:	4630      	mov	r0, r6
 800b40c:	f7fc f80e 	bl	800742c <_printf_i>
 800b410:	e7e4      	b.n	800b3dc <_vfiprintf_r+0x208>
 800b412:	bf00      	nop
 800b414:	0800bafc 	.word	0x0800bafc
 800b418:	0800bb1c 	.word	0x0800bb1c
 800b41c:	0800badc 	.word	0x0800badc
 800b420:	0800bd14 	.word	0x0800bd14
 800b424:	0800bd1e 	.word	0x0800bd1e
 800b428:	08006ee5 	.word	0x08006ee5
 800b42c:	0800b1af 	.word	0x0800b1af
 800b430:	0800bd1a 	.word	0x0800bd1a
 800b434:	00000000 	.word	0x00000000

0800b438 <nan>:
 800b438:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b440 <nan+0x8>
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	00000000 	.word	0x00000000
 800b444:	7ff80000 	.word	0x7ff80000

0800b448 <_sbrk_r>:
 800b448:	b538      	push	{r3, r4, r5, lr}
 800b44a:	4d06      	ldr	r5, [pc, #24]	; (800b464 <_sbrk_r+0x1c>)
 800b44c:	2300      	movs	r3, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	4608      	mov	r0, r1
 800b452:	602b      	str	r3, [r5, #0]
 800b454:	f7f6 fda0 	bl	8001f98 <_sbrk>
 800b458:	1c43      	adds	r3, r0, #1
 800b45a:	d102      	bne.n	800b462 <_sbrk_r+0x1a>
 800b45c:	682b      	ldr	r3, [r5, #0]
 800b45e:	b103      	cbz	r3, 800b462 <_sbrk_r+0x1a>
 800b460:	6023      	str	r3, [r4, #0]
 800b462:	bd38      	pop	{r3, r4, r5, pc}
 800b464:	200003cc 	.word	0x200003cc

0800b468 <__sread>:
 800b468:	b510      	push	{r4, lr}
 800b46a:	460c      	mov	r4, r1
 800b46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b470:	f000 f93a 	bl	800b6e8 <_read_r>
 800b474:	2800      	cmp	r0, #0
 800b476:	bfab      	itete	ge
 800b478:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b47a:	89a3      	ldrhlt	r3, [r4, #12]
 800b47c:	181b      	addge	r3, r3, r0
 800b47e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b482:	bfac      	ite	ge
 800b484:	6563      	strge	r3, [r4, #84]	; 0x54
 800b486:	81a3      	strhlt	r3, [r4, #12]
 800b488:	bd10      	pop	{r4, pc}

0800b48a <__swrite>:
 800b48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48e:	461f      	mov	r7, r3
 800b490:	898b      	ldrh	r3, [r1, #12]
 800b492:	05db      	lsls	r3, r3, #23
 800b494:	4605      	mov	r5, r0
 800b496:	460c      	mov	r4, r1
 800b498:	4616      	mov	r6, r2
 800b49a:	d505      	bpl.n	800b4a8 <__swrite+0x1e>
 800b49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4a0:	2302      	movs	r3, #2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	f000 f8b8 	bl	800b618 <_lseek_r>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4b2:	81a3      	strh	r3, [r4, #12]
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4be:	f000 b837 	b.w	800b530 <_write_r>

0800b4c2 <__sseek>:
 800b4c2:	b510      	push	{r4, lr}
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ca:	f000 f8a5 	bl	800b618 <_lseek_r>
 800b4ce:	1c43      	adds	r3, r0, #1
 800b4d0:	89a3      	ldrh	r3, [r4, #12]
 800b4d2:	bf15      	itete	ne
 800b4d4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4de:	81a3      	strheq	r3, [r4, #12]
 800b4e0:	bf18      	it	ne
 800b4e2:	81a3      	strhne	r3, [r4, #12]
 800b4e4:	bd10      	pop	{r4, pc}

0800b4e6 <__sclose>:
 800b4e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4ea:	f000 b851 	b.w	800b590 <_close_r>

0800b4ee <strncmp>:
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	b17a      	cbz	r2, 800b512 <strncmp+0x24>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	3901      	subs	r1, #1
 800b4f6:	1884      	adds	r4, r0, r2
 800b4f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b4fc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b500:	4290      	cmp	r0, r2
 800b502:	d101      	bne.n	800b508 <strncmp+0x1a>
 800b504:	42a3      	cmp	r3, r4
 800b506:	d101      	bne.n	800b50c <strncmp+0x1e>
 800b508:	1a80      	subs	r0, r0, r2
 800b50a:	bd10      	pop	{r4, pc}
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d1f3      	bne.n	800b4f8 <strncmp+0xa>
 800b510:	e7fa      	b.n	800b508 <strncmp+0x1a>
 800b512:	4610      	mov	r0, r2
 800b514:	e7f9      	b.n	800b50a <strncmp+0x1c>

0800b516 <__ascii_wctomb>:
 800b516:	b149      	cbz	r1, 800b52c <__ascii_wctomb+0x16>
 800b518:	2aff      	cmp	r2, #255	; 0xff
 800b51a:	bf85      	ittet	hi
 800b51c:	238a      	movhi	r3, #138	; 0x8a
 800b51e:	6003      	strhi	r3, [r0, #0]
 800b520:	700a      	strbls	r2, [r1, #0]
 800b522:	f04f 30ff 	movhi.w	r0, #4294967295
 800b526:	bf98      	it	ls
 800b528:	2001      	movls	r0, #1
 800b52a:	4770      	bx	lr
 800b52c:	4608      	mov	r0, r1
 800b52e:	4770      	bx	lr

0800b530 <_write_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	; (800b550 <_write_r+0x20>)
 800b534:	4604      	mov	r4, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7f6 fcd9 	bl	8001ef6 <_write>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_write_r+0x1e>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_write_r+0x1e>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	200003cc 	.word	0x200003cc

0800b554 <__assert_func>:
 800b554:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b556:	4614      	mov	r4, r2
 800b558:	461a      	mov	r2, r3
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <__assert_func+0x2c>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4605      	mov	r5, r0
 800b560:	68d8      	ldr	r0, [r3, #12]
 800b562:	b14c      	cbz	r4, 800b578 <__assert_func+0x24>
 800b564:	4b07      	ldr	r3, [pc, #28]	; (800b584 <__assert_func+0x30>)
 800b566:	9100      	str	r1, [sp, #0]
 800b568:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b56c:	4906      	ldr	r1, [pc, #24]	; (800b588 <__assert_func+0x34>)
 800b56e:	462b      	mov	r3, r5
 800b570:	f000 f81e 	bl	800b5b0 <fiprintf>
 800b574:	f000 f8ca 	bl	800b70c <abort>
 800b578:	4b04      	ldr	r3, [pc, #16]	; (800b58c <__assert_func+0x38>)
 800b57a:	461c      	mov	r4, r3
 800b57c:	e7f3      	b.n	800b566 <__assert_func+0x12>
 800b57e:	bf00      	nop
 800b580:	20000010 	.word	0x20000010
 800b584:	0800bd25 	.word	0x0800bd25
 800b588:	0800bd32 	.word	0x0800bd32
 800b58c:	0800bd60 	.word	0x0800bd60

0800b590 <_close_r>:
 800b590:	b538      	push	{r3, r4, r5, lr}
 800b592:	4d06      	ldr	r5, [pc, #24]	; (800b5ac <_close_r+0x1c>)
 800b594:	2300      	movs	r3, #0
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	602b      	str	r3, [r5, #0]
 800b59c:	f7f6 fcc7 	bl	8001f2e <_close>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d102      	bne.n	800b5aa <_close_r+0x1a>
 800b5a4:	682b      	ldr	r3, [r5, #0]
 800b5a6:	b103      	cbz	r3, 800b5aa <_close_r+0x1a>
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	bd38      	pop	{r3, r4, r5, pc}
 800b5ac:	200003cc 	.word	0x200003cc

0800b5b0 <fiprintf>:
 800b5b0:	b40e      	push	{r1, r2, r3}
 800b5b2:	b503      	push	{r0, r1, lr}
 800b5b4:	4601      	mov	r1, r0
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	4805      	ldr	r0, [pc, #20]	; (800b5d0 <fiprintf+0x20>)
 800b5ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5be:	6800      	ldr	r0, [r0, #0]
 800b5c0:	9301      	str	r3, [sp, #4]
 800b5c2:	f7ff fe07 	bl	800b1d4 <_vfiprintf_r>
 800b5c6:	b002      	add	sp, #8
 800b5c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5cc:	b003      	add	sp, #12
 800b5ce:	4770      	bx	lr
 800b5d0:	20000010 	.word	0x20000010

0800b5d4 <_fstat_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4d07      	ldr	r5, [pc, #28]	; (800b5f4 <_fstat_r+0x20>)
 800b5d8:	2300      	movs	r3, #0
 800b5da:	4604      	mov	r4, r0
 800b5dc:	4608      	mov	r0, r1
 800b5de:	4611      	mov	r1, r2
 800b5e0:	602b      	str	r3, [r5, #0]
 800b5e2:	f7f6 fcb0 	bl	8001f46 <_fstat>
 800b5e6:	1c43      	adds	r3, r0, #1
 800b5e8:	d102      	bne.n	800b5f0 <_fstat_r+0x1c>
 800b5ea:	682b      	ldr	r3, [r5, #0]
 800b5ec:	b103      	cbz	r3, 800b5f0 <_fstat_r+0x1c>
 800b5ee:	6023      	str	r3, [r4, #0]
 800b5f0:	bd38      	pop	{r3, r4, r5, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200003cc 	.word	0x200003cc

0800b5f8 <_isatty_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d06      	ldr	r5, [pc, #24]	; (800b614 <_isatty_r+0x1c>)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	f7f6 fcaf 	bl	8001f66 <_isatty>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_isatty_r+0x1a>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_isatty_r+0x1a>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	200003cc 	.word	0x200003cc

0800b618 <_lseek_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4d07      	ldr	r5, [pc, #28]	; (800b638 <_lseek_r+0x20>)
 800b61c:	4604      	mov	r4, r0
 800b61e:	4608      	mov	r0, r1
 800b620:	4611      	mov	r1, r2
 800b622:	2200      	movs	r2, #0
 800b624:	602a      	str	r2, [r5, #0]
 800b626:	461a      	mov	r2, r3
 800b628:	f7f6 fca8 	bl	8001f7c <_lseek>
 800b62c:	1c43      	adds	r3, r0, #1
 800b62e:	d102      	bne.n	800b636 <_lseek_r+0x1e>
 800b630:	682b      	ldr	r3, [r5, #0]
 800b632:	b103      	cbz	r3, 800b636 <_lseek_r+0x1e>
 800b634:	6023      	str	r3, [r4, #0]
 800b636:	bd38      	pop	{r3, r4, r5, pc}
 800b638:	200003cc 	.word	0x200003cc

0800b63c <memmove>:
 800b63c:	4288      	cmp	r0, r1
 800b63e:	b510      	push	{r4, lr}
 800b640:	eb01 0402 	add.w	r4, r1, r2
 800b644:	d902      	bls.n	800b64c <memmove+0x10>
 800b646:	4284      	cmp	r4, r0
 800b648:	4623      	mov	r3, r4
 800b64a:	d807      	bhi.n	800b65c <memmove+0x20>
 800b64c:	1e43      	subs	r3, r0, #1
 800b64e:	42a1      	cmp	r1, r4
 800b650:	d008      	beq.n	800b664 <memmove+0x28>
 800b652:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b65a:	e7f8      	b.n	800b64e <memmove+0x12>
 800b65c:	4402      	add	r2, r0
 800b65e:	4601      	mov	r1, r0
 800b660:	428a      	cmp	r2, r1
 800b662:	d100      	bne.n	800b666 <memmove+0x2a>
 800b664:	bd10      	pop	{r4, pc}
 800b666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b66a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b66e:	e7f7      	b.n	800b660 <memmove+0x24>

0800b670 <__malloc_lock>:
 800b670:	4801      	ldr	r0, [pc, #4]	; (800b678 <__malloc_lock+0x8>)
 800b672:	f7fe bde2 	b.w	800a23a <__retarget_lock_acquire_recursive>
 800b676:	bf00      	nop
 800b678:	200003c0 	.word	0x200003c0

0800b67c <__malloc_unlock>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__malloc_unlock+0x8>)
 800b67e:	f7fe bddd 	b.w	800a23c <__retarget_lock_release_recursive>
 800b682:	bf00      	nop
 800b684:	200003c0 	.word	0x200003c0

0800b688 <_realloc_r>:
 800b688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b68c:	4680      	mov	r8, r0
 800b68e:	4614      	mov	r4, r2
 800b690:	460e      	mov	r6, r1
 800b692:	b921      	cbnz	r1, 800b69e <_realloc_r+0x16>
 800b694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b698:	4611      	mov	r1, r2
 800b69a:	f7ff bba1 	b.w	800ade0 <_malloc_r>
 800b69e:	b92a      	cbnz	r2, 800b6ac <_realloc_r+0x24>
 800b6a0:	f7ff fb32 	bl	800ad08 <_free_r>
 800b6a4:	4625      	mov	r5, r4
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6ac:	f000 f835 	bl	800b71a <_malloc_usable_size_r>
 800b6b0:	4284      	cmp	r4, r0
 800b6b2:	4607      	mov	r7, r0
 800b6b4:	d802      	bhi.n	800b6bc <_realloc_r+0x34>
 800b6b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6ba:	d812      	bhi.n	800b6e2 <_realloc_r+0x5a>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4640      	mov	r0, r8
 800b6c0:	f7ff fb8e 	bl	800ade0 <_malloc_r>
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0ed      	beq.n	800b6a6 <_realloc_r+0x1e>
 800b6ca:	42bc      	cmp	r4, r7
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4631      	mov	r1, r6
 800b6d0:	bf28      	it	cs
 800b6d2:	463a      	movcs	r2, r7
 800b6d4:	f7fe fe32 	bl	800a33c <memcpy>
 800b6d8:	4631      	mov	r1, r6
 800b6da:	4640      	mov	r0, r8
 800b6dc:	f7ff fb14 	bl	800ad08 <_free_r>
 800b6e0:	e7e1      	b.n	800b6a6 <_realloc_r+0x1e>
 800b6e2:	4635      	mov	r5, r6
 800b6e4:	e7df      	b.n	800b6a6 <_realloc_r+0x1e>
	...

0800b6e8 <_read_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d07      	ldr	r5, [pc, #28]	; (800b708 <_read_r+0x20>)
 800b6ec:	4604      	mov	r4, r0
 800b6ee:	4608      	mov	r0, r1
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	602a      	str	r2, [r5, #0]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f7f6 fbe0 	bl	8001ebc <_read>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_read_r+0x1e>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_read_r+0x1e>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	200003cc 	.word	0x200003cc

0800b70c <abort>:
 800b70c:	b508      	push	{r3, lr}
 800b70e:	2006      	movs	r0, #6
 800b710:	f000 f834 	bl	800b77c <raise>
 800b714:	2001      	movs	r0, #1
 800b716:	f7f6 fbc7 	bl	8001ea8 <_exit>

0800b71a <_malloc_usable_size_r>:
 800b71a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b71e:	1f18      	subs	r0, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfbc      	itt	lt
 800b724:	580b      	ldrlt	r3, [r1, r0]
 800b726:	18c0      	addlt	r0, r0, r3
 800b728:	4770      	bx	lr

0800b72a <_raise_r>:
 800b72a:	291f      	cmp	r1, #31
 800b72c:	b538      	push	{r3, r4, r5, lr}
 800b72e:	4604      	mov	r4, r0
 800b730:	460d      	mov	r5, r1
 800b732:	d904      	bls.n	800b73e <_raise_r+0x14>
 800b734:	2316      	movs	r3, #22
 800b736:	6003      	str	r3, [r0, #0]
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	bd38      	pop	{r3, r4, r5, pc}
 800b73e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b740:	b112      	cbz	r2, 800b748 <_raise_r+0x1e>
 800b742:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b746:	b94b      	cbnz	r3, 800b75c <_raise_r+0x32>
 800b748:	4620      	mov	r0, r4
 800b74a:	f000 f831 	bl	800b7b0 <_getpid_r>
 800b74e:	462a      	mov	r2, r5
 800b750:	4601      	mov	r1, r0
 800b752:	4620      	mov	r0, r4
 800b754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b758:	f000 b818 	b.w	800b78c <_kill_r>
 800b75c:	2b01      	cmp	r3, #1
 800b75e:	d00a      	beq.n	800b776 <_raise_r+0x4c>
 800b760:	1c59      	adds	r1, r3, #1
 800b762:	d103      	bne.n	800b76c <_raise_r+0x42>
 800b764:	2316      	movs	r3, #22
 800b766:	6003      	str	r3, [r0, #0]
 800b768:	2001      	movs	r0, #1
 800b76a:	e7e7      	b.n	800b73c <_raise_r+0x12>
 800b76c:	2400      	movs	r4, #0
 800b76e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b772:	4628      	mov	r0, r5
 800b774:	4798      	blx	r3
 800b776:	2000      	movs	r0, #0
 800b778:	e7e0      	b.n	800b73c <_raise_r+0x12>
	...

0800b77c <raise>:
 800b77c:	4b02      	ldr	r3, [pc, #8]	; (800b788 <raise+0xc>)
 800b77e:	4601      	mov	r1, r0
 800b780:	6818      	ldr	r0, [r3, #0]
 800b782:	f7ff bfd2 	b.w	800b72a <_raise_r>
 800b786:	bf00      	nop
 800b788:	20000010 	.word	0x20000010

0800b78c <_kill_r>:
 800b78c:	b538      	push	{r3, r4, r5, lr}
 800b78e:	4d07      	ldr	r5, [pc, #28]	; (800b7ac <_kill_r+0x20>)
 800b790:	2300      	movs	r3, #0
 800b792:	4604      	mov	r4, r0
 800b794:	4608      	mov	r0, r1
 800b796:	4611      	mov	r1, r2
 800b798:	602b      	str	r3, [r5, #0]
 800b79a:	f7f6 fb75 	bl	8001e88 <_kill>
 800b79e:	1c43      	adds	r3, r0, #1
 800b7a0:	d102      	bne.n	800b7a8 <_kill_r+0x1c>
 800b7a2:	682b      	ldr	r3, [r5, #0]
 800b7a4:	b103      	cbz	r3, 800b7a8 <_kill_r+0x1c>
 800b7a6:	6023      	str	r3, [r4, #0]
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
 800b7aa:	bf00      	nop
 800b7ac:	200003cc 	.word	0x200003cc

0800b7b0 <_getpid_r>:
 800b7b0:	f7f6 bb62 	b.w	8001e78 <_getpid>

0800b7b4 <_init>:
 800b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b6:	bf00      	nop
 800b7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ba:	bc08      	pop	{r3}
 800b7bc:	469e      	mov	lr, r3
 800b7be:	4770      	bx	lr

0800b7c0 <_fini>:
 800b7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c2:	bf00      	nop
 800b7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7c6:	bc08      	pop	{r3}
 800b7c8:	469e      	mov	lr, r3
 800b7ca:	4770      	bx	lr
