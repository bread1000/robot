
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b42c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000127c  0800b5c0  0800b5c0  0001b5c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c83c  0800c83c  00020468  2**0
                  CONTENTS
  4 .ARM          00000008  0800c83c  0800c83c  0001c83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c844  0800c844  00020468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c844  0800c844  0001c844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c848  0800c848  0001c848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000468  20000000  0800c84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000468  0800ccb4  00020468  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800ccb4  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020468  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013851  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e33  00000000  00000000  00033ce9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001008  00000000  00000000  00036b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00037b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024675  00000000  00000000  000389e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014413  00000000  00000000  0005d05d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da8e7  00000000  00000000  00071470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014bd57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  0014bda8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000468 	.word	0x20000468
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b5a4 	.word	0x0800b5a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000046c 	.word	0x2000046c
 80001cc:	0800b5a4 	.word	0x0800b5a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800100a:	4b21      	ldr	r3, [pc, #132]	; (8001090 <MX_ADC3_Init+0x98>)
 800100c:	4a21      	ldr	r2, [pc, #132]	; (8001094 <MX_ADC3_Init+0x9c>)
 800100e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <MX_ADC3_Init+0x98>)
 8001012:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001016:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC3_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800101e:	4b1c      	ldr	r3, [pc, #112]	; (8001090 <MX_ADC3_Init+0x98>)
 8001020:	2201      	movs	r2, #1
 8001022:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001024:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC3_Init+0x98>)
 8001026:	2201      	movs	r2, #1
 8001028:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800102a:	4b19      	ldr	r3, [pc, #100]	; (8001090 <MX_ADC3_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001032:	4b17      	ldr	r3, [pc, #92]	; (8001090 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MX_ADC3_Init+0x98>)
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_ADC3_Init+0xa0>)
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103e:	4b14      	ldr	r3, [pc, #80]	; (8001090 <MX_ADC3_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <MX_ADC3_Init+0x98>)
 8001046:	2201      	movs	r2, #1
 8001048:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800104a:	4b11      	ldr	r3, [pc, #68]	; (8001090 <MX_ADC3_Init+0x98>)
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <MX_ADC3_Init+0x98>)
 8001054:	2201      	movs	r2, #1
 8001056:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001058:	480d      	ldr	r0, [pc, #52]	; (8001090 <MX_ADC3_Init+0x98>)
 800105a:	f001 fc01 	bl	8002860 <HAL_ADC_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001064:	f000 fda4 	bl	8001bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001068:	230b      	movs	r3, #11
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001070:	2307      	movs	r3, #7
 8001072:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <MX_ADC3_Init+0x98>)
 800107a:	f001 fd63 	bl	8002b44 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001084:	f000 fd94 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000484 	.word	0x20000484
 8001094:	40012200 	.word	0x40012200
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	; 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_ADC_MspInit+0xdc>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d158      	bne.n	8001170 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a26      	ldr	r2, [pc, #152]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_ADC_MspInit+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC1     ------> ADC3_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010f6:	2302      	movs	r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	481d      	ldr	r0, [pc, #116]	; (8001180 <HAL_ADC_MspInit+0xe4>)
 800110a:	f002 fd65 	bl	8003bd8 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_ADC_MspInit+0xec>)
 8001112:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001116:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800111a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800112e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001136:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800113a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001142:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001146:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001154:	480b      	ldr	r0, [pc, #44]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001156:	f002 f93d 	bl	80033d4 <HAL_DMA_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001160:	f000 fd26 	bl	8001bb0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
 800116a:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_ADC_MspInit+0xe8>)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	3728      	adds	r7, #40	; 0x28
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40012200 	.word	0x40012200
 800117c:	40023800 	.word	0x40023800
 8001180:	40020800 	.word	0x40020800
 8001184:	200004cc 	.word	0x200004cc
 8001188:	40026410 	.word	0x40026410

0800118c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_DAC_Init+0x4c>)
 800119c:	4a0f      	ldr	r2, [pc, #60]	; (80011dc <MX_DAC_Init+0x50>)
 800119e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011a2:	f002 f880 	bl	80032a6 <HAL_DAC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011ac:	f000 fd00 	bl	8001bb0 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_DAC_Init+0x4c>)
 80011c0:	f002 f8b8 	bl	8003334 <HAL_DAC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ca:	f000 fcf1 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000052c 	.word	0x2000052c
 80011dc:	40007400 	.word	0x40007400

080011e0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_DAC_MspInit+0x7c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d127      	bne.n	8001252 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <HAL_DAC_MspInit+0x80>)
 800120c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001210:	6413      	str	r3, [r2, #64]	; 0x40
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001228:	f043 0301 	orr.w	r3, r3, #1
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_DAC_MspInit+0x80>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800123a:	2310      	movs	r3, #16
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123e:	2303      	movs	r3, #3
 8001240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_DAC_MspInit+0x84>)
 800124e:	f002 fcc3 	bl	8003bd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40007400 	.word	0x40007400
 8001260:	40023800 	.word	0x40023800
 8001264:	40020000 	.word	0x40020000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a0b      	ldr	r2, [pc, #44]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001278:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_DMA_Init+0x3c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	2038      	movs	r0, #56	; 0x38
 8001290:	f001 ffd3 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001294:	2038      	movs	r0, #56	; 0x38
 8001296:	f001 ffec 	bl	8003272 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	4b49      	ldr	r3, [pc, #292]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a48      	ldr	r2, [pc, #288]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012c8:	f043 0310 	orr.w	r3, r3, #16
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b46      	ldr	r3, [pc, #280]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b42      	ldr	r3, [pc, #264]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a41      	ldr	r2, [pc, #260]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b3f      	ldr	r3, [pc, #252]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	4b3b      	ldr	r3, [pc, #236]	; (80013e8 <MX_GPIO_Init+0x140>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b38      	ldr	r3, [pc, #224]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	4b34      	ldr	r3, [pc, #208]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a33      	ldr	r2, [pc, #204]	; (80013e8 <MX_GPIO_Init+0x140>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b31      	ldr	r3, [pc, #196]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	603b      	str	r3, [r7, #0]
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b2a      	ldr	r3, [pc, #168]	; (80013e8 <MX_GPIO_Init+0x140>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	f248 0181 	movw	r1, #32897	; 0x8081
 8001350:	4826      	ldr	r0, [pc, #152]	; (80013ec <MX_GPIO_Init+0x144>)
 8001352:	f002 fddd 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001356:	2200      	movs	r2, #0
 8001358:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 800135c:	4824      	ldr	r0, [pc, #144]	; (80013f0 <MX_GPIO_Init+0x148>)
 800135e:	f002 fdd7 	bl	8003f10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001362:	2200      	movs	r2, #0
 8001364:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001368:	4822      	ldr	r0, [pc, #136]	; (80013f4 <MX_GPIO_Init+0x14c>)
 800136a:	f002 fdd1 	bl	8003f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = rec_right_Pin|rec_left_Pin;
 800136e:	2330      	movs	r3, #48	; 0x30
 8001370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4619      	mov	r1, r3
 8001380:	481d      	ldr	r0, [pc, #116]	; (80013f8 <MX_GPIO_Init+0x150>)
 8001382:	f002 fc29 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD0 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_7;
 8001386:	f248 0381 	movw	r3, #32897	; 0x8081
 800138a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	2301      	movs	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	2300      	movs	r3, #0
 8001396:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	4813      	ldr	r0, [pc, #76]	; (80013ec <MX_GPIO_Init+0x144>)
 80013a0:	f002 fc1a 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC10
                           PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013a4:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013a8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_GPIO_Init+0x148>)
 80013be:	f002 fc0b 	bl	8003bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c8:	2301      	movs	r3, #1
 80013ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	4619      	mov	r1, r3
 80013da:	4806      	ldr	r0, [pc, #24]	; (80013f4 <MX_GPIO_Init+0x14c>)
 80013dc:	f002 fbfc 	bl	8003bd8 <HAL_GPIO_Init>

}
 80013e0:	bf00      	nop
 80013e2:	3728      	adds	r7, #40	; 0x28
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020c00 	.word	0x40020c00
 80013f0:	40020800 	.word	0x40020800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40021000 	.word	0x40021000

080013fc <__io_putchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    if (ch == '\n') {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b0a      	cmp	r3, #10
 8001408:	d109      	bne.n	800141e <__io_putchar+0x22>
        uint8_t ch2 = '\r';
 800140a:	230d      	movs	r3, #13
 800140c:	73fb      	strb	r3, [r7, #15]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 800140e:	f107 010f 	add.w	r1, r7, #15
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	2201      	movs	r2, #1
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <__io_putchar+0x3c>)
 800141a:	f004 fb5c 	bl	8005ad6 <HAL_UART_Transmit>
    }

    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800141e:	1d39      	adds	r1, r7, #4
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	2201      	movs	r2, #1
 8001426:	4804      	ldr	r0, [pc, #16]	; (8001438 <__io_putchar+0x3c>)
 8001428:	f004 fb55 	bl	8005ad6 <HAL_UART_Transmit>
    return 1;
 800142c:	2301      	movs	r3, #1
}
 800142e:	4618      	mov	r0, r3
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000614 	.word	0x20000614

0800143c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	/*przerwanie od TIM 10 - co 5 sekund wysyla wiadomosc o czasie dzialania programu*/
	if(htim == &htim10)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a10      	ldr	r2, [pc, #64]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d110      	bne.n	800146e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		static uint16_t cnt = 0; //licznik sekund
		cnt+=5;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	3305      	adds	r3, #5
 8001452:	b29a      	uxth	r2, r3
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001456:	801a      	strh	r2, [r3, #0]

		printf("Czas pracy [s]: %d\n", cnt);
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800145a:	881b      	ldrh	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001460:	f006 fa10 	bl	8007884 <iprintf>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //sygnalizacja nadawania
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	480a      	ldr	r0, [pc, #40]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800146a:	f002 fd6a 	bl	8003f42 <HAL_GPIO_TogglePin>
	}

	/*przerwanie od od TIM 2 - dekodowanie IR*/
	if (htim == &htim2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d104      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		printf("TIM2 przerwanie\n");
 8001476:	4809      	ldr	r0, [pc, #36]	; (800149c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001478:	f006 fa8a 	bl	8007990 <puts>
		RC5_ResetPacket();
 800147c:	f000 fd4c 	bl	8001f18 <RC5_ResetPacket>
	}
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200005cc 	.word	0x200005cc
 800148c:	20000554 	.word	0x20000554
 8001490:	0800b5c0 	.word	0x0800b5c0
 8001494:	40020c00 	.word	0x40020c00
 8001498:	20000584 	.word	0x20000584
 800149c:	0800b5d4 	.word	0x0800b5d4

080014a0 <HAL_TIM_IC_CaptureCallback>:

/*przerwanie od od TIM 2 - dekodowanie IR*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	    ---------------------------------------------
	    It resets the InfraRed decoders packet.
	    - The Timer Overflow is set to 3.6 ms .*/

	    /* IC2 Interrupt*/
	    if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_1)
 80014a8:	4819      	ldr	r0, [pc, #100]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014aa:	f003 ff0f 	bl	80052cc <HAL_TIM_GetActiveChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d113      	bne.n	80014dc <HAL_TIM_IC_CaptureCallback+0x3c>
	    {
	    	printf("CH 1 przerwanie\n");
 80014b4:	4817      	ldr	r0, [pc, #92]	; (8001514 <HAL_TIM_IC_CaptureCallback+0x74>)
 80014b6:	f006 fa6b 	bl	8007990 <puts>
	      ICValue2 = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	4814      	ldr	r0, [pc, #80]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014be:	f003 fea3 	bl	8005208 <HAL_TIM_ReadCapturedValue>
 80014c2:	4603      	mov	r3, r0
 80014c4:	4a14      	ldr	r2, [pc, #80]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x78>)
 80014c6:	6013      	str	r3, [r2, #0]
	      /* RC5 */
	      RC5_DataSampling(ICValue2 - ICValue1 , 0);
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_TIM_IC_CaptureCallback+0x78>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f000 fd35 	bl	8001f44 <RC5_DataSampling>
	    {
	    	printf("CH 2 przerwanie\n");
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
	      RC5_DataSampling(ICValue1 , 1);
	    }
}
 80014da:	e015      	b.n	8001508 <HAL_TIM_IC_CaptureCallback+0x68>
	    else if (HAL_TIM_GetActiveChannel(&htim2) == HAL_TIM_ACTIVE_CHANNEL_2)
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014de:	f003 fef5 	bl	80052cc <HAL_TIM_GetActiveChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d10f      	bne.n	8001508 <HAL_TIM_IC_CaptureCallback+0x68>
	    	printf("CH 2 przerwanie\n");
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <HAL_TIM_IC_CaptureCallback+0x80>)
 80014ea:	f006 fa51 	bl	8007990 <puts>
	      ICValue1 =  HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 80014ee:	2104      	movs	r1, #4
 80014f0:	4807      	ldr	r0, [pc, #28]	; (8001510 <HAL_TIM_IC_CaptureCallback+0x70>)
 80014f2:	f003 fe89 	bl	8005208 <HAL_TIM_ReadCapturedValue>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014fa:	6013      	str	r3, [r2, #0]
	      RC5_DataSampling(ICValue1 , 1);
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <HAL_TIM_IC_CaptureCallback+0x7c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2101      	movs	r1, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f000 fd1e 	bl	8001f44 <RC5_DataSampling>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000584 	.word	0x20000584
 8001514:	0800b5e4 	.word	0x0800b5e4
 8001518:	20000550 	.word	0x20000550
 800151c:	2000054c 	.word	0x2000054c
 8001520:	0800b5f4 	.word	0x0800b5f4

08001524 <STOP>:

void STOP(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	speed = 0;
 8001528:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <STOP+0x34>)
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <STOP+0x34>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <STOP+0x38>)
 8001538:	f001 fed7 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800153c:	2201      	movs	r2, #1
 800153e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <STOP+0x3c>)
 8001544:	f002 fce4 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <STOP+0x3c>)
 8001550:	f002 fcde 	bl	8003f10 <HAL_GPIO_WritePin>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000544 	.word	0x20000544
 800155c:	2000052c 	.word	0x2000052c
 8001560:	40020800 	.word	0x40020800

08001564 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //przerwanie od receivera uart
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	/*podejmwoanie dzialan na podstawie odebranych danych
	oraz wpisywanie informacji zwrotnej do bufora*/
	switch( atoi((char*)&received) )
 800156c:	4851      	ldr	r0, [pc, #324]	; (80016b4 <HAL_UART_RxCpltCallback+0x150>)
 800156e:	f005 fad9 	bl	8006b24 <atoi>
 8001572:	4603      	mov	r3, r0
 8001574:	2b09      	cmp	r3, #9
 8001576:	f200 8093 	bhi.w	80016a0 <HAL_UART_RxCpltCallback+0x13c>
 800157a:	a201      	add	r2, pc, #4	; (adr r2, 8001580 <HAL_UART_RxCpltCallback+0x1c>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	080015a9 	.word	0x080015a9
 8001584:	080015bb 	.word	0x080015bb
 8001588:	080015fd 	.word	0x080015fd
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800164d 	.word	0x0800164d
 8001594:	0800165b 	.word	0x0800165b
 8001598:	08001669 	.word	0x08001669
 800159c:	08001677 	.word	0x08001677
 80015a0:	08001685 	.word	0x08001685
 80015a4:	08001693 	.word	0x08001693
	{
	case 0:
		drive=0;
 80015a8:	4b43      	ldr	r3, [pc, #268]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
		STOP();
 80015ae:	f7ff ffb9 	bl	8001524 <STOP>
		printf("Odebrano: 0\n");
 80015b2:	4842      	ldr	r0, [pc, #264]	; (80016bc <HAL_UART_RxCpltCallback+0x158>)
 80015b4:	f006 f9ec 	bl	8007990 <puts>
		break;
 80015b8:	e073      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 1:
		drive = 1;
 80015ba:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
		speed = speed + 10;
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	330a      	adds	r3, #10
 80015c6:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 80015c8:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	483c      	ldr	r0, [pc, #240]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015d2:	f002 fc9d 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	4839      	ldr	r0, [pc, #228]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015de:	f002 fc97 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f001 f918 	bl	8002818 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80015e8:	2200      	movs	r2, #0
 80015ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ee:	4835      	ldr	r0, [pc, #212]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 80015f0:	f002 fc8e 	bl	8003f10 <HAL_GPIO_WritePin>
		printf("Odebrano: 1\n");
 80015f4:	4834      	ldr	r0, [pc, #208]	; (80016c8 <HAL_UART_RxCpltCallback+0x164>)
 80015f6:	f006 f9cb 	bl	8007990 <puts>
		break;
 80015fa:	e052      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 2:
		//STOP();
		drive = 2;
 80015fc:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 80015fe:	2202      	movs	r2, #2
 8001600:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 2\n");
 8001602:	4832      	ldr	r0, [pc, #200]	; (80016cc <HAL_UART_RxCpltCallback+0x168>)
 8001604:	f006 f9c4 	bl	8007990 <puts>
		break;
 8001608:	e04b      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 3:
		speed = speed - 10;
 800160a:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3b0a      	subs	r3, #10
 8001610:	4a2b      	ldr	r2, [pc, #172]	; (80016c0 <HAL_UART_RxCpltCallback+0x15c>)
 8001612:	6013      	str	r3, [r2, #0]
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800161a:	482a      	ldr	r0, [pc, #168]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 800161c:	f002 fc78 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001626:	4827      	ldr	r0, [pc, #156]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 8001628:	f002 fc72 	bl	8003f10 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800162c:	2064      	movs	r0, #100	; 0x64
 800162e:	f001 f8f3 	bl	8002818 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001638:	4822      	ldr	r0, [pc, #136]	; (80016c4 <HAL_UART_RxCpltCallback+0x160>)
 800163a:	f002 fc69 	bl	8003f10 <HAL_GPIO_WritePin>
		drive = 3;
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001640:	2203      	movs	r2, #3
 8001642:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 3\n");
 8001644:	4822      	ldr	r0, [pc, #136]	; (80016d0 <HAL_UART_RxCpltCallback+0x16c>)
 8001646:	f006 f9a3 	bl	8007990 <puts>
		break;
 800164a:	e02a      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 4:
		//STOP();
		drive = 4;
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800164e:	2204      	movs	r2, #4
 8001650:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 4\n");
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <HAL_UART_RxCpltCallback+0x170>)
 8001654:	f006 f99c 	bl	8007990 <puts>
		break;
 8001658:	e023      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 5:
		drive = 5;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800165c:	2205      	movs	r2, #5
 800165e:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 5\n");
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <HAL_UART_RxCpltCallback+0x174>)
 8001662:	f006 f995 	bl	8007990 <puts>
		break;
 8001666:	e01c      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 6:
		//STOP();
		drive = 6;
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 800166a:	2206      	movs	r2, #6
 800166c:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 6\n");
 800166e:	481b      	ldr	r0, [pc, #108]	; (80016dc <HAL_UART_RxCpltCallback+0x178>)
 8001670:	f006 f98e 	bl	8007990 <puts>
		break;
 8001674:	e015      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 7:
		//STOP();
		drive = 7;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001678:	2207      	movs	r2, #7
 800167a:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 7\n");
 800167c:	4818      	ldr	r0, [pc, #96]	; (80016e0 <HAL_UART_RxCpltCallback+0x17c>)
 800167e:	f006 f987 	bl	8007990 <puts>
		break;
 8001682:	e00e      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 8:
		//STOP();
		drive = 8;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001686:	2208      	movs	r2, #8
 8001688:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 8\n");
 800168a:	4816      	ldr	r0, [pc, #88]	; (80016e4 <HAL_UART_RxCpltCallback+0x180>)
 800168c:	f006 f980 	bl	8007990 <puts>
		break;
 8001690:	e007      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	case 9:
		//STOP();
		drive = 9;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_UART_RxCpltCallback+0x154>)
 8001694:	2209      	movs	r2, #9
 8001696:	601a      	str	r2, [r3, #0]
		printf("Odebrano: 9\n");
 8001698:	4813      	ldr	r0, [pc, #76]	; (80016e8 <HAL_UART_RxCpltCallback+0x184>)
 800169a:	f006 f979 	bl	8007990 <puts>
		break;
 800169e:	e000      	b.n	80016a2 <HAL_UART_RxCpltCallback+0x13e>
	default:
		break;
 80016a0:	bf00      	nop
	}

	HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 80016a2:	2201      	movs	r2, #1
 80016a4:	4903      	ldr	r1, [pc, #12]	; (80016b4 <HAL_UART_RxCpltCallback+0x150>)
 80016a6:	4811      	ldr	r0, [pc, #68]	; (80016ec <HAL_UART_RxCpltCallback+0x188>)
 80016a8:	f004 faa7 	bl	8005bfa <HAL_UART_Receive_IT>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	20000004 	.word	0x20000004
 80016b8:	20000000 	.word	0x20000000
 80016bc:	0800b604 	.word	0x0800b604
 80016c0:	20000544 	.word	0x20000544
 80016c4:	40020800 	.word	0x40020800
 80016c8:	0800b610 	.word	0x0800b610
 80016cc:	0800b61c 	.word	0x0800b61c
 80016d0:	0800b628 	.word	0x0800b628
 80016d4:	0800b634 	.word	0x0800b634
 80016d8:	0800b640 	.word	0x0800b640
 80016dc:	0800b64c 	.word	0x0800b64c
 80016e0:	0800b658 	.word	0x0800b658
 80016e4:	0800b664 	.word	0x0800b664
 80016e8:	0800b670 	.word	0x0800b670
 80016ec:	20000614 	.word	0x20000614

080016f0 <PRZOD>:


void PRZOD(void){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <PRZOD+0x44>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2100      	movs	r1, #0
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <PRZOD+0x48>)
 80016fe:	f001 fdf4 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);	//1 przód
 8001702:	2201      	movs	r2, #1
 8001704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <PRZOD+0x4c>)
 800170a:	f002 fc01 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);	//2 przód
 800170e:	2201      	movs	r2, #1
 8001710:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <PRZOD+0x4c>)
 8001716:	f002 fbfb 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);	//3 przód
 800171a:	2201      	movs	r2, #1
 800171c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001720:	4807      	ldr	r0, [pc, #28]	; (8001740 <PRZOD+0x50>)
 8001722:	f002 fbf5 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);	//4 przód
 8001726:	2201      	movs	r2, #1
 8001728:	2180      	movs	r1, #128	; 0x80
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <PRZOD+0x4c>)
 800172c:	f002 fbf0 	bl	8003f10 <HAL_GPIO_WritePin>
}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20000544 	.word	0x20000544
 8001738:	2000052c 	.word	0x2000052c
 800173c:	40020800 	.word	0x40020800
 8001740:	40020000 	.word	0x40020000

08001744 <LEWA>:

void LEWA(void){
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <LEWA+0x44>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2200      	movs	r2, #0
 800174e:	2100      	movs	r1, #0
 8001750:	480e      	ldr	r0, [pc, #56]	; (800178c <LEWA+0x48>)
 8001752:	f001 fdca 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <LEWA+0x4c>)
 800175e:	f002 fbd7 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <LEWA+0x4c>)
 800176a:	f002 fbd1 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001774:	4807      	ldr	r0, [pc, #28]	; (8001794 <LEWA+0x50>)
 8001776:	f002 fbcb 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 800177a:	2200      	movs	r2, #0
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	4804      	ldr	r0, [pc, #16]	; (8001790 <LEWA+0x4c>)
 8001780:	f002 fbc6 	bl	8003f10 <HAL_GPIO_WritePin>
}
 8001784:	bf00      	nop
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000544 	.word	0x20000544
 800178c:	2000052c 	.word	0x2000052c
 8001790:	40020800 	.word	0x40020800
 8001794:	40020000 	.word	0x40020000

08001798 <PRAWA>:

void PRAWA(void){
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <PRAWA+0x44>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	2100      	movs	r1, #0
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <PRAWA+0x48>)
 80017a6:	f001 fda0 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <PRAWA+0x4c>)
 80017b2:	f002 fbad 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017bc:	4809      	ldr	r0, [pc, #36]	; (80017e4 <PRAWA+0x4c>)
 80017be:	f002 fba7 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c8:	4807      	ldr	r0, [pc, #28]	; (80017e8 <PRAWA+0x50>)
 80017ca:	f002 fba1 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 80017ce:	2201      	movs	r2, #1
 80017d0:	2180      	movs	r1, #128	; 0x80
 80017d2:	4804      	ldr	r0, [pc, #16]	; (80017e4 <PRAWA+0x4c>)
 80017d4:	f002 fb9c 	bl	8003f10 <HAL_GPIO_WritePin>
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000544 	.word	0x20000544
 80017e0:	2000052c 	.word	0x2000052c
 80017e4:	40020800 	.word	0x40020800
 80017e8:	40020000 	.word	0x40020000

080017ec <OBROT_P>:

void OBROT_P(void){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <OBROT_P+0x44>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2200      	movs	r2, #0
 80017f6:	2100      	movs	r1, #0
 80017f8:	480e      	ldr	r0, [pc, #56]	; (8001834 <OBROT_P+0x48>)
 80017fa:	f001 fd76 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);		//1 przód
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <OBROT_P+0x4c>)
 8001806:	f002 fb83 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001810:	4809      	ldr	r0, [pc, #36]	; (8001838 <OBROT_P+0x4c>)
 8001812:	f002 fb7d 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 8001816:	2200      	movs	r2, #0
 8001818:	f44f 7180 	mov.w	r1, #256	; 0x100
 800181c:	4807      	ldr	r0, [pc, #28]	; (800183c <OBROT_P+0x50>)
 800181e:	f002 fb77 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);		//4 przód
 8001822:	2201      	movs	r2, #1
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	4804      	ldr	r0, [pc, #16]	; (8001838 <OBROT_P+0x4c>)
 8001828:	f002 fb72 	bl	8003f10 <HAL_GPIO_WritePin>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000544 	.word	0x20000544
 8001834:	2000052c 	.word	0x2000052c
 8001838:	40020800 	.word	0x40020800
 800183c:	40020000 	.word	0x40020000

08001840 <OBROT_L>:

void OBROT_L(void){
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <OBROT_L+0x44>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	480e      	ldr	r0, [pc, #56]	; (8001888 <OBROT_L+0x48>)
 800184e:	f001 fd4c 	bl	80032ea <HAL_DAC_SetValue>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <OBROT_L+0x4c>)
 800185a:	f002 fb59 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);		//2 przód
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001864:	4809      	ldr	r0, [pc, #36]	; (800188c <OBROT_L+0x4c>)
 8001866:	f002 fb53 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);		//3 przód
 800186a:	2201      	movs	r2, #1
 800186c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <OBROT_L+0x50>)
 8001872:	f002 fb4d 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 8001876:	2200      	movs	r2, #0
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	4804      	ldr	r0, [pc, #16]	; (800188c <OBROT_L+0x4c>)
 800187c:	f002 fb48 	bl	8003f10 <HAL_GPIO_WritePin>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000544 	.word	0x20000544
 8001888:	2000052c 	.word	0x2000052c
 800188c:	40020800 	.word	0x40020800
 8001890:	40020000 	.word	0x40020000

08001894 <TYL>:

void TYL(void){
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
	//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, speed);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);	//1 tył
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800189e:	480b      	ldr	r0, [pc, #44]	; (80018cc <TYL+0x38>)
 80018a0:	f002 fb36 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);	//2 tył
 80018a4:	2200      	movs	r2, #0
 80018a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018aa:	4808      	ldr	r0, [pc, #32]	; (80018cc <TYL+0x38>)
 80018ac:	f002 fb30 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);	//3 tył
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <TYL+0x3c>)
 80018b8:	f002 fb2a 	bl	8003f10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);	//4 tył
 80018bc:	2200      	movs	r2, #0
 80018be:	2180      	movs	r1, #128	; 0x80
 80018c0:	4802      	ldr	r0, [pc, #8]	; (80018cc <TYL+0x38>)
 80018c2:	f002 fb25 	bl	8003f10 <HAL_GPIO_WritePin>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020000 	.word	0x40020000

080018d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d8:	f000 ff2c 	bl	8002734 <HAL_Init>
  //uint32_t DAC_OUT[100];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018dc:	f000 f8fe 	bl	8001adc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018e0:	f7ff fce2 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018e4:	f7ff fcc0 	bl	8001268 <MX_DMA_Init>
  MX_TIM10_Init();
 80018e8:	f000 fdf0 	bl	80024cc <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80018ec:	f000 fe7e 	bl	80025ec <MX_USART2_UART_Init>
  MX_DAC_Init();
 80018f0:	f7ff fc4c 	bl	800118c <MX_DAC_Init>
  MX_ADC3_Init();
 80018f4:	f7ff fb80 	bl	8000ff8 <MX_ADC3_Init>
  MX_TIM2_Init();
 80018f8:	f000 fd50 	bl	800239c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  RC5_Init();
 80018fc:	f000 f988 	bl	8001c10 <RC5_Init>

  HAL_ADC_Start_DMA(&hadc3, &battery_adc, 1); //uruchomienie konwersji ADC z DMA
 8001900:	2201      	movs	r2, #1
 8001902:	495f      	ldr	r1, [pc, #380]	; (8001a80 <main+0x1ac>)
 8001904:	485f      	ldr	r0, [pc, #380]	; (8001a84 <main+0x1b0>)
 8001906:	f000 ffef 	bl	80028e8 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim10); //wlaczenie przerwan od timera 10
 800190a:	485f      	ldr	r0, [pc, #380]	; (8001a88 <main+0x1b4>)
 800190c:	f002 ffdc 	bl	80048c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001910:	485e      	ldr	r0, [pc, #376]	; (8001a8c <main+0x1b8>)
 8001912:	f002 ffd9 	bl	80048c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001916:	2100      	movs	r1, #0
 8001918:	485c      	ldr	r0, [pc, #368]	; (8001a8c <main+0x1b8>)
 800191a:	f003 f89f 	bl	8004a5c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 800191e:	2104      	movs	r1, #4
 8001920:	485a      	ldr	r0, [pc, #360]	; (8001a8c <main+0x1b8>)
 8001922:	f003 f89b 	bl	8004a5c <HAL_TIM_IC_Start_IT>

  HAL_UART_Receive_IT(&huart2, &received, 1); //wlaczenie nasluchiwania na kanale UART
 8001926:	2201      	movs	r2, #1
 8001928:	4959      	ldr	r1, [pc, #356]	; (8001a90 <main+0x1bc>)
 800192a:	485a      	ldr	r0, [pc, #360]	; (8001a94 <main+0x1c0>)
 800192c:	f004 f965 	bl	8005bfa <HAL_UART_Receive_IT>

  //aktywacja Core2530 do pracy
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	2101      	movs	r1, #1
 8001934:	4858      	ldr	r0, [pc, #352]	; (8001a98 <main+0x1c4>)
 8001936:	f002 faeb 	bl	8003f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	2180      	movs	r1, #128	; 0x80
 800193e:	4856      	ldr	r0, [pc, #344]	; (8001a98 <main+0x1c4>)
 8001940:	f002 fae6 	bl	8003f10 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8001944:	20c8      	movs	r0, #200	; 0xc8
 8001946:	f000 ff67 	bl	8002818 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	2101      	movs	r1, #1
 800194e:	4852      	ldr	r0, [pc, #328]	; (8001a98 <main+0x1c4>)
 8001950:	f002 fade 	bl	8003f10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8001954:	2201      	movs	r2, #1
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	484f      	ldr	r0, [pc, #316]	; (8001a98 <main+0x1c4>)
 800195a:	f002 fad9 	bl	8003f10 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*-----------Odczyt stanu bterii---------------*/
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 800195e:	4b48      	ldr	r3, [pc, #288]	; (8001a80 <main+0x1ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001a9c <main+0x1c8>
 800196e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001972:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001aa0 <main+0x1cc>
 8001976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <main+0x1d0>)
 800197c:	edc3 7a00 	vstr	s15, [r3]
		  printf("prawy\n");
	  }
*/
	  /*-------RC5-------*/
	  /* if data do not received */
	  if(0x00 == RC5FrameReceived)
 8001980:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <main+0x1d4>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <main+0xbc>
	  {
		  //printf("Ni ma\n");
	  }else{
		  /* decode the rc5 frame */
		  RC5_Decode(&RC5_FRAME);
 800198a:	4848      	ldr	r0, [pc, #288]	; (8001aac <main+0x1d8>)
 800198c:	f000 fa4c 	bl	8001e28 <RC5_Decode>
	  }

	  /* w switchu nastepuje wykonywanie instrukcji wedlug odebranych z komputera danych
	  wartosc zmiennej drive jest nadawana w przerwaniu UART po odebraniu komunikatu*/
	  switch(drive)
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <main+0x1dc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d871      	bhi.n	8001a7c <main+0x1a8>
 8001998:	a201      	add	r2, pc, #4	; (adr r2, 80019a0 <main+0xcc>)
 800199a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199e:	bf00      	nop
 80019a0:	080019c9 	.word	0x080019c9
 80019a4:	080019db 	.word	0x080019db
 80019a8:	080019ef 	.word	0x080019ef
 80019ac:	08001a01 	.word	0x08001a01
 80019b0:	08001a15 	.word	0x08001a15
 80019b4:	08001a27 	.word	0x08001a27
 80019b8:	08001a35 	.word	0x08001a35
 80019bc:	08001a47 	.word	0x08001a47
 80019c0:	08001a59 	.word	0x08001a59
 80019c4:	08001a6b 	.word	0x08001a6b
	  {
	  case 0:
		  STOP();
 80019c8:	f7ff fdac 	bl	8001524 <STOP>
		  //nadawanie informacji przez UART
		  printf("STOP\n");
 80019cc:	4839      	ldr	r0, [pc, #228]	; (8001ab4 <main+0x1e0>)
 80019ce:	f005 ffdf 	bl	8007990 <puts>
		  drive = 10;
 80019d2:	4b37      	ldr	r3, [pc, #220]	; (8001ab0 <main+0x1dc>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	601a      	str	r2, [r3, #0]
		  break;
 80019d8:	e051      	b.n	8001a7e <main+0x1aa>
	  case 1:
		  //Zmiana wartości wypełnienia (+10)
		  printf("Wypelnienie: %d\n", speed);
 80019da:	4b37      	ldr	r3, [pc, #220]	; (8001ab8 <main+0x1e4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4836      	ldr	r0, [pc, #216]	; (8001abc <main+0x1e8>)
 80019e2:	f005 ff4f 	bl	8007884 <iprintf>
		  drive = 10;
 80019e6:	4b32      	ldr	r3, [pc, #200]	; (8001ab0 <main+0x1dc>)
 80019e8:	220a      	movs	r2, #10
 80019ea:	601a      	str	r2, [r3, #0]
		  break;
 80019ec:	e047      	b.n	8001a7e <main+0x1aa>
	  case 2:
		  PRZOD(); /*funkcja nadajaca keirunek jazdy robota do przodu*/
 80019ee:	f7ff fe7f 	bl	80016f0 <PRZOD>
		  printf("Jazda do przodu\n");
 80019f2:	4833      	ldr	r0, [pc, #204]	; (8001ac0 <main+0x1ec>)
 80019f4:	f005 ffcc 	bl	8007990 <puts>
		  drive = 10;
 80019f8:	4b2d      	ldr	r3, [pc, #180]	; (8001ab0 <main+0x1dc>)
 80019fa:	220a      	movs	r2, #10
 80019fc:	601a      	str	r2, [r3, #0]
		  break;
 80019fe:	e03e      	b.n	8001a7e <main+0x1aa>
	  case 3:
		  //Zmiana wartości wypełnienia (-10)
		  printf("Wypelnienie: %d\n", speed);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <main+0x1e4>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4619      	mov	r1, r3
 8001a06:	482d      	ldr	r0, [pc, #180]	; (8001abc <main+0x1e8>)
 8001a08:	f005 ff3c 	bl	8007884 <iprintf>
		  drive = 10;
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <main+0x1dc>)
 8001a0e:	220a      	movs	r2, #10
 8001a10:	601a      	str	r2, [r3, #0]
		  break;
 8001a12:	e034      	b.n	8001a7e <main+0x1aa>
	  case 4:
		  LEWA(); /*funkcja nadajaca keirunek jazdy robota w lewo*/
 8001a14:	f7ff fe96 	bl	8001744 <LEWA>
		  printf("Jazda w lewo\n");
 8001a18:	482a      	ldr	r0, [pc, #168]	; (8001ac4 <main+0x1f0>)
 8001a1a:	f005 ffb9 	bl	8007990 <puts>
		  drive = 10;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <main+0x1dc>)
 8001a20:	220a      	movs	r2, #10
 8001a22:	601a      	str	r2, [r3, #0]
		  break;
 8001a24:	e02b      	b.n	8001a7e <main+0x1aa>
	  case 5:
		  //speed=50; /*ustawienie wypelnienia na wartosc poczatkowa (50)*/
		  //printf("Wypelnienie: 50\n");
		  printf("NIC\n");
 8001a26:	4828      	ldr	r0, [pc, #160]	; (8001ac8 <main+0x1f4>)
 8001a28:	f005 ffb2 	bl	8007990 <puts>
		  drive = 10;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <main+0x1dc>)
 8001a2e:	220a      	movs	r2, #10
 8001a30:	601a      	str	r2, [r3, #0]
		  break;
 8001a32:	e024      	b.n	8001a7e <main+0x1aa>
	  case 6:
		  PRAWA(); /*funkcja nadajaca keirunek jazdy robota w prawo*/
 8001a34:	f7ff feb0 	bl	8001798 <PRAWA>
		  printf("Jazda w prawo\n");
 8001a38:	4824      	ldr	r0, [pc, #144]	; (8001acc <main+0x1f8>)
 8001a3a:	f005 ffa9 	bl	8007990 <puts>
		  drive = 10;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <main+0x1dc>)
 8001a40:	220a      	movs	r2, #10
 8001a42:	601a      	str	r2, [r3, #0]
		  break;
 8001a44:	e01b      	b.n	8001a7e <main+0x1aa>
	  case 7:
		  OBROT_L(); /*funkcja powodujaca rotacje robota w lewo*/
 8001a46:	f7ff fefb 	bl	8001840 <OBROT_L>
		  printf("Obrot w lewo\n");
 8001a4a:	4821      	ldr	r0, [pc, #132]	; (8001ad0 <main+0x1fc>)
 8001a4c:	f005 ffa0 	bl	8007990 <puts>
		  drive = 10;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <main+0x1dc>)
 8001a52:	220a      	movs	r2, #10
 8001a54:	601a      	str	r2, [r3, #0]
		  break;
 8001a56:	e012      	b.n	8001a7e <main+0x1aa>
	  case 8:
		  TYL(); /*funkcja nadajaca keirunek jazdy robota do tylu*/
 8001a58:	f7ff ff1c 	bl	8001894 <TYL>
		  printf("Jazda do tylu\n");
 8001a5c:	481d      	ldr	r0, [pc, #116]	; (8001ad4 <main+0x200>)
 8001a5e:	f005 ff97 	bl	8007990 <puts>
		  drive = 10;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <main+0x1dc>)
 8001a64:	220a      	movs	r2, #10
 8001a66:	601a      	str	r2, [r3, #0]
		  break;
 8001a68:	e009      	b.n	8001a7e <main+0x1aa>
	  case 9:
		  OBROT_P(); /*funkcja powodujaca rotacje robota w prawo*/
 8001a6a:	f7ff febf 	bl	80017ec <OBROT_P>
		  printf("Obrot w prawo\n");
 8001a6e:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <main+0x204>)
 8001a70:	f005 ff8e 	bl	8007990 <puts>
		  drive = 10;
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <main+0x1dc>)
 8001a76:	220a      	movs	r2, #10
 8001a78:	601a      	str	r2, [r3, #0]
		  break;
 8001a7a:	e000      	b.n	8001a7e <main+0x1aa>
	  default:
		  break;
 8001a7c:	bf00      	nop
	  battery_voltage = 3.3f * battery_adc / (4096.0f-1);	//przeliczenie wartości napięcia zasilania
 8001a7e:	e76e      	b.n	800195e <main+0x8a>
 8001a80:	20000540 	.word	0x20000540
 8001a84:	20000484 	.word	0x20000484
 8001a88:	200005cc 	.word	0x200005cc
 8001a8c:	20000584 	.word	0x20000584
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000614 	.word	0x20000614
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40533333 	.word	0x40533333
 8001aa0:	457ff000 	.word	0x457ff000
 8001aa4:	20000548 	.word	0x20000548
 8001aa8:	20000556 	.word	0x20000556
 8001aac:	2000057c 	.word	0x2000057c
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	0800b67c 	.word	0x0800b67c
 8001ab8:	20000544 	.word	0x20000544
 8001abc:	0800b684 	.word	0x0800b684
 8001ac0:	0800b698 	.word	0x0800b698
 8001ac4:	0800b6a8 	.word	0x0800b6a8
 8001ac8:	0800b6b8 	.word	0x0800b6b8
 8001acc:	0800b6bc 	.word	0x0800b6bc
 8001ad0:	0800b6cc 	.word	0x0800b6cc
 8001ad4:	0800b6dc 	.word	0x0800b6dc
 8001ad8:	0800b6ec 	.word	0x0800b6ec

08001adc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b094      	sub	sp, #80	; 0x50
 8001ae0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ae2:	f107 0320 	add.w	r3, r7, #32
 8001ae6:	2230      	movs	r2, #48	; 0x30
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 f848 	bl	8006b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <SystemClock_Config+0xcc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b22      	ldr	r3, [pc, #136]	; (8001bac <SystemClock_Config+0xd0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a21      	ldr	r2, [pc, #132]	; (8001bac <SystemClock_Config+0xd0>)
 8001b26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <SystemClock_Config+0xd0>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b34:	607b      	str	r3, [r7, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b40:	2310      	movs	r3, #16
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b44:	2302      	movs	r3, #2
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b4c:	2308      	movs	r3, #8
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001b50:	23a0      	movs	r3, #160	; 0xa0
 8001b52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b54:	2302      	movs	r3, #2
 8001b56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b58:	2304      	movs	r3, #4
 8001b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	4618      	mov	r0, r3
 8001b62:	f002 fa09 	bl	8003f78 <HAL_RCC_OscConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b6c:	f000 f820 	bl	8001bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b70:	230f      	movs	r3, #15
 8001b72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b74:	2302      	movs	r3, #2
 8001b76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b7c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001b80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2105      	movs	r1, #5
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f002 fc6a 	bl	8004468 <HAL_RCC_ClockConfig>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b9a:	f000 f809 	bl	8001bb0 <Error_Handler>
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3750      	adds	r7, #80	; 0x50
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40007000 	.word	0x40007000

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	e7fe      	b.n	8001bb8 <Error_Handler+0x8>
	...

08001bbc <TIM_GetCounterCLKValue>:
//static void RC5_Decode(RC5_Frame_t *rc5_frame);

/* Private_Functions ---------------------------------------------------------*/

uint32_t TIM_GetCounterCLKValue(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
  uint32_t apbprescaler = 0, apbfrequency = 0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  uint32_t timprescaler = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]

  /* Get the clock prescaler of APB1 */
  apbprescaler = ((RCC->CFGR >> 8) & 0x7);
 8001bce:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <TIM_GetCounterCLKValue+0x50>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0a1b      	lsrs	r3, r3, #8
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	60fb      	str	r3, [r7, #12]
  apbfrequency = HAL_RCC_GetPCLK1Freq();
 8001bda:	f002 fdfd 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8001bde:	60b8      	str	r0, [r7, #8]
  timprescaler = TIM_PSC_PSC;
 8001be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be4:	607b      	str	r3, [r7, #4]

  /* If APBx clock div >= 4 */
  if (apbprescaler >= 4)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d906      	bls.n	8001bfa <TIM_GetCounterCLKValue+0x3e>
  {
    return ((apbfrequency * 2) / (timprescaler + 1));
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	005a      	lsls	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	e004      	b.n	8001c04 <TIM_GetCounterCLKValue+0x48>
  }
  else
  {
    return (apbfrequency / (timprescaler + 1));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	fbb2 f3f3 	udiv	r3, r2, r3
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800

08001c10 <RC5_Init>:
  * @brief  Initialize the RC5 decoder module ( Time range)
  * @param  None
  * @retval None
  */
void RC5_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b092      	sub	sp, #72	; 0x48
 8001c14:	af00      	add	r7, sp, #0
  TIM_IC_InitTypeDef tim_ic_init;
  TIM_SlaveConfigTypeDef tim_slave_conf;
  TIM_MasterConfigTypeDef tim_master_conf;

  /*  Clock Configuration for TIMER */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]
 8001c1a:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <RC5_Init+0x1f0>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a78      	ldr	r2, [pc, #480]	; (8001e00 <RC5_Init+0x1f0>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b76      	ldr	r3, [pc, #472]	; (8001e00 <RC5_Init+0x1f0>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  htim2.Instance = TIM2;
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <RC5_Init+0x1f4>)
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c38:	601a      	str	r2, [r3, #0]

  // Enable Button GPIO clock
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b70      	ldr	r3, [pc, #448]	; (8001e00 <RC5_Init+0x1f0>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <RC5_Init+0x1f0>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b6d      	ldr	r3, [pc, #436]	; (8001e00 <RC5_Init+0x1f0>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]

  //Pin configuration: input floating
  gpio_init_struct.Pin = GPIO_PIN_0;
 8001c56:	2301      	movs	r3, #1
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_struct.Mode = GPIO_MODE_AF_OD;
 8001c5a:	2312      	movs	r3, #18
 8001c5c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_struct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_struct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c62:	2302      	movs	r3, #2
 8001c64:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_struct.Alternate = GPIO_AF1_TIM2;
 8001c66:	2301      	movs	r3, #1
 8001c68:	647b      	str	r3, [r7, #68]	; 0x44
  HAL_GPIO_Init(GPIOA, &gpio_init_struct);
 8001c6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4865      	ldr	r0, [pc, #404]	; (8001e08 <RC5_Init+0x1f8>)
 8001c72:	f001 ffb1 	bl	8003bd8 <HAL_GPIO_Init>



  /* Enable the TIMx global Interrupt */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001c76:	2201      	movs	r2, #1
 8001c78:	2100      	movs	r1, #0
 8001c7a:	201c      	movs	r0, #28
 8001c7c:	f001 fadd 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c80:	201c      	movs	r0, #28
 8001c82:	f001 faf6 	bl	8003272 <HAL_NVIC_EnableIRQ>

  /* Timer Clock */
  TIMCLKValueKHz = TIM_GetCounterCLKValue() / 1000;
 8001c86:	f7ff ff99 	bl	8001bbc <TIM_GetCounterCLKValue>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a5f      	ldr	r2, [pc, #380]	; (8001e0c <RC5_Init+0x1fc>)
 8001c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c92:	099b      	lsrs	r3, r3, #6
 8001c94:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <RC5_Init+0x200>)
 8001c96:	6013      	str	r3, [r2, #0]
  RC5TimeOut = TIMCLKValueKHz * RC5_TIME_OUT_US / 1000;
 8001c98:	4b5d      	ldr	r3, [pc, #372]	; (8001e10 <RC5_Init+0x200>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	4a59      	ldr	r2, [pc, #356]	; (8001e0c <RC5_Init+0x1fc>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	099b      	lsrs	r3, r3, #6
 8001cac:	4a59      	ldr	r2, [pc, #356]	; (8001e14 <RC5_Init+0x204>)
 8001cae:	6013      	str	r3, [r2, #0]

  htim2.Init.ClockDivision = 0;
 8001cb0:	4b54      	ldr	r3, [pc, #336]	; (8001e04 <RC5_Init+0x1f4>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = 0;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <RC5_Init+0x1f4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 8001cbc:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <RC5_Init+0x1f4>)
 8001cbe:	224f      	movs	r2, #79	; 0x4f
 8001cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = 0;
 8001cc2:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <RC5_Init+0x1f4>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	605a      	str	r2, [r3, #4]
  htim2.Init.RepetitionCounter = 0;
 8001cc8:	4b4e      	ldr	r3, [pc, #312]	; (8001e04 <RC5_Init+0x1f4>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	615a      	str	r2, [r3, #20]
  HAL_TIM_IC_Init(&htim2);
 8001cce:	484d      	ldr	r0, [pc, #308]	; (8001e04 <RC5_Init+0x1f4>)
 8001cd0:	f002 fe6a 	bl	80049a8 <HAL_TIM_IC_Init>

  /* TIM configuration */
  tim_ic_init.ICPolarity = TIM_ICPOLARITY_RISING;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  tim_ic_init.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  tim_ic_init.ICPrescaler = TIM_ICPSC_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  tim_ic_init.ICFilter = 0x0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_TIM_IC_ConfigChannel(&htim2, &tim_ic_init, TIM_CHANNEL_2);
 8001ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4845      	ldr	r0, [pc, #276]	; (8001e04 <RC5_Init+0x1f4>)
 8001cee:	f003 f8e5 	bl	8004ebc <HAL_TIM_IC_ConfigChannel>

  tim_ic_init.ICPolarity = TIM_ICPOLARITY_FALLING;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  tim_ic_init.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_TIM_IC_ConfigChannel(&htim2, &tim_ic_init, TIM_CHANNEL_1);
 8001cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfe:	2200      	movs	r2, #0
 8001d00:	4619      	mov	r1, r3
 8001d02:	4840      	ldr	r0, [pc, #256]	; (8001e04 <RC5_Init+0x1f4>)
 8001d04:	f003 f8da 	bl	8004ebc <HAL_TIM_IC_ConfigChannel>

  tim_slave_conf.InputTrigger = TIM_TS_TI1F_ED;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	617b      	str	r3, [r7, #20]
  tim_slave_conf.SlaveMode = TIM_SLAVEMODE_RESET;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	613b      	str	r3, [r7, #16]
  tim_slave_conf.TriggerPolarity = TIM_TRIGGERPOLARITY_FALLING;
 8001d10:	2302      	movs	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
  tim_slave_conf.TriggerFilter = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	623b      	str	r3, [r7, #32]
  HAL_TIM_SlaveConfigSynchro(&htim2, &tim_slave_conf);
 8001d18:	f107 0310 	add.w	r3, r7, #16
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4839      	ldr	r0, [pc, #228]	; (8001e04 <RC5_Init+0x1f4>)
 8001d20:	f003 fa2f 	bl	8005182 <HAL_TIM_SlaveConfigSynchro>

  /* Enable the Master/Slave Mode */
  tim_master_conf.MasterSlaveMode = TIM_SMCR_MSM;
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	60fb      	str	r3, [r7, #12]
  tim_master_conf.MasterOutputTrigger = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &tim_master_conf);
 8001d2c:	f107 0308 	add.w	r3, r7, #8
 8001d30:	4619      	mov	r1, r3
 8001d32:	4834      	ldr	r0, [pc, #208]	; (8001e04 <RC5_Init+0x1f4>)
 8001d34:	f003 fdf2 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>

  /* Configures the TIM Update Request Interrupt source: counter overflow */
  __HAL_TIM_URS_ENABLE(&htim2);
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <RC5_Init+0x1f4>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <RC5_Init+0x1f4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0204 	orr.w	r2, r2, #4
 8001d46:	601a      	str	r2, [r3, #0]

  /* Clear update flag */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_FLAG_UPDATE);
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <RC5_Init+0x1f4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f06f 0201 	mvn.w	r2, #1
 8001d50:	611a      	str	r2, [r3, #16]

  /* Enable TIM Update Event Interrupt Request */
  /* Enable the CC2/CC1 Interrupt Request */
  __HAL_TIM_ENABLE_IT(&htim2, TIM_FLAG_UPDATE | TIM_IT_CC1 | TIM_IT_CC2);
 8001d52:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <RC5_Init+0x1f4>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	4b2a      	ldr	r3, [pc, #168]	; (8001e04 <RC5_Init+0x1f4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0207 	orr.w	r2, r2, #7
 8001d60:	60da      	str	r2, [r3, #12]

  /* Enable the timer */
  __HAL_TIM_ENABLE(&htim2);
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <RC5_Init+0x1f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b26      	ldr	r3, [pc, #152]	; (8001e04 <RC5_Init+0x1f4>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0201 	orr.w	r2, r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1) != HAL_OK)
 8001d72:	2100      	movs	r1, #0
 8001d74:	4823      	ldr	r0, [pc, #140]	; (8001e04 <RC5_Init+0x1f4>)
 8001d76:	f002 fe71 	bl	8004a5c <HAL_TIM_IC_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d000      	beq.n	8001d82 <RC5_Init+0x172>
  {
    /* Starting Error */
    while (1)
 8001d80:	e7fe      	b.n	8001d80 <RC5_Init+0x170>
    {}
  }

  if (HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2) != HAL_OK)
 8001d82:	2104      	movs	r1, #4
 8001d84:	481f      	ldr	r0, [pc, #124]	; (8001e04 <RC5_Init+0x1f4>)
 8001d86:	f002 fe69 	bl	8004a5c <HAL_TIM_IC_Start_IT>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d000      	beq.n	8001d92 <RC5_Init+0x182>
  {
    /* Starting Error */
    while (1)
 8001d90:	e7fe      	b.n	8001d90 <RC5_Init+0x180>
    {}
  }

  /* Bit time range */
  RC5MinT = (RC5_T_US - RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001d92:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <RC5_Init+0x200>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <RC5_Init+0x1fc>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <RC5_Init+0x208>)
 8001da8:	6013      	str	r3, [r2, #0]
  RC5MaxT = (RC5_T_US + RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001daa:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <RC5_Init+0x200>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <RC5_Init+0x1fc>)
 8001db8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbc:	099b      	lsrs	r3, r3, #6
 8001dbe:	4a17      	ldr	r2, [pc, #92]	; (8001e1c <RC5_Init+0x20c>)
 8001dc0:	6013      	str	r3, [r2, #0]
  RC5Min2T = (2 * RC5_T_US - RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001dc2:	4b13      	ldr	r3, [pc, #76]	; (8001e10 <RC5_Init+0x200>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001dca:	fb02 f303 	mul.w	r3, r2, r3
 8001dce:	4a0f      	ldr	r2, [pc, #60]	; (8001e0c <RC5_Init+0x1fc>)
 8001dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd4:	099b      	lsrs	r3, r3, #6
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <RC5_Init+0x210>)
 8001dd8:	6013      	str	r3, [r2, #0]
  RC5Max2T = (2 * RC5_T_US + RC5_T_TOLERANCE_US) * TIMCLKValueKHz / 1000;
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <RC5_Init+0x200>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f640 0234 	movw	r2, #2100	; 0x834
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a09      	ldr	r2, [pc, #36]	; (8001e0c <RC5_Init+0x1fc>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	099b      	lsrs	r3, r3, #6
 8001dee:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <RC5_Init+0x214>)
 8001df0:	6013      	str	r3, [r2, #0]

  /* Default state */
  RC5_ResetPacket();
 8001df2:	f000 f891 	bl	8001f18 <RC5_ResetPacket>
}
 8001df6:	bf00      	nop
 8001df8:	3748      	adds	r7, #72	; 0x48
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	20000584 	.word	0x20000584
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	10624dd3 	.word	0x10624dd3
 8001e10:	20000570 	.word	0x20000570
 8001e14:	20000574 	.word	0x20000574
 8001e18:	20000560 	.word	0x20000560
 8001e1c:	20000564 	.word	0x20000564
 8001e20:	20000568 	.word	0x20000568
 8001e24:	2000056c 	.word	0x2000056c

08001e28 <RC5_Decode>:
  *         is a new IR frame already received.
  * @param  pIRFrame: pointer to RC5_Frame_t structure that contains the
  *         the IR protocol fields (Address, Command,...).
  */
void RC5_Decode(RC5_Frame_t *pIRFrame)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* If frame received */
  if (RC5FrameReceived != NO)
 8001e30:	4b32      	ldr	r3, [pc, #200]	; (8001efc <RC5_Decode+0xd4>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d05b      	beq.n	8001ef2 <RC5_Decode+0xca>
  {
    RC5_Data = RC5TmpPacket.data ;
 8001e3a:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <RC5_Decode+0xd8>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <RC5_Decode+0xdc>)
 8001e44:	601a      	str	r2, [r3, #0]
    /* RC5 frame field decoding */
    pIRFrame->FieldBit = (RC5TmpPacket.data >> 12) & 0x1;
 8001e46:	4b2e      	ldr	r3, [pc, #184]	; (8001f00 <RC5_Decode+0xd8>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	0b1b      	lsrs	r3, r3, #12
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	701a      	strb	r2, [r3, #0]
    pIRFrame->ToggleBit = (RC5TmpPacket.data >> 11) & 0x1;
 8001e5c:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <RC5_Decode+0xd8>)
 8001e5e:	881b      	ldrh	r3, [r3, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	705a      	strb	r2, [r3, #1]
    pIRFrame->Address = (RC5TmpPacket.data >> 6) & 0x1F;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <RC5_Decode+0xd8>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	099b      	lsrs	r3, r3, #6
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f003 031f 	and.w	r3, r3, #31
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	709a      	strb	r2, [r3, #2]
    pIRFrame->Command = (uint8_t)((RC5TmpPacket.data) & (uint8_t) 0x3F);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <RC5_Decode+0xd8>)
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	70da      	strb	r2, [r3, #3]

    /* Check if command ranges between 64 to 127:Upper Field */
    if (((RC5TmpPacket.data >> 12) & 0x1) != 0x01)
 8001e9a:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <RC5_Decode+0xd8>)
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	0b1b      	lsrs	r3, r3, #12
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d007      	beq.n	8001ebc <RC5_Decode+0x94>
    {
      pIRFrame->Command =  (1 << 6) | pIRFrame->Command;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	78db      	ldrb	r3, [r3, #3]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	70da      	strb	r2, [r3, #3]
    }
    /* Default state */
    RC5FrameReceived = NO;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <RC5_Decode+0xd4>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
    RC5_ResetPacket();
 8001ec2:	f000 f829 	bl	8001f18 <RC5_ResetPacket>
    BSP_LCD_SetFont(&Font20);
    BSP_LCD_DisplayStringAtLine(6, (uint8_t*)aRC5Commands[pIRFrame->Command]);
    BSP_LCD_DisplayStringAtLine(7, (uint8_t*)aRC5Devices[pIRFrame->Address]);
    BSP_LCD_SetFont(&Font24);
*/
    printf("Command: %p\n", (uint8_t*)aRC5Commands[pIRFrame->Command]);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	78db      	ldrb	r3, [r3, #3]
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <RC5_Decode+0xe0>)
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <RC5_Decode+0xe4>)
 8001ed8:	f005 fcd4 	bl	8007884 <iprintf>
    printf("Address: %p\n", (uint8_t*)aRC5Devices[pIRFrame->Address]);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	789b      	ldrb	r3, [r3, #2]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <RC5_Decode+0xe8>)
 8001ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eea:	4619      	mov	r1, r3
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <RC5_Decode+0xec>)
 8001eee:	f005 fcc9 	bl	8007884 <iprintf>
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000556 	.word	0x20000556
 8001f00:	20000558 	.word	0x20000558
 8001f04:	20000578 	.word	0x20000578
 8001f08:	20000088 	.word	0x20000088
 8001f0c:	0800c344 	.word	0x0800c344
 8001f10:	20000008 	.word	0x20000008
 8001f14:	0800c354 	.word	0x0800c354

08001f18 <RC5_ResetPacket>:
  * @brief  Set the incoming packet structure to default state.
  * @param  None
  * @retval None
  */
void RC5_ResetPacket(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  RC5TmpPacket.data = 0;
 8001f1c:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <RC5_ResetPacket+0x28>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	801a      	strh	r2, [r3, #0]
  RC5TmpPacket.bitCount = RC5_PACKET_BIT_COUNT - 1;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <RC5_ResetPacket+0x28>)
 8001f24:	220c      	movs	r2, #12
 8001f26:	711a      	strb	r2, [r3, #4]
  RC5TmpPacket.lastBit = RC5_ONE;
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <RC5_ResetPacket+0x28>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	70da      	strb	r2, [r3, #3]
  RC5TmpPacket.status = RC5_PACKET_STATUS_EMPTY;
 8001f2e:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <RC5_ResetPacket+0x28>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	709a      	strb	r2, [r3, #2]
}
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000558 	.word	0x20000558

08001f44 <RC5_DataSampling>:
  * @param  rawPulseLength: low/high pulse duration
  * @param  edge: '1' for Rising  or '0' for falling edge
  * @retval None
  */
void RC5_DataSampling(uint32_t rawPulseLength, uint32_t edge)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint8_t pulse;
  RC5_lastBit_t tmp_bit;

  /* Decode the pulse length in protocol units */
  pulse = RC5_GetPulseLength(rawPulseLength);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f84a 	bl	8001fe8 <RC5_GetPulseLength>
 8001f54:	4603      	mov	r3, r0
 8001f56:	73fb      	strb	r3, [r7, #15]

  /* On Rising Edge */
  if (edge == 1)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d115      	bne.n	8001f8a <RC5_DataSampling+0x46>
  {
    if (pulse <= RC5_2T_TIME)
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d80f      	bhi.n	8001f84 <RC5_DataSampling+0x40>
    {
      /* Bit determination by the rising edge */
      tmp_bit = RC5_logicTableRisingEdge[RC5TmpPacket.lastBit][pulse];
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <RC5_DataSampling+0x98>)
 8001f66:	78db      	ldrb	r3, [r3, #3]
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	491c      	ldr	r1, [pc, #112]	; (8001fe0 <RC5_DataSampling+0x9c>)
 8001f70:	0052      	lsls	r2, r2, #1
 8001f72:	440a      	add	r2, r1
 8001f74:	4413      	add	r3, r2
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	73bb      	strb	r3, [r7, #14]
      RC5_modifyLastBit (tmp_bit);
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 f85f 	bl	8002040 <RC5_modifyLastBit>
      {
        RC5_ResetPacket();
      }
    }
  }
}
 8001f82:	e027      	b.n	8001fd4 <RC5_DataSampling+0x90>
      RC5_ResetPacket();
 8001f84:	f7ff ffc8 	bl	8001f18 <RC5_ResetPacket>
}
 8001f88:	e024      	b.n	8001fd4 <RC5_DataSampling+0x90>
    if (RC5TmpPacket.status & RC5_PACKET_STATUS_EMPTY)
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <RC5_DataSampling+0x98>)
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <RC5_DataSampling+0x66>
      RC5TmpPacket.status &= (uint8_t)~RC5_PACKET_STATUS_EMPTY;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <RC5_DataSampling+0x98>)
 8001f9a:	789b      	ldrb	r3, [r3, #2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <RC5_DataSampling+0x98>)
 8001fa6:	709a      	strb	r2, [r3, #2]
}
 8001fa8:	e014      	b.n	8001fd4 <RC5_DataSampling+0x90>
      if (pulse <= RC5_2T_TIME)
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d80f      	bhi.n	8001fd0 <RC5_DataSampling+0x8c>
        tmp_bit = RC5_logicTableFallingEdge[RC5TmpPacket.lastBit][pulse];
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <RC5_DataSampling+0x98>)
 8001fb2:	78db      	ldrb	r3, [r3, #3]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	490a      	ldr	r1, [pc, #40]	; (8001fe4 <RC5_DataSampling+0xa0>)
 8001fbc:	0052      	lsls	r2, r2, #1
 8001fbe:	440a      	add	r2, r1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	73bb      	strb	r3, [r7, #14]
        RC5_modifyLastBit (tmp_bit);
 8001fc6:	7bbb      	ldrb	r3, [r7, #14]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 f839 	bl	8002040 <RC5_modifyLastBit>
}
 8001fce:	e001      	b.n	8001fd4 <RC5_DataSampling+0x90>
        RC5_ResetPacket();
 8001fd0:	f7ff ffa2 	bl	8001f18 <RC5_ResetPacket>
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000558 	.word	0x20000558
 8001fe0:	0800c364 	.word	0x0800c364
 8001fe4:	0800c368 	.word	0x0800c368

08001fe8 <RC5_GetPulseLength>:
  * @brief  Convert raw pulse length expressed in timer ticks to protocol bit times.
  * @param  pulseLength:pulse duration
  * @retval bit time value
  */
static uint8_t RC5_GetPulseLength (uint32_t pulseLength)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  /* Valid bit time */
  if ((pulseLength > RC5MinT) && (pulseLength < RC5MaxT))
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <RC5_GetPulseLength+0x48>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d906      	bls.n	8002008 <RC5_GetPulseLength+0x20>
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <RC5_GetPulseLength+0x4c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	d201      	bcs.n	8002008 <RC5_GetPulseLength+0x20>
  {
    /* We've found the length */
    return (RC5_1T_TIME); /* Return the correct value */
 8002004:	2300      	movs	r3, #0
 8002006:	e00c      	b.n	8002022 <RC5_GetPulseLength+0x3a>
  }
  else if ((pulseLength > RC5Min2T) && (pulseLength < RC5Max2T))
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <RC5_GetPulseLength+0x50>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	429a      	cmp	r2, r3
 8002010:	d906      	bls.n	8002020 <RC5_GetPulseLength+0x38>
 8002012:	4b0a      	ldr	r3, [pc, #40]	; (800203c <RC5_GetPulseLength+0x54>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	429a      	cmp	r2, r3
 800201a:	d201      	bcs.n	8002020 <RC5_GetPulseLength+0x38>
  {
    /* We've found the length */
    return (RC5_2T_TIME);/* Return the correct value */
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <RC5_GetPulseLength+0x3a>
  }
  return RC5_WRONG_TIME;/* Error */
 8002020:	23ff      	movs	r3, #255	; 0xff
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	20000560 	.word	0x20000560
 8002034:	20000564 	.word	0x20000564
 8002038:	20000568 	.word	0x20000568
 800203c:	2000056c 	.word	0x2000056c

08002040 <RC5_modifyLastBit>:
  * @brief  perform checks if the last bit was not incorrect.
  * @param  bit: where bit can be  RC5_NAN or RC5_INV or RC5_ZER or RC5_ONE
  * @retval None
  */
static void RC5_modifyLastBit(RC5_lastBit_t bit)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if (bit != RC5_NAN)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d010      	beq.n	8002072 <RC5_modifyLastBit+0x32>
  {
    if (RC5TmpPacket.lastBit != RC5_INV)
 8002050:	4b0a      	ldr	r3, [pc, #40]	; (800207c <RC5_modifyLastBit+0x3c>)
 8002052:	78db      	ldrb	r3, [r3, #3]
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b03      	cmp	r3, #3
 8002058:	d009      	beq.n	800206e <RC5_modifyLastBit+0x2e>
    {
      /* Restore the last bit */
      RC5TmpPacket.lastBit = bit;
 800205a:	4a08      	ldr	r2, [pc, #32]	; (800207c <RC5_modifyLastBit+0x3c>)
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	70d3      	strb	r3, [r2, #3]

      /* Insert one bit into the RC5 Packet */
      RC5_WriteBit(RC5TmpPacket.lastBit);
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <RC5_modifyLastBit+0x3c>)
 8002062:	78db      	ldrb	r3, [r3, #3]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f80a 	bl	8002080 <RC5_WriteBit>
    else
    {
      RC5_ResetPacket();
    }
  }
}
 800206c:	e001      	b.n	8002072 <RC5_modifyLastBit+0x32>
      RC5_ResetPacket();
 800206e:	f7ff ff53 	bl	8001f18 <RC5_ResetPacket>
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000558 	.word	0x20000558

08002080 <RC5_WriteBit>:
  * @brief  Insert one bit into the final data word.
  * @param  bitVal: bit value 'RC5_ONE' or 'RC5_ZER'
  * @retval None
  */
static void RC5_WriteBit(uint8_t bitVal)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]
  /* First convert RC5 symbols to ones and zeros */
  if (bitVal == RC5_ONE)
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d102      	bne.n	8002096 <RC5_WriteBit+0x16>
  {
    bitVal = 1;
 8002090:	2301      	movs	r3, #1
 8002092:	71fb      	strb	r3, [r7, #7]
 8002094:	e008      	b.n	80020a8 <RC5_WriteBit+0x28>
  }
  else if (bitVal == RC5_ZER)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <RC5_WriteBit+0x22>
  {
    bitVal = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	71fb      	strb	r3, [r7, #7]
 80020a0:	e002      	b.n	80020a8 <RC5_WriteBit+0x28>
  }
  else
  {
    RC5_ResetPacket();
 80020a2:	f7ff ff39 	bl	8001f18 <RC5_ResetPacket>
    return;
 80020a6:	e01f      	b.n	80020e8 <RC5_WriteBit+0x68>
  }

  /* Write this particular bit to data field */
  RC5TmpPacket.data |=  bitVal;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <RC5_WriteBit+0x70>)
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <RC5_WriteBit+0x70>)
 80020b8:	801a      	strh	r2, [r3, #0]

  /* Test the bit number determined */
  if (RC5TmpPacket.bitCount != 0)  /* If this is not the last bit */
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <RC5_WriteBit+0x70>)
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00e      	beq.n	80020e2 <RC5_WriteBit+0x62>
  {
    /* Shift the data field */
    RC5TmpPacket.data = RC5TmpPacket.data << 1;
 80020c4:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <RC5_WriteBit+0x70>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	b29a      	uxth	r2, r3
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <RC5_WriteBit+0x70>)
 80020d0:	801a      	strh	r2, [r3, #0]
    /* And decrement the bitCount */
    RC5TmpPacket.bitCount--;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <RC5_WriteBit+0x70>)
 80020d4:	791b      	ldrb	r3, [r3, #4]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <RC5_WriteBit+0x70>)
 80020de:	711a      	strb	r2, [r3, #4]
 80020e0:	e002      	b.n	80020e8 <RC5_WriteBit+0x68>
  }
  else
  {
    RC5FrameReceived = YES;
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <RC5_WriteBit+0x74>)
 80020e4:	2201      	movs	r2, #1
 80020e6:	701a      	strb	r2, [r3, #0]
  }
}
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000558 	.word	0x20000558
 80020f4:	20000556 	.word	0x20000556

080020f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <HAL_MspInit+0x4c>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <HAL_MspInit+0x4c>)
 8002108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <HAL_MspInit+0x4c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002116:	607b      	str	r3, [r7, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	603b      	str	r3, [r7, #0]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_MspInit+0x4c>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_MspInit+0x4c>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_MspInit+0x4c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	603b      	str	r3, [r7, #0]
 8002134:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800

08002148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800214c:	e7fe      	b.n	800214c <NMI_Handler+0x4>

0800214e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002152:	e7fe      	b.n	8002152 <HardFault_Handler+0x4>

08002154 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002158:	e7fe      	b.n	8002158 <MemManage_Handler+0x4>

0800215a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800215a:	b480      	push	{r7}
 800215c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800215e:	e7fe      	b.n	800215e <BusFault_Handler+0x4>

08002160 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002164:	e7fe      	b.n	8002164 <UsageFault_Handler+0x4>

08002166 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002194:	f000 fb20 	bl	80027d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80021a2:	f002 fd83 	bl	8004cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200005cc 	.word	0x200005cc

080021b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021b4:	4802      	ldr	r0, [pc, #8]	; (80021c0 <TIM2_IRQHandler+0x10>)
 80021b6:	f002 fd79 	bl	8004cac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000584 	.word	0x20000584

080021c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <USART2_IRQHandler+0x10>)
 80021ca:	f003 fd47 	bl	8005c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000614 	.word	0x20000614

080021d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA2_Stream0_IRQHandler+0x10>)
 80021de:	f001 fa91 	bl	8003704 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200004cc 	.word	0x200004cc

080021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
	return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_kill>:

int _kill(int pid, int sig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002206:	f004 fc91 	bl	8006b2c <__errno>
 800220a:	4603      	mov	r3, r0
 800220c:	2216      	movs	r2, #22
 800220e:	601a      	str	r2, [r3, #0]
	return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_exit>:

void _exit (int status)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe7 	bl	80021fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800222e:	e7fe      	b.n	800222e <_exit+0x12>

08002230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e00a      	b.n	8002258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002242:	f3af 8000 	nop.w
 8002246:	4601      	mov	r1, r0
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	60ba      	str	r2, [r7, #8]
 800224e:	b2ca      	uxtb	r2, r1
 8002250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	3301      	adds	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	dbf0      	blt.n	8002242 <_read+0x12>
	}

return len;
 8002260:	687b      	ldr	r3, [r7, #4]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b086      	sub	sp, #24
 800226e:	af00      	add	r7, sp, #0
 8002270:	60f8      	str	r0, [r7, #12]
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e009      	b.n	8002290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	1c5a      	adds	r2, r3, #1
 8002280:	60ba      	str	r2, [r7, #8]
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f8b9 	bl	80013fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf1      	blt.n	800227c <_write+0x12>
	}
	return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_close>:

int _close(int file)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
	return -1;
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ca:	605a      	str	r2, [r3, #4]
	return 0;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_isatty>:

int _isatty(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	return 1;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
	return 0;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f004 fbf6 	bl	8006b2c <__errno>
 8002340:	4603      	mov	r3, r0
 8002342:	220c      	movs	r2, #12
 8002344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20020000 	.word	0x20020000
 800236c:	00000400 	.word	0x00000400
 8002370:	20000580 	.word	0x20000580
 8002374:	20000670 	.word	0x20000670

08002378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <SystemInit+0x20>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	4a05      	ldr	r2, [pc, #20]	; (8002398 <SystemInit+0x20>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b090      	sub	sp, #64	; 0x40
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	609a      	str	r2, [r3, #8]
 80023ae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023b0:	f107 031c 	add.w	r3, r7, #28
 80023b4:	2200      	movs	r2, #0
 80023b6:	601a      	str	r2, [r3, #0]
 80023b8:	605a      	str	r2, [r3, #4]
 80023ba:	609a      	str	r2, [r3, #8]
 80023bc:	60da      	str	r2, [r3, #12]
 80023be:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023d6:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80023de:	4b3a      	ldr	r3, [pc, #232]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e4:	4b38      	ldr	r3, [pc, #224]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 79;
 80023ea:	4b37      	ldr	r3, [pc, #220]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023ec:	224f      	movs	r2, #79	; 0x4f
 80023ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b35      	ldr	r3, [pc, #212]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023f6:	4b34      	ldr	r3, [pc, #208]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023fc:	4832      	ldr	r0, [pc, #200]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80023fe:	f002 fa13 	bl	8004828 <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002408:	f7ff fbd2 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002412:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002416:	4619      	mov	r1, r3
 8002418:	482b      	ldr	r0, [pc, #172]	; (80024c8 <MX_TIM2_Init+0x12c>)
 800241a:	f002 fdeb 	bl	8004ff4 <HAL_TIM_ConfigClockSource>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002424:	f7ff fbc4 	bl	8001bb0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002428:	4827      	ldr	r0, [pc, #156]	; (80024c8 <MX_TIM2_Init+0x12c>)
 800242a:	f002 fabd 	bl	80049a8 <HAL_TIM_IC_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002434:	f7ff fbbc 	bl	8001bb0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002438:	2304      	movs	r3, #4
 800243a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800243c:	2340      	movs	r3, #64	; 0x40
 800243e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002440:	2300      	movs	r3, #0
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	481e      	ldr	r0, [pc, #120]	; (80024c8 <MX_TIM2_Init+0x12c>)
 8002450:	f002 fe97 	bl	8005182 <HAL_TIM_SlaveConfigSynchro>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 800245a:	f7ff fba9 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800245e:	2320      	movs	r3, #32
 8002460:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002462:	2380      	movs	r3, #128	; 0x80
 8002464:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4816      	ldr	r0, [pc, #88]	; (80024c8 <MX_TIM2_Init+0x12c>)
 800246e:	f003 fa55 	bl	800591c <HAL_TIMEx_MasterConfigSynchronization>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8002478:	f7ff fb9a 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800247c:	2302      	movs	r3, #2
 800247e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002480:	2301      	movs	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002484:	2300      	movs	r3, #0
 8002486:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	2200      	movs	r2, #0
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <MX_TIM2_Init+0x12c>)
 8002494:	f002 fd12 	bl	8004ebc <HAL_TIM_IC_ConfigChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800249e:	f7ff fb87 	bl	8001bb0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80024a6:	2302      	movs	r3, #2
 80024a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80024aa:	1d3b      	adds	r3, r7, #4
 80024ac:	2204      	movs	r2, #4
 80024ae:	4619      	mov	r1, r3
 80024b0:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_TIM2_Init+0x12c>)
 80024b2:	f002 fd03 	bl	8004ebc <HAL_TIM_IC_ConfigChannel>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
 80024bc:	f7ff fb78 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024c0:	bf00      	nop
 80024c2:	3740      	adds	r7, #64	; 0x40
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20000584 	.word	0x20000584

080024cc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_TIM10_Init+0x40>)
 80024d2:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <MX_TIM10_Init+0x44>)
 80024d4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <MX_TIM10_Init+0x40>)
 80024d8:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024dc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_TIM10_Init+0x40>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_TIM10_Init+0x40>)
 80024e6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80024ea:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ec:	4b07      	ldr	r3, [pc, #28]	; (800250c <MX_TIM10_Init+0x40>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_TIM10_Init+0x40>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	; (800250c <MX_TIM10_Init+0x40>)
 80024fa:	f002 f995 	bl	8004828 <HAL_TIM_Base_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002504:	f7ff fb54 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200005cc 	.word	0x200005cc
 8002510:	40014400 	.word	0x40014400

08002514 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d134      	bne.n	80025a0 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b26      	ldr	r3, [pc, #152]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a21      	ldr	r2, [pc, #132]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800256e:	2301      	movs	r3, #1
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002572:	2302      	movs	r3, #2
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800257e:	2301      	movs	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	4619      	mov	r1, r3
 8002588:	4816      	ldr	r0, [pc, #88]	; (80025e4 <HAL_TIM_Base_MspInit+0xd0>)
 800258a:	f001 fb25 	bl	8003bd8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800258e:	2200      	movs	r2, #0
 8002590:	2100      	movs	r1, #0
 8002592:	201c      	movs	r0, #28
 8002594:	f000 fe51 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002598:	201c      	movs	r0, #28
 800259a:	f000 fe6a 	bl	8003272 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800259e:	e01a      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xc2>
  else if(tim_baseHandle->Instance==TIM10)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_TIM_Base_MspInit+0xd4>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d115      	bne.n	80025d6 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60bb      	str	r3, [r7, #8]
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 80025b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_TIM_Base_MspInit+0xcc>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 2, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2102      	movs	r1, #2
 80025ca:	2019      	movs	r0, #25
 80025cc:	f000 fe35 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025d0:	2019      	movs	r0, #25
 80025d2:	f000 fe4e 	bl	8003272 <HAL_NVIC_EnableIRQ>
}
 80025d6:	bf00      	nop
 80025d8:	3728      	adds	r7, #40	; 0x28
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000
 80025e8:	40014400 	.word	0x40014400

080025ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 80025f2:	4a12      	ldr	r2, [pc, #72]	; (800263c <MX_USART2_UART_Init+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 80025f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 800260c:	2200      	movs	r2, #0
 800260e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 8002612:	220c      	movs	r2, #12
 8002614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 8002618:	2200      	movs	r2, #0
 800261a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 800261e:	2200      	movs	r2, #0
 8002620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002622:	4805      	ldr	r0, [pc, #20]	; (8002638 <MX_USART2_UART_Init+0x4c>)
 8002624:	f003 fa0a 	bl	8005a3c <HAL_UART_Init>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800262e:	f7ff fabf 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000614 	.word	0x20000614
 800263c:	40004400 	.word	0x40004400

08002640 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08a      	sub	sp, #40	; 0x28
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	605a      	str	r2, [r3, #4]
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	60da      	str	r2, [r3, #12]
 8002656:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_UART_MspInit+0x94>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d133      	bne.n	80026ca <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_UART_MspInit+0x98>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	4a1b      	ldr	r2, [pc, #108]	; (80026d8 <HAL_UART_MspInit+0x98>)
 800266c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002670:	6413      	str	r3, [r2, #64]	; 0x40
 8002672:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_UART_MspInit+0x98>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b15      	ldr	r3, [pc, #84]	; (80026d8 <HAL_UART_MspInit+0x98>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_UART_MspInit+0x98>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_UART_MspInit+0x98>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800269a:	2360      	movs	r3, #96	; 0x60
 800269c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269e:	2302      	movs	r3, #2
 80026a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a6:	2303      	movs	r3, #3
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026aa:	2307      	movs	r3, #7
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ae:	f107 0314 	add.w	r3, r7, #20
 80026b2:	4619      	mov	r1, r3
 80026b4:	4809      	ldr	r0, [pc, #36]	; (80026dc <HAL_UART_MspInit+0x9c>)
 80026b6:	f001 fa8f 	bl	8003bd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	2103      	movs	r1, #3
 80026be:	2026      	movs	r0, #38	; 0x26
 80026c0:	f000 fdbb 	bl	800323a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80026c4:	2026      	movs	r0, #38	; 0x26
 80026c6:	f000 fdd4 	bl	8003272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026ca:	bf00      	nop
 80026cc:	3728      	adds	r7, #40	; 0x28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40004400 	.word	0x40004400
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40020c00 	.word	0x40020c00

080026e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002718 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026e6:	490e      	ldr	r1, [pc, #56]	; (8002720 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e8:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ec:	e002      	b.n	80026f4 <LoopCopyDataInit>

080026ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026f2:	3304      	adds	r3, #4

080026f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f8:	d3f9      	bcc.n	80026ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026fc:	4c0b      	ldr	r4, [pc, #44]	; (800272c <LoopFillZerobss+0x26>)
  movs r3, #0
 80026fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002700:	e001      	b.n	8002706 <LoopFillZerobss>

08002702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002704:	3204      	adds	r2, #4

08002706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002708:	d3fb      	bcc.n	8002702 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800270a:	f7ff fe35 	bl	8002378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800270e:	f004 fa13 	bl	8006b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002712:	f7ff f8df 	bl	80018d4 <main>
  bx  lr    
 8002716:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002718:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800271c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002720:	20000468 	.word	0x20000468
  ldr r2, =_sidata
 8002724:	0800c84c 	.word	0x0800c84c
  ldr r2, =_sbss
 8002728:	20000468 	.word	0x20000468
  ldr r4, =_ebss
 800272c:	2000066c 	.word	0x2000066c

08002730 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002730:	e7fe      	b.n	8002730 <ADC_IRQHandler>
	...

08002734 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002738:	4b0e      	ldr	r3, [pc, #56]	; (8002774 <HAL_Init+0x40>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0d      	ldr	r2, [pc, #52]	; (8002774 <HAL_Init+0x40>)
 800273e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002742:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002744:	4b0b      	ldr	r3, [pc, #44]	; (8002774 <HAL_Init+0x40>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_Init+0x40>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002750:	4b08      	ldr	r3, [pc, #32]	; (8002774 <HAL_Init+0x40>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a07      	ldr	r2, [pc, #28]	; (8002774 <HAL_Init+0x40>)
 8002756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800275a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800275c:	2003      	movs	r0, #3
 800275e:	f000 fd61 	bl	8003224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f808 	bl	8002778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002768:	f7ff fcc6 	bl	80020f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40023c00 	.word	0x40023c00

08002778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_InitTick+0x54>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <HAL_InitTick+0x58>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	4619      	mov	r1, r3
 800278a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002792:	fbb2 f3f3 	udiv	r3, r2, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fd79 	bl	800328e <HAL_SYSTICK_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00e      	b.n	80027c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d80a      	bhi.n	80027c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ac:	2200      	movs	r2, #0
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	f04f 30ff 	mov.w	r0, #4294967295
 80027b4:	f000 fd41 	bl	800323a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b8:	4a06      	ldr	r2, [pc, #24]	; (80027d4 <HAL_InitTick+0x5c>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	e000      	b.n	80027c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	20000288 	.word	0x20000288
 80027d0:	20000290 	.word	0x20000290
 80027d4:	2000028c 	.word	0x2000028c

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	; (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	; (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000290 	.word	0x20000290
 80027fc:	20000658 	.word	0x20000658

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000658 	.word	0x20000658

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000290 	.word	0x20000290

08002860 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e033      	b.n	80028de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7fe fc0c 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b00      	cmp	r3, #0
 800289c:	d118      	bne.n	80028d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80028a6:	f023 0302 	bic.w	r3, r3, #2
 80028aa:	f043 0202 	orr.w	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fa68 	bl	8002d88 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f023 0303 	bic.w	r3, r3, #3
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40
 80028ce:	e001      	b.n	80028d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_ADC_Start_DMA+0x1e>
 8002902:	2302      	movs	r3, #2
 8002904:	e0e9      	b.n	8002ada <HAL_ADC_Start_DMA+0x1f2>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b01      	cmp	r3, #1
 800291a:	d018      	beq.n	800294e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800292c:	4b6d      	ldr	r3, [pc, #436]	; (8002ae4 <HAL_ADC_Start_DMA+0x1fc>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a6d      	ldr	r2, [pc, #436]	; (8002ae8 <HAL_ADC_Start_DMA+0x200>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	0c9a      	lsrs	r2, r3, #18
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002940:	e002      	b.n	8002948 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	3b01      	subs	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f9      	bne.n	8002942 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800295c:	d107      	bne.n	800296e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	2b01      	cmp	r3, #1
 800297a:	f040 80a1 	bne.w	8002ac0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800299c:	2b00      	cmp	r3, #0
 800299e:	d007      	beq.n	80029b0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029bc:	d106      	bne.n	80029cc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f023 0206 	bic.w	r2, r3, #6
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
 80029ca:	e002      	b.n	80029d2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029da:	4b44      	ldr	r3, [pc, #272]	; (8002aec <HAL_ADC_Start_DMA+0x204>)
 80029dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	4a43      	ldr	r2, [pc, #268]	; (8002af0 <HAL_ADC_Start_DMA+0x208>)
 80029e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4a42      	ldr	r2, [pc, #264]	; (8002af4 <HAL_ADC_Start_DMA+0x20c>)
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4a41      	ldr	r2, [pc, #260]	; (8002af8 <HAL_ADC_Start_DMA+0x210>)
 80029f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	334c      	adds	r3, #76	; 0x4c
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f000 fd7e 	bl	8003530 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d12a      	bne.n	8002a96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <HAL_ADC_Start_DMA+0x214>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d015      	beq.n	8002a76 <HAL_ADC_Start_DMA+0x18e>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2c      	ldr	r2, [pc, #176]	; (8002b00 <HAL_ADC_Start_DMA+0x218>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d105      	bne.n	8002a60 <HAL_ADC_Start_DMA+0x178>
 8002a54:	4b25      	ldr	r3, [pc, #148]	; (8002aec <HAL_ADC_Start_DMA+0x204>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 031f 	and.w	r3, r3, #31
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00a      	beq.n	8002a76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <HAL_ADC_Start_DMA+0x21c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d136      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
 8002a6a:	4b20      	ldr	r3, [pc, #128]	; (8002aec <HAL_ADC_Start_DMA+0x204>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d130      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d129      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	e020      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a18      	ldr	r2, [pc, #96]	; (8002afc <HAL_ADC_Start_DMA+0x214>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d11b      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d114      	bne.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002abc:	609a      	str	r2, [r3, #8]
 8002abe:	e00b      	b.n	8002ad8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f043 0210 	orr.w	r2, r3, #16
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	f043 0201 	orr.w	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	20000288 	.word	0x20000288
 8002ae8:	431bde83 	.word	0x431bde83
 8002aec:	40012300 	.word	0x40012300
 8002af0:	08002f81 	.word	0x08002f81
 8002af4:	0800303b 	.word	0x0800303b
 8002af8:	08003057 	.word	0x08003057
 8002afc:	40012000 	.word	0x40012000
 8002b00:	40012100 	.word	0x40012100
 8002b04:	40012200 	.word	0x40012200

08002b08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x1c>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e105      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x228>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d925      	bls.n	8002bbc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68d9      	ldr	r1, [r3, #12]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4613      	mov	r3, r2
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	3b1e      	subs	r3, #30
 8002b86:	2207      	movs	r2, #7
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	400a      	ands	r2, r1
 8002b94:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68d9      	ldr	r1, [r3, #12]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4403      	add	r3, r0
 8002bae:	3b1e      	subs	r3, #30
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	e022      	b.n	8002c02 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6919      	ldr	r1, [r3, #16]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	2207      	movs	r2, #7
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	400a      	ands	r2, r1
 8002bde:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4403      	add	r3, r0
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b06      	cmp	r3, #6
 8002c08:	d824      	bhi.n	8002c54 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	3b05      	subs	r3, #5
 8002c1c:	221f      	movs	r2, #31
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	3b05      	subs	r3, #5
 8002c46:	fa00 f203 	lsl.w	r2, r0, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34
 8002c52:	e04c      	b.n	8002cee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b0c      	cmp	r3, #12
 8002c5a:	d824      	bhi.n	8002ca6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3b23      	subs	r3, #35	; 0x23
 8002c6e:	221f      	movs	r2, #31
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43da      	mvns	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	3b23      	subs	r3, #35	; 0x23
 8002c98:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca4:	e023      	b.n	8002cee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b41      	subs	r3, #65	; 0x41
 8002cb8:	221f      	movs	r2, #31
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	43da      	mvns	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	3b41      	subs	r3, #65	; 0x41
 8002ce2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cee:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_ADC_ConfigChannel+0x234>)
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a21      	ldr	r2, [pc, #132]	; (8002d7c <HAL_ADC_ConfigChannel+0x238>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d109      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1cc>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b12      	cmp	r3, #18
 8002d02:	d105      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <HAL_ADC_ConfigChannel+0x238>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d123      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x21e>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b10      	cmp	r3, #16
 8002d20:	d003      	beq.n	8002d2a <HAL_ADC_ConfigChannel+0x1e6>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b11      	cmp	r3, #17
 8002d28:	d11b      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2b10      	cmp	r3, #16
 8002d3c:	d111      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_ADC_ConfigChannel+0x23c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_ADC_ConfigChannel+0x240>)
 8002d44:	fba2 2303 	umull	r2, r3, r2, r3
 8002d48:	0c9a      	lsrs	r2, r3, #18
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d54:	e002      	b.n	8002d5c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f9      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	40012300 	.word	0x40012300
 8002d7c:	40012000 	.word	0x40012000
 8002d80:	20000288 	.word	0x20000288
 8002d84:	431bde83 	.word	0x431bde83

08002d88 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d90:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <ADC_Init+0x1f0>)
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6859      	ldr	r1, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	021a      	lsls	r2, r3, #8
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6859      	ldr	r1, [r3, #4]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6899      	ldr	r1, [r3, #8]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	4a58      	ldr	r2, [pc, #352]	; (8002f7c <ADC_Init+0x1f4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d022      	beq.n	8002e66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e00f      	b.n	8002e86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 0202 	bic.w	r2, r2, #2
 8002e94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	7e1b      	ldrb	r3, [r3, #24]
 8002ea0:	005a      	lsls	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d01b      	beq.n	8002eec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ec2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ed2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	035a      	lsls	r2, r3, #13
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	e007      	b.n	8002efc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	051a      	lsls	r2, r3, #20
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	6899      	ldr	r1, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f3e:	025a      	lsls	r2, r3, #9
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6899      	ldr	r1, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	029a      	lsls	r2, r3, #10
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	609a      	str	r2, [r3, #8]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40012300 	.word	0x40012300
 8002f7c:	0f000001 	.word	0x0f000001

08002f80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d13c      	bne.n	8003014 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d12b      	bne.n	800300c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d127      	bne.n	800300c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d006      	beq.n	8002fd8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d119      	bne.n	800300c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0220 	bic.w	r2, r2, #32
 8002fe6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f7ff fd7b 	bl	8002b08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003012:	e00e      	b.n	8003032 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	f003 0310 	and.w	r3, r3, #16
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fd85 	bl	8002b30 <HAL_ADC_ErrorCallback>
}
 8003026:	e004      	b.n	8003032 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
}
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b084      	sub	sp, #16
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f7ff fd67 	bl	8002b1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003062:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	f043 0204 	orr.w	r2, r3, #4
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff fd5a 	bl	8002b30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800307c:	bf00      	nop
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	; (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	; (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	; (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	; (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	; 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f0:	d301      	bcc.n	80031f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00f      	b.n	8003216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f6:	4a0a      	ldr	r2, [pc, #40]	; (8003220 <SysTick_Config+0x40>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fe:	210f      	movs	r1, #15
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f7ff ff8e 	bl	8003124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <SysTick_Config+0x40>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	; (8003220 <SysTick_Config+0x40>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff29 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324c:	f7ff ff3e 	bl	80030cc <__NVIC_GetPriorityGrouping>
 8003250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f7ff ff8e 	bl	8003178 <NVIC_EncodePriority>
 800325c:	4602      	mov	r2, r0
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff5d 	bl	8003124 <__NVIC_SetPriority>
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff31 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffa2 	bl	80031e0 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e014      	b.n	80032e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	791b      	ldrb	r3, [r3, #4]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7fd ff89 	bl	80011e0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2202      	movs	r2, #2
 80032d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b087      	sub	sp, #28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d105      	bne.n	8003314 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	3308      	adds	r3, #8
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e004      	b.n	800331e <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	3314      	adds	r3, #20
 800331c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	461a      	mov	r2, r3
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	371c      	adds	r7, #28
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	795b      	ldrb	r3, [r3, #5]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_DAC_ConfigChannel+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e03c      	b.n	80033c6 <HAL_DAC_ConfigChannel+0x92>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2202      	movs	r2, #2
 8003356:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f003 0310 	and.w	r3, r3, #16
 8003366:	f640 72fe 	movw	r2, #4094	; 0xffe
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4013      	ands	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4313      	orrs	r3, r2
 8003380:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	697a      	ldr	r2, [r7, #20]
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	22c0      	movs	r2, #192	; 0xc0
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff fa0e 	bl	8002800 <HAL_GetTick>
 80033e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e099      	b.n	8003524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0201 	bic.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003410:	e00f      	b.n	8003432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003412:	f7ff f9f5 	bl	8002800 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b05      	cmp	r3, #5
 800341e:	d908      	bls.n	8003432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e078      	b.n	8003524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1e8      	bne.n	8003412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4b38      	ldr	r3, [pc, #224]	; (800352c <HAL_DMA_Init+0x158>)
 800344c:	4013      	ands	r3, r2
 800344e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800345e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a1b      	ldr	r3, [r3, #32]
 800347c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800347e:	697a      	ldr	r2, [r7, #20]
 8003480:	4313      	orrs	r3, r2
 8003482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	4313      	orrs	r3, r2
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f023 0307 	bic.w	r3, r3, #7
 80034b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d117      	bne.n	80034f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	697a      	ldr	r2, [r7, #20]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00e      	beq.n	80034f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 fb01 	bl	8003ae0 <DMA_CheckFifoParam>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2240      	movs	r2, #64	; 0x40
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034f2:	2301      	movs	r3, #1
 80034f4:	e016      	b.n	8003524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fab8 	bl	8003a74 <DMA_CalcBaseAndBitshift>
 8003504:	4603      	mov	r3, r0
 8003506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	223f      	movs	r2, #63	; 0x3f
 800350e:	409a      	lsls	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	f010803f 	.word	0xf010803f

08003530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
 800353c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_DMA_Start_IT+0x26>
 8003552:	2302      	movs	r3, #2
 8003554:	e040      	b.n	80035d8 <HAL_DMA_Start_IT+0xa8>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12f      	bne.n	80035ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 fa4a 	bl	8003a18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0216 	orr.w	r2, r2, #22
 800359e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035ee:	f7ff f907 	bl	8002800 <HAL_GetTick>
 80035f2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e052      	b.n	80036b8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_Abort+0x62>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0201 	bic.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003662:	e013      	b.n	800368c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003664:	f7ff f8cc 	bl	8002800 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	2b05      	cmp	r3, #5
 8003670:	d90c      	bls.n	800368c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2203      	movs	r2, #3
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e015      	b.n	80036b8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e4      	bne.n	8003664 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369e:	223f      	movs	r2, #63	; 0x3f
 80036a0:	409a      	lsls	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b02      	cmp	r3, #2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e00c      	b.n	80036f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003710:	4b8e      	ldr	r3, [pc, #568]	; (800394c <HAL_DMA_IRQHandler+0x248>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a8e      	ldr	r2, [pc, #568]	; (8003950 <HAL_DMA_IRQHandler+0x24c>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0a9b      	lsrs	r3, r3, #10
 800371c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003722:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800372e:	2208      	movs	r2, #8
 8003730:	409a      	lsls	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01a      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d013      	beq.n	8003770 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0204 	bic.w	r2, r2, #4
 8003756:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	2208      	movs	r2, #8
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	2201      	movs	r2, #1
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d012      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003792:	2201      	movs	r2, #1
 8003794:	409a      	lsls	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379e:	f043 0202 	orr.w	r2, r3, #2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	2204      	movs	r2, #4
 80037ac:	409a      	lsls	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d012      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00b      	beq.n	80037dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2204      	movs	r2, #4
 80037ca:	409a      	lsls	r2, r3
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d4:	f043 0204 	orr.w	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e0:	2210      	movs	r2, #16
 80037e2:	409a      	lsls	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4013      	ands	r3, r2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d043      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d03c      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2210      	movs	r2, #16
 8003800:	409a      	lsls	r2, r3
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d018      	beq.n	8003846 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d108      	bne.n	8003834 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d024      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
 8003832:	e01f      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4798      	blx	r3
 8003844:	e016      	b.n	8003874 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003850:	2b00      	cmp	r3, #0
 8003852:	d107      	bne.n	8003864 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f022 0208 	bic.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	2220      	movs	r2, #32
 800387a:	409a      	lsls	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4013      	ands	r3, r2
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 808f 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 8087 	beq.w	80039a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2220      	movs	r2, #32
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d136      	bne.n	800391c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0216 	bic.w	r2, r2, #22
 80038bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695a      	ldr	r2, [r3, #20]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d103      	bne.n	80038de <HAL_DMA_IRQHandler+0x1da>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0208 	bic.w	r2, r2, #8
 80038ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	223f      	movs	r2, #63	; 0x3f
 80038f4:	409a      	lsls	r2, r3
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	2b00      	cmp	r3, #0
 8003910:	d07e      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
        }
        return;
 800391a:	e079      	b.n	8003a10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d01d      	beq.n	8003966 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10d      	bne.n	8003954 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	2b00      	cmp	r3, #0
 800393e:	d031      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	4798      	blx	r3
 8003948:	e02c      	b.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
 800394a:	bf00      	nop
 800394c:	20000288 	.word	0x20000288
 8003950:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d023      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
 8003964:	e01e      	b.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10f      	bne.n	8003994 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0210 	bic.w	r2, r2, #16
 8003982:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d032      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d022      	beq.n	80039fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2205      	movs	r2, #5
 80039bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 0201 	bic.w	r2, r2, #1
 80039ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	3301      	adds	r3, #1
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d307      	bcc.n	80039ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f2      	bne.n	80039d0 <HAL_DMA_IRQHandler+0x2cc>
 80039ea:	e000      	b.n	80039ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80039ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
 8003a0e:	e000      	b.n	8003a12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a10:	bf00      	nop
    }
  }
}
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	2b40      	cmp	r3, #64	; 0x40
 8003a44:	d108      	bne.n	8003a58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a56:	e007      	b.n	8003a68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	60da      	str	r2, [r3, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	3b10      	subs	r3, #16
 8003a84:	4a14      	ldr	r2, [pc, #80]	; (8003ad8 <DMA_CalcBaseAndBitshift+0x64>)
 8003a86:	fba2 2303 	umull	r2, r3, r2, r3
 8003a8a:	091b      	lsrs	r3, r3, #4
 8003a8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a8e:	4a13      	ldr	r2, [pc, #76]	; (8003adc <DMA_CalcBaseAndBitshift+0x68>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4413      	add	r3, r2
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d909      	bls.n	8003ab6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	1d1a      	adds	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ab4:	e007      	b.n	8003ac6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	aaaaaaab 	.word	0xaaaaaaab
 8003adc:	0800c384 	.word	0x0800c384

08003ae0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11f      	bne.n	8003b3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d856      	bhi.n	8003bae <DMA_CheckFifoParam+0xce>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <DMA_CheckFifoParam+0x28>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b2b 	.word	0x08003b2b
 8003b10:	08003b19 	.word	0x08003b19
 8003b14:	08003baf 	.word	0x08003baf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d046      	beq.n	8003bb2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b28:	e043      	b.n	8003bb2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b32:	d140      	bne.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b38:	e03d      	b.n	8003bb6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b42:	d121      	bne.n	8003b88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b03      	cmp	r3, #3
 8003b48:	d837      	bhi.n	8003bba <DMA_CheckFifoParam+0xda>
 8003b4a:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <DMA_CheckFifoParam+0x70>)
 8003b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b50:	08003b61 	.word	0x08003b61
 8003b54:	08003b67 	.word	0x08003b67
 8003b58:	08003b61 	.word	0x08003b61
 8003b5c:	08003b79 	.word	0x08003b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      break;
 8003b64:	e030      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d025      	beq.n	8003bbe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b76:	e022      	b.n	8003bbe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b80:	d11f      	bne.n	8003bc2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b86:	e01c      	b.n	8003bc2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d903      	bls.n	8003b96 <DMA_CheckFifoParam+0xb6>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d003      	beq.n	8003b9c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b94:	e018      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
      break;
 8003b9a:	e015      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	73fb      	strb	r3, [r7, #15]
      break;
 8003bac:	e00b      	b.n	8003bc6 <DMA_CheckFifoParam+0xe6>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e00a      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e008      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e006      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e004      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bbe:	bf00      	nop
 8003bc0:	e002      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bc2:	bf00      	nop
 8003bc4:	e000      	b.n	8003bc8 <DMA_CheckFifoParam+0xe8>
      break;
 8003bc6:	bf00      	nop
    }
  } 
  
  return status; 
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop

08003bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	; 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e16b      	b.n	8003ecc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	f040 815a 	bne.w	8003ec6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d005      	beq.n	8003c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d130      	bne.n	8003c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	2203      	movs	r2, #3
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	43db      	mvns	r3, r3
 8003c3c:	69ba      	ldr	r2, [r7, #24]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c60:	2201      	movs	r2, #1
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	f003 0201 	and.w	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	69ba      	ldr	r2, [r7, #24]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d017      	beq.n	8003cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	4013      	ands	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d123      	bne.n	8003d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	08da      	lsrs	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3208      	adds	r2, #8
 8003cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	08da      	lsrs	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3208      	adds	r2, #8
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	2203      	movs	r2, #3
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4013      	ands	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f003 0203 	and.w	r2, r3, #3
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	69ba      	ldr	r2, [r7, #24]
 8003d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80b4 	beq.w	8003ec6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	4b60      	ldr	r3, [pc, #384]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	4a5f      	ldr	r2, [pc, #380]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ee4 <HAL_GPIO_Init+0x30c>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ee8 <HAL_GPIO_Init+0x310>)
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	3302      	adds	r3, #2
 8003d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	220f      	movs	r2, #15
 8003d92:	fa02 f303 	lsl.w	r3, r2, r3
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a52      	ldr	r2, [pc, #328]	; (8003eec <HAL_GPIO_Init+0x314>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <HAL_GPIO_Init+0x226>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a51      	ldr	r2, [pc, #324]	; (8003ef0 <HAL_GPIO_Init+0x318>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d025      	beq.n	8003dfa <HAL_GPIO_Init+0x222>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_GPIO_Init+0x31c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <HAL_GPIO_Init+0x21e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_GPIO_Init+0x320>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d019      	beq.n	8003df2 <HAL_GPIO_Init+0x21a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a4e      	ldr	r2, [pc, #312]	; (8003efc <HAL_GPIO_Init+0x324>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x216>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a4d      	ldr	r2, [pc, #308]	; (8003f00 <HAL_GPIO_Init+0x328>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x212>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	; (8003f04 <HAL_GPIO_Init+0x32c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x20e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4b      	ldr	r2, [pc, #300]	; (8003f08 <HAL_GPIO_Init+0x330>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x20a>
 8003dde:	2307      	movs	r3, #7
 8003de0:	e00e      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003de2:	2308      	movs	r3, #8
 8003de4:	e00c      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003de6:	2306      	movs	r3, #6
 8003de8:	e00a      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dea:	2305      	movs	r3, #5
 8003dec:	e008      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dee:	2304      	movs	r3, #4
 8003df0:	e006      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003df2:	2303      	movs	r3, #3
 8003df4:	e004      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e002      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_GPIO_Init+0x228>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	69fa      	ldr	r2, [r7, #28]
 8003e02:	f002 0203 	and.w	r2, r2, #3
 8003e06:	0092      	lsls	r2, r2, #2
 8003e08:	4093      	lsls	r3, r2
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e10:	4935      	ldr	r1, [pc, #212]	; (8003ee8 <HAL_GPIO_Init+0x310>)
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	089b      	lsrs	r3, r3, #2
 8003e16:	3302      	adds	r3, #2
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1e:	4b3b      	ldr	r3, [pc, #236]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	43db      	mvns	r3, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e42:	4a32      	ldr	r2, [pc, #200]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	43db      	mvns	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	4013      	ands	r3, r2
 8003e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d003      	beq.n	8003e6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e6c:	4a27      	ldr	r2, [pc, #156]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e96:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	69ba      	ldr	r2, [r7, #24]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <HAL_GPIO_Init+0x334>)
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61fb      	str	r3, [r7, #28]
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b0f      	cmp	r3, #15
 8003ed0:	f67f ae90 	bls.w	8003bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	3724      	adds	r7, #36	; 0x24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	40013800 	.word	0x40013800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	40020400 	.word	0x40020400
 8003ef4:	40020800 	.word	0x40020800
 8003ef8:	40020c00 	.word	0x40020c00
 8003efc:	40021000 	.word	0x40021000
 8003f00:	40021400 	.word	0x40021400
 8003f04:	40021800 	.word	0x40021800
 8003f08:	40021c00 	.word	0x40021c00
 8003f0c:	40013c00 	.word	0x40013c00

08003f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	807b      	strh	r3, [r7, #2]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f20:	787b      	ldrb	r3, [r7, #1]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f26:	887a      	ldrh	r2, [r7, #2]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f2c:	e003      	b.n	8003f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2e:	887b      	ldrh	r3, [r7, #2]
 8003f30:	041a      	lsls	r2, r3, #16
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	619a      	str	r2, [r3, #24]
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f54:	887a      	ldrh	r2, [r7, #2]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	041a      	lsls	r2, r3, #16
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43d9      	mvns	r1, r3
 8003f60:	887b      	ldrh	r3, [r7, #2]
 8003f62:	400b      	ands	r3, r1
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	619a      	str	r2, [r3, #24]
}
 8003f6a:	bf00      	nop
 8003f6c:	3714      	adds	r7, #20
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e267      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d075      	beq.n	8004082 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f96:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d00c      	beq.n	8003fbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b85      	ldr	r3, [pc, #532]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d112      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fae:	4b82      	ldr	r3, [pc, #520]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	d10b      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fbc:	4b7e      	ldr	r3, [pc, #504]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d05b      	beq.n	8004080 <HAL_RCC_OscConfig+0x108>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d157      	bne.n	8004080 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e242      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fdc:	d106      	bne.n	8003fec <HAL_RCC_OscConfig+0x74>
 8003fde:	4b76      	ldr	r3, [pc, #472]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a75      	ldr	r2, [pc, #468]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e01d      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x98>
 8003ff6:	4b70      	ldr	r3, [pc, #448]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a6f      	ldr	r2, [pc, #444]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a6c      	ldr	r2, [pc, #432]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0xb0>
 8004010:	4b69      	ldr	r3, [pc, #420]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a68      	ldr	r2, [pc, #416]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800401a:	6013      	str	r3, [r2, #0]
 800401c:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a65      	ldr	r2, [pc, #404]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d013      	beq.n	8004058 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004030:	f7fe fbe6 	bl	8002800 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004038:	f7fe fbe2 	bl	8002800 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b64      	cmp	r3, #100	; 0x64
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e207      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800404a:	4b5b      	ldr	r3, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0xc0>
 8004056:	e014      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe fbd2 	bl	8002800 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe fbce 	bl	8002800 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1f3      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004072:	4b51      	ldr	r3, [pc, #324]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0xe8>
 800407e:	e000      	b.n	8004082 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d063      	beq.n	8004156 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408e:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00b      	beq.n	80040b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040a2:	2b08      	cmp	r3, #8
 80040a4:	d11c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a6:	4b44      	ldr	r3, [pc, #272]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d116      	bne.n	80040e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	4b41      	ldr	r3, [pc, #260]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x152>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e1c7      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4937      	ldr	r1, [pc, #220]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040de:	e03a      	b.n	8004156 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d020      	beq.n	800412a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e8:	4b34      	ldr	r3, [pc, #208]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 80040ea:	2201      	movs	r2, #1
 80040ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ee:	f7fe fb87 	bl	8002800 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7fe fb83 	bl	8002800 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e1a8      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004108:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004114:	4b28      	ldr	r3, [pc, #160]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4925      	ldr	r1, [pc, #148]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]
 8004128:	e015      	b.n	8004156 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800412a:	4b24      	ldr	r3, [pc, #144]	; (80041bc <HAL_RCC_OscConfig+0x244>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fe fb66 	bl	8002800 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004138:	f7fe fb62 	bl	8002800 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e187      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d036      	beq.n	80041d0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d016      	beq.n	8004198 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_RCC_OscConfig+0x248>)
 800416c:	2201      	movs	r2, #1
 800416e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fe fb46 	bl	8002800 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004178:	f7fe fb42 	bl	8002800 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e167      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800418a:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_OscConfig+0x240>)
 800418c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0x200>
 8004196:	e01b      	b.n	80041d0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <HAL_RCC_OscConfig+0x248>)
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419e:	f7fe fb2f 	bl	8002800 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a4:	e00e      	b.n	80041c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a6:	f7fe fb2b 	bl	8002800 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d907      	bls.n	80041c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e150      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	42470000 	.word	0x42470000
 80041c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c4:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c8:	f003 0302 	and.w	r3, r3, #2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1ea      	bne.n	80041a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8097 	beq.w	800430c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b81      	ldr	r3, [pc, #516]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10f      	bne.n	800420e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	2300      	movs	r3, #0
 80041f0:	60bb      	str	r3, [r7, #8]
 80041f2:	4b7d      	ldr	r3, [pc, #500]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a7c      	ldr	r2, [pc, #496]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80041f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041fc:	6413      	str	r3, [r2, #64]	; 0x40
 80041fe:	4b7a      	ldr	r3, [pc, #488]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004206:	60bb      	str	r3, [r7, #8]
 8004208:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420e:	4b77      	ldr	r3, [pc, #476]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800421a:	4b74      	ldr	r3, [pc, #464]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a73      	ldr	r2, [pc, #460]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004224:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004226:	f7fe faeb 	bl	8002800 <HAL_GetTick>
 800422a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fe fae7 	bl	8002800 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e10c      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	4b6a      	ldr	r3, [pc, #424]	; (80043ec <HAL_RCC_OscConfig+0x474>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x2ea>
 8004254:	4b64      	ldr	r3, [pc, #400]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a63      	ldr	r2, [pc, #396]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	e01c      	b.n	800429c <HAL_RCC_OscConfig+0x324>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	2b05      	cmp	r3, #5
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x30c>
 800426a:	4b5f      	ldr	r3, [pc, #380]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800426c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426e:	4a5e      	ldr	r2, [pc, #376]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004270:	f043 0304 	orr.w	r3, r3, #4
 8004274:	6713      	str	r3, [r2, #112]	; 0x70
 8004276:	4b5c      	ldr	r3, [pc, #368]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	4a5b      	ldr	r2, [pc, #364]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 0301 	orr.w	r3, r3, #1
 8004280:	6713      	str	r3, [r2, #112]	; 0x70
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0x324>
 8004284:	4b58      	ldr	r3, [pc, #352]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004288:	4a57      	ldr	r2, [pc, #348]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	6713      	str	r3, [r2, #112]	; 0x70
 8004290:	4b55      	ldr	r3, [pc, #340]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004294:	4a54      	ldr	r2, [pc, #336]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004296:	f023 0304 	bic.w	r3, r3, #4
 800429a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d015      	beq.n	80042d0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fe faac 	bl	8002800 <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fe faa8 	bl	8002800 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0cb      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c2:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0ee      	beq.n	80042ac <HAL_RCC_OscConfig+0x334>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d0:	f7fe fa96 	bl	8002800 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d6:	e00a      	b.n	80042ee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d8:	f7fe fa92 	bl	8002800 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e0b5      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ee:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ee      	bne.n	80042d8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042fa:	7dfb      	ldrb	r3, [r7, #23]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d105      	bne.n	800430c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004300:	4b39      	ldr	r3, [pc, #228]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	4a38      	ldr	r2, [pc, #224]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800430a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	699b      	ldr	r3, [r3, #24]
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 80a1 	beq.w	8004458 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004316:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f003 030c 	and.w	r3, r3, #12
 800431e:	2b08      	cmp	r3, #8
 8004320:	d05c      	beq.n	80043dc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d141      	bne.n	80043ae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004330:	f7fe fa66 	bl	8002800 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe fa62 	bl	8002800 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e087      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434a:	4b27      	ldr	r3, [pc, #156]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	431a      	orrs	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004378:	061b      	lsls	r3, r3, #24
 800437a:	491b      	ldr	r1, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 800437c:	4313      	orrs	r3, r2
 800437e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 8004382:	2201      	movs	r2, #1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fe fa3b 	bl	8002800 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800438c:	e008      	b.n	80043a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438e:	f7fe fa37 	bl	8002800 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e05c      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a0:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <HAL_RCC_OscConfig+0x416>
 80043ac:	e054      	b.n	8004458 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b10      	ldr	r3, [pc, #64]	; (80043f0 <HAL_RCC_OscConfig+0x478>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fe fa24 	bl	8002800 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fe fa20 	bl	8002800 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e045      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <HAL_RCC_OscConfig+0x470>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x444>
 80043da:	e03d      	b.n	8004458 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e038      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40007000 	.word	0x40007000
 80043f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f4:	4b1b      	ldr	r3, [pc, #108]	; (8004464 <HAL_RCC_OscConfig+0x4ec>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d028      	beq.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d121      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800441a:	429a      	cmp	r2, r3
 800441c:	d11a      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800442a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800442c:	4293      	cmp	r3, r2
 800442e:	d111      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	3b01      	subs	r3, #1
 800443e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004440:	429a      	cmp	r2, r3
 8004442:	d107      	bne.n	8004454 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	40023800 	.word	0x40023800

08004468 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0cc      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800447c:	4b68      	ldr	r3, [pc, #416]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	683a      	ldr	r2, [r7, #0]
 8004486:	429a      	cmp	r2, r3
 8004488:	d90c      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800448a:	4b65      	ldr	r3, [pc, #404]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b63      	ldr	r3, [pc, #396]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0b8      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d020      	beq.n	80044f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0304 	and.w	r3, r3, #4
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044bc:	4b59      	ldr	r3, [pc, #356]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	4a58      	ldr	r2, [pc, #352]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d4:	4b53      	ldr	r3, [pc, #332]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	4a52      	ldr	r2, [pc, #328]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e0:	4b50      	ldr	r3, [pc, #320]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	494d      	ldr	r1, [pc, #308]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d044      	beq.n	8004588 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004506:	4b47      	ldr	r3, [pc, #284]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d119      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e07f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d003      	beq.n	8004526 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004522:	2b03      	cmp	r3, #3
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e06f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004536:	4b3b      	ldr	r3, [pc, #236]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e067      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004546:	4b37      	ldr	r3, [pc, #220]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f023 0203 	bic.w	r2, r3, #3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	4934      	ldr	r1, [pc, #208]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004558:	f7fe f952 	bl	8002800 <HAL_GetTick>
 800455c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	e00a      	b.n	8004576 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004560:	f7fe f94e 	bl	8002800 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	f241 3288 	movw	r2, #5000	; 0x1388
 800456e:	4293      	cmp	r3, r2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e04f      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004576:	4b2b      	ldr	r3, [pc, #172]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 020c 	and.w	r2, r3, #12
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	429a      	cmp	r2, r3
 8004586:	d1eb      	bne.n	8004560 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004588:	4b25      	ldr	r3, [pc, #148]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	683a      	ldr	r2, [r7, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d20c      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d001      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e032      	b.n	8004616 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045bc:	4b19      	ldr	r3, [pc, #100]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	4916      	ldr	r1, [pc, #88]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	490e      	ldr	r1, [pc, #56]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ee:	f000 f821 	bl	8004634 <HAL_RCC_GetSysClockFreq>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	091b      	lsrs	r3, r3, #4
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	490a      	ldr	r1, [pc, #40]	; (8004628 <HAL_RCC_ClockConfig+0x1c0>)
 8004600:	5ccb      	ldrb	r3, [r1, r3]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	4a09      	ldr	r2, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x1c4>)
 8004608:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <HAL_RCC_ClockConfig+0x1c8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f8b2 	bl	8002778 <HAL_InitTick>

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00
 8004624:	40023800 	.word	0x40023800
 8004628:	0800c36c 	.word	0x0800c36c
 800462c:	20000288 	.word	0x20000288
 8004630:	2000028c 	.word	0x2000028c

08004634 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004638:	b090      	sub	sp, #64	; 0x40
 800463a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	2300      	movs	r3, #0
 8004642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004644:	2300      	movs	r3, #0
 8004646:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800464c:	4b59      	ldr	r3, [pc, #356]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f003 030c 	and.w	r3, r3, #12
 8004654:	2b08      	cmp	r3, #8
 8004656:	d00d      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x40>
 8004658:	2b08      	cmp	r3, #8
 800465a:	f200 80a1 	bhi.w	80047a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <HAL_RCC_GetSysClockFreq+0x34>
 8004662:	2b04      	cmp	r3, #4
 8004664:	d003      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x3a>
 8004666:	e09b      	b.n	80047a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b53      	ldr	r3, [pc, #332]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800466a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800466c:	e09b      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004670:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004672:	e098      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004674:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800467e:	4b4d      	ldr	r3, [pc, #308]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d028      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800468a:	4b4a      	ldr	r3, [pc, #296]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	099b      	lsrs	r3, r3, #6
 8004690:	2200      	movs	r2, #0
 8004692:	623b      	str	r3, [r7, #32]
 8004694:	627a      	str	r2, [r7, #36]	; 0x24
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800469c:	2100      	movs	r1, #0
 800469e:	4b47      	ldr	r3, [pc, #284]	; (80047bc <HAL_RCC_GetSysClockFreq+0x188>)
 80046a0:	fb03 f201 	mul.w	r2, r3, r1
 80046a4:	2300      	movs	r3, #0
 80046a6:	fb00 f303 	mul.w	r3, r0, r3
 80046aa:	4413      	add	r3, r2
 80046ac:	4a43      	ldr	r2, [pc, #268]	; (80047bc <HAL_RCC_GetSysClockFreq+0x188>)
 80046ae:	fba0 1202 	umull	r1, r2, r0, r2
 80046b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046b4:	460a      	mov	r2, r1
 80046b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80046b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046ba:	4413      	add	r3, r2
 80046bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c0:	2200      	movs	r2, #0
 80046c2:	61bb      	str	r3, [r7, #24]
 80046c4:	61fa      	str	r2, [r7, #28]
 80046c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046ce:	f7fc fadb 	bl	8000c88 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4613      	mov	r3, r2
 80046d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046da:	e053      	b.n	8004784 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046dc:	4b35      	ldr	r3, [pc, #212]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	099b      	lsrs	r3, r3, #6
 80046e2:	2200      	movs	r2, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	617a      	str	r2, [r7, #20]
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046ee:	f04f 0b00 	mov.w	fp, #0
 80046f2:	4652      	mov	r2, sl
 80046f4:	465b      	mov	r3, fp
 80046f6:	f04f 0000 	mov.w	r0, #0
 80046fa:	f04f 0100 	mov.w	r1, #0
 80046fe:	0159      	lsls	r1, r3, #5
 8004700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004704:	0150      	lsls	r0, r2, #5
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	ebb2 080a 	subs.w	r8, r2, sl
 800470e:	eb63 090b 	sbc.w	r9, r3, fp
 8004712:	f04f 0200 	mov.w	r2, #0
 8004716:	f04f 0300 	mov.w	r3, #0
 800471a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800471e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004722:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004726:	ebb2 0408 	subs.w	r4, r2, r8
 800472a:	eb63 0509 	sbc.w	r5, r3, r9
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	00eb      	lsls	r3, r5, #3
 8004738:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800473c:	00e2      	lsls	r2, r4, #3
 800473e:	4614      	mov	r4, r2
 8004740:	461d      	mov	r5, r3
 8004742:	eb14 030a 	adds.w	r3, r4, sl
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	eb45 030b 	adc.w	r3, r5, fp
 800474c:	607b      	str	r3, [r7, #4]
 800474e:	f04f 0200 	mov.w	r2, #0
 8004752:	f04f 0300 	mov.w	r3, #0
 8004756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800475a:	4629      	mov	r1, r5
 800475c:	028b      	lsls	r3, r1, #10
 800475e:	4621      	mov	r1, r4
 8004760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004764:	4621      	mov	r1, r4
 8004766:	028a      	lsls	r2, r1, #10
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800476e:	2200      	movs	r2, #0
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	60fa      	str	r2, [r7, #12]
 8004774:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004778:	f7fc fa86 	bl	8000c88 <__aeabi_uldivmod>
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4613      	mov	r3, r2
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	0c1b      	lsrs	r3, r3, #16
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	3301      	adds	r3, #1
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800479e:	e002      	b.n	80047a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047a0:	4b05      	ldr	r3, [pc, #20]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80047a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3740      	adds	r7, #64	; 0x40
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b2:	bf00      	nop
 80047b4:	40023800 	.word	0x40023800
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	017d7840 	.word	0x017d7840

080047c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000288 	.word	0x20000288

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a9b      	lsrs	r3, r3, #10
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4903      	ldr	r1, [pc, #12]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	0800c37c 	.word	0x0800c37c

08004800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004804:	f7ff ffdc 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0b5b      	lsrs	r3, r3, #13
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	0800c37c 	.word	0x0800c37c

08004828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e041      	b.n	80048be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fe60 	bl	8002514 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	3304      	adds	r3, #4
 8004864:	4619      	mov	r1, r3
 8004866:	4610      	mov	r0, r2
 8004868:	f000 fd3c 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3708      	adds	r7, #8
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d001      	beq.n	80048e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e04e      	b.n	800497e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <HAL_TIM_Base_Start_IT+0xc4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d022      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800490a:	d01d      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HAL_TIM_Base_Start_IT+0xc8>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d018      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_TIM_Base_Start_IT+0xcc>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d013      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1c      	ldr	r2, [pc, #112]	; (8004998 <HAL_TIM_Base_Start_IT+0xd0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00e      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1b      	ldr	r2, [pc, #108]	; (800499c <HAL_TIM_Base_Start_IT+0xd4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a19      	ldr	r2, [pc, #100]	; (80049a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x80>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a18      	ldr	r2, [pc, #96]	; (80049a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d111      	bne.n	800496c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b06      	cmp	r3, #6
 8004958:	d010      	beq.n	800497c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	e007      	b.n	800497c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40010000 	.word	0x40010000
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40010400 	.word	0x40010400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40001800 	.word	0x40001800

080049a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e041      	b.n	8004a3e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f839 	bl	8004a46 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fc7c 	bl	80052e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3c:	2300      	movs	r3, #0
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr
	...

08004a5c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_IC_Start_IT+0x1e>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	e013      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x46>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_IC_Start_IT+0x2e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	e00b      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x46>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_IC_Start_IT+0x3e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	e003      	b.n	8004aa2 <HAL_TIM_IC_Start_IT+0x46>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d104      	bne.n	8004ab4 <HAL_TIM_IC_Start_IT+0x58>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	e013      	b.n	8004adc <HAL_TIM_IC_Start_IT+0x80>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d104      	bne.n	8004ac4 <HAL_TIM_IC_Start_IT+0x68>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	e00b      	b.n	8004adc <HAL_TIM_IC_Start_IT+0x80>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b08      	cmp	r3, #8
 8004ac8:	d104      	bne.n	8004ad4 <HAL_TIM_IC_Start_IT+0x78>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e003      	b.n	8004adc <HAL_TIM_IC_Start_IT+0x80>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d102      	bne.n	8004aea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ae4:	7b7b      	ldrb	r3, [r7, #13]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0cc      	b.n	8004c88 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d104      	bne.n	8004afe <HAL_TIM_IC_Start_IT+0xa2>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004afc:	e013      	b.n	8004b26 <HAL_TIM_IC_Start_IT+0xca>
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d104      	bne.n	8004b0e <HAL_TIM_IC_Start_IT+0xb2>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b0c:	e00b      	b.n	8004b26 <HAL_TIM_IC_Start_IT+0xca>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	d104      	bne.n	8004b1e <HAL_TIM_IC_Start_IT+0xc2>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b1c:	e003      	b.n	8004b26 <HAL_TIM_IC_Start_IT+0xca>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0xda>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b34:	e013      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x102>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d104      	bne.n	8004b46 <HAL_TIM_IC_Start_IT+0xea>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b44:	e00b      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x102>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d104      	bne.n	8004b56 <HAL_TIM_IC_Start_IT+0xfa>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b54:	e003      	b.n	8004b5e <HAL_TIM_IC_Start_IT+0x102>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2202      	movs	r2, #2
 8004b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d841      	bhi.n	8004be8 <HAL_TIM_IC_Start_IT+0x18c>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <HAL_TIM_IC_Start_IT+0x110>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004be9 	.word	0x08004be9
 8004b7c:	08004bb3 	.word	0x08004bb3
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	08004bc5 	.word	0x08004bc5
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004bd7 	.word	0x08004bd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0202 	orr.w	r2, r2, #2
 8004bae:	60da      	str	r2, [r3, #12]
      break;
 8004bb0:	e01d      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f042 0204 	orr.w	r2, r2, #4
 8004bc0:	60da      	str	r2, [r3, #12]
      break;
 8004bc2:	e014      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f042 0208 	orr.w	r2, r2, #8
 8004bd2:	60da      	str	r2, [r3, #12]
      break;
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f042 0210 	orr.w	r2, r2, #16
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	e002      	b.n	8004bee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d148      	bne.n	8004c86 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fe67 	bl	80058d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a22      	ldr	r2, [pc, #136]	; (8004c90 <HAL_TIM_IC_Start_IT+0x234>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d022      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c14:	d01d      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a1e      	ldr	r2, [pc, #120]	; (8004c94 <HAL_TIM_IC_Start_IT+0x238>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d018      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1c      	ldr	r2, [pc, #112]	; (8004c98 <HAL_TIM_IC_Start_IT+0x23c>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d013      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIM_IC_Start_IT+0x240>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d00e      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a19      	ldr	r2, [pc, #100]	; (8004ca0 <HAL_TIM_IC_Start_IT+0x244>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d009      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIM_IC_Start_IT+0x248>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d004      	beq.n	8004c52 <HAL_TIM_IC_Start_IT+0x1f6>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <HAL_TIM_IC_Start_IT+0x24c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d111      	bne.n	8004c76 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	2b06      	cmp	r3, #6
 8004c62:	d010      	beq.n	8004c86 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f042 0201 	orr.w	r2, r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c74:	e007      	b.n	8004c86 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f042 0201 	orr.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40010400 	.word	0x40010400
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40001800 	.word	0x40001800

08004cac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d122      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d11b      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f06f 0202 	mvn.w	r2, #2
 8004cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	f003 0303 	and.w	r3, r3, #3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7fc fbd6 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004cf4:	e005      	b.n	8004d02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 faca 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fad1 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b04      	cmp	r3, #4
 8004d14:	d122      	bne.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d11b      	bne.n	8004d5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0204 	mvn.w	r2, #4
 8004d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fc fbac 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004d48:	e005      	b.n	8004d56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 faa0 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 faa7 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d122      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d11b      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f06f 0208 	mvn.w	r2, #8
 8004d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2204      	movs	r2, #4
 8004d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69db      	ldr	r3, [r3, #28]
 8004d8e:	f003 0303 	and.w	r3, r3, #3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d003      	beq.n	8004d9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fc fb82 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004d9c:	e005      	b.n	8004daa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 fa76 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fa7d 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d122      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f003 0310 	and.w	r3, r3, #16
 8004dc8:	2b10      	cmp	r3, #16
 8004dca:	d11b      	bne.n	8004e04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f06f 0210 	mvn.w	r2, #16
 8004dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2208      	movs	r2, #8
 8004dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	69db      	ldr	r3, [r3, #28]
 8004de2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fb58 	bl	80014a0 <HAL_TIM_IC_CaptureCallback>
 8004df0:	e005      	b.n	8004dfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 fa4c 	bl	8005290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fa53 	bl	80052a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d10e      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d107      	bne.n	8004e30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f06f 0201 	mvn.w	r2, #1
 8004e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fc fb06 	bl	800143c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3a:	2b80      	cmp	r3, #128	; 0x80
 8004e3c:	d10e      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d107      	bne.n	8004e5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fde6 	bl	8005a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b40      	cmp	r3, #64	; 0x40
 8004e76:	d107      	bne.n	8004e88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f000 fa18 	bl	80052b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	f003 0320 	and.w	r3, r3, #32
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d10e      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d107      	bne.n	8004eb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 0220 	mvn.w	r2, #32
 8004eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fdb0 	bl	8005a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	3708      	adds	r7, #8
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_IC_ConfigChannel+0x1e>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e088      	b.n	8004fec <HAL_TIM_IC_ConfigChannel+0x130>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d11b      	bne.n	8004f20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	6819      	ldr	r1, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f000 fb26 	bl	8005548 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 020c 	bic.w	r2, r2, #12
 8004f0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6999      	ldr	r1, [r3, #24]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	619a      	str	r2, [r3, #24]
 8004f1e:	e060      	b.n	8004fe2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d11c      	bne.n	8004f60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6818      	ldr	r0, [r3, #0]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f000 fbaa 	bl	800568e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004f48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6999      	ldr	r1, [r3, #24]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	021a      	lsls	r2, r3, #8
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	e040      	b.n	8004fe2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d11b      	bne.n	8004f9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f000 fbf7 	bl	8005768 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 020c 	bic.w	r2, r2, #12
 8004f88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69d9      	ldr	r1, [r3, #28]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	61da      	str	r2, [r3, #28]
 8004f9c:	e021      	b.n	8004fe2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d11c      	bne.n	8004fde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6818      	ldr	r0, [r3, #0]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6819      	ldr	r1, [r3, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f000 fc14 	bl	80057e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69da      	ldr	r2, [r3, #28]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004fc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69d9      	ldr	r1, [r3, #28]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	61da      	str	r2, [r3, #28]
 8004fdc:	e001      	b.n	8004fe2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3718      	adds	r7, #24
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_TIM_ConfigClockSource+0x1c>
 800500c:	2302      	movs	r3, #2
 800500e:	e0b4      	b.n	800517a <HAL_TIM_ConfigClockSource+0x186>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800502e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005048:	d03e      	beq.n	80050c8 <HAL_TIM_ConfigClockSource+0xd4>
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504e:	f200 8087 	bhi.w	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005056:	f000 8086 	beq.w	8005166 <HAL_TIM_ConfigClockSource+0x172>
 800505a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800505e:	d87f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005060:	2b70      	cmp	r3, #112	; 0x70
 8005062:	d01a      	beq.n	800509a <HAL_TIM_ConfigClockSource+0xa6>
 8005064:	2b70      	cmp	r3, #112	; 0x70
 8005066:	d87b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d050      	beq.n	800510e <HAL_TIM_ConfigClockSource+0x11a>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d877      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005070:	2b50      	cmp	r3, #80	; 0x50
 8005072:	d03c      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0xfa>
 8005074:	2b50      	cmp	r3, #80	; 0x50
 8005076:	d873      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005078:	2b40      	cmp	r3, #64	; 0x40
 800507a:	d058      	beq.n	800512e <HAL_TIM_ConfigClockSource+0x13a>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d86f      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005080:	2b30      	cmp	r3, #48	; 0x30
 8005082:	d064      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005084:	2b30      	cmp	r3, #48	; 0x30
 8005086:	d86b      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d060      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d867      	bhi.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d05c      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d05a      	beq.n	800514e <HAL_TIM_ConfigClockSource+0x15a>
 8005098:	e062      	b.n	8005160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	6899      	ldr	r1, [r3, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f000 fbf1 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	609a      	str	r2, [r3, #8]
      break;
 80050c6:	e04f      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6818      	ldr	r0, [r3, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	6899      	ldr	r1, [r3, #8]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	685a      	ldr	r2, [r3, #4]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f000 fbda 	bl	8005890 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ea:	609a      	str	r2, [r3, #8]
      break;
 80050ec:	e03c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	6859      	ldr	r1, [r3, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	461a      	mov	r2, r3
 80050fc:	f000 fa98 	bl	8005630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	2150      	movs	r1, #80	; 0x50
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fba7 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 800510c:	e02c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6818      	ldr	r0, [r3, #0]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	6859      	ldr	r1, [r3, #4]
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	461a      	mov	r2, r3
 800511c:	f000 faf4 	bl	8005708 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2160      	movs	r1, #96	; 0x60
 8005126:	4618      	mov	r0, r3
 8005128:	f000 fb97 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 800512c:	e01c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6818      	ldr	r0, [r3, #0]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	6859      	ldr	r1, [r3, #4]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	461a      	mov	r2, r3
 800513c:	f000 fa78 	bl	8005630 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2140      	movs	r1, #64	; 0x40
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fb87 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 800514c:	e00c      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4619      	mov	r1, r3
 8005158:	4610      	mov	r0, r2
 800515a:	f000 fb7e 	bl	800585a <TIM_ITRx_SetConfig>
      break;
 800515e:	e003      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	73fb      	strb	r3, [r7, #15]
      break;
 8005164:	e000      	b.n	8005168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005178:	7bfb      	ldrb	r3, [r7, #15]
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b082      	sub	sp, #8
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_TIM_SlaveConfigSynchro+0x18>
 8005196:	2302      	movs	r3, #2
 8005198:	e031      	b.n	80051fe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f939 	bl	8005424 <TIM_SlaveTimer_SetConfig>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e018      	b.n	80051fe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051da:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051ea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b0c      	cmp	r3, #12
 800521a:	d831      	bhi.n	8005280 <HAL_TIM_ReadCapturedValue+0x78>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <HAL_TIM_ReadCapturedValue+0x1c>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005259 	.word	0x08005259
 8005228:	08005281 	.word	0x08005281
 800522c:	08005281 	.word	0x08005281
 8005230:	08005281 	.word	0x08005281
 8005234:	08005263 	.word	0x08005263
 8005238:	08005281 	.word	0x08005281
 800523c:	08005281 	.word	0x08005281
 8005240:	08005281 	.word	0x08005281
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005281 	.word	0x08005281
 800524c:	08005281 	.word	0x08005281
 8005250:	08005281 	.word	0x08005281
 8005254:	08005277 	.word	0x08005277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800525e:	60fb      	str	r3, [r7, #12]

      break;
 8005260:	e00f      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	60fb      	str	r3, [r7, #12]

      break;
 800526a:	e00a      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	60fb      	str	r3, [r7, #12]

      break;
 8005274:	e005      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527c:	60fb      	str	r3, [r7, #12]

      break;
 800527e:	e000      	b.n	8005282 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005280:	bf00      	nop
  }

  return tmpreg;
 8005282:	68fb      	ldr	r3, [r7, #12]
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_GetActiveChannel>:
  * @brief  Return the TIM Encoder Mode handle state.
  * @param  htim TIM handle
  * @retval Active channel
  */
HAL_TIM_ActiveChannel HAL_TIM_GetActiveChannel(TIM_HandleTypeDef *htim)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return htim->Channel;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	7f1b      	ldrb	r3, [r3, #28]
}
 80052d8:	4618      	mov	r0, r3
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a40      	ldr	r2, [pc, #256]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d013      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005302:	d00f      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a3d      	ldr	r2, [pc, #244]	; (80053fc <TIM_Base_SetConfig+0x118>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00b      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a3c      	ldr	r2, [pc, #240]	; (8005400 <TIM_Base_SetConfig+0x11c>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d007      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a3b      	ldr	r2, [pc, #236]	; (8005404 <TIM_Base_SetConfig+0x120>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3a      	ldr	r2, [pc, #232]	; (8005408 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d108      	bne.n	8005336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800532a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	4313      	orrs	r3, r2
 8005334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2f      	ldr	r2, [pc, #188]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d02b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005344:	d027      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2c      	ldr	r2, [pc, #176]	; (80053fc <TIM_Base_SetConfig+0x118>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d023      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2b      	ldr	r2, [pc, #172]	; (8005400 <TIM_Base_SetConfig+0x11c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a2a      	ldr	r2, [pc, #168]	; (8005404 <TIM_Base_SetConfig+0x120>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d01b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a29      	ldr	r2, [pc, #164]	; (8005408 <TIM_Base_SetConfig+0x124>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d017      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a28      	ldr	r2, [pc, #160]	; (800540c <TIM_Base_SetConfig+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a27      	ldr	r2, [pc, #156]	; (8005410 <TIM_Base_SetConfig+0x12c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a26      	ldr	r2, [pc, #152]	; (8005414 <TIM_Base_SetConfig+0x130>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a25      	ldr	r2, [pc, #148]	; (8005418 <TIM_Base_SetConfig+0x134>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a24      	ldr	r2, [pc, #144]	; (800541c <TIM_Base_SetConfig+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a23      	ldr	r2, [pc, #140]	; (8005420 <TIM_Base_SetConfig+0x13c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a0a      	ldr	r2, [pc, #40]	; (80053f8 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0xf8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a0c      	ldr	r2, [pc, #48]	; (8005408 <TIM_Base_SetConfig+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d103      	bne.n	80053e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	691a      	ldr	r2, [r3, #16]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	615a      	str	r2, [r3, #20]
}
 80053ea:	bf00      	nop
 80053ec:	3714      	adds	r7, #20
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	40010000 	.word	0x40010000
 80053fc:	40000400 	.word	0x40000400
 8005400:	40000800 	.word	0x40000800
 8005404:	40000c00 	.word	0x40000c00
 8005408:	40010400 	.word	0x40010400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800
 8005418:	40001800 	.word	0x40001800
 800541c:	40001c00 	.word	0x40001c00
 8005420:	40002000 	.word	0x40002000

08005424 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005440:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	f023 0307 	bic.w	r3, r3, #7
 8005452:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	2b70      	cmp	r3, #112	; 0x70
 800546c:	d01a      	beq.n	80054a4 <TIM_SlaveTimer_SetConfig+0x80>
 800546e:	2b70      	cmp	r3, #112	; 0x70
 8005470:	d860      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 8005472:	2b60      	cmp	r3, #96	; 0x60
 8005474:	d054      	beq.n	8005520 <TIM_SlaveTimer_SetConfig+0xfc>
 8005476:	2b60      	cmp	r3, #96	; 0x60
 8005478:	d85c      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 800547a:	2b50      	cmp	r3, #80	; 0x50
 800547c:	d046      	beq.n	800550c <TIM_SlaveTimer_SetConfig+0xe8>
 800547e:	2b50      	cmp	r3, #80	; 0x50
 8005480:	d858      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 8005482:	2b40      	cmp	r3, #64	; 0x40
 8005484:	d019      	beq.n	80054ba <TIM_SlaveTimer_SetConfig+0x96>
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d854      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 800548a:	2b30      	cmp	r3, #48	; 0x30
 800548c:	d055      	beq.n	800553a <TIM_SlaveTimer_SetConfig+0x116>
 800548e:	2b30      	cmp	r3, #48	; 0x30
 8005490:	d850      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 8005492:	2b20      	cmp	r3, #32
 8005494:	d051      	beq.n	800553a <TIM_SlaveTimer_SetConfig+0x116>
 8005496:	2b20      	cmp	r3, #32
 8005498:	d84c      	bhi.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
 800549a:	2b00      	cmp	r3, #0
 800549c:	d04d      	beq.n	800553a <TIM_SlaveTimer_SetConfig+0x116>
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d04b      	beq.n	800553a <TIM_SlaveTimer_SetConfig+0x116>
 80054a2:	e047      	b.n	8005534 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6818      	ldr	r0, [r3, #0]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68d9      	ldr	r1, [r3, #12]
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691b      	ldr	r3, [r3, #16]
 80054b4:	f000 f9ec 	bl	8005890 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80054b8:	e040      	b.n	800553c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2b05      	cmp	r3, #5
 80054c0:	d101      	bne.n	80054c6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e03b      	b.n	800553e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0201 	bic.w	r2, r2, #1
 80054dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	621a      	str	r2, [r3, #32]
      break;
 800550a:	e017      	b.n	800553c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	461a      	mov	r2, r3
 800551a:	f000 f889 	bl	8005630 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800551e:	e00d      	b.n	800553c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6899      	ldr	r1, [r3, #8]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	461a      	mov	r2, r3
 800552e:	f000 f8eb 	bl	8005708 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8005532:	e003      	b.n	800553c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	75fb      	strb	r3, [r7, #23]
      break;
 8005538:	e000      	b.n	800553c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800553a:	bf00      	nop
  }

  return status;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	f023 0201 	bic.w	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a28      	ldr	r2, [pc, #160]	; (8005614 <TIM_TI1_SetConfig+0xcc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d01b      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800557c:	d017      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	4a25      	ldr	r2, [pc, #148]	; (8005618 <TIM_TI1_SetConfig+0xd0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4a24      	ldr	r2, [pc, #144]	; (800561c <TIM_TI1_SetConfig+0xd4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00f      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4a23      	ldr	r2, [pc, #140]	; (8005620 <TIM_TI1_SetConfig+0xd8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d00b      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a22      	ldr	r2, [pc, #136]	; (8005624 <TIM_TI1_SetConfig+0xdc>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d007      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a21      	ldr	r2, [pc, #132]	; (8005628 <TIM_TI1_SetConfig+0xe0>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d003      	beq.n	80055ae <TIM_TI1_SetConfig+0x66>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a20      	ldr	r2, [pc, #128]	; (800562c <TIM_TI1_SetConfig+0xe4>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <TIM_TI1_SetConfig+0x6a>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <TIM_TI1_SetConfig+0x6c>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0303 	bic.w	r3, r3, #3
 80055be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e003      	b.n	80055d2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	011b      	lsls	r3, r3, #4
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	f023 030a 	bic.w	r3, r3, #10
 80055ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	f003 030a 	and.w	r3, r3, #10
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	621a      	str	r2, [r3, #32]
}
 8005606:	bf00      	nop
 8005608:	371c      	adds	r7, #28
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40001800 	.word	0x40001800

08005630 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005630:	b480      	push	{r7}
 8005632:	b087      	sub	sp, #28
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	f023 0201 	bic.w	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800565a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f023 030a 	bic.w	r3, r3, #10
 800566c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800568e:	b480      	push	{r7}
 8005690:	b087      	sub	sp, #28
 8005692:	af00      	add	r7, sp, #0
 8005694:	60f8      	str	r0, [r7, #12]
 8005696:	60b9      	str	r1, [r7, #8]
 8005698:	607a      	str	r2, [r7, #4]
 800569a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	f023 0210 	bic.w	r2, r3, #16
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	031b      	lsls	r3, r3, #12
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	621a      	str	r2, [r3, #32]
}
 80056fc:	bf00      	nop
 80056fe:	371c      	adds	r7, #28
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f023 0210 	bic.w	r2, r3, #16
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005732:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	031b      	lsls	r3, r3, #12
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005744:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	621a      	str	r2, [r3, #32]
}
 800575c:	bf00      	nop
 800575e:	371c      	adds	r7, #28
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f023 0303 	bic.w	r3, r3, #3
 8005794:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4313      	orrs	r3, r2
 800579c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80057b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	621a      	str	r2, [r3, #32]
}
 80057d4:	bf00      	nop
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800580c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	021b      	lsls	r3, r3, #8
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	031b      	lsls	r3, r3, #12
 8005824:	b29b      	uxth	r3, r3
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005832:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	031b      	lsls	r3, r3, #12
 8005838:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4313      	orrs	r3, r2
 8005840:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585a:	b480      	push	{r7}
 800585c:	b085      	sub	sp, #20
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
 8005862:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005870:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	f043 0307 	orr.w	r3, r3, #7
 800587c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	021a      	lsls	r2, r3, #8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	609a      	str	r2, [r3, #8]
}
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 031f 	and.w	r3, r3, #31
 80058e2:	2201      	movs	r2, #1
 80058e4:	fa02 f303 	lsl.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	43db      	mvns	r3, r3
 80058f2:	401a      	ands	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6a1a      	ldr	r2, [r3, #32]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
}
 800590e:	bf00      	nop
 8005910:	371c      	adds	r7, #28
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800592c:	2b01      	cmp	r3, #1
 800592e:	d101      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005930:	2302      	movs	r3, #2
 8005932:	e05a      	b.n	80059ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a21      	ldr	r2, [pc, #132]	; (80059f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d022      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d01d      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a1d      	ldr	r2, [pc, #116]	; (80059fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d018      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d00e      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a18      	ldr	r2, [pc, #96]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d009      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d004      	beq.n	80059be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a15      	ldr	r2, [pc, #84]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d10c      	bne.n	80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68ba      	ldr	r2, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3714      	adds	r7, #20
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40010000 	.word	0x40010000
 80059fc:	40000400 	.word	0x40000400
 8005a00:	40000800 	.word	0x40000800
 8005a04:	40000c00 	.word	0x40000c00
 8005a08:	40010400 	.word	0x40010400
 8005a0c:	40014000 	.word	0x40014000
 8005a10:	40001800 	.word	0x40001800

08005a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e03f      	b.n	8005ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d106      	bne.n	8005a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7fc fdec 	bl	8002640 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2224      	movs	r2, #36	; 0x24
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 fddb 	bl	800663c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b08a      	sub	sp, #40	; 0x28
 8005ada:	af02      	add	r7, sp, #8
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d17c      	bne.n	8005bf0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <HAL_UART_Transmit+0x2c>
 8005afc:	88fb      	ldrh	r3, [r7, #6]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e075      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_UART_Transmit+0x3e>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e06e      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2221      	movs	r2, #33	; 0x21
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b2a:	f7fc fe69 	bl	8002800 <HAL_GetTick>
 8005b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	88fa      	ldrh	r2, [r7, #6]
 8005b34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	88fa      	ldrh	r2, [r7, #6]
 8005b3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b44:	d108      	bne.n	8005b58 <HAL_UART_Transmit+0x82>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61bb      	str	r3, [r7, #24]
 8005b56:	e003      	b.n	8005b60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005b68:	e02a      	b.n	8005bc0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	2180      	movs	r1, #128	; 0x80
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 fb1f 	bl	80061b8 <UART_WaitOnFlagUntilTimeout>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e036      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10b      	bne.n	8005ba2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	3302      	adds	r3, #2
 8005b9e:	61bb      	str	r3, [r7, #24]
 8005ba0:	e007      	b.n	8005bb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	781a      	ldrb	r2, [r3, #0]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1cf      	bne.n	8005b6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	2140      	movs	r1, #64	; 0x40
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 faef 	bl	80061b8 <UART_WaitOnFlagUntilTimeout>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e006      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e000      	b.n	8005bf2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005bf0:	2302      	movs	r3, #2
  }
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b084      	sub	sp, #16
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	4613      	mov	r3, r2
 8005c06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d11d      	bne.n	8005c50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d002      	beq.n	8005c20 <HAL_UART_Receive_IT+0x26>
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e016      	b.n	8005c52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_UART_Receive_IT+0x38>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e00f      	b.n	8005c52 <HAL_UART_Receive_IT+0x58>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c40:	88fb      	ldrh	r3, [r7, #6]
 8005c42:	461a      	mov	r2, r3
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	68f8      	ldr	r0, [r7, #12]
 8005c48:	f000 fb24 	bl	8006294 <UART_Start_Receive_IT>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	e000      	b.n	8005c52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005c50:	2302      	movs	r3, #2
  }
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
	...

08005c5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b0ba      	sub	sp, #232	; 0xe8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	695b      	ldr	r3, [r3, #20]
 8005c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d009      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x66>
 8005cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb2:	f003 0320 	and.w	r3, r3, #32
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fc03 	bl	80064c6 <UART_Receive_IT>
      return;
 8005cc0:	e256      	b.n	8006170 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005cc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80de 	beq.w	8005e88 <HAL_UART_IRQHandler+0x22c>
 8005ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d106      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80d1 	beq.w	8005e88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <HAL_UART_IRQHandler+0xae>
 8005cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d005      	beq.n	8005d0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	f043 0201 	orr.w	r2, r3, #1
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00b      	beq.n	8005d2e <HAL_UART_IRQHandler+0xd2>
 8005d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f043 0202 	orr.w	r2, r3, #2
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00b      	beq.n	8005d52 <HAL_UART_IRQHandler+0xf6>
 8005d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d005      	beq.n	8005d52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f043 0204 	orr.w	r2, r3, #4
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d56:	f003 0308 	and.w	r3, r3, #8
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d011      	beq.n	8005d82 <HAL_UART_IRQHandler+0x126>
 8005d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d105      	bne.n	8005d76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f043 0208 	orr.w	r2, r3, #8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	f000 81ed 	beq.w	8006166 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d008      	beq.n	8005daa <HAL_UART_IRQHandler+0x14e>
 8005d98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 fb8e 	bl	80064c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	695b      	ldr	r3, [r3, #20]
 8005db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	bf0c      	ite	eq
 8005db8:	2301      	moveq	r3, #1
 8005dba:	2300      	movne	r3, #0
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	f003 0308 	and.w	r3, r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <HAL_UART_IRQHandler+0x17a>
 8005dce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04f      	beq.n	8005e76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa96 	bl	8006308 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d141      	bne.n	8005e6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3314      	adds	r3, #20
 8005df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3314      	adds	r3, #20
 8005e12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1d9      	bne.n	8005dea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d013      	beq.n	8005e66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e42:	4a7d      	ldr	r2, [pc, #500]	; (8006038 <HAL_UART_IRQHandler+0x3dc>)
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fd fc38 	bl	80036c0 <HAL_DMA_Abort_IT>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d016      	beq.n	8005e84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e64:	e00e      	b.n	8005e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f990 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e6c:	e00a      	b.n	8005e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 f98c 	bl	800618c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e74:	e006      	b.n	8005e84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 f988 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005e82:	e170      	b.n	8006166 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e84:	bf00      	nop
    return;
 8005e86:	e16e      	b.n	8006166 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	f040 814a 	bne.w	8006126 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e96:	f003 0310 	and.w	r3, r3, #16
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8143 	beq.w	8006126 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 813c 	beq.w	8006126 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60bb      	str	r3, [r7, #8]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60bb      	str	r3, [r7, #8]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	60bb      	str	r3, [r7, #8]
 8005ec2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b40      	cmp	r3, #64	; 0x40
 8005ed0:	f040 80b4 	bne.w	800603c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ee0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8140 	beq.w	800616a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	f080 8139 	bcs.w	800616a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005efe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	f000 8088 	beq.w	800601e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	330c      	adds	r3, #12
 8005f14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	330c      	adds	r3, #12
 8005f36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005f3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1d9      	bne.n	8005f0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f64:	e853 3f00 	ldrex	r3, [r3]
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6c:	f023 0301 	bic.w	r3, r3, #1
 8005f70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e1      	bne.n	8005f5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3314      	adds	r3, #20
 8005f9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fa0:	e853 3f00 	ldrex	r3, [r3]
 8005fa4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005fba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005fbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005fc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005fc2:	e841 2300 	strex	r3, r2, [r1]
 8005fc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d1e3      	bne.n	8005f96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe6:	e853 3f00 	ldrex	r3, [r3]
 8005fea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fee:	f023 0310 	bic.w	r3, r3, #16
 8005ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006000:	65ba      	str	r2, [r7, #88]	; 0x58
 8006002:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006006:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006008:	e841 2300 	strex	r3, r2, [r1]
 800600c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800600e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1e3      	bne.n	8005fdc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006018:	4618      	mov	r0, r3
 800601a:	f7fd fae1 	bl	80035e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006026:	b29b      	uxth	r3, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	b29b      	uxth	r3, r3
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f8b6 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006034:	e099      	b.n	800616a <HAL_UART_IRQHandler+0x50e>
 8006036:	bf00      	nop
 8006038:	080063cf 	.word	0x080063cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006044:	b29b      	uxth	r3, r3
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006050:	b29b      	uxth	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 808b 	beq.w	800616e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006058:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800605c:	2b00      	cmp	r3, #0
 800605e:	f000 8086 	beq.w	800616e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	330c      	adds	r3, #12
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006078:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006086:	647a      	str	r2, [r7, #68]	; 0x44
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800608c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e3      	bne.n	8006062 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3314      	adds	r3, #20
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	623b      	str	r3, [r7, #32]
   return(result);
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f023 0301 	bic.w	r3, r3, #1
 80060b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	3314      	adds	r3, #20
 80060ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80060be:	633a      	str	r2, [r7, #48]	; 0x30
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c6:	e841 2300 	strex	r3, r2, [r1]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1e3      	bne.n	800609a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	330c      	adds	r3, #12
 80060e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	e853 3f00 	ldrex	r3, [r3]
 80060ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0310 	bic.w	r3, r3, #16
 80060f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006104:	61fa      	str	r2, [r7, #28]
 8006106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006108:	69b9      	ldr	r1, [r7, #24]
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	e841 2300 	strex	r3, r2, [r1]
 8006110:	617b      	str	r3, [r7, #20]
   return(result);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1e3      	bne.n	80060e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f83e 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006124:	e023      	b.n	800616e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800612a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <HAL_UART_IRQHandler+0x4ea>
 8006132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613a:	2b00      	cmp	r3, #0
 800613c:	d003      	beq.n	8006146 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f959 	bl	80063f6 <UART_Transmit_IT>
    return;
 8006144:	e014      	b.n	8006170 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <HAL_UART_IRQHandler+0x514>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615a:	2b00      	cmp	r3, #0
 800615c:	d008      	beq.n	8006170 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f999 	bl	8006496 <UART_EndTransmit_IT>
    return;
 8006164:	e004      	b.n	8006170 <HAL_UART_IRQHandler+0x514>
    return;
 8006166:	bf00      	nop
 8006168:	e002      	b.n	8006170 <HAL_UART_IRQHandler+0x514>
      return;
 800616a:	bf00      	nop
 800616c:	e000      	b.n	8006170 <HAL_UART_IRQHandler+0x514>
      return;
 800616e:	bf00      	nop
  }
}
 8006170:	37e8      	adds	r7, #232	; 0xe8
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop

08006178 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061ac:	bf00      	nop
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b090      	sub	sp, #64	; 0x40
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061c8:	e050      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d04c      	beq.n	800626c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80061d8:	f7fc fb12 	bl	8002800 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d241      	bcs.n	800626c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80061fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	330c      	adds	r3, #12
 8006206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006208:	637a      	str	r2, [r7, #52]	; 0x34
 800620a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800620e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006210:	e841 2300 	strex	r3, r2, [r1]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1e5      	bne.n	80061e8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3314      	adds	r3, #20
 8006222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	e853 3f00 	ldrex	r3, [r3]
 800622a:	613b      	str	r3, [r7, #16]
   return(result);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f023 0301 	bic.w	r3, r3, #1
 8006232:	63bb      	str	r3, [r7, #56]	; 0x38
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3314      	adds	r3, #20
 800623a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800623c:	623a      	str	r2, [r7, #32]
 800623e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006240:	69f9      	ldr	r1, [r7, #28]
 8006242:	6a3a      	ldr	r2, [r7, #32]
 8006244:	e841 2300 	strex	r3, r2, [r1]
 8006248:	61bb      	str	r3, [r7, #24]
   return(result);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1e5      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2220      	movs	r2, #32
 8006254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e00f      	b.n	800628c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4013      	ands	r3, r2
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	bf0c      	ite	eq
 800627c:	2301      	moveq	r3, #1
 800627e:	2300      	movne	r3, #0
 8006280:	b2db      	uxtb	r3, r3
 8006282:	461a      	mov	r2, r3
 8006284:	79fb      	ldrb	r3, [r7, #7]
 8006286:	429a      	cmp	r2, r3
 8006288:	d09f      	beq.n	80061ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3740      	adds	r7, #64	; 0x40
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	4613      	mov	r3, r2
 80062a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2222      	movs	r2, #34	; 0x22
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695a      	ldr	r2, [r3, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0201 	orr.w	r2, r2, #1
 80062e8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68da      	ldr	r2, [r3, #12]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0220 	orr.w	r2, r2, #32
 80062f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006308:	b480      	push	{r7}
 800630a:	b095      	sub	sp, #84	; 0x54
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800631a:	e853 3f00 	ldrex	r3, [r3]
 800631e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	330c      	adds	r3, #12
 800632e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006330:	643a      	str	r2, [r7, #64]	; 0x40
 8006332:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006338:	e841 2300 	strex	r3, r2, [r1]
 800633c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	2b00      	cmp	r3, #0
 8006342:	d1e5      	bne.n	8006310 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3314      	adds	r3, #20
 800634a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	61fb      	str	r3, [r7, #28]
   return(result);
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	f023 0301 	bic.w	r3, r3, #1
 800635a:	64bb      	str	r3, [r7, #72]	; 0x48
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3314      	adds	r3, #20
 8006362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800636a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e5      	bne.n	8006344 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	2b01      	cmp	r3, #1
 800637e:	d119      	bne.n	80063b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	f023 0310 	bic.w	r3, r3, #16
 8006396:	647b      	str	r3, [r7, #68]	; 0x44
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063a0:	61ba      	str	r2, [r7, #24]
 80063a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	6979      	ldr	r1, [r7, #20]
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	613b      	str	r3, [r7, #16]
   return(result);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80063c2:	bf00      	nop
 80063c4:	3754      	adds	r7, #84	; 0x54
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2200      	movs	r2, #0
 80063e0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f7ff fecf 	bl	800618c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ee:	bf00      	nop
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b085      	sub	sp, #20
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b21      	cmp	r3, #33	; 0x21
 8006408:	d13e      	bne.n	8006488 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d114      	bne.n	800643e <UART_Transmit_IT+0x48>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d110      	bne.n	800643e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a1b      	ldr	r3, [r3, #32]
 8006420:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006430:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]
 800643c:	e008      	b.n	8006450 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	1c59      	adds	r1, r3, #1
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	6211      	str	r1, [r2, #32]
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006454:	b29b      	uxth	r3, r3
 8006456:	3b01      	subs	r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	4619      	mov	r1, r3
 800645e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10f      	bne.n	8006484 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68da      	ldr	r2, [r3, #12]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006472:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006482:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3714      	adds	r7, #20
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr

08006496 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff fe5e 	bl	8006178 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b08c      	sub	sp, #48	; 0x30
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b22      	cmp	r3, #34	; 0x22
 80064d8:	f040 80ab 	bne.w	8006632 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e4:	d117      	bne.n	8006516 <UART_Receive_IT+0x50>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d113      	bne.n	8006516 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80064ee:	2300      	movs	r3, #0
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006504:	b29a      	uxth	r2, r3
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	629a      	str	r2, [r3, #40]	; 0x28
 8006514:	e026      	b.n	8006564 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d007      	beq.n	800653a <UART_Receive_IT+0x74>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <UART_Receive_IT+0x82>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e008      	b.n	800655a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006554:	b2da      	uxtb	r2, r3
 8006556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006558:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29b      	uxth	r3, r3
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4619      	mov	r1, r3
 8006572:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006574:	2b00      	cmp	r3, #0
 8006576:	d15a      	bne.n	800662e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0220 	bic.w	r2, r2, #32
 8006586:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006596:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695a      	ldr	r2, [r3, #20]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0201 	bic.w	r2, r2, #1
 80065a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d135      	bne.n	8006624 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	330c      	adds	r3, #12
 80065c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	613b      	str	r3, [r7, #16]
   return(result);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	f023 0310 	bic.w	r3, r3, #16
 80065d4:	627b      	str	r3, [r7, #36]	; 0x24
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	623a      	str	r2, [r7, #32]
 80065e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e2:	69f9      	ldr	r1, [r7, #28]
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	e841 2300 	strex	r3, r2, [r1]
 80065ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1e5      	bne.n	80065be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0310 	and.w	r3, r3, #16
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d10a      	bne.n	8006616 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006600:	2300      	movs	r3, #0
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661a:	4619      	mov	r1, r3
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff fdbf 	bl	80061a0 <HAL_UARTEx_RxEventCallback>
 8006622:	e002      	b.n	800662a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fa ff9d 	bl	8001564 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	e002      	b.n	8006634 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006632:	2302      	movs	r3, #2
  }
}
 8006634:	4618      	mov	r0, r3
 8006636:	3730      	adds	r7, #48	; 0x30
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800663c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006640:	b0c0      	sub	sp, #256	; 0x100
 8006642:	af00      	add	r7, sp, #0
 8006644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006658:	68d9      	ldr	r1, [r3, #12]
 800665a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	ea40 0301 	orr.w	r3, r0, r1
 8006664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	695b      	ldr	r3, [r3, #20]
 800667a:	431a      	orrs	r2, r3
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	4313      	orrs	r3, r2
 8006684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006694:	f021 010c 	bic.w	r1, r1, #12
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066a2:	430b      	orrs	r3, r1
 80066a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b6:	6999      	ldr	r1, [r3, #24]
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	ea40 0301 	orr.w	r3, r0, r1
 80066c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b8f      	ldr	r3, [pc, #572]	; (8006908 <UART_SetConfig+0x2cc>)
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d005      	beq.n	80066dc <UART_SetConfig+0xa0>
 80066d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	4b8d      	ldr	r3, [pc, #564]	; (800690c <UART_SetConfig+0x2d0>)
 80066d8:	429a      	cmp	r2, r3
 80066da:	d104      	bne.n	80066e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066dc:	f7fe f890 	bl	8004800 <HAL_RCC_GetPCLK2Freq>
 80066e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066e4:	e003      	b.n	80066ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066e6:	f7fe f877 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80066ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f2:	69db      	ldr	r3, [r3, #28]
 80066f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f8:	f040 810c 	bne.w	8006914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006700:	2200      	movs	r2, #0
 8006702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800670a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800670e:	4622      	mov	r2, r4
 8006710:	462b      	mov	r3, r5
 8006712:	1891      	adds	r1, r2, r2
 8006714:	65b9      	str	r1, [r7, #88]	; 0x58
 8006716:	415b      	adcs	r3, r3
 8006718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800671a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800671e:	4621      	mov	r1, r4
 8006720:	eb12 0801 	adds.w	r8, r2, r1
 8006724:	4629      	mov	r1, r5
 8006726:	eb43 0901 	adc.w	r9, r3, r1
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800673a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800673e:	4690      	mov	r8, r2
 8006740:	4699      	mov	r9, r3
 8006742:	4623      	mov	r3, r4
 8006744:	eb18 0303 	adds.w	r3, r8, r3
 8006748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800674c:	462b      	mov	r3, r5
 800674e:	eb49 0303 	adc.w	r3, r9, r3
 8006752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800676a:	460b      	mov	r3, r1
 800676c:	18db      	adds	r3, r3, r3
 800676e:	653b      	str	r3, [r7, #80]	; 0x50
 8006770:	4613      	mov	r3, r2
 8006772:	eb42 0303 	adc.w	r3, r2, r3
 8006776:	657b      	str	r3, [r7, #84]	; 0x54
 8006778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800677c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006780:	f7fa fa82 	bl	8000c88 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4b61      	ldr	r3, [pc, #388]	; (8006910 <UART_SetConfig+0x2d4>)
 800678a:	fba3 2302 	umull	r2, r3, r3, r2
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	011c      	lsls	r4, r3, #4
 8006792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006796:	2200      	movs	r2, #0
 8006798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800679c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067a4:	4642      	mov	r2, r8
 80067a6:	464b      	mov	r3, r9
 80067a8:	1891      	adds	r1, r2, r2
 80067aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80067ac:	415b      	adcs	r3, r3
 80067ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067b4:	4641      	mov	r1, r8
 80067b6:	eb12 0a01 	adds.w	sl, r2, r1
 80067ba:	4649      	mov	r1, r9
 80067bc:	eb43 0b01 	adc.w	fp, r3, r1
 80067c0:	f04f 0200 	mov.w	r2, #0
 80067c4:	f04f 0300 	mov.w	r3, #0
 80067c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067d4:	4692      	mov	sl, r2
 80067d6:	469b      	mov	fp, r3
 80067d8:	4643      	mov	r3, r8
 80067da:	eb1a 0303 	adds.w	r3, sl, r3
 80067de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e2:	464b      	mov	r3, r9
 80067e4:	eb4b 0303 	adc.w	r3, fp, r3
 80067e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006800:	460b      	mov	r3, r1
 8006802:	18db      	adds	r3, r3, r3
 8006804:	643b      	str	r3, [r7, #64]	; 0x40
 8006806:	4613      	mov	r3, r2
 8006808:	eb42 0303 	adc.w	r3, r2, r3
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
 800680e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006816:	f7fa fa37 	bl	8000c88 <__aeabi_uldivmod>
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	4611      	mov	r1, r2
 8006820:	4b3b      	ldr	r3, [pc, #236]	; (8006910 <UART_SetConfig+0x2d4>)
 8006822:	fba3 2301 	umull	r2, r3, r3, r1
 8006826:	095b      	lsrs	r3, r3, #5
 8006828:	2264      	movs	r2, #100	; 0x64
 800682a:	fb02 f303 	mul.w	r3, r2, r3
 800682e:	1acb      	subs	r3, r1, r3
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006836:	4b36      	ldr	r3, [pc, #216]	; (8006910 <UART_SetConfig+0x2d4>)
 8006838:	fba3 2302 	umull	r2, r3, r3, r2
 800683c:	095b      	lsrs	r3, r3, #5
 800683e:	005b      	lsls	r3, r3, #1
 8006840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006844:	441c      	add	r4, r3
 8006846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800684a:	2200      	movs	r2, #0
 800684c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006858:	4642      	mov	r2, r8
 800685a:	464b      	mov	r3, r9
 800685c:	1891      	adds	r1, r2, r2
 800685e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006860:	415b      	adcs	r3, r3
 8006862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006868:	4641      	mov	r1, r8
 800686a:	1851      	adds	r1, r2, r1
 800686c:	6339      	str	r1, [r7, #48]	; 0x30
 800686e:	4649      	mov	r1, r9
 8006870:	414b      	adcs	r3, r1
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	f04f 0200 	mov.w	r2, #0
 8006878:	f04f 0300 	mov.w	r3, #0
 800687c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006880:	4659      	mov	r1, fp
 8006882:	00cb      	lsls	r3, r1, #3
 8006884:	4651      	mov	r1, sl
 8006886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800688a:	4651      	mov	r1, sl
 800688c:	00ca      	lsls	r2, r1, #3
 800688e:	4610      	mov	r0, r2
 8006890:	4619      	mov	r1, r3
 8006892:	4603      	mov	r3, r0
 8006894:	4642      	mov	r2, r8
 8006896:	189b      	adds	r3, r3, r2
 8006898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800689c:	464b      	mov	r3, r9
 800689e:	460a      	mov	r2, r1
 80068a0:	eb42 0303 	adc.w	r3, r2, r3
 80068a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068bc:	460b      	mov	r3, r1
 80068be:	18db      	adds	r3, r3, r3
 80068c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80068c2:	4613      	mov	r3, r2
 80068c4:	eb42 0303 	adc.w	r3, r2, r3
 80068c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068d2:	f7fa f9d9 	bl	8000c88 <__aeabi_uldivmod>
 80068d6:	4602      	mov	r2, r0
 80068d8:	460b      	mov	r3, r1
 80068da:	4b0d      	ldr	r3, [pc, #52]	; (8006910 <UART_SetConfig+0x2d4>)
 80068dc:	fba3 1302 	umull	r1, r3, r3, r2
 80068e0:	095b      	lsrs	r3, r3, #5
 80068e2:	2164      	movs	r1, #100	; 0x64
 80068e4:	fb01 f303 	mul.w	r3, r1, r3
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	3332      	adds	r3, #50	; 0x32
 80068ee:	4a08      	ldr	r2, [pc, #32]	; (8006910 <UART_SetConfig+0x2d4>)
 80068f0:	fba2 2303 	umull	r2, r3, r2, r3
 80068f4:	095b      	lsrs	r3, r3, #5
 80068f6:	f003 0207 	and.w	r2, r3, #7
 80068fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4422      	add	r2, r4
 8006902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006904:	e105      	b.n	8006b12 <UART_SetConfig+0x4d6>
 8006906:	bf00      	nop
 8006908:	40011000 	.word	0x40011000
 800690c:	40011400 	.word	0x40011400
 8006910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006918:	2200      	movs	r2, #0
 800691a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800691e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006926:	4642      	mov	r2, r8
 8006928:	464b      	mov	r3, r9
 800692a:	1891      	adds	r1, r2, r2
 800692c:	6239      	str	r1, [r7, #32]
 800692e:	415b      	adcs	r3, r3
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
 8006932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006936:	4641      	mov	r1, r8
 8006938:	1854      	adds	r4, r2, r1
 800693a:	4649      	mov	r1, r9
 800693c:	eb43 0501 	adc.w	r5, r3, r1
 8006940:	f04f 0200 	mov.w	r2, #0
 8006944:	f04f 0300 	mov.w	r3, #0
 8006948:	00eb      	lsls	r3, r5, #3
 800694a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800694e:	00e2      	lsls	r2, r4, #3
 8006950:	4614      	mov	r4, r2
 8006952:	461d      	mov	r5, r3
 8006954:	4643      	mov	r3, r8
 8006956:	18e3      	adds	r3, r4, r3
 8006958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800695c:	464b      	mov	r3, r9
 800695e:	eb45 0303 	adc.w	r3, r5, r3
 8006962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006982:	4629      	mov	r1, r5
 8006984:	008b      	lsls	r3, r1, #2
 8006986:	4621      	mov	r1, r4
 8006988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800698c:	4621      	mov	r1, r4
 800698e:	008a      	lsls	r2, r1, #2
 8006990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006994:	f7fa f978 	bl	8000c88 <__aeabi_uldivmod>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4b60      	ldr	r3, [pc, #384]	; (8006b20 <UART_SetConfig+0x4e4>)
 800699e:	fba3 2302 	umull	r2, r3, r3, r2
 80069a2:	095b      	lsrs	r3, r3, #5
 80069a4:	011c      	lsls	r4, r3, #4
 80069a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069b8:	4642      	mov	r2, r8
 80069ba:	464b      	mov	r3, r9
 80069bc:	1891      	adds	r1, r2, r2
 80069be:	61b9      	str	r1, [r7, #24]
 80069c0:	415b      	adcs	r3, r3
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069c8:	4641      	mov	r1, r8
 80069ca:	1851      	adds	r1, r2, r1
 80069cc:	6139      	str	r1, [r7, #16]
 80069ce:	4649      	mov	r1, r9
 80069d0:	414b      	adcs	r3, r1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	f04f 0200 	mov.w	r2, #0
 80069d8:	f04f 0300 	mov.w	r3, #0
 80069dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069e0:	4659      	mov	r1, fp
 80069e2:	00cb      	lsls	r3, r1, #3
 80069e4:	4651      	mov	r1, sl
 80069e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ea:	4651      	mov	r1, sl
 80069ec:	00ca      	lsls	r2, r1, #3
 80069ee:	4610      	mov	r0, r2
 80069f0:	4619      	mov	r1, r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	4642      	mov	r2, r8
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069fc:	464b      	mov	r3, r9
 80069fe:	460a      	mov	r2, r1
 8006a00:	eb42 0303 	adc.w	r3, r2, r3
 8006a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a20:	4649      	mov	r1, r9
 8006a22:	008b      	lsls	r3, r1, #2
 8006a24:	4641      	mov	r1, r8
 8006a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2a:	4641      	mov	r1, r8
 8006a2c:	008a      	lsls	r2, r1, #2
 8006a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a32:	f7fa f929 	bl	8000c88 <__aeabi_uldivmod>
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4b39      	ldr	r3, [pc, #228]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a40:	095b      	lsrs	r3, r3, #5
 8006a42:	2164      	movs	r1, #100	; 0x64
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	011b      	lsls	r3, r3, #4
 8006a4c:	3332      	adds	r3, #50	; 0x32
 8006a4e:	4a34      	ldr	r2, [pc, #208]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	095b      	lsrs	r3, r3, #5
 8006a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a5a:	441c      	add	r4, r3
 8006a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a60:	2200      	movs	r2, #0
 8006a62:	673b      	str	r3, [r7, #112]	; 0x70
 8006a64:	677a      	str	r2, [r7, #116]	; 0x74
 8006a66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a6a:	4642      	mov	r2, r8
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	1891      	adds	r1, r2, r2
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	415b      	adcs	r3, r3
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a7a:	4641      	mov	r1, r8
 8006a7c:	1851      	adds	r1, r2, r1
 8006a7e:	6039      	str	r1, [r7, #0]
 8006a80:	4649      	mov	r1, r9
 8006a82:	414b      	adcs	r3, r1
 8006a84:	607b      	str	r3, [r7, #4]
 8006a86:	f04f 0200 	mov.w	r2, #0
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a92:	4659      	mov	r1, fp
 8006a94:	00cb      	lsls	r3, r1, #3
 8006a96:	4651      	mov	r1, sl
 8006a98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	00ca      	lsls	r2, r1, #3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4642      	mov	r2, r8
 8006aa8:	189b      	adds	r3, r3, r2
 8006aaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aac:	464b      	mov	r3, r9
 8006aae:	460a      	mov	r2, r1
 8006ab0:	eb42 0303 	adc.w	r3, r2, r3
 8006ab4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	663b      	str	r3, [r7, #96]	; 0x60
 8006ac0:	667a      	str	r2, [r7, #100]	; 0x64
 8006ac2:	f04f 0200 	mov.w	r2, #0
 8006ac6:	f04f 0300 	mov.w	r3, #0
 8006aca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006ace:	4649      	mov	r1, r9
 8006ad0:	008b      	lsls	r3, r1, #2
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ad8:	4641      	mov	r1, r8
 8006ada:	008a      	lsls	r2, r1, #2
 8006adc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ae0:	f7fa f8d2 	bl	8000c88 <__aeabi_uldivmod>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006aea:	fba3 1302 	umull	r1, r3, r3, r2
 8006aee:	095b      	lsrs	r3, r3, #5
 8006af0:	2164      	movs	r1, #100	; 0x64
 8006af2:	fb01 f303 	mul.w	r3, r1, r3
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	3332      	adds	r3, #50	; 0x32
 8006afc:	4a08      	ldr	r2, [pc, #32]	; (8006b20 <UART_SetConfig+0x4e4>)
 8006afe:	fba2 2303 	umull	r2, r3, r2, r3
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	f003 020f 	and.w	r2, r3, #15
 8006b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4422      	add	r2, r4
 8006b10:	609a      	str	r2, [r3, #8]
}
 8006b12:	bf00      	nop
 8006b14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b1e:	bf00      	nop
 8006b20:	51eb851f 	.word	0x51eb851f

08006b24 <atoi>:
 8006b24:	220a      	movs	r2, #10
 8006b26:	2100      	movs	r1, #0
 8006b28:	f001 be0e 	b.w	8008748 <strtol>

08006b2c <__errno>:
 8006b2c:	4b01      	ldr	r3, [pc, #4]	; (8006b34 <__errno+0x8>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000294 	.word	0x20000294

08006b38 <__libc_init_array>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4d0d      	ldr	r5, [pc, #52]	; (8006b70 <__libc_init_array+0x38>)
 8006b3c:	4c0d      	ldr	r4, [pc, #52]	; (8006b74 <__libc_init_array+0x3c>)
 8006b3e:	1b64      	subs	r4, r4, r5
 8006b40:	10a4      	asrs	r4, r4, #2
 8006b42:	2600      	movs	r6, #0
 8006b44:	42a6      	cmp	r6, r4
 8006b46:	d109      	bne.n	8006b5c <__libc_init_array+0x24>
 8006b48:	4d0b      	ldr	r5, [pc, #44]	; (8006b78 <__libc_init_array+0x40>)
 8006b4a:	4c0c      	ldr	r4, [pc, #48]	; (8006b7c <__libc_init_array+0x44>)
 8006b4c:	f004 fd2a 	bl	800b5a4 <_init>
 8006b50:	1b64      	subs	r4, r4, r5
 8006b52:	10a4      	asrs	r4, r4, #2
 8006b54:	2600      	movs	r6, #0
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	d105      	bne.n	8006b66 <__libc_init_array+0x2e>
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b60:	4798      	blx	r3
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7ee      	b.n	8006b44 <__libc_init_array+0xc>
 8006b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6a:	4798      	blx	r3
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	e7f2      	b.n	8006b56 <__libc_init_array+0x1e>
 8006b70:	0800c844 	.word	0x0800c844
 8006b74:	0800c844 	.word	0x0800c844
 8006b78:	0800c844 	.word	0x0800c844
 8006b7c:	0800c848 	.word	0x0800c848

08006b80 <memset>:
 8006b80:	4402      	add	r2, r0
 8006b82:	4603      	mov	r3, r0
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d100      	bne.n	8006b8a <memset+0xa>
 8006b88:	4770      	bx	lr
 8006b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b8e:	e7f9      	b.n	8006b84 <memset+0x4>

08006b90 <__cvt>:
 8006b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	ec55 4b10 	vmov	r4, r5, d0
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	460e      	mov	r6, r1
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	462b      	mov	r3, r5
 8006ba0:	bfbb      	ittet	lt
 8006ba2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ba6:	461d      	movlt	r5, r3
 8006ba8:	2300      	movge	r3, #0
 8006baa:	232d      	movlt	r3, #45	; 0x2d
 8006bac:	700b      	strb	r3, [r1, #0]
 8006bae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bb0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bb4:	4691      	mov	r9, r2
 8006bb6:	f023 0820 	bic.w	r8, r3, #32
 8006bba:	bfbc      	itt	lt
 8006bbc:	4622      	movlt	r2, r4
 8006bbe:	4614      	movlt	r4, r2
 8006bc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bc4:	d005      	beq.n	8006bd2 <__cvt+0x42>
 8006bc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bca:	d100      	bne.n	8006bce <__cvt+0x3e>
 8006bcc:	3601      	adds	r6, #1
 8006bce:	2102      	movs	r1, #2
 8006bd0:	e000      	b.n	8006bd4 <__cvt+0x44>
 8006bd2:	2103      	movs	r1, #3
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9301      	str	r3, [sp, #4]
 8006bd8:	ab02      	add	r3, sp, #8
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	ec45 4b10 	vmov	d0, r4, r5
 8006be0:	4653      	mov	r3, sl
 8006be2:	4632      	mov	r2, r6
 8006be4:	f001 ff08 	bl	80089f8 <_dtoa_r>
 8006be8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bec:	4607      	mov	r7, r0
 8006bee:	d102      	bne.n	8006bf6 <__cvt+0x66>
 8006bf0:	f019 0f01 	tst.w	r9, #1
 8006bf4:	d022      	beq.n	8006c3c <__cvt+0xac>
 8006bf6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bfa:	eb07 0906 	add.w	r9, r7, r6
 8006bfe:	d110      	bne.n	8006c22 <__cvt+0x92>
 8006c00:	783b      	ldrb	r3, [r7, #0]
 8006c02:	2b30      	cmp	r3, #48	; 0x30
 8006c04:	d10a      	bne.n	8006c1c <__cvt+0x8c>
 8006c06:	2200      	movs	r2, #0
 8006c08:	2300      	movs	r3, #0
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	f7f9 ff5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c12:	b918      	cbnz	r0, 8006c1c <__cvt+0x8c>
 8006c14:	f1c6 0601 	rsb	r6, r6, #1
 8006c18:	f8ca 6000 	str.w	r6, [sl]
 8006c1c:	f8da 3000 	ldr.w	r3, [sl]
 8006c20:	4499      	add	r9, r3
 8006c22:	2200      	movs	r2, #0
 8006c24:	2300      	movs	r3, #0
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 ff4d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c2e:	b108      	cbz	r0, 8006c34 <__cvt+0xa4>
 8006c30:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c34:	2230      	movs	r2, #48	; 0x30
 8006c36:	9b03      	ldr	r3, [sp, #12]
 8006c38:	454b      	cmp	r3, r9
 8006c3a:	d307      	bcc.n	8006c4c <__cvt+0xbc>
 8006c3c:	9b03      	ldr	r3, [sp, #12]
 8006c3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c40:	1bdb      	subs	r3, r3, r7
 8006c42:	4638      	mov	r0, r7
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	b004      	add	sp, #16
 8006c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4c:	1c59      	adds	r1, r3, #1
 8006c4e:	9103      	str	r1, [sp, #12]
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e7f0      	b.n	8006c36 <__cvt+0xa6>

08006c54 <__exponent>:
 8006c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c56:	4603      	mov	r3, r0
 8006c58:	2900      	cmp	r1, #0
 8006c5a:	bfb8      	it	lt
 8006c5c:	4249      	neglt	r1, r1
 8006c5e:	f803 2b02 	strb.w	r2, [r3], #2
 8006c62:	bfb4      	ite	lt
 8006c64:	222d      	movlt	r2, #45	; 0x2d
 8006c66:	222b      	movge	r2, #43	; 0x2b
 8006c68:	2909      	cmp	r1, #9
 8006c6a:	7042      	strb	r2, [r0, #1]
 8006c6c:	dd2a      	ble.n	8006cc4 <__exponent+0x70>
 8006c6e:	f10d 0407 	add.w	r4, sp, #7
 8006c72:	46a4      	mov	ip, r4
 8006c74:	270a      	movs	r7, #10
 8006c76:	46a6      	mov	lr, r4
 8006c78:	460a      	mov	r2, r1
 8006c7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c7e:	fb07 1516 	mls	r5, r7, r6, r1
 8006c82:	3530      	adds	r5, #48	; 0x30
 8006c84:	2a63      	cmp	r2, #99	; 0x63
 8006c86:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c8e:	4631      	mov	r1, r6
 8006c90:	dcf1      	bgt.n	8006c76 <__exponent+0x22>
 8006c92:	3130      	adds	r1, #48	; 0x30
 8006c94:	f1ae 0502 	sub.w	r5, lr, #2
 8006c98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c9c:	1c44      	adds	r4, r0, #1
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	4561      	cmp	r1, ip
 8006ca2:	d30a      	bcc.n	8006cba <__exponent+0x66>
 8006ca4:	f10d 0209 	add.w	r2, sp, #9
 8006ca8:	eba2 020e 	sub.w	r2, r2, lr
 8006cac:	4565      	cmp	r5, ip
 8006cae:	bf88      	it	hi
 8006cb0:	2200      	movhi	r2, #0
 8006cb2:	4413      	add	r3, r2
 8006cb4:	1a18      	subs	r0, r3, r0
 8006cb6:	b003      	add	sp, #12
 8006cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cbe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cc2:	e7ed      	b.n	8006ca0 <__exponent+0x4c>
 8006cc4:	2330      	movs	r3, #48	; 0x30
 8006cc6:	3130      	adds	r1, #48	; 0x30
 8006cc8:	7083      	strb	r3, [r0, #2]
 8006cca:	70c1      	strb	r1, [r0, #3]
 8006ccc:	1d03      	adds	r3, r0, #4
 8006cce:	e7f1      	b.n	8006cb4 <__exponent+0x60>

08006cd0 <_printf_float>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ed2d 8b02 	vpush	{d8}
 8006cd8:	b08d      	sub	sp, #52	; 0x34
 8006cda:	460c      	mov	r4, r1
 8006cdc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	461f      	mov	r7, r3
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	f003 f99b 	bl	800a020 <_localeconv_r>
 8006cea:	f8d0 a000 	ldr.w	sl, [r0]
 8006cee:	4650      	mov	r0, sl
 8006cf0:	f7f9 fa6e 	bl	80001d0 <strlen>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cf8:	6823      	ldr	r3, [r4, #0]
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	f8d8 3000 	ldr.w	r3, [r8]
 8006d00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d04:	3307      	adds	r3, #7
 8006d06:	f023 0307 	bic.w	r3, r3, #7
 8006d0a:	f103 0208 	add.w	r2, r3, #8
 8006d0e:	f8c8 2000 	str.w	r2, [r8]
 8006d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d22:	9307      	str	r3, [sp, #28]
 8006d24:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d28:	ee08 0a10 	vmov	s16, r0
 8006d2c:	4b9f      	ldr	r3, [pc, #636]	; (8006fac <_printf_float+0x2dc>)
 8006d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d32:	f04f 32ff 	mov.w	r2, #4294967295
 8006d36:	f7f9 fef9 	bl	8000b2c <__aeabi_dcmpun>
 8006d3a:	bb88      	cbnz	r0, 8006da0 <_printf_float+0xd0>
 8006d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d40:	4b9a      	ldr	r3, [pc, #616]	; (8006fac <_printf_float+0x2dc>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	f7f9 fed3 	bl	8000af0 <__aeabi_dcmple>
 8006d4a:	bb48      	cbnz	r0, 8006da0 <_printf_float+0xd0>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4640      	mov	r0, r8
 8006d52:	4649      	mov	r1, r9
 8006d54:	f7f9 fec2 	bl	8000adc <__aeabi_dcmplt>
 8006d58:	b110      	cbz	r0, 8006d60 <_printf_float+0x90>
 8006d5a:	232d      	movs	r3, #45	; 0x2d
 8006d5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d60:	4b93      	ldr	r3, [pc, #588]	; (8006fb0 <_printf_float+0x2e0>)
 8006d62:	4894      	ldr	r0, [pc, #592]	; (8006fb4 <_printf_float+0x2e4>)
 8006d64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d68:	bf94      	ite	ls
 8006d6a:	4698      	movls	r8, r3
 8006d6c:	4680      	movhi	r8, r0
 8006d6e:	2303      	movs	r3, #3
 8006d70:	6123      	str	r3, [r4, #16]
 8006d72:	9b05      	ldr	r3, [sp, #20]
 8006d74:	f023 0204 	bic.w	r2, r3, #4
 8006d78:	6022      	str	r2, [r4, #0]
 8006d7a:	f04f 0900 	mov.w	r9, #0
 8006d7e:	9700      	str	r7, [sp, #0]
 8006d80:	4633      	mov	r3, r6
 8006d82:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d84:	4621      	mov	r1, r4
 8006d86:	4628      	mov	r0, r5
 8006d88:	f000 f9d8 	bl	800713c <_printf_common>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f040 8090 	bne.w	8006eb2 <_printf_float+0x1e2>
 8006d92:	f04f 30ff 	mov.w	r0, #4294967295
 8006d96:	b00d      	add	sp, #52	; 0x34
 8006d98:	ecbd 8b02 	vpop	{d8}
 8006d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	4649      	mov	r1, r9
 8006da8:	f7f9 fec0 	bl	8000b2c <__aeabi_dcmpun>
 8006dac:	b140      	cbz	r0, 8006dc0 <_printf_float+0xf0>
 8006dae:	464b      	mov	r3, r9
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bfbc      	itt	lt
 8006db4:	232d      	movlt	r3, #45	; 0x2d
 8006db6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dba:	487f      	ldr	r0, [pc, #508]	; (8006fb8 <_printf_float+0x2e8>)
 8006dbc:	4b7f      	ldr	r3, [pc, #508]	; (8006fbc <_printf_float+0x2ec>)
 8006dbe:	e7d1      	b.n	8006d64 <_printf_float+0x94>
 8006dc0:	6863      	ldr	r3, [r4, #4]
 8006dc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dc6:	9206      	str	r2, [sp, #24]
 8006dc8:	1c5a      	adds	r2, r3, #1
 8006dca:	d13f      	bne.n	8006e4c <_printf_float+0x17c>
 8006dcc:	2306      	movs	r3, #6
 8006dce:	6063      	str	r3, [r4, #4]
 8006dd0:	9b05      	ldr	r3, [sp, #20]
 8006dd2:	6861      	ldr	r1, [r4, #4]
 8006dd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006dd8:	2300      	movs	r3, #0
 8006dda:	9303      	str	r3, [sp, #12]
 8006ddc:	ab0a      	add	r3, sp, #40	; 0x28
 8006dde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006de2:	ab09      	add	r3, sp, #36	; 0x24
 8006de4:	ec49 8b10 	vmov	d0, r8, r9
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	6022      	str	r2, [r4, #0]
 8006dec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006df0:	4628      	mov	r0, r5
 8006df2:	f7ff fecd 	bl	8006b90 <__cvt>
 8006df6:	9b06      	ldr	r3, [sp, #24]
 8006df8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dfa:	2b47      	cmp	r3, #71	; 0x47
 8006dfc:	4680      	mov	r8, r0
 8006dfe:	d108      	bne.n	8006e12 <_printf_float+0x142>
 8006e00:	1cc8      	adds	r0, r1, #3
 8006e02:	db02      	blt.n	8006e0a <_printf_float+0x13a>
 8006e04:	6863      	ldr	r3, [r4, #4]
 8006e06:	4299      	cmp	r1, r3
 8006e08:	dd41      	ble.n	8006e8e <_printf_float+0x1be>
 8006e0a:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e0e:	fa5f fb8b 	uxtb.w	fp, fp
 8006e12:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e16:	d820      	bhi.n	8006e5a <_printf_float+0x18a>
 8006e18:	3901      	subs	r1, #1
 8006e1a:	465a      	mov	r2, fp
 8006e1c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e20:	9109      	str	r1, [sp, #36]	; 0x24
 8006e22:	f7ff ff17 	bl	8006c54 <__exponent>
 8006e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e28:	1813      	adds	r3, r2, r0
 8006e2a:	2a01      	cmp	r2, #1
 8006e2c:	4681      	mov	r9, r0
 8006e2e:	6123      	str	r3, [r4, #16]
 8006e30:	dc02      	bgt.n	8006e38 <_printf_float+0x168>
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	07d2      	lsls	r2, r2, #31
 8006e36:	d501      	bpl.n	8006e3c <_printf_float+0x16c>
 8006e38:	3301      	adds	r3, #1
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d09c      	beq.n	8006d7e <_printf_float+0xae>
 8006e44:	232d      	movs	r3, #45	; 0x2d
 8006e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e4a:	e798      	b.n	8006d7e <_printf_float+0xae>
 8006e4c:	9a06      	ldr	r2, [sp, #24]
 8006e4e:	2a47      	cmp	r2, #71	; 0x47
 8006e50:	d1be      	bne.n	8006dd0 <_printf_float+0x100>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1bc      	bne.n	8006dd0 <_printf_float+0x100>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e7b9      	b.n	8006dce <_printf_float+0xfe>
 8006e5a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e5e:	d118      	bne.n	8006e92 <_printf_float+0x1c2>
 8006e60:	2900      	cmp	r1, #0
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	dd0b      	ble.n	8006e7e <_printf_float+0x1ae>
 8006e66:	6121      	str	r1, [r4, #16]
 8006e68:	b913      	cbnz	r3, 8006e70 <_printf_float+0x1a0>
 8006e6a:	6822      	ldr	r2, [r4, #0]
 8006e6c:	07d0      	lsls	r0, r2, #31
 8006e6e:	d502      	bpl.n	8006e76 <_printf_float+0x1a6>
 8006e70:	3301      	adds	r3, #1
 8006e72:	440b      	add	r3, r1
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e78:	f04f 0900 	mov.w	r9, #0
 8006e7c:	e7de      	b.n	8006e3c <_printf_float+0x16c>
 8006e7e:	b913      	cbnz	r3, 8006e86 <_printf_float+0x1b6>
 8006e80:	6822      	ldr	r2, [r4, #0]
 8006e82:	07d2      	lsls	r2, r2, #31
 8006e84:	d501      	bpl.n	8006e8a <_printf_float+0x1ba>
 8006e86:	3302      	adds	r3, #2
 8006e88:	e7f4      	b.n	8006e74 <_printf_float+0x1a4>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e7f2      	b.n	8006e74 <_printf_float+0x1a4>
 8006e8e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e94:	4299      	cmp	r1, r3
 8006e96:	db05      	blt.n	8006ea4 <_printf_float+0x1d4>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	6121      	str	r1, [r4, #16]
 8006e9c:	07d8      	lsls	r0, r3, #31
 8006e9e:	d5ea      	bpl.n	8006e76 <_printf_float+0x1a6>
 8006ea0:	1c4b      	adds	r3, r1, #1
 8006ea2:	e7e7      	b.n	8006e74 <_printf_float+0x1a4>
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	bfd4      	ite	le
 8006ea8:	f1c1 0202 	rsble	r2, r1, #2
 8006eac:	2201      	movgt	r2, #1
 8006eae:	4413      	add	r3, r2
 8006eb0:	e7e0      	b.n	8006e74 <_printf_float+0x1a4>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	055a      	lsls	r2, r3, #21
 8006eb6:	d407      	bmi.n	8006ec8 <_printf_float+0x1f8>
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	4642      	mov	r2, r8
 8006ebc:	4631      	mov	r1, r6
 8006ebe:	4628      	mov	r0, r5
 8006ec0:	47b8      	blx	r7
 8006ec2:	3001      	adds	r0, #1
 8006ec4:	d12c      	bne.n	8006f20 <_printf_float+0x250>
 8006ec6:	e764      	b.n	8006d92 <_printf_float+0xc2>
 8006ec8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ecc:	f240 80e0 	bls.w	8007090 <_printf_float+0x3c0>
 8006ed0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	f7f9 fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d034      	beq.n	8006f4a <_printf_float+0x27a>
 8006ee0:	4a37      	ldr	r2, [pc, #220]	; (8006fc0 <_printf_float+0x2f0>)
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4631      	mov	r1, r6
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	47b8      	blx	r7
 8006eea:	3001      	adds	r0, #1
 8006eec:	f43f af51 	beq.w	8006d92 <_printf_float+0xc2>
 8006ef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	db02      	blt.n	8006efe <_printf_float+0x22e>
 8006ef8:	6823      	ldr	r3, [r4, #0]
 8006efa:	07d8      	lsls	r0, r3, #31
 8006efc:	d510      	bpl.n	8006f20 <_printf_float+0x250>
 8006efe:	ee18 3a10 	vmov	r3, s16
 8006f02:	4652      	mov	r2, sl
 8006f04:	4631      	mov	r1, r6
 8006f06:	4628      	mov	r0, r5
 8006f08:	47b8      	blx	r7
 8006f0a:	3001      	adds	r0, #1
 8006f0c:	f43f af41 	beq.w	8006d92 <_printf_float+0xc2>
 8006f10:	f04f 0800 	mov.w	r8, #0
 8006f14:	f104 091a 	add.w	r9, r4, #26
 8006f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	4543      	cmp	r3, r8
 8006f1e:	dc09      	bgt.n	8006f34 <_printf_float+0x264>
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	079b      	lsls	r3, r3, #30
 8006f24:	f100 8105 	bmi.w	8007132 <_printf_float+0x462>
 8006f28:	68e0      	ldr	r0, [r4, #12]
 8006f2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f2c:	4298      	cmp	r0, r3
 8006f2e:	bfb8      	it	lt
 8006f30:	4618      	movlt	r0, r3
 8006f32:	e730      	b.n	8006d96 <_printf_float+0xc6>
 8006f34:	2301      	movs	r3, #1
 8006f36:	464a      	mov	r2, r9
 8006f38:	4631      	mov	r1, r6
 8006f3a:	4628      	mov	r0, r5
 8006f3c:	47b8      	blx	r7
 8006f3e:	3001      	adds	r0, #1
 8006f40:	f43f af27 	beq.w	8006d92 <_printf_float+0xc2>
 8006f44:	f108 0801 	add.w	r8, r8, #1
 8006f48:	e7e6      	b.n	8006f18 <_printf_float+0x248>
 8006f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dc39      	bgt.n	8006fc4 <_printf_float+0x2f4>
 8006f50:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <_printf_float+0x2f0>)
 8006f52:	2301      	movs	r3, #1
 8006f54:	4631      	mov	r1, r6
 8006f56:	4628      	mov	r0, r5
 8006f58:	47b8      	blx	r7
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	f43f af19 	beq.w	8006d92 <_printf_float+0xc2>
 8006f60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f64:	4313      	orrs	r3, r2
 8006f66:	d102      	bne.n	8006f6e <_printf_float+0x29e>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	07d9      	lsls	r1, r3, #31
 8006f6c:	d5d8      	bpl.n	8006f20 <_printf_float+0x250>
 8006f6e:	ee18 3a10 	vmov	r3, s16
 8006f72:	4652      	mov	r2, sl
 8006f74:	4631      	mov	r1, r6
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b8      	blx	r7
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	f43f af09 	beq.w	8006d92 <_printf_float+0xc2>
 8006f80:	f04f 0900 	mov.w	r9, #0
 8006f84:	f104 0a1a 	add.w	sl, r4, #26
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	425b      	negs	r3, r3
 8006f8c:	454b      	cmp	r3, r9
 8006f8e:	dc01      	bgt.n	8006f94 <_printf_float+0x2c4>
 8006f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f92:	e792      	b.n	8006eba <_printf_float+0x1ea>
 8006f94:	2301      	movs	r3, #1
 8006f96:	4652      	mov	r2, sl
 8006f98:	4631      	mov	r1, r6
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	47b8      	blx	r7
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	f43f aef7 	beq.w	8006d92 <_printf_float+0xc2>
 8006fa4:	f109 0901 	add.w	r9, r9, #1
 8006fa8:	e7ee      	b.n	8006f88 <_printf_float+0x2b8>
 8006faa:	bf00      	nop
 8006fac:	7fefffff 	.word	0x7fefffff
 8006fb0:	0800c390 	.word	0x0800c390
 8006fb4:	0800c394 	.word	0x0800c394
 8006fb8:	0800c39c 	.word	0x0800c39c
 8006fbc:	0800c398 	.word	0x0800c398
 8006fc0:	0800c3a0 	.word	0x0800c3a0
 8006fc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	bfa8      	it	ge
 8006fcc:	461a      	movge	r2, r3
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	4691      	mov	r9, r2
 8006fd2:	dc37      	bgt.n	8007044 <_printf_float+0x374>
 8006fd4:	f04f 0b00 	mov.w	fp, #0
 8006fd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fdc:	f104 021a 	add.w	r2, r4, #26
 8006fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fe2:	9305      	str	r3, [sp, #20]
 8006fe4:	eba3 0309 	sub.w	r3, r3, r9
 8006fe8:	455b      	cmp	r3, fp
 8006fea:	dc33      	bgt.n	8007054 <_printf_float+0x384>
 8006fec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	db3b      	blt.n	800706c <_printf_float+0x39c>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	07da      	lsls	r2, r3, #31
 8006ff8:	d438      	bmi.n	800706c <_printf_float+0x39c>
 8006ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ffc:	9a05      	ldr	r2, [sp, #20]
 8006ffe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007000:	1a9a      	subs	r2, r3, r2
 8007002:	eba3 0901 	sub.w	r9, r3, r1
 8007006:	4591      	cmp	r9, r2
 8007008:	bfa8      	it	ge
 800700a:	4691      	movge	r9, r2
 800700c:	f1b9 0f00 	cmp.w	r9, #0
 8007010:	dc35      	bgt.n	800707e <_printf_float+0x3ae>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800701a:	f104 0a1a 	add.w	sl, r4, #26
 800701e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	eba3 0309 	sub.w	r3, r3, r9
 8007028:	4543      	cmp	r3, r8
 800702a:	f77f af79 	ble.w	8006f20 <_printf_float+0x250>
 800702e:	2301      	movs	r3, #1
 8007030:	4652      	mov	r2, sl
 8007032:	4631      	mov	r1, r6
 8007034:	4628      	mov	r0, r5
 8007036:	47b8      	blx	r7
 8007038:	3001      	adds	r0, #1
 800703a:	f43f aeaa 	beq.w	8006d92 <_printf_float+0xc2>
 800703e:	f108 0801 	add.w	r8, r8, #1
 8007042:	e7ec      	b.n	800701e <_printf_float+0x34e>
 8007044:	4613      	mov	r3, r2
 8007046:	4631      	mov	r1, r6
 8007048:	4642      	mov	r2, r8
 800704a:	4628      	mov	r0, r5
 800704c:	47b8      	blx	r7
 800704e:	3001      	adds	r0, #1
 8007050:	d1c0      	bne.n	8006fd4 <_printf_float+0x304>
 8007052:	e69e      	b.n	8006d92 <_printf_float+0xc2>
 8007054:	2301      	movs	r3, #1
 8007056:	4631      	mov	r1, r6
 8007058:	4628      	mov	r0, r5
 800705a:	9205      	str	r2, [sp, #20]
 800705c:	47b8      	blx	r7
 800705e:	3001      	adds	r0, #1
 8007060:	f43f ae97 	beq.w	8006d92 <_printf_float+0xc2>
 8007064:	9a05      	ldr	r2, [sp, #20]
 8007066:	f10b 0b01 	add.w	fp, fp, #1
 800706a:	e7b9      	b.n	8006fe0 <_printf_float+0x310>
 800706c:	ee18 3a10 	vmov	r3, s16
 8007070:	4652      	mov	r2, sl
 8007072:	4631      	mov	r1, r6
 8007074:	4628      	mov	r0, r5
 8007076:	47b8      	blx	r7
 8007078:	3001      	adds	r0, #1
 800707a:	d1be      	bne.n	8006ffa <_printf_float+0x32a>
 800707c:	e689      	b.n	8006d92 <_printf_float+0xc2>
 800707e:	9a05      	ldr	r2, [sp, #20]
 8007080:	464b      	mov	r3, r9
 8007082:	4442      	add	r2, r8
 8007084:	4631      	mov	r1, r6
 8007086:	4628      	mov	r0, r5
 8007088:	47b8      	blx	r7
 800708a:	3001      	adds	r0, #1
 800708c:	d1c1      	bne.n	8007012 <_printf_float+0x342>
 800708e:	e680      	b.n	8006d92 <_printf_float+0xc2>
 8007090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007092:	2a01      	cmp	r2, #1
 8007094:	dc01      	bgt.n	800709a <_printf_float+0x3ca>
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d538      	bpl.n	800710c <_printf_float+0x43c>
 800709a:	2301      	movs	r3, #1
 800709c:	4642      	mov	r2, r8
 800709e:	4631      	mov	r1, r6
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b8      	blx	r7
 80070a4:	3001      	adds	r0, #1
 80070a6:	f43f ae74 	beq.w	8006d92 <_printf_float+0xc2>
 80070aa:	ee18 3a10 	vmov	r3, s16
 80070ae:	4652      	mov	r2, sl
 80070b0:	4631      	mov	r1, r6
 80070b2:	4628      	mov	r0, r5
 80070b4:	47b8      	blx	r7
 80070b6:	3001      	adds	r0, #1
 80070b8:	f43f ae6b 	beq.w	8006d92 <_printf_float+0xc2>
 80070bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070c0:	2200      	movs	r2, #0
 80070c2:	2300      	movs	r3, #0
 80070c4:	f7f9 fd00 	bl	8000ac8 <__aeabi_dcmpeq>
 80070c8:	b9d8      	cbnz	r0, 8007102 <_printf_float+0x432>
 80070ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070cc:	f108 0201 	add.w	r2, r8, #1
 80070d0:	3b01      	subs	r3, #1
 80070d2:	4631      	mov	r1, r6
 80070d4:	4628      	mov	r0, r5
 80070d6:	47b8      	blx	r7
 80070d8:	3001      	adds	r0, #1
 80070da:	d10e      	bne.n	80070fa <_printf_float+0x42a>
 80070dc:	e659      	b.n	8006d92 <_printf_float+0xc2>
 80070de:	2301      	movs	r3, #1
 80070e0:	4652      	mov	r2, sl
 80070e2:	4631      	mov	r1, r6
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b8      	blx	r7
 80070e8:	3001      	adds	r0, #1
 80070ea:	f43f ae52 	beq.w	8006d92 <_printf_float+0xc2>
 80070ee:	f108 0801 	add.w	r8, r8, #1
 80070f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070f4:	3b01      	subs	r3, #1
 80070f6:	4543      	cmp	r3, r8
 80070f8:	dcf1      	bgt.n	80070de <_printf_float+0x40e>
 80070fa:	464b      	mov	r3, r9
 80070fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007100:	e6dc      	b.n	8006ebc <_printf_float+0x1ec>
 8007102:	f04f 0800 	mov.w	r8, #0
 8007106:	f104 0a1a 	add.w	sl, r4, #26
 800710a:	e7f2      	b.n	80070f2 <_printf_float+0x422>
 800710c:	2301      	movs	r3, #1
 800710e:	4642      	mov	r2, r8
 8007110:	e7df      	b.n	80070d2 <_printf_float+0x402>
 8007112:	2301      	movs	r3, #1
 8007114:	464a      	mov	r2, r9
 8007116:	4631      	mov	r1, r6
 8007118:	4628      	mov	r0, r5
 800711a:	47b8      	blx	r7
 800711c:	3001      	adds	r0, #1
 800711e:	f43f ae38 	beq.w	8006d92 <_printf_float+0xc2>
 8007122:	f108 0801 	add.w	r8, r8, #1
 8007126:	68e3      	ldr	r3, [r4, #12]
 8007128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800712a:	1a5b      	subs	r3, r3, r1
 800712c:	4543      	cmp	r3, r8
 800712e:	dcf0      	bgt.n	8007112 <_printf_float+0x442>
 8007130:	e6fa      	b.n	8006f28 <_printf_float+0x258>
 8007132:	f04f 0800 	mov.w	r8, #0
 8007136:	f104 0919 	add.w	r9, r4, #25
 800713a:	e7f4      	b.n	8007126 <_printf_float+0x456>

0800713c <_printf_common>:
 800713c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	4616      	mov	r6, r2
 8007142:	4699      	mov	r9, r3
 8007144:	688a      	ldr	r2, [r1, #8]
 8007146:	690b      	ldr	r3, [r1, #16]
 8007148:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800714c:	4293      	cmp	r3, r2
 800714e:	bfb8      	it	lt
 8007150:	4613      	movlt	r3, r2
 8007152:	6033      	str	r3, [r6, #0]
 8007154:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007158:	4607      	mov	r7, r0
 800715a:	460c      	mov	r4, r1
 800715c:	b10a      	cbz	r2, 8007162 <_printf_common+0x26>
 800715e:	3301      	adds	r3, #1
 8007160:	6033      	str	r3, [r6, #0]
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	0699      	lsls	r1, r3, #26
 8007166:	bf42      	ittt	mi
 8007168:	6833      	ldrmi	r3, [r6, #0]
 800716a:	3302      	addmi	r3, #2
 800716c:	6033      	strmi	r3, [r6, #0]
 800716e:	6825      	ldr	r5, [r4, #0]
 8007170:	f015 0506 	ands.w	r5, r5, #6
 8007174:	d106      	bne.n	8007184 <_printf_common+0x48>
 8007176:	f104 0a19 	add.w	sl, r4, #25
 800717a:	68e3      	ldr	r3, [r4, #12]
 800717c:	6832      	ldr	r2, [r6, #0]
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	42ab      	cmp	r3, r5
 8007182:	dc26      	bgt.n	80071d2 <_printf_common+0x96>
 8007184:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007188:	1e13      	subs	r3, r2, #0
 800718a:	6822      	ldr	r2, [r4, #0]
 800718c:	bf18      	it	ne
 800718e:	2301      	movne	r3, #1
 8007190:	0692      	lsls	r2, r2, #26
 8007192:	d42b      	bmi.n	80071ec <_printf_common+0xb0>
 8007194:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007198:	4649      	mov	r1, r9
 800719a:	4638      	mov	r0, r7
 800719c:	47c0      	blx	r8
 800719e:	3001      	adds	r0, #1
 80071a0:	d01e      	beq.n	80071e0 <_printf_common+0xa4>
 80071a2:	6823      	ldr	r3, [r4, #0]
 80071a4:	68e5      	ldr	r5, [r4, #12]
 80071a6:	6832      	ldr	r2, [r6, #0]
 80071a8:	f003 0306 	and.w	r3, r3, #6
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	bf08      	it	eq
 80071b0:	1aad      	subeq	r5, r5, r2
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	6922      	ldr	r2, [r4, #16]
 80071b6:	bf0c      	ite	eq
 80071b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071bc:	2500      	movne	r5, #0
 80071be:	4293      	cmp	r3, r2
 80071c0:	bfc4      	itt	gt
 80071c2:	1a9b      	subgt	r3, r3, r2
 80071c4:	18ed      	addgt	r5, r5, r3
 80071c6:	2600      	movs	r6, #0
 80071c8:	341a      	adds	r4, #26
 80071ca:	42b5      	cmp	r5, r6
 80071cc:	d11a      	bne.n	8007204 <_printf_common+0xc8>
 80071ce:	2000      	movs	r0, #0
 80071d0:	e008      	b.n	80071e4 <_printf_common+0xa8>
 80071d2:	2301      	movs	r3, #1
 80071d4:	4652      	mov	r2, sl
 80071d6:	4649      	mov	r1, r9
 80071d8:	4638      	mov	r0, r7
 80071da:	47c0      	blx	r8
 80071dc:	3001      	adds	r0, #1
 80071de:	d103      	bne.n	80071e8 <_printf_common+0xac>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	3501      	adds	r5, #1
 80071ea:	e7c6      	b.n	800717a <_printf_common+0x3e>
 80071ec:	18e1      	adds	r1, r4, r3
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	2030      	movs	r0, #48	; 0x30
 80071f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80071f6:	4422      	add	r2, r4
 80071f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007200:	3302      	adds	r3, #2
 8007202:	e7c7      	b.n	8007194 <_printf_common+0x58>
 8007204:	2301      	movs	r3, #1
 8007206:	4622      	mov	r2, r4
 8007208:	4649      	mov	r1, r9
 800720a:	4638      	mov	r0, r7
 800720c:	47c0      	blx	r8
 800720e:	3001      	adds	r0, #1
 8007210:	d0e6      	beq.n	80071e0 <_printf_common+0xa4>
 8007212:	3601      	adds	r6, #1
 8007214:	e7d9      	b.n	80071ca <_printf_common+0x8e>
	...

08007218 <_printf_i>:
 8007218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800721c:	7e0f      	ldrb	r7, [r1, #24]
 800721e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007220:	2f78      	cmp	r7, #120	; 0x78
 8007222:	4691      	mov	r9, r2
 8007224:	4680      	mov	r8, r0
 8007226:	460c      	mov	r4, r1
 8007228:	469a      	mov	sl, r3
 800722a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800722e:	d807      	bhi.n	8007240 <_printf_i+0x28>
 8007230:	2f62      	cmp	r7, #98	; 0x62
 8007232:	d80a      	bhi.n	800724a <_printf_i+0x32>
 8007234:	2f00      	cmp	r7, #0
 8007236:	f000 80d8 	beq.w	80073ea <_printf_i+0x1d2>
 800723a:	2f58      	cmp	r7, #88	; 0x58
 800723c:	f000 80a3 	beq.w	8007386 <_printf_i+0x16e>
 8007240:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007244:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007248:	e03a      	b.n	80072c0 <_printf_i+0xa8>
 800724a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800724e:	2b15      	cmp	r3, #21
 8007250:	d8f6      	bhi.n	8007240 <_printf_i+0x28>
 8007252:	a101      	add	r1, pc, #4	; (adr r1, 8007258 <_printf_i+0x40>)
 8007254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007258:	080072b1 	.word	0x080072b1
 800725c:	080072c5 	.word	0x080072c5
 8007260:	08007241 	.word	0x08007241
 8007264:	08007241 	.word	0x08007241
 8007268:	08007241 	.word	0x08007241
 800726c:	08007241 	.word	0x08007241
 8007270:	080072c5 	.word	0x080072c5
 8007274:	08007241 	.word	0x08007241
 8007278:	08007241 	.word	0x08007241
 800727c:	08007241 	.word	0x08007241
 8007280:	08007241 	.word	0x08007241
 8007284:	080073d1 	.word	0x080073d1
 8007288:	080072f5 	.word	0x080072f5
 800728c:	080073b3 	.word	0x080073b3
 8007290:	08007241 	.word	0x08007241
 8007294:	08007241 	.word	0x08007241
 8007298:	080073f3 	.word	0x080073f3
 800729c:	08007241 	.word	0x08007241
 80072a0:	080072f5 	.word	0x080072f5
 80072a4:	08007241 	.word	0x08007241
 80072a8:	08007241 	.word	0x08007241
 80072ac:	080073bb 	.word	0x080073bb
 80072b0:	682b      	ldr	r3, [r5, #0]
 80072b2:	1d1a      	adds	r2, r3, #4
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	602a      	str	r2, [r5, #0]
 80072b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072c0:	2301      	movs	r3, #1
 80072c2:	e0a3      	b.n	800740c <_printf_i+0x1f4>
 80072c4:	6820      	ldr	r0, [r4, #0]
 80072c6:	6829      	ldr	r1, [r5, #0]
 80072c8:	0606      	lsls	r6, r0, #24
 80072ca:	f101 0304 	add.w	r3, r1, #4
 80072ce:	d50a      	bpl.n	80072e6 <_printf_i+0xce>
 80072d0:	680e      	ldr	r6, [r1, #0]
 80072d2:	602b      	str	r3, [r5, #0]
 80072d4:	2e00      	cmp	r6, #0
 80072d6:	da03      	bge.n	80072e0 <_printf_i+0xc8>
 80072d8:	232d      	movs	r3, #45	; 0x2d
 80072da:	4276      	negs	r6, r6
 80072dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072e0:	485e      	ldr	r0, [pc, #376]	; (800745c <_printf_i+0x244>)
 80072e2:	230a      	movs	r3, #10
 80072e4:	e019      	b.n	800731a <_printf_i+0x102>
 80072e6:	680e      	ldr	r6, [r1, #0]
 80072e8:	602b      	str	r3, [r5, #0]
 80072ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 80072ee:	bf18      	it	ne
 80072f0:	b236      	sxthne	r6, r6
 80072f2:	e7ef      	b.n	80072d4 <_printf_i+0xbc>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	6820      	ldr	r0, [r4, #0]
 80072f8:	1d19      	adds	r1, r3, #4
 80072fa:	6029      	str	r1, [r5, #0]
 80072fc:	0601      	lsls	r1, r0, #24
 80072fe:	d501      	bpl.n	8007304 <_printf_i+0xec>
 8007300:	681e      	ldr	r6, [r3, #0]
 8007302:	e002      	b.n	800730a <_printf_i+0xf2>
 8007304:	0646      	lsls	r6, r0, #25
 8007306:	d5fb      	bpl.n	8007300 <_printf_i+0xe8>
 8007308:	881e      	ldrh	r6, [r3, #0]
 800730a:	4854      	ldr	r0, [pc, #336]	; (800745c <_printf_i+0x244>)
 800730c:	2f6f      	cmp	r7, #111	; 0x6f
 800730e:	bf0c      	ite	eq
 8007310:	2308      	moveq	r3, #8
 8007312:	230a      	movne	r3, #10
 8007314:	2100      	movs	r1, #0
 8007316:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800731a:	6865      	ldr	r5, [r4, #4]
 800731c:	60a5      	str	r5, [r4, #8]
 800731e:	2d00      	cmp	r5, #0
 8007320:	bfa2      	ittt	ge
 8007322:	6821      	ldrge	r1, [r4, #0]
 8007324:	f021 0104 	bicge.w	r1, r1, #4
 8007328:	6021      	strge	r1, [r4, #0]
 800732a:	b90e      	cbnz	r6, 8007330 <_printf_i+0x118>
 800732c:	2d00      	cmp	r5, #0
 800732e:	d04d      	beq.n	80073cc <_printf_i+0x1b4>
 8007330:	4615      	mov	r5, r2
 8007332:	fbb6 f1f3 	udiv	r1, r6, r3
 8007336:	fb03 6711 	mls	r7, r3, r1, r6
 800733a:	5dc7      	ldrb	r7, [r0, r7]
 800733c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007340:	4637      	mov	r7, r6
 8007342:	42bb      	cmp	r3, r7
 8007344:	460e      	mov	r6, r1
 8007346:	d9f4      	bls.n	8007332 <_printf_i+0x11a>
 8007348:	2b08      	cmp	r3, #8
 800734a:	d10b      	bne.n	8007364 <_printf_i+0x14c>
 800734c:	6823      	ldr	r3, [r4, #0]
 800734e:	07de      	lsls	r6, r3, #31
 8007350:	d508      	bpl.n	8007364 <_printf_i+0x14c>
 8007352:	6923      	ldr	r3, [r4, #16]
 8007354:	6861      	ldr	r1, [r4, #4]
 8007356:	4299      	cmp	r1, r3
 8007358:	bfde      	ittt	le
 800735a:	2330      	movle	r3, #48	; 0x30
 800735c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007360:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007364:	1b52      	subs	r2, r2, r5
 8007366:	6122      	str	r2, [r4, #16]
 8007368:	f8cd a000 	str.w	sl, [sp]
 800736c:	464b      	mov	r3, r9
 800736e:	aa03      	add	r2, sp, #12
 8007370:	4621      	mov	r1, r4
 8007372:	4640      	mov	r0, r8
 8007374:	f7ff fee2 	bl	800713c <_printf_common>
 8007378:	3001      	adds	r0, #1
 800737a:	d14c      	bne.n	8007416 <_printf_i+0x1fe>
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	b004      	add	sp, #16
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007386:	4835      	ldr	r0, [pc, #212]	; (800745c <_printf_i+0x244>)
 8007388:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800738c:	6829      	ldr	r1, [r5, #0]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	f851 6b04 	ldr.w	r6, [r1], #4
 8007394:	6029      	str	r1, [r5, #0]
 8007396:	061d      	lsls	r5, r3, #24
 8007398:	d514      	bpl.n	80073c4 <_printf_i+0x1ac>
 800739a:	07df      	lsls	r7, r3, #31
 800739c:	bf44      	itt	mi
 800739e:	f043 0320 	orrmi.w	r3, r3, #32
 80073a2:	6023      	strmi	r3, [r4, #0]
 80073a4:	b91e      	cbnz	r6, 80073ae <_printf_i+0x196>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	f023 0320 	bic.w	r3, r3, #32
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	2310      	movs	r3, #16
 80073b0:	e7b0      	b.n	8007314 <_printf_i+0xfc>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f043 0320 	orr.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2378      	movs	r3, #120	; 0x78
 80073bc:	4828      	ldr	r0, [pc, #160]	; (8007460 <_printf_i+0x248>)
 80073be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073c2:	e7e3      	b.n	800738c <_printf_i+0x174>
 80073c4:	0659      	lsls	r1, r3, #25
 80073c6:	bf48      	it	mi
 80073c8:	b2b6      	uxthmi	r6, r6
 80073ca:	e7e6      	b.n	800739a <_printf_i+0x182>
 80073cc:	4615      	mov	r5, r2
 80073ce:	e7bb      	b.n	8007348 <_printf_i+0x130>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	6826      	ldr	r6, [r4, #0]
 80073d4:	6961      	ldr	r1, [r4, #20]
 80073d6:	1d18      	adds	r0, r3, #4
 80073d8:	6028      	str	r0, [r5, #0]
 80073da:	0635      	lsls	r5, r6, #24
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	d501      	bpl.n	80073e4 <_printf_i+0x1cc>
 80073e0:	6019      	str	r1, [r3, #0]
 80073e2:	e002      	b.n	80073ea <_printf_i+0x1d2>
 80073e4:	0670      	lsls	r0, r6, #25
 80073e6:	d5fb      	bpl.n	80073e0 <_printf_i+0x1c8>
 80073e8:	8019      	strh	r1, [r3, #0]
 80073ea:	2300      	movs	r3, #0
 80073ec:	6123      	str	r3, [r4, #16]
 80073ee:	4615      	mov	r5, r2
 80073f0:	e7ba      	b.n	8007368 <_printf_i+0x150>
 80073f2:	682b      	ldr	r3, [r5, #0]
 80073f4:	1d1a      	adds	r2, r3, #4
 80073f6:	602a      	str	r2, [r5, #0]
 80073f8:	681d      	ldr	r5, [r3, #0]
 80073fa:	6862      	ldr	r2, [r4, #4]
 80073fc:	2100      	movs	r1, #0
 80073fe:	4628      	mov	r0, r5
 8007400:	f7f8 feee 	bl	80001e0 <memchr>
 8007404:	b108      	cbz	r0, 800740a <_printf_i+0x1f2>
 8007406:	1b40      	subs	r0, r0, r5
 8007408:	6060      	str	r0, [r4, #4]
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	6123      	str	r3, [r4, #16]
 800740e:	2300      	movs	r3, #0
 8007410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007414:	e7a8      	b.n	8007368 <_printf_i+0x150>
 8007416:	6923      	ldr	r3, [r4, #16]
 8007418:	462a      	mov	r2, r5
 800741a:	4649      	mov	r1, r9
 800741c:	4640      	mov	r0, r8
 800741e:	47d0      	blx	sl
 8007420:	3001      	adds	r0, #1
 8007422:	d0ab      	beq.n	800737c <_printf_i+0x164>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	079b      	lsls	r3, r3, #30
 8007428:	d413      	bmi.n	8007452 <_printf_i+0x23a>
 800742a:	68e0      	ldr	r0, [r4, #12]
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	4298      	cmp	r0, r3
 8007430:	bfb8      	it	lt
 8007432:	4618      	movlt	r0, r3
 8007434:	e7a4      	b.n	8007380 <_printf_i+0x168>
 8007436:	2301      	movs	r3, #1
 8007438:	4632      	mov	r2, r6
 800743a:	4649      	mov	r1, r9
 800743c:	4640      	mov	r0, r8
 800743e:	47d0      	blx	sl
 8007440:	3001      	adds	r0, #1
 8007442:	d09b      	beq.n	800737c <_printf_i+0x164>
 8007444:	3501      	adds	r5, #1
 8007446:	68e3      	ldr	r3, [r4, #12]
 8007448:	9903      	ldr	r1, [sp, #12]
 800744a:	1a5b      	subs	r3, r3, r1
 800744c:	42ab      	cmp	r3, r5
 800744e:	dcf2      	bgt.n	8007436 <_printf_i+0x21e>
 8007450:	e7eb      	b.n	800742a <_printf_i+0x212>
 8007452:	2500      	movs	r5, #0
 8007454:	f104 0619 	add.w	r6, r4, #25
 8007458:	e7f5      	b.n	8007446 <_printf_i+0x22e>
 800745a:	bf00      	nop
 800745c:	0800c3a2 	.word	0x0800c3a2
 8007460:	0800c3b3 	.word	0x0800c3b3

08007464 <_scanf_float>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	b087      	sub	sp, #28
 800746a:	4617      	mov	r7, r2
 800746c:	9303      	str	r3, [sp, #12]
 800746e:	688b      	ldr	r3, [r1, #8]
 8007470:	1e5a      	subs	r2, r3, #1
 8007472:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007476:	bf83      	ittte	hi
 8007478:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800747c:	195b      	addhi	r3, r3, r5
 800747e:	9302      	strhi	r3, [sp, #8]
 8007480:	2300      	movls	r3, #0
 8007482:	bf86      	itte	hi
 8007484:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007488:	608b      	strhi	r3, [r1, #8]
 800748a:	9302      	strls	r3, [sp, #8]
 800748c:	680b      	ldr	r3, [r1, #0]
 800748e:	468b      	mov	fp, r1
 8007490:	2500      	movs	r5, #0
 8007492:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007496:	f84b 3b1c 	str.w	r3, [fp], #28
 800749a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800749e:	4680      	mov	r8, r0
 80074a0:	460c      	mov	r4, r1
 80074a2:	465e      	mov	r6, fp
 80074a4:	46aa      	mov	sl, r5
 80074a6:	46a9      	mov	r9, r5
 80074a8:	9501      	str	r5, [sp, #4]
 80074aa:	68a2      	ldr	r2, [r4, #8]
 80074ac:	b152      	cbz	r2, 80074c4 <_scanf_float+0x60>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b4e      	cmp	r3, #78	; 0x4e
 80074b4:	d864      	bhi.n	8007580 <_scanf_float+0x11c>
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d83c      	bhi.n	8007534 <_scanf_float+0xd0>
 80074ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80074be:	b2c8      	uxtb	r0, r1
 80074c0:	280e      	cmp	r0, #14
 80074c2:	d93a      	bls.n	800753a <_scanf_float+0xd6>
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	d003      	beq.n	80074d2 <_scanf_float+0x6e>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074d6:	f1ba 0f01 	cmp.w	sl, #1
 80074da:	f200 8113 	bhi.w	8007704 <_scanf_float+0x2a0>
 80074de:	455e      	cmp	r6, fp
 80074e0:	f200 8105 	bhi.w	80076ee <_scanf_float+0x28a>
 80074e4:	2501      	movs	r5, #1
 80074e6:	4628      	mov	r0, r5
 80074e8:	b007      	add	sp, #28
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80074f2:	2a0d      	cmp	r2, #13
 80074f4:	d8e6      	bhi.n	80074c4 <_scanf_float+0x60>
 80074f6:	a101      	add	r1, pc, #4	; (adr r1, 80074fc <_scanf_float+0x98>)
 80074f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80074fc:	0800763b 	.word	0x0800763b
 8007500:	080074c5 	.word	0x080074c5
 8007504:	080074c5 	.word	0x080074c5
 8007508:	080074c5 	.word	0x080074c5
 800750c:	0800769b 	.word	0x0800769b
 8007510:	08007673 	.word	0x08007673
 8007514:	080074c5 	.word	0x080074c5
 8007518:	080074c5 	.word	0x080074c5
 800751c:	08007649 	.word	0x08007649
 8007520:	080074c5 	.word	0x080074c5
 8007524:	080074c5 	.word	0x080074c5
 8007528:	080074c5 	.word	0x080074c5
 800752c:	080074c5 	.word	0x080074c5
 8007530:	08007601 	.word	0x08007601
 8007534:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007538:	e7db      	b.n	80074f2 <_scanf_float+0x8e>
 800753a:	290e      	cmp	r1, #14
 800753c:	d8c2      	bhi.n	80074c4 <_scanf_float+0x60>
 800753e:	a001      	add	r0, pc, #4	; (adr r0, 8007544 <_scanf_float+0xe0>)
 8007540:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007544:	080075f3 	.word	0x080075f3
 8007548:	080074c5 	.word	0x080074c5
 800754c:	080075f3 	.word	0x080075f3
 8007550:	08007687 	.word	0x08007687
 8007554:	080074c5 	.word	0x080074c5
 8007558:	080075a1 	.word	0x080075a1
 800755c:	080075dd 	.word	0x080075dd
 8007560:	080075dd 	.word	0x080075dd
 8007564:	080075dd 	.word	0x080075dd
 8007568:	080075dd 	.word	0x080075dd
 800756c:	080075dd 	.word	0x080075dd
 8007570:	080075dd 	.word	0x080075dd
 8007574:	080075dd 	.word	0x080075dd
 8007578:	080075dd 	.word	0x080075dd
 800757c:	080075dd 	.word	0x080075dd
 8007580:	2b6e      	cmp	r3, #110	; 0x6e
 8007582:	d809      	bhi.n	8007598 <_scanf_float+0x134>
 8007584:	2b60      	cmp	r3, #96	; 0x60
 8007586:	d8b2      	bhi.n	80074ee <_scanf_float+0x8a>
 8007588:	2b54      	cmp	r3, #84	; 0x54
 800758a:	d077      	beq.n	800767c <_scanf_float+0x218>
 800758c:	2b59      	cmp	r3, #89	; 0x59
 800758e:	d199      	bne.n	80074c4 <_scanf_float+0x60>
 8007590:	2d07      	cmp	r5, #7
 8007592:	d197      	bne.n	80074c4 <_scanf_float+0x60>
 8007594:	2508      	movs	r5, #8
 8007596:	e029      	b.n	80075ec <_scanf_float+0x188>
 8007598:	2b74      	cmp	r3, #116	; 0x74
 800759a:	d06f      	beq.n	800767c <_scanf_float+0x218>
 800759c:	2b79      	cmp	r3, #121	; 0x79
 800759e:	e7f6      	b.n	800758e <_scanf_float+0x12a>
 80075a0:	6821      	ldr	r1, [r4, #0]
 80075a2:	05c8      	lsls	r0, r1, #23
 80075a4:	d51a      	bpl.n	80075dc <_scanf_float+0x178>
 80075a6:	9b02      	ldr	r3, [sp, #8]
 80075a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80075ac:	6021      	str	r1, [r4, #0]
 80075ae:	f109 0901 	add.w	r9, r9, #1
 80075b2:	b11b      	cbz	r3, 80075bc <_scanf_float+0x158>
 80075b4:	3b01      	subs	r3, #1
 80075b6:	3201      	adds	r2, #1
 80075b8:	9302      	str	r3, [sp, #8]
 80075ba:	60a2      	str	r2, [r4, #8]
 80075bc:	68a3      	ldr	r3, [r4, #8]
 80075be:	3b01      	subs	r3, #1
 80075c0:	60a3      	str	r3, [r4, #8]
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	607b      	str	r3, [r7, #4]
 80075d0:	f340 8084 	ble.w	80076dc <_scanf_float+0x278>
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	3301      	adds	r3, #1
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	e766      	b.n	80074aa <_scanf_float+0x46>
 80075dc:	eb1a 0f05 	cmn.w	sl, r5
 80075e0:	f47f af70 	bne.w	80074c4 <_scanf_float+0x60>
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	f806 3b01 	strb.w	r3, [r6], #1
 80075f0:	e7e4      	b.n	80075bc <_scanf_float+0x158>
 80075f2:	6822      	ldr	r2, [r4, #0]
 80075f4:	0610      	lsls	r0, r2, #24
 80075f6:	f57f af65 	bpl.w	80074c4 <_scanf_float+0x60>
 80075fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80075fe:	e7f4      	b.n	80075ea <_scanf_float+0x186>
 8007600:	f1ba 0f00 	cmp.w	sl, #0
 8007604:	d10e      	bne.n	8007624 <_scanf_float+0x1c0>
 8007606:	f1b9 0f00 	cmp.w	r9, #0
 800760a:	d10e      	bne.n	800762a <_scanf_float+0x1c6>
 800760c:	6822      	ldr	r2, [r4, #0]
 800760e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007612:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007616:	d108      	bne.n	800762a <_scanf_float+0x1c6>
 8007618:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800761c:	6022      	str	r2, [r4, #0]
 800761e:	f04f 0a01 	mov.w	sl, #1
 8007622:	e7e3      	b.n	80075ec <_scanf_float+0x188>
 8007624:	f1ba 0f02 	cmp.w	sl, #2
 8007628:	d055      	beq.n	80076d6 <_scanf_float+0x272>
 800762a:	2d01      	cmp	r5, #1
 800762c:	d002      	beq.n	8007634 <_scanf_float+0x1d0>
 800762e:	2d04      	cmp	r5, #4
 8007630:	f47f af48 	bne.w	80074c4 <_scanf_float+0x60>
 8007634:	3501      	adds	r5, #1
 8007636:	b2ed      	uxtb	r5, r5
 8007638:	e7d8      	b.n	80075ec <_scanf_float+0x188>
 800763a:	f1ba 0f01 	cmp.w	sl, #1
 800763e:	f47f af41 	bne.w	80074c4 <_scanf_float+0x60>
 8007642:	f04f 0a02 	mov.w	sl, #2
 8007646:	e7d1      	b.n	80075ec <_scanf_float+0x188>
 8007648:	b97d      	cbnz	r5, 800766a <_scanf_float+0x206>
 800764a:	f1b9 0f00 	cmp.w	r9, #0
 800764e:	f47f af3c 	bne.w	80074ca <_scanf_float+0x66>
 8007652:	6822      	ldr	r2, [r4, #0]
 8007654:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007658:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800765c:	f47f af39 	bne.w	80074d2 <_scanf_float+0x6e>
 8007660:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	2501      	movs	r5, #1
 8007668:	e7c0      	b.n	80075ec <_scanf_float+0x188>
 800766a:	2d03      	cmp	r5, #3
 800766c:	d0e2      	beq.n	8007634 <_scanf_float+0x1d0>
 800766e:	2d05      	cmp	r5, #5
 8007670:	e7de      	b.n	8007630 <_scanf_float+0x1cc>
 8007672:	2d02      	cmp	r5, #2
 8007674:	f47f af26 	bne.w	80074c4 <_scanf_float+0x60>
 8007678:	2503      	movs	r5, #3
 800767a:	e7b7      	b.n	80075ec <_scanf_float+0x188>
 800767c:	2d06      	cmp	r5, #6
 800767e:	f47f af21 	bne.w	80074c4 <_scanf_float+0x60>
 8007682:	2507      	movs	r5, #7
 8007684:	e7b2      	b.n	80075ec <_scanf_float+0x188>
 8007686:	6822      	ldr	r2, [r4, #0]
 8007688:	0591      	lsls	r1, r2, #22
 800768a:	f57f af1b 	bpl.w	80074c4 <_scanf_float+0x60>
 800768e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007692:	6022      	str	r2, [r4, #0]
 8007694:	f8cd 9004 	str.w	r9, [sp, #4]
 8007698:	e7a8      	b.n	80075ec <_scanf_float+0x188>
 800769a:	6822      	ldr	r2, [r4, #0]
 800769c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80076a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80076a4:	d006      	beq.n	80076b4 <_scanf_float+0x250>
 80076a6:	0550      	lsls	r0, r2, #21
 80076a8:	f57f af0c 	bpl.w	80074c4 <_scanf_float+0x60>
 80076ac:	f1b9 0f00 	cmp.w	r9, #0
 80076b0:	f43f af0f 	beq.w	80074d2 <_scanf_float+0x6e>
 80076b4:	0591      	lsls	r1, r2, #22
 80076b6:	bf58      	it	pl
 80076b8:	9901      	ldrpl	r1, [sp, #4]
 80076ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80076be:	bf58      	it	pl
 80076c0:	eba9 0101 	subpl.w	r1, r9, r1
 80076c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80076c8:	bf58      	it	pl
 80076ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80076ce:	6022      	str	r2, [r4, #0]
 80076d0:	f04f 0900 	mov.w	r9, #0
 80076d4:	e78a      	b.n	80075ec <_scanf_float+0x188>
 80076d6:	f04f 0a03 	mov.w	sl, #3
 80076da:	e787      	b.n	80075ec <_scanf_float+0x188>
 80076dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076e0:	4639      	mov	r1, r7
 80076e2:	4640      	mov	r0, r8
 80076e4:	4798      	blx	r3
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f43f aedf 	beq.w	80074aa <_scanf_float+0x46>
 80076ec:	e6ea      	b.n	80074c4 <_scanf_float+0x60>
 80076ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80076f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076f6:	463a      	mov	r2, r7
 80076f8:	4640      	mov	r0, r8
 80076fa:	4798      	blx	r3
 80076fc:	6923      	ldr	r3, [r4, #16]
 80076fe:	3b01      	subs	r3, #1
 8007700:	6123      	str	r3, [r4, #16]
 8007702:	e6ec      	b.n	80074de <_scanf_float+0x7a>
 8007704:	1e6b      	subs	r3, r5, #1
 8007706:	2b06      	cmp	r3, #6
 8007708:	d825      	bhi.n	8007756 <_scanf_float+0x2f2>
 800770a:	2d02      	cmp	r5, #2
 800770c:	d836      	bhi.n	800777c <_scanf_float+0x318>
 800770e:	455e      	cmp	r6, fp
 8007710:	f67f aee8 	bls.w	80074e4 <_scanf_float+0x80>
 8007714:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007718:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800771c:	463a      	mov	r2, r7
 800771e:	4640      	mov	r0, r8
 8007720:	4798      	blx	r3
 8007722:	6923      	ldr	r3, [r4, #16]
 8007724:	3b01      	subs	r3, #1
 8007726:	6123      	str	r3, [r4, #16]
 8007728:	e7f1      	b.n	800770e <_scanf_float+0x2aa>
 800772a:	9802      	ldr	r0, [sp, #8]
 800772c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007730:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	463a      	mov	r2, r7
 8007738:	4640      	mov	r0, r8
 800773a:	4798      	blx	r3
 800773c:	6923      	ldr	r3, [r4, #16]
 800773e:	3b01      	subs	r3, #1
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007746:	fa5f fa8a 	uxtb.w	sl, sl
 800774a:	f1ba 0f02 	cmp.w	sl, #2
 800774e:	d1ec      	bne.n	800772a <_scanf_float+0x2c6>
 8007750:	3d03      	subs	r5, #3
 8007752:	b2ed      	uxtb	r5, r5
 8007754:	1b76      	subs	r6, r6, r5
 8007756:	6823      	ldr	r3, [r4, #0]
 8007758:	05da      	lsls	r2, r3, #23
 800775a:	d52f      	bpl.n	80077bc <_scanf_float+0x358>
 800775c:	055b      	lsls	r3, r3, #21
 800775e:	d510      	bpl.n	8007782 <_scanf_float+0x31e>
 8007760:	455e      	cmp	r6, fp
 8007762:	f67f aebf 	bls.w	80074e4 <_scanf_float+0x80>
 8007766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800776a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800776e:	463a      	mov	r2, r7
 8007770:	4640      	mov	r0, r8
 8007772:	4798      	blx	r3
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	3b01      	subs	r3, #1
 8007778:	6123      	str	r3, [r4, #16]
 800777a:	e7f1      	b.n	8007760 <_scanf_float+0x2fc>
 800777c:	46aa      	mov	sl, r5
 800777e:	9602      	str	r6, [sp, #8]
 8007780:	e7df      	b.n	8007742 <_scanf_float+0x2de>
 8007782:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007786:	6923      	ldr	r3, [r4, #16]
 8007788:	2965      	cmp	r1, #101	; 0x65
 800778a:	f103 33ff 	add.w	r3, r3, #4294967295
 800778e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007792:	6123      	str	r3, [r4, #16]
 8007794:	d00c      	beq.n	80077b0 <_scanf_float+0x34c>
 8007796:	2945      	cmp	r1, #69	; 0x45
 8007798:	d00a      	beq.n	80077b0 <_scanf_float+0x34c>
 800779a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800779e:	463a      	mov	r2, r7
 80077a0:	4640      	mov	r0, r8
 80077a2:	4798      	blx	r3
 80077a4:	6923      	ldr	r3, [r4, #16]
 80077a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	1eb5      	subs	r5, r6, #2
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80077b4:	463a      	mov	r2, r7
 80077b6:	4640      	mov	r0, r8
 80077b8:	4798      	blx	r3
 80077ba:	462e      	mov	r6, r5
 80077bc:	6825      	ldr	r5, [r4, #0]
 80077be:	f015 0510 	ands.w	r5, r5, #16
 80077c2:	d159      	bne.n	8007878 <_scanf_float+0x414>
 80077c4:	7035      	strb	r5, [r6, #0]
 80077c6:	6823      	ldr	r3, [r4, #0]
 80077c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077d0:	d11b      	bne.n	800780a <_scanf_float+0x3a6>
 80077d2:	9b01      	ldr	r3, [sp, #4]
 80077d4:	454b      	cmp	r3, r9
 80077d6:	eba3 0209 	sub.w	r2, r3, r9
 80077da:	d123      	bne.n	8007824 <_scanf_float+0x3c0>
 80077dc:	2200      	movs	r2, #0
 80077de:	4659      	mov	r1, fp
 80077e0:	4640      	mov	r0, r8
 80077e2:	f000 ff27 	bl	8008634 <_strtod_r>
 80077e6:	6822      	ldr	r2, [r4, #0]
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	f012 0f02 	tst.w	r2, #2
 80077ee:	ec57 6b10 	vmov	r6, r7, d0
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	d021      	beq.n	800783a <_scanf_float+0x3d6>
 80077f6:	9903      	ldr	r1, [sp, #12]
 80077f8:	1d1a      	adds	r2, r3, #4
 80077fa:	600a      	str	r2, [r1, #0]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	e9c3 6700 	strd	r6, r7, [r3]
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	3301      	adds	r3, #1
 8007806:	60e3      	str	r3, [r4, #12]
 8007808:	e66d      	b.n	80074e6 <_scanf_float+0x82>
 800780a:	9b04      	ldr	r3, [sp, #16]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0e5      	beq.n	80077dc <_scanf_float+0x378>
 8007810:	9905      	ldr	r1, [sp, #20]
 8007812:	230a      	movs	r3, #10
 8007814:	462a      	mov	r2, r5
 8007816:	3101      	adds	r1, #1
 8007818:	4640      	mov	r0, r8
 800781a:	f000 ff93 	bl	8008744 <_strtol_r>
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	9e05      	ldr	r6, [sp, #20]
 8007822:	1ac2      	subs	r2, r0, r3
 8007824:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007828:	429e      	cmp	r6, r3
 800782a:	bf28      	it	cs
 800782c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007830:	4912      	ldr	r1, [pc, #72]	; (800787c <_scanf_float+0x418>)
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f8ba 	bl	80079ac <siprintf>
 8007838:	e7d0      	b.n	80077dc <_scanf_float+0x378>
 800783a:	9903      	ldr	r1, [sp, #12]
 800783c:	f012 0f04 	tst.w	r2, #4
 8007840:	f103 0204 	add.w	r2, r3, #4
 8007844:	600a      	str	r2, [r1, #0]
 8007846:	d1d9      	bne.n	80077fc <_scanf_float+0x398>
 8007848:	f8d3 8000 	ldr.w	r8, [r3]
 800784c:	ee10 2a10 	vmov	r2, s0
 8007850:	ee10 0a10 	vmov	r0, s0
 8007854:	463b      	mov	r3, r7
 8007856:	4639      	mov	r1, r7
 8007858:	f7f9 f968 	bl	8000b2c <__aeabi_dcmpun>
 800785c:	b128      	cbz	r0, 800786a <_scanf_float+0x406>
 800785e:	4808      	ldr	r0, [pc, #32]	; (8007880 <_scanf_float+0x41c>)
 8007860:	f000 f89e 	bl	80079a0 <nanf>
 8007864:	ed88 0a00 	vstr	s0, [r8]
 8007868:	e7cb      	b.n	8007802 <_scanf_float+0x39e>
 800786a:	4630      	mov	r0, r6
 800786c:	4639      	mov	r1, r7
 800786e:	f7f9 f9bb 	bl	8000be8 <__aeabi_d2f>
 8007872:	f8c8 0000 	str.w	r0, [r8]
 8007876:	e7c4      	b.n	8007802 <_scanf_float+0x39e>
 8007878:	2500      	movs	r5, #0
 800787a:	e634      	b.n	80074e6 <_scanf_float+0x82>
 800787c:	0800c3c4 	.word	0x0800c3c4
 8007880:	0800c838 	.word	0x0800c838

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	4b0a      	ldr	r3, [pc, #40]	; (80078b0 <iprintf+0x2c>)
 8007888:	b513      	push	{r0, r1, r4, lr}
 800788a:	681c      	ldr	r4, [r3, #0]
 800788c:	b124      	cbz	r4, 8007898 <iprintf+0x14>
 800788e:	69a3      	ldr	r3, [r4, #24]
 8007890:	b913      	cbnz	r3, 8007898 <iprintf+0x14>
 8007892:	4620      	mov	r0, r4
 8007894:	f001 ffb8 	bl	8009808 <__sinit>
 8007898:	ab05      	add	r3, sp, #20
 800789a:	9a04      	ldr	r2, [sp, #16]
 800789c:	68a1      	ldr	r1, [r4, #8]
 800789e:	9301      	str	r3, [sp, #4]
 80078a0:	4620      	mov	r0, r4
 80078a2:	f003 fb8f 	bl	800afc4 <_vfiprintf_r>
 80078a6:	b002      	add	sp, #8
 80078a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ac:	b004      	add	sp, #16
 80078ae:	4770      	bx	lr
 80078b0:	20000294 	.word	0x20000294

080078b4 <_puts_r>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	460e      	mov	r6, r1
 80078b8:	4605      	mov	r5, r0
 80078ba:	b118      	cbz	r0, 80078c4 <_puts_r+0x10>
 80078bc:	6983      	ldr	r3, [r0, #24]
 80078be:	b90b      	cbnz	r3, 80078c4 <_puts_r+0x10>
 80078c0:	f001 ffa2 	bl	8009808 <__sinit>
 80078c4:	69ab      	ldr	r3, [r5, #24]
 80078c6:	68ac      	ldr	r4, [r5, #8]
 80078c8:	b913      	cbnz	r3, 80078d0 <_puts_r+0x1c>
 80078ca:	4628      	mov	r0, r5
 80078cc:	f001 ff9c 	bl	8009808 <__sinit>
 80078d0:	4b2c      	ldr	r3, [pc, #176]	; (8007984 <_puts_r+0xd0>)
 80078d2:	429c      	cmp	r4, r3
 80078d4:	d120      	bne.n	8007918 <_puts_r+0x64>
 80078d6:	686c      	ldr	r4, [r5, #4]
 80078d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078da:	07db      	lsls	r3, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_puts_r+0x36>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	0598      	lsls	r0, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_puts_r+0x36>
 80078e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e6:	f002 fba0 	bl	800a02a <__retarget_lock_acquire_recursive>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	0719      	lsls	r1, r3, #28
 80078ee:	d51d      	bpl.n	800792c <_puts_r+0x78>
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b1db      	cbz	r3, 800792c <_puts_r+0x78>
 80078f4:	3e01      	subs	r6, #1
 80078f6:	68a3      	ldr	r3, [r4, #8]
 80078f8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078fc:	3b01      	subs	r3, #1
 80078fe:	60a3      	str	r3, [r4, #8]
 8007900:	bb39      	cbnz	r1, 8007952 <_puts_r+0x9e>
 8007902:	2b00      	cmp	r3, #0
 8007904:	da38      	bge.n	8007978 <_puts_r+0xc4>
 8007906:	4622      	mov	r2, r4
 8007908:	210a      	movs	r1, #10
 800790a:	4628      	mov	r0, r5
 800790c:	f000 ff26 	bl	800875c <__swbuf_r>
 8007910:	3001      	adds	r0, #1
 8007912:	d011      	beq.n	8007938 <_puts_r+0x84>
 8007914:	250a      	movs	r5, #10
 8007916:	e011      	b.n	800793c <_puts_r+0x88>
 8007918:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <_puts_r+0xd4>)
 800791a:	429c      	cmp	r4, r3
 800791c:	d101      	bne.n	8007922 <_puts_r+0x6e>
 800791e:	68ac      	ldr	r4, [r5, #8]
 8007920:	e7da      	b.n	80078d8 <_puts_r+0x24>
 8007922:	4b1a      	ldr	r3, [pc, #104]	; (800798c <_puts_r+0xd8>)
 8007924:	429c      	cmp	r4, r3
 8007926:	bf08      	it	eq
 8007928:	68ec      	ldreq	r4, [r5, #12]
 800792a:	e7d5      	b.n	80078d8 <_puts_r+0x24>
 800792c:	4621      	mov	r1, r4
 800792e:	4628      	mov	r0, r5
 8007930:	f000 ff66 	bl	8008800 <__swsetup_r>
 8007934:	2800      	cmp	r0, #0
 8007936:	d0dd      	beq.n	80078f4 <_puts_r+0x40>
 8007938:	f04f 35ff 	mov.w	r5, #4294967295
 800793c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800793e:	07da      	lsls	r2, r3, #31
 8007940:	d405      	bmi.n	800794e <_puts_r+0x9a>
 8007942:	89a3      	ldrh	r3, [r4, #12]
 8007944:	059b      	lsls	r3, r3, #22
 8007946:	d402      	bmi.n	800794e <_puts_r+0x9a>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f002 fb6f 	bl	800a02c <__retarget_lock_release_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	bd70      	pop	{r4, r5, r6, pc}
 8007952:	2b00      	cmp	r3, #0
 8007954:	da04      	bge.n	8007960 <_puts_r+0xac>
 8007956:	69a2      	ldr	r2, [r4, #24]
 8007958:	429a      	cmp	r2, r3
 800795a:	dc06      	bgt.n	800796a <_puts_r+0xb6>
 800795c:	290a      	cmp	r1, #10
 800795e:	d004      	beq.n	800796a <_puts_r+0xb6>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	1c5a      	adds	r2, r3, #1
 8007964:	6022      	str	r2, [r4, #0]
 8007966:	7019      	strb	r1, [r3, #0]
 8007968:	e7c5      	b.n	80078f6 <_puts_r+0x42>
 800796a:	4622      	mov	r2, r4
 800796c:	4628      	mov	r0, r5
 800796e:	f000 fef5 	bl	800875c <__swbuf_r>
 8007972:	3001      	adds	r0, #1
 8007974:	d1bf      	bne.n	80078f6 <_puts_r+0x42>
 8007976:	e7df      	b.n	8007938 <_puts_r+0x84>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	250a      	movs	r5, #10
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	6022      	str	r2, [r4, #0]
 8007980:	701d      	strb	r5, [r3, #0]
 8007982:	e7db      	b.n	800793c <_puts_r+0x88>
 8007984:	0800c5d4 	.word	0x0800c5d4
 8007988:	0800c5f4 	.word	0x0800c5f4
 800798c:	0800c5b4 	.word	0x0800c5b4

08007990 <puts>:
 8007990:	4b02      	ldr	r3, [pc, #8]	; (800799c <puts+0xc>)
 8007992:	4601      	mov	r1, r0
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	f7ff bf8d 	b.w	80078b4 <_puts_r>
 800799a:	bf00      	nop
 800799c:	20000294 	.word	0x20000294

080079a0 <nanf>:
 80079a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80079a8 <nanf+0x8>
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	7fc00000 	.word	0x7fc00000

080079ac <siprintf>:
 80079ac:	b40e      	push	{r1, r2, r3}
 80079ae:	b500      	push	{lr}
 80079b0:	b09c      	sub	sp, #112	; 0x70
 80079b2:	ab1d      	add	r3, sp, #116	; 0x74
 80079b4:	9002      	str	r0, [sp, #8]
 80079b6:	9006      	str	r0, [sp, #24]
 80079b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80079bc:	4809      	ldr	r0, [pc, #36]	; (80079e4 <siprintf+0x38>)
 80079be:	9107      	str	r1, [sp, #28]
 80079c0:	9104      	str	r1, [sp, #16]
 80079c2:	4909      	ldr	r1, [pc, #36]	; (80079e8 <siprintf+0x3c>)
 80079c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c8:	9105      	str	r1, [sp, #20]
 80079ca:	6800      	ldr	r0, [r0, #0]
 80079cc:	9301      	str	r3, [sp, #4]
 80079ce:	a902      	add	r1, sp, #8
 80079d0:	f003 f9ce 	bl	800ad70 <_svfiprintf_r>
 80079d4:	9b02      	ldr	r3, [sp, #8]
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
 80079da:	b01c      	add	sp, #112	; 0x70
 80079dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079e0:	b003      	add	sp, #12
 80079e2:	4770      	bx	lr
 80079e4:	20000294 	.word	0x20000294
 80079e8:	ffff0208 	.word	0xffff0208

080079ec <sulp>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4604      	mov	r4, r0
 80079f0:	460d      	mov	r5, r1
 80079f2:	ec45 4b10 	vmov	d0, r4, r5
 80079f6:	4616      	mov	r6, r2
 80079f8:	f002 ff18 	bl	800a82c <__ulp>
 80079fc:	ec51 0b10 	vmov	r0, r1, d0
 8007a00:	b17e      	cbz	r6, 8007a22 <sulp+0x36>
 8007a02:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a06:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dd09      	ble.n	8007a22 <sulp+0x36>
 8007a0e:	051b      	lsls	r3, r3, #20
 8007a10:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a14:	2400      	movs	r4, #0
 8007a16:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	462b      	mov	r3, r5
 8007a1e:	f7f8 fdeb 	bl	80005f8 <__aeabi_dmul>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	0000      	movs	r0, r0
	...

08007a28 <_strtod_l>:
 8007a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2c:	ed2d 8b02 	vpush	{d8}
 8007a30:	b09d      	sub	sp, #116	; 0x74
 8007a32:	461f      	mov	r7, r3
 8007a34:	2300      	movs	r3, #0
 8007a36:	9318      	str	r3, [sp, #96]	; 0x60
 8007a38:	4ba2      	ldr	r3, [pc, #648]	; (8007cc4 <_strtod_l+0x29c>)
 8007a3a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	9305      	str	r3, [sp, #20]
 8007a40:	4604      	mov	r4, r0
 8007a42:	4618      	mov	r0, r3
 8007a44:	4688      	mov	r8, r1
 8007a46:	f7f8 fbc3 	bl	80001d0 <strlen>
 8007a4a:	f04f 0a00 	mov.w	sl, #0
 8007a4e:	4605      	mov	r5, r0
 8007a50:	f04f 0b00 	mov.w	fp, #0
 8007a54:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a5a:	781a      	ldrb	r2, [r3, #0]
 8007a5c:	2a2b      	cmp	r2, #43	; 0x2b
 8007a5e:	d04e      	beq.n	8007afe <_strtod_l+0xd6>
 8007a60:	d83b      	bhi.n	8007ada <_strtod_l+0xb2>
 8007a62:	2a0d      	cmp	r2, #13
 8007a64:	d834      	bhi.n	8007ad0 <_strtod_l+0xa8>
 8007a66:	2a08      	cmp	r2, #8
 8007a68:	d834      	bhi.n	8007ad4 <_strtod_l+0xac>
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d03e      	beq.n	8007aec <_strtod_l+0xc4>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	930a      	str	r3, [sp, #40]	; 0x28
 8007a72:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007a74:	7833      	ldrb	r3, [r6, #0]
 8007a76:	2b30      	cmp	r3, #48	; 0x30
 8007a78:	f040 80b0 	bne.w	8007bdc <_strtod_l+0x1b4>
 8007a7c:	7873      	ldrb	r3, [r6, #1]
 8007a7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a82:	2b58      	cmp	r3, #88	; 0x58
 8007a84:	d168      	bne.n	8007b58 <_strtod_l+0x130>
 8007a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	ab18      	add	r3, sp, #96	; 0x60
 8007a8c:	9702      	str	r7, [sp, #8]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	4a8d      	ldr	r2, [pc, #564]	; (8007cc8 <_strtod_l+0x2a0>)
 8007a92:	ab19      	add	r3, sp, #100	; 0x64
 8007a94:	a917      	add	r1, sp, #92	; 0x5c
 8007a96:	4620      	mov	r0, r4
 8007a98:	f001 ffba 	bl	8009a10 <__gethex>
 8007a9c:	f010 0707 	ands.w	r7, r0, #7
 8007aa0:	4605      	mov	r5, r0
 8007aa2:	d005      	beq.n	8007ab0 <_strtod_l+0x88>
 8007aa4:	2f06      	cmp	r7, #6
 8007aa6:	d12c      	bne.n	8007b02 <_strtod_l+0xda>
 8007aa8:	3601      	adds	r6, #1
 8007aaa:	2300      	movs	r3, #0
 8007aac:	9617      	str	r6, [sp, #92]	; 0x5c
 8007aae:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8590 	bne.w	80085d8 <_strtod_l+0xbb0>
 8007ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007aba:	b1eb      	cbz	r3, 8007af8 <_strtod_l+0xd0>
 8007abc:	4652      	mov	r2, sl
 8007abe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ac2:	ec43 2b10 	vmov	d0, r2, r3
 8007ac6:	b01d      	add	sp, #116	; 0x74
 8007ac8:	ecbd 8b02 	vpop	{d8}
 8007acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad0:	2a20      	cmp	r2, #32
 8007ad2:	d1cc      	bne.n	8007a6e <_strtod_l+0x46>
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007ad8:	e7be      	b.n	8007a58 <_strtod_l+0x30>
 8007ada:	2a2d      	cmp	r2, #45	; 0x2d
 8007adc:	d1c7      	bne.n	8007a6e <_strtod_l+0x46>
 8007ade:	2201      	movs	r2, #1
 8007ae0:	920a      	str	r2, [sp, #40]	; 0x28
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ae6:	785b      	ldrb	r3, [r3, #1]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d1c2      	bne.n	8007a72 <_strtod_l+0x4a>
 8007aec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007aee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	f040 856e 	bne.w	80085d4 <_strtod_l+0xbac>
 8007af8:	4652      	mov	r2, sl
 8007afa:	465b      	mov	r3, fp
 8007afc:	e7e1      	b.n	8007ac2 <_strtod_l+0x9a>
 8007afe:	2200      	movs	r2, #0
 8007b00:	e7ee      	b.n	8007ae0 <_strtod_l+0xb8>
 8007b02:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b04:	b13a      	cbz	r2, 8007b16 <_strtod_l+0xee>
 8007b06:	2135      	movs	r1, #53	; 0x35
 8007b08:	a81a      	add	r0, sp, #104	; 0x68
 8007b0a:	f002 ff9a 	bl	800aa42 <__copybits>
 8007b0e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b10:	4620      	mov	r0, r4
 8007b12:	f002 fb59 	bl	800a1c8 <_Bfree>
 8007b16:	3f01      	subs	r7, #1
 8007b18:	2f04      	cmp	r7, #4
 8007b1a:	d806      	bhi.n	8007b2a <_strtod_l+0x102>
 8007b1c:	e8df f007 	tbb	[pc, r7]
 8007b20:	1714030a 	.word	0x1714030a
 8007b24:	0a          	.byte	0x0a
 8007b25:	00          	.byte	0x00
 8007b26:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b2a:	0728      	lsls	r0, r5, #28
 8007b2c:	d5c0      	bpl.n	8007ab0 <_strtod_l+0x88>
 8007b2e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b32:	e7bd      	b.n	8007ab0 <_strtod_l+0x88>
 8007b34:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b3e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b42:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b46:	e7f0      	b.n	8007b2a <_strtod_l+0x102>
 8007b48:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007ccc <_strtod_l+0x2a4>
 8007b4c:	e7ed      	b.n	8007b2a <_strtod_l+0x102>
 8007b4e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007b52:	f04f 3aff 	mov.w	sl, #4294967295
 8007b56:	e7e8      	b.n	8007b2a <_strtod_l+0x102>
 8007b58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b30      	cmp	r3, #48	; 0x30
 8007b62:	d0f9      	beq.n	8007b58 <_strtod_l+0x130>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0a3      	beq.n	8007ab0 <_strtod_l+0x88>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f04f 0900 	mov.w	r9, #0
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b72:	9308      	str	r3, [sp, #32]
 8007b74:	f8cd 901c 	str.w	r9, [sp, #28]
 8007b78:	464f      	mov	r7, r9
 8007b7a:	220a      	movs	r2, #10
 8007b7c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007b7e:	7806      	ldrb	r6, [r0, #0]
 8007b80:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b84:	b2d9      	uxtb	r1, r3
 8007b86:	2909      	cmp	r1, #9
 8007b88:	d92a      	bls.n	8007be0 <_strtod_l+0x1b8>
 8007b8a:	9905      	ldr	r1, [sp, #20]
 8007b8c:	462a      	mov	r2, r5
 8007b8e:	f003 fba6 	bl	800b2de <strncmp>
 8007b92:	b398      	cbz	r0, 8007bfc <_strtod_l+0x1d4>
 8007b94:	2000      	movs	r0, #0
 8007b96:	4632      	mov	r2, r6
 8007b98:	463d      	mov	r5, r7
 8007b9a:	9005      	str	r0, [sp, #20]
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2a65      	cmp	r2, #101	; 0x65
 8007ba0:	d001      	beq.n	8007ba6 <_strtod_l+0x17e>
 8007ba2:	2a45      	cmp	r2, #69	; 0x45
 8007ba4:	d118      	bne.n	8007bd8 <_strtod_l+0x1b0>
 8007ba6:	b91d      	cbnz	r5, 8007bb0 <_strtod_l+0x188>
 8007ba8:	9a04      	ldr	r2, [sp, #16]
 8007baa:	4302      	orrs	r2, r0
 8007bac:	d09e      	beq.n	8007aec <_strtod_l+0xc4>
 8007bae:	2500      	movs	r5, #0
 8007bb0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007bb4:	f108 0201 	add.w	r2, r8, #1
 8007bb8:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bba:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007bbe:	2a2b      	cmp	r2, #43	; 0x2b
 8007bc0:	d075      	beq.n	8007cae <_strtod_l+0x286>
 8007bc2:	2a2d      	cmp	r2, #45	; 0x2d
 8007bc4:	d07b      	beq.n	8007cbe <_strtod_l+0x296>
 8007bc6:	f04f 0c00 	mov.w	ip, #0
 8007bca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bce:	2909      	cmp	r1, #9
 8007bd0:	f240 8082 	bls.w	8007cd8 <_strtod_l+0x2b0>
 8007bd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007bd8:	2600      	movs	r6, #0
 8007bda:	e09d      	b.n	8007d18 <_strtod_l+0x2f0>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	e7c4      	b.n	8007b6a <_strtod_l+0x142>
 8007be0:	2f08      	cmp	r7, #8
 8007be2:	bfd8      	it	le
 8007be4:	9907      	ldrle	r1, [sp, #28]
 8007be6:	f100 0001 	add.w	r0, r0, #1
 8007bea:	bfda      	itte	le
 8007bec:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bf0:	9307      	strle	r3, [sp, #28]
 8007bf2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007bf6:	3701      	adds	r7, #1
 8007bf8:	9017      	str	r0, [sp, #92]	; 0x5c
 8007bfa:	e7bf      	b.n	8007b7c <_strtod_l+0x154>
 8007bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bfe:	195a      	adds	r2, r3, r5
 8007c00:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c02:	5d5a      	ldrb	r2, [r3, r5]
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	d037      	beq.n	8007c78 <_strtod_l+0x250>
 8007c08:	9005      	str	r0, [sp, #20]
 8007c0a:	463d      	mov	r5, r7
 8007c0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c10:	2b09      	cmp	r3, #9
 8007c12:	d912      	bls.n	8007c3a <_strtod_l+0x212>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e7c2      	b.n	8007b9e <_strtod_l+0x176>
 8007c18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c1a:	1c5a      	adds	r2, r3, #1
 8007c1c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c1e:	785a      	ldrb	r2, [r3, #1]
 8007c20:	3001      	adds	r0, #1
 8007c22:	2a30      	cmp	r2, #48	; 0x30
 8007c24:	d0f8      	beq.n	8007c18 <_strtod_l+0x1f0>
 8007c26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c2a:	2b08      	cmp	r3, #8
 8007c2c:	f200 84d9 	bhi.w	80085e2 <_strtod_l+0xbba>
 8007c30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c32:	9005      	str	r0, [sp, #20]
 8007c34:	2000      	movs	r0, #0
 8007c36:	9308      	str	r3, [sp, #32]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	3a30      	subs	r2, #48	; 0x30
 8007c3c:	f100 0301 	add.w	r3, r0, #1
 8007c40:	d014      	beq.n	8007c6c <_strtod_l+0x244>
 8007c42:	9905      	ldr	r1, [sp, #20]
 8007c44:	4419      	add	r1, r3
 8007c46:	9105      	str	r1, [sp, #20]
 8007c48:	462b      	mov	r3, r5
 8007c4a:	eb00 0e05 	add.w	lr, r0, r5
 8007c4e:	210a      	movs	r1, #10
 8007c50:	4573      	cmp	r3, lr
 8007c52:	d113      	bne.n	8007c7c <_strtod_l+0x254>
 8007c54:	182b      	adds	r3, r5, r0
 8007c56:	2b08      	cmp	r3, #8
 8007c58:	f105 0501 	add.w	r5, r5, #1
 8007c5c:	4405      	add	r5, r0
 8007c5e:	dc1c      	bgt.n	8007c9a <_strtod_l+0x272>
 8007c60:	9907      	ldr	r1, [sp, #28]
 8007c62:	230a      	movs	r3, #10
 8007c64:	fb03 2301 	mla	r3, r3, r1, r2
 8007c68:	9307      	str	r3, [sp, #28]
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007c6e:	1c51      	adds	r1, r2, #1
 8007c70:	9117      	str	r1, [sp, #92]	; 0x5c
 8007c72:	7852      	ldrb	r2, [r2, #1]
 8007c74:	4618      	mov	r0, r3
 8007c76:	e7c9      	b.n	8007c0c <_strtod_l+0x1e4>
 8007c78:	4638      	mov	r0, r7
 8007c7a:	e7d2      	b.n	8007c22 <_strtod_l+0x1fa>
 8007c7c:	2b08      	cmp	r3, #8
 8007c7e:	dc04      	bgt.n	8007c8a <_strtod_l+0x262>
 8007c80:	9e07      	ldr	r6, [sp, #28]
 8007c82:	434e      	muls	r6, r1
 8007c84:	9607      	str	r6, [sp, #28]
 8007c86:	3301      	adds	r3, #1
 8007c88:	e7e2      	b.n	8007c50 <_strtod_l+0x228>
 8007c8a:	f103 0c01 	add.w	ip, r3, #1
 8007c8e:	f1bc 0f10 	cmp.w	ip, #16
 8007c92:	bfd8      	it	le
 8007c94:	fb01 f909 	mulle.w	r9, r1, r9
 8007c98:	e7f5      	b.n	8007c86 <_strtod_l+0x25e>
 8007c9a:	2d10      	cmp	r5, #16
 8007c9c:	bfdc      	itt	le
 8007c9e:	230a      	movle	r3, #10
 8007ca0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007ca4:	e7e1      	b.n	8007c6a <_strtod_l+0x242>
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	9305      	str	r3, [sp, #20]
 8007caa:	2301      	movs	r3, #1
 8007cac:	e77c      	b.n	8007ba8 <_strtod_l+0x180>
 8007cae:	f04f 0c00 	mov.w	ip, #0
 8007cb2:	f108 0202 	add.w	r2, r8, #2
 8007cb6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007cb8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007cbc:	e785      	b.n	8007bca <_strtod_l+0x1a2>
 8007cbe:	f04f 0c01 	mov.w	ip, #1
 8007cc2:	e7f6      	b.n	8007cb2 <_strtod_l+0x28a>
 8007cc4:	0800c67c 	.word	0x0800c67c
 8007cc8:	0800c3cc 	.word	0x0800c3cc
 8007ccc:	7ff00000 	.word	0x7ff00000
 8007cd0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cd2:	1c51      	adds	r1, r2, #1
 8007cd4:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cd6:	7852      	ldrb	r2, [r2, #1]
 8007cd8:	2a30      	cmp	r2, #48	; 0x30
 8007cda:	d0f9      	beq.n	8007cd0 <_strtod_l+0x2a8>
 8007cdc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007ce0:	2908      	cmp	r1, #8
 8007ce2:	f63f af79 	bhi.w	8007bd8 <_strtod_l+0x1b0>
 8007ce6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cec:	9206      	str	r2, [sp, #24]
 8007cee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cf0:	1c51      	adds	r1, r2, #1
 8007cf2:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cf4:	7852      	ldrb	r2, [r2, #1]
 8007cf6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007cfa:	2e09      	cmp	r6, #9
 8007cfc:	d937      	bls.n	8007d6e <_strtod_l+0x346>
 8007cfe:	9e06      	ldr	r6, [sp, #24]
 8007d00:	1b89      	subs	r1, r1, r6
 8007d02:	2908      	cmp	r1, #8
 8007d04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d08:	dc02      	bgt.n	8007d10 <_strtod_l+0x2e8>
 8007d0a:	4576      	cmp	r6, lr
 8007d0c:	bfa8      	it	ge
 8007d0e:	4676      	movge	r6, lr
 8007d10:	f1bc 0f00 	cmp.w	ip, #0
 8007d14:	d000      	beq.n	8007d18 <_strtod_l+0x2f0>
 8007d16:	4276      	negs	r6, r6
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	d14d      	bne.n	8007db8 <_strtod_l+0x390>
 8007d1c:	9904      	ldr	r1, [sp, #16]
 8007d1e:	4301      	orrs	r1, r0
 8007d20:	f47f aec6 	bne.w	8007ab0 <_strtod_l+0x88>
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f47f aee1 	bne.w	8007aec <_strtod_l+0xc4>
 8007d2a:	2a69      	cmp	r2, #105	; 0x69
 8007d2c:	d027      	beq.n	8007d7e <_strtod_l+0x356>
 8007d2e:	dc24      	bgt.n	8007d7a <_strtod_l+0x352>
 8007d30:	2a49      	cmp	r2, #73	; 0x49
 8007d32:	d024      	beq.n	8007d7e <_strtod_l+0x356>
 8007d34:	2a4e      	cmp	r2, #78	; 0x4e
 8007d36:	f47f aed9 	bne.w	8007aec <_strtod_l+0xc4>
 8007d3a:	499f      	ldr	r1, [pc, #636]	; (8007fb8 <_strtod_l+0x590>)
 8007d3c:	a817      	add	r0, sp, #92	; 0x5c
 8007d3e:	f002 f8bf 	bl	8009ec0 <__match>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f43f aed2 	beq.w	8007aec <_strtod_l+0xc4>
 8007d48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	2b28      	cmp	r3, #40	; 0x28
 8007d4e:	d12d      	bne.n	8007dac <_strtod_l+0x384>
 8007d50:	499a      	ldr	r1, [pc, #616]	; (8007fbc <_strtod_l+0x594>)
 8007d52:	aa1a      	add	r2, sp, #104	; 0x68
 8007d54:	a817      	add	r0, sp, #92	; 0x5c
 8007d56:	f002 f8c7 	bl	8009ee8 <__hexnan>
 8007d5a:	2805      	cmp	r0, #5
 8007d5c:	d126      	bne.n	8007dac <_strtod_l+0x384>
 8007d5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007d64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007d68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007d6c:	e6a0      	b.n	8007ab0 <_strtod_l+0x88>
 8007d6e:	210a      	movs	r1, #10
 8007d70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007d74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007d78:	e7b9      	b.n	8007cee <_strtod_l+0x2c6>
 8007d7a:	2a6e      	cmp	r2, #110	; 0x6e
 8007d7c:	e7db      	b.n	8007d36 <_strtod_l+0x30e>
 8007d7e:	4990      	ldr	r1, [pc, #576]	; (8007fc0 <_strtod_l+0x598>)
 8007d80:	a817      	add	r0, sp, #92	; 0x5c
 8007d82:	f002 f89d 	bl	8009ec0 <__match>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f aeb0 	beq.w	8007aec <_strtod_l+0xc4>
 8007d8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d8e:	498d      	ldr	r1, [pc, #564]	; (8007fc4 <_strtod_l+0x59c>)
 8007d90:	3b01      	subs	r3, #1
 8007d92:	a817      	add	r0, sp, #92	; 0x5c
 8007d94:	9317      	str	r3, [sp, #92]	; 0x5c
 8007d96:	f002 f893 	bl	8009ec0 <__match>
 8007d9a:	b910      	cbnz	r0, 8007da2 <_strtod_l+0x37a>
 8007d9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d9e:	3301      	adds	r3, #1
 8007da0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007da2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007fd4 <_strtod_l+0x5ac>
 8007da6:	f04f 0a00 	mov.w	sl, #0
 8007daa:	e681      	b.n	8007ab0 <_strtod_l+0x88>
 8007dac:	4886      	ldr	r0, [pc, #536]	; (8007fc8 <_strtod_l+0x5a0>)
 8007dae:	f003 fa3b 	bl	800b228 <nan>
 8007db2:	ec5b ab10 	vmov	sl, fp, d0
 8007db6:	e67b      	b.n	8007ab0 <_strtod_l+0x88>
 8007db8:	9b05      	ldr	r3, [sp, #20]
 8007dba:	9807      	ldr	r0, [sp, #28]
 8007dbc:	1af3      	subs	r3, r6, r3
 8007dbe:	2f00      	cmp	r7, #0
 8007dc0:	bf08      	it	eq
 8007dc2:	462f      	moveq	r7, r5
 8007dc4:	2d10      	cmp	r5, #16
 8007dc6:	9306      	str	r3, [sp, #24]
 8007dc8:	46a8      	mov	r8, r5
 8007dca:	bfa8      	it	ge
 8007dcc:	f04f 0810 	movge.w	r8, #16
 8007dd0:	f7f8 fb98 	bl	8000504 <__aeabi_ui2d>
 8007dd4:	2d09      	cmp	r5, #9
 8007dd6:	4682      	mov	sl, r0
 8007dd8:	468b      	mov	fp, r1
 8007dda:	dd13      	ble.n	8007e04 <_strtod_l+0x3dc>
 8007ddc:	4b7b      	ldr	r3, [pc, #492]	; (8007fcc <_strtod_l+0x5a4>)
 8007dde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007de2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007de6:	f7f8 fc07 	bl	80005f8 <__aeabi_dmul>
 8007dea:	4682      	mov	sl, r0
 8007dec:	4648      	mov	r0, r9
 8007dee:	468b      	mov	fp, r1
 8007df0:	f7f8 fb88 	bl	8000504 <__aeabi_ui2d>
 8007df4:	4602      	mov	r2, r0
 8007df6:	460b      	mov	r3, r1
 8007df8:	4650      	mov	r0, sl
 8007dfa:	4659      	mov	r1, fp
 8007dfc:	f7f8 fa46 	bl	800028c <__adddf3>
 8007e00:	4682      	mov	sl, r0
 8007e02:	468b      	mov	fp, r1
 8007e04:	2d0f      	cmp	r5, #15
 8007e06:	dc38      	bgt.n	8007e7a <_strtod_l+0x452>
 8007e08:	9b06      	ldr	r3, [sp, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f43f ae50 	beq.w	8007ab0 <_strtod_l+0x88>
 8007e10:	dd24      	ble.n	8007e5c <_strtod_l+0x434>
 8007e12:	2b16      	cmp	r3, #22
 8007e14:	dc0b      	bgt.n	8007e2e <_strtod_l+0x406>
 8007e16:	496d      	ldr	r1, [pc, #436]	; (8007fcc <_strtod_l+0x5a4>)
 8007e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e20:	4652      	mov	r2, sl
 8007e22:	465b      	mov	r3, fp
 8007e24:	f7f8 fbe8 	bl	80005f8 <__aeabi_dmul>
 8007e28:	4682      	mov	sl, r0
 8007e2a:	468b      	mov	fp, r1
 8007e2c:	e640      	b.n	8007ab0 <_strtod_l+0x88>
 8007e2e:	9a06      	ldr	r2, [sp, #24]
 8007e30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e34:	4293      	cmp	r3, r2
 8007e36:	db20      	blt.n	8007e7a <_strtod_l+0x452>
 8007e38:	4c64      	ldr	r4, [pc, #400]	; (8007fcc <_strtod_l+0x5a4>)
 8007e3a:	f1c5 050f 	rsb	r5, r5, #15
 8007e3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e42:	4652      	mov	r2, sl
 8007e44:	465b      	mov	r3, fp
 8007e46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	9b06      	ldr	r3, [sp, #24]
 8007e50:	1b5d      	subs	r5, r3, r5
 8007e52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e5a:	e7e3      	b.n	8007e24 <_strtod_l+0x3fc>
 8007e5c:	9b06      	ldr	r3, [sp, #24]
 8007e5e:	3316      	adds	r3, #22
 8007e60:	db0b      	blt.n	8007e7a <_strtod_l+0x452>
 8007e62:	9b05      	ldr	r3, [sp, #20]
 8007e64:	1b9e      	subs	r6, r3, r6
 8007e66:	4b59      	ldr	r3, [pc, #356]	; (8007fcc <_strtod_l+0x5a4>)
 8007e68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007e6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	f7f8 fcea 	bl	800084c <__aeabi_ddiv>
 8007e78:	e7d6      	b.n	8007e28 <_strtod_l+0x400>
 8007e7a:	9b06      	ldr	r3, [sp, #24]
 8007e7c:	eba5 0808 	sub.w	r8, r5, r8
 8007e80:	4498      	add	r8, r3
 8007e82:	f1b8 0f00 	cmp.w	r8, #0
 8007e86:	dd74      	ble.n	8007f72 <_strtod_l+0x54a>
 8007e88:	f018 030f 	ands.w	r3, r8, #15
 8007e8c:	d00a      	beq.n	8007ea4 <_strtod_l+0x47c>
 8007e8e:	494f      	ldr	r1, [pc, #316]	; (8007fcc <_strtod_l+0x5a4>)
 8007e90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e94:	4652      	mov	r2, sl
 8007e96:	465b      	mov	r3, fp
 8007e98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9c:	f7f8 fbac 	bl	80005f8 <__aeabi_dmul>
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	468b      	mov	fp, r1
 8007ea4:	f038 080f 	bics.w	r8, r8, #15
 8007ea8:	d04f      	beq.n	8007f4a <_strtod_l+0x522>
 8007eaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007eae:	dd22      	ble.n	8007ef6 <_strtod_l+0x4ce>
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	462e      	mov	r6, r5
 8007eb4:	9507      	str	r5, [sp, #28]
 8007eb6:	9505      	str	r5, [sp, #20]
 8007eb8:	2322      	movs	r3, #34	; 0x22
 8007eba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007fd4 <_strtod_l+0x5ac>
 8007ebe:	6023      	str	r3, [r4, #0]
 8007ec0:	f04f 0a00 	mov.w	sl, #0
 8007ec4:	9b07      	ldr	r3, [sp, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f43f adf2 	beq.w	8007ab0 <_strtod_l+0x88>
 8007ecc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007ece:	4620      	mov	r0, r4
 8007ed0:	f002 f97a 	bl	800a1c8 <_Bfree>
 8007ed4:	9905      	ldr	r1, [sp, #20]
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f002 f976 	bl	800a1c8 <_Bfree>
 8007edc:	4631      	mov	r1, r6
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f002 f972 	bl	800a1c8 <_Bfree>
 8007ee4:	9907      	ldr	r1, [sp, #28]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f002 f96e 	bl	800a1c8 <_Bfree>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4620      	mov	r0, r4
 8007ef0:	f002 f96a 	bl	800a1c8 <_Bfree>
 8007ef4:	e5dc      	b.n	8007ab0 <_strtod_l+0x88>
 8007ef6:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <_strtod_l+0x5a8>)
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	2300      	movs	r3, #0
 8007efc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f00:	4650      	mov	r0, sl
 8007f02:	4659      	mov	r1, fp
 8007f04:	4699      	mov	r9, r3
 8007f06:	f1b8 0f01 	cmp.w	r8, #1
 8007f0a:	dc21      	bgt.n	8007f50 <_strtod_l+0x528>
 8007f0c:	b10b      	cbz	r3, 8007f12 <_strtod_l+0x4ea>
 8007f0e:	4682      	mov	sl, r0
 8007f10:	468b      	mov	fp, r1
 8007f12:	4b2f      	ldr	r3, [pc, #188]	; (8007fd0 <_strtod_l+0x5a8>)
 8007f14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f1c:	4652      	mov	r2, sl
 8007f1e:	465b      	mov	r3, fp
 8007f20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f24:	f7f8 fb68 	bl	80005f8 <__aeabi_dmul>
 8007f28:	4b2a      	ldr	r3, [pc, #168]	; (8007fd4 <_strtod_l+0x5ac>)
 8007f2a:	460a      	mov	r2, r1
 8007f2c:	400b      	ands	r3, r1
 8007f2e:	492a      	ldr	r1, [pc, #168]	; (8007fd8 <_strtod_l+0x5b0>)
 8007f30:	428b      	cmp	r3, r1
 8007f32:	4682      	mov	sl, r0
 8007f34:	d8bc      	bhi.n	8007eb0 <_strtod_l+0x488>
 8007f36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f3a:	428b      	cmp	r3, r1
 8007f3c:	bf86      	itte	hi
 8007f3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8007fdc <_strtod_l+0x5b4>
 8007f42:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	9304      	str	r3, [sp, #16]
 8007f4e:	e084      	b.n	800805a <_strtod_l+0x632>
 8007f50:	f018 0f01 	tst.w	r8, #1
 8007f54:	d005      	beq.n	8007f62 <_strtod_l+0x53a>
 8007f56:	9b04      	ldr	r3, [sp, #16]
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fb4c 	bl	80005f8 <__aeabi_dmul>
 8007f60:	2301      	movs	r3, #1
 8007f62:	9a04      	ldr	r2, [sp, #16]
 8007f64:	3208      	adds	r2, #8
 8007f66:	f109 0901 	add.w	r9, r9, #1
 8007f6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007f6e:	9204      	str	r2, [sp, #16]
 8007f70:	e7c9      	b.n	8007f06 <_strtod_l+0x4de>
 8007f72:	d0ea      	beq.n	8007f4a <_strtod_l+0x522>
 8007f74:	f1c8 0800 	rsb	r8, r8, #0
 8007f78:	f018 020f 	ands.w	r2, r8, #15
 8007f7c:	d00a      	beq.n	8007f94 <_strtod_l+0x56c>
 8007f7e:	4b13      	ldr	r3, [pc, #76]	; (8007fcc <_strtod_l+0x5a4>)
 8007f80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f84:	4650      	mov	r0, sl
 8007f86:	4659      	mov	r1, fp
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fc5e 	bl	800084c <__aeabi_ddiv>
 8007f90:	4682      	mov	sl, r0
 8007f92:	468b      	mov	fp, r1
 8007f94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007f98:	d0d7      	beq.n	8007f4a <_strtod_l+0x522>
 8007f9a:	f1b8 0f1f 	cmp.w	r8, #31
 8007f9e:	dd1f      	ble.n	8007fe0 <_strtod_l+0x5b8>
 8007fa0:	2500      	movs	r5, #0
 8007fa2:	462e      	mov	r6, r5
 8007fa4:	9507      	str	r5, [sp, #28]
 8007fa6:	9505      	str	r5, [sp, #20]
 8007fa8:	2322      	movs	r3, #34	; 0x22
 8007faa:	f04f 0a00 	mov.w	sl, #0
 8007fae:	f04f 0b00 	mov.w	fp, #0
 8007fb2:	6023      	str	r3, [r4, #0]
 8007fb4:	e786      	b.n	8007ec4 <_strtod_l+0x49c>
 8007fb6:	bf00      	nop
 8007fb8:	0800c39d 	.word	0x0800c39d
 8007fbc:	0800c3e0 	.word	0x0800c3e0
 8007fc0:	0800c395 	.word	0x0800c395
 8007fc4:	0800c524 	.word	0x0800c524
 8007fc8:	0800c838 	.word	0x0800c838
 8007fcc:	0800c718 	.word	0x0800c718
 8007fd0:	0800c6f0 	.word	0x0800c6f0
 8007fd4:	7ff00000 	.word	0x7ff00000
 8007fd8:	7ca00000 	.word	0x7ca00000
 8007fdc:	7fefffff 	.word	0x7fefffff
 8007fe0:	f018 0310 	ands.w	r3, r8, #16
 8007fe4:	bf18      	it	ne
 8007fe6:	236a      	movne	r3, #106	; 0x6a
 8007fe8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008398 <_strtod_l+0x970>
 8007fec:	9304      	str	r3, [sp, #16]
 8007fee:	4650      	mov	r0, sl
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	f018 0f01 	tst.w	r8, #1
 8007ff8:	d004      	beq.n	8008004 <_strtod_l+0x5dc>
 8007ffa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ffe:	f7f8 fafb 	bl	80005f8 <__aeabi_dmul>
 8008002:	2301      	movs	r3, #1
 8008004:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008008:	f109 0908 	add.w	r9, r9, #8
 800800c:	d1f2      	bne.n	8007ff4 <_strtod_l+0x5cc>
 800800e:	b10b      	cbz	r3, 8008014 <_strtod_l+0x5ec>
 8008010:	4682      	mov	sl, r0
 8008012:	468b      	mov	fp, r1
 8008014:	9b04      	ldr	r3, [sp, #16]
 8008016:	b1c3      	cbz	r3, 800804a <_strtod_l+0x622>
 8008018:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800801c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008020:	2b00      	cmp	r3, #0
 8008022:	4659      	mov	r1, fp
 8008024:	dd11      	ble.n	800804a <_strtod_l+0x622>
 8008026:	2b1f      	cmp	r3, #31
 8008028:	f340 8124 	ble.w	8008274 <_strtod_l+0x84c>
 800802c:	2b34      	cmp	r3, #52	; 0x34
 800802e:	bfde      	ittt	le
 8008030:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008034:	f04f 33ff 	movle.w	r3, #4294967295
 8008038:	fa03 f202 	lslle.w	r2, r3, r2
 800803c:	f04f 0a00 	mov.w	sl, #0
 8008040:	bfcc      	ite	gt
 8008042:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008046:	ea02 0b01 	andle.w	fp, r2, r1
 800804a:	2200      	movs	r2, #0
 800804c:	2300      	movs	r3, #0
 800804e:	4650      	mov	r0, sl
 8008050:	4659      	mov	r1, fp
 8008052:	f7f8 fd39 	bl	8000ac8 <__aeabi_dcmpeq>
 8008056:	2800      	cmp	r0, #0
 8008058:	d1a2      	bne.n	8007fa0 <_strtod_l+0x578>
 800805a:	9b07      	ldr	r3, [sp, #28]
 800805c:	9300      	str	r3, [sp, #0]
 800805e:	9908      	ldr	r1, [sp, #32]
 8008060:	462b      	mov	r3, r5
 8008062:	463a      	mov	r2, r7
 8008064:	4620      	mov	r0, r4
 8008066:	f002 f917 	bl	800a298 <__s2b>
 800806a:	9007      	str	r0, [sp, #28]
 800806c:	2800      	cmp	r0, #0
 800806e:	f43f af1f 	beq.w	8007eb0 <_strtod_l+0x488>
 8008072:	9b05      	ldr	r3, [sp, #20]
 8008074:	1b9e      	subs	r6, r3, r6
 8008076:	9b06      	ldr	r3, [sp, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfb4      	ite	lt
 800807c:	4633      	movlt	r3, r6
 800807e:	2300      	movge	r3, #0
 8008080:	930c      	str	r3, [sp, #48]	; 0x30
 8008082:	9b06      	ldr	r3, [sp, #24]
 8008084:	2500      	movs	r5, #0
 8008086:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800808a:	9312      	str	r3, [sp, #72]	; 0x48
 800808c:	462e      	mov	r6, r5
 800808e:	9b07      	ldr	r3, [sp, #28]
 8008090:	4620      	mov	r0, r4
 8008092:	6859      	ldr	r1, [r3, #4]
 8008094:	f002 f858 	bl	800a148 <_Balloc>
 8008098:	9005      	str	r0, [sp, #20]
 800809a:	2800      	cmp	r0, #0
 800809c:	f43f af0c 	beq.w	8007eb8 <_strtod_l+0x490>
 80080a0:	9b07      	ldr	r3, [sp, #28]
 80080a2:	691a      	ldr	r2, [r3, #16]
 80080a4:	3202      	adds	r2, #2
 80080a6:	f103 010c 	add.w	r1, r3, #12
 80080aa:	0092      	lsls	r2, r2, #2
 80080ac:	300c      	adds	r0, #12
 80080ae:	f002 f83d 	bl	800a12c <memcpy>
 80080b2:	ec4b ab10 	vmov	d0, sl, fp
 80080b6:	aa1a      	add	r2, sp, #104	; 0x68
 80080b8:	a919      	add	r1, sp, #100	; 0x64
 80080ba:	4620      	mov	r0, r4
 80080bc:	f002 fc32 	bl	800a924 <__d2b>
 80080c0:	ec4b ab18 	vmov	d8, sl, fp
 80080c4:	9018      	str	r0, [sp, #96]	; 0x60
 80080c6:	2800      	cmp	r0, #0
 80080c8:	f43f aef6 	beq.w	8007eb8 <_strtod_l+0x490>
 80080cc:	2101      	movs	r1, #1
 80080ce:	4620      	mov	r0, r4
 80080d0:	f002 f97c 	bl	800a3cc <__i2b>
 80080d4:	4606      	mov	r6, r0
 80080d6:	2800      	cmp	r0, #0
 80080d8:	f43f aeee 	beq.w	8007eb8 <_strtod_l+0x490>
 80080dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080de:	9904      	ldr	r1, [sp, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfab      	itete	ge
 80080e4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80080e6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80080e8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80080ea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80080ee:	bfac      	ite	ge
 80080f0:	eb03 0902 	addge.w	r9, r3, r2
 80080f4:	1ad7      	sublt	r7, r2, r3
 80080f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80080f8:	eba3 0801 	sub.w	r8, r3, r1
 80080fc:	4490      	add	r8, r2
 80080fe:	4ba1      	ldr	r3, [pc, #644]	; (8008384 <_strtod_l+0x95c>)
 8008100:	f108 38ff 	add.w	r8, r8, #4294967295
 8008104:	4598      	cmp	r8, r3
 8008106:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800810a:	f280 80c7 	bge.w	800829c <_strtod_l+0x874>
 800810e:	eba3 0308 	sub.w	r3, r3, r8
 8008112:	2b1f      	cmp	r3, #31
 8008114:	eba2 0203 	sub.w	r2, r2, r3
 8008118:	f04f 0101 	mov.w	r1, #1
 800811c:	f300 80b1 	bgt.w	8008282 <_strtod_l+0x85a>
 8008120:	fa01 f303 	lsl.w	r3, r1, r3
 8008124:	930d      	str	r3, [sp, #52]	; 0x34
 8008126:	2300      	movs	r3, #0
 8008128:	9308      	str	r3, [sp, #32]
 800812a:	eb09 0802 	add.w	r8, r9, r2
 800812e:	9b04      	ldr	r3, [sp, #16]
 8008130:	45c1      	cmp	r9, r8
 8008132:	4417      	add	r7, r2
 8008134:	441f      	add	r7, r3
 8008136:	464b      	mov	r3, r9
 8008138:	bfa8      	it	ge
 800813a:	4643      	movge	r3, r8
 800813c:	42bb      	cmp	r3, r7
 800813e:	bfa8      	it	ge
 8008140:	463b      	movge	r3, r7
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfc2      	ittt	gt
 8008146:	eba8 0803 	subgt.w	r8, r8, r3
 800814a:	1aff      	subgt	r7, r7, r3
 800814c:	eba9 0903 	subgt.w	r9, r9, r3
 8008150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	dd17      	ble.n	8008186 <_strtod_l+0x75e>
 8008156:	4631      	mov	r1, r6
 8008158:	461a      	mov	r2, r3
 800815a:	4620      	mov	r0, r4
 800815c:	f002 f9f6 	bl	800a54c <__pow5mult>
 8008160:	4606      	mov	r6, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	f43f aea8 	beq.w	8007eb8 <_strtod_l+0x490>
 8008168:	4601      	mov	r1, r0
 800816a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800816c:	4620      	mov	r0, r4
 800816e:	f002 f943 	bl	800a3f8 <__multiply>
 8008172:	900b      	str	r0, [sp, #44]	; 0x2c
 8008174:	2800      	cmp	r0, #0
 8008176:	f43f ae9f 	beq.w	8007eb8 <_strtod_l+0x490>
 800817a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800817c:	4620      	mov	r0, r4
 800817e:	f002 f823 	bl	800a1c8 <_Bfree>
 8008182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008184:	9318      	str	r3, [sp, #96]	; 0x60
 8008186:	f1b8 0f00 	cmp.w	r8, #0
 800818a:	f300 808c 	bgt.w	80082a6 <_strtod_l+0x87e>
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	2b00      	cmp	r3, #0
 8008192:	dd08      	ble.n	80081a6 <_strtod_l+0x77e>
 8008194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008196:	9905      	ldr	r1, [sp, #20]
 8008198:	4620      	mov	r0, r4
 800819a:	f002 f9d7 	bl	800a54c <__pow5mult>
 800819e:	9005      	str	r0, [sp, #20]
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f43f ae89 	beq.w	8007eb8 <_strtod_l+0x490>
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	dd08      	ble.n	80081bc <_strtod_l+0x794>
 80081aa:	9905      	ldr	r1, [sp, #20]
 80081ac:	463a      	mov	r2, r7
 80081ae:	4620      	mov	r0, r4
 80081b0:	f002 fa26 	bl	800a600 <__lshift>
 80081b4:	9005      	str	r0, [sp, #20]
 80081b6:	2800      	cmp	r0, #0
 80081b8:	f43f ae7e 	beq.w	8007eb8 <_strtod_l+0x490>
 80081bc:	f1b9 0f00 	cmp.w	r9, #0
 80081c0:	dd08      	ble.n	80081d4 <_strtod_l+0x7ac>
 80081c2:	4631      	mov	r1, r6
 80081c4:	464a      	mov	r2, r9
 80081c6:	4620      	mov	r0, r4
 80081c8:	f002 fa1a 	bl	800a600 <__lshift>
 80081cc:	4606      	mov	r6, r0
 80081ce:	2800      	cmp	r0, #0
 80081d0:	f43f ae72 	beq.w	8007eb8 <_strtod_l+0x490>
 80081d4:	9a05      	ldr	r2, [sp, #20]
 80081d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081d8:	4620      	mov	r0, r4
 80081da:	f002 fa9d 	bl	800a718 <__mdiff>
 80081de:	4605      	mov	r5, r0
 80081e0:	2800      	cmp	r0, #0
 80081e2:	f43f ae69 	beq.w	8007eb8 <_strtod_l+0x490>
 80081e6:	68c3      	ldr	r3, [r0, #12]
 80081e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80081ea:	2300      	movs	r3, #0
 80081ec:	60c3      	str	r3, [r0, #12]
 80081ee:	4631      	mov	r1, r6
 80081f0:	f002 fa76 	bl	800a6e0 <__mcmp>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	da60      	bge.n	80082ba <_strtod_l+0x892>
 80081f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081fa:	ea53 030a 	orrs.w	r3, r3, sl
 80081fe:	f040 8082 	bne.w	8008306 <_strtod_l+0x8de>
 8008202:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008206:	2b00      	cmp	r3, #0
 8008208:	d17d      	bne.n	8008306 <_strtod_l+0x8de>
 800820a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800820e:	0d1b      	lsrs	r3, r3, #20
 8008210:	051b      	lsls	r3, r3, #20
 8008212:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008216:	d976      	bls.n	8008306 <_strtod_l+0x8de>
 8008218:	696b      	ldr	r3, [r5, #20]
 800821a:	b913      	cbnz	r3, 8008222 <_strtod_l+0x7fa>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	2b01      	cmp	r3, #1
 8008220:	dd71      	ble.n	8008306 <_strtod_l+0x8de>
 8008222:	4629      	mov	r1, r5
 8008224:	2201      	movs	r2, #1
 8008226:	4620      	mov	r0, r4
 8008228:	f002 f9ea 	bl	800a600 <__lshift>
 800822c:	4631      	mov	r1, r6
 800822e:	4605      	mov	r5, r0
 8008230:	f002 fa56 	bl	800a6e0 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	dd66      	ble.n	8008306 <_strtod_l+0x8de>
 8008238:	9904      	ldr	r1, [sp, #16]
 800823a:	4a53      	ldr	r2, [pc, #332]	; (8008388 <_strtod_l+0x960>)
 800823c:	465b      	mov	r3, fp
 800823e:	2900      	cmp	r1, #0
 8008240:	f000 8081 	beq.w	8008346 <_strtod_l+0x91e>
 8008244:	ea02 010b 	and.w	r1, r2, fp
 8008248:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800824c:	dc7b      	bgt.n	8008346 <_strtod_l+0x91e>
 800824e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008252:	f77f aea9 	ble.w	8007fa8 <_strtod_l+0x580>
 8008256:	4b4d      	ldr	r3, [pc, #308]	; (800838c <_strtod_l+0x964>)
 8008258:	4650      	mov	r0, sl
 800825a:	4659      	mov	r1, fp
 800825c:	2200      	movs	r2, #0
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	460b      	mov	r3, r1
 8008264:	4303      	orrs	r3, r0
 8008266:	bf08      	it	eq
 8008268:	2322      	moveq	r3, #34	; 0x22
 800826a:	4682      	mov	sl, r0
 800826c:	468b      	mov	fp, r1
 800826e:	bf08      	it	eq
 8008270:	6023      	streq	r3, [r4, #0]
 8008272:	e62b      	b.n	8007ecc <_strtod_l+0x4a4>
 8008274:	f04f 32ff 	mov.w	r2, #4294967295
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	ea03 0a0a 	and.w	sl, r3, sl
 8008280:	e6e3      	b.n	800804a <_strtod_l+0x622>
 8008282:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008286:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800828a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800828e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008292:	fa01 f308 	lsl.w	r3, r1, r8
 8008296:	9308      	str	r3, [sp, #32]
 8008298:	910d      	str	r1, [sp, #52]	; 0x34
 800829a:	e746      	b.n	800812a <_strtod_l+0x702>
 800829c:	2300      	movs	r3, #0
 800829e:	9308      	str	r3, [sp, #32]
 80082a0:	2301      	movs	r3, #1
 80082a2:	930d      	str	r3, [sp, #52]	; 0x34
 80082a4:	e741      	b.n	800812a <_strtod_l+0x702>
 80082a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082a8:	4642      	mov	r2, r8
 80082aa:	4620      	mov	r0, r4
 80082ac:	f002 f9a8 	bl	800a600 <__lshift>
 80082b0:	9018      	str	r0, [sp, #96]	; 0x60
 80082b2:	2800      	cmp	r0, #0
 80082b4:	f47f af6b 	bne.w	800818e <_strtod_l+0x766>
 80082b8:	e5fe      	b.n	8007eb8 <_strtod_l+0x490>
 80082ba:	465f      	mov	r7, fp
 80082bc:	d16e      	bne.n	800839c <_strtod_l+0x974>
 80082be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80082c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082c4:	b342      	cbz	r2, 8008318 <_strtod_l+0x8f0>
 80082c6:	4a32      	ldr	r2, [pc, #200]	; (8008390 <_strtod_l+0x968>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d128      	bne.n	800831e <_strtod_l+0x8f6>
 80082cc:	9b04      	ldr	r3, [sp, #16]
 80082ce:	4651      	mov	r1, sl
 80082d0:	b1eb      	cbz	r3, 800830e <_strtod_l+0x8e6>
 80082d2:	4b2d      	ldr	r3, [pc, #180]	; (8008388 <_strtod_l+0x960>)
 80082d4:	403b      	ands	r3, r7
 80082d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082da:	f04f 32ff 	mov.w	r2, #4294967295
 80082de:	d819      	bhi.n	8008314 <_strtod_l+0x8ec>
 80082e0:	0d1b      	lsrs	r3, r3, #20
 80082e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	4299      	cmp	r1, r3
 80082ec:	d117      	bne.n	800831e <_strtod_l+0x8f6>
 80082ee:	4b29      	ldr	r3, [pc, #164]	; (8008394 <_strtod_l+0x96c>)
 80082f0:	429f      	cmp	r7, r3
 80082f2:	d102      	bne.n	80082fa <_strtod_l+0x8d2>
 80082f4:	3101      	adds	r1, #1
 80082f6:	f43f addf 	beq.w	8007eb8 <_strtod_l+0x490>
 80082fa:	4b23      	ldr	r3, [pc, #140]	; (8008388 <_strtod_l+0x960>)
 80082fc:	403b      	ands	r3, r7
 80082fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008302:	f04f 0a00 	mov.w	sl, #0
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1a4      	bne.n	8008256 <_strtod_l+0x82e>
 800830c:	e5de      	b.n	8007ecc <_strtod_l+0x4a4>
 800830e:	f04f 33ff 	mov.w	r3, #4294967295
 8008312:	e7ea      	b.n	80082ea <_strtod_l+0x8c2>
 8008314:	4613      	mov	r3, r2
 8008316:	e7e8      	b.n	80082ea <_strtod_l+0x8c2>
 8008318:	ea53 030a 	orrs.w	r3, r3, sl
 800831c:	d08c      	beq.n	8008238 <_strtod_l+0x810>
 800831e:	9b08      	ldr	r3, [sp, #32]
 8008320:	b1db      	cbz	r3, 800835a <_strtod_l+0x932>
 8008322:	423b      	tst	r3, r7
 8008324:	d0ef      	beq.n	8008306 <_strtod_l+0x8de>
 8008326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008328:	9a04      	ldr	r2, [sp, #16]
 800832a:	4650      	mov	r0, sl
 800832c:	4659      	mov	r1, fp
 800832e:	b1c3      	cbz	r3, 8008362 <_strtod_l+0x93a>
 8008330:	f7ff fb5c 	bl	80079ec <sulp>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	ec51 0b18 	vmov	r0, r1, d8
 800833c:	f7f7 ffa6 	bl	800028c <__adddf3>
 8008340:	4682      	mov	sl, r0
 8008342:	468b      	mov	fp, r1
 8008344:	e7df      	b.n	8008306 <_strtod_l+0x8de>
 8008346:	4013      	ands	r3, r2
 8008348:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800834c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008350:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008354:	f04f 3aff 	mov.w	sl, #4294967295
 8008358:	e7d5      	b.n	8008306 <_strtod_l+0x8de>
 800835a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835c:	ea13 0f0a 	tst.w	r3, sl
 8008360:	e7e0      	b.n	8008324 <_strtod_l+0x8fc>
 8008362:	f7ff fb43 	bl	80079ec <sulp>
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	ec51 0b18 	vmov	r0, r1, d8
 800836e:	f7f7 ff8b 	bl	8000288 <__aeabi_dsub>
 8008372:	2200      	movs	r2, #0
 8008374:	2300      	movs	r3, #0
 8008376:	4682      	mov	sl, r0
 8008378:	468b      	mov	fp, r1
 800837a:	f7f8 fba5 	bl	8000ac8 <__aeabi_dcmpeq>
 800837e:	2800      	cmp	r0, #0
 8008380:	d0c1      	beq.n	8008306 <_strtod_l+0x8de>
 8008382:	e611      	b.n	8007fa8 <_strtod_l+0x580>
 8008384:	fffffc02 	.word	0xfffffc02
 8008388:	7ff00000 	.word	0x7ff00000
 800838c:	39500000 	.word	0x39500000
 8008390:	000fffff 	.word	0x000fffff
 8008394:	7fefffff 	.word	0x7fefffff
 8008398:	0800c3f8 	.word	0x0800c3f8
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	f002 fb1c 	bl	800a9dc <__ratio>
 80083a4:	ec59 8b10 	vmov	r8, r9, d0
 80083a8:	ee10 0a10 	vmov	r0, s0
 80083ac:	2200      	movs	r2, #0
 80083ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083b2:	4649      	mov	r1, r9
 80083b4:	f7f8 fb9c 	bl	8000af0 <__aeabi_dcmple>
 80083b8:	2800      	cmp	r0, #0
 80083ba:	d07a      	beq.n	80084b2 <_strtod_l+0xa8a>
 80083bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d04a      	beq.n	8008458 <_strtod_l+0xa30>
 80083c2:	4b95      	ldr	r3, [pc, #596]	; (8008618 <_strtod_l+0xbf0>)
 80083c4:	2200      	movs	r2, #0
 80083c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80083ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008618 <_strtod_l+0xbf0>
 80083ce:	f04f 0800 	mov.w	r8, #0
 80083d2:	4b92      	ldr	r3, [pc, #584]	; (800861c <_strtod_l+0xbf4>)
 80083d4:	403b      	ands	r3, r7
 80083d6:	930d      	str	r3, [sp, #52]	; 0x34
 80083d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083da:	4b91      	ldr	r3, [pc, #580]	; (8008620 <_strtod_l+0xbf8>)
 80083dc:	429a      	cmp	r2, r3
 80083de:	f040 80b0 	bne.w	8008542 <_strtod_l+0xb1a>
 80083e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80083ea:	ec4b ab10 	vmov	d0, sl, fp
 80083ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80083f2:	f002 fa1b 	bl	800a82c <__ulp>
 80083f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083fa:	ec53 2b10 	vmov	r2, r3, d0
 80083fe:	f7f8 f8fb 	bl	80005f8 <__aeabi_dmul>
 8008402:	4652      	mov	r2, sl
 8008404:	465b      	mov	r3, fp
 8008406:	f7f7 ff41 	bl	800028c <__adddf3>
 800840a:	460b      	mov	r3, r1
 800840c:	4983      	ldr	r1, [pc, #524]	; (800861c <_strtod_l+0xbf4>)
 800840e:	4a85      	ldr	r2, [pc, #532]	; (8008624 <_strtod_l+0xbfc>)
 8008410:	4019      	ands	r1, r3
 8008412:	4291      	cmp	r1, r2
 8008414:	4682      	mov	sl, r0
 8008416:	d960      	bls.n	80084da <_strtod_l+0xab2>
 8008418:	ee18 3a90 	vmov	r3, s17
 800841c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008420:	4293      	cmp	r3, r2
 8008422:	d104      	bne.n	800842e <_strtod_l+0xa06>
 8008424:	ee18 3a10 	vmov	r3, s16
 8008428:	3301      	adds	r3, #1
 800842a:	f43f ad45 	beq.w	8007eb8 <_strtod_l+0x490>
 800842e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008630 <_strtod_l+0xc08>
 8008432:	f04f 3aff 	mov.w	sl, #4294967295
 8008436:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008438:	4620      	mov	r0, r4
 800843a:	f001 fec5 	bl	800a1c8 <_Bfree>
 800843e:	9905      	ldr	r1, [sp, #20]
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fec1 	bl	800a1c8 <_Bfree>
 8008446:	4631      	mov	r1, r6
 8008448:	4620      	mov	r0, r4
 800844a:	f001 febd 	bl	800a1c8 <_Bfree>
 800844e:	4629      	mov	r1, r5
 8008450:	4620      	mov	r0, r4
 8008452:	f001 feb9 	bl	800a1c8 <_Bfree>
 8008456:	e61a      	b.n	800808e <_strtod_l+0x666>
 8008458:	f1ba 0f00 	cmp.w	sl, #0
 800845c:	d11b      	bne.n	8008496 <_strtod_l+0xa6e>
 800845e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008462:	b9f3      	cbnz	r3, 80084a2 <_strtod_l+0xa7a>
 8008464:	4b6c      	ldr	r3, [pc, #432]	; (8008618 <_strtod_l+0xbf0>)
 8008466:	2200      	movs	r2, #0
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	f7f8 fb36 	bl	8000adc <__aeabi_dcmplt>
 8008470:	b9d0      	cbnz	r0, 80084a8 <_strtod_l+0xa80>
 8008472:	4640      	mov	r0, r8
 8008474:	4649      	mov	r1, r9
 8008476:	4b6c      	ldr	r3, [pc, #432]	; (8008628 <_strtod_l+0xc00>)
 8008478:	2200      	movs	r2, #0
 800847a:	f7f8 f8bd 	bl	80005f8 <__aeabi_dmul>
 800847e:	4680      	mov	r8, r0
 8008480:	4689      	mov	r9, r1
 8008482:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008486:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800848a:	9315      	str	r3, [sp, #84]	; 0x54
 800848c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008494:	e79d      	b.n	80083d2 <_strtod_l+0x9aa>
 8008496:	f1ba 0f01 	cmp.w	sl, #1
 800849a:	d102      	bne.n	80084a2 <_strtod_l+0xa7a>
 800849c:	2f00      	cmp	r7, #0
 800849e:	f43f ad83 	beq.w	8007fa8 <_strtod_l+0x580>
 80084a2:	4b62      	ldr	r3, [pc, #392]	; (800862c <_strtod_l+0xc04>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	e78e      	b.n	80083c6 <_strtod_l+0x99e>
 80084a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008628 <_strtod_l+0xc00>
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	e7e7      	b.n	8008482 <_strtod_l+0xa5a>
 80084b2:	4b5d      	ldr	r3, [pc, #372]	; (8008628 <_strtod_l+0xc00>)
 80084b4:	4640      	mov	r0, r8
 80084b6:	4649      	mov	r1, r9
 80084b8:	2200      	movs	r2, #0
 80084ba:	f7f8 f89d 	bl	80005f8 <__aeabi_dmul>
 80084be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c0:	4680      	mov	r8, r0
 80084c2:	4689      	mov	r9, r1
 80084c4:	b933      	cbnz	r3, 80084d4 <_strtod_l+0xaac>
 80084c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084ca:	900e      	str	r0, [sp, #56]	; 0x38
 80084cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80084ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80084d2:	e7dd      	b.n	8008490 <_strtod_l+0xa68>
 80084d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80084d8:	e7f9      	b.n	80084ce <_strtod_l+0xaa6>
 80084da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80084de:	9b04      	ldr	r3, [sp, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1a8      	bne.n	8008436 <_strtod_l+0xa0e>
 80084e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80084e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084ea:	0d1b      	lsrs	r3, r3, #20
 80084ec:	051b      	lsls	r3, r3, #20
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d1a1      	bne.n	8008436 <_strtod_l+0xa0e>
 80084f2:	4640      	mov	r0, r8
 80084f4:	4649      	mov	r1, r9
 80084f6:	f7f8 fbdf 	bl	8000cb8 <__aeabi_d2lz>
 80084fa:	f7f8 f84f 	bl	800059c <__aeabi_l2d>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4640      	mov	r0, r8
 8008504:	4649      	mov	r1, r9
 8008506:	f7f7 febf 	bl	8000288 <__aeabi_dsub>
 800850a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800850c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008510:	ea43 030a 	orr.w	r3, r3, sl
 8008514:	4313      	orrs	r3, r2
 8008516:	4680      	mov	r8, r0
 8008518:	4689      	mov	r9, r1
 800851a:	d055      	beq.n	80085c8 <_strtod_l+0xba0>
 800851c:	a336      	add	r3, pc, #216	; (adr r3, 80085f8 <_strtod_l+0xbd0>)
 800851e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008522:	f7f8 fadb 	bl	8000adc <__aeabi_dcmplt>
 8008526:	2800      	cmp	r0, #0
 8008528:	f47f acd0 	bne.w	8007ecc <_strtod_l+0x4a4>
 800852c:	a334      	add	r3, pc, #208	; (adr r3, 8008600 <_strtod_l+0xbd8>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	4640      	mov	r0, r8
 8008534:	4649      	mov	r1, r9
 8008536:	f7f8 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800853a:	2800      	cmp	r0, #0
 800853c:	f43f af7b 	beq.w	8008436 <_strtod_l+0xa0e>
 8008540:	e4c4      	b.n	8007ecc <_strtod_l+0x4a4>
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	b333      	cbz	r3, 8008594 <_strtod_l+0xb6c>
 8008546:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008548:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800854c:	d822      	bhi.n	8008594 <_strtod_l+0xb6c>
 800854e:	a32e      	add	r3, pc, #184	; (adr r3, 8008608 <_strtod_l+0xbe0>)
 8008550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008554:	4640      	mov	r0, r8
 8008556:	4649      	mov	r1, r9
 8008558:	f7f8 faca 	bl	8000af0 <__aeabi_dcmple>
 800855c:	b1a0      	cbz	r0, 8008588 <_strtod_l+0xb60>
 800855e:	4649      	mov	r1, r9
 8008560:	4640      	mov	r0, r8
 8008562:	f7f8 fb21 	bl	8000ba8 <__aeabi_d2uiz>
 8008566:	2801      	cmp	r0, #1
 8008568:	bf38      	it	cc
 800856a:	2001      	movcc	r0, #1
 800856c:	f7f7 ffca 	bl	8000504 <__aeabi_ui2d>
 8008570:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008572:	4680      	mov	r8, r0
 8008574:	4689      	mov	r9, r1
 8008576:	bb23      	cbnz	r3, 80085c2 <_strtod_l+0xb9a>
 8008578:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800857c:	9010      	str	r0, [sp, #64]	; 0x40
 800857e:	9311      	str	r3, [sp, #68]	; 0x44
 8008580:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008584:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800858a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800858c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	9309      	str	r3, [sp, #36]	; 0x24
 8008594:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008598:	eeb0 0a48 	vmov.f32	s0, s16
 800859c:	eef0 0a68 	vmov.f32	s1, s17
 80085a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085a4:	f002 f942 	bl	800a82c <__ulp>
 80085a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085ac:	ec53 2b10 	vmov	r2, r3, d0
 80085b0:	f7f8 f822 	bl	80005f8 <__aeabi_dmul>
 80085b4:	ec53 2b18 	vmov	r2, r3, d8
 80085b8:	f7f7 fe68 	bl	800028c <__adddf3>
 80085bc:	4682      	mov	sl, r0
 80085be:	468b      	mov	fp, r1
 80085c0:	e78d      	b.n	80084de <_strtod_l+0xab6>
 80085c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80085c6:	e7db      	b.n	8008580 <_strtod_l+0xb58>
 80085c8:	a311      	add	r3, pc, #68	; (adr r3, 8008610 <_strtod_l+0xbe8>)
 80085ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ce:	f7f8 fa85 	bl	8000adc <__aeabi_dcmplt>
 80085d2:	e7b2      	b.n	800853a <_strtod_l+0xb12>
 80085d4:	2300      	movs	r3, #0
 80085d6:	930a      	str	r3, [sp, #40]	; 0x28
 80085d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	f7ff ba6b 	b.w	8007ab8 <_strtod_l+0x90>
 80085e2:	2a65      	cmp	r2, #101	; 0x65
 80085e4:	f43f ab5f 	beq.w	8007ca6 <_strtod_l+0x27e>
 80085e8:	2a45      	cmp	r2, #69	; 0x45
 80085ea:	f43f ab5c 	beq.w	8007ca6 <_strtod_l+0x27e>
 80085ee:	2301      	movs	r3, #1
 80085f0:	f7ff bb94 	b.w	8007d1c <_strtod_l+0x2f4>
 80085f4:	f3af 8000 	nop.w
 80085f8:	94a03595 	.word	0x94a03595
 80085fc:	3fdfffff 	.word	0x3fdfffff
 8008600:	35afe535 	.word	0x35afe535
 8008604:	3fe00000 	.word	0x3fe00000
 8008608:	ffc00000 	.word	0xffc00000
 800860c:	41dfffff 	.word	0x41dfffff
 8008610:	94a03595 	.word	0x94a03595
 8008614:	3fcfffff 	.word	0x3fcfffff
 8008618:	3ff00000 	.word	0x3ff00000
 800861c:	7ff00000 	.word	0x7ff00000
 8008620:	7fe00000 	.word	0x7fe00000
 8008624:	7c9fffff 	.word	0x7c9fffff
 8008628:	3fe00000 	.word	0x3fe00000
 800862c:	bff00000 	.word	0xbff00000
 8008630:	7fefffff 	.word	0x7fefffff

08008634 <_strtod_r>:
 8008634:	4b01      	ldr	r3, [pc, #4]	; (800863c <_strtod_r+0x8>)
 8008636:	f7ff b9f7 	b.w	8007a28 <_strtod_l>
 800863a:	bf00      	nop
 800863c:	200002fc 	.word	0x200002fc

08008640 <_strtol_l.constprop.0>:
 8008640:	2b01      	cmp	r3, #1
 8008642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008646:	d001      	beq.n	800864c <_strtol_l.constprop.0+0xc>
 8008648:	2b24      	cmp	r3, #36	; 0x24
 800864a:	d906      	bls.n	800865a <_strtol_l.constprop.0+0x1a>
 800864c:	f7fe fa6e 	bl	8006b2c <__errno>
 8008650:	2316      	movs	r3, #22
 8008652:	6003      	str	r3, [r0, #0]
 8008654:	2000      	movs	r0, #0
 8008656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008740 <_strtol_l.constprop.0+0x100>
 800865e:	460d      	mov	r5, r1
 8008660:	462e      	mov	r6, r5
 8008662:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008666:	f814 700c 	ldrb.w	r7, [r4, ip]
 800866a:	f017 0708 	ands.w	r7, r7, #8
 800866e:	d1f7      	bne.n	8008660 <_strtol_l.constprop.0+0x20>
 8008670:	2c2d      	cmp	r4, #45	; 0x2d
 8008672:	d132      	bne.n	80086da <_strtol_l.constprop.0+0x9a>
 8008674:	782c      	ldrb	r4, [r5, #0]
 8008676:	2701      	movs	r7, #1
 8008678:	1cb5      	adds	r5, r6, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d05b      	beq.n	8008736 <_strtol_l.constprop.0+0xf6>
 800867e:	2b10      	cmp	r3, #16
 8008680:	d109      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008682:	2c30      	cmp	r4, #48	; 0x30
 8008684:	d107      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008686:	782c      	ldrb	r4, [r5, #0]
 8008688:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800868c:	2c58      	cmp	r4, #88	; 0x58
 800868e:	d14d      	bne.n	800872c <_strtol_l.constprop.0+0xec>
 8008690:	786c      	ldrb	r4, [r5, #1]
 8008692:	2310      	movs	r3, #16
 8008694:	3502      	adds	r5, #2
 8008696:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800869a:	f108 38ff 	add.w	r8, r8, #4294967295
 800869e:	f04f 0c00 	mov.w	ip, #0
 80086a2:	fbb8 f9f3 	udiv	r9, r8, r3
 80086a6:	4666      	mov	r6, ip
 80086a8:	fb03 8a19 	mls	sl, r3, r9, r8
 80086ac:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80086b0:	f1be 0f09 	cmp.w	lr, #9
 80086b4:	d816      	bhi.n	80086e4 <_strtol_l.constprop.0+0xa4>
 80086b6:	4674      	mov	r4, lr
 80086b8:	42a3      	cmp	r3, r4
 80086ba:	dd24      	ble.n	8008706 <_strtol_l.constprop.0+0xc6>
 80086bc:	f1bc 0f00 	cmp.w	ip, #0
 80086c0:	db1e      	blt.n	8008700 <_strtol_l.constprop.0+0xc0>
 80086c2:	45b1      	cmp	r9, r6
 80086c4:	d31c      	bcc.n	8008700 <_strtol_l.constprop.0+0xc0>
 80086c6:	d101      	bne.n	80086cc <_strtol_l.constprop.0+0x8c>
 80086c8:	45a2      	cmp	sl, r4
 80086ca:	db19      	blt.n	8008700 <_strtol_l.constprop.0+0xc0>
 80086cc:	fb06 4603 	mla	r6, r6, r3, r4
 80086d0:	f04f 0c01 	mov.w	ip, #1
 80086d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086d8:	e7e8      	b.n	80086ac <_strtol_l.constprop.0+0x6c>
 80086da:	2c2b      	cmp	r4, #43	; 0x2b
 80086dc:	bf04      	itt	eq
 80086de:	782c      	ldrbeq	r4, [r5, #0]
 80086e0:	1cb5      	addeq	r5, r6, #2
 80086e2:	e7ca      	b.n	800867a <_strtol_l.constprop.0+0x3a>
 80086e4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80086e8:	f1be 0f19 	cmp.w	lr, #25
 80086ec:	d801      	bhi.n	80086f2 <_strtol_l.constprop.0+0xb2>
 80086ee:	3c37      	subs	r4, #55	; 0x37
 80086f0:	e7e2      	b.n	80086b8 <_strtol_l.constprop.0+0x78>
 80086f2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80086f6:	f1be 0f19 	cmp.w	lr, #25
 80086fa:	d804      	bhi.n	8008706 <_strtol_l.constprop.0+0xc6>
 80086fc:	3c57      	subs	r4, #87	; 0x57
 80086fe:	e7db      	b.n	80086b8 <_strtol_l.constprop.0+0x78>
 8008700:	f04f 3cff 	mov.w	ip, #4294967295
 8008704:	e7e6      	b.n	80086d4 <_strtol_l.constprop.0+0x94>
 8008706:	f1bc 0f00 	cmp.w	ip, #0
 800870a:	da05      	bge.n	8008718 <_strtol_l.constprop.0+0xd8>
 800870c:	2322      	movs	r3, #34	; 0x22
 800870e:	6003      	str	r3, [r0, #0]
 8008710:	4646      	mov	r6, r8
 8008712:	b942      	cbnz	r2, 8008726 <_strtol_l.constprop.0+0xe6>
 8008714:	4630      	mov	r0, r6
 8008716:	e79e      	b.n	8008656 <_strtol_l.constprop.0+0x16>
 8008718:	b107      	cbz	r7, 800871c <_strtol_l.constprop.0+0xdc>
 800871a:	4276      	negs	r6, r6
 800871c:	2a00      	cmp	r2, #0
 800871e:	d0f9      	beq.n	8008714 <_strtol_l.constprop.0+0xd4>
 8008720:	f1bc 0f00 	cmp.w	ip, #0
 8008724:	d000      	beq.n	8008728 <_strtol_l.constprop.0+0xe8>
 8008726:	1e69      	subs	r1, r5, #1
 8008728:	6011      	str	r1, [r2, #0]
 800872a:	e7f3      	b.n	8008714 <_strtol_l.constprop.0+0xd4>
 800872c:	2430      	movs	r4, #48	; 0x30
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1b1      	bne.n	8008696 <_strtol_l.constprop.0+0x56>
 8008732:	2308      	movs	r3, #8
 8008734:	e7af      	b.n	8008696 <_strtol_l.constprop.0+0x56>
 8008736:	2c30      	cmp	r4, #48	; 0x30
 8008738:	d0a5      	beq.n	8008686 <_strtol_l.constprop.0+0x46>
 800873a:	230a      	movs	r3, #10
 800873c:	e7ab      	b.n	8008696 <_strtol_l.constprop.0+0x56>
 800873e:	bf00      	nop
 8008740:	0800c421 	.word	0x0800c421

08008744 <_strtol_r>:
 8008744:	f7ff bf7c 	b.w	8008640 <_strtol_l.constprop.0>

08008748 <strtol>:
 8008748:	4613      	mov	r3, r2
 800874a:	460a      	mov	r2, r1
 800874c:	4601      	mov	r1, r0
 800874e:	4802      	ldr	r0, [pc, #8]	; (8008758 <strtol+0x10>)
 8008750:	6800      	ldr	r0, [r0, #0]
 8008752:	f7ff bf75 	b.w	8008640 <_strtol_l.constprop.0>
 8008756:	bf00      	nop
 8008758:	20000294 	.word	0x20000294

0800875c <__swbuf_r>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	460e      	mov	r6, r1
 8008760:	4614      	mov	r4, r2
 8008762:	4605      	mov	r5, r0
 8008764:	b118      	cbz	r0, 800876e <__swbuf_r+0x12>
 8008766:	6983      	ldr	r3, [r0, #24]
 8008768:	b90b      	cbnz	r3, 800876e <__swbuf_r+0x12>
 800876a:	f001 f84d 	bl	8009808 <__sinit>
 800876e:	4b21      	ldr	r3, [pc, #132]	; (80087f4 <__swbuf_r+0x98>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d12b      	bne.n	80087cc <__swbuf_r+0x70>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	69a3      	ldr	r3, [r4, #24]
 8008778:	60a3      	str	r3, [r4, #8]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	071a      	lsls	r2, r3, #28
 800877e:	d52f      	bpl.n	80087e0 <__swbuf_r+0x84>
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	b36b      	cbz	r3, 80087e0 <__swbuf_r+0x84>
 8008784:	6923      	ldr	r3, [r4, #16]
 8008786:	6820      	ldr	r0, [r4, #0]
 8008788:	1ac0      	subs	r0, r0, r3
 800878a:	6963      	ldr	r3, [r4, #20]
 800878c:	b2f6      	uxtb	r6, r6
 800878e:	4283      	cmp	r3, r0
 8008790:	4637      	mov	r7, r6
 8008792:	dc04      	bgt.n	800879e <__swbuf_r+0x42>
 8008794:	4621      	mov	r1, r4
 8008796:	4628      	mov	r0, r5
 8008798:	f000 ffa2 	bl	80096e0 <_fflush_r>
 800879c:	bb30      	cbnz	r0, 80087ec <__swbuf_r+0x90>
 800879e:	68a3      	ldr	r3, [r4, #8]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	60a3      	str	r3, [r4, #8]
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	701e      	strb	r6, [r3, #0]
 80087ac:	6963      	ldr	r3, [r4, #20]
 80087ae:	3001      	adds	r0, #1
 80087b0:	4283      	cmp	r3, r0
 80087b2:	d004      	beq.n	80087be <__swbuf_r+0x62>
 80087b4:	89a3      	ldrh	r3, [r4, #12]
 80087b6:	07db      	lsls	r3, r3, #31
 80087b8:	d506      	bpl.n	80087c8 <__swbuf_r+0x6c>
 80087ba:	2e0a      	cmp	r6, #10
 80087bc:	d104      	bne.n	80087c8 <__swbuf_r+0x6c>
 80087be:	4621      	mov	r1, r4
 80087c0:	4628      	mov	r0, r5
 80087c2:	f000 ff8d 	bl	80096e0 <_fflush_r>
 80087c6:	b988      	cbnz	r0, 80087ec <__swbuf_r+0x90>
 80087c8:	4638      	mov	r0, r7
 80087ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087cc:	4b0a      	ldr	r3, [pc, #40]	; (80087f8 <__swbuf_r+0x9c>)
 80087ce:	429c      	cmp	r4, r3
 80087d0:	d101      	bne.n	80087d6 <__swbuf_r+0x7a>
 80087d2:	68ac      	ldr	r4, [r5, #8]
 80087d4:	e7cf      	b.n	8008776 <__swbuf_r+0x1a>
 80087d6:	4b09      	ldr	r3, [pc, #36]	; (80087fc <__swbuf_r+0xa0>)
 80087d8:	429c      	cmp	r4, r3
 80087da:	bf08      	it	eq
 80087dc:	68ec      	ldreq	r4, [r5, #12]
 80087de:	e7ca      	b.n	8008776 <__swbuf_r+0x1a>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f80c 	bl	8008800 <__swsetup_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	d0cb      	beq.n	8008784 <__swbuf_r+0x28>
 80087ec:	f04f 37ff 	mov.w	r7, #4294967295
 80087f0:	e7ea      	b.n	80087c8 <__swbuf_r+0x6c>
 80087f2:	bf00      	nop
 80087f4:	0800c5d4 	.word	0x0800c5d4
 80087f8:	0800c5f4 	.word	0x0800c5f4
 80087fc:	0800c5b4 	.word	0x0800c5b4

08008800 <__swsetup_r>:
 8008800:	4b32      	ldr	r3, [pc, #200]	; (80088cc <__swsetup_r+0xcc>)
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	681d      	ldr	r5, [r3, #0]
 8008806:	4606      	mov	r6, r0
 8008808:	460c      	mov	r4, r1
 800880a:	b125      	cbz	r5, 8008816 <__swsetup_r+0x16>
 800880c:	69ab      	ldr	r3, [r5, #24]
 800880e:	b913      	cbnz	r3, 8008816 <__swsetup_r+0x16>
 8008810:	4628      	mov	r0, r5
 8008812:	f000 fff9 	bl	8009808 <__sinit>
 8008816:	4b2e      	ldr	r3, [pc, #184]	; (80088d0 <__swsetup_r+0xd0>)
 8008818:	429c      	cmp	r4, r3
 800881a:	d10f      	bne.n	800883c <__swsetup_r+0x3c>
 800881c:	686c      	ldr	r4, [r5, #4]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008824:	0719      	lsls	r1, r3, #28
 8008826:	d42c      	bmi.n	8008882 <__swsetup_r+0x82>
 8008828:	06dd      	lsls	r5, r3, #27
 800882a:	d411      	bmi.n	8008850 <__swsetup_r+0x50>
 800882c:	2309      	movs	r3, #9
 800882e:	6033      	str	r3, [r6, #0]
 8008830:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008834:	81a3      	strh	r3, [r4, #12]
 8008836:	f04f 30ff 	mov.w	r0, #4294967295
 800883a:	e03e      	b.n	80088ba <__swsetup_r+0xba>
 800883c:	4b25      	ldr	r3, [pc, #148]	; (80088d4 <__swsetup_r+0xd4>)
 800883e:	429c      	cmp	r4, r3
 8008840:	d101      	bne.n	8008846 <__swsetup_r+0x46>
 8008842:	68ac      	ldr	r4, [r5, #8]
 8008844:	e7eb      	b.n	800881e <__swsetup_r+0x1e>
 8008846:	4b24      	ldr	r3, [pc, #144]	; (80088d8 <__swsetup_r+0xd8>)
 8008848:	429c      	cmp	r4, r3
 800884a:	bf08      	it	eq
 800884c:	68ec      	ldreq	r4, [r5, #12]
 800884e:	e7e6      	b.n	800881e <__swsetup_r+0x1e>
 8008850:	0758      	lsls	r0, r3, #29
 8008852:	d512      	bpl.n	800887a <__swsetup_r+0x7a>
 8008854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008856:	b141      	cbz	r1, 800886a <__swsetup_r+0x6a>
 8008858:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800885c:	4299      	cmp	r1, r3
 800885e:	d002      	beq.n	8008866 <__swsetup_r+0x66>
 8008860:	4630      	mov	r0, r6
 8008862:	f002 f949 	bl	800aaf8 <_free_r>
 8008866:	2300      	movs	r3, #0
 8008868:	6363      	str	r3, [r4, #52]	; 0x34
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008870:	81a3      	strh	r3, [r4, #12]
 8008872:	2300      	movs	r3, #0
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0308 	orr.w	r3, r3, #8
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	b94b      	cbnz	r3, 800889a <__swsetup_r+0x9a>
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800888c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008890:	d003      	beq.n	800889a <__swsetup_r+0x9a>
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	f001 fbef 	bl	800a078 <__smakebuf_r>
 800889a:	89a0      	ldrh	r0, [r4, #12]
 800889c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a0:	f010 0301 	ands.w	r3, r0, #1
 80088a4:	d00a      	beq.n	80088bc <__swsetup_r+0xbc>
 80088a6:	2300      	movs	r3, #0
 80088a8:	60a3      	str	r3, [r4, #8]
 80088aa:	6963      	ldr	r3, [r4, #20]
 80088ac:	425b      	negs	r3, r3
 80088ae:	61a3      	str	r3, [r4, #24]
 80088b0:	6923      	ldr	r3, [r4, #16]
 80088b2:	b943      	cbnz	r3, 80088c6 <__swsetup_r+0xc6>
 80088b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80088b8:	d1ba      	bne.n	8008830 <__swsetup_r+0x30>
 80088ba:	bd70      	pop	{r4, r5, r6, pc}
 80088bc:	0781      	lsls	r1, r0, #30
 80088be:	bf58      	it	pl
 80088c0:	6963      	ldrpl	r3, [r4, #20]
 80088c2:	60a3      	str	r3, [r4, #8]
 80088c4:	e7f4      	b.n	80088b0 <__swsetup_r+0xb0>
 80088c6:	2000      	movs	r0, #0
 80088c8:	e7f7      	b.n	80088ba <__swsetup_r+0xba>
 80088ca:	bf00      	nop
 80088cc:	20000294 	.word	0x20000294
 80088d0:	0800c5d4 	.word	0x0800c5d4
 80088d4:	0800c5f4 	.word	0x0800c5f4
 80088d8:	0800c5b4 	.word	0x0800c5b4

080088dc <quorem>:
 80088dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088e0:	6903      	ldr	r3, [r0, #16]
 80088e2:	690c      	ldr	r4, [r1, #16]
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	4607      	mov	r7, r0
 80088e8:	f2c0 8081 	blt.w	80089ee <quorem+0x112>
 80088ec:	3c01      	subs	r4, #1
 80088ee:	f101 0814 	add.w	r8, r1, #20
 80088f2:	f100 0514 	add.w	r5, r0, #20
 80088f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088fa:	9301      	str	r3, [sp, #4]
 80088fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008900:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008904:	3301      	adds	r3, #1
 8008906:	429a      	cmp	r2, r3
 8008908:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800890c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008910:	fbb2 f6f3 	udiv	r6, r2, r3
 8008914:	d331      	bcc.n	800897a <quorem+0x9e>
 8008916:	f04f 0e00 	mov.w	lr, #0
 800891a:	4640      	mov	r0, r8
 800891c:	46ac      	mov	ip, r5
 800891e:	46f2      	mov	sl, lr
 8008920:	f850 2b04 	ldr.w	r2, [r0], #4
 8008924:	b293      	uxth	r3, r2
 8008926:	fb06 e303 	mla	r3, r6, r3, lr
 800892a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800892e:	b29b      	uxth	r3, r3
 8008930:	ebaa 0303 	sub.w	r3, sl, r3
 8008934:	f8dc a000 	ldr.w	sl, [ip]
 8008938:	0c12      	lsrs	r2, r2, #16
 800893a:	fa13 f38a 	uxtah	r3, r3, sl
 800893e:	fb06 e202 	mla	r2, r6, r2, lr
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800894a:	b292      	uxth	r2, r2
 800894c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008950:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008954:	f8bd 3000 	ldrh.w	r3, [sp]
 8008958:	4581      	cmp	r9, r0
 800895a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895e:	f84c 3b04 	str.w	r3, [ip], #4
 8008962:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008966:	d2db      	bcs.n	8008920 <quorem+0x44>
 8008968:	f855 300b 	ldr.w	r3, [r5, fp]
 800896c:	b92b      	cbnz	r3, 800897a <quorem+0x9e>
 800896e:	9b01      	ldr	r3, [sp, #4]
 8008970:	3b04      	subs	r3, #4
 8008972:	429d      	cmp	r5, r3
 8008974:	461a      	mov	r2, r3
 8008976:	d32e      	bcc.n	80089d6 <quorem+0xfa>
 8008978:	613c      	str	r4, [r7, #16]
 800897a:	4638      	mov	r0, r7
 800897c:	f001 feb0 	bl	800a6e0 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	db24      	blt.n	80089ce <quorem+0xf2>
 8008984:	3601      	adds	r6, #1
 8008986:	4628      	mov	r0, r5
 8008988:	f04f 0c00 	mov.w	ip, #0
 800898c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008990:	f8d0 e000 	ldr.w	lr, [r0]
 8008994:	b293      	uxth	r3, r2
 8008996:	ebac 0303 	sub.w	r3, ip, r3
 800899a:	0c12      	lsrs	r2, r2, #16
 800899c:	fa13 f38e 	uxtah	r3, r3, lr
 80089a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089ae:	45c1      	cmp	r9, r8
 80089b0:	f840 3b04 	str.w	r3, [r0], #4
 80089b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089b8:	d2e8      	bcs.n	800898c <quorem+0xb0>
 80089ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089c2:	b922      	cbnz	r2, 80089ce <quorem+0xf2>
 80089c4:	3b04      	subs	r3, #4
 80089c6:	429d      	cmp	r5, r3
 80089c8:	461a      	mov	r2, r3
 80089ca:	d30a      	bcc.n	80089e2 <quorem+0x106>
 80089cc:	613c      	str	r4, [r7, #16]
 80089ce:	4630      	mov	r0, r6
 80089d0:	b003      	add	sp, #12
 80089d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089d6:	6812      	ldr	r2, [r2, #0]
 80089d8:	3b04      	subs	r3, #4
 80089da:	2a00      	cmp	r2, #0
 80089dc:	d1cc      	bne.n	8008978 <quorem+0x9c>
 80089de:	3c01      	subs	r4, #1
 80089e0:	e7c7      	b.n	8008972 <quorem+0x96>
 80089e2:	6812      	ldr	r2, [r2, #0]
 80089e4:	3b04      	subs	r3, #4
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d1f0      	bne.n	80089cc <quorem+0xf0>
 80089ea:	3c01      	subs	r4, #1
 80089ec:	e7eb      	b.n	80089c6 <quorem+0xea>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e7ee      	b.n	80089d0 <quorem+0xf4>
 80089f2:	0000      	movs	r0, r0
 80089f4:	0000      	movs	r0, r0
	...

080089f8 <_dtoa_r>:
 80089f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089fc:	ed2d 8b04 	vpush	{d8-d9}
 8008a00:	ec57 6b10 	vmov	r6, r7, d0
 8008a04:	b093      	sub	sp, #76	; 0x4c
 8008a06:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a08:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a0c:	9106      	str	r1, [sp, #24]
 8008a0e:	ee10 aa10 	vmov	sl, s0
 8008a12:	4604      	mov	r4, r0
 8008a14:	9209      	str	r2, [sp, #36]	; 0x24
 8008a16:	930c      	str	r3, [sp, #48]	; 0x30
 8008a18:	46bb      	mov	fp, r7
 8008a1a:	b975      	cbnz	r5, 8008a3a <_dtoa_r+0x42>
 8008a1c:	2010      	movs	r0, #16
 8008a1e:	f001 fb6b 	bl	800a0f8 <malloc>
 8008a22:	4602      	mov	r2, r0
 8008a24:	6260      	str	r0, [r4, #36]	; 0x24
 8008a26:	b920      	cbnz	r0, 8008a32 <_dtoa_r+0x3a>
 8008a28:	4ba7      	ldr	r3, [pc, #668]	; (8008cc8 <_dtoa_r+0x2d0>)
 8008a2a:	21ea      	movs	r1, #234	; 0xea
 8008a2c:	48a7      	ldr	r0, [pc, #668]	; (8008ccc <_dtoa_r+0x2d4>)
 8008a2e:	f002 fc89 	bl	800b344 <__assert_func>
 8008a32:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a36:	6005      	str	r5, [r0, #0]
 8008a38:	60c5      	str	r5, [r0, #12]
 8008a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a3c:	6819      	ldr	r1, [r3, #0]
 8008a3e:	b151      	cbz	r1, 8008a56 <_dtoa_r+0x5e>
 8008a40:	685a      	ldr	r2, [r3, #4]
 8008a42:	604a      	str	r2, [r1, #4]
 8008a44:	2301      	movs	r3, #1
 8008a46:	4093      	lsls	r3, r2
 8008a48:	608b      	str	r3, [r1, #8]
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f001 fbbc 	bl	800a1c8 <_Bfree>
 8008a50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a52:	2200      	movs	r2, #0
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	1e3b      	subs	r3, r7, #0
 8008a58:	bfaa      	itet	ge
 8008a5a:	2300      	movge	r3, #0
 8008a5c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a60:	f8c8 3000 	strge.w	r3, [r8]
 8008a64:	4b9a      	ldr	r3, [pc, #616]	; (8008cd0 <_dtoa_r+0x2d8>)
 8008a66:	bfbc      	itt	lt
 8008a68:	2201      	movlt	r2, #1
 8008a6a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a6e:	ea33 030b 	bics.w	r3, r3, fp
 8008a72:	d11b      	bne.n	8008aac <_dtoa_r+0xb4>
 8008a74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a76:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a80:	4333      	orrs	r3, r6
 8008a82:	f000 8592 	beq.w	80095aa <_dtoa_r+0xbb2>
 8008a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a88:	b963      	cbnz	r3, 8008aa4 <_dtoa_r+0xac>
 8008a8a:	4b92      	ldr	r3, [pc, #584]	; (8008cd4 <_dtoa_r+0x2dc>)
 8008a8c:	e022      	b.n	8008ad4 <_dtoa_r+0xdc>
 8008a8e:	4b92      	ldr	r3, [pc, #584]	; (8008cd8 <_dtoa_r+0x2e0>)
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	3308      	adds	r3, #8
 8008a94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	9801      	ldr	r0, [sp, #4]
 8008a9a:	b013      	add	sp, #76	; 0x4c
 8008a9c:	ecbd 8b04 	vpop	{d8-d9}
 8008aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa4:	4b8b      	ldr	r3, [pc, #556]	; (8008cd4 <_dtoa_r+0x2dc>)
 8008aa6:	9301      	str	r3, [sp, #4]
 8008aa8:	3303      	adds	r3, #3
 8008aaa:	e7f3      	b.n	8008a94 <_dtoa_r+0x9c>
 8008aac:	2200      	movs	r2, #0
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4650      	mov	r0, sl
 8008ab2:	4659      	mov	r1, fp
 8008ab4:	f7f8 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ab8:	ec4b ab19 	vmov	d9, sl, fp
 8008abc:	4680      	mov	r8, r0
 8008abe:	b158      	cbz	r0, 8008ad8 <_dtoa_r+0xe0>
 8008ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	6013      	str	r3, [r2, #0]
 8008ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 856b 	beq.w	80095a4 <_dtoa_r+0xbac>
 8008ace:	4883      	ldr	r0, [pc, #524]	; (8008cdc <_dtoa_r+0x2e4>)
 8008ad0:	6018      	str	r0, [r3, #0]
 8008ad2:	1e43      	subs	r3, r0, #1
 8008ad4:	9301      	str	r3, [sp, #4]
 8008ad6:	e7df      	b.n	8008a98 <_dtoa_r+0xa0>
 8008ad8:	ec4b ab10 	vmov	d0, sl, fp
 8008adc:	aa10      	add	r2, sp, #64	; 0x40
 8008ade:	a911      	add	r1, sp, #68	; 0x44
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f001 ff1f 	bl	800a924 <__d2b>
 8008ae6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008aea:	ee08 0a10 	vmov	s16, r0
 8008aee:	2d00      	cmp	r5, #0
 8008af0:	f000 8084 	beq.w	8008bfc <_dtoa_r+0x204>
 8008af4:	ee19 3a90 	vmov	r3, s19
 8008af8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008afc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b00:	4656      	mov	r6, sl
 8008b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b0e:	4b74      	ldr	r3, [pc, #464]	; (8008ce0 <_dtoa_r+0x2e8>)
 8008b10:	2200      	movs	r2, #0
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fbb7 	bl	8000288 <__aeabi_dsub>
 8008b1a:	a365      	add	r3, pc, #404	; (adr r3, 8008cb0 <_dtoa_r+0x2b8>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	f7f7 fd6a 	bl	80005f8 <__aeabi_dmul>
 8008b24:	a364      	add	r3, pc, #400	; (adr r3, 8008cb8 <_dtoa_r+0x2c0>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 fbaf 	bl	800028c <__adddf3>
 8008b2e:	4606      	mov	r6, r0
 8008b30:	4628      	mov	r0, r5
 8008b32:	460f      	mov	r7, r1
 8008b34:	f7f7 fcf6 	bl	8000524 <__aeabi_i2d>
 8008b38:	a361      	add	r3, pc, #388	; (adr r3, 8008cc0 <_dtoa_r+0x2c8>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 fb9f 	bl	800028c <__adddf3>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	460f      	mov	r7, r1
 8008b52:	f7f8 f801 	bl	8000b58 <__aeabi_d2iz>
 8008b56:	2200      	movs	r2, #0
 8008b58:	9000      	str	r0, [sp, #0]
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 ffbc 	bl	8000adc <__aeabi_dcmplt>
 8008b64:	b150      	cbz	r0, 8008b7c <_dtoa_r+0x184>
 8008b66:	9800      	ldr	r0, [sp, #0]
 8008b68:	f7f7 fcdc 	bl	8000524 <__aeabi_i2d>
 8008b6c:	4632      	mov	r2, r6
 8008b6e:	463b      	mov	r3, r7
 8008b70:	f7f7 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b74:	b910      	cbnz	r0, 8008b7c <_dtoa_r+0x184>
 8008b76:	9b00      	ldr	r3, [sp, #0]
 8008b78:	3b01      	subs	r3, #1
 8008b7a:	9300      	str	r3, [sp, #0]
 8008b7c:	9b00      	ldr	r3, [sp, #0]
 8008b7e:	2b16      	cmp	r3, #22
 8008b80:	d85a      	bhi.n	8008c38 <_dtoa_r+0x240>
 8008b82:	9a00      	ldr	r2, [sp, #0]
 8008b84:	4b57      	ldr	r3, [pc, #348]	; (8008ce4 <_dtoa_r+0x2ec>)
 8008b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8e:	ec51 0b19 	vmov	r0, r1, d9
 8008b92:	f7f7 ffa3 	bl	8000adc <__aeabi_dcmplt>
 8008b96:	2800      	cmp	r0, #0
 8008b98:	d050      	beq.n	8008c3c <_dtoa_r+0x244>
 8008b9a:	9b00      	ldr	r3, [sp, #0]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ba6:	1b5d      	subs	r5, r3, r5
 8008ba8:	1e6b      	subs	r3, r5, #1
 8008baa:	9305      	str	r3, [sp, #20]
 8008bac:	bf45      	ittet	mi
 8008bae:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bb2:	9304      	strmi	r3, [sp, #16]
 8008bb4:	2300      	movpl	r3, #0
 8008bb6:	2300      	movmi	r3, #0
 8008bb8:	bf4c      	ite	mi
 8008bba:	9305      	strmi	r3, [sp, #20]
 8008bbc:	9304      	strpl	r3, [sp, #16]
 8008bbe:	9b00      	ldr	r3, [sp, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db3d      	blt.n	8008c40 <_dtoa_r+0x248>
 8008bc4:	9b05      	ldr	r3, [sp, #20]
 8008bc6:	9a00      	ldr	r2, [sp, #0]
 8008bc8:	920a      	str	r2, [sp, #40]	; 0x28
 8008bca:	4413      	add	r3, r2
 8008bcc:	9305      	str	r3, [sp, #20]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9307      	str	r3, [sp, #28]
 8008bd2:	9b06      	ldr	r3, [sp, #24]
 8008bd4:	2b09      	cmp	r3, #9
 8008bd6:	f200 8089 	bhi.w	8008cec <_dtoa_r+0x2f4>
 8008bda:	2b05      	cmp	r3, #5
 8008bdc:	bfc4      	itt	gt
 8008bde:	3b04      	subgt	r3, #4
 8008be0:	9306      	strgt	r3, [sp, #24]
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	f1a3 0302 	sub.w	r3, r3, #2
 8008be8:	bfcc      	ite	gt
 8008bea:	2500      	movgt	r5, #0
 8008bec:	2501      	movle	r5, #1
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	f200 8087 	bhi.w	8008d02 <_dtoa_r+0x30a>
 8008bf4:	e8df f003 	tbb	[pc, r3]
 8008bf8:	59383a2d 	.word	0x59383a2d
 8008bfc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c00:	441d      	add	r5, r3
 8008c02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	bfc1      	itttt	gt
 8008c0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c12:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c1a:	bfda      	itte	le
 8008c1c:	f1c3 0320 	rsble	r3, r3, #32
 8008c20:	fa06 f003 	lslle.w	r0, r6, r3
 8008c24:	4318      	orrgt	r0, r3
 8008c26:	f7f7 fc6d 	bl	8000504 <__aeabi_ui2d>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c32:	3d01      	subs	r5, #1
 8008c34:	930e      	str	r3, [sp, #56]	; 0x38
 8008c36:	e76a      	b.n	8008b0e <_dtoa_r+0x116>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	e7b2      	b.n	8008ba2 <_dtoa_r+0x1aa>
 8008c3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c3e:	e7b1      	b.n	8008ba4 <_dtoa_r+0x1ac>
 8008c40:	9b04      	ldr	r3, [sp, #16]
 8008c42:	9a00      	ldr	r2, [sp, #0]
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	4253      	negs	r3, r2
 8008c4a:	9307      	str	r3, [sp, #28]
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c50:	e7bf      	b.n	8008bd2 <_dtoa_r+0x1da>
 8008c52:	2300      	movs	r3, #0
 8008c54:	9308      	str	r3, [sp, #32]
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	dc55      	bgt.n	8008d08 <_dtoa_r+0x310>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c62:	461a      	mov	r2, r3
 8008c64:	9209      	str	r2, [sp, #36]	; 0x24
 8008c66:	e00c      	b.n	8008c82 <_dtoa_r+0x28a>
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e7f3      	b.n	8008c54 <_dtoa_r+0x25c>
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c70:	9308      	str	r3, [sp, #32]
 8008c72:	9b00      	ldr	r3, [sp, #0]
 8008c74:	4413      	add	r3, r2
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	9303      	str	r3, [sp, #12]
 8008c7e:	bfb8      	it	lt
 8008c80:	2301      	movlt	r3, #1
 8008c82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c84:	2200      	movs	r2, #0
 8008c86:	6042      	str	r2, [r0, #4]
 8008c88:	2204      	movs	r2, #4
 8008c8a:	f102 0614 	add.w	r6, r2, #20
 8008c8e:	429e      	cmp	r6, r3
 8008c90:	6841      	ldr	r1, [r0, #4]
 8008c92:	d93d      	bls.n	8008d10 <_dtoa_r+0x318>
 8008c94:	4620      	mov	r0, r4
 8008c96:	f001 fa57 	bl	800a148 <_Balloc>
 8008c9a:	9001      	str	r0, [sp, #4]
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d13b      	bne.n	8008d18 <_dtoa_r+0x320>
 8008ca0:	4b11      	ldr	r3, [pc, #68]	; (8008ce8 <_dtoa_r+0x2f0>)
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008ca8:	e6c0      	b.n	8008a2c <_dtoa_r+0x34>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e7df      	b.n	8008c6e <_dtoa_r+0x276>
 8008cae:	bf00      	nop
 8008cb0:	636f4361 	.word	0x636f4361
 8008cb4:	3fd287a7 	.word	0x3fd287a7
 8008cb8:	8b60c8b3 	.word	0x8b60c8b3
 8008cbc:	3fc68a28 	.word	0x3fc68a28
 8008cc0:	509f79fb 	.word	0x509f79fb
 8008cc4:	3fd34413 	.word	0x3fd34413
 8008cc8:	0800c52e 	.word	0x0800c52e
 8008ccc:	0800c545 	.word	0x0800c545
 8008cd0:	7ff00000 	.word	0x7ff00000
 8008cd4:	0800c52a 	.word	0x0800c52a
 8008cd8:	0800c521 	.word	0x0800c521
 8008cdc:	0800c3a1 	.word	0x0800c3a1
 8008ce0:	3ff80000 	.word	0x3ff80000
 8008ce4:	0800c718 	.word	0x0800c718
 8008ce8:	0800c5a0 	.word	0x0800c5a0
 8008cec:	2501      	movs	r5, #1
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9306      	str	r3, [sp, #24]
 8008cf2:	9508      	str	r5, [sp, #32]
 8008cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	2312      	movs	r3, #18
 8008d00:	e7b0      	b.n	8008c64 <_dtoa_r+0x26c>
 8008d02:	2301      	movs	r3, #1
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	e7f5      	b.n	8008cf4 <_dtoa_r+0x2fc>
 8008d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d0e:	e7b8      	b.n	8008c82 <_dtoa_r+0x28a>
 8008d10:	3101      	adds	r1, #1
 8008d12:	6041      	str	r1, [r0, #4]
 8008d14:	0052      	lsls	r2, r2, #1
 8008d16:	e7b8      	b.n	8008c8a <_dtoa_r+0x292>
 8008d18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d1a:	9a01      	ldr	r2, [sp, #4]
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	9b03      	ldr	r3, [sp, #12]
 8008d20:	2b0e      	cmp	r3, #14
 8008d22:	f200 809d 	bhi.w	8008e60 <_dtoa_r+0x468>
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	f000 809a 	beq.w	8008e60 <_dtoa_r+0x468>
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dd32      	ble.n	8008d98 <_dtoa_r+0x3a0>
 8008d32:	4ab7      	ldr	r2, [pc, #732]	; (8009010 <_dtoa_r+0x618>)
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d40:	9b00      	ldr	r3, [sp, #0]
 8008d42:	05d8      	lsls	r0, r3, #23
 8008d44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d48:	d516      	bpl.n	8008d78 <_dtoa_r+0x380>
 8008d4a:	4bb2      	ldr	r3, [pc, #712]	; (8009014 <_dtoa_r+0x61c>)
 8008d4c:	ec51 0b19 	vmov	r0, r1, d9
 8008d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d54:	f7f7 fd7a 	bl	800084c <__aeabi_ddiv>
 8008d58:	f007 070f 	and.w	r7, r7, #15
 8008d5c:	4682      	mov	sl, r0
 8008d5e:	468b      	mov	fp, r1
 8008d60:	2503      	movs	r5, #3
 8008d62:	4eac      	ldr	r6, [pc, #688]	; (8009014 <_dtoa_r+0x61c>)
 8008d64:	b957      	cbnz	r7, 8008d7c <_dtoa_r+0x384>
 8008d66:	4642      	mov	r2, r8
 8008d68:	464b      	mov	r3, r9
 8008d6a:	4650      	mov	r0, sl
 8008d6c:	4659      	mov	r1, fp
 8008d6e:	f7f7 fd6d 	bl	800084c <__aeabi_ddiv>
 8008d72:	4682      	mov	sl, r0
 8008d74:	468b      	mov	fp, r1
 8008d76:	e028      	b.n	8008dca <_dtoa_r+0x3d2>
 8008d78:	2502      	movs	r5, #2
 8008d7a:	e7f2      	b.n	8008d62 <_dtoa_r+0x36a>
 8008d7c:	07f9      	lsls	r1, r7, #31
 8008d7e:	d508      	bpl.n	8008d92 <_dtoa_r+0x39a>
 8008d80:	4640      	mov	r0, r8
 8008d82:	4649      	mov	r1, r9
 8008d84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d88:	f7f7 fc36 	bl	80005f8 <__aeabi_dmul>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	4680      	mov	r8, r0
 8008d90:	4689      	mov	r9, r1
 8008d92:	107f      	asrs	r7, r7, #1
 8008d94:	3608      	adds	r6, #8
 8008d96:	e7e5      	b.n	8008d64 <_dtoa_r+0x36c>
 8008d98:	f000 809b 	beq.w	8008ed2 <_dtoa_r+0x4da>
 8008d9c:	9b00      	ldr	r3, [sp, #0]
 8008d9e:	4f9d      	ldr	r7, [pc, #628]	; (8009014 <_dtoa_r+0x61c>)
 8008da0:	425e      	negs	r6, r3
 8008da2:	4b9b      	ldr	r3, [pc, #620]	; (8009010 <_dtoa_r+0x618>)
 8008da4:	f006 020f 	and.w	r2, r6, #15
 8008da8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	ec51 0b19 	vmov	r0, r1, d9
 8008db4:	f7f7 fc20 	bl	80005f8 <__aeabi_dmul>
 8008db8:	1136      	asrs	r6, r6, #4
 8008dba:	4682      	mov	sl, r0
 8008dbc:	468b      	mov	fp, r1
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2502      	movs	r5, #2
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	d17a      	bne.n	8008ebc <_dtoa_r+0x4c4>
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1d3      	bne.n	8008d72 <_dtoa_r+0x37a>
 8008dca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 8082 	beq.w	8008ed6 <_dtoa_r+0x4de>
 8008dd2:	4b91      	ldr	r3, [pc, #580]	; (8009018 <_dtoa_r+0x620>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	4659      	mov	r1, fp
 8008dda:	f7f7 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d079      	beq.n	8008ed6 <_dtoa_r+0x4de>
 8008de2:	9b03      	ldr	r3, [sp, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d076      	beq.n	8008ed6 <_dtoa_r+0x4de>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	dd36      	ble.n	8008e5c <_dtoa_r+0x464>
 8008dee:	9b00      	ldr	r3, [sp, #0]
 8008df0:	4650      	mov	r0, sl
 8008df2:	4659      	mov	r1, fp
 8008df4:	1e5f      	subs	r7, r3, #1
 8008df6:	2200      	movs	r2, #0
 8008df8:	4b88      	ldr	r3, [pc, #544]	; (800901c <_dtoa_r+0x624>)
 8008dfa:	f7f7 fbfd 	bl	80005f8 <__aeabi_dmul>
 8008dfe:	9e02      	ldr	r6, [sp, #8]
 8008e00:	4682      	mov	sl, r0
 8008e02:	468b      	mov	fp, r1
 8008e04:	3501      	adds	r5, #1
 8008e06:	4628      	mov	r0, r5
 8008e08:	f7f7 fb8c 	bl	8000524 <__aeabi_i2d>
 8008e0c:	4652      	mov	r2, sl
 8008e0e:	465b      	mov	r3, fp
 8008e10:	f7f7 fbf2 	bl	80005f8 <__aeabi_dmul>
 8008e14:	4b82      	ldr	r3, [pc, #520]	; (8009020 <_dtoa_r+0x628>)
 8008e16:	2200      	movs	r2, #0
 8008e18:	f7f7 fa38 	bl	800028c <__adddf3>
 8008e1c:	46d0      	mov	r8, sl
 8008e1e:	46d9      	mov	r9, fp
 8008e20:	4682      	mov	sl, r0
 8008e22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e26:	2e00      	cmp	r6, #0
 8008e28:	d158      	bne.n	8008edc <_dtoa_r+0x4e4>
 8008e2a:	4b7e      	ldr	r3, [pc, #504]	; (8009024 <_dtoa_r+0x62c>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4640      	mov	r0, r8
 8008e30:	4649      	mov	r1, r9
 8008e32:	f7f7 fa29 	bl	8000288 <__aeabi_dsub>
 8008e36:	4652      	mov	r2, sl
 8008e38:	465b      	mov	r3, fp
 8008e3a:	4680      	mov	r8, r0
 8008e3c:	4689      	mov	r9, r1
 8008e3e:	f7f7 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8008e42:	2800      	cmp	r0, #0
 8008e44:	f040 8295 	bne.w	8009372 <_dtoa_r+0x97a>
 8008e48:	4652      	mov	r2, sl
 8008e4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e4e:	4640      	mov	r0, r8
 8008e50:	4649      	mov	r1, r9
 8008e52:	f7f7 fe43 	bl	8000adc <__aeabi_dcmplt>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	f040 8289 	bne.w	800936e <_dtoa_r+0x976>
 8008e5c:	ec5b ab19 	vmov	sl, fp, d9
 8008e60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f2c0 8148 	blt.w	80090f8 <_dtoa_r+0x700>
 8008e68:	9a00      	ldr	r2, [sp, #0]
 8008e6a:	2a0e      	cmp	r2, #14
 8008e6c:	f300 8144 	bgt.w	80090f8 <_dtoa_r+0x700>
 8008e70:	4b67      	ldr	r3, [pc, #412]	; (8009010 <_dtoa_r+0x618>)
 8008e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f280 80d5 	bge.w	800902c <_dtoa_r+0x634>
 8008e82:	9b03      	ldr	r3, [sp, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f300 80d1 	bgt.w	800902c <_dtoa_r+0x634>
 8008e8a:	f040 826f 	bne.w	800936c <_dtoa_r+0x974>
 8008e8e:	4b65      	ldr	r3, [pc, #404]	; (8009024 <_dtoa_r+0x62c>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fbaf 	bl	80005f8 <__aeabi_dmul>
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	465b      	mov	r3, fp
 8008e9e:	f7f7 fe31 	bl	8000b04 <__aeabi_dcmpge>
 8008ea2:	9e03      	ldr	r6, [sp, #12]
 8008ea4:	4637      	mov	r7, r6
 8008ea6:	2800      	cmp	r0, #0
 8008ea8:	f040 8245 	bne.w	8009336 <_dtoa_r+0x93e>
 8008eac:	9d01      	ldr	r5, [sp, #4]
 8008eae:	2331      	movs	r3, #49	; 0x31
 8008eb0:	f805 3b01 	strb.w	r3, [r5], #1
 8008eb4:	9b00      	ldr	r3, [sp, #0]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	e240      	b.n	800933e <_dtoa_r+0x946>
 8008ebc:	07f2      	lsls	r2, r6, #31
 8008ebe:	d505      	bpl.n	8008ecc <_dtoa_r+0x4d4>
 8008ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ec4:	f7f7 fb98 	bl	80005f8 <__aeabi_dmul>
 8008ec8:	3501      	adds	r5, #1
 8008eca:	2301      	movs	r3, #1
 8008ecc:	1076      	asrs	r6, r6, #1
 8008ece:	3708      	adds	r7, #8
 8008ed0:	e777      	b.n	8008dc2 <_dtoa_r+0x3ca>
 8008ed2:	2502      	movs	r5, #2
 8008ed4:	e779      	b.n	8008dca <_dtoa_r+0x3d2>
 8008ed6:	9f00      	ldr	r7, [sp, #0]
 8008ed8:	9e03      	ldr	r6, [sp, #12]
 8008eda:	e794      	b.n	8008e06 <_dtoa_r+0x40e>
 8008edc:	9901      	ldr	r1, [sp, #4]
 8008ede:	4b4c      	ldr	r3, [pc, #304]	; (8009010 <_dtoa_r+0x618>)
 8008ee0:	4431      	add	r1, r6
 8008ee2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ee4:	9908      	ldr	r1, [sp, #32]
 8008ee6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eee:	2900      	cmp	r1, #0
 8008ef0:	d043      	beq.n	8008f7a <_dtoa_r+0x582>
 8008ef2:	494d      	ldr	r1, [pc, #308]	; (8009028 <_dtoa_r+0x630>)
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f7f7 fca9 	bl	800084c <__aeabi_ddiv>
 8008efa:	4652      	mov	r2, sl
 8008efc:	465b      	mov	r3, fp
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	9d01      	ldr	r5, [sp, #4]
 8008f04:	4682      	mov	sl, r0
 8008f06:	468b      	mov	fp, r1
 8008f08:	4649      	mov	r1, r9
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	f7f7 fe24 	bl	8000b58 <__aeabi_d2iz>
 8008f10:	4606      	mov	r6, r0
 8008f12:	f7f7 fb07 	bl	8000524 <__aeabi_i2d>
 8008f16:	4602      	mov	r2, r0
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	4649      	mov	r1, r9
 8008f1e:	f7f7 f9b3 	bl	8000288 <__aeabi_dsub>
 8008f22:	3630      	adds	r6, #48	; 0x30
 8008f24:	f805 6b01 	strb.w	r6, [r5], #1
 8008f28:	4652      	mov	r2, sl
 8008f2a:	465b      	mov	r3, fp
 8008f2c:	4680      	mov	r8, r0
 8008f2e:	4689      	mov	r9, r1
 8008f30:	f7f7 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d163      	bne.n	8009000 <_dtoa_r+0x608>
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	4936      	ldr	r1, [pc, #216]	; (8009018 <_dtoa_r+0x620>)
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f7f7 f9a2 	bl	8000288 <__aeabi_dsub>
 8008f44:	4652      	mov	r2, sl
 8008f46:	465b      	mov	r3, fp
 8008f48:	f7f7 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8008f4c:	2800      	cmp	r0, #0
 8008f4e:	f040 80b5 	bne.w	80090bc <_dtoa_r+0x6c4>
 8008f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f54:	429d      	cmp	r5, r3
 8008f56:	d081      	beq.n	8008e5c <_dtoa_r+0x464>
 8008f58:	4b30      	ldr	r3, [pc, #192]	; (800901c <_dtoa_r+0x624>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	4650      	mov	r0, sl
 8008f5e:	4659      	mov	r1, fp
 8008f60:	f7f7 fb4a 	bl	80005f8 <__aeabi_dmul>
 8008f64:	4b2d      	ldr	r3, [pc, #180]	; (800901c <_dtoa_r+0x624>)
 8008f66:	4682      	mov	sl, r0
 8008f68:	468b      	mov	fp, r1
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4680      	mov	r8, r0
 8008f76:	4689      	mov	r9, r1
 8008f78:	e7c6      	b.n	8008f08 <_dtoa_r+0x510>
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	4659      	mov	r1, fp
 8008f7e:	f7f7 fb3b 	bl	80005f8 <__aeabi_dmul>
 8008f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f84:	9d01      	ldr	r5, [sp, #4]
 8008f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f88:	4682      	mov	sl, r0
 8008f8a:	468b      	mov	fp, r1
 8008f8c:	4649      	mov	r1, r9
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f7f7 fde2 	bl	8000b58 <__aeabi_d2iz>
 8008f94:	4606      	mov	r6, r0
 8008f96:	f7f7 fac5 	bl	8000524 <__aeabi_i2d>
 8008f9a:	3630      	adds	r6, #48	; 0x30
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	f7f7 f970 	bl	8000288 <__aeabi_dsub>
 8008fa8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	4680      	mov	r8, r0
 8008fb2:	4689      	mov	r9, r1
 8008fb4:	f04f 0200 	mov.w	r2, #0
 8008fb8:	d124      	bne.n	8009004 <_dtoa_r+0x60c>
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <_dtoa_r+0x630>)
 8008fbc:	4650      	mov	r0, sl
 8008fbe:	4659      	mov	r1, fp
 8008fc0:	f7f7 f964 	bl	800028c <__adddf3>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 fda4 	bl	8000b18 <__aeabi_dcmpgt>
 8008fd0:	2800      	cmp	r0, #0
 8008fd2:	d173      	bne.n	80090bc <_dtoa_r+0x6c4>
 8008fd4:	4652      	mov	r2, sl
 8008fd6:	465b      	mov	r3, fp
 8008fd8:	4913      	ldr	r1, [pc, #76]	; (8009028 <_dtoa_r+0x630>)
 8008fda:	2000      	movs	r0, #0
 8008fdc:	f7f7 f954 	bl	8000288 <__aeabi_dsub>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fd78 	bl	8000adc <__aeabi_dcmplt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f43f af35 	beq.w	8008e5c <_dtoa_r+0x464>
 8008ff2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ff4:	1e6b      	subs	r3, r5, #1
 8008ff6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ff8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ffc:	2b30      	cmp	r3, #48	; 0x30
 8008ffe:	d0f8      	beq.n	8008ff2 <_dtoa_r+0x5fa>
 8009000:	9700      	str	r7, [sp, #0]
 8009002:	e049      	b.n	8009098 <_dtoa_r+0x6a0>
 8009004:	4b05      	ldr	r3, [pc, #20]	; (800901c <_dtoa_r+0x624>)
 8009006:	f7f7 faf7 	bl	80005f8 <__aeabi_dmul>
 800900a:	4680      	mov	r8, r0
 800900c:	4689      	mov	r9, r1
 800900e:	e7bd      	b.n	8008f8c <_dtoa_r+0x594>
 8009010:	0800c718 	.word	0x0800c718
 8009014:	0800c6f0 	.word	0x0800c6f0
 8009018:	3ff00000 	.word	0x3ff00000
 800901c:	40240000 	.word	0x40240000
 8009020:	401c0000 	.word	0x401c0000
 8009024:	40140000 	.word	0x40140000
 8009028:	3fe00000 	.word	0x3fe00000
 800902c:	9d01      	ldr	r5, [sp, #4]
 800902e:	4656      	mov	r6, sl
 8009030:	465f      	mov	r7, fp
 8009032:	4642      	mov	r2, r8
 8009034:	464b      	mov	r3, r9
 8009036:	4630      	mov	r0, r6
 8009038:	4639      	mov	r1, r7
 800903a:	f7f7 fc07 	bl	800084c <__aeabi_ddiv>
 800903e:	f7f7 fd8b 	bl	8000b58 <__aeabi_d2iz>
 8009042:	4682      	mov	sl, r0
 8009044:	f7f7 fa6e 	bl	8000524 <__aeabi_i2d>
 8009048:	4642      	mov	r2, r8
 800904a:	464b      	mov	r3, r9
 800904c:	f7f7 fad4 	bl	80005f8 <__aeabi_dmul>
 8009050:	4602      	mov	r2, r0
 8009052:	460b      	mov	r3, r1
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800905c:	f7f7 f914 	bl	8000288 <__aeabi_dsub>
 8009060:	f805 6b01 	strb.w	r6, [r5], #1
 8009064:	9e01      	ldr	r6, [sp, #4]
 8009066:	9f03      	ldr	r7, [sp, #12]
 8009068:	1bae      	subs	r6, r5, r6
 800906a:	42b7      	cmp	r7, r6
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	d135      	bne.n	80090de <_dtoa_r+0x6e6>
 8009072:	f7f7 f90b 	bl	800028c <__adddf3>
 8009076:	4642      	mov	r2, r8
 8009078:	464b      	mov	r3, r9
 800907a:	4606      	mov	r6, r0
 800907c:	460f      	mov	r7, r1
 800907e:	f7f7 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009082:	b9d0      	cbnz	r0, 80090ba <_dtoa_r+0x6c2>
 8009084:	4642      	mov	r2, r8
 8009086:	464b      	mov	r3, r9
 8009088:	4630      	mov	r0, r6
 800908a:	4639      	mov	r1, r7
 800908c:	f7f7 fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009090:	b110      	cbz	r0, 8009098 <_dtoa_r+0x6a0>
 8009092:	f01a 0f01 	tst.w	sl, #1
 8009096:	d110      	bne.n	80090ba <_dtoa_r+0x6c2>
 8009098:	4620      	mov	r0, r4
 800909a:	ee18 1a10 	vmov	r1, s16
 800909e:	f001 f893 	bl	800a1c8 <_Bfree>
 80090a2:	2300      	movs	r3, #0
 80090a4:	9800      	ldr	r0, [sp, #0]
 80090a6:	702b      	strb	r3, [r5, #0]
 80090a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090aa:	3001      	adds	r0, #1
 80090ac:	6018      	str	r0, [r3, #0]
 80090ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f43f acf1 	beq.w	8008a98 <_dtoa_r+0xa0>
 80090b6:	601d      	str	r5, [r3, #0]
 80090b8:	e4ee      	b.n	8008a98 <_dtoa_r+0xa0>
 80090ba:	9f00      	ldr	r7, [sp, #0]
 80090bc:	462b      	mov	r3, r5
 80090be:	461d      	mov	r5, r3
 80090c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090c4:	2a39      	cmp	r2, #57	; 0x39
 80090c6:	d106      	bne.n	80090d6 <_dtoa_r+0x6de>
 80090c8:	9a01      	ldr	r2, [sp, #4]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d1f7      	bne.n	80090be <_dtoa_r+0x6c6>
 80090ce:	9901      	ldr	r1, [sp, #4]
 80090d0:	2230      	movs	r2, #48	; 0x30
 80090d2:	3701      	adds	r7, #1
 80090d4:	700a      	strb	r2, [r1, #0]
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	3201      	adds	r2, #1
 80090da:	701a      	strb	r2, [r3, #0]
 80090dc:	e790      	b.n	8009000 <_dtoa_r+0x608>
 80090de:	4ba6      	ldr	r3, [pc, #664]	; (8009378 <_dtoa_r+0x980>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 fa89 	bl	80005f8 <__aeabi_dmul>
 80090e6:	2200      	movs	r2, #0
 80090e8:	2300      	movs	r3, #0
 80090ea:	4606      	mov	r6, r0
 80090ec:	460f      	mov	r7, r1
 80090ee:	f7f7 fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	d09d      	beq.n	8009032 <_dtoa_r+0x63a>
 80090f6:	e7cf      	b.n	8009098 <_dtoa_r+0x6a0>
 80090f8:	9a08      	ldr	r2, [sp, #32]
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	f000 80d7 	beq.w	80092ae <_dtoa_r+0x8b6>
 8009100:	9a06      	ldr	r2, [sp, #24]
 8009102:	2a01      	cmp	r2, #1
 8009104:	f300 80ba 	bgt.w	800927c <_dtoa_r+0x884>
 8009108:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800910a:	2a00      	cmp	r2, #0
 800910c:	f000 80b2 	beq.w	8009274 <_dtoa_r+0x87c>
 8009110:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009114:	9e07      	ldr	r6, [sp, #28]
 8009116:	9d04      	ldr	r5, [sp, #16]
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	441a      	add	r2, r3
 800911c:	9204      	str	r2, [sp, #16]
 800911e:	9a05      	ldr	r2, [sp, #20]
 8009120:	2101      	movs	r1, #1
 8009122:	441a      	add	r2, r3
 8009124:	4620      	mov	r0, r4
 8009126:	9205      	str	r2, [sp, #20]
 8009128:	f001 f950 	bl	800a3cc <__i2b>
 800912c:	4607      	mov	r7, r0
 800912e:	2d00      	cmp	r5, #0
 8009130:	dd0c      	ble.n	800914c <_dtoa_r+0x754>
 8009132:	9b05      	ldr	r3, [sp, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	dd09      	ble.n	800914c <_dtoa_r+0x754>
 8009138:	42ab      	cmp	r3, r5
 800913a:	9a04      	ldr	r2, [sp, #16]
 800913c:	bfa8      	it	ge
 800913e:	462b      	movge	r3, r5
 8009140:	1ad2      	subs	r2, r2, r3
 8009142:	9204      	str	r2, [sp, #16]
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	1aed      	subs	r5, r5, r3
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	9305      	str	r3, [sp, #20]
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	b31b      	cbz	r3, 8009198 <_dtoa_r+0x7a0>
 8009150:	9b08      	ldr	r3, [sp, #32]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 80af 	beq.w	80092b6 <_dtoa_r+0x8be>
 8009158:	2e00      	cmp	r6, #0
 800915a:	dd13      	ble.n	8009184 <_dtoa_r+0x78c>
 800915c:	4639      	mov	r1, r7
 800915e:	4632      	mov	r2, r6
 8009160:	4620      	mov	r0, r4
 8009162:	f001 f9f3 	bl	800a54c <__pow5mult>
 8009166:	ee18 2a10 	vmov	r2, s16
 800916a:	4601      	mov	r1, r0
 800916c:	4607      	mov	r7, r0
 800916e:	4620      	mov	r0, r4
 8009170:	f001 f942 	bl	800a3f8 <__multiply>
 8009174:	ee18 1a10 	vmov	r1, s16
 8009178:	4680      	mov	r8, r0
 800917a:	4620      	mov	r0, r4
 800917c:	f001 f824 	bl	800a1c8 <_Bfree>
 8009180:	ee08 8a10 	vmov	s16, r8
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	1b9a      	subs	r2, r3, r6
 8009188:	d006      	beq.n	8009198 <_dtoa_r+0x7a0>
 800918a:	ee18 1a10 	vmov	r1, s16
 800918e:	4620      	mov	r0, r4
 8009190:	f001 f9dc 	bl	800a54c <__pow5mult>
 8009194:	ee08 0a10 	vmov	s16, r0
 8009198:	2101      	movs	r1, #1
 800919a:	4620      	mov	r0, r4
 800919c:	f001 f916 	bl	800a3cc <__i2b>
 80091a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	4606      	mov	r6, r0
 80091a6:	f340 8088 	ble.w	80092ba <_dtoa_r+0x8c2>
 80091aa:	461a      	mov	r2, r3
 80091ac:	4601      	mov	r1, r0
 80091ae:	4620      	mov	r0, r4
 80091b0:	f001 f9cc 	bl	800a54c <__pow5mult>
 80091b4:	9b06      	ldr	r3, [sp, #24]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	4606      	mov	r6, r0
 80091ba:	f340 8081 	ble.w	80092c0 <_dtoa_r+0x8c8>
 80091be:	f04f 0800 	mov.w	r8, #0
 80091c2:	6933      	ldr	r3, [r6, #16]
 80091c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091c8:	6918      	ldr	r0, [r3, #16]
 80091ca:	f001 f8af 	bl	800a32c <__hi0bits>
 80091ce:	f1c0 0020 	rsb	r0, r0, #32
 80091d2:	9b05      	ldr	r3, [sp, #20]
 80091d4:	4418      	add	r0, r3
 80091d6:	f010 001f 	ands.w	r0, r0, #31
 80091da:	f000 8092 	beq.w	8009302 <_dtoa_r+0x90a>
 80091de:	f1c0 0320 	rsb	r3, r0, #32
 80091e2:	2b04      	cmp	r3, #4
 80091e4:	f340 808a 	ble.w	80092fc <_dtoa_r+0x904>
 80091e8:	f1c0 001c 	rsb	r0, r0, #28
 80091ec:	9b04      	ldr	r3, [sp, #16]
 80091ee:	4403      	add	r3, r0
 80091f0:	9304      	str	r3, [sp, #16]
 80091f2:	9b05      	ldr	r3, [sp, #20]
 80091f4:	4403      	add	r3, r0
 80091f6:	4405      	add	r5, r0
 80091f8:	9305      	str	r3, [sp, #20]
 80091fa:	9b04      	ldr	r3, [sp, #16]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	dd07      	ble.n	8009210 <_dtoa_r+0x818>
 8009200:	ee18 1a10 	vmov	r1, s16
 8009204:	461a      	mov	r2, r3
 8009206:	4620      	mov	r0, r4
 8009208:	f001 f9fa 	bl	800a600 <__lshift>
 800920c:	ee08 0a10 	vmov	s16, r0
 8009210:	9b05      	ldr	r3, [sp, #20]
 8009212:	2b00      	cmp	r3, #0
 8009214:	dd05      	ble.n	8009222 <_dtoa_r+0x82a>
 8009216:	4631      	mov	r1, r6
 8009218:	461a      	mov	r2, r3
 800921a:	4620      	mov	r0, r4
 800921c:	f001 f9f0 	bl	800a600 <__lshift>
 8009220:	4606      	mov	r6, r0
 8009222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d06e      	beq.n	8009306 <_dtoa_r+0x90e>
 8009228:	ee18 0a10 	vmov	r0, s16
 800922c:	4631      	mov	r1, r6
 800922e:	f001 fa57 	bl	800a6e0 <__mcmp>
 8009232:	2800      	cmp	r0, #0
 8009234:	da67      	bge.n	8009306 <_dtoa_r+0x90e>
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	3b01      	subs	r3, #1
 800923a:	ee18 1a10 	vmov	r1, s16
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	220a      	movs	r2, #10
 8009242:	2300      	movs	r3, #0
 8009244:	4620      	mov	r0, r4
 8009246:	f000 ffe1 	bl	800a20c <__multadd>
 800924a:	9b08      	ldr	r3, [sp, #32]
 800924c:	ee08 0a10 	vmov	s16, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	f000 81b1 	beq.w	80095b8 <_dtoa_r+0xbc0>
 8009256:	2300      	movs	r3, #0
 8009258:	4639      	mov	r1, r7
 800925a:	220a      	movs	r2, #10
 800925c:	4620      	mov	r0, r4
 800925e:	f000 ffd5 	bl	800a20c <__multadd>
 8009262:	9b02      	ldr	r3, [sp, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	4607      	mov	r7, r0
 8009268:	f300 808e 	bgt.w	8009388 <_dtoa_r+0x990>
 800926c:	9b06      	ldr	r3, [sp, #24]
 800926e:	2b02      	cmp	r3, #2
 8009270:	dc51      	bgt.n	8009316 <_dtoa_r+0x91e>
 8009272:	e089      	b.n	8009388 <_dtoa_r+0x990>
 8009274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800927a:	e74b      	b.n	8009114 <_dtoa_r+0x71c>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	1e5e      	subs	r6, r3, #1
 8009280:	9b07      	ldr	r3, [sp, #28]
 8009282:	42b3      	cmp	r3, r6
 8009284:	bfbf      	itttt	lt
 8009286:	9b07      	ldrlt	r3, [sp, #28]
 8009288:	9607      	strlt	r6, [sp, #28]
 800928a:	1af2      	sublt	r2, r6, r3
 800928c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800928e:	bfb6      	itet	lt
 8009290:	189b      	addlt	r3, r3, r2
 8009292:	1b9e      	subge	r6, r3, r6
 8009294:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009296:	9b03      	ldr	r3, [sp, #12]
 8009298:	bfb8      	it	lt
 800929a:	2600      	movlt	r6, #0
 800929c:	2b00      	cmp	r3, #0
 800929e:	bfb7      	itett	lt
 80092a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092a8:	1a9d      	sublt	r5, r3, r2
 80092aa:	2300      	movlt	r3, #0
 80092ac:	e734      	b.n	8009118 <_dtoa_r+0x720>
 80092ae:	9e07      	ldr	r6, [sp, #28]
 80092b0:	9d04      	ldr	r5, [sp, #16]
 80092b2:	9f08      	ldr	r7, [sp, #32]
 80092b4:	e73b      	b.n	800912e <_dtoa_r+0x736>
 80092b6:	9a07      	ldr	r2, [sp, #28]
 80092b8:	e767      	b.n	800918a <_dtoa_r+0x792>
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	dc18      	bgt.n	80092f2 <_dtoa_r+0x8fa>
 80092c0:	f1ba 0f00 	cmp.w	sl, #0
 80092c4:	d115      	bne.n	80092f2 <_dtoa_r+0x8fa>
 80092c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092ca:	b993      	cbnz	r3, 80092f2 <_dtoa_r+0x8fa>
 80092cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092d0:	0d1b      	lsrs	r3, r3, #20
 80092d2:	051b      	lsls	r3, r3, #20
 80092d4:	b183      	cbz	r3, 80092f8 <_dtoa_r+0x900>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	3301      	adds	r3, #1
 80092da:	9304      	str	r3, [sp, #16]
 80092dc:	9b05      	ldr	r3, [sp, #20]
 80092de:	3301      	adds	r3, #1
 80092e0:	9305      	str	r3, [sp, #20]
 80092e2:	f04f 0801 	mov.w	r8, #1
 80092e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f47f af6a 	bne.w	80091c2 <_dtoa_r+0x7ca>
 80092ee:	2001      	movs	r0, #1
 80092f0:	e76f      	b.n	80091d2 <_dtoa_r+0x7da>
 80092f2:	f04f 0800 	mov.w	r8, #0
 80092f6:	e7f6      	b.n	80092e6 <_dtoa_r+0x8ee>
 80092f8:	4698      	mov	r8, r3
 80092fa:	e7f4      	b.n	80092e6 <_dtoa_r+0x8ee>
 80092fc:	f43f af7d 	beq.w	80091fa <_dtoa_r+0x802>
 8009300:	4618      	mov	r0, r3
 8009302:	301c      	adds	r0, #28
 8009304:	e772      	b.n	80091ec <_dtoa_r+0x7f4>
 8009306:	9b03      	ldr	r3, [sp, #12]
 8009308:	2b00      	cmp	r3, #0
 800930a:	dc37      	bgt.n	800937c <_dtoa_r+0x984>
 800930c:	9b06      	ldr	r3, [sp, #24]
 800930e:	2b02      	cmp	r3, #2
 8009310:	dd34      	ble.n	800937c <_dtoa_r+0x984>
 8009312:	9b03      	ldr	r3, [sp, #12]
 8009314:	9302      	str	r3, [sp, #8]
 8009316:	9b02      	ldr	r3, [sp, #8]
 8009318:	b96b      	cbnz	r3, 8009336 <_dtoa_r+0x93e>
 800931a:	4631      	mov	r1, r6
 800931c:	2205      	movs	r2, #5
 800931e:	4620      	mov	r0, r4
 8009320:	f000 ff74 	bl	800a20c <__multadd>
 8009324:	4601      	mov	r1, r0
 8009326:	4606      	mov	r6, r0
 8009328:	ee18 0a10 	vmov	r0, s16
 800932c:	f001 f9d8 	bl	800a6e0 <__mcmp>
 8009330:	2800      	cmp	r0, #0
 8009332:	f73f adbb 	bgt.w	8008eac <_dtoa_r+0x4b4>
 8009336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009338:	9d01      	ldr	r5, [sp, #4]
 800933a:	43db      	mvns	r3, r3
 800933c:	9300      	str	r3, [sp, #0]
 800933e:	f04f 0800 	mov.w	r8, #0
 8009342:	4631      	mov	r1, r6
 8009344:	4620      	mov	r0, r4
 8009346:	f000 ff3f 	bl	800a1c8 <_Bfree>
 800934a:	2f00      	cmp	r7, #0
 800934c:	f43f aea4 	beq.w	8009098 <_dtoa_r+0x6a0>
 8009350:	f1b8 0f00 	cmp.w	r8, #0
 8009354:	d005      	beq.n	8009362 <_dtoa_r+0x96a>
 8009356:	45b8      	cmp	r8, r7
 8009358:	d003      	beq.n	8009362 <_dtoa_r+0x96a>
 800935a:	4641      	mov	r1, r8
 800935c:	4620      	mov	r0, r4
 800935e:	f000 ff33 	bl	800a1c8 <_Bfree>
 8009362:	4639      	mov	r1, r7
 8009364:	4620      	mov	r0, r4
 8009366:	f000 ff2f 	bl	800a1c8 <_Bfree>
 800936a:	e695      	b.n	8009098 <_dtoa_r+0x6a0>
 800936c:	2600      	movs	r6, #0
 800936e:	4637      	mov	r7, r6
 8009370:	e7e1      	b.n	8009336 <_dtoa_r+0x93e>
 8009372:	9700      	str	r7, [sp, #0]
 8009374:	4637      	mov	r7, r6
 8009376:	e599      	b.n	8008eac <_dtoa_r+0x4b4>
 8009378:	40240000 	.word	0x40240000
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80ca 	beq.w	8009518 <_dtoa_r+0xb20>
 8009384:	9b03      	ldr	r3, [sp, #12]
 8009386:	9302      	str	r3, [sp, #8]
 8009388:	2d00      	cmp	r5, #0
 800938a:	dd05      	ble.n	8009398 <_dtoa_r+0x9a0>
 800938c:	4639      	mov	r1, r7
 800938e:	462a      	mov	r2, r5
 8009390:	4620      	mov	r0, r4
 8009392:	f001 f935 	bl	800a600 <__lshift>
 8009396:	4607      	mov	r7, r0
 8009398:	f1b8 0f00 	cmp.w	r8, #0
 800939c:	d05b      	beq.n	8009456 <_dtoa_r+0xa5e>
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fed1 	bl	800a148 <_Balloc>
 80093a6:	4605      	mov	r5, r0
 80093a8:	b928      	cbnz	r0, 80093b6 <_dtoa_r+0x9be>
 80093aa:	4b87      	ldr	r3, [pc, #540]	; (80095c8 <_dtoa_r+0xbd0>)
 80093ac:	4602      	mov	r2, r0
 80093ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093b2:	f7ff bb3b 	b.w	8008a2c <_dtoa_r+0x34>
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	3202      	adds	r2, #2
 80093ba:	0092      	lsls	r2, r2, #2
 80093bc:	f107 010c 	add.w	r1, r7, #12
 80093c0:	300c      	adds	r0, #12
 80093c2:	f000 feb3 	bl	800a12c <memcpy>
 80093c6:	2201      	movs	r2, #1
 80093c8:	4629      	mov	r1, r5
 80093ca:	4620      	mov	r0, r4
 80093cc:	f001 f918 	bl	800a600 <__lshift>
 80093d0:	9b01      	ldr	r3, [sp, #4]
 80093d2:	f103 0901 	add.w	r9, r3, #1
 80093d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093da:	4413      	add	r3, r2
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	f00a 0301 	and.w	r3, sl, #1
 80093e2:	46b8      	mov	r8, r7
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	4607      	mov	r7, r0
 80093e8:	4631      	mov	r1, r6
 80093ea:	ee18 0a10 	vmov	r0, s16
 80093ee:	f7ff fa75 	bl	80088dc <quorem>
 80093f2:	4641      	mov	r1, r8
 80093f4:	9002      	str	r0, [sp, #8]
 80093f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80093fa:	ee18 0a10 	vmov	r0, s16
 80093fe:	f001 f96f 	bl	800a6e0 <__mcmp>
 8009402:	463a      	mov	r2, r7
 8009404:	9003      	str	r0, [sp, #12]
 8009406:	4631      	mov	r1, r6
 8009408:	4620      	mov	r0, r4
 800940a:	f001 f985 	bl	800a718 <__mdiff>
 800940e:	68c2      	ldr	r2, [r0, #12]
 8009410:	f109 3bff 	add.w	fp, r9, #4294967295
 8009414:	4605      	mov	r5, r0
 8009416:	bb02      	cbnz	r2, 800945a <_dtoa_r+0xa62>
 8009418:	4601      	mov	r1, r0
 800941a:	ee18 0a10 	vmov	r0, s16
 800941e:	f001 f95f 	bl	800a6e0 <__mcmp>
 8009422:	4602      	mov	r2, r0
 8009424:	4629      	mov	r1, r5
 8009426:	4620      	mov	r0, r4
 8009428:	9207      	str	r2, [sp, #28]
 800942a:	f000 fecd 	bl	800a1c8 <_Bfree>
 800942e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009432:	ea43 0102 	orr.w	r1, r3, r2
 8009436:	9b04      	ldr	r3, [sp, #16]
 8009438:	430b      	orrs	r3, r1
 800943a:	464d      	mov	r5, r9
 800943c:	d10f      	bne.n	800945e <_dtoa_r+0xa66>
 800943e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009442:	d02a      	beq.n	800949a <_dtoa_r+0xaa2>
 8009444:	9b03      	ldr	r3, [sp, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	dd02      	ble.n	8009450 <_dtoa_r+0xa58>
 800944a:	9b02      	ldr	r3, [sp, #8]
 800944c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009450:	f88b a000 	strb.w	sl, [fp]
 8009454:	e775      	b.n	8009342 <_dtoa_r+0x94a>
 8009456:	4638      	mov	r0, r7
 8009458:	e7ba      	b.n	80093d0 <_dtoa_r+0x9d8>
 800945a:	2201      	movs	r2, #1
 800945c:	e7e2      	b.n	8009424 <_dtoa_r+0xa2c>
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	db04      	blt.n	800946e <_dtoa_r+0xa76>
 8009464:	9906      	ldr	r1, [sp, #24]
 8009466:	430b      	orrs	r3, r1
 8009468:	9904      	ldr	r1, [sp, #16]
 800946a:	430b      	orrs	r3, r1
 800946c:	d122      	bne.n	80094b4 <_dtoa_r+0xabc>
 800946e:	2a00      	cmp	r2, #0
 8009470:	ddee      	ble.n	8009450 <_dtoa_r+0xa58>
 8009472:	ee18 1a10 	vmov	r1, s16
 8009476:	2201      	movs	r2, #1
 8009478:	4620      	mov	r0, r4
 800947a:	f001 f8c1 	bl	800a600 <__lshift>
 800947e:	4631      	mov	r1, r6
 8009480:	ee08 0a10 	vmov	s16, r0
 8009484:	f001 f92c 	bl	800a6e0 <__mcmp>
 8009488:	2800      	cmp	r0, #0
 800948a:	dc03      	bgt.n	8009494 <_dtoa_r+0xa9c>
 800948c:	d1e0      	bne.n	8009450 <_dtoa_r+0xa58>
 800948e:	f01a 0f01 	tst.w	sl, #1
 8009492:	d0dd      	beq.n	8009450 <_dtoa_r+0xa58>
 8009494:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009498:	d1d7      	bne.n	800944a <_dtoa_r+0xa52>
 800949a:	2339      	movs	r3, #57	; 0x39
 800949c:	f88b 3000 	strb.w	r3, [fp]
 80094a0:	462b      	mov	r3, r5
 80094a2:	461d      	mov	r5, r3
 80094a4:	3b01      	subs	r3, #1
 80094a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094aa:	2a39      	cmp	r2, #57	; 0x39
 80094ac:	d071      	beq.n	8009592 <_dtoa_r+0xb9a>
 80094ae:	3201      	adds	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
 80094b2:	e746      	b.n	8009342 <_dtoa_r+0x94a>
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	dd07      	ble.n	80094c8 <_dtoa_r+0xad0>
 80094b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094bc:	d0ed      	beq.n	800949a <_dtoa_r+0xaa2>
 80094be:	f10a 0301 	add.w	r3, sl, #1
 80094c2:	f88b 3000 	strb.w	r3, [fp]
 80094c6:	e73c      	b.n	8009342 <_dtoa_r+0x94a>
 80094c8:	9b05      	ldr	r3, [sp, #20]
 80094ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094ce:	4599      	cmp	r9, r3
 80094d0:	d047      	beq.n	8009562 <_dtoa_r+0xb6a>
 80094d2:	ee18 1a10 	vmov	r1, s16
 80094d6:	2300      	movs	r3, #0
 80094d8:	220a      	movs	r2, #10
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fe96 	bl	800a20c <__multadd>
 80094e0:	45b8      	cmp	r8, r7
 80094e2:	ee08 0a10 	vmov	s16, r0
 80094e6:	f04f 0300 	mov.w	r3, #0
 80094ea:	f04f 020a 	mov.w	r2, #10
 80094ee:	4641      	mov	r1, r8
 80094f0:	4620      	mov	r0, r4
 80094f2:	d106      	bne.n	8009502 <_dtoa_r+0xb0a>
 80094f4:	f000 fe8a 	bl	800a20c <__multadd>
 80094f8:	4680      	mov	r8, r0
 80094fa:	4607      	mov	r7, r0
 80094fc:	f109 0901 	add.w	r9, r9, #1
 8009500:	e772      	b.n	80093e8 <_dtoa_r+0x9f0>
 8009502:	f000 fe83 	bl	800a20c <__multadd>
 8009506:	4639      	mov	r1, r7
 8009508:	4680      	mov	r8, r0
 800950a:	2300      	movs	r3, #0
 800950c:	220a      	movs	r2, #10
 800950e:	4620      	mov	r0, r4
 8009510:	f000 fe7c 	bl	800a20c <__multadd>
 8009514:	4607      	mov	r7, r0
 8009516:	e7f1      	b.n	80094fc <_dtoa_r+0xb04>
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	9302      	str	r3, [sp, #8]
 800951c:	9d01      	ldr	r5, [sp, #4]
 800951e:	ee18 0a10 	vmov	r0, s16
 8009522:	4631      	mov	r1, r6
 8009524:	f7ff f9da 	bl	80088dc <quorem>
 8009528:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800952c:	9b01      	ldr	r3, [sp, #4]
 800952e:	f805 ab01 	strb.w	sl, [r5], #1
 8009532:	1aea      	subs	r2, r5, r3
 8009534:	9b02      	ldr	r3, [sp, #8]
 8009536:	4293      	cmp	r3, r2
 8009538:	dd09      	ble.n	800954e <_dtoa_r+0xb56>
 800953a:	ee18 1a10 	vmov	r1, s16
 800953e:	2300      	movs	r3, #0
 8009540:	220a      	movs	r2, #10
 8009542:	4620      	mov	r0, r4
 8009544:	f000 fe62 	bl	800a20c <__multadd>
 8009548:	ee08 0a10 	vmov	s16, r0
 800954c:	e7e7      	b.n	800951e <_dtoa_r+0xb26>
 800954e:	9b02      	ldr	r3, [sp, #8]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfc8      	it	gt
 8009554:	461d      	movgt	r5, r3
 8009556:	9b01      	ldr	r3, [sp, #4]
 8009558:	bfd8      	it	le
 800955a:	2501      	movle	r5, #1
 800955c:	441d      	add	r5, r3
 800955e:	f04f 0800 	mov.w	r8, #0
 8009562:	ee18 1a10 	vmov	r1, s16
 8009566:	2201      	movs	r2, #1
 8009568:	4620      	mov	r0, r4
 800956a:	f001 f849 	bl	800a600 <__lshift>
 800956e:	4631      	mov	r1, r6
 8009570:	ee08 0a10 	vmov	s16, r0
 8009574:	f001 f8b4 	bl	800a6e0 <__mcmp>
 8009578:	2800      	cmp	r0, #0
 800957a:	dc91      	bgt.n	80094a0 <_dtoa_r+0xaa8>
 800957c:	d102      	bne.n	8009584 <_dtoa_r+0xb8c>
 800957e:	f01a 0f01 	tst.w	sl, #1
 8009582:	d18d      	bne.n	80094a0 <_dtoa_r+0xaa8>
 8009584:	462b      	mov	r3, r5
 8009586:	461d      	mov	r5, r3
 8009588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800958c:	2a30      	cmp	r2, #48	; 0x30
 800958e:	d0fa      	beq.n	8009586 <_dtoa_r+0xb8e>
 8009590:	e6d7      	b.n	8009342 <_dtoa_r+0x94a>
 8009592:	9a01      	ldr	r2, [sp, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d184      	bne.n	80094a2 <_dtoa_r+0xaaa>
 8009598:	9b00      	ldr	r3, [sp, #0]
 800959a:	3301      	adds	r3, #1
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	2331      	movs	r3, #49	; 0x31
 80095a0:	7013      	strb	r3, [r2, #0]
 80095a2:	e6ce      	b.n	8009342 <_dtoa_r+0x94a>
 80095a4:	4b09      	ldr	r3, [pc, #36]	; (80095cc <_dtoa_r+0xbd4>)
 80095a6:	f7ff ba95 	b.w	8008ad4 <_dtoa_r+0xdc>
 80095aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f47f aa6e 	bne.w	8008a8e <_dtoa_r+0x96>
 80095b2:	4b07      	ldr	r3, [pc, #28]	; (80095d0 <_dtoa_r+0xbd8>)
 80095b4:	f7ff ba8e 	b.w	8008ad4 <_dtoa_r+0xdc>
 80095b8:	9b02      	ldr	r3, [sp, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dcae      	bgt.n	800951c <_dtoa_r+0xb24>
 80095be:	9b06      	ldr	r3, [sp, #24]
 80095c0:	2b02      	cmp	r3, #2
 80095c2:	f73f aea8 	bgt.w	8009316 <_dtoa_r+0x91e>
 80095c6:	e7a9      	b.n	800951c <_dtoa_r+0xb24>
 80095c8:	0800c5a0 	.word	0x0800c5a0
 80095cc:	0800c3a0 	.word	0x0800c3a0
 80095d0:	0800c521 	.word	0x0800c521

080095d4 <__sflush_r>:
 80095d4:	898a      	ldrh	r2, [r1, #12]
 80095d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095da:	4605      	mov	r5, r0
 80095dc:	0710      	lsls	r0, r2, #28
 80095de:	460c      	mov	r4, r1
 80095e0:	d458      	bmi.n	8009694 <__sflush_r+0xc0>
 80095e2:	684b      	ldr	r3, [r1, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dc05      	bgt.n	80095f4 <__sflush_r+0x20>
 80095e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	dc02      	bgt.n	80095f4 <__sflush_r+0x20>
 80095ee:	2000      	movs	r0, #0
 80095f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095f6:	2e00      	cmp	r6, #0
 80095f8:	d0f9      	beq.n	80095ee <__sflush_r+0x1a>
 80095fa:	2300      	movs	r3, #0
 80095fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009600:	682f      	ldr	r7, [r5, #0]
 8009602:	602b      	str	r3, [r5, #0]
 8009604:	d032      	beq.n	800966c <__sflush_r+0x98>
 8009606:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	075a      	lsls	r2, r3, #29
 800960c:	d505      	bpl.n	800961a <__sflush_r+0x46>
 800960e:	6863      	ldr	r3, [r4, #4]
 8009610:	1ac0      	subs	r0, r0, r3
 8009612:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009614:	b10b      	cbz	r3, 800961a <__sflush_r+0x46>
 8009616:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009618:	1ac0      	subs	r0, r0, r3
 800961a:	2300      	movs	r3, #0
 800961c:	4602      	mov	r2, r0
 800961e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009620:	6a21      	ldr	r1, [r4, #32]
 8009622:	4628      	mov	r0, r5
 8009624:	47b0      	blx	r6
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	d106      	bne.n	800963a <__sflush_r+0x66>
 800962c:	6829      	ldr	r1, [r5, #0]
 800962e:	291d      	cmp	r1, #29
 8009630:	d82c      	bhi.n	800968c <__sflush_r+0xb8>
 8009632:	4a2a      	ldr	r2, [pc, #168]	; (80096dc <__sflush_r+0x108>)
 8009634:	40ca      	lsrs	r2, r1
 8009636:	07d6      	lsls	r6, r2, #31
 8009638:	d528      	bpl.n	800968c <__sflush_r+0xb8>
 800963a:	2200      	movs	r2, #0
 800963c:	6062      	str	r2, [r4, #4]
 800963e:	04d9      	lsls	r1, r3, #19
 8009640:	6922      	ldr	r2, [r4, #16]
 8009642:	6022      	str	r2, [r4, #0]
 8009644:	d504      	bpl.n	8009650 <__sflush_r+0x7c>
 8009646:	1c42      	adds	r2, r0, #1
 8009648:	d101      	bne.n	800964e <__sflush_r+0x7a>
 800964a:	682b      	ldr	r3, [r5, #0]
 800964c:	b903      	cbnz	r3, 8009650 <__sflush_r+0x7c>
 800964e:	6560      	str	r0, [r4, #84]	; 0x54
 8009650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009652:	602f      	str	r7, [r5, #0]
 8009654:	2900      	cmp	r1, #0
 8009656:	d0ca      	beq.n	80095ee <__sflush_r+0x1a>
 8009658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800965c:	4299      	cmp	r1, r3
 800965e:	d002      	beq.n	8009666 <__sflush_r+0x92>
 8009660:	4628      	mov	r0, r5
 8009662:	f001 fa49 	bl	800aaf8 <_free_r>
 8009666:	2000      	movs	r0, #0
 8009668:	6360      	str	r0, [r4, #52]	; 0x34
 800966a:	e7c1      	b.n	80095f0 <__sflush_r+0x1c>
 800966c:	6a21      	ldr	r1, [r4, #32]
 800966e:	2301      	movs	r3, #1
 8009670:	4628      	mov	r0, r5
 8009672:	47b0      	blx	r6
 8009674:	1c41      	adds	r1, r0, #1
 8009676:	d1c7      	bne.n	8009608 <__sflush_r+0x34>
 8009678:	682b      	ldr	r3, [r5, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d0c4      	beq.n	8009608 <__sflush_r+0x34>
 800967e:	2b1d      	cmp	r3, #29
 8009680:	d001      	beq.n	8009686 <__sflush_r+0xb2>
 8009682:	2b16      	cmp	r3, #22
 8009684:	d101      	bne.n	800968a <__sflush_r+0xb6>
 8009686:	602f      	str	r7, [r5, #0]
 8009688:	e7b1      	b.n	80095ee <__sflush_r+0x1a>
 800968a:	89a3      	ldrh	r3, [r4, #12]
 800968c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	e7ad      	b.n	80095f0 <__sflush_r+0x1c>
 8009694:	690f      	ldr	r7, [r1, #16]
 8009696:	2f00      	cmp	r7, #0
 8009698:	d0a9      	beq.n	80095ee <__sflush_r+0x1a>
 800969a:	0793      	lsls	r3, r2, #30
 800969c:	680e      	ldr	r6, [r1, #0]
 800969e:	bf08      	it	eq
 80096a0:	694b      	ldreq	r3, [r1, #20]
 80096a2:	600f      	str	r7, [r1, #0]
 80096a4:	bf18      	it	ne
 80096a6:	2300      	movne	r3, #0
 80096a8:	eba6 0807 	sub.w	r8, r6, r7
 80096ac:	608b      	str	r3, [r1, #8]
 80096ae:	f1b8 0f00 	cmp.w	r8, #0
 80096b2:	dd9c      	ble.n	80095ee <__sflush_r+0x1a>
 80096b4:	6a21      	ldr	r1, [r4, #32]
 80096b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096b8:	4643      	mov	r3, r8
 80096ba:	463a      	mov	r2, r7
 80096bc:	4628      	mov	r0, r5
 80096be:	47b0      	blx	r6
 80096c0:	2800      	cmp	r0, #0
 80096c2:	dc06      	bgt.n	80096d2 <__sflush_r+0xfe>
 80096c4:	89a3      	ldrh	r3, [r4, #12]
 80096c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ca:	81a3      	strh	r3, [r4, #12]
 80096cc:	f04f 30ff 	mov.w	r0, #4294967295
 80096d0:	e78e      	b.n	80095f0 <__sflush_r+0x1c>
 80096d2:	4407      	add	r7, r0
 80096d4:	eba8 0800 	sub.w	r8, r8, r0
 80096d8:	e7e9      	b.n	80096ae <__sflush_r+0xda>
 80096da:	bf00      	nop
 80096dc:	20400001 	.word	0x20400001

080096e0 <_fflush_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	690b      	ldr	r3, [r1, #16]
 80096e4:	4605      	mov	r5, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	b913      	cbnz	r3, 80096f0 <_fflush_r+0x10>
 80096ea:	2500      	movs	r5, #0
 80096ec:	4628      	mov	r0, r5
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	b118      	cbz	r0, 80096fa <_fflush_r+0x1a>
 80096f2:	6983      	ldr	r3, [r0, #24]
 80096f4:	b90b      	cbnz	r3, 80096fa <_fflush_r+0x1a>
 80096f6:	f000 f887 	bl	8009808 <__sinit>
 80096fa:	4b14      	ldr	r3, [pc, #80]	; (800974c <_fflush_r+0x6c>)
 80096fc:	429c      	cmp	r4, r3
 80096fe:	d11b      	bne.n	8009738 <_fflush_r+0x58>
 8009700:	686c      	ldr	r4, [r5, #4]
 8009702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0ef      	beq.n	80096ea <_fflush_r+0xa>
 800970a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800970c:	07d0      	lsls	r0, r2, #31
 800970e:	d404      	bmi.n	800971a <_fflush_r+0x3a>
 8009710:	0599      	lsls	r1, r3, #22
 8009712:	d402      	bmi.n	800971a <_fflush_r+0x3a>
 8009714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009716:	f000 fc88 	bl	800a02a <__retarget_lock_acquire_recursive>
 800971a:	4628      	mov	r0, r5
 800971c:	4621      	mov	r1, r4
 800971e:	f7ff ff59 	bl	80095d4 <__sflush_r>
 8009722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009724:	07da      	lsls	r2, r3, #31
 8009726:	4605      	mov	r5, r0
 8009728:	d4e0      	bmi.n	80096ec <_fflush_r+0xc>
 800972a:	89a3      	ldrh	r3, [r4, #12]
 800972c:	059b      	lsls	r3, r3, #22
 800972e:	d4dd      	bmi.n	80096ec <_fflush_r+0xc>
 8009730:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009732:	f000 fc7b 	bl	800a02c <__retarget_lock_release_recursive>
 8009736:	e7d9      	b.n	80096ec <_fflush_r+0xc>
 8009738:	4b05      	ldr	r3, [pc, #20]	; (8009750 <_fflush_r+0x70>)
 800973a:	429c      	cmp	r4, r3
 800973c:	d101      	bne.n	8009742 <_fflush_r+0x62>
 800973e:	68ac      	ldr	r4, [r5, #8]
 8009740:	e7df      	b.n	8009702 <_fflush_r+0x22>
 8009742:	4b04      	ldr	r3, [pc, #16]	; (8009754 <_fflush_r+0x74>)
 8009744:	429c      	cmp	r4, r3
 8009746:	bf08      	it	eq
 8009748:	68ec      	ldreq	r4, [r5, #12]
 800974a:	e7da      	b.n	8009702 <_fflush_r+0x22>
 800974c:	0800c5d4 	.word	0x0800c5d4
 8009750:	0800c5f4 	.word	0x0800c5f4
 8009754:	0800c5b4 	.word	0x0800c5b4

08009758 <std>:
 8009758:	2300      	movs	r3, #0
 800975a:	b510      	push	{r4, lr}
 800975c:	4604      	mov	r4, r0
 800975e:	e9c0 3300 	strd	r3, r3, [r0]
 8009762:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009766:	6083      	str	r3, [r0, #8]
 8009768:	8181      	strh	r1, [r0, #12]
 800976a:	6643      	str	r3, [r0, #100]	; 0x64
 800976c:	81c2      	strh	r2, [r0, #14]
 800976e:	6183      	str	r3, [r0, #24]
 8009770:	4619      	mov	r1, r3
 8009772:	2208      	movs	r2, #8
 8009774:	305c      	adds	r0, #92	; 0x5c
 8009776:	f7fd fa03 	bl	8006b80 <memset>
 800977a:	4b05      	ldr	r3, [pc, #20]	; (8009790 <std+0x38>)
 800977c:	6263      	str	r3, [r4, #36]	; 0x24
 800977e:	4b05      	ldr	r3, [pc, #20]	; (8009794 <std+0x3c>)
 8009780:	62a3      	str	r3, [r4, #40]	; 0x28
 8009782:	4b05      	ldr	r3, [pc, #20]	; (8009798 <std+0x40>)
 8009784:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009786:	4b05      	ldr	r3, [pc, #20]	; (800979c <std+0x44>)
 8009788:	6224      	str	r4, [r4, #32]
 800978a:	6323      	str	r3, [r4, #48]	; 0x30
 800978c:	bd10      	pop	{r4, pc}
 800978e:	bf00      	nop
 8009790:	0800b259 	.word	0x0800b259
 8009794:	0800b27b 	.word	0x0800b27b
 8009798:	0800b2b3 	.word	0x0800b2b3
 800979c:	0800b2d7 	.word	0x0800b2d7

080097a0 <_cleanup_r>:
 80097a0:	4901      	ldr	r1, [pc, #4]	; (80097a8 <_cleanup_r+0x8>)
 80097a2:	f000 b8af 	b.w	8009904 <_fwalk_reent>
 80097a6:	bf00      	nop
 80097a8:	080096e1 	.word	0x080096e1

080097ac <__sfmoreglue>:
 80097ac:	b570      	push	{r4, r5, r6, lr}
 80097ae:	2268      	movs	r2, #104	; 0x68
 80097b0:	1e4d      	subs	r5, r1, #1
 80097b2:	4355      	muls	r5, r2
 80097b4:	460e      	mov	r6, r1
 80097b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80097ba:	f001 fa09 	bl	800abd0 <_malloc_r>
 80097be:	4604      	mov	r4, r0
 80097c0:	b140      	cbz	r0, 80097d4 <__sfmoreglue+0x28>
 80097c2:	2100      	movs	r1, #0
 80097c4:	e9c0 1600 	strd	r1, r6, [r0]
 80097c8:	300c      	adds	r0, #12
 80097ca:	60a0      	str	r0, [r4, #8]
 80097cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80097d0:	f7fd f9d6 	bl	8006b80 <memset>
 80097d4:	4620      	mov	r0, r4
 80097d6:	bd70      	pop	{r4, r5, r6, pc}

080097d8 <__sfp_lock_acquire>:
 80097d8:	4801      	ldr	r0, [pc, #4]	; (80097e0 <__sfp_lock_acquire+0x8>)
 80097da:	f000 bc26 	b.w	800a02a <__retarget_lock_acquire_recursive>
 80097de:	bf00      	nop
 80097e0:	2000065d 	.word	0x2000065d

080097e4 <__sfp_lock_release>:
 80097e4:	4801      	ldr	r0, [pc, #4]	; (80097ec <__sfp_lock_release+0x8>)
 80097e6:	f000 bc21 	b.w	800a02c <__retarget_lock_release_recursive>
 80097ea:	bf00      	nop
 80097ec:	2000065d 	.word	0x2000065d

080097f0 <__sinit_lock_acquire>:
 80097f0:	4801      	ldr	r0, [pc, #4]	; (80097f8 <__sinit_lock_acquire+0x8>)
 80097f2:	f000 bc1a 	b.w	800a02a <__retarget_lock_acquire_recursive>
 80097f6:	bf00      	nop
 80097f8:	2000065e 	.word	0x2000065e

080097fc <__sinit_lock_release>:
 80097fc:	4801      	ldr	r0, [pc, #4]	; (8009804 <__sinit_lock_release+0x8>)
 80097fe:	f000 bc15 	b.w	800a02c <__retarget_lock_release_recursive>
 8009802:	bf00      	nop
 8009804:	2000065e 	.word	0x2000065e

08009808 <__sinit>:
 8009808:	b510      	push	{r4, lr}
 800980a:	4604      	mov	r4, r0
 800980c:	f7ff fff0 	bl	80097f0 <__sinit_lock_acquire>
 8009810:	69a3      	ldr	r3, [r4, #24]
 8009812:	b11b      	cbz	r3, 800981c <__sinit+0x14>
 8009814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009818:	f7ff bff0 	b.w	80097fc <__sinit_lock_release>
 800981c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009820:	6523      	str	r3, [r4, #80]	; 0x50
 8009822:	4b13      	ldr	r3, [pc, #76]	; (8009870 <__sinit+0x68>)
 8009824:	4a13      	ldr	r2, [pc, #76]	; (8009874 <__sinit+0x6c>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	62a2      	str	r2, [r4, #40]	; 0x28
 800982a:	42a3      	cmp	r3, r4
 800982c:	bf04      	itt	eq
 800982e:	2301      	moveq	r3, #1
 8009830:	61a3      	streq	r3, [r4, #24]
 8009832:	4620      	mov	r0, r4
 8009834:	f000 f820 	bl	8009878 <__sfp>
 8009838:	6060      	str	r0, [r4, #4]
 800983a:	4620      	mov	r0, r4
 800983c:	f000 f81c 	bl	8009878 <__sfp>
 8009840:	60a0      	str	r0, [r4, #8]
 8009842:	4620      	mov	r0, r4
 8009844:	f000 f818 	bl	8009878 <__sfp>
 8009848:	2200      	movs	r2, #0
 800984a:	60e0      	str	r0, [r4, #12]
 800984c:	2104      	movs	r1, #4
 800984e:	6860      	ldr	r0, [r4, #4]
 8009850:	f7ff ff82 	bl	8009758 <std>
 8009854:	68a0      	ldr	r0, [r4, #8]
 8009856:	2201      	movs	r2, #1
 8009858:	2109      	movs	r1, #9
 800985a:	f7ff ff7d 	bl	8009758 <std>
 800985e:	68e0      	ldr	r0, [r4, #12]
 8009860:	2202      	movs	r2, #2
 8009862:	2112      	movs	r1, #18
 8009864:	f7ff ff78 	bl	8009758 <std>
 8009868:	2301      	movs	r3, #1
 800986a:	61a3      	str	r3, [r4, #24]
 800986c:	e7d2      	b.n	8009814 <__sinit+0xc>
 800986e:	bf00      	nop
 8009870:	0800c38c 	.word	0x0800c38c
 8009874:	080097a1 	.word	0x080097a1

08009878 <__sfp>:
 8009878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987a:	4607      	mov	r7, r0
 800987c:	f7ff ffac 	bl	80097d8 <__sfp_lock_acquire>
 8009880:	4b1e      	ldr	r3, [pc, #120]	; (80098fc <__sfp+0x84>)
 8009882:	681e      	ldr	r6, [r3, #0]
 8009884:	69b3      	ldr	r3, [r6, #24]
 8009886:	b913      	cbnz	r3, 800988e <__sfp+0x16>
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff ffbd 	bl	8009808 <__sinit>
 800988e:	3648      	adds	r6, #72	; 0x48
 8009890:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009894:	3b01      	subs	r3, #1
 8009896:	d503      	bpl.n	80098a0 <__sfp+0x28>
 8009898:	6833      	ldr	r3, [r6, #0]
 800989a:	b30b      	cbz	r3, 80098e0 <__sfp+0x68>
 800989c:	6836      	ldr	r6, [r6, #0]
 800989e:	e7f7      	b.n	8009890 <__sfp+0x18>
 80098a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098a4:	b9d5      	cbnz	r5, 80098dc <__sfp+0x64>
 80098a6:	4b16      	ldr	r3, [pc, #88]	; (8009900 <__sfp+0x88>)
 80098a8:	60e3      	str	r3, [r4, #12]
 80098aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80098ae:	6665      	str	r5, [r4, #100]	; 0x64
 80098b0:	f000 fbba 	bl	800a028 <__retarget_lock_init_recursive>
 80098b4:	f7ff ff96 	bl	80097e4 <__sfp_lock_release>
 80098b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80098bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	61a5      	str	r5, [r4, #24]
 80098c4:	2208      	movs	r2, #8
 80098c6:	4629      	mov	r1, r5
 80098c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80098cc:	f7fd f958 	bl	8006b80 <memset>
 80098d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80098d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80098d8:	4620      	mov	r0, r4
 80098da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098dc:	3468      	adds	r4, #104	; 0x68
 80098de:	e7d9      	b.n	8009894 <__sfp+0x1c>
 80098e0:	2104      	movs	r1, #4
 80098e2:	4638      	mov	r0, r7
 80098e4:	f7ff ff62 	bl	80097ac <__sfmoreglue>
 80098e8:	4604      	mov	r4, r0
 80098ea:	6030      	str	r0, [r6, #0]
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d1d5      	bne.n	800989c <__sfp+0x24>
 80098f0:	f7ff ff78 	bl	80097e4 <__sfp_lock_release>
 80098f4:	230c      	movs	r3, #12
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	e7ee      	b.n	80098d8 <__sfp+0x60>
 80098fa:	bf00      	nop
 80098fc:	0800c38c 	.word	0x0800c38c
 8009900:	ffff0001 	.word	0xffff0001

08009904 <_fwalk_reent>:
 8009904:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009908:	4606      	mov	r6, r0
 800990a:	4688      	mov	r8, r1
 800990c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009910:	2700      	movs	r7, #0
 8009912:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009916:	f1b9 0901 	subs.w	r9, r9, #1
 800991a:	d505      	bpl.n	8009928 <_fwalk_reent+0x24>
 800991c:	6824      	ldr	r4, [r4, #0]
 800991e:	2c00      	cmp	r4, #0
 8009920:	d1f7      	bne.n	8009912 <_fwalk_reent+0xe>
 8009922:	4638      	mov	r0, r7
 8009924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009928:	89ab      	ldrh	r3, [r5, #12]
 800992a:	2b01      	cmp	r3, #1
 800992c:	d907      	bls.n	800993e <_fwalk_reent+0x3a>
 800992e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009932:	3301      	adds	r3, #1
 8009934:	d003      	beq.n	800993e <_fwalk_reent+0x3a>
 8009936:	4629      	mov	r1, r5
 8009938:	4630      	mov	r0, r6
 800993a:	47c0      	blx	r8
 800993c:	4307      	orrs	r7, r0
 800993e:	3568      	adds	r5, #104	; 0x68
 8009940:	e7e9      	b.n	8009916 <_fwalk_reent+0x12>

08009942 <rshift>:
 8009942:	6903      	ldr	r3, [r0, #16]
 8009944:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009948:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800994c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009950:	f100 0414 	add.w	r4, r0, #20
 8009954:	dd45      	ble.n	80099e2 <rshift+0xa0>
 8009956:	f011 011f 	ands.w	r1, r1, #31
 800995a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800995e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009962:	d10c      	bne.n	800997e <rshift+0x3c>
 8009964:	f100 0710 	add.w	r7, r0, #16
 8009968:	4629      	mov	r1, r5
 800996a:	42b1      	cmp	r1, r6
 800996c:	d334      	bcc.n	80099d8 <rshift+0x96>
 800996e:	1a9b      	subs	r3, r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	1eea      	subs	r2, r5, #3
 8009974:	4296      	cmp	r6, r2
 8009976:	bf38      	it	cc
 8009978:	2300      	movcc	r3, #0
 800997a:	4423      	add	r3, r4
 800997c:	e015      	b.n	80099aa <rshift+0x68>
 800997e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009982:	f1c1 0820 	rsb	r8, r1, #32
 8009986:	40cf      	lsrs	r7, r1
 8009988:	f105 0e04 	add.w	lr, r5, #4
 800998c:	46a1      	mov	r9, r4
 800998e:	4576      	cmp	r6, lr
 8009990:	46f4      	mov	ip, lr
 8009992:	d815      	bhi.n	80099c0 <rshift+0x7e>
 8009994:	1a9a      	subs	r2, r3, r2
 8009996:	0092      	lsls	r2, r2, #2
 8009998:	3a04      	subs	r2, #4
 800999a:	3501      	adds	r5, #1
 800999c:	42ae      	cmp	r6, r5
 800999e:	bf38      	it	cc
 80099a0:	2200      	movcc	r2, #0
 80099a2:	18a3      	adds	r3, r4, r2
 80099a4:	50a7      	str	r7, [r4, r2]
 80099a6:	b107      	cbz	r7, 80099aa <rshift+0x68>
 80099a8:	3304      	adds	r3, #4
 80099aa:	1b1a      	subs	r2, r3, r4
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80099b2:	bf08      	it	eq
 80099b4:	2300      	moveq	r3, #0
 80099b6:	6102      	str	r2, [r0, #16]
 80099b8:	bf08      	it	eq
 80099ba:	6143      	streq	r3, [r0, #20]
 80099bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099c0:	f8dc c000 	ldr.w	ip, [ip]
 80099c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80099c8:	ea4c 0707 	orr.w	r7, ip, r7
 80099cc:	f849 7b04 	str.w	r7, [r9], #4
 80099d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80099d4:	40cf      	lsrs	r7, r1
 80099d6:	e7da      	b.n	800998e <rshift+0x4c>
 80099d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80099dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80099e0:	e7c3      	b.n	800996a <rshift+0x28>
 80099e2:	4623      	mov	r3, r4
 80099e4:	e7e1      	b.n	80099aa <rshift+0x68>

080099e6 <__hexdig_fun>:
 80099e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80099ea:	2b09      	cmp	r3, #9
 80099ec:	d802      	bhi.n	80099f4 <__hexdig_fun+0xe>
 80099ee:	3820      	subs	r0, #32
 80099f0:	b2c0      	uxtb	r0, r0
 80099f2:	4770      	bx	lr
 80099f4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80099f8:	2b05      	cmp	r3, #5
 80099fa:	d801      	bhi.n	8009a00 <__hexdig_fun+0x1a>
 80099fc:	3847      	subs	r0, #71	; 0x47
 80099fe:	e7f7      	b.n	80099f0 <__hexdig_fun+0xa>
 8009a00:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	d801      	bhi.n	8009a0c <__hexdig_fun+0x26>
 8009a08:	3827      	subs	r0, #39	; 0x27
 8009a0a:	e7f1      	b.n	80099f0 <__hexdig_fun+0xa>
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	4770      	bx	lr

08009a10 <__gethex>:
 8009a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a14:	ed2d 8b02 	vpush	{d8}
 8009a18:	b089      	sub	sp, #36	; 0x24
 8009a1a:	ee08 0a10 	vmov	s16, r0
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	4bb4      	ldr	r3, [pc, #720]	; (8009cf4 <__gethex+0x2e4>)
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	9301      	str	r3, [sp, #4]
 8009a26:	4618      	mov	r0, r3
 8009a28:	468b      	mov	fp, r1
 8009a2a:	4690      	mov	r8, r2
 8009a2c:	f7f6 fbd0 	bl	80001d0 <strlen>
 8009a30:	9b01      	ldr	r3, [sp, #4]
 8009a32:	f8db 2000 	ldr.w	r2, [fp]
 8009a36:	4403      	add	r3, r0
 8009a38:	4682      	mov	sl, r0
 8009a3a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a3e:	9305      	str	r3, [sp, #20]
 8009a40:	1c93      	adds	r3, r2, #2
 8009a42:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a46:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009a4a:	32fe      	adds	r2, #254	; 0xfe
 8009a4c:	18d1      	adds	r1, r2, r3
 8009a4e:	461f      	mov	r7, r3
 8009a50:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009a54:	9100      	str	r1, [sp, #0]
 8009a56:	2830      	cmp	r0, #48	; 0x30
 8009a58:	d0f8      	beq.n	8009a4c <__gethex+0x3c>
 8009a5a:	f7ff ffc4 	bl	80099e6 <__hexdig_fun>
 8009a5e:	4604      	mov	r4, r0
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d13a      	bne.n	8009ada <__gethex+0xca>
 8009a64:	9901      	ldr	r1, [sp, #4]
 8009a66:	4652      	mov	r2, sl
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f001 fc38 	bl	800b2de <strncmp>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d168      	bne.n	8009b46 <__gethex+0x136>
 8009a74:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009a78:	eb07 060a 	add.w	r6, r7, sl
 8009a7c:	f7ff ffb3 	bl	80099e6 <__hexdig_fun>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d062      	beq.n	8009b4a <__gethex+0x13a>
 8009a84:	4633      	mov	r3, r6
 8009a86:	7818      	ldrb	r0, [r3, #0]
 8009a88:	2830      	cmp	r0, #48	; 0x30
 8009a8a:	461f      	mov	r7, r3
 8009a8c:	f103 0301 	add.w	r3, r3, #1
 8009a90:	d0f9      	beq.n	8009a86 <__gethex+0x76>
 8009a92:	f7ff ffa8 	bl	80099e6 <__hexdig_fun>
 8009a96:	2301      	movs	r3, #1
 8009a98:	fab0 f480 	clz	r4, r0
 8009a9c:	0964      	lsrs	r4, r4, #5
 8009a9e:	4635      	mov	r5, r6
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	463a      	mov	r2, r7
 8009aa4:	4616      	mov	r6, r2
 8009aa6:	3201      	adds	r2, #1
 8009aa8:	7830      	ldrb	r0, [r6, #0]
 8009aaa:	f7ff ff9c 	bl	80099e6 <__hexdig_fun>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d1f8      	bne.n	8009aa4 <__gethex+0x94>
 8009ab2:	9901      	ldr	r1, [sp, #4]
 8009ab4:	4652      	mov	r2, sl
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	f001 fc11 	bl	800b2de <strncmp>
 8009abc:	b980      	cbnz	r0, 8009ae0 <__gethex+0xd0>
 8009abe:	b94d      	cbnz	r5, 8009ad4 <__gethex+0xc4>
 8009ac0:	eb06 050a 	add.w	r5, r6, sl
 8009ac4:	462a      	mov	r2, r5
 8009ac6:	4616      	mov	r6, r2
 8009ac8:	3201      	adds	r2, #1
 8009aca:	7830      	ldrb	r0, [r6, #0]
 8009acc:	f7ff ff8b 	bl	80099e6 <__hexdig_fun>
 8009ad0:	2800      	cmp	r0, #0
 8009ad2:	d1f8      	bne.n	8009ac6 <__gethex+0xb6>
 8009ad4:	1bad      	subs	r5, r5, r6
 8009ad6:	00ad      	lsls	r5, r5, #2
 8009ad8:	e004      	b.n	8009ae4 <__gethex+0xd4>
 8009ada:	2400      	movs	r4, #0
 8009adc:	4625      	mov	r5, r4
 8009ade:	e7e0      	b.n	8009aa2 <__gethex+0x92>
 8009ae0:	2d00      	cmp	r5, #0
 8009ae2:	d1f7      	bne.n	8009ad4 <__gethex+0xc4>
 8009ae4:	7833      	ldrb	r3, [r6, #0]
 8009ae6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009aea:	2b50      	cmp	r3, #80	; 0x50
 8009aec:	d13b      	bne.n	8009b66 <__gethex+0x156>
 8009aee:	7873      	ldrb	r3, [r6, #1]
 8009af0:	2b2b      	cmp	r3, #43	; 0x2b
 8009af2:	d02c      	beq.n	8009b4e <__gethex+0x13e>
 8009af4:	2b2d      	cmp	r3, #45	; 0x2d
 8009af6:	d02e      	beq.n	8009b56 <__gethex+0x146>
 8009af8:	1c71      	adds	r1, r6, #1
 8009afa:	f04f 0900 	mov.w	r9, #0
 8009afe:	7808      	ldrb	r0, [r1, #0]
 8009b00:	f7ff ff71 	bl	80099e6 <__hexdig_fun>
 8009b04:	1e43      	subs	r3, r0, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	2b18      	cmp	r3, #24
 8009b0a:	d82c      	bhi.n	8009b66 <__gethex+0x156>
 8009b0c:	f1a0 0210 	sub.w	r2, r0, #16
 8009b10:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b14:	f7ff ff67 	bl	80099e6 <__hexdig_fun>
 8009b18:	1e43      	subs	r3, r0, #1
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b18      	cmp	r3, #24
 8009b1e:	d91d      	bls.n	8009b5c <__gethex+0x14c>
 8009b20:	f1b9 0f00 	cmp.w	r9, #0
 8009b24:	d000      	beq.n	8009b28 <__gethex+0x118>
 8009b26:	4252      	negs	r2, r2
 8009b28:	4415      	add	r5, r2
 8009b2a:	f8cb 1000 	str.w	r1, [fp]
 8009b2e:	b1e4      	cbz	r4, 8009b6a <__gethex+0x15a>
 8009b30:	9b00      	ldr	r3, [sp, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	bf14      	ite	ne
 8009b36:	2700      	movne	r7, #0
 8009b38:	2706      	moveq	r7, #6
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	b009      	add	sp, #36	; 0x24
 8009b3e:	ecbd 8b02 	vpop	{d8}
 8009b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b46:	463e      	mov	r6, r7
 8009b48:	4625      	mov	r5, r4
 8009b4a:	2401      	movs	r4, #1
 8009b4c:	e7ca      	b.n	8009ae4 <__gethex+0xd4>
 8009b4e:	f04f 0900 	mov.w	r9, #0
 8009b52:	1cb1      	adds	r1, r6, #2
 8009b54:	e7d3      	b.n	8009afe <__gethex+0xee>
 8009b56:	f04f 0901 	mov.w	r9, #1
 8009b5a:	e7fa      	b.n	8009b52 <__gethex+0x142>
 8009b5c:	230a      	movs	r3, #10
 8009b5e:	fb03 0202 	mla	r2, r3, r2, r0
 8009b62:	3a10      	subs	r2, #16
 8009b64:	e7d4      	b.n	8009b10 <__gethex+0x100>
 8009b66:	4631      	mov	r1, r6
 8009b68:	e7df      	b.n	8009b2a <__gethex+0x11a>
 8009b6a:	1bf3      	subs	r3, r6, r7
 8009b6c:	3b01      	subs	r3, #1
 8009b6e:	4621      	mov	r1, r4
 8009b70:	2b07      	cmp	r3, #7
 8009b72:	dc0b      	bgt.n	8009b8c <__gethex+0x17c>
 8009b74:	ee18 0a10 	vmov	r0, s16
 8009b78:	f000 fae6 	bl	800a148 <_Balloc>
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	b940      	cbnz	r0, 8009b92 <__gethex+0x182>
 8009b80:	4b5d      	ldr	r3, [pc, #372]	; (8009cf8 <__gethex+0x2e8>)
 8009b82:	4602      	mov	r2, r0
 8009b84:	21de      	movs	r1, #222	; 0xde
 8009b86:	485d      	ldr	r0, [pc, #372]	; (8009cfc <__gethex+0x2ec>)
 8009b88:	f001 fbdc 	bl	800b344 <__assert_func>
 8009b8c:	3101      	adds	r1, #1
 8009b8e:	105b      	asrs	r3, r3, #1
 8009b90:	e7ee      	b.n	8009b70 <__gethex+0x160>
 8009b92:	f100 0914 	add.w	r9, r0, #20
 8009b96:	f04f 0b00 	mov.w	fp, #0
 8009b9a:	f1ca 0301 	rsb	r3, sl, #1
 8009b9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009ba2:	f8cd b000 	str.w	fp, [sp]
 8009ba6:	9306      	str	r3, [sp, #24]
 8009ba8:	42b7      	cmp	r7, r6
 8009baa:	d340      	bcc.n	8009c2e <__gethex+0x21e>
 8009bac:	9802      	ldr	r0, [sp, #8]
 8009bae:	9b00      	ldr	r3, [sp, #0]
 8009bb0:	f840 3b04 	str.w	r3, [r0], #4
 8009bb4:	eba0 0009 	sub.w	r0, r0, r9
 8009bb8:	1080      	asrs	r0, r0, #2
 8009bba:	0146      	lsls	r6, r0, #5
 8009bbc:	6120      	str	r0, [r4, #16]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f000 fbb4 	bl	800a32c <__hi0bits>
 8009bc4:	1a30      	subs	r0, r6, r0
 8009bc6:	f8d8 6000 	ldr.w	r6, [r8]
 8009bca:	42b0      	cmp	r0, r6
 8009bcc:	dd63      	ble.n	8009c96 <__gethex+0x286>
 8009bce:	1b87      	subs	r7, r0, r6
 8009bd0:	4639      	mov	r1, r7
 8009bd2:	4620      	mov	r0, r4
 8009bd4:	f000 ff58 	bl	800aa88 <__any_on>
 8009bd8:	4682      	mov	sl, r0
 8009bda:	b1a8      	cbz	r0, 8009c08 <__gethex+0x1f8>
 8009bdc:	1e7b      	subs	r3, r7, #1
 8009bde:	1159      	asrs	r1, r3, #5
 8009be0:	f003 021f 	and.w	r2, r3, #31
 8009be4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009be8:	f04f 0a01 	mov.w	sl, #1
 8009bec:	fa0a f202 	lsl.w	r2, sl, r2
 8009bf0:	420a      	tst	r2, r1
 8009bf2:	d009      	beq.n	8009c08 <__gethex+0x1f8>
 8009bf4:	4553      	cmp	r3, sl
 8009bf6:	dd05      	ble.n	8009c04 <__gethex+0x1f4>
 8009bf8:	1eb9      	subs	r1, r7, #2
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f000 ff44 	bl	800aa88 <__any_on>
 8009c00:	2800      	cmp	r0, #0
 8009c02:	d145      	bne.n	8009c90 <__gethex+0x280>
 8009c04:	f04f 0a02 	mov.w	sl, #2
 8009c08:	4639      	mov	r1, r7
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f7ff fe99 	bl	8009942 <rshift>
 8009c10:	443d      	add	r5, r7
 8009c12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c16:	42ab      	cmp	r3, r5
 8009c18:	da4c      	bge.n	8009cb4 <__gethex+0x2a4>
 8009c1a:	ee18 0a10 	vmov	r0, s16
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f000 fad2 	bl	800a1c8 <_Bfree>
 8009c24:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c26:	2300      	movs	r3, #0
 8009c28:	6013      	str	r3, [r2, #0]
 8009c2a:	27a3      	movs	r7, #163	; 0xa3
 8009c2c:	e785      	b.n	8009b3a <__gethex+0x12a>
 8009c2e:	1e73      	subs	r3, r6, #1
 8009c30:	9a05      	ldr	r2, [sp, #20]
 8009c32:	9303      	str	r3, [sp, #12]
 8009c34:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d019      	beq.n	8009c70 <__gethex+0x260>
 8009c3c:	f1bb 0f20 	cmp.w	fp, #32
 8009c40:	d107      	bne.n	8009c52 <__gethex+0x242>
 8009c42:	9b02      	ldr	r3, [sp, #8]
 8009c44:	9a00      	ldr	r2, [sp, #0]
 8009c46:	f843 2b04 	str.w	r2, [r3], #4
 8009c4a:	9302      	str	r3, [sp, #8]
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	469b      	mov	fp, r3
 8009c52:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009c56:	f7ff fec6 	bl	80099e6 <__hexdig_fun>
 8009c5a:	9b00      	ldr	r3, [sp, #0]
 8009c5c:	f000 000f 	and.w	r0, r0, #15
 8009c60:	fa00 f00b 	lsl.w	r0, r0, fp
 8009c64:	4303      	orrs	r3, r0
 8009c66:	9300      	str	r3, [sp, #0]
 8009c68:	f10b 0b04 	add.w	fp, fp, #4
 8009c6c:	9b03      	ldr	r3, [sp, #12]
 8009c6e:	e00d      	b.n	8009c8c <__gethex+0x27c>
 8009c70:	9b03      	ldr	r3, [sp, #12]
 8009c72:	9a06      	ldr	r2, [sp, #24]
 8009c74:	4413      	add	r3, r2
 8009c76:	42bb      	cmp	r3, r7
 8009c78:	d3e0      	bcc.n	8009c3c <__gethex+0x22c>
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	9901      	ldr	r1, [sp, #4]
 8009c7e:	9307      	str	r3, [sp, #28]
 8009c80:	4652      	mov	r2, sl
 8009c82:	f001 fb2c 	bl	800b2de <strncmp>
 8009c86:	9b07      	ldr	r3, [sp, #28]
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	d1d7      	bne.n	8009c3c <__gethex+0x22c>
 8009c8c:	461e      	mov	r6, r3
 8009c8e:	e78b      	b.n	8009ba8 <__gethex+0x198>
 8009c90:	f04f 0a03 	mov.w	sl, #3
 8009c94:	e7b8      	b.n	8009c08 <__gethex+0x1f8>
 8009c96:	da0a      	bge.n	8009cae <__gethex+0x29e>
 8009c98:	1a37      	subs	r7, r6, r0
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	ee18 0a10 	vmov	r0, s16
 8009ca0:	463a      	mov	r2, r7
 8009ca2:	f000 fcad 	bl	800a600 <__lshift>
 8009ca6:	1bed      	subs	r5, r5, r7
 8009ca8:	4604      	mov	r4, r0
 8009caa:	f100 0914 	add.w	r9, r0, #20
 8009cae:	f04f 0a00 	mov.w	sl, #0
 8009cb2:	e7ae      	b.n	8009c12 <__gethex+0x202>
 8009cb4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009cb8:	42a8      	cmp	r0, r5
 8009cba:	dd72      	ble.n	8009da2 <__gethex+0x392>
 8009cbc:	1b45      	subs	r5, r0, r5
 8009cbe:	42ae      	cmp	r6, r5
 8009cc0:	dc36      	bgt.n	8009d30 <__gethex+0x320>
 8009cc2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d02a      	beq.n	8009d20 <__gethex+0x310>
 8009cca:	2b03      	cmp	r3, #3
 8009ccc:	d02c      	beq.n	8009d28 <__gethex+0x318>
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	d11c      	bne.n	8009d0c <__gethex+0x2fc>
 8009cd2:	42ae      	cmp	r6, r5
 8009cd4:	d11a      	bne.n	8009d0c <__gethex+0x2fc>
 8009cd6:	2e01      	cmp	r6, #1
 8009cd8:	d112      	bne.n	8009d00 <__gethex+0x2f0>
 8009cda:	9a04      	ldr	r2, [sp, #16]
 8009cdc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	f8c9 3000 	str.w	r3, [r9]
 8009cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cec:	2762      	movs	r7, #98	; 0x62
 8009cee:	601c      	str	r4, [r3, #0]
 8009cf0:	e723      	b.n	8009b3a <__gethex+0x12a>
 8009cf2:	bf00      	nop
 8009cf4:	0800c67c 	.word	0x0800c67c
 8009cf8:	0800c5a0 	.word	0x0800c5a0
 8009cfc:	0800c614 	.word	0x0800c614
 8009d00:	1e71      	subs	r1, r6, #1
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 fec0 	bl	800aa88 <__any_on>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d1e6      	bne.n	8009cda <__gethex+0x2ca>
 8009d0c:	ee18 0a10 	vmov	r0, s16
 8009d10:	4621      	mov	r1, r4
 8009d12:	f000 fa59 	bl	800a1c8 <_Bfree>
 8009d16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d18:	2300      	movs	r3, #0
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	2750      	movs	r7, #80	; 0x50
 8009d1e:	e70c      	b.n	8009b3a <__gethex+0x12a>
 8009d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f2      	bne.n	8009d0c <__gethex+0x2fc>
 8009d26:	e7d8      	b.n	8009cda <__gethex+0x2ca>
 8009d28:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1d5      	bne.n	8009cda <__gethex+0x2ca>
 8009d2e:	e7ed      	b.n	8009d0c <__gethex+0x2fc>
 8009d30:	1e6f      	subs	r7, r5, #1
 8009d32:	f1ba 0f00 	cmp.w	sl, #0
 8009d36:	d131      	bne.n	8009d9c <__gethex+0x38c>
 8009d38:	b127      	cbz	r7, 8009d44 <__gethex+0x334>
 8009d3a:	4639      	mov	r1, r7
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fea3 	bl	800aa88 <__any_on>
 8009d42:	4682      	mov	sl, r0
 8009d44:	117b      	asrs	r3, r7, #5
 8009d46:	2101      	movs	r1, #1
 8009d48:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009d4c:	f007 071f 	and.w	r7, r7, #31
 8009d50:	fa01 f707 	lsl.w	r7, r1, r7
 8009d54:	421f      	tst	r7, r3
 8009d56:	4629      	mov	r1, r5
 8009d58:	4620      	mov	r0, r4
 8009d5a:	bf18      	it	ne
 8009d5c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009d60:	1b76      	subs	r6, r6, r5
 8009d62:	f7ff fdee 	bl	8009942 <rshift>
 8009d66:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009d6a:	2702      	movs	r7, #2
 8009d6c:	f1ba 0f00 	cmp.w	sl, #0
 8009d70:	d048      	beq.n	8009e04 <__gethex+0x3f4>
 8009d72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d015      	beq.n	8009da6 <__gethex+0x396>
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	d017      	beq.n	8009dae <__gethex+0x39e>
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d109      	bne.n	8009d96 <__gethex+0x386>
 8009d82:	f01a 0f02 	tst.w	sl, #2
 8009d86:	d006      	beq.n	8009d96 <__gethex+0x386>
 8009d88:	f8d9 0000 	ldr.w	r0, [r9]
 8009d8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009d90:	f01a 0f01 	tst.w	sl, #1
 8009d94:	d10e      	bne.n	8009db4 <__gethex+0x3a4>
 8009d96:	f047 0710 	orr.w	r7, r7, #16
 8009d9a:	e033      	b.n	8009e04 <__gethex+0x3f4>
 8009d9c:	f04f 0a01 	mov.w	sl, #1
 8009da0:	e7d0      	b.n	8009d44 <__gethex+0x334>
 8009da2:	2701      	movs	r7, #1
 8009da4:	e7e2      	b.n	8009d6c <__gethex+0x35c>
 8009da6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da8:	f1c3 0301 	rsb	r3, r3, #1
 8009dac:	9315      	str	r3, [sp, #84]	; 0x54
 8009dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d0f0      	beq.n	8009d96 <__gethex+0x386>
 8009db4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009db8:	f104 0314 	add.w	r3, r4, #20
 8009dbc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009dc0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009dc4:	f04f 0c00 	mov.w	ip, #0
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dce:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009dd2:	d01c      	beq.n	8009e0e <__gethex+0x3fe>
 8009dd4:	3201      	adds	r2, #1
 8009dd6:	6002      	str	r2, [r0, #0]
 8009dd8:	2f02      	cmp	r7, #2
 8009dda:	f104 0314 	add.w	r3, r4, #20
 8009dde:	d13f      	bne.n	8009e60 <__gethex+0x450>
 8009de0:	f8d8 2000 	ldr.w	r2, [r8]
 8009de4:	3a01      	subs	r2, #1
 8009de6:	42b2      	cmp	r2, r6
 8009de8:	d10a      	bne.n	8009e00 <__gethex+0x3f0>
 8009dea:	1171      	asrs	r1, r6, #5
 8009dec:	2201      	movs	r2, #1
 8009dee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009df2:	f006 061f 	and.w	r6, r6, #31
 8009df6:	fa02 f606 	lsl.w	r6, r2, r6
 8009dfa:	421e      	tst	r6, r3
 8009dfc:	bf18      	it	ne
 8009dfe:	4617      	movne	r7, r2
 8009e00:	f047 0720 	orr.w	r7, r7, #32
 8009e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e06:	601c      	str	r4, [r3, #0]
 8009e08:	9b04      	ldr	r3, [sp, #16]
 8009e0a:	601d      	str	r5, [r3, #0]
 8009e0c:	e695      	b.n	8009b3a <__gethex+0x12a>
 8009e0e:	4299      	cmp	r1, r3
 8009e10:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e14:	d8d8      	bhi.n	8009dc8 <__gethex+0x3b8>
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	459b      	cmp	fp, r3
 8009e1a:	db19      	blt.n	8009e50 <__gethex+0x440>
 8009e1c:	6861      	ldr	r1, [r4, #4]
 8009e1e:	ee18 0a10 	vmov	r0, s16
 8009e22:	3101      	adds	r1, #1
 8009e24:	f000 f990 	bl	800a148 <_Balloc>
 8009e28:	4681      	mov	r9, r0
 8009e2a:	b918      	cbnz	r0, 8009e34 <__gethex+0x424>
 8009e2c:	4b1a      	ldr	r3, [pc, #104]	; (8009e98 <__gethex+0x488>)
 8009e2e:	4602      	mov	r2, r0
 8009e30:	2184      	movs	r1, #132	; 0x84
 8009e32:	e6a8      	b.n	8009b86 <__gethex+0x176>
 8009e34:	6922      	ldr	r2, [r4, #16]
 8009e36:	3202      	adds	r2, #2
 8009e38:	f104 010c 	add.w	r1, r4, #12
 8009e3c:	0092      	lsls	r2, r2, #2
 8009e3e:	300c      	adds	r0, #12
 8009e40:	f000 f974 	bl	800a12c <memcpy>
 8009e44:	4621      	mov	r1, r4
 8009e46:	ee18 0a10 	vmov	r0, s16
 8009e4a:	f000 f9bd 	bl	800a1c8 <_Bfree>
 8009e4e:	464c      	mov	r4, r9
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	1c5a      	adds	r2, r3, #1
 8009e54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e58:	6122      	str	r2, [r4, #16]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	615a      	str	r2, [r3, #20]
 8009e5e:	e7bb      	b.n	8009dd8 <__gethex+0x3c8>
 8009e60:	6922      	ldr	r2, [r4, #16]
 8009e62:	455a      	cmp	r2, fp
 8009e64:	dd0b      	ble.n	8009e7e <__gethex+0x46e>
 8009e66:	2101      	movs	r1, #1
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f7ff fd6a 	bl	8009942 <rshift>
 8009e6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e72:	3501      	adds	r5, #1
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	f6ff aed0 	blt.w	8009c1a <__gethex+0x20a>
 8009e7a:	2701      	movs	r7, #1
 8009e7c:	e7c0      	b.n	8009e00 <__gethex+0x3f0>
 8009e7e:	f016 061f 	ands.w	r6, r6, #31
 8009e82:	d0fa      	beq.n	8009e7a <__gethex+0x46a>
 8009e84:	4453      	add	r3, sl
 8009e86:	f1c6 0620 	rsb	r6, r6, #32
 8009e8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009e8e:	f000 fa4d 	bl	800a32c <__hi0bits>
 8009e92:	42b0      	cmp	r0, r6
 8009e94:	dbe7      	blt.n	8009e66 <__gethex+0x456>
 8009e96:	e7f0      	b.n	8009e7a <__gethex+0x46a>
 8009e98:	0800c5a0 	.word	0x0800c5a0

08009e9c <L_shift>:
 8009e9c:	f1c2 0208 	rsb	r2, r2, #8
 8009ea0:	0092      	lsls	r2, r2, #2
 8009ea2:	b570      	push	{r4, r5, r6, lr}
 8009ea4:	f1c2 0620 	rsb	r6, r2, #32
 8009ea8:	6843      	ldr	r3, [r0, #4]
 8009eaa:	6804      	ldr	r4, [r0, #0]
 8009eac:	fa03 f506 	lsl.w	r5, r3, r6
 8009eb0:	432c      	orrs	r4, r5
 8009eb2:	40d3      	lsrs	r3, r2
 8009eb4:	6004      	str	r4, [r0, #0]
 8009eb6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eba:	4288      	cmp	r0, r1
 8009ebc:	d3f4      	bcc.n	8009ea8 <L_shift+0xc>
 8009ebe:	bd70      	pop	{r4, r5, r6, pc}

08009ec0 <__match>:
 8009ec0:	b530      	push	{r4, r5, lr}
 8009ec2:	6803      	ldr	r3, [r0, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eca:	b914      	cbnz	r4, 8009ed2 <__match+0x12>
 8009ecc:	6003      	str	r3, [r0, #0]
 8009ece:	2001      	movs	r0, #1
 8009ed0:	bd30      	pop	{r4, r5, pc}
 8009ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009eda:	2d19      	cmp	r5, #25
 8009edc:	bf98      	it	ls
 8009ede:	3220      	addls	r2, #32
 8009ee0:	42a2      	cmp	r2, r4
 8009ee2:	d0f0      	beq.n	8009ec6 <__match+0x6>
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	e7f3      	b.n	8009ed0 <__match+0x10>

08009ee8 <__hexnan>:
 8009ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eec:	680b      	ldr	r3, [r1, #0]
 8009eee:	115e      	asrs	r6, r3, #5
 8009ef0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009ef4:	f013 031f 	ands.w	r3, r3, #31
 8009ef8:	b087      	sub	sp, #28
 8009efa:	bf18      	it	ne
 8009efc:	3604      	addne	r6, #4
 8009efe:	2500      	movs	r5, #0
 8009f00:	1f37      	subs	r7, r6, #4
 8009f02:	4690      	mov	r8, r2
 8009f04:	6802      	ldr	r2, [r0, #0]
 8009f06:	9301      	str	r3, [sp, #4]
 8009f08:	4682      	mov	sl, r0
 8009f0a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f0e:	46b9      	mov	r9, r7
 8009f10:	463c      	mov	r4, r7
 8009f12:	9502      	str	r5, [sp, #8]
 8009f14:	46ab      	mov	fp, r5
 8009f16:	7851      	ldrb	r1, [r2, #1]
 8009f18:	1c53      	adds	r3, r2, #1
 8009f1a:	9303      	str	r3, [sp, #12]
 8009f1c:	b341      	cbz	r1, 8009f70 <__hexnan+0x88>
 8009f1e:	4608      	mov	r0, r1
 8009f20:	9205      	str	r2, [sp, #20]
 8009f22:	9104      	str	r1, [sp, #16]
 8009f24:	f7ff fd5f 	bl	80099e6 <__hexdig_fun>
 8009f28:	2800      	cmp	r0, #0
 8009f2a:	d14f      	bne.n	8009fcc <__hexnan+0xe4>
 8009f2c:	9904      	ldr	r1, [sp, #16]
 8009f2e:	9a05      	ldr	r2, [sp, #20]
 8009f30:	2920      	cmp	r1, #32
 8009f32:	d818      	bhi.n	8009f66 <__hexnan+0x7e>
 8009f34:	9b02      	ldr	r3, [sp, #8]
 8009f36:	459b      	cmp	fp, r3
 8009f38:	dd13      	ble.n	8009f62 <__hexnan+0x7a>
 8009f3a:	454c      	cmp	r4, r9
 8009f3c:	d206      	bcs.n	8009f4c <__hexnan+0x64>
 8009f3e:	2d07      	cmp	r5, #7
 8009f40:	dc04      	bgt.n	8009f4c <__hexnan+0x64>
 8009f42:	462a      	mov	r2, r5
 8009f44:	4649      	mov	r1, r9
 8009f46:	4620      	mov	r0, r4
 8009f48:	f7ff ffa8 	bl	8009e9c <L_shift>
 8009f4c:	4544      	cmp	r4, r8
 8009f4e:	d950      	bls.n	8009ff2 <__hexnan+0x10a>
 8009f50:	2300      	movs	r3, #0
 8009f52:	f1a4 0904 	sub.w	r9, r4, #4
 8009f56:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f5e:	464c      	mov	r4, r9
 8009f60:	461d      	mov	r5, r3
 8009f62:	9a03      	ldr	r2, [sp, #12]
 8009f64:	e7d7      	b.n	8009f16 <__hexnan+0x2e>
 8009f66:	2929      	cmp	r1, #41	; 0x29
 8009f68:	d156      	bne.n	800a018 <__hexnan+0x130>
 8009f6a:	3202      	adds	r2, #2
 8009f6c:	f8ca 2000 	str.w	r2, [sl]
 8009f70:	f1bb 0f00 	cmp.w	fp, #0
 8009f74:	d050      	beq.n	800a018 <__hexnan+0x130>
 8009f76:	454c      	cmp	r4, r9
 8009f78:	d206      	bcs.n	8009f88 <__hexnan+0xa0>
 8009f7a:	2d07      	cmp	r5, #7
 8009f7c:	dc04      	bgt.n	8009f88 <__hexnan+0xa0>
 8009f7e:	462a      	mov	r2, r5
 8009f80:	4649      	mov	r1, r9
 8009f82:	4620      	mov	r0, r4
 8009f84:	f7ff ff8a 	bl	8009e9c <L_shift>
 8009f88:	4544      	cmp	r4, r8
 8009f8a:	d934      	bls.n	8009ff6 <__hexnan+0x10e>
 8009f8c:	f1a8 0204 	sub.w	r2, r8, #4
 8009f90:	4623      	mov	r3, r4
 8009f92:	f853 1b04 	ldr.w	r1, [r3], #4
 8009f96:	f842 1f04 	str.w	r1, [r2, #4]!
 8009f9a:	429f      	cmp	r7, r3
 8009f9c:	d2f9      	bcs.n	8009f92 <__hexnan+0xaa>
 8009f9e:	1b3b      	subs	r3, r7, r4
 8009fa0:	f023 0303 	bic.w	r3, r3, #3
 8009fa4:	3304      	adds	r3, #4
 8009fa6:	3401      	adds	r4, #1
 8009fa8:	3e03      	subs	r6, #3
 8009faa:	42b4      	cmp	r4, r6
 8009fac:	bf88      	it	hi
 8009fae:	2304      	movhi	r3, #4
 8009fb0:	4443      	add	r3, r8
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f843 2b04 	str.w	r2, [r3], #4
 8009fb8:	429f      	cmp	r7, r3
 8009fba:	d2fb      	bcs.n	8009fb4 <__hexnan+0xcc>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	b91b      	cbnz	r3, 8009fc8 <__hexnan+0xe0>
 8009fc0:	4547      	cmp	r7, r8
 8009fc2:	d127      	bne.n	800a014 <__hexnan+0x12c>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	2005      	movs	r0, #5
 8009fca:	e026      	b.n	800a01a <__hexnan+0x132>
 8009fcc:	3501      	adds	r5, #1
 8009fce:	2d08      	cmp	r5, #8
 8009fd0:	f10b 0b01 	add.w	fp, fp, #1
 8009fd4:	dd06      	ble.n	8009fe4 <__hexnan+0xfc>
 8009fd6:	4544      	cmp	r4, r8
 8009fd8:	d9c3      	bls.n	8009f62 <__hexnan+0x7a>
 8009fda:	2300      	movs	r3, #0
 8009fdc:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fe0:	2501      	movs	r5, #1
 8009fe2:	3c04      	subs	r4, #4
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	f000 000f 	and.w	r0, r0, #15
 8009fea:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009fee:	6022      	str	r2, [r4, #0]
 8009ff0:	e7b7      	b.n	8009f62 <__hexnan+0x7a>
 8009ff2:	2508      	movs	r5, #8
 8009ff4:	e7b5      	b.n	8009f62 <__hexnan+0x7a>
 8009ff6:	9b01      	ldr	r3, [sp, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d0df      	beq.n	8009fbc <__hexnan+0xd4>
 8009ffc:	f04f 32ff 	mov.w	r2, #4294967295
 800a000:	f1c3 0320 	rsb	r3, r3, #32
 800a004:	fa22 f303 	lsr.w	r3, r2, r3
 800a008:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a00c:	401a      	ands	r2, r3
 800a00e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a012:	e7d3      	b.n	8009fbc <__hexnan+0xd4>
 800a014:	3f04      	subs	r7, #4
 800a016:	e7d1      	b.n	8009fbc <__hexnan+0xd4>
 800a018:	2004      	movs	r0, #4
 800a01a:	b007      	add	sp, #28
 800a01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a020 <_localeconv_r>:
 800a020:	4800      	ldr	r0, [pc, #0]	; (800a024 <_localeconv_r+0x4>)
 800a022:	4770      	bx	lr
 800a024:	200003ec 	.word	0x200003ec

0800a028 <__retarget_lock_init_recursive>:
 800a028:	4770      	bx	lr

0800a02a <__retarget_lock_acquire_recursive>:
 800a02a:	4770      	bx	lr

0800a02c <__retarget_lock_release_recursive>:
 800a02c:	4770      	bx	lr

0800a02e <__swhatbuf_r>:
 800a02e:	b570      	push	{r4, r5, r6, lr}
 800a030:	460e      	mov	r6, r1
 800a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a036:	2900      	cmp	r1, #0
 800a038:	b096      	sub	sp, #88	; 0x58
 800a03a:	4614      	mov	r4, r2
 800a03c:	461d      	mov	r5, r3
 800a03e:	da08      	bge.n	800a052 <__swhatbuf_r+0x24>
 800a040:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	602a      	str	r2, [r5, #0]
 800a048:	061a      	lsls	r2, r3, #24
 800a04a:	d410      	bmi.n	800a06e <__swhatbuf_r+0x40>
 800a04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a050:	e00e      	b.n	800a070 <__swhatbuf_r+0x42>
 800a052:	466a      	mov	r2, sp
 800a054:	f001 f9b6 	bl	800b3c4 <_fstat_r>
 800a058:	2800      	cmp	r0, #0
 800a05a:	dbf1      	blt.n	800a040 <__swhatbuf_r+0x12>
 800a05c:	9a01      	ldr	r2, [sp, #4]
 800a05e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a062:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a066:	425a      	negs	r2, r3
 800a068:	415a      	adcs	r2, r3
 800a06a:	602a      	str	r2, [r5, #0]
 800a06c:	e7ee      	b.n	800a04c <__swhatbuf_r+0x1e>
 800a06e:	2340      	movs	r3, #64	; 0x40
 800a070:	2000      	movs	r0, #0
 800a072:	6023      	str	r3, [r4, #0]
 800a074:	b016      	add	sp, #88	; 0x58
 800a076:	bd70      	pop	{r4, r5, r6, pc}

0800a078 <__smakebuf_r>:
 800a078:	898b      	ldrh	r3, [r1, #12]
 800a07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a07c:	079d      	lsls	r5, r3, #30
 800a07e:	4606      	mov	r6, r0
 800a080:	460c      	mov	r4, r1
 800a082:	d507      	bpl.n	800a094 <__smakebuf_r+0x1c>
 800a084:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a088:	6023      	str	r3, [r4, #0]
 800a08a:	6123      	str	r3, [r4, #16]
 800a08c:	2301      	movs	r3, #1
 800a08e:	6163      	str	r3, [r4, #20]
 800a090:	b002      	add	sp, #8
 800a092:	bd70      	pop	{r4, r5, r6, pc}
 800a094:	ab01      	add	r3, sp, #4
 800a096:	466a      	mov	r2, sp
 800a098:	f7ff ffc9 	bl	800a02e <__swhatbuf_r>
 800a09c:	9900      	ldr	r1, [sp, #0]
 800a09e:	4605      	mov	r5, r0
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 fd95 	bl	800abd0 <_malloc_r>
 800a0a6:	b948      	cbnz	r0, 800a0bc <__smakebuf_r+0x44>
 800a0a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0ac:	059a      	lsls	r2, r3, #22
 800a0ae:	d4ef      	bmi.n	800a090 <__smakebuf_r+0x18>
 800a0b0:	f023 0303 	bic.w	r3, r3, #3
 800a0b4:	f043 0302 	orr.w	r3, r3, #2
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	e7e3      	b.n	800a084 <__smakebuf_r+0xc>
 800a0bc:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <__smakebuf_r+0x7c>)
 800a0be:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	6020      	str	r0, [r4, #0]
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	9b00      	ldr	r3, [sp, #0]
 800a0cc:	6163      	str	r3, [r4, #20]
 800a0ce:	9b01      	ldr	r3, [sp, #4]
 800a0d0:	6120      	str	r0, [r4, #16]
 800a0d2:	b15b      	cbz	r3, 800a0ec <__smakebuf_r+0x74>
 800a0d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f001 f985 	bl	800b3e8 <_isatty_r>
 800a0de:	b128      	cbz	r0, 800a0ec <__smakebuf_r+0x74>
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	f023 0303 	bic.w	r3, r3, #3
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	81a3      	strh	r3, [r4, #12]
 800a0ec:	89a0      	ldrh	r0, [r4, #12]
 800a0ee:	4305      	orrs	r5, r0
 800a0f0:	81a5      	strh	r5, [r4, #12]
 800a0f2:	e7cd      	b.n	800a090 <__smakebuf_r+0x18>
 800a0f4:	080097a1 	.word	0x080097a1

0800a0f8 <malloc>:
 800a0f8:	4b02      	ldr	r3, [pc, #8]	; (800a104 <malloc+0xc>)
 800a0fa:	4601      	mov	r1, r0
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	f000 bd67 	b.w	800abd0 <_malloc_r>
 800a102:	bf00      	nop
 800a104:	20000294 	.word	0x20000294

0800a108 <__ascii_mbtowc>:
 800a108:	b082      	sub	sp, #8
 800a10a:	b901      	cbnz	r1, 800a10e <__ascii_mbtowc+0x6>
 800a10c:	a901      	add	r1, sp, #4
 800a10e:	b142      	cbz	r2, 800a122 <__ascii_mbtowc+0x1a>
 800a110:	b14b      	cbz	r3, 800a126 <__ascii_mbtowc+0x1e>
 800a112:	7813      	ldrb	r3, [r2, #0]
 800a114:	600b      	str	r3, [r1, #0]
 800a116:	7812      	ldrb	r2, [r2, #0]
 800a118:	1e10      	subs	r0, r2, #0
 800a11a:	bf18      	it	ne
 800a11c:	2001      	movne	r0, #1
 800a11e:	b002      	add	sp, #8
 800a120:	4770      	bx	lr
 800a122:	4610      	mov	r0, r2
 800a124:	e7fb      	b.n	800a11e <__ascii_mbtowc+0x16>
 800a126:	f06f 0001 	mvn.w	r0, #1
 800a12a:	e7f8      	b.n	800a11e <__ascii_mbtowc+0x16>

0800a12c <memcpy>:
 800a12c:	440a      	add	r2, r1
 800a12e:	4291      	cmp	r1, r2
 800a130:	f100 33ff 	add.w	r3, r0, #4294967295
 800a134:	d100      	bne.n	800a138 <memcpy+0xc>
 800a136:	4770      	bx	lr
 800a138:	b510      	push	{r4, lr}
 800a13a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a13e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a142:	4291      	cmp	r1, r2
 800a144:	d1f9      	bne.n	800a13a <memcpy+0xe>
 800a146:	bd10      	pop	{r4, pc}

0800a148 <_Balloc>:
 800a148:	b570      	push	{r4, r5, r6, lr}
 800a14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	b976      	cbnz	r6, 800a170 <_Balloc+0x28>
 800a152:	2010      	movs	r0, #16
 800a154:	f7ff ffd0 	bl	800a0f8 <malloc>
 800a158:	4602      	mov	r2, r0
 800a15a:	6260      	str	r0, [r4, #36]	; 0x24
 800a15c:	b920      	cbnz	r0, 800a168 <_Balloc+0x20>
 800a15e:	4b18      	ldr	r3, [pc, #96]	; (800a1c0 <_Balloc+0x78>)
 800a160:	4818      	ldr	r0, [pc, #96]	; (800a1c4 <_Balloc+0x7c>)
 800a162:	2166      	movs	r1, #102	; 0x66
 800a164:	f001 f8ee 	bl	800b344 <__assert_func>
 800a168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a16c:	6006      	str	r6, [r0, #0]
 800a16e:	60c6      	str	r6, [r0, #12]
 800a170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a172:	68f3      	ldr	r3, [r6, #12]
 800a174:	b183      	cbz	r3, 800a198 <_Balloc+0x50>
 800a176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a17e:	b9b8      	cbnz	r0, 800a1b0 <_Balloc+0x68>
 800a180:	2101      	movs	r1, #1
 800a182:	fa01 f605 	lsl.w	r6, r1, r5
 800a186:	1d72      	adds	r2, r6, #5
 800a188:	0092      	lsls	r2, r2, #2
 800a18a:	4620      	mov	r0, r4
 800a18c:	f000 fc9d 	bl	800aaca <_calloc_r>
 800a190:	b160      	cbz	r0, 800a1ac <_Balloc+0x64>
 800a192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a196:	e00e      	b.n	800a1b6 <_Balloc+0x6e>
 800a198:	2221      	movs	r2, #33	; 0x21
 800a19a:	2104      	movs	r1, #4
 800a19c:	4620      	mov	r0, r4
 800a19e:	f000 fc94 	bl	800aaca <_calloc_r>
 800a1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a4:	60f0      	str	r0, [r6, #12]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1e4      	bne.n	800a176 <_Balloc+0x2e>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	6802      	ldr	r2, [r0, #0]
 800a1b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a1bc:	e7f7      	b.n	800a1ae <_Balloc+0x66>
 800a1be:	bf00      	nop
 800a1c0:	0800c52e 	.word	0x0800c52e
 800a1c4:	0800c690 	.word	0x0800c690

0800a1c8 <_Bfree>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	460c      	mov	r4, r1
 800a1d0:	b976      	cbnz	r6, 800a1f0 <_Bfree+0x28>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7ff ff90 	bl	800a0f8 <malloc>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	6268      	str	r0, [r5, #36]	; 0x24
 800a1dc:	b920      	cbnz	r0, 800a1e8 <_Bfree+0x20>
 800a1de:	4b09      	ldr	r3, [pc, #36]	; (800a204 <_Bfree+0x3c>)
 800a1e0:	4809      	ldr	r0, [pc, #36]	; (800a208 <_Bfree+0x40>)
 800a1e2:	218a      	movs	r1, #138	; 0x8a
 800a1e4:	f001 f8ae 	bl	800b344 <__assert_func>
 800a1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ec:	6006      	str	r6, [r0, #0]
 800a1ee:	60c6      	str	r6, [r0, #12]
 800a1f0:	b13c      	cbz	r4, 800a202 <_Bfree+0x3a>
 800a1f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1f4:	6862      	ldr	r2, [r4, #4]
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1fc:	6021      	str	r1, [r4, #0]
 800a1fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	0800c52e 	.word	0x0800c52e
 800a208:	0800c690 	.word	0x0800c690

0800a20c <__multadd>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	690d      	ldr	r5, [r1, #16]
 800a212:	4607      	mov	r7, r0
 800a214:	460c      	mov	r4, r1
 800a216:	461e      	mov	r6, r3
 800a218:	f101 0c14 	add.w	ip, r1, #20
 800a21c:	2000      	movs	r0, #0
 800a21e:	f8dc 3000 	ldr.w	r3, [ip]
 800a222:	b299      	uxth	r1, r3
 800a224:	fb02 6101 	mla	r1, r2, r1, r6
 800a228:	0c1e      	lsrs	r6, r3, #16
 800a22a:	0c0b      	lsrs	r3, r1, #16
 800a22c:	fb02 3306 	mla	r3, r2, r6, r3
 800a230:	b289      	uxth	r1, r1
 800a232:	3001      	adds	r0, #1
 800a234:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a238:	4285      	cmp	r5, r0
 800a23a:	f84c 1b04 	str.w	r1, [ip], #4
 800a23e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a242:	dcec      	bgt.n	800a21e <__multadd+0x12>
 800a244:	b30e      	cbz	r6, 800a28a <__multadd+0x7e>
 800a246:	68a3      	ldr	r3, [r4, #8]
 800a248:	42ab      	cmp	r3, r5
 800a24a:	dc19      	bgt.n	800a280 <__multadd+0x74>
 800a24c:	6861      	ldr	r1, [r4, #4]
 800a24e:	4638      	mov	r0, r7
 800a250:	3101      	adds	r1, #1
 800a252:	f7ff ff79 	bl	800a148 <_Balloc>
 800a256:	4680      	mov	r8, r0
 800a258:	b928      	cbnz	r0, 800a266 <__multadd+0x5a>
 800a25a:	4602      	mov	r2, r0
 800a25c:	4b0c      	ldr	r3, [pc, #48]	; (800a290 <__multadd+0x84>)
 800a25e:	480d      	ldr	r0, [pc, #52]	; (800a294 <__multadd+0x88>)
 800a260:	21b5      	movs	r1, #181	; 0xb5
 800a262:	f001 f86f 	bl	800b344 <__assert_func>
 800a266:	6922      	ldr	r2, [r4, #16]
 800a268:	3202      	adds	r2, #2
 800a26a:	f104 010c 	add.w	r1, r4, #12
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	300c      	adds	r0, #12
 800a272:	f7ff ff5b 	bl	800a12c <memcpy>
 800a276:	4621      	mov	r1, r4
 800a278:	4638      	mov	r0, r7
 800a27a:	f7ff ffa5 	bl	800a1c8 <_Bfree>
 800a27e:	4644      	mov	r4, r8
 800a280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a284:	3501      	adds	r5, #1
 800a286:	615e      	str	r6, [r3, #20]
 800a288:	6125      	str	r5, [r4, #16]
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a290:	0800c5a0 	.word	0x0800c5a0
 800a294:	0800c690 	.word	0x0800c690

0800a298 <__s2b>:
 800a298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a29c:	460c      	mov	r4, r1
 800a29e:	4615      	mov	r5, r2
 800a2a0:	461f      	mov	r7, r3
 800a2a2:	2209      	movs	r2, #9
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	db09      	blt.n	800a2c8 <__s2b+0x30>
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	f7ff ff47 	bl	800a148 <_Balloc>
 800a2ba:	b940      	cbnz	r0, 800a2ce <__s2b+0x36>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	4b19      	ldr	r3, [pc, #100]	; (800a324 <__s2b+0x8c>)
 800a2c0:	4819      	ldr	r0, [pc, #100]	; (800a328 <__s2b+0x90>)
 800a2c2:	21ce      	movs	r1, #206	; 0xce
 800a2c4:	f001 f83e 	bl	800b344 <__assert_func>
 800a2c8:	0052      	lsls	r2, r2, #1
 800a2ca:	3101      	adds	r1, #1
 800a2cc:	e7f0      	b.n	800a2b0 <__s2b+0x18>
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	6143      	str	r3, [r0, #20]
 800a2d2:	2d09      	cmp	r5, #9
 800a2d4:	f04f 0301 	mov.w	r3, #1
 800a2d8:	6103      	str	r3, [r0, #16]
 800a2da:	dd16      	ble.n	800a30a <__s2b+0x72>
 800a2dc:	f104 0909 	add.w	r9, r4, #9
 800a2e0:	46c8      	mov	r8, r9
 800a2e2:	442c      	add	r4, r5
 800a2e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	3b30      	subs	r3, #48	; 0x30
 800a2ec:	220a      	movs	r2, #10
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f7ff ff8c 	bl	800a20c <__multadd>
 800a2f4:	45a0      	cmp	r8, r4
 800a2f6:	d1f5      	bne.n	800a2e4 <__s2b+0x4c>
 800a2f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a2fc:	444c      	add	r4, r9
 800a2fe:	1b2d      	subs	r5, r5, r4
 800a300:	1963      	adds	r3, r4, r5
 800a302:	42bb      	cmp	r3, r7
 800a304:	db04      	blt.n	800a310 <__s2b+0x78>
 800a306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a30a:	340a      	adds	r4, #10
 800a30c:	2509      	movs	r5, #9
 800a30e:	e7f6      	b.n	800a2fe <__s2b+0x66>
 800a310:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a314:	4601      	mov	r1, r0
 800a316:	3b30      	subs	r3, #48	; 0x30
 800a318:	220a      	movs	r2, #10
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ff76 	bl	800a20c <__multadd>
 800a320:	e7ee      	b.n	800a300 <__s2b+0x68>
 800a322:	bf00      	nop
 800a324:	0800c5a0 	.word	0x0800c5a0
 800a328:	0800c690 	.word	0x0800c690

0800a32c <__hi0bits>:
 800a32c:	0c03      	lsrs	r3, r0, #16
 800a32e:	041b      	lsls	r3, r3, #16
 800a330:	b9d3      	cbnz	r3, 800a368 <__hi0bits+0x3c>
 800a332:	0400      	lsls	r0, r0, #16
 800a334:	2310      	movs	r3, #16
 800a336:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a33a:	bf04      	itt	eq
 800a33c:	0200      	lsleq	r0, r0, #8
 800a33e:	3308      	addeq	r3, #8
 800a340:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a344:	bf04      	itt	eq
 800a346:	0100      	lsleq	r0, r0, #4
 800a348:	3304      	addeq	r3, #4
 800a34a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a34e:	bf04      	itt	eq
 800a350:	0080      	lsleq	r0, r0, #2
 800a352:	3302      	addeq	r3, #2
 800a354:	2800      	cmp	r0, #0
 800a356:	db05      	blt.n	800a364 <__hi0bits+0x38>
 800a358:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a35c:	f103 0301 	add.w	r3, r3, #1
 800a360:	bf08      	it	eq
 800a362:	2320      	moveq	r3, #32
 800a364:	4618      	mov	r0, r3
 800a366:	4770      	bx	lr
 800a368:	2300      	movs	r3, #0
 800a36a:	e7e4      	b.n	800a336 <__hi0bits+0xa>

0800a36c <__lo0bits>:
 800a36c:	6803      	ldr	r3, [r0, #0]
 800a36e:	f013 0207 	ands.w	r2, r3, #7
 800a372:	4601      	mov	r1, r0
 800a374:	d00b      	beq.n	800a38e <__lo0bits+0x22>
 800a376:	07da      	lsls	r2, r3, #31
 800a378:	d423      	bmi.n	800a3c2 <__lo0bits+0x56>
 800a37a:	0798      	lsls	r0, r3, #30
 800a37c:	bf49      	itett	mi
 800a37e:	085b      	lsrmi	r3, r3, #1
 800a380:	089b      	lsrpl	r3, r3, #2
 800a382:	2001      	movmi	r0, #1
 800a384:	600b      	strmi	r3, [r1, #0]
 800a386:	bf5c      	itt	pl
 800a388:	600b      	strpl	r3, [r1, #0]
 800a38a:	2002      	movpl	r0, #2
 800a38c:	4770      	bx	lr
 800a38e:	b298      	uxth	r0, r3
 800a390:	b9a8      	cbnz	r0, 800a3be <__lo0bits+0x52>
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	2010      	movs	r0, #16
 800a396:	b2da      	uxtb	r2, r3
 800a398:	b90a      	cbnz	r2, 800a39e <__lo0bits+0x32>
 800a39a:	3008      	adds	r0, #8
 800a39c:	0a1b      	lsrs	r3, r3, #8
 800a39e:	071a      	lsls	r2, r3, #28
 800a3a0:	bf04      	itt	eq
 800a3a2:	091b      	lsreq	r3, r3, #4
 800a3a4:	3004      	addeq	r0, #4
 800a3a6:	079a      	lsls	r2, r3, #30
 800a3a8:	bf04      	itt	eq
 800a3aa:	089b      	lsreq	r3, r3, #2
 800a3ac:	3002      	addeq	r0, #2
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d403      	bmi.n	800a3ba <__lo0bits+0x4e>
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	f100 0001 	add.w	r0, r0, #1
 800a3b8:	d005      	beq.n	800a3c6 <__lo0bits+0x5a>
 800a3ba:	600b      	str	r3, [r1, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	4610      	mov	r0, r2
 800a3c0:	e7e9      	b.n	800a396 <__lo0bits+0x2a>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	4770      	bx	lr
 800a3c6:	2020      	movs	r0, #32
 800a3c8:	4770      	bx	lr
	...

0800a3cc <__i2b>:
 800a3cc:	b510      	push	{r4, lr}
 800a3ce:	460c      	mov	r4, r1
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	f7ff feb9 	bl	800a148 <_Balloc>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	b928      	cbnz	r0, 800a3e6 <__i2b+0x1a>
 800a3da:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <__i2b+0x24>)
 800a3dc:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <__i2b+0x28>)
 800a3de:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a3e2:	f000 ffaf 	bl	800b344 <__assert_func>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	6144      	str	r4, [r0, #20]
 800a3ea:	6103      	str	r3, [r0, #16]
 800a3ec:	bd10      	pop	{r4, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0800c5a0 	.word	0x0800c5a0
 800a3f4:	0800c690 	.word	0x0800c690

0800a3f8 <__multiply>:
 800a3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3fc:	4691      	mov	r9, r2
 800a3fe:	690a      	ldr	r2, [r1, #16]
 800a400:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a404:	429a      	cmp	r2, r3
 800a406:	bfb8      	it	lt
 800a408:	460b      	movlt	r3, r1
 800a40a:	460c      	mov	r4, r1
 800a40c:	bfbc      	itt	lt
 800a40e:	464c      	movlt	r4, r9
 800a410:	4699      	movlt	r9, r3
 800a412:	6927      	ldr	r7, [r4, #16]
 800a414:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	6861      	ldr	r1, [r4, #4]
 800a41c:	eb07 060a 	add.w	r6, r7, sl
 800a420:	42b3      	cmp	r3, r6
 800a422:	b085      	sub	sp, #20
 800a424:	bfb8      	it	lt
 800a426:	3101      	addlt	r1, #1
 800a428:	f7ff fe8e 	bl	800a148 <_Balloc>
 800a42c:	b930      	cbnz	r0, 800a43c <__multiply+0x44>
 800a42e:	4602      	mov	r2, r0
 800a430:	4b44      	ldr	r3, [pc, #272]	; (800a544 <__multiply+0x14c>)
 800a432:	4845      	ldr	r0, [pc, #276]	; (800a548 <__multiply+0x150>)
 800a434:	f240 115d 	movw	r1, #349	; 0x15d
 800a438:	f000 ff84 	bl	800b344 <__assert_func>
 800a43c:	f100 0514 	add.w	r5, r0, #20
 800a440:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a444:	462b      	mov	r3, r5
 800a446:	2200      	movs	r2, #0
 800a448:	4543      	cmp	r3, r8
 800a44a:	d321      	bcc.n	800a490 <__multiply+0x98>
 800a44c:	f104 0314 	add.w	r3, r4, #20
 800a450:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a454:	f109 0314 	add.w	r3, r9, #20
 800a458:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a45c:	9202      	str	r2, [sp, #8]
 800a45e:	1b3a      	subs	r2, r7, r4
 800a460:	3a15      	subs	r2, #21
 800a462:	f022 0203 	bic.w	r2, r2, #3
 800a466:	3204      	adds	r2, #4
 800a468:	f104 0115 	add.w	r1, r4, #21
 800a46c:	428f      	cmp	r7, r1
 800a46e:	bf38      	it	cc
 800a470:	2204      	movcc	r2, #4
 800a472:	9201      	str	r2, [sp, #4]
 800a474:	9a02      	ldr	r2, [sp, #8]
 800a476:	9303      	str	r3, [sp, #12]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d80c      	bhi.n	800a496 <__multiply+0x9e>
 800a47c:	2e00      	cmp	r6, #0
 800a47e:	dd03      	ble.n	800a488 <__multiply+0x90>
 800a480:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a484:	2b00      	cmp	r3, #0
 800a486:	d05a      	beq.n	800a53e <__multiply+0x146>
 800a488:	6106      	str	r6, [r0, #16]
 800a48a:	b005      	add	sp, #20
 800a48c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a490:	f843 2b04 	str.w	r2, [r3], #4
 800a494:	e7d8      	b.n	800a448 <__multiply+0x50>
 800a496:	f8b3 a000 	ldrh.w	sl, [r3]
 800a49a:	f1ba 0f00 	cmp.w	sl, #0
 800a49e:	d024      	beq.n	800a4ea <__multiply+0xf2>
 800a4a0:	f104 0e14 	add.w	lr, r4, #20
 800a4a4:	46a9      	mov	r9, r5
 800a4a6:	f04f 0c00 	mov.w	ip, #0
 800a4aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a4ae:	f8d9 1000 	ldr.w	r1, [r9]
 800a4b2:	fa1f fb82 	uxth.w	fp, r2
 800a4b6:	b289      	uxth	r1, r1
 800a4b8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a4c4:	4461      	add	r1, ip
 800a4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ca:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4d2:	b289      	uxth	r1, r1
 800a4d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4d8:	4577      	cmp	r7, lr
 800a4da:	f849 1b04 	str.w	r1, [r9], #4
 800a4de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4e2:	d8e2      	bhi.n	800a4aa <__multiply+0xb2>
 800a4e4:	9a01      	ldr	r2, [sp, #4]
 800a4e6:	f845 c002 	str.w	ip, [r5, r2]
 800a4ea:	9a03      	ldr	r2, [sp, #12]
 800a4ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4f0:	3304      	adds	r3, #4
 800a4f2:	f1b9 0f00 	cmp.w	r9, #0
 800a4f6:	d020      	beq.n	800a53a <__multiply+0x142>
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	f104 0c14 	add.w	ip, r4, #20
 800a4fe:	46ae      	mov	lr, r5
 800a500:	f04f 0a00 	mov.w	sl, #0
 800a504:	f8bc b000 	ldrh.w	fp, [ip]
 800a508:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a50c:	fb09 220b 	mla	r2, r9, fp, r2
 800a510:	4492      	add	sl, r2
 800a512:	b289      	uxth	r1, r1
 800a514:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a518:	f84e 1b04 	str.w	r1, [lr], #4
 800a51c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a520:	f8be 1000 	ldrh.w	r1, [lr]
 800a524:	0c12      	lsrs	r2, r2, #16
 800a526:	fb09 1102 	mla	r1, r9, r2, r1
 800a52a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a52e:	4567      	cmp	r7, ip
 800a530:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a534:	d8e6      	bhi.n	800a504 <__multiply+0x10c>
 800a536:	9a01      	ldr	r2, [sp, #4]
 800a538:	50a9      	str	r1, [r5, r2]
 800a53a:	3504      	adds	r5, #4
 800a53c:	e79a      	b.n	800a474 <__multiply+0x7c>
 800a53e:	3e01      	subs	r6, #1
 800a540:	e79c      	b.n	800a47c <__multiply+0x84>
 800a542:	bf00      	nop
 800a544:	0800c5a0 	.word	0x0800c5a0
 800a548:	0800c690 	.word	0x0800c690

0800a54c <__pow5mult>:
 800a54c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a550:	4615      	mov	r5, r2
 800a552:	f012 0203 	ands.w	r2, r2, #3
 800a556:	4606      	mov	r6, r0
 800a558:	460f      	mov	r7, r1
 800a55a:	d007      	beq.n	800a56c <__pow5mult+0x20>
 800a55c:	4c25      	ldr	r4, [pc, #148]	; (800a5f4 <__pow5mult+0xa8>)
 800a55e:	3a01      	subs	r2, #1
 800a560:	2300      	movs	r3, #0
 800a562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a566:	f7ff fe51 	bl	800a20c <__multadd>
 800a56a:	4607      	mov	r7, r0
 800a56c:	10ad      	asrs	r5, r5, #2
 800a56e:	d03d      	beq.n	800a5ec <__pow5mult+0xa0>
 800a570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a572:	b97c      	cbnz	r4, 800a594 <__pow5mult+0x48>
 800a574:	2010      	movs	r0, #16
 800a576:	f7ff fdbf 	bl	800a0f8 <malloc>
 800a57a:	4602      	mov	r2, r0
 800a57c:	6270      	str	r0, [r6, #36]	; 0x24
 800a57e:	b928      	cbnz	r0, 800a58c <__pow5mult+0x40>
 800a580:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <__pow5mult+0xac>)
 800a582:	481e      	ldr	r0, [pc, #120]	; (800a5fc <__pow5mult+0xb0>)
 800a584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a588:	f000 fedc 	bl	800b344 <__assert_func>
 800a58c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a590:	6004      	str	r4, [r0, #0]
 800a592:	60c4      	str	r4, [r0, #12]
 800a594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a59c:	b94c      	cbnz	r4, 800a5b2 <__pow5mult+0x66>
 800a59e:	f240 2171 	movw	r1, #625	; 0x271
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ff12 	bl	800a3cc <__i2b>
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	f8c8 0008 	str.w	r0, [r8, #8]
 800a5ae:	4604      	mov	r4, r0
 800a5b0:	6003      	str	r3, [r0, #0]
 800a5b2:	f04f 0900 	mov.w	r9, #0
 800a5b6:	07eb      	lsls	r3, r5, #31
 800a5b8:	d50a      	bpl.n	800a5d0 <__pow5mult+0x84>
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	4622      	mov	r2, r4
 800a5be:	4630      	mov	r0, r6
 800a5c0:	f7ff ff1a 	bl	800a3f8 <__multiply>
 800a5c4:	4639      	mov	r1, r7
 800a5c6:	4680      	mov	r8, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f7ff fdfd 	bl	800a1c8 <_Bfree>
 800a5ce:	4647      	mov	r7, r8
 800a5d0:	106d      	asrs	r5, r5, #1
 800a5d2:	d00b      	beq.n	800a5ec <__pow5mult+0xa0>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	b938      	cbnz	r0, 800a5e8 <__pow5mult+0x9c>
 800a5d8:	4622      	mov	r2, r4
 800a5da:	4621      	mov	r1, r4
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7ff ff0b 	bl	800a3f8 <__multiply>
 800a5e2:	6020      	str	r0, [r4, #0]
 800a5e4:	f8c0 9000 	str.w	r9, [r0]
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	e7e4      	b.n	800a5b6 <__pow5mult+0x6a>
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5f2:	bf00      	nop
 800a5f4:	0800c7e0 	.word	0x0800c7e0
 800a5f8:	0800c52e 	.word	0x0800c52e
 800a5fc:	0800c690 	.word	0x0800c690

0800a600 <__lshift>:
 800a600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a604:	460c      	mov	r4, r1
 800a606:	6849      	ldr	r1, [r1, #4]
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a60e:	68a3      	ldr	r3, [r4, #8]
 800a610:	4607      	mov	r7, r0
 800a612:	4691      	mov	r9, r2
 800a614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a618:	f108 0601 	add.w	r6, r8, #1
 800a61c:	42b3      	cmp	r3, r6
 800a61e:	db0b      	blt.n	800a638 <__lshift+0x38>
 800a620:	4638      	mov	r0, r7
 800a622:	f7ff fd91 	bl	800a148 <_Balloc>
 800a626:	4605      	mov	r5, r0
 800a628:	b948      	cbnz	r0, 800a63e <__lshift+0x3e>
 800a62a:	4602      	mov	r2, r0
 800a62c:	4b2a      	ldr	r3, [pc, #168]	; (800a6d8 <__lshift+0xd8>)
 800a62e:	482b      	ldr	r0, [pc, #172]	; (800a6dc <__lshift+0xdc>)
 800a630:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a634:	f000 fe86 	bl	800b344 <__assert_func>
 800a638:	3101      	adds	r1, #1
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	e7ee      	b.n	800a61c <__lshift+0x1c>
 800a63e:	2300      	movs	r3, #0
 800a640:	f100 0114 	add.w	r1, r0, #20
 800a644:	f100 0210 	add.w	r2, r0, #16
 800a648:	4618      	mov	r0, r3
 800a64a:	4553      	cmp	r3, sl
 800a64c:	db37      	blt.n	800a6be <__lshift+0xbe>
 800a64e:	6920      	ldr	r0, [r4, #16]
 800a650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a654:	f104 0314 	add.w	r3, r4, #20
 800a658:	f019 091f 	ands.w	r9, r9, #31
 800a65c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a664:	d02f      	beq.n	800a6c6 <__lshift+0xc6>
 800a666:	f1c9 0e20 	rsb	lr, r9, #32
 800a66a:	468a      	mov	sl, r1
 800a66c:	f04f 0c00 	mov.w	ip, #0
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	fa02 f209 	lsl.w	r2, r2, r9
 800a676:	ea42 020c 	orr.w	r2, r2, ip
 800a67a:	f84a 2b04 	str.w	r2, [sl], #4
 800a67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a682:	4298      	cmp	r0, r3
 800a684:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a688:	d8f2      	bhi.n	800a670 <__lshift+0x70>
 800a68a:	1b03      	subs	r3, r0, r4
 800a68c:	3b15      	subs	r3, #21
 800a68e:	f023 0303 	bic.w	r3, r3, #3
 800a692:	3304      	adds	r3, #4
 800a694:	f104 0215 	add.w	r2, r4, #21
 800a698:	4290      	cmp	r0, r2
 800a69a:	bf38      	it	cc
 800a69c:	2304      	movcc	r3, #4
 800a69e:	f841 c003 	str.w	ip, [r1, r3]
 800a6a2:	f1bc 0f00 	cmp.w	ip, #0
 800a6a6:	d001      	beq.n	800a6ac <__lshift+0xac>
 800a6a8:	f108 0602 	add.w	r6, r8, #2
 800a6ac:	3e01      	subs	r6, #1
 800a6ae:	4638      	mov	r0, r7
 800a6b0:	612e      	str	r6, [r5, #16]
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	f7ff fd88 	bl	800a1c8 <_Bfree>
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	e7c1      	b.n	800a64a <__lshift+0x4a>
 800a6c6:	3904      	subs	r1, #4
 800a6c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6cc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6d0:	4298      	cmp	r0, r3
 800a6d2:	d8f9      	bhi.n	800a6c8 <__lshift+0xc8>
 800a6d4:	e7ea      	b.n	800a6ac <__lshift+0xac>
 800a6d6:	bf00      	nop
 800a6d8:	0800c5a0 	.word	0x0800c5a0
 800a6dc:	0800c690 	.word	0x0800c690

0800a6e0 <__mcmp>:
 800a6e0:	b530      	push	{r4, r5, lr}
 800a6e2:	6902      	ldr	r2, [r0, #16]
 800a6e4:	690c      	ldr	r4, [r1, #16]
 800a6e6:	1b12      	subs	r2, r2, r4
 800a6e8:	d10e      	bne.n	800a708 <__mcmp+0x28>
 800a6ea:	f100 0314 	add.w	r3, r0, #20
 800a6ee:	3114      	adds	r1, #20
 800a6f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a700:	42a5      	cmp	r5, r4
 800a702:	d003      	beq.n	800a70c <__mcmp+0x2c>
 800a704:	d305      	bcc.n	800a712 <__mcmp+0x32>
 800a706:	2201      	movs	r2, #1
 800a708:	4610      	mov	r0, r2
 800a70a:	bd30      	pop	{r4, r5, pc}
 800a70c:	4283      	cmp	r3, r0
 800a70e:	d3f3      	bcc.n	800a6f8 <__mcmp+0x18>
 800a710:	e7fa      	b.n	800a708 <__mcmp+0x28>
 800a712:	f04f 32ff 	mov.w	r2, #4294967295
 800a716:	e7f7      	b.n	800a708 <__mcmp+0x28>

0800a718 <__mdiff>:
 800a718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	460c      	mov	r4, r1
 800a71e:	4606      	mov	r6, r0
 800a720:	4611      	mov	r1, r2
 800a722:	4620      	mov	r0, r4
 800a724:	4690      	mov	r8, r2
 800a726:	f7ff ffdb 	bl	800a6e0 <__mcmp>
 800a72a:	1e05      	subs	r5, r0, #0
 800a72c:	d110      	bne.n	800a750 <__mdiff+0x38>
 800a72e:	4629      	mov	r1, r5
 800a730:	4630      	mov	r0, r6
 800a732:	f7ff fd09 	bl	800a148 <_Balloc>
 800a736:	b930      	cbnz	r0, 800a746 <__mdiff+0x2e>
 800a738:	4b3a      	ldr	r3, [pc, #232]	; (800a824 <__mdiff+0x10c>)
 800a73a:	4602      	mov	r2, r0
 800a73c:	f240 2132 	movw	r1, #562	; 0x232
 800a740:	4839      	ldr	r0, [pc, #228]	; (800a828 <__mdiff+0x110>)
 800a742:	f000 fdff 	bl	800b344 <__assert_func>
 800a746:	2301      	movs	r3, #1
 800a748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a74c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	bfa4      	itt	ge
 800a752:	4643      	movge	r3, r8
 800a754:	46a0      	movge	r8, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a75c:	bfa6      	itte	ge
 800a75e:	461c      	movge	r4, r3
 800a760:	2500      	movge	r5, #0
 800a762:	2501      	movlt	r5, #1
 800a764:	f7ff fcf0 	bl	800a148 <_Balloc>
 800a768:	b920      	cbnz	r0, 800a774 <__mdiff+0x5c>
 800a76a:	4b2e      	ldr	r3, [pc, #184]	; (800a824 <__mdiff+0x10c>)
 800a76c:	4602      	mov	r2, r0
 800a76e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a772:	e7e5      	b.n	800a740 <__mdiff+0x28>
 800a774:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a778:	6926      	ldr	r6, [r4, #16]
 800a77a:	60c5      	str	r5, [r0, #12]
 800a77c:	f104 0914 	add.w	r9, r4, #20
 800a780:	f108 0514 	add.w	r5, r8, #20
 800a784:	f100 0e14 	add.w	lr, r0, #20
 800a788:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a78c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a790:	f108 0210 	add.w	r2, r8, #16
 800a794:	46f2      	mov	sl, lr
 800a796:	2100      	movs	r1, #0
 800a798:	f859 3b04 	ldr.w	r3, [r9], #4
 800a79c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a7a0:	fa1f f883 	uxth.w	r8, r3
 800a7a4:	fa11 f18b 	uxtah	r1, r1, fp
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	eba1 0808 	sub.w	r8, r1, r8
 800a7ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a7b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a7b6:	fa1f f888 	uxth.w	r8, r8
 800a7ba:	1419      	asrs	r1, r3, #16
 800a7bc:	454e      	cmp	r6, r9
 800a7be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7c2:	f84a 3b04 	str.w	r3, [sl], #4
 800a7c6:	d8e7      	bhi.n	800a798 <__mdiff+0x80>
 800a7c8:	1b33      	subs	r3, r6, r4
 800a7ca:	3b15      	subs	r3, #21
 800a7cc:	f023 0303 	bic.w	r3, r3, #3
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	3415      	adds	r4, #21
 800a7d4:	42a6      	cmp	r6, r4
 800a7d6:	bf38      	it	cc
 800a7d8:	2304      	movcc	r3, #4
 800a7da:	441d      	add	r5, r3
 800a7dc:	4473      	add	r3, lr
 800a7de:	469e      	mov	lr, r3
 800a7e0:	462e      	mov	r6, r5
 800a7e2:	4566      	cmp	r6, ip
 800a7e4:	d30e      	bcc.n	800a804 <__mdiff+0xec>
 800a7e6:	f10c 0203 	add.w	r2, ip, #3
 800a7ea:	1b52      	subs	r2, r2, r5
 800a7ec:	f022 0203 	bic.w	r2, r2, #3
 800a7f0:	3d03      	subs	r5, #3
 800a7f2:	45ac      	cmp	ip, r5
 800a7f4:	bf38      	it	cc
 800a7f6:	2200      	movcc	r2, #0
 800a7f8:	441a      	add	r2, r3
 800a7fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7fe:	b17b      	cbz	r3, 800a820 <__mdiff+0x108>
 800a800:	6107      	str	r7, [r0, #16]
 800a802:	e7a3      	b.n	800a74c <__mdiff+0x34>
 800a804:	f856 8b04 	ldr.w	r8, [r6], #4
 800a808:	fa11 f288 	uxtah	r2, r1, r8
 800a80c:	1414      	asrs	r4, r2, #16
 800a80e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a812:	b292      	uxth	r2, r2
 800a814:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a818:	f84e 2b04 	str.w	r2, [lr], #4
 800a81c:	1421      	asrs	r1, r4, #16
 800a81e:	e7e0      	b.n	800a7e2 <__mdiff+0xca>
 800a820:	3f01      	subs	r7, #1
 800a822:	e7ea      	b.n	800a7fa <__mdiff+0xe2>
 800a824:	0800c5a0 	.word	0x0800c5a0
 800a828:	0800c690 	.word	0x0800c690

0800a82c <__ulp>:
 800a82c:	b082      	sub	sp, #8
 800a82e:	ed8d 0b00 	vstr	d0, [sp]
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	4912      	ldr	r1, [pc, #72]	; (800a880 <__ulp+0x54>)
 800a836:	4019      	ands	r1, r3
 800a838:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a83c:	2900      	cmp	r1, #0
 800a83e:	dd05      	ble.n	800a84c <__ulp+0x20>
 800a840:	2200      	movs	r2, #0
 800a842:	460b      	mov	r3, r1
 800a844:	ec43 2b10 	vmov	d0, r2, r3
 800a848:	b002      	add	sp, #8
 800a84a:	4770      	bx	lr
 800a84c:	4249      	negs	r1, r1
 800a84e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a852:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a856:	f04f 0200 	mov.w	r2, #0
 800a85a:	f04f 0300 	mov.w	r3, #0
 800a85e:	da04      	bge.n	800a86a <__ulp+0x3e>
 800a860:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a864:	fa41 f300 	asr.w	r3, r1, r0
 800a868:	e7ec      	b.n	800a844 <__ulp+0x18>
 800a86a:	f1a0 0114 	sub.w	r1, r0, #20
 800a86e:	291e      	cmp	r1, #30
 800a870:	bfda      	itte	le
 800a872:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a876:	fa20 f101 	lsrle.w	r1, r0, r1
 800a87a:	2101      	movgt	r1, #1
 800a87c:	460a      	mov	r2, r1
 800a87e:	e7e1      	b.n	800a844 <__ulp+0x18>
 800a880:	7ff00000 	.word	0x7ff00000

0800a884 <__b2d>:
 800a884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a886:	6905      	ldr	r5, [r0, #16]
 800a888:	f100 0714 	add.w	r7, r0, #20
 800a88c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a890:	1f2e      	subs	r6, r5, #4
 800a892:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a896:	4620      	mov	r0, r4
 800a898:	f7ff fd48 	bl	800a32c <__hi0bits>
 800a89c:	f1c0 0320 	rsb	r3, r0, #32
 800a8a0:	280a      	cmp	r0, #10
 800a8a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a920 <__b2d+0x9c>
 800a8a6:	600b      	str	r3, [r1, #0]
 800a8a8:	dc14      	bgt.n	800a8d4 <__b2d+0x50>
 800a8aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a8ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800a8b2:	42b7      	cmp	r7, r6
 800a8b4:	ea41 030c 	orr.w	r3, r1, ip
 800a8b8:	bf34      	ite	cc
 800a8ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8be:	2100      	movcs	r1, #0
 800a8c0:	3015      	adds	r0, #21
 800a8c2:	fa04 f000 	lsl.w	r0, r4, r0
 800a8c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800a8ca:	ea40 0201 	orr.w	r2, r0, r1
 800a8ce:	ec43 2b10 	vmov	d0, r2, r3
 800a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8d4:	42b7      	cmp	r7, r6
 800a8d6:	bf3a      	itte	cc
 800a8d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a8dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800a8e0:	2100      	movcs	r1, #0
 800a8e2:	380b      	subs	r0, #11
 800a8e4:	d017      	beq.n	800a916 <__b2d+0x92>
 800a8e6:	f1c0 0c20 	rsb	ip, r0, #32
 800a8ea:	fa04 f500 	lsl.w	r5, r4, r0
 800a8ee:	42be      	cmp	r6, r7
 800a8f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800a8f4:	ea45 0504 	orr.w	r5, r5, r4
 800a8f8:	bf8c      	ite	hi
 800a8fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a8fe:	2400      	movls	r4, #0
 800a900:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a904:	fa01 f000 	lsl.w	r0, r1, r0
 800a908:	fa24 f40c 	lsr.w	r4, r4, ip
 800a90c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a910:	ea40 0204 	orr.w	r2, r0, r4
 800a914:	e7db      	b.n	800a8ce <__b2d+0x4a>
 800a916:	ea44 030c 	orr.w	r3, r4, ip
 800a91a:	460a      	mov	r2, r1
 800a91c:	e7d7      	b.n	800a8ce <__b2d+0x4a>
 800a91e:	bf00      	nop
 800a920:	3ff00000 	.word	0x3ff00000

0800a924 <__d2b>:
 800a924:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a928:	4689      	mov	r9, r1
 800a92a:	2101      	movs	r1, #1
 800a92c:	ec57 6b10 	vmov	r6, r7, d0
 800a930:	4690      	mov	r8, r2
 800a932:	f7ff fc09 	bl	800a148 <_Balloc>
 800a936:	4604      	mov	r4, r0
 800a938:	b930      	cbnz	r0, 800a948 <__d2b+0x24>
 800a93a:	4602      	mov	r2, r0
 800a93c:	4b25      	ldr	r3, [pc, #148]	; (800a9d4 <__d2b+0xb0>)
 800a93e:	4826      	ldr	r0, [pc, #152]	; (800a9d8 <__d2b+0xb4>)
 800a940:	f240 310a 	movw	r1, #778	; 0x30a
 800a944:	f000 fcfe 	bl	800b344 <__assert_func>
 800a948:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a94c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a950:	bb35      	cbnz	r5, 800a9a0 <__d2b+0x7c>
 800a952:	2e00      	cmp	r6, #0
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	d028      	beq.n	800a9aa <__d2b+0x86>
 800a958:	4668      	mov	r0, sp
 800a95a:	9600      	str	r6, [sp, #0]
 800a95c:	f7ff fd06 	bl	800a36c <__lo0bits>
 800a960:	9900      	ldr	r1, [sp, #0]
 800a962:	b300      	cbz	r0, 800a9a6 <__d2b+0x82>
 800a964:	9a01      	ldr	r2, [sp, #4]
 800a966:	f1c0 0320 	rsb	r3, r0, #32
 800a96a:	fa02 f303 	lsl.w	r3, r2, r3
 800a96e:	430b      	orrs	r3, r1
 800a970:	40c2      	lsrs	r2, r0
 800a972:	6163      	str	r3, [r4, #20]
 800a974:	9201      	str	r2, [sp, #4]
 800a976:	9b01      	ldr	r3, [sp, #4]
 800a978:	61a3      	str	r3, [r4, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	bf14      	ite	ne
 800a97e:	2202      	movne	r2, #2
 800a980:	2201      	moveq	r2, #1
 800a982:	6122      	str	r2, [r4, #16]
 800a984:	b1d5      	cbz	r5, 800a9bc <__d2b+0x98>
 800a986:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a98a:	4405      	add	r5, r0
 800a98c:	f8c9 5000 	str.w	r5, [r9]
 800a990:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a994:	f8c8 0000 	str.w	r0, [r8]
 800a998:	4620      	mov	r0, r4
 800a99a:	b003      	add	sp, #12
 800a99c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a9a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a9a4:	e7d5      	b.n	800a952 <__d2b+0x2e>
 800a9a6:	6161      	str	r1, [r4, #20]
 800a9a8:	e7e5      	b.n	800a976 <__d2b+0x52>
 800a9aa:	a801      	add	r0, sp, #4
 800a9ac:	f7ff fcde 	bl	800a36c <__lo0bits>
 800a9b0:	9b01      	ldr	r3, [sp, #4]
 800a9b2:	6163      	str	r3, [r4, #20]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	6122      	str	r2, [r4, #16]
 800a9b8:	3020      	adds	r0, #32
 800a9ba:	e7e3      	b.n	800a984 <__d2b+0x60>
 800a9bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a9c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a9c4:	f8c9 0000 	str.w	r0, [r9]
 800a9c8:	6918      	ldr	r0, [r3, #16]
 800a9ca:	f7ff fcaf 	bl	800a32c <__hi0bits>
 800a9ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a9d2:	e7df      	b.n	800a994 <__d2b+0x70>
 800a9d4:	0800c5a0 	.word	0x0800c5a0
 800a9d8:	0800c690 	.word	0x0800c690

0800a9dc <__ratio>:
 800a9dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e0:	4688      	mov	r8, r1
 800a9e2:	4669      	mov	r1, sp
 800a9e4:	4681      	mov	r9, r0
 800a9e6:	f7ff ff4d 	bl	800a884 <__b2d>
 800a9ea:	a901      	add	r1, sp, #4
 800a9ec:	4640      	mov	r0, r8
 800a9ee:	ec55 4b10 	vmov	r4, r5, d0
 800a9f2:	f7ff ff47 	bl	800a884 <__b2d>
 800a9f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a9fe:	eba3 0c02 	sub.w	ip, r3, r2
 800aa02:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa06:	1a9b      	subs	r3, r3, r2
 800aa08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aa0c:	ec51 0b10 	vmov	r0, r1, d0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	bfd6      	itet	le
 800aa14:	460a      	movle	r2, r1
 800aa16:	462a      	movgt	r2, r5
 800aa18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa1c:	468b      	mov	fp, r1
 800aa1e:	462f      	mov	r7, r5
 800aa20:	bfd4      	ite	le
 800aa22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aa26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	ee10 2a10 	vmov	r2, s0
 800aa30:	465b      	mov	r3, fp
 800aa32:	4639      	mov	r1, r7
 800aa34:	f7f5 ff0a 	bl	800084c <__aeabi_ddiv>
 800aa38:	ec41 0b10 	vmov	d0, r0, r1
 800aa3c:	b003      	add	sp, #12
 800aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa42 <__copybits>:
 800aa42:	3901      	subs	r1, #1
 800aa44:	b570      	push	{r4, r5, r6, lr}
 800aa46:	1149      	asrs	r1, r1, #5
 800aa48:	6914      	ldr	r4, [r2, #16]
 800aa4a:	3101      	adds	r1, #1
 800aa4c:	f102 0314 	add.w	r3, r2, #20
 800aa50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa58:	1f05      	subs	r5, r0, #4
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	d30c      	bcc.n	800aa78 <__copybits+0x36>
 800aa5e:	1aa3      	subs	r3, r4, r2
 800aa60:	3b11      	subs	r3, #17
 800aa62:	f023 0303 	bic.w	r3, r3, #3
 800aa66:	3211      	adds	r2, #17
 800aa68:	42a2      	cmp	r2, r4
 800aa6a:	bf88      	it	hi
 800aa6c:	2300      	movhi	r3, #0
 800aa6e:	4418      	add	r0, r3
 800aa70:	2300      	movs	r3, #0
 800aa72:	4288      	cmp	r0, r1
 800aa74:	d305      	bcc.n	800aa82 <__copybits+0x40>
 800aa76:	bd70      	pop	{r4, r5, r6, pc}
 800aa78:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa7c:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa80:	e7eb      	b.n	800aa5a <__copybits+0x18>
 800aa82:	f840 3b04 	str.w	r3, [r0], #4
 800aa86:	e7f4      	b.n	800aa72 <__copybits+0x30>

0800aa88 <__any_on>:
 800aa88:	f100 0214 	add.w	r2, r0, #20
 800aa8c:	6900      	ldr	r0, [r0, #16]
 800aa8e:	114b      	asrs	r3, r1, #5
 800aa90:	4298      	cmp	r0, r3
 800aa92:	b510      	push	{r4, lr}
 800aa94:	db11      	blt.n	800aaba <__any_on+0x32>
 800aa96:	dd0a      	ble.n	800aaae <__any_on+0x26>
 800aa98:	f011 011f 	ands.w	r1, r1, #31
 800aa9c:	d007      	beq.n	800aaae <__any_on+0x26>
 800aa9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaa2:	fa24 f001 	lsr.w	r0, r4, r1
 800aaa6:	fa00 f101 	lsl.w	r1, r0, r1
 800aaaa:	428c      	cmp	r4, r1
 800aaac:	d10b      	bne.n	800aac6 <__any_on+0x3e>
 800aaae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d803      	bhi.n	800aabe <__any_on+0x36>
 800aab6:	2000      	movs	r0, #0
 800aab8:	bd10      	pop	{r4, pc}
 800aaba:	4603      	mov	r3, r0
 800aabc:	e7f7      	b.n	800aaae <__any_on+0x26>
 800aabe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aac2:	2900      	cmp	r1, #0
 800aac4:	d0f5      	beq.n	800aab2 <__any_on+0x2a>
 800aac6:	2001      	movs	r0, #1
 800aac8:	e7f6      	b.n	800aab8 <__any_on+0x30>

0800aaca <_calloc_r>:
 800aaca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aacc:	fba1 2402 	umull	r2, r4, r1, r2
 800aad0:	b94c      	cbnz	r4, 800aae6 <_calloc_r+0x1c>
 800aad2:	4611      	mov	r1, r2
 800aad4:	9201      	str	r2, [sp, #4]
 800aad6:	f000 f87b 	bl	800abd0 <_malloc_r>
 800aada:	9a01      	ldr	r2, [sp, #4]
 800aadc:	4605      	mov	r5, r0
 800aade:	b930      	cbnz	r0, 800aaee <_calloc_r+0x24>
 800aae0:	4628      	mov	r0, r5
 800aae2:	b003      	add	sp, #12
 800aae4:	bd30      	pop	{r4, r5, pc}
 800aae6:	220c      	movs	r2, #12
 800aae8:	6002      	str	r2, [r0, #0]
 800aaea:	2500      	movs	r5, #0
 800aaec:	e7f8      	b.n	800aae0 <_calloc_r+0x16>
 800aaee:	4621      	mov	r1, r4
 800aaf0:	f7fc f846 	bl	8006b80 <memset>
 800aaf4:	e7f4      	b.n	800aae0 <_calloc_r+0x16>
	...

0800aaf8 <_free_r>:
 800aaf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aafa:	2900      	cmp	r1, #0
 800aafc:	d044      	beq.n	800ab88 <_free_r+0x90>
 800aafe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab02:	9001      	str	r0, [sp, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f1a1 0404 	sub.w	r4, r1, #4
 800ab0a:	bfb8      	it	lt
 800ab0c:	18e4      	addlt	r4, r4, r3
 800ab0e:	f000 fca7 	bl	800b460 <__malloc_lock>
 800ab12:	4a1e      	ldr	r2, [pc, #120]	; (800ab8c <_free_r+0x94>)
 800ab14:	9801      	ldr	r0, [sp, #4]
 800ab16:	6813      	ldr	r3, [r2, #0]
 800ab18:	b933      	cbnz	r3, 800ab28 <_free_r+0x30>
 800ab1a:	6063      	str	r3, [r4, #4]
 800ab1c:	6014      	str	r4, [r2, #0]
 800ab1e:	b003      	add	sp, #12
 800ab20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab24:	f000 bca2 	b.w	800b46c <__malloc_unlock>
 800ab28:	42a3      	cmp	r3, r4
 800ab2a:	d908      	bls.n	800ab3e <_free_r+0x46>
 800ab2c:	6825      	ldr	r5, [r4, #0]
 800ab2e:	1961      	adds	r1, r4, r5
 800ab30:	428b      	cmp	r3, r1
 800ab32:	bf01      	itttt	eq
 800ab34:	6819      	ldreq	r1, [r3, #0]
 800ab36:	685b      	ldreq	r3, [r3, #4]
 800ab38:	1949      	addeq	r1, r1, r5
 800ab3a:	6021      	streq	r1, [r4, #0]
 800ab3c:	e7ed      	b.n	800ab1a <_free_r+0x22>
 800ab3e:	461a      	mov	r2, r3
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	b10b      	cbz	r3, 800ab48 <_free_r+0x50>
 800ab44:	42a3      	cmp	r3, r4
 800ab46:	d9fa      	bls.n	800ab3e <_free_r+0x46>
 800ab48:	6811      	ldr	r1, [r2, #0]
 800ab4a:	1855      	adds	r5, r2, r1
 800ab4c:	42a5      	cmp	r5, r4
 800ab4e:	d10b      	bne.n	800ab68 <_free_r+0x70>
 800ab50:	6824      	ldr	r4, [r4, #0]
 800ab52:	4421      	add	r1, r4
 800ab54:	1854      	adds	r4, r2, r1
 800ab56:	42a3      	cmp	r3, r4
 800ab58:	6011      	str	r1, [r2, #0]
 800ab5a:	d1e0      	bne.n	800ab1e <_free_r+0x26>
 800ab5c:	681c      	ldr	r4, [r3, #0]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	6053      	str	r3, [r2, #4]
 800ab62:	4421      	add	r1, r4
 800ab64:	6011      	str	r1, [r2, #0]
 800ab66:	e7da      	b.n	800ab1e <_free_r+0x26>
 800ab68:	d902      	bls.n	800ab70 <_free_r+0x78>
 800ab6a:	230c      	movs	r3, #12
 800ab6c:	6003      	str	r3, [r0, #0]
 800ab6e:	e7d6      	b.n	800ab1e <_free_r+0x26>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	1961      	adds	r1, r4, r5
 800ab74:	428b      	cmp	r3, r1
 800ab76:	bf04      	itt	eq
 800ab78:	6819      	ldreq	r1, [r3, #0]
 800ab7a:	685b      	ldreq	r3, [r3, #4]
 800ab7c:	6063      	str	r3, [r4, #4]
 800ab7e:	bf04      	itt	eq
 800ab80:	1949      	addeq	r1, r1, r5
 800ab82:	6021      	streq	r1, [r4, #0]
 800ab84:	6054      	str	r4, [r2, #4]
 800ab86:	e7ca      	b.n	800ab1e <_free_r+0x26>
 800ab88:	b003      	add	sp, #12
 800ab8a:	bd30      	pop	{r4, r5, pc}
 800ab8c:	20000660 	.word	0x20000660

0800ab90 <sbrk_aligned>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	4e0e      	ldr	r6, [pc, #56]	; (800abcc <sbrk_aligned+0x3c>)
 800ab94:	460c      	mov	r4, r1
 800ab96:	6831      	ldr	r1, [r6, #0]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	b911      	cbnz	r1, 800aba2 <sbrk_aligned+0x12>
 800ab9c:	f000 fb4c 	bl	800b238 <_sbrk_r>
 800aba0:	6030      	str	r0, [r6, #0]
 800aba2:	4621      	mov	r1, r4
 800aba4:	4628      	mov	r0, r5
 800aba6:	f000 fb47 	bl	800b238 <_sbrk_r>
 800abaa:	1c43      	adds	r3, r0, #1
 800abac:	d00a      	beq.n	800abc4 <sbrk_aligned+0x34>
 800abae:	1cc4      	adds	r4, r0, #3
 800abb0:	f024 0403 	bic.w	r4, r4, #3
 800abb4:	42a0      	cmp	r0, r4
 800abb6:	d007      	beq.n	800abc8 <sbrk_aligned+0x38>
 800abb8:	1a21      	subs	r1, r4, r0
 800abba:	4628      	mov	r0, r5
 800abbc:	f000 fb3c 	bl	800b238 <_sbrk_r>
 800abc0:	3001      	adds	r0, #1
 800abc2:	d101      	bne.n	800abc8 <sbrk_aligned+0x38>
 800abc4:	f04f 34ff 	mov.w	r4, #4294967295
 800abc8:	4620      	mov	r0, r4
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	20000664 	.word	0x20000664

0800abd0 <_malloc_r>:
 800abd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd4:	1ccd      	adds	r5, r1, #3
 800abd6:	f025 0503 	bic.w	r5, r5, #3
 800abda:	3508      	adds	r5, #8
 800abdc:	2d0c      	cmp	r5, #12
 800abde:	bf38      	it	cc
 800abe0:	250c      	movcc	r5, #12
 800abe2:	2d00      	cmp	r5, #0
 800abe4:	4607      	mov	r7, r0
 800abe6:	db01      	blt.n	800abec <_malloc_r+0x1c>
 800abe8:	42a9      	cmp	r1, r5
 800abea:	d905      	bls.n	800abf8 <_malloc_r+0x28>
 800abec:	230c      	movs	r3, #12
 800abee:	603b      	str	r3, [r7, #0]
 800abf0:	2600      	movs	r6, #0
 800abf2:	4630      	mov	r0, r6
 800abf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf8:	4e2e      	ldr	r6, [pc, #184]	; (800acb4 <_malloc_r+0xe4>)
 800abfa:	f000 fc31 	bl	800b460 <__malloc_lock>
 800abfe:	6833      	ldr	r3, [r6, #0]
 800ac00:	461c      	mov	r4, r3
 800ac02:	bb34      	cbnz	r4, 800ac52 <_malloc_r+0x82>
 800ac04:	4629      	mov	r1, r5
 800ac06:	4638      	mov	r0, r7
 800ac08:	f7ff ffc2 	bl	800ab90 <sbrk_aligned>
 800ac0c:	1c43      	adds	r3, r0, #1
 800ac0e:	4604      	mov	r4, r0
 800ac10:	d14d      	bne.n	800acae <_malloc_r+0xde>
 800ac12:	6834      	ldr	r4, [r6, #0]
 800ac14:	4626      	mov	r6, r4
 800ac16:	2e00      	cmp	r6, #0
 800ac18:	d140      	bne.n	800ac9c <_malloc_r+0xcc>
 800ac1a:	6823      	ldr	r3, [r4, #0]
 800ac1c:	4631      	mov	r1, r6
 800ac1e:	4638      	mov	r0, r7
 800ac20:	eb04 0803 	add.w	r8, r4, r3
 800ac24:	f000 fb08 	bl	800b238 <_sbrk_r>
 800ac28:	4580      	cmp	r8, r0
 800ac2a:	d13a      	bne.n	800aca2 <_malloc_r+0xd2>
 800ac2c:	6821      	ldr	r1, [r4, #0]
 800ac2e:	3503      	adds	r5, #3
 800ac30:	1a6d      	subs	r5, r5, r1
 800ac32:	f025 0503 	bic.w	r5, r5, #3
 800ac36:	3508      	adds	r5, #8
 800ac38:	2d0c      	cmp	r5, #12
 800ac3a:	bf38      	it	cc
 800ac3c:	250c      	movcc	r5, #12
 800ac3e:	4629      	mov	r1, r5
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ffa5 	bl	800ab90 <sbrk_aligned>
 800ac46:	3001      	adds	r0, #1
 800ac48:	d02b      	beq.n	800aca2 <_malloc_r+0xd2>
 800ac4a:	6823      	ldr	r3, [r4, #0]
 800ac4c:	442b      	add	r3, r5
 800ac4e:	6023      	str	r3, [r4, #0]
 800ac50:	e00e      	b.n	800ac70 <_malloc_r+0xa0>
 800ac52:	6822      	ldr	r2, [r4, #0]
 800ac54:	1b52      	subs	r2, r2, r5
 800ac56:	d41e      	bmi.n	800ac96 <_malloc_r+0xc6>
 800ac58:	2a0b      	cmp	r2, #11
 800ac5a:	d916      	bls.n	800ac8a <_malloc_r+0xba>
 800ac5c:	1961      	adds	r1, r4, r5
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	6025      	str	r5, [r4, #0]
 800ac62:	bf18      	it	ne
 800ac64:	6059      	strne	r1, [r3, #4]
 800ac66:	6863      	ldr	r3, [r4, #4]
 800ac68:	bf08      	it	eq
 800ac6a:	6031      	streq	r1, [r6, #0]
 800ac6c:	5162      	str	r2, [r4, r5]
 800ac6e:	604b      	str	r3, [r1, #4]
 800ac70:	4638      	mov	r0, r7
 800ac72:	f104 060b 	add.w	r6, r4, #11
 800ac76:	f000 fbf9 	bl	800b46c <__malloc_unlock>
 800ac7a:	f026 0607 	bic.w	r6, r6, #7
 800ac7e:	1d23      	adds	r3, r4, #4
 800ac80:	1af2      	subs	r2, r6, r3
 800ac82:	d0b6      	beq.n	800abf2 <_malloc_r+0x22>
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	50a3      	str	r3, [r4, r2]
 800ac88:	e7b3      	b.n	800abf2 <_malloc_r+0x22>
 800ac8a:	6862      	ldr	r2, [r4, #4]
 800ac8c:	42a3      	cmp	r3, r4
 800ac8e:	bf0c      	ite	eq
 800ac90:	6032      	streq	r2, [r6, #0]
 800ac92:	605a      	strne	r2, [r3, #4]
 800ac94:	e7ec      	b.n	800ac70 <_malloc_r+0xa0>
 800ac96:	4623      	mov	r3, r4
 800ac98:	6864      	ldr	r4, [r4, #4]
 800ac9a:	e7b2      	b.n	800ac02 <_malloc_r+0x32>
 800ac9c:	4634      	mov	r4, r6
 800ac9e:	6876      	ldr	r6, [r6, #4]
 800aca0:	e7b9      	b.n	800ac16 <_malloc_r+0x46>
 800aca2:	230c      	movs	r3, #12
 800aca4:	603b      	str	r3, [r7, #0]
 800aca6:	4638      	mov	r0, r7
 800aca8:	f000 fbe0 	bl	800b46c <__malloc_unlock>
 800acac:	e7a1      	b.n	800abf2 <_malloc_r+0x22>
 800acae:	6025      	str	r5, [r4, #0]
 800acb0:	e7de      	b.n	800ac70 <_malloc_r+0xa0>
 800acb2:	bf00      	nop
 800acb4:	20000660 	.word	0x20000660

0800acb8 <__ssputs_r>:
 800acb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acbc:	688e      	ldr	r6, [r1, #8]
 800acbe:	429e      	cmp	r6, r3
 800acc0:	4682      	mov	sl, r0
 800acc2:	460c      	mov	r4, r1
 800acc4:	4690      	mov	r8, r2
 800acc6:	461f      	mov	r7, r3
 800acc8:	d838      	bhi.n	800ad3c <__ssputs_r+0x84>
 800acca:	898a      	ldrh	r2, [r1, #12]
 800accc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acd0:	d032      	beq.n	800ad38 <__ssputs_r+0x80>
 800acd2:	6825      	ldr	r5, [r4, #0]
 800acd4:	6909      	ldr	r1, [r1, #16]
 800acd6:	eba5 0901 	sub.w	r9, r5, r1
 800acda:	6965      	ldr	r5, [r4, #20]
 800acdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ace0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ace4:	3301      	adds	r3, #1
 800ace6:	444b      	add	r3, r9
 800ace8:	106d      	asrs	r5, r5, #1
 800acea:	429d      	cmp	r5, r3
 800acec:	bf38      	it	cc
 800acee:	461d      	movcc	r5, r3
 800acf0:	0553      	lsls	r3, r2, #21
 800acf2:	d531      	bpl.n	800ad58 <__ssputs_r+0xa0>
 800acf4:	4629      	mov	r1, r5
 800acf6:	f7ff ff6b 	bl	800abd0 <_malloc_r>
 800acfa:	4606      	mov	r6, r0
 800acfc:	b950      	cbnz	r0, 800ad14 <__ssputs_r+0x5c>
 800acfe:	230c      	movs	r3, #12
 800ad00:	f8ca 3000 	str.w	r3, [sl]
 800ad04:	89a3      	ldrh	r3, [r4, #12]
 800ad06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad14:	6921      	ldr	r1, [r4, #16]
 800ad16:	464a      	mov	r2, r9
 800ad18:	f7ff fa08 	bl	800a12c <memcpy>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad26:	81a3      	strh	r3, [r4, #12]
 800ad28:	6126      	str	r6, [r4, #16]
 800ad2a:	6165      	str	r5, [r4, #20]
 800ad2c:	444e      	add	r6, r9
 800ad2e:	eba5 0509 	sub.w	r5, r5, r9
 800ad32:	6026      	str	r6, [r4, #0]
 800ad34:	60a5      	str	r5, [r4, #8]
 800ad36:	463e      	mov	r6, r7
 800ad38:	42be      	cmp	r6, r7
 800ad3a:	d900      	bls.n	800ad3e <__ssputs_r+0x86>
 800ad3c:	463e      	mov	r6, r7
 800ad3e:	6820      	ldr	r0, [r4, #0]
 800ad40:	4632      	mov	r2, r6
 800ad42:	4641      	mov	r1, r8
 800ad44:	f000 fb72 	bl	800b42c <memmove>
 800ad48:	68a3      	ldr	r3, [r4, #8]
 800ad4a:	1b9b      	subs	r3, r3, r6
 800ad4c:	60a3      	str	r3, [r4, #8]
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	4433      	add	r3, r6
 800ad52:	6023      	str	r3, [r4, #0]
 800ad54:	2000      	movs	r0, #0
 800ad56:	e7db      	b.n	800ad10 <__ssputs_r+0x58>
 800ad58:	462a      	mov	r2, r5
 800ad5a:	f000 fb8d 	bl	800b478 <_realloc_r>
 800ad5e:	4606      	mov	r6, r0
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d1e1      	bne.n	800ad28 <__ssputs_r+0x70>
 800ad64:	6921      	ldr	r1, [r4, #16]
 800ad66:	4650      	mov	r0, sl
 800ad68:	f7ff fec6 	bl	800aaf8 <_free_r>
 800ad6c:	e7c7      	b.n	800acfe <__ssputs_r+0x46>
	...

0800ad70 <_svfiprintf_r>:
 800ad70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad74:	4698      	mov	r8, r3
 800ad76:	898b      	ldrh	r3, [r1, #12]
 800ad78:	061b      	lsls	r3, r3, #24
 800ad7a:	b09d      	sub	sp, #116	; 0x74
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	460d      	mov	r5, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	d50e      	bpl.n	800ada2 <_svfiprintf_r+0x32>
 800ad84:	690b      	ldr	r3, [r1, #16]
 800ad86:	b963      	cbnz	r3, 800ada2 <_svfiprintf_r+0x32>
 800ad88:	2140      	movs	r1, #64	; 0x40
 800ad8a:	f7ff ff21 	bl	800abd0 <_malloc_r>
 800ad8e:	6028      	str	r0, [r5, #0]
 800ad90:	6128      	str	r0, [r5, #16]
 800ad92:	b920      	cbnz	r0, 800ad9e <_svfiprintf_r+0x2e>
 800ad94:	230c      	movs	r3, #12
 800ad96:	603b      	str	r3, [r7, #0]
 800ad98:	f04f 30ff 	mov.w	r0, #4294967295
 800ad9c:	e0d1      	b.n	800af42 <_svfiprintf_r+0x1d2>
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	616b      	str	r3, [r5, #20]
 800ada2:	2300      	movs	r3, #0
 800ada4:	9309      	str	r3, [sp, #36]	; 0x24
 800ada6:	2320      	movs	r3, #32
 800ada8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adac:	f8cd 800c 	str.w	r8, [sp, #12]
 800adb0:	2330      	movs	r3, #48	; 0x30
 800adb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af5c <_svfiprintf_r+0x1ec>
 800adb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adba:	f04f 0901 	mov.w	r9, #1
 800adbe:	4623      	mov	r3, r4
 800adc0:	469a      	mov	sl, r3
 800adc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc6:	b10a      	cbz	r2, 800adcc <_svfiprintf_r+0x5c>
 800adc8:	2a25      	cmp	r2, #37	; 0x25
 800adca:	d1f9      	bne.n	800adc0 <_svfiprintf_r+0x50>
 800adcc:	ebba 0b04 	subs.w	fp, sl, r4
 800add0:	d00b      	beq.n	800adea <_svfiprintf_r+0x7a>
 800add2:	465b      	mov	r3, fp
 800add4:	4622      	mov	r2, r4
 800add6:	4629      	mov	r1, r5
 800add8:	4638      	mov	r0, r7
 800adda:	f7ff ff6d 	bl	800acb8 <__ssputs_r>
 800adde:	3001      	adds	r0, #1
 800ade0:	f000 80aa 	beq.w	800af38 <_svfiprintf_r+0x1c8>
 800ade4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ade6:	445a      	add	r2, fp
 800ade8:	9209      	str	r2, [sp, #36]	; 0x24
 800adea:	f89a 3000 	ldrb.w	r3, [sl]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 80a2 	beq.w	800af38 <_svfiprintf_r+0x1c8>
 800adf4:	2300      	movs	r3, #0
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adfe:	f10a 0a01 	add.w	sl, sl, #1
 800ae02:	9304      	str	r3, [sp, #16]
 800ae04:	9307      	str	r3, [sp, #28]
 800ae06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae0c:	4654      	mov	r4, sl
 800ae0e:	2205      	movs	r2, #5
 800ae10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae14:	4851      	ldr	r0, [pc, #324]	; (800af5c <_svfiprintf_r+0x1ec>)
 800ae16:	f7f5 f9e3 	bl	80001e0 <memchr>
 800ae1a:	9a04      	ldr	r2, [sp, #16]
 800ae1c:	b9d8      	cbnz	r0, 800ae56 <_svfiprintf_r+0xe6>
 800ae1e:	06d0      	lsls	r0, r2, #27
 800ae20:	bf44      	itt	mi
 800ae22:	2320      	movmi	r3, #32
 800ae24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae28:	0711      	lsls	r1, r2, #28
 800ae2a:	bf44      	itt	mi
 800ae2c:	232b      	movmi	r3, #43	; 0x2b
 800ae2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae32:	f89a 3000 	ldrb.w	r3, [sl]
 800ae36:	2b2a      	cmp	r3, #42	; 0x2a
 800ae38:	d015      	beq.n	800ae66 <_svfiprintf_r+0xf6>
 800ae3a:	9a07      	ldr	r2, [sp, #28]
 800ae3c:	4654      	mov	r4, sl
 800ae3e:	2000      	movs	r0, #0
 800ae40:	f04f 0c0a 	mov.w	ip, #10
 800ae44:	4621      	mov	r1, r4
 800ae46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae4a:	3b30      	subs	r3, #48	; 0x30
 800ae4c:	2b09      	cmp	r3, #9
 800ae4e:	d94e      	bls.n	800aeee <_svfiprintf_r+0x17e>
 800ae50:	b1b0      	cbz	r0, 800ae80 <_svfiprintf_r+0x110>
 800ae52:	9207      	str	r2, [sp, #28]
 800ae54:	e014      	b.n	800ae80 <_svfiprintf_r+0x110>
 800ae56:	eba0 0308 	sub.w	r3, r0, r8
 800ae5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	9304      	str	r3, [sp, #16]
 800ae62:	46a2      	mov	sl, r4
 800ae64:	e7d2      	b.n	800ae0c <_svfiprintf_r+0x9c>
 800ae66:	9b03      	ldr	r3, [sp, #12]
 800ae68:	1d19      	adds	r1, r3, #4
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	9103      	str	r1, [sp, #12]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfbb      	ittet	lt
 800ae72:	425b      	neglt	r3, r3
 800ae74:	f042 0202 	orrlt.w	r2, r2, #2
 800ae78:	9307      	strge	r3, [sp, #28]
 800ae7a:	9307      	strlt	r3, [sp, #28]
 800ae7c:	bfb8      	it	lt
 800ae7e:	9204      	strlt	r2, [sp, #16]
 800ae80:	7823      	ldrb	r3, [r4, #0]
 800ae82:	2b2e      	cmp	r3, #46	; 0x2e
 800ae84:	d10c      	bne.n	800aea0 <_svfiprintf_r+0x130>
 800ae86:	7863      	ldrb	r3, [r4, #1]
 800ae88:	2b2a      	cmp	r3, #42	; 0x2a
 800ae8a:	d135      	bne.n	800aef8 <_svfiprintf_r+0x188>
 800ae8c:	9b03      	ldr	r3, [sp, #12]
 800ae8e:	1d1a      	adds	r2, r3, #4
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	9203      	str	r2, [sp, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	bfb8      	it	lt
 800ae98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae9c:	3402      	adds	r4, #2
 800ae9e:	9305      	str	r3, [sp, #20]
 800aea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af6c <_svfiprintf_r+0x1fc>
 800aea4:	7821      	ldrb	r1, [r4, #0]
 800aea6:	2203      	movs	r2, #3
 800aea8:	4650      	mov	r0, sl
 800aeaa:	f7f5 f999 	bl	80001e0 <memchr>
 800aeae:	b140      	cbz	r0, 800aec2 <_svfiprintf_r+0x152>
 800aeb0:	2340      	movs	r3, #64	; 0x40
 800aeb2:	eba0 000a 	sub.w	r0, r0, sl
 800aeb6:	fa03 f000 	lsl.w	r0, r3, r0
 800aeba:	9b04      	ldr	r3, [sp, #16]
 800aebc:	4303      	orrs	r3, r0
 800aebe:	3401      	adds	r4, #1
 800aec0:	9304      	str	r3, [sp, #16]
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4826      	ldr	r0, [pc, #152]	; (800af60 <_svfiprintf_r+0x1f0>)
 800aec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aecc:	2206      	movs	r2, #6
 800aece:	f7f5 f987 	bl	80001e0 <memchr>
 800aed2:	2800      	cmp	r0, #0
 800aed4:	d038      	beq.n	800af48 <_svfiprintf_r+0x1d8>
 800aed6:	4b23      	ldr	r3, [pc, #140]	; (800af64 <_svfiprintf_r+0x1f4>)
 800aed8:	bb1b      	cbnz	r3, 800af22 <_svfiprintf_r+0x1b2>
 800aeda:	9b03      	ldr	r3, [sp, #12]
 800aedc:	3307      	adds	r3, #7
 800aede:	f023 0307 	bic.w	r3, r3, #7
 800aee2:	3308      	adds	r3, #8
 800aee4:	9303      	str	r3, [sp, #12]
 800aee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee8:	4433      	add	r3, r6
 800aeea:	9309      	str	r3, [sp, #36]	; 0x24
 800aeec:	e767      	b.n	800adbe <_svfiprintf_r+0x4e>
 800aeee:	fb0c 3202 	mla	r2, ip, r2, r3
 800aef2:	460c      	mov	r4, r1
 800aef4:	2001      	movs	r0, #1
 800aef6:	e7a5      	b.n	800ae44 <_svfiprintf_r+0xd4>
 800aef8:	2300      	movs	r3, #0
 800aefa:	3401      	adds	r4, #1
 800aefc:	9305      	str	r3, [sp, #20]
 800aefe:	4619      	mov	r1, r3
 800af00:	f04f 0c0a 	mov.w	ip, #10
 800af04:	4620      	mov	r0, r4
 800af06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af0a:	3a30      	subs	r2, #48	; 0x30
 800af0c:	2a09      	cmp	r2, #9
 800af0e:	d903      	bls.n	800af18 <_svfiprintf_r+0x1a8>
 800af10:	2b00      	cmp	r3, #0
 800af12:	d0c5      	beq.n	800aea0 <_svfiprintf_r+0x130>
 800af14:	9105      	str	r1, [sp, #20]
 800af16:	e7c3      	b.n	800aea0 <_svfiprintf_r+0x130>
 800af18:	fb0c 2101 	mla	r1, ip, r1, r2
 800af1c:	4604      	mov	r4, r0
 800af1e:	2301      	movs	r3, #1
 800af20:	e7f0      	b.n	800af04 <_svfiprintf_r+0x194>
 800af22:	ab03      	add	r3, sp, #12
 800af24:	9300      	str	r3, [sp, #0]
 800af26:	462a      	mov	r2, r5
 800af28:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <_svfiprintf_r+0x1f8>)
 800af2a:	a904      	add	r1, sp, #16
 800af2c:	4638      	mov	r0, r7
 800af2e:	f7fb fecf 	bl	8006cd0 <_printf_float>
 800af32:	1c42      	adds	r2, r0, #1
 800af34:	4606      	mov	r6, r0
 800af36:	d1d6      	bne.n	800aee6 <_svfiprintf_r+0x176>
 800af38:	89ab      	ldrh	r3, [r5, #12]
 800af3a:	065b      	lsls	r3, r3, #25
 800af3c:	f53f af2c 	bmi.w	800ad98 <_svfiprintf_r+0x28>
 800af40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af42:	b01d      	add	sp, #116	; 0x74
 800af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af48:	ab03      	add	r3, sp, #12
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	462a      	mov	r2, r5
 800af4e:	4b06      	ldr	r3, [pc, #24]	; (800af68 <_svfiprintf_r+0x1f8>)
 800af50:	a904      	add	r1, sp, #16
 800af52:	4638      	mov	r0, r7
 800af54:	f7fc f960 	bl	8007218 <_printf_i>
 800af58:	e7eb      	b.n	800af32 <_svfiprintf_r+0x1c2>
 800af5a:	bf00      	nop
 800af5c:	0800c7ec 	.word	0x0800c7ec
 800af60:	0800c7f6 	.word	0x0800c7f6
 800af64:	08006cd1 	.word	0x08006cd1
 800af68:	0800acb9 	.word	0x0800acb9
 800af6c:	0800c7f2 	.word	0x0800c7f2

0800af70 <__sfputc_r>:
 800af70:	6893      	ldr	r3, [r2, #8]
 800af72:	3b01      	subs	r3, #1
 800af74:	2b00      	cmp	r3, #0
 800af76:	b410      	push	{r4}
 800af78:	6093      	str	r3, [r2, #8]
 800af7a:	da08      	bge.n	800af8e <__sfputc_r+0x1e>
 800af7c:	6994      	ldr	r4, [r2, #24]
 800af7e:	42a3      	cmp	r3, r4
 800af80:	db01      	blt.n	800af86 <__sfputc_r+0x16>
 800af82:	290a      	cmp	r1, #10
 800af84:	d103      	bne.n	800af8e <__sfputc_r+0x1e>
 800af86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af8a:	f7fd bbe7 	b.w	800875c <__swbuf_r>
 800af8e:	6813      	ldr	r3, [r2, #0]
 800af90:	1c58      	adds	r0, r3, #1
 800af92:	6010      	str	r0, [r2, #0]
 800af94:	7019      	strb	r1, [r3, #0]
 800af96:	4608      	mov	r0, r1
 800af98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af9c:	4770      	bx	lr

0800af9e <__sfputs_r>:
 800af9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa0:	4606      	mov	r6, r0
 800afa2:	460f      	mov	r7, r1
 800afa4:	4614      	mov	r4, r2
 800afa6:	18d5      	adds	r5, r2, r3
 800afa8:	42ac      	cmp	r4, r5
 800afaa:	d101      	bne.n	800afb0 <__sfputs_r+0x12>
 800afac:	2000      	movs	r0, #0
 800afae:	e007      	b.n	800afc0 <__sfputs_r+0x22>
 800afb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afb4:	463a      	mov	r2, r7
 800afb6:	4630      	mov	r0, r6
 800afb8:	f7ff ffda 	bl	800af70 <__sfputc_r>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d1f3      	bne.n	800afa8 <__sfputs_r+0xa>
 800afc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afc4 <_vfiprintf_r>:
 800afc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc8:	460d      	mov	r5, r1
 800afca:	b09d      	sub	sp, #116	; 0x74
 800afcc:	4614      	mov	r4, r2
 800afce:	4698      	mov	r8, r3
 800afd0:	4606      	mov	r6, r0
 800afd2:	b118      	cbz	r0, 800afdc <_vfiprintf_r+0x18>
 800afd4:	6983      	ldr	r3, [r0, #24]
 800afd6:	b90b      	cbnz	r3, 800afdc <_vfiprintf_r+0x18>
 800afd8:	f7fe fc16 	bl	8009808 <__sinit>
 800afdc:	4b89      	ldr	r3, [pc, #548]	; (800b204 <_vfiprintf_r+0x240>)
 800afde:	429d      	cmp	r5, r3
 800afe0:	d11b      	bne.n	800b01a <_vfiprintf_r+0x56>
 800afe2:	6875      	ldr	r5, [r6, #4]
 800afe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x32>
 800aff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aff2:	f7ff f81a 	bl	800a02a <__retarget_lock_acquire_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	071b      	lsls	r3, r3, #28
 800affa:	d501      	bpl.n	800b000 <_vfiprintf_r+0x3c>
 800affc:	692b      	ldr	r3, [r5, #16]
 800affe:	b9eb      	cbnz	r3, 800b03c <_vfiprintf_r+0x78>
 800b000:	4629      	mov	r1, r5
 800b002:	4630      	mov	r0, r6
 800b004:	f7fd fbfc 	bl	8008800 <__swsetup_r>
 800b008:	b1c0      	cbz	r0, 800b03c <_vfiprintf_r+0x78>
 800b00a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b00c:	07dc      	lsls	r4, r3, #31
 800b00e:	d50e      	bpl.n	800b02e <_vfiprintf_r+0x6a>
 800b010:	f04f 30ff 	mov.w	r0, #4294967295
 800b014:	b01d      	add	sp, #116	; 0x74
 800b016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01a:	4b7b      	ldr	r3, [pc, #492]	; (800b208 <_vfiprintf_r+0x244>)
 800b01c:	429d      	cmp	r5, r3
 800b01e:	d101      	bne.n	800b024 <_vfiprintf_r+0x60>
 800b020:	68b5      	ldr	r5, [r6, #8]
 800b022:	e7df      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b024:	4b79      	ldr	r3, [pc, #484]	; (800b20c <_vfiprintf_r+0x248>)
 800b026:	429d      	cmp	r5, r3
 800b028:	bf08      	it	eq
 800b02a:	68f5      	ldreq	r5, [r6, #12]
 800b02c:	e7da      	b.n	800afe4 <_vfiprintf_r+0x20>
 800b02e:	89ab      	ldrh	r3, [r5, #12]
 800b030:	0598      	lsls	r0, r3, #22
 800b032:	d4ed      	bmi.n	800b010 <_vfiprintf_r+0x4c>
 800b034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b036:	f7fe fff9 	bl	800a02c <__retarget_lock_release_recursive>
 800b03a:	e7e9      	b.n	800b010 <_vfiprintf_r+0x4c>
 800b03c:	2300      	movs	r3, #0
 800b03e:	9309      	str	r3, [sp, #36]	; 0x24
 800b040:	2320      	movs	r3, #32
 800b042:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b046:	f8cd 800c 	str.w	r8, [sp, #12]
 800b04a:	2330      	movs	r3, #48	; 0x30
 800b04c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b210 <_vfiprintf_r+0x24c>
 800b050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b054:	f04f 0901 	mov.w	r9, #1
 800b058:	4623      	mov	r3, r4
 800b05a:	469a      	mov	sl, r3
 800b05c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b060:	b10a      	cbz	r2, 800b066 <_vfiprintf_r+0xa2>
 800b062:	2a25      	cmp	r2, #37	; 0x25
 800b064:	d1f9      	bne.n	800b05a <_vfiprintf_r+0x96>
 800b066:	ebba 0b04 	subs.w	fp, sl, r4
 800b06a:	d00b      	beq.n	800b084 <_vfiprintf_r+0xc0>
 800b06c:	465b      	mov	r3, fp
 800b06e:	4622      	mov	r2, r4
 800b070:	4629      	mov	r1, r5
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff93 	bl	800af9e <__sfputs_r>
 800b078:	3001      	adds	r0, #1
 800b07a:	f000 80aa 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b07e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b080:	445a      	add	r2, fp
 800b082:	9209      	str	r2, [sp, #36]	; 0x24
 800b084:	f89a 3000 	ldrb.w	r3, [sl]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f000 80a2 	beq.w	800b1d2 <_vfiprintf_r+0x20e>
 800b08e:	2300      	movs	r3, #0
 800b090:	f04f 32ff 	mov.w	r2, #4294967295
 800b094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b098:	f10a 0a01 	add.w	sl, sl, #1
 800b09c:	9304      	str	r3, [sp, #16]
 800b09e:	9307      	str	r3, [sp, #28]
 800b0a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b0a4:	931a      	str	r3, [sp, #104]	; 0x68
 800b0a6:	4654      	mov	r4, sl
 800b0a8:	2205      	movs	r2, #5
 800b0aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0ae:	4858      	ldr	r0, [pc, #352]	; (800b210 <_vfiprintf_r+0x24c>)
 800b0b0:	f7f5 f896 	bl	80001e0 <memchr>
 800b0b4:	9a04      	ldr	r2, [sp, #16]
 800b0b6:	b9d8      	cbnz	r0, 800b0f0 <_vfiprintf_r+0x12c>
 800b0b8:	06d1      	lsls	r1, r2, #27
 800b0ba:	bf44      	itt	mi
 800b0bc:	2320      	movmi	r3, #32
 800b0be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0c2:	0713      	lsls	r3, r2, #28
 800b0c4:	bf44      	itt	mi
 800b0c6:	232b      	movmi	r3, #43	; 0x2b
 800b0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0d2:	d015      	beq.n	800b100 <_vfiprintf_r+0x13c>
 800b0d4:	9a07      	ldr	r2, [sp, #28]
 800b0d6:	4654      	mov	r4, sl
 800b0d8:	2000      	movs	r0, #0
 800b0da:	f04f 0c0a 	mov.w	ip, #10
 800b0de:	4621      	mov	r1, r4
 800b0e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e4:	3b30      	subs	r3, #48	; 0x30
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	d94e      	bls.n	800b188 <_vfiprintf_r+0x1c4>
 800b0ea:	b1b0      	cbz	r0, 800b11a <_vfiprintf_r+0x156>
 800b0ec:	9207      	str	r2, [sp, #28]
 800b0ee:	e014      	b.n	800b11a <_vfiprintf_r+0x156>
 800b0f0:	eba0 0308 	sub.w	r3, r0, r8
 800b0f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b0f8:	4313      	orrs	r3, r2
 800b0fa:	9304      	str	r3, [sp, #16]
 800b0fc:	46a2      	mov	sl, r4
 800b0fe:	e7d2      	b.n	800b0a6 <_vfiprintf_r+0xe2>
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	1d19      	adds	r1, r3, #4
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	9103      	str	r1, [sp, #12]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	bfbb      	ittet	lt
 800b10c:	425b      	neglt	r3, r3
 800b10e:	f042 0202 	orrlt.w	r2, r2, #2
 800b112:	9307      	strge	r3, [sp, #28]
 800b114:	9307      	strlt	r3, [sp, #28]
 800b116:	bfb8      	it	lt
 800b118:	9204      	strlt	r2, [sp, #16]
 800b11a:	7823      	ldrb	r3, [r4, #0]
 800b11c:	2b2e      	cmp	r3, #46	; 0x2e
 800b11e:	d10c      	bne.n	800b13a <_vfiprintf_r+0x176>
 800b120:	7863      	ldrb	r3, [r4, #1]
 800b122:	2b2a      	cmp	r3, #42	; 0x2a
 800b124:	d135      	bne.n	800b192 <_vfiprintf_r+0x1ce>
 800b126:	9b03      	ldr	r3, [sp, #12]
 800b128:	1d1a      	adds	r2, r3, #4
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	9203      	str	r2, [sp, #12]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	bfb8      	it	lt
 800b132:	f04f 33ff 	movlt.w	r3, #4294967295
 800b136:	3402      	adds	r4, #2
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b220 <_vfiprintf_r+0x25c>
 800b13e:	7821      	ldrb	r1, [r4, #0]
 800b140:	2203      	movs	r2, #3
 800b142:	4650      	mov	r0, sl
 800b144:	f7f5 f84c 	bl	80001e0 <memchr>
 800b148:	b140      	cbz	r0, 800b15c <_vfiprintf_r+0x198>
 800b14a:	2340      	movs	r3, #64	; 0x40
 800b14c:	eba0 000a 	sub.w	r0, r0, sl
 800b150:	fa03 f000 	lsl.w	r0, r3, r0
 800b154:	9b04      	ldr	r3, [sp, #16]
 800b156:	4303      	orrs	r3, r0
 800b158:	3401      	adds	r4, #1
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b160:	482c      	ldr	r0, [pc, #176]	; (800b214 <_vfiprintf_r+0x250>)
 800b162:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b166:	2206      	movs	r2, #6
 800b168:	f7f5 f83a 	bl	80001e0 <memchr>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d03f      	beq.n	800b1f0 <_vfiprintf_r+0x22c>
 800b170:	4b29      	ldr	r3, [pc, #164]	; (800b218 <_vfiprintf_r+0x254>)
 800b172:	bb1b      	cbnz	r3, 800b1bc <_vfiprintf_r+0x1f8>
 800b174:	9b03      	ldr	r3, [sp, #12]
 800b176:	3307      	adds	r3, #7
 800b178:	f023 0307 	bic.w	r3, r3, #7
 800b17c:	3308      	adds	r3, #8
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b182:	443b      	add	r3, r7
 800b184:	9309      	str	r3, [sp, #36]	; 0x24
 800b186:	e767      	b.n	800b058 <_vfiprintf_r+0x94>
 800b188:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18c:	460c      	mov	r4, r1
 800b18e:	2001      	movs	r0, #1
 800b190:	e7a5      	b.n	800b0de <_vfiprintf_r+0x11a>
 800b192:	2300      	movs	r3, #0
 800b194:	3401      	adds	r4, #1
 800b196:	9305      	str	r3, [sp, #20]
 800b198:	4619      	mov	r1, r3
 800b19a:	f04f 0c0a 	mov.w	ip, #10
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a4:	3a30      	subs	r2, #48	; 0x30
 800b1a6:	2a09      	cmp	r2, #9
 800b1a8:	d903      	bls.n	800b1b2 <_vfiprintf_r+0x1ee>
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d0c5      	beq.n	800b13a <_vfiprintf_r+0x176>
 800b1ae:	9105      	str	r1, [sp, #20]
 800b1b0:	e7c3      	b.n	800b13a <_vfiprintf_r+0x176>
 800b1b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e7f0      	b.n	800b19e <_vfiprintf_r+0x1da>
 800b1bc:	ab03      	add	r3, sp, #12
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	462a      	mov	r2, r5
 800b1c2:	4b16      	ldr	r3, [pc, #88]	; (800b21c <_vfiprintf_r+0x258>)
 800b1c4:	a904      	add	r1, sp, #16
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7fb fd82 	bl	8006cd0 <_printf_float>
 800b1cc:	4607      	mov	r7, r0
 800b1ce:	1c78      	adds	r0, r7, #1
 800b1d0:	d1d6      	bne.n	800b180 <_vfiprintf_r+0x1bc>
 800b1d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1d4:	07d9      	lsls	r1, r3, #31
 800b1d6:	d405      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1d8:	89ab      	ldrh	r3, [r5, #12]
 800b1da:	059a      	lsls	r2, r3, #22
 800b1dc:	d402      	bmi.n	800b1e4 <_vfiprintf_r+0x220>
 800b1de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1e0:	f7fe ff24 	bl	800a02c <__retarget_lock_release_recursive>
 800b1e4:	89ab      	ldrh	r3, [r5, #12]
 800b1e6:	065b      	lsls	r3, r3, #25
 800b1e8:	f53f af12 	bmi.w	800b010 <_vfiprintf_r+0x4c>
 800b1ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ee:	e711      	b.n	800b014 <_vfiprintf_r+0x50>
 800b1f0:	ab03      	add	r3, sp, #12
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	462a      	mov	r2, r5
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <_vfiprintf_r+0x258>)
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	4630      	mov	r0, r6
 800b1fc:	f7fc f80c 	bl	8007218 <_printf_i>
 800b200:	e7e4      	b.n	800b1cc <_vfiprintf_r+0x208>
 800b202:	bf00      	nop
 800b204:	0800c5d4 	.word	0x0800c5d4
 800b208:	0800c5f4 	.word	0x0800c5f4
 800b20c:	0800c5b4 	.word	0x0800c5b4
 800b210:	0800c7ec 	.word	0x0800c7ec
 800b214:	0800c7f6 	.word	0x0800c7f6
 800b218:	08006cd1 	.word	0x08006cd1
 800b21c:	0800af9f 	.word	0x0800af9f
 800b220:	0800c7f2 	.word	0x0800c7f2
 800b224:	00000000 	.word	0x00000000

0800b228 <nan>:
 800b228:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b230 <nan+0x8>
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	00000000 	.word	0x00000000
 800b234:	7ff80000 	.word	0x7ff80000

0800b238 <_sbrk_r>:
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	4d06      	ldr	r5, [pc, #24]	; (800b254 <_sbrk_r+0x1c>)
 800b23c:	2300      	movs	r3, #0
 800b23e:	4604      	mov	r4, r0
 800b240:	4608      	mov	r0, r1
 800b242:	602b      	str	r3, [r5, #0]
 800b244:	f7f7 f862 	bl	800230c <_sbrk>
 800b248:	1c43      	adds	r3, r0, #1
 800b24a:	d102      	bne.n	800b252 <_sbrk_r+0x1a>
 800b24c:	682b      	ldr	r3, [r5, #0]
 800b24e:	b103      	cbz	r3, 800b252 <_sbrk_r+0x1a>
 800b250:	6023      	str	r3, [r4, #0]
 800b252:	bd38      	pop	{r3, r4, r5, pc}
 800b254:	20000668 	.word	0x20000668

0800b258 <__sread>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	460c      	mov	r4, r1
 800b25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b260:	f000 f93a 	bl	800b4d8 <_read_r>
 800b264:	2800      	cmp	r0, #0
 800b266:	bfab      	itete	ge
 800b268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b26a:	89a3      	ldrhlt	r3, [r4, #12]
 800b26c:	181b      	addge	r3, r3, r0
 800b26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b272:	bfac      	ite	ge
 800b274:	6563      	strge	r3, [r4, #84]	; 0x54
 800b276:	81a3      	strhlt	r3, [r4, #12]
 800b278:	bd10      	pop	{r4, pc}

0800b27a <__swrite>:
 800b27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b27e:	461f      	mov	r7, r3
 800b280:	898b      	ldrh	r3, [r1, #12]
 800b282:	05db      	lsls	r3, r3, #23
 800b284:	4605      	mov	r5, r0
 800b286:	460c      	mov	r4, r1
 800b288:	4616      	mov	r6, r2
 800b28a:	d505      	bpl.n	800b298 <__swrite+0x1e>
 800b28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b290:	2302      	movs	r3, #2
 800b292:	2200      	movs	r2, #0
 800b294:	f000 f8b8 	bl	800b408 <_lseek_r>
 800b298:	89a3      	ldrh	r3, [r4, #12]
 800b29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b29e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2a2:	81a3      	strh	r3, [r4, #12]
 800b2a4:	4632      	mov	r2, r6
 800b2a6:	463b      	mov	r3, r7
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2ae:	f000 b837 	b.w	800b320 <_write_r>

0800b2b2 <__sseek>:
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2ba:	f000 f8a5 	bl	800b408 <_lseek_r>
 800b2be:	1c43      	adds	r3, r0, #1
 800b2c0:	89a3      	ldrh	r3, [r4, #12]
 800b2c2:	bf15      	itete	ne
 800b2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b2ce:	81a3      	strheq	r3, [r4, #12]
 800b2d0:	bf18      	it	ne
 800b2d2:	81a3      	strhne	r3, [r4, #12]
 800b2d4:	bd10      	pop	{r4, pc}

0800b2d6 <__sclose>:
 800b2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2da:	f000 b851 	b.w	800b380 <_close_r>

0800b2de <strncmp>:
 800b2de:	b510      	push	{r4, lr}
 800b2e0:	b17a      	cbz	r2, 800b302 <strncmp+0x24>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	3901      	subs	r1, #1
 800b2e6:	1884      	adds	r4, r0, r2
 800b2e8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2ec:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b2f0:	4290      	cmp	r0, r2
 800b2f2:	d101      	bne.n	800b2f8 <strncmp+0x1a>
 800b2f4:	42a3      	cmp	r3, r4
 800b2f6:	d101      	bne.n	800b2fc <strncmp+0x1e>
 800b2f8:	1a80      	subs	r0, r0, r2
 800b2fa:	bd10      	pop	{r4, pc}
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d1f3      	bne.n	800b2e8 <strncmp+0xa>
 800b300:	e7fa      	b.n	800b2f8 <strncmp+0x1a>
 800b302:	4610      	mov	r0, r2
 800b304:	e7f9      	b.n	800b2fa <strncmp+0x1c>

0800b306 <__ascii_wctomb>:
 800b306:	b149      	cbz	r1, 800b31c <__ascii_wctomb+0x16>
 800b308:	2aff      	cmp	r2, #255	; 0xff
 800b30a:	bf85      	ittet	hi
 800b30c:	238a      	movhi	r3, #138	; 0x8a
 800b30e:	6003      	strhi	r3, [r0, #0]
 800b310:	700a      	strbls	r2, [r1, #0]
 800b312:	f04f 30ff 	movhi.w	r0, #4294967295
 800b316:	bf98      	it	ls
 800b318:	2001      	movls	r0, #1
 800b31a:	4770      	bx	lr
 800b31c:	4608      	mov	r0, r1
 800b31e:	4770      	bx	lr

0800b320 <_write_r>:
 800b320:	b538      	push	{r3, r4, r5, lr}
 800b322:	4d07      	ldr	r5, [pc, #28]	; (800b340 <_write_r+0x20>)
 800b324:	4604      	mov	r4, r0
 800b326:	4608      	mov	r0, r1
 800b328:	4611      	mov	r1, r2
 800b32a:	2200      	movs	r2, #0
 800b32c:	602a      	str	r2, [r5, #0]
 800b32e:	461a      	mov	r2, r3
 800b330:	f7f6 ff9b 	bl	800226a <_write>
 800b334:	1c43      	adds	r3, r0, #1
 800b336:	d102      	bne.n	800b33e <_write_r+0x1e>
 800b338:	682b      	ldr	r3, [r5, #0]
 800b33a:	b103      	cbz	r3, 800b33e <_write_r+0x1e>
 800b33c:	6023      	str	r3, [r4, #0]
 800b33e:	bd38      	pop	{r3, r4, r5, pc}
 800b340:	20000668 	.word	0x20000668

0800b344 <__assert_func>:
 800b344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b346:	4614      	mov	r4, r2
 800b348:	461a      	mov	r2, r3
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <__assert_func+0x2c>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4605      	mov	r5, r0
 800b350:	68d8      	ldr	r0, [r3, #12]
 800b352:	b14c      	cbz	r4, 800b368 <__assert_func+0x24>
 800b354:	4b07      	ldr	r3, [pc, #28]	; (800b374 <__assert_func+0x30>)
 800b356:	9100      	str	r1, [sp, #0]
 800b358:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b35c:	4906      	ldr	r1, [pc, #24]	; (800b378 <__assert_func+0x34>)
 800b35e:	462b      	mov	r3, r5
 800b360:	f000 f81e 	bl	800b3a0 <fiprintf>
 800b364:	f000 f8ca 	bl	800b4fc <abort>
 800b368:	4b04      	ldr	r3, [pc, #16]	; (800b37c <__assert_func+0x38>)
 800b36a:	461c      	mov	r4, r3
 800b36c:	e7f3      	b.n	800b356 <__assert_func+0x12>
 800b36e:	bf00      	nop
 800b370:	20000294 	.word	0x20000294
 800b374:	0800c7fd 	.word	0x0800c7fd
 800b378:	0800c80a 	.word	0x0800c80a
 800b37c:	0800c838 	.word	0x0800c838

0800b380 <_close_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d06      	ldr	r5, [pc, #24]	; (800b39c <_close_r+0x1c>)
 800b384:	2300      	movs	r3, #0
 800b386:	4604      	mov	r4, r0
 800b388:	4608      	mov	r0, r1
 800b38a:	602b      	str	r3, [r5, #0]
 800b38c:	f7f6 ff89 	bl	80022a2 <_close>
 800b390:	1c43      	adds	r3, r0, #1
 800b392:	d102      	bne.n	800b39a <_close_r+0x1a>
 800b394:	682b      	ldr	r3, [r5, #0]
 800b396:	b103      	cbz	r3, 800b39a <_close_r+0x1a>
 800b398:	6023      	str	r3, [r4, #0]
 800b39a:	bd38      	pop	{r3, r4, r5, pc}
 800b39c:	20000668 	.word	0x20000668

0800b3a0 <fiprintf>:
 800b3a0:	b40e      	push	{r1, r2, r3}
 800b3a2:	b503      	push	{r0, r1, lr}
 800b3a4:	4601      	mov	r1, r0
 800b3a6:	ab03      	add	r3, sp, #12
 800b3a8:	4805      	ldr	r0, [pc, #20]	; (800b3c0 <fiprintf+0x20>)
 800b3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ae:	6800      	ldr	r0, [r0, #0]
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	f7ff fe07 	bl	800afc4 <_vfiprintf_r>
 800b3b6:	b002      	add	sp, #8
 800b3b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3bc:	b003      	add	sp, #12
 800b3be:	4770      	bx	lr
 800b3c0:	20000294 	.word	0x20000294

0800b3c4 <_fstat_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d07      	ldr	r5, [pc, #28]	; (800b3e4 <_fstat_r+0x20>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	4611      	mov	r1, r2
 800b3d0:	602b      	str	r3, [r5, #0]
 800b3d2:	f7f6 ff72 	bl	80022ba <_fstat>
 800b3d6:	1c43      	adds	r3, r0, #1
 800b3d8:	d102      	bne.n	800b3e0 <_fstat_r+0x1c>
 800b3da:	682b      	ldr	r3, [r5, #0]
 800b3dc:	b103      	cbz	r3, 800b3e0 <_fstat_r+0x1c>
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	bd38      	pop	{r3, r4, r5, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000668 	.word	0x20000668

0800b3e8 <_isatty_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4d06      	ldr	r5, [pc, #24]	; (800b404 <_isatty_r+0x1c>)
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	602b      	str	r3, [r5, #0]
 800b3f4:	f7f6 ff71 	bl	80022da <_isatty>
 800b3f8:	1c43      	adds	r3, r0, #1
 800b3fa:	d102      	bne.n	800b402 <_isatty_r+0x1a>
 800b3fc:	682b      	ldr	r3, [r5, #0]
 800b3fe:	b103      	cbz	r3, 800b402 <_isatty_r+0x1a>
 800b400:	6023      	str	r3, [r4, #0]
 800b402:	bd38      	pop	{r3, r4, r5, pc}
 800b404:	20000668 	.word	0x20000668

0800b408 <_lseek_r>:
 800b408:	b538      	push	{r3, r4, r5, lr}
 800b40a:	4d07      	ldr	r5, [pc, #28]	; (800b428 <_lseek_r+0x20>)
 800b40c:	4604      	mov	r4, r0
 800b40e:	4608      	mov	r0, r1
 800b410:	4611      	mov	r1, r2
 800b412:	2200      	movs	r2, #0
 800b414:	602a      	str	r2, [r5, #0]
 800b416:	461a      	mov	r2, r3
 800b418:	f7f6 ff6a 	bl	80022f0 <_lseek>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_lseek_r+0x1e>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_lseek_r+0x1e>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	20000668 	.word	0x20000668

0800b42c <memmove>:
 800b42c:	4288      	cmp	r0, r1
 800b42e:	b510      	push	{r4, lr}
 800b430:	eb01 0402 	add.w	r4, r1, r2
 800b434:	d902      	bls.n	800b43c <memmove+0x10>
 800b436:	4284      	cmp	r4, r0
 800b438:	4623      	mov	r3, r4
 800b43a:	d807      	bhi.n	800b44c <memmove+0x20>
 800b43c:	1e43      	subs	r3, r0, #1
 800b43e:	42a1      	cmp	r1, r4
 800b440:	d008      	beq.n	800b454 <memmove+0x28>
 800b442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b44a:	e7f8      	b.n	800b43e <memmove+0x12>
 800b44c:	4402      	add	r2, r0
 800b44e:	4601      	mov	r1, r0
 800b450:	428a      	cmp	r2, r1
 800b452:	d100      	bne.n	800b456 <memmove+0x2a>
 800b454:	bd10      	pop	{r4, pc}
 800b456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b45e:	e7f7      	b.n	800b450 <memmove+0x24>

0800b460 <__malloc_lock>:
 800b460:	4801      	ldr	r0, [pc, #4]	; (800b468 <__malloc_lock+0x8>)
 800b462:	f7fe bde2 	b.w	800a02a <__retarget_lock_acquire_recursive>
 800b466:	bf00      	nop
 800b468:	2000065c 	.word	0x2000065c

0800b46c <__malloc_unlock>:
 800b46c:	4801      	ldr	r0, [pc, #4]	; (800b474 <__malloc_unlock+0x8>)
 800b46e:	f7fe bddd 	b.w	800a02c <__retarget_lock_release_recursive>
 800b472:	bf00      	nop
 800b474:	2000065c 	.word	0x2000065c

0800b478 <_realloc_r>:
 800b478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b47c:	4680      	mov	r8, r0
 800b47e:	4614      	mov	r4, r2
 800b480:	460e      	mov	r6, r1
 800b482:	b921      	cbnz	r1, 800b48e <_realloc_r+0x16>
 800b484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	4611      	mov	r1, r2
 800b48a:	f7ff bba1 	b.w	800abd0 <_malloc_r>
 800b48e:	b92a      	cbnz	r2, 800b49c <_realloc_r+0x24>
 800b490:	f7ff fb32 	bl	800aaf8 <_free_r>
 800b494:	4625      	mov	r5, r4
 800b496:	4628      	mov	r0, r5
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	f000 f835 	bl	800b50a <_malloc_usable_size_r>
 800b4a0:	4284      	cmp	r4, r0
 800b4a2:	4607      	mov	r7, r0
 800b4a4:	d802      	bhi.n	800b4ac <_realloc_r+0x34>
 800b4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4aa:	d812      	bhi.n	800b4d2 <_realloc_r+0x5a>
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	4640      	mov	r0, r8
 800b4b0:	f7ff fb8e 	bl	800abd0 <_malloc_r>
 800b4b4:	4605      	mov	r5, r0
 800b4b6:	2800      	cmp	r0, #0
 800b4b8:	d0ed      	beq.n	800b496 <_realloc_r+0x1e>
 800b4ba:	42bc      	cmp	r4, r7
 800b4bc:	4622      	mov	r2, r4
 800b4be:	4631      	mov	r1, r6
 800b4c0:	bf28      	it	cs
 800b4c2:	463a      	movcs	r2, r7
 800b4c4:	f7fe fe32 	bl	800a12c <memcpy>
 800b4c8:	4631      	mov	r1, r6
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	f7ff fb14 	bl	800aaf8 <_free_r>
 800b4d0:	e7e1      	b.n	800b496 <_realloc_r+0x1e>
 800b4d2:	4635      	mov	r5, r6
 800b4d4:	e7df      	b.n	800b496 <_realloc_r+0x1e>
	...

0800b4d8 <_read_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4d07      	ldr	r5, [pc, #28]	; (800b4f8 <_read_r+0x20>)
 800b4dc:	4604      	mov	r4, r0
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	602a      	str	r2, [r5, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f7f6 fea2 	bl	8002230 <_read>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_read_r+0x1e>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_read_r+0x1e>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	20000668 	.word	0x20000668

0800b4fc <abort>:
 800b4fc:	b508      	push	{r3, lr}
 800b4fe:	2006      	movs	r0, #6
 800b500:	f000 f834 	bl	800b56c <raise>
 800b504:	2001      	movs	r0, #1
 800b506:	f7f6 fe89 	bl	800221c <_exit>

0800b50a <_malloc_usable_size_r>:
 800b50a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b50e:	1f18      	subs	r0, r3, #4
 800b510:	2b00      	cmp	r3, #0
 800b512:	bfbc      	itt	lt
 800b514:	580b      	ldrlt	r3, [r1, r0]
 800b516:	18c0      	addlt	r0, r0, r3
 800b518:	4770      	bx	lr

0800b51a <_raise_r>:
 800b51a:	291f      	cmp	r1, #31
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4604      	mov	r4, r0
 800b520:	460d      	mov	r5, r1
 800b522:	d904      	bls.n	800b52e <_raise_r+0x14>
 800b524:	2316      	movs	r3, #22
 800b526:	6003      	str	r3, [r0, #0]
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	bd38      	pop	{r3, r4, r5, pc}
 800b52e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b530:	b112      	cbz	r2, 800b538 <_raise_r+0x1e>
 800b532:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b536:	b94b      	cbnz	r3, 800b54c <_raise_r+0x32>
 800b538:	4620      	mov	r0, r4
 800b53a:	f000 f831 	bl	800b5a0 <_getpid_r>
 800b53e:	462a      	mov	r2, r5
 800b540:	4601      	mov	r1, r0
 800b542:	4620      	mov	r0, r4
 800b544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b548:	f000 b818 	b.w	800b57c <_kill_r>
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d00a      	beq.n	800b566 <_raise_r+0x4c>
 800b550:	1c59      	adds	r1, r3, #1
 800b552:	d103      	bne.n	800b55c <_raise_r+0x42>
 800b554:	2316      	movs	r3, #22
 800b556:	6003      	str	r3, [r0, #0]
 800b558:	2001      	movs	r0, #1
 800b55a:	e7e7      	b.n	800b52c <_raise_r+0x12>
 800b55c:	2400      	movs	r4, #0
 800b55e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b562:	4628      	mov	r0, r5
 800b564:	4798      	blx	r3
 800b566:	2000      	movs	r0, #0
 800b568:	e7e0      	b.n	800b52c <_raise_r+0x12>
	...

0800b56c <raise>:
 800b56c:	4b02      	ldr	r3, [pc, #8]	; (800b578 <raise+0xc>)
 800b56e:	4601      	mov	r1, r0
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	f7ff bfd2 	b.w	800b51a <_raise_r>
 800b576:	bf00      	nop
 800b578:	20000294 	.word	0x20000294

0800b57c <_kill_r>:
 800b57c:	b538      	push	{r3, r4, r5, lr}
 800b57e:	4d07      	ldr	r5, [pc, #28]	; (800b59c <_kill_r+0x20>)
 800b580:	2300      	movs	r3, #0
 800b582:	4604      	mov	r4, r0
 800b584:	4608      	mov	r0, r1
 800b586:	4611      	mov	r1, r2
 800b588:	602b      	str	r3, [r5, #0]
 800b58a:	f7f6 fe37 	bl	80021fc <_kill>
 800b58e:	1c43      	adds	r3, r0, #1
 800b590:	d102      	bne.n	800b598 <_kill_r+0x1c>
 800b592:	682b      	ldr	r3, [r5, #0]
 800b594:	b103      	cbz	r3, 800b598 <_kill_r+0x1c>
 800b596:	6023      	str	r3, [r4, #0]
 800b598:	bd38      	pop	{r3, r4, r5, pc}
 800b59a:	bf00      	nop
 800b59c:	20000668 	.word	0x20000668

0800b5a0 <_getpid_r>:
 800b5a0:	f7f6 be24 	b.w	80021ec <_getpid>

0800b5a4 <_init>:
 800b5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a6:	bf00      	nop
 800b5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5aa:	bc08      	pop	{r3}
 800b5ac:	469e      	mov	lr, r3
 800b5ae:	4770      	bx	lr

0800b5b0 <_fini>:
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	bf00      	nop
 800b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5b6:	bc08      	pop	{r3}
 800b5b8:	469e      	mov	lr, r3
 800b5ba:	4770      	bx	lr
